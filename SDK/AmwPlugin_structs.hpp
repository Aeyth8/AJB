#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AmwPlugin

#include "Basic.hpp"


namespace SDK
{

// Enum AmwPlugin.EAmwEmoneyBrand
// NumValues: 0x0007
enum class EAmwEmoneyBrand : uint8
{
	UNKNOWN                                  = 0,
	NANACO                                   = 1,
	EDY                                      = 2,
	TRANSPORT                                = 3,
	WAON                                     = 4,
	PASELI                                   = 5,
	EAmwEmoneyBrand_MAX                      = 6,
};

// Enum AmwPlugin.EAmwTouchResult
// NumValues: 0x0008
enum class EAmwTouchResult : uint8
{
	SUCCESS                                  = 0,
	NO_READY                                 = 1,
	NOT_CONNECT                              = 2,
	TIMEOUT                                  = 3,
	RECOGNITION_ERROR                        = 4,
	NOT_SUPPORTED                            = 5,
	OTHER_ERROR                              = 6,
	EAmwTouchResult_MAX                      = 7,
};

// Enum AmwPlugin.EAmwSequenceMode
// NumValues: 0x0005
enum class EAmwSequenceMode : uint8
{
	TestMode                                 = 0,
	GameMode                                 = 1,
	StartPlay                                = 2,
	EndPlay                                  = 3,
	EAmwSequenceMode_MAX                     = 4,
};

// Enum AmwPlugin.EAmwBuildType
// NumValues: 0x0004
enum class EAmwBuildType : uint8
{
	Dev                                      = 0,
	Stg                                      = 1,
	Pro                                      = 2,
	EAmwBuildType_MAX                        = 3,
};

// Enum AmwPlugin.EAmwEmoneyStatus
// NumValues: 0x0006
enum class EAmwEmoneyStatus : uint8
{
	OK                                       = 0,
	NG                                       = 1,
	UNCONFIRMED                              = 2,
	INCOMPLETE                               = 3,
	CANCEL                                   = 4,
	EAmwEmoneyStatus_MAX                     = 5,
};

// Enum AmwPlugin.EAmwLedType
// NumValues: 0x0009
enum class EAmwLedType : uint8
{
	IDLE                                     = 0,
	ACCEPT                                   = 1,
	SUCCESS                                  = 2,
	WARNING                                  = 3,
	FAILURE                                  = 4,
	LED_R_ONLY                               = 5,
	LED_G_ONLY                               = 6,
	LED_B_ONLY                               = 7,
	EAmwLedType_MAX                          = 8,
};

// ScriptStruct AmwPlugin.AmwTouchInfo
// 0x0028 (0x0028 - 0x0000)
struct FAmwTouchInfo final
{
public:
	class FString                                 ChipID;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AccessCode;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCard;                                           // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAmwTouchInfo) == 0x000008, "Wrong alignment on FAmwTouchInfo");
static_assert(sizeof(FAmwTouchInfo) == 0x000028, "Wrong size on FAmwTouchInfo");
static_assert(offsetof(FAmwTouchInfo, ChipID) == 0x000000, "Member 'FAmwTouchInfo::ChipID' has a wrong offset!");
static_assert(offsetof(FAmwTouchInfo, AccessCode) == 0x000010, "Member 'FAmwTouchInfo::AccessCode' has a wrong offset!");
static_assert(offsetof(FAmwTouchInfo, bIsCard) == 0x000020, "Member 'FAmwTouchInfo::bIsCard' has a wrong offset!");

// ScriptStruct AmwPlugin.AmwEmoneyReportResult
// 0x0028 (0x0028 - 0x0000)
struct FAmwEmoneyReportResult final
{
public:
	EAmwEmoneyStatus                              Status;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Time;                                              // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AlarmCount;                                        // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AlarmAmount;                                       // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAmwEmoneyReportResult) == 0x000008, "Wrong alignment on FAmwEmoneyReportResult");
static_assert(sizeof(FAmwEmoneyReportResult) == 0x000028, "Wrong size on FAmwEmoneyReportResult");
static_assert(offsetof(FAmwEmoneyReportResult, Status) == 0x000000, "Member 'FAmwEmoneyReportResult::Status' has a wrong offset!");
static_assert(offsetof(FAmwEmoneyReportResult, Time) == 0x000008, "Member 'FAmwEmoneyReportResult::Time' has a wrong offset!");
static_assert(offsetof(FAmwEmoneyReportResult, Count) == 0x000018, "Member 'FAmwEmoneyReportResult::Count' has a wrong offset!");
static_assert(offsetof(FAmwEmoneyReportResult, Amount) == 0x00001C, "Member 'FAmwEmoneyReportResult::Amount' has a wrong offset!");
static_assert(offsetof(FAmwEmoneyReportResult, AlarmCount) == 0x000020, "Member 'FAmwEmoneyReportResult::AlarmCount' has a wrong offset!");
static_assert(offsetof(FAmwEmoneyReportResult, AlarmAmount) == 0x000024, "Member 'FAmwEmoneyReportResult::AlarmAmount' has a wrong offset!");

// ScriptStruct AmwPlugin.AmwEmoneyDealResult
// 0x0058 (0x0058 - 0x0000)
struct FAmwEmoneyDealResult final
{
public:
	EAmwEmoneyStatus                              Status;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAmwEmoneyBrand                               Brand;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BrandName;                                         // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Time;                                              // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WszDealNumber;                                     // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WszCardNumber;                                     // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BeforeBalance;                                     // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AfterBalance;                                      // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAmwEmoneyDealResult) == 0x000008, "Wrong alignment on FAmwEmoneyDealResult");
static_assert(sizeof(FAmwEmoneyDealResult) == 0x000058, "Wrong size on FAmwEmoneyDealResult");
static_assert(offsetof(FAmwEmoneyDealResult, Status) == 0x000000, "Member 'FAmwEmoneyDealResult::Status' has a wrong offset!");
static_assert(offsetof(FAmwEmoneyDealResult, Brand) == 0x000001, "Member 'FAmwEmoneyDealResult::Brand' has a wrong offset!");
static_assert(offsetof(FAmwEmoneyDealResult, BrandName) == 0x000008, "Member 'FAmwEmoneyDealResult::BrandName' has a wrong offset!");
static_assert(offsetof(FAmwEmoneyDealResult, Time) == 0x000018, "Member 'FAmwEmoneyDealResult::Time' has a wrong offset!");
static_assert(offsetof(FAmwEmoneyDealResult, WszDealNumber) == 0x000028, "Member 'FAmwEmoneyDealResult::WszDealNumber' has a wrong offset!");
static_assert(offsetof(FAmwEmoneyDealResult, WszCardNumber) == 0x000038, "Member 'FAmwEmoneyDealResult::WszCardNumber' has a wrong offset!");
static_assert(offsetof(FAmwEmoneyDealResult, Amount) == 0x000048, "Member 'FAmwEmoneyDealResult::Amount' has a wrong offset!");
static_assert(offsetof(FAmwEmoneyDealResult, BeforeBalance) == 0x00004C, "Member 'FAmwEmoneyDealResult::BeforeBalance' has a wrong offset!");
static_assert(offsetof(FAmwEmoneyDealResult, AfterBalance) == 0x000050, "Member 'FAmwEmoneyDealResult::AfterBalance' has a wrong offset!");

}

