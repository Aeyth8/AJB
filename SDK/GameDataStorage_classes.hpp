#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameDataStorage

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class GameDataStorage.GameDataStorageManager
// 0x0050 (0x0078 - 0x0028)
class UGameDataStorageManager : public UObject
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddStorageValueAsByte(const uint8 StorageCategory, const struct FGameplayTag& Key, const uint8 AddValue);
	void AddStorageValueAsFloat(const uint8 StorageCategory, const struct FGameplayTag& Key, const float AddValue);
	void AddStorageValueAsInt(const uint8 StorageCategory, const struct FGameplayTag& Key, const int32 AddValue);
	void AddStorageValueAsRotator(const uint8 StorageCategory, const struct FGameplayTag& Key, const struct FRotator& AddValue);
	void AddStorageValueAsVector(const uint8 StorageCategory, const struct FGameplayTag& Key, const struct FVector& AddValue);
	void AllReset();
	void CreateDataStorageSaveDataArray(TMap<uint8, struct FDataStorageSaveData>* OutSaveDataArray);
	void Initialize(const TArray<uint8>& CategoryValues);
	class FString JSONSerialize(const uint8 StorageCategory, const class FString& RemoveKeyName, const struct FGameplayTagContainer& KeyBlackList);
	void ResetCategory(const uint8 StorageCategory);
	void SetStorageValueAsByte(const uint8 StorageCategory, const struct FGameplayTag& Key, const uint8 Value);
	void SetStorageValueAsByteArray(const uint8 StorageCategory, const struct FGameplayTag& Key, const TArray<uint8>& Values);
	void SetStorageValueAsFloat(const uint8 StorageCategory, const struct FGameplayTag& Key, const float Value);
	void SetStorageValueAsFloatArray(const uint8 StorageCategory, const struct FGameplayTag& Key, const TArray<float>& Values);
	void SetStorageValueAsInt(const uint8 StorageCategory, const struct FGameplayTag& Key, const int32 Value);
	void SetStorageValueAsIntArray(const uint8 StorageCategory, const struct FGameplayTag& Key, const TArray<int32>& Values);
	void SetStorageValueAsRotator(const uint8 StorageCategory, const struct FGameplayTag& Key, const struct FRotator& Value);
	void SetStorageValueAsRotatorArray(const uint8 StorageCategory, const struct FGameplayTag& Key, const TArray<struct FRotator>& Values);
	void SetStorageValueAsString(const uint8 StorageCategory, const struct FGameplayTag& Key, const class FString& Value);
	void SetStorageValueAsStringArray(const uint8 StorageCategory, const struct FGameplayTag& Key, const TArray<class FString>& Values);
	void SetStorageValueAsVector(const uint8 StorageCategory, const struct FGameplayTag& Key, const struct FVector& Value);
	void SetStorageValueAsVectorArray(const uint8 StorageCategory, const struct FGameplayTag& Key, const TArray<struct FVector>& Values);
	void SetupDataStorageArray(const TMap<uint8, struct FDataStorageSaveData>& SaveDataArray);
	void SubStorageValueAsByte(const uint8 StorageCategory, const struct FGameplayTag& Key, const uint8 SubValue);
	void SubStorageValueAsFloat(const uint8 StorageCategory, const struct FGameplayTag& Key, const float SubValue);
	void SubStorageValueAsInt(const uint8 StorageCategory, const struct FGameplayTag& Key, const int32 SubValue);
	void SubStorageValueAsRotator(const uint8 StorageCategory, const struct FGameplayTag& Key, const struct FRotator& SubValue);
	void SubStorageValueAsVector(const uint8 StorageCategory, const struct FGameplayTag& Key, const struct FVector& SubValue);

	bool GetStorageValueAsByte(const uint8 StorageCategory, const struct FGameplayTag& Key, uint8* OutValue) const;
	bool GetStorageValueAsByteArray(const uint8 StorageCategory, const struct FGameplayTag& Key, TArray<uint8>* OutValues) const;
	bool GetStorageValueAsFloat(const uint8 StorageCategory, const struct FGameplayTag& Key, float* OutValue) const;
	bool GetStorageValueAsFloatArray(const uint8 StorageCategory, const struct FGameplayTag& Key, TArray<float>* OutValues) const;
	bool GetStorageValueAsInt(const uint8 StorageCategory, const struct FGameplayTag& Key, int32* OutValue) const;
	bool GetStorageValueAsIntArray(const uint8 StorageCategory, const struct FGameplayTag& Key, TArray<int32>* OutValues) const;
	bool GetStorageValueAsRotator(const uint8 StorageCategory, const struct FGameplayTag& Key, struct FRotator* OutValue) const;
	bool GetStorageValueAsRotatorArray(const uint8 StorageCategory, const struct FGameplayTag& Key, TArray<struct FRotator>* OutValues) const;
	bool GetStorageValueAsString(const uint8 StorageCategory, const struct FGameplayTag& Key, class FString* OutValue) const;
	bool GetStorageValueAsStringArray(const uint8 StorageCategory, const struct FGameplayTag& Key, TArray<class FString>* OutValues) const;
	bool GetStorageValueAsVector(const uint8 StorageCategory, const struct FGameplayTag& Key, struct FVector* OutValue) const;
	bool GetStorageValueAsVectorArray(const uint8 StorageCategory, const struct FGameplayTag& Key, TArray<struct FVector>* OutValues) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameDataStorageManager">();
	}
	static class UGameDataStorageManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameDataStorageManager>();
	}
};
static_assert(alignof(UGameDataStorageManager) == 0x000008, "Wrong alignment on UGameDataStorageManager");
static_assert(sizeof(UGameDataStorageManager) == 0x000078, "Wrong size on UGameDataStorageManager");

}

