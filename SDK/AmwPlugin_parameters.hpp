#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AmwPlugin

#include "Basic.hpp"

#include "AmwPlugin_structs.hpp"


namespace SDK::Params
{

// Function AmwPlugin.AmwDisplayCancelTest.AmwDisplayCancelTest
// 0x0010 (0x0010 - 0x0000)
struct AmwDisplayCancelTest_AmwDisplayCancelTest final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAmwDisplayCancelTest*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmwDisplayCancelTest_AmwDisplayCancelTest) == 0x000008, "Wrong alignment on AmwDisplayCancelTest_AmwDisplayCancelTest");
static_assert(sizeof(AmwDisplayCancelTest_AmwDisplayCancelTest) == 0x000010, "Wrong size on AmwDisplayCancelTest_AmwDisplayCancelTest");
static_assert(offsetof(AmwDisplayCancelTest_AmwDisplayCancelTest, WorldContextObject) == 0x000000, "Member 'AmwDisplayCancelTest_AmwDisplayCancelTest::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AmwDisplayCancelTest_AmwDisplayCancelTest, ReturnValue) == 0x000008, "Member 'AmwDisplayCancelTest_AmwDisplayCancelTest::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwDisplayStartTest.AmwDisplayStartTest
// 0x0010 (0x0010 - 0x0000)
struct AmwDisplayStartTest_AmwDisplayStartTest final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAmwDisplayStartTest*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmwDisplayStartTest_AmwDisplayStartTest) == 0x000008, "Wrong alignment on AmwDisplayStartTest_AmwDisplayStartTest");
static_assert(sizeof(AmwDisplayStartTest_AmwDisplayStartTest) == 0x000010, "Wrong size on AmwDisplayStartTest_AmwDisplayStartTest");
static_assert(offsetof(AmwDisplayStartTest_AmwDisplayStartTest, WorldContextObject) == 0x000000, "Member 'AmwDisplayStartTest_AmwDisplayStartTest::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AmwDisplayStartTest_AmwDisplayStartTest, ReturnValue) == 0x000008, "Member 'AmwDisplayStartTest_AmwDisplayStartTest::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwEmoneyAuthTerminal.AmwEmoneyAuthTerminal
// 0x0018 (0x0018 - 0x0000)
struct AmwEmoneyAuthTerminal_AmwEmoneyAuthTerminal final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeOutSeconds;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAmwEmoneyAuthTerminal*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmwEmoneyAuthTerminal_AmwEmoneyAuthTerminal) == 0x000008, "Wrong alignment on AmwEmoneyAuthTerminal_AmwEmoneyAuthTerminal");
static_assert(sizeof(AmwEmoneyAuthTerminal_AmwEmoneyAuthTerminal) == 0x000018, "Wrong size on AmwEmoneyAuthTerminal_AmwEmoneyAuthTerminal");
static_assert(offsetof(AmwEmoneyAuthTerminal_AmwEmoneyAuthTerminal, WorldContextObject) == 0x000000, "Member 'AmwEmoneyAuthTerminal_AmwEmoneyAuthTerminal::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AmwEmoneyAuthTerminal_AmwEmoneyAuthTerminal, TimeOutSeconds) == 0x000008, "Member 'AmwEmoneyAuthTerminal_AmwEmoneyAuthTerminal::TimeOutSeconds' has a wrong offset!");
static_assert(offsetof(AmwEmoneyAuthTerminal_AmwEmoneyAuthTerminal, ReturnValue) == 0x000010, "Member 'AmwEmoneyAuthTerminal_AmwEmoneyAuthTerminal::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwEmoneyCancel.AmwEmoneyCancel
// 0x0010 (0x0010 - 0x0000)
struct AmwEmoneyCancel_AmwEmoneyCancel final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAmwEmoneyCancel*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmwEmoneyCancel_AmwEmoneyCancel) == 0x000008, "Wrong alignment on AmwEmoneyCancel_AmwEmoneyCancel");
static_assert(sizeof(AmwEmoneyCancel_AmwEmoneyCancel) == 0x000010, "Wrong size on AmwEmoneyCancel_AmwEmoneyCancel");
static_assert(offsetof(AmwEmoneyCancel_AmwEmoneyCancel, WorldContextObject) == 0x000000, "Member 'AmwEmoneyCancel_AmwEmoneyCancel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AmwEmoneyCancel_AmwEmoneyCancel, ReturnValue) == 0x000008, "Member 'AmwEmoneyCancel_AmwEmoneyCancel::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwEmoneyPayAmount.AmwEmoneyPayAmount
// 0x0018 (0x0018 - 0x0000)
struct AmwEmoneyPayAmount_AmwEmoneyPayAmount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAmwEmoneyBrand                               Brand;                                             // 0x0008(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAmwEmoneyPayAmount*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmwEmoneyPayAmount_AmwEmoneyPayAmount) == 0x000008, "Wrong alignment on AmwEmoneyPayAmount_AmwEmoneyPayAmount");
static_assert(sizeof(AmwEmoneyPayAmount_AmwEmoneyPayAmount) == 0x000018, "Wrong size on AmwEmoneyPayAmount_AmwEmoneyPayAmount");
static_assert(offsetof(AmwEmoneyPayAmount_AmwEmoneyPayAmount, WorldContextObject) == 0x000000, "Member 'AmwEmoneyPayAmount_AmwEmoneyPayAmount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AmwEmoneyPayAmount_AmwEmoneyPayAmount, Brand) == 0x000008, "Member 'AmwEmoneyPayAmount_AmwEmoneyPayAmount::Brand' has a wrong offset!");
static_assert(offsetof(AmwEmoneyPayAmount_AmwEmoneyPayAmount, Value) == 0x00000C, "Member 'AmwEmoneyPayAmount_AmwEmoneyPayAmount::Value' has a wrong offset!");
static_assert(offsetof(AmwEmoneyPayAmount_AmwEmoneyPayAmount, ReturnValue) == 0x000010, "Member 'AmwEmoneyPayAmount_AmwEmoneyPayAmount::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwEmoneyRemoveTerminal.AmwEmoneyRemoveTerminal
// 0x0010 (0x0010 - 0x0000)
struct AmwEmoneyRemoveTerminal_AmwEmoneyRemoveTerminal final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAmwEmoneyRemoveTerminal*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmwEmoneyRemoveTerminal_AmwEmoneyRemoveTerminal) == 0x000008, "Wrong alignment on AmwEmoneyRemoveTerminal_AmwEmoneyRemoveTerminal");
static_assert(sizeof(AmwEmoneyRemoveTerminal_AmwEmoneyRemoveTerminal) == 0x000010, "Wrong size on AmwEmoneyRemoveTerminal_AmwEmoneyRemoveTerminal");
static_assert(offsetof(AmwEmoneyRemoveTerminal_AmwEmoneyRemoveTerminal, WorldContextObject) == 0x000000, "Member 'AmwEmoneyRemoveTerminal_AmwEmoneyRemoveTerminal::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AmwEmoneyRemoveTerminal_AmwEmoneyRemoveTerminal, ReturnValue) == 0x000008, "Member 'AmwEmoneyRemoveTerminal_AmwEmoneyRemoveTerminal::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwEmoneyRequestBalance.AmwEmoneyRequestBalance
// 0x0018 (0x0018 - 0x0000)
struct AmwEmoneyRequestBalance_AmwEmoneyRequestBalance final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAmwEmoneyBrand                               Brand;                                             // 0x0008(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAmwEmoneyRequestBalance*               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmwEmoneyRequestBalance_AmwEmoneyRequestBalance) == 0x000008, "Wrong alignment on AmwEmoneyRequestBalance_AmwEmoneyRequestBalance");
static_assert(sizeof(AmwEmoneyRequestBalance_AmwEmoneyRequestBalance) == 0x000018, "Wrong size on AmwEmoneyRequestBalance_AmwEmoneyRequestBalance");
static_assert(offsetof(AmwEmoneyRequestBalance_AmwEmoneyRequestBalance, WorldContextObject) == 0x000000, "Member 'AmwEmoneyRequestBalance_AmwEmoneyRequestBalance::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AmwEmoneyRequestBalance_AmwEmoneyRequestBalance, Brand) == 0x000008, "Member 'AmwEmoneyRequestBalance_AmwEmoneyRequestBalance::Brand' has a wrong offset!");
static_assert(offsetof(AmwEmoneyRequestBalance_AmwEmoneyRequestBalance, ReturnValue) == 0x000010, "Member 'AmwEmoneyRequestBalance_AmwEmoneyRequestBalance::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwLEDTest.AmwLEDTest
// 0x0018 (0x0018 - 0x0000)
struct AmwLEDTest_AmwLEDTest final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeviceIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAmwLEDTest*                            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmwLEDTest_AmwLEDTest) == 0x000008, "Wrong alignment on AmwLEDTest_AmwLEDTest");
static_assert(sizeof(AmwLEDTest_AmwLEDTest) == 0x000018, "Wrong size on AmwLEDTest_AmwLEDTest");
static_assert(offsetof(AmwLEDTest_AmwLEDTest, WorldContextObject) == 0x000000, "Member 'AmwLEDTest_AmwLEDTest::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AmwLEDTest_AmwLEDTest, DeviceIndex) == 0x000008, "Member 'AmwLEDTest_AmwLEDTest::DeviceIndex' has a wrong offset!");
static_assert(offsetof(AmwLEDTest_AmwLEDTest, ReturnValue) == 0x000010, "Member 'AmwLEDTest_AmwLEDTest::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwPluginFunctionLibrary.AmwChangeSequenceMode
// 0x0002 (0x0002 - 0x0000)
struct AmwPluginFunctionLibrary_AmwChangeSequenceMode final
{
public:
	EAmwSequenceMode                              NewMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmwPluginFunctionLibrary_AmwChangeSequenceMode) == 0x000001, "Wrong alignment on AmwPluginFunctionLibrary_AmwChangeSequenceMode");
static_assert(sizeof(AmwPluginFunctionLibrary_AmwChangeSequenceMode) == 0x000002, "Wrong size on AmwPluginFunctionLibrary_AmwChangeSequenceMode");
static_assert(offsetof(AmwPluginFunctionLibrary_AmwChangeSequenceMode, NewMode) == 0x000000, "Member 'AmwPluginFunctionLibrary_AmwChangeSequenceMode::NewMode' has a wrong offset!");
static_assert(offsetof(AmwPluginFunctionLibrary_AmwChangeSequenceMode, ReturnValue) == 0x000001, "Member 'AmwPluginFunctionLibrary_AmwChangeSequenceMode::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwPluginFunctionLibrary.AmwEmoneyCancelNoWait
// 0x0001 (0x0001 - 0x0000)
struct AmwPluginFunctionLibrary_AmwEmoneyCancelNoWait final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmwPluginFunctionLibrary_AmwEmoneyCancelNoWait) == 0x000001, "Wrong alignment on AmwPluginFunctionLibrary_AmwEmoneyCancelNoWait");
static_assert(sizeof(AmwPluginFunctionLibrary_AmwEmoneyCancelNoWait) == 0x000001, "Wrong size on AmwPluginFunctionLibrary_AmwEmoneyCancelNoWait");
static_assert(offsetof(AmwPluginFunctionLibrary_AmwEmoneyCancelNoWait, ReturnValue) == 0x000000, "Member 'AmwPluginFunctionLibrary_AmwEmoneyCancelNoWait::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwPluginFunctionLibrary.AmwGetBuildType
// 0x0001 (0x0001 - 0x0000)
struct AmwPluginFunctionLibrary_AmwGetBuildType final
{
public:
	EAmwBuildType                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmwPluginFunctionLibrary_AmwGetBuildType) == 0x000001, "Wrong alignment on AmwPluginFunctionLibrary_AmwGetBuildType");
static_assert(sizeof(AmwPluginFunctionLibrary_AmwGetBuildType) == 0x000001, "Wrong size on AmwPluginFunctionLibrary_AmwGetBuildType");
static_assert(offsetof(AmwPluginFunctionLibrary_AmwGetBuildType, ReturnValue) == 0x000000, "Member 'AmwPluginFunctionLibrary_AmwGetBuildType::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwPluginFunctionLibrary.AmwInsertCoin
// 0x0010 (0x0010 - 0x0000)
struct AmwPluginFunctionLibrary_AmwInsertCoin final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Slot;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Coin;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AmwPluginFunctionLibrary_AmwInsertCoin) == 0x000004, "Wrong alignment on AmwPluginFunctionLibrary_AmwInsertCoin");
static_assert(sizeof(AmwPluginFunctionLibrary_AmwInsertCoin) == 0x000010, "Wrong size on AmwPluginFunctionLibrary_AmwInsertCoin");
static_assert(offsetof(AmwPluginFunctionLibrary_AmwInsertCoin, Num) == 0x000000, "Member 'AmwPluginFunctionLibrary_AmwInsertCoin::Num' has a wrong offset!");
static_assert(offsetof(AmwPluginFunctionLibrary_AmwInsertCoin, Slot) == 0x000004, "Member 'AmwPluginFunctionLibrary_AmwInsertCoin::Slot' has a wrong offset!");
static_assert(offsetof(AmwPluginFunctionLibrary_AmwInsertCoin, Coin) == 0x000008, "Member 'AmwPluginFunctionLibrary_AmwInsertCoin::Coin' has a wrong offset!");
static_assert(offsetof(AmwPluginFunctionLibrary_AmwInsertCoin, ReturnValue) == 0x00000C, "Member 'AmwPluginFunctionLibrary_AmwInsertCoin::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwPluginFunctionLibrary.CancelAmwCommand
// 0x0008 (0x0008 - 0x0000)
struct AmwPluginFunctionLibrary_CancelAmwCommand final
{
public:
	int32                                         DeviceIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AmwPluginFunctionLibrary_CancelAmwCommand) == 0x000004, "Wrong alignment on AmwPluginFunctionLibrary_CancelAmwCommand");
static_assert(sizeof(AmwPluginFunctionLibrary_CancelAmwCommand) == 0x000008, "Wrong size on AmwPluginFunctionLibrary_CancelAmwCommand");
static_assert(offsetof(AmwPluginFunctionLibrary_CancelAmwCommand, DeviceIndex) == 0x000000, "Member 'AmwPluginFunctionLibrary_CancelAmwCommand::DeviceIndex' has a wrong offset!");
static_assert(offsetof(AmwPluginFunctionLibrary_CancelAmwCommand, ReturnValue) == 0x000004, "Member 'AmwPluginFunctionLibrary_CancelAmwCommand::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwPluginFunctionLibrary.CancelAmwDisplayTest
// 0x0001 (0x0001 - 0x0000)
struct AmwPluginFunctionLibrary_CancelAmwDisplayTest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmwPluginFunctionLibrary_CancelAmwDisplayTest) == 0x000001, "Wrong alignment on AmwPluginFunctionLibrary_CancelAmwDisplayTest");
static_assert(sizeof(AmwPluginFunctionLibrary_CancelAmwDisplayTest) == 0x000001, "Wrong size on AmwPluginFunctionLibrary_CancelAmwDisplayTest");
static_assert(offsetof(AmwPluginFunctionLibrary_CancelAmwDisplayTest, ReturnValue) == 0x000000, "Member 'AmwPluginFunctionLibrary_CancelAmwDisplayTest::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwPluginFunctionLibrary.EmoneyCompletePay
// 0x0001 (0x0001 - 0x0000)
struct AmwPluginFunctionLibrary_EmoneyCompletePay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmwPluginFunctionLibrary_EmoneyCompletePay) == 0x000001, "Wrong alignment on AmwPluginFunctionLibrary_EmoneyCompletePay");
static_assert(sizeof(AmwPluginFunctionLibrary_EmoneyCompletePay) == 0x000001, "Wrong size on AmwPluginFunctionLibrary_EmoneyCompletePay");
static_assert(offsetof(AmwPluginFunctionLibrary_EmoneyCompletePay, ReturnValue) == 0x000000, "Member 'AmwPluginFunctionLibrary_EmoneyCompletePay::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwPluginFunctionLibrary.GetAmCardReaderProperty
// 0x0030 (0x0030 - 0x0000)
struct AmwPluginFunctionLibrary_GetAmCardReaderProperty final
{
public:
	int32                                         DeviceIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OutHWVersion;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutFWVersion;                                      // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AmwPluginFunctionLibrary_GetAmCardReaderProperty) == 0x000008, "Wrong alignment on AmwPluginFunctionLibrary_GetAmCardReaderProperty");
static_assert(sizeof(AmwPluginFunctionLibrary_GetAmCardReaderProperty) == 0x000030, "Wrong size on AmwPluginFunctionLibrary_GetAmCardReaderProperty");
static_assert(offsetof(AmwPluginFunctionLibrary_GetAmCardReaderProperty, DeviceIndex) == 0x000000, "Member 'AmwPluginFunctionLibrary_GetAmCardReaderProperty::DeviceIndex' has a wrong offset!");
static_assert(offsetof(AmwPluginFunctionLibrary_GetAmCardReaderProperty, OutHWVersion) == 0x000008, "Member 'AmwPluginFunctionLibrary_GetAmCardReaderProperty::OutHWVersion' has a wrong offset!");
static_assert(offsetof(AmwPluginFunctionLibrary_GetAmCardReaderProperty, OutFWVersion) == 0x000018, "Member 'AmwPluginFunctionLibrary_GetAmCardReaderProperty::OutFWVersion' has a wrong offset!");
static_assert(offsetof(AmwPluginFunctionLibrary_GetAmCardReaderProperty, ReturnValue) == 0x000028, "Member 'AmwPluginFunctionLibrary_GetAmCardReaderProperty::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwPluginFunctionLibrary.GetAmwEmoneyTerminalId
// 0x0010 (0x0010 - 0x0000)
struct AmwPluginFunctionLibrary_GetAmwEmoneyTerminalId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmwPluginFunctionLibrary_GetAmwEmoneyTerminalId) == 0x000008, "Wrong alignment on AmwPluginFunctionLibrary_GetAmwEmoneyTerminalId");
static_assert(sizeof(AmwPluginFunctionLibrary_GetAmwEmoneyTerminalId) == 0x000010, "Wrong size on AmwPluginFunctionLibrary_GetAmwEmoneyTerminalId");
static_assert(offsetof(AmwPluginFunctionLibrary_GetAmwEmoneyTerminalId, ReturnValue) == 0x000000, "Member 'AmwPluginFunctionLibrary_GetAmwEmoneyTerminalId::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwPluginFunctionLibrary.GetAmwMacAddressString
// 0x0020 (0x0020 - 0x0000)
struct AmwPluginFunctionLibrary_GetAmwMacAddressString final
{
public:
	class FString                                 Delimiter;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmwPluginFunctionLibrary_GetAmwMacAddressString) == 0x000008, "Wrong alignment on AmwPluginFunctionLibrary_GetAmwMacAddressString");
static_assert(sizeof(AmwPluginFunctionLibrary_GetAmwMacAddressString) == 0x000020, "Wrong size on AmwPluginFunctionLibrary_GetAmwMacAddressString");
static_assert(offsetof(AmwPluginFunctionLibrary_GetAmwMacAddressString, Delimiter) == 0x000000, "Member 'AmwPluginFunctionLibrary_GetAmwMacAddressString::Delimiter' has a wrong offset!");
static_assert(offsetof(AmwPluginFunctionLibrary_GetAmwMacAddressString, ReturnValue) == 0x000010, "Member 'AmwPluginFunctionLibrary_GetAmwMacAddressString::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwPluginFunctionLibrary.GetEmoneyAvailableBrandInfo
// 0x0030 (0x0030 - 0x0000)
struct AmwPluginFunctionLibrary_GetEmoneyAvailableBrandInfo final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAmwEmoneyBrand                               OutBrand;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OutName;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutIconFilePath;                                   // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AmwPluginFunctionLibrary_GetEmoneyAvailableBrandInfo) == 0x000008, "Wrong alignment on AmwPluginFunctionLibrary_GetEmoneyAvailableBrandInfo");
static_assert(sizeof(AmwPluginFunctionLibrary_GetEmoneyAvailableBrandInfo) == 0x000030, "Wrong size on AmwPluginFunctionLibrary_GetEmoneyAvailableBrandInfo");
static_assert(offsetof(AmwPluginFunctionLibrary_GetEmoneyAvailableBrandInfo, Num) == 0x000000, "Member 'AmwPluginFunctionLibrary_GetEmoneyAvailableBrandInfo::Num' has a wrong offset!");
static_assert(offsetof(AmwPluginFunctionLibrary_GetEmoneyAvailableBrandInfo, OutBrand) == 0x000004, "Member 'AmwPluginFunctionLibrary_GetEmoneyAvailableBrandInfo::OutBrand' has a wrong offset!");
static_assert(offsetof(AmwPluginFunctionLibrary_GetEmoneyAvailableBrandInfo, OutName) == 0x000008, "Member 'AmwPluginFunctionLibrary_GetEmoneyAvailableBrandInfo::OutName' has a wrong offset!");
static_assert(offsetof(AmwPluginFunctionLibrary_GetEmoneyAvailableBrandInfo, OutIconFilePath) == 0x000018, "Member 'AmwPluginFunctionLibrary_GetEmoneyAvailableBrandInfo::OutIconFilePath' has a wrong offset!");
static_assert(offsetof(AmwPluginFunctionLibrary_GetEmoneyAvailableBrandInfo, ReturnValue) == 0x000028, "Member 'AmwPluginFunctionLibrary_GetEmoneyAvailableBrandInfo::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwPluginFunctionLibrary.GetEmoneyAvailableBrandTotal
// 0x0004 (0x0004 - 0x0000)
struct AmwPluginFunctionLibrary_GetEmoneyAvailableBrandTotal final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmwPluginFunctionLibrary_GetEmoneyAvailableBrandTotal) == 0x000004, "Wrong alignment on AmwPluginFunctionLibrary_GetEmoneyAvailableBrandTotal");
static_assert(sizeof(AmwPluginFunctionLibrary_GetEmoneyAvailableBrandTotal) == 0x000004, "Wrong size on AmwPluginFunctionLibrary_GetEmoneyAvailableBrandTotal");
static_assert(offsetof(AmwPluginFunctionLibrary_GetEmoneyAvailableBrandTotal, ReturnValue) == 0x000000, "Member 'AmwPluginFunctionLibrary_GetEmoneyAvailableBrandTotal::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwPluginFunctionLibrary.GetEmoneyDealResults
// 0x0018 (0x0018 - 0x0000)
struct AmwPluginFunctionLibrary_GetEmoneyDealResults final
{
public:
	TArray<struct FAmwEmoneyDealResult>           OutDealResults;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AmwPluginFunctionLibrary_GetEmoneyDealResults) == 0x000008, "Wrong alignment on AmwPluginFunctionLibrary_GetEmoneyDealResults");
static_assert(sizeof(AmwPluginFunctionLibrary_GetEmoneyDealResults) == 0x000018, "Wrong size on AmwPluginFunctionLibrary_GetEmoneyDealResults");
static_assert(offsetof(AmwPluginFunctionLibrary_GetEmoneyDealResults, OutDealResults) == 0x000000, "Member 'AmwPluginFunctionLibrary_GetEmoneyDealResults::OutDealResults' has a wrong offset!");
static_assert(offsetof(AmwPluginFunctionLibrary_GetEmoneyDealResults, ReturnValue) == 0x000010, "Member 'AmwPluginFunctionLibrary_GetEmoneyDealResults::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwPluginFunctionLibrary.GetEmoneyReportResults
// 0x0018 (0x0018 - 0x0000)
struct AmwPluginFunctionLibrary_GetEmoneyReportResults final
{
public:
	TArray<struct FAmwEmoneyReportResult>         OutReportResults;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AmwPluginFunctionLibrary_GetEmoneyReportResults) == 0x000008, "Wrong alignment on AmwPluginFunctionLibrary_GetEmoneyReportResults");
static_assert(sizeof(AmwPluginFunctionLibrary_GetEmoneyReportResults) == 0x000018, "Wrong size on AmwPluginFunctionLibrary_GetEmoneyReportResults");
static_assert(offsetof(AmwPluginFunctionLibrary_GetEmoneyReportResults, OutReportResults) == 0x000000, "Member 'AmwPluginFunctionLibrary_GetEmoneyReportResults::OutReportResults' has a wrong offset!");
static_assert(offsetof(AmwPluginFunctionLibrary_GetEmoneyReportResults, ReturnValue) == 0x000010, "Member 'AmwPluginFunctionLibrary_GetEmoneyReportResults::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwPluginFunctionLibrary.GetEventListener
// 0x0008 (0x0008 - 0x0000)
struct AmwPluginFunctionLibrary_GetEventListener final
{
public:
	class UAmwPluginEventListener*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmwPluginFunctionLibrary_GetEventListener) == 0x000008, "Wrong alignment on AmwPluginFunctionLibrary_GetEventListener");
static_assert(sizeof(AmwPluginFunctionLibrary_GetEventListener) == 0x000008, "Wrong size on AmwPluginFunctionLibrary_GetEventListener");
static_assert(offsetof(AmwPluginFunctionLibrary_GetEventListener, ReturnValue) == 0x000000, "Member 'AmwPluginFunctionLibrary_GetEventListener::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwPluginFunctionLibrary.GetLastEAmwTouchResult
// 0x0001 (0x0001 - 0x0000)
struct AmwPluginFunctionLibrary_GetLastEAmwTouchResult final
{
public:
	EAmwTouchResult                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmwPluginFunctionLibrary_GetLastEAmwTouchResult) == 0x000001, "Wrong alignment on AmwPluginFunctionLibrary_GetLastEAmwTouchResult");
static_assert(sizeof(AmwPluginFunctionLibrary_GetLastEAmwTouchResult) == 0x000001, "Wrong size on AmwPluginFunctionLibrary_GetLastEAmwTouchResult");
static_assert(offsetof(AmwPluginFunctionLibrary_GetLastEAmwTouchResult, ReturnValue) == 0x000000, "Member 'AmwPluginFunctionLibrary_GetLastEAmwTouchResult::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwPluginFunctionLibrary.InitializeAmwLibrary
// 0x0028 (0x0028 - 0x0000)
struct AmwPluginFunctionLibrary_InitializeAmwLibrary final
{
public:
	EAmwBuildType                                 Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OverwriteMainId;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AMCUSMacAddress;                                   // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmwPluginFunctionLibrary_InitializeAmwLibrary) == 0x000008, "Wrong alignment on AmwPluginFunctionLibrary_InitializeAmwLibrary");
static_assert(sizeof(AmwPluginFunctionLibrary_InitializeAmwLibrary) == 0x000028, "Wrong size on AmwPluginFunctionLibrary_InitializeAmwLibrary");
static_assert(offsetof(AmwPluginFunctionLibrary_InitializeAmwLibrary, Type) == 0x000000, "Member 'AmwPluginFunctionLibrary_InitializeAmwLibrary::Type' has a wrong offset!");
static_assert(offsetof(AmwPluginFunctionLibrary_InitializeAmwLibrary, OverwriteMainId) == 0x000008, "Member 'AmwPluginFunctionLibrary_InitializeAmwLibrary::OverwriteMainId' has a wrong offset!");
static_assert(offsetof(AmwPluginFunctionLibrary_InitializeAmwLibrary, AMCUSMacAddress) == 0x000018, "Member 'AmwPluginFunctionLibrary_InitializeAmwLibrary::AMCUSMacAddress' has a wrong offset!");

// Function AmwPlugin.AmwPluginFunctionLibrary.IsAmwConnect
// 0x0008 (0x0008 - 0x0000)
struct AmwPluginFunctionLibrary_IsAmwConnect final
{
public:
	int32                                         DeviceIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AmwPluginFunctionLibrary_IsAmwConnect) == 0x000004, "Wrong alignment on AmwPluginFunctionLibrary_IsAmwConnect");
static_assert(sizeof(AmwPluginFunctionLibrary_IsAmwConnect) == 0x000008, "Wrong size on AmwPluginFunctionLibrary_IsAmwConnect");
static_assert(offsetof(AmwPluginFunctionLibrary_IsAmwConnect, DeviceIndex) == 0x000000, "Member 'AmwPluginFunctionLibrary_IsAmwConnect::DeviceIndex' has a wrong offset!");
static_assert(offsetof(AmwPluginFunctionLibrary_IsAmwConnect, ReturnValue) == 0x000004, "Member 'AmwPluginFunctionLibrary_IsAmwConnect::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwPluginFunctionLibrary.IsAmwDisplayConnected
// 0x0001 (0x0001 - 0x0000)
struct AmwPluginFunctionLibrary_IsAmwDisplayConnected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmwPluginFunctionLibrary_IsAmwDisplayConnected) == 0x000001, "Wrong alignment on AmwPluginFunctionLibrary_IsAmwDisplayConnected");
static_assert(sizeof(AmwPluginFunctionLibrary_IsAmwDisplayConnected) == 0x000001, "Wrong size on AmwPluginFunctionLibrary_IsAmwDisplayConnected");
static_assert(offsetof(AmwPluginFunctionLibrary_IsAmwDisplayConnected, ReturnValue) == 0x000000, "Member 'AmwPluginFunctionLibrary_IsAmwDisplayConnected::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwPluginFunctionLibrary.IsAmwDoneTask
// 0x0008 (0x0008 - 0x0000)
struct AmwPluginFunctionLibrary_IsAmwDoneTask final
{
public:
	int32                                         DeviceIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AmwPluginFunctionLibrary_IsAmwDoneTask) == 0x000004, "Wrong alignment on AmwPluginFunctionLibrary_IsAmwDoneTask");
static_assert(sizeof(AmwPluginFunctionLibrary_IsAmwDoneTask) == 0x000008, "Wrong size on AmwPluginFunctionLibrary_IsAmwDoneTask");
static_assert(offsetof(AmwPluginFunctionLibrary_IsAmwDoneTask, DeviceIndex) == 0x000000, "Member 'AmwPluginFunctionLibrary_IsAmwDoneTask::DeviceIndex' has a wrong offset!");
static_assert(offsetof(AmwPluginFunctionLibrary_IsAmwDoneTask, ReturnValue) == 0x000004, "Member 'AmwPluginFunctionLibrary_IsAmwDoneTask::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwPluginFunctionLibrary.IsAmwEmoneyActivated
// 0x0001 (0x0001 - 0x0000)
struct AmwPluginFunctionLibrary_IsAmwEmoneyActivated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmwPluginFunctionLibrary_IsAmwEmoneyActivated) == 0x000001, "Wrong alignment on AmwPluginFunctionLibrary_IsAmwEmoneyActivated");
static_assert(sizeof(AmwPluginFunctionLibrary_IsAmwEmoneyActivated) == 0x000001, "Wrong size on AmwPluginFunctionLibrary_IsAmwEmoneyActivated");
static_assert(offsetof(AmwPluginFunctionLibrary_IsAmwEmoneyActivated, ReturnValue) == 0x000000, "Member 'AmwPluginFunctionLibrary_IsAmwEmoneyActivated::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwPluginFunctionLibrary.IsAmwEmoneyAliveServer
// 0x0001 (0x0001 - 0x0000)
struct AmwPluginFunctionLibrary_IsAmwEmoneyAliveServer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmwPluginFunctionLibrary_IsAmwEmoneyAliveServer) == 0x000001, "Wrong alignment on AmwPluginFunctionLibrary_IsAmwEmoneyAliveServer");
static_assert(sizeof(AmwPluginFunctionLibrary_IsAmwEmoneyAliveServer) == 0x000001, "Wrong size on AmwPluginFunctionLibrary_IsAmwEmoneyAliveServer");
static_assert(offsetof(AmwPluginFunctionLibrary_IsAmwEmoneyAliveServer, ReturnValue) == 0x000000, "Member 'AmwPluginFunctionLibrary_IsAmwEmoneyAliveServer::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwPluginFunctionLibrary.IsAmwEmoneyCancelCommand
// 0x0001 (0x0001 - 0x0000)
struct AmwPluginFunctionLibrary_IsAmwEmoneyCancelCommand final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmwPluginFunctionLibrary_IsAmwEmoneyCancelCommand) == 0x000001, "Wrong alignment on AmwPluginFunctionLibrary_IsAmwEmoneyCancelCommand");
static_assert(sizeof(AmwPluginFunctionLibrary_IsAmwEmoneyCancelCommand) == 0x000001, "Wrong size on AmwPluginFunctionLibrary_IsAmwEmoneyCancelCommand");
static_assert(offsetof(AmwPluginFunctionLibrary_IsAmwEmoneyCancelCommand, ReturnValue) == 0x000000, "Member 'AmwPluginFunctionLibrary_IsAmwEmoneyCancelCommand::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwPluginFunctionLibrary.IsAmwLibraryReady
// 0x0001 (0x0001 - 0x0000)
struct AmwPluginFunctionLibrary_IsAmwLibraryReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmwPluginFunctionLibrary_IsAmwLibraryReady) == 0x000001, "Wrong alignment on AmwPluginFunctionLibrary_IsAmwLibraryReady");
static_assert(sizeof(AmwPluginFunctionLibrary_IsAmwLibraryReady) == 0x000001, "Wrong size on AmwPluginFunctionLibrary_IsAmwLibraryReady");
static_assert(offsetof(AmwPluginFunctionLibrary_IsAmwLibraryReady, ReturnValue) == 0x000000, "Member 'AmwPluginFunctionLibrary_IsAmwLibraryReady::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwPluginFunctionLibrary.IsAmwSystemError
// 0x0001 (0x0001 - 0x0000)
struct AmwPluginFunctionLibrary_IsAmwSystemError final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmwPluginFunctionLibrary_IsAmwSystemError) == 0x000001, "Wrong alignment on AmwPluginFunctionLibrary_IsAmwSystemError");
static_assert(sizeof(AmwPluginFunctionLibrary_IsAmwSystemError) == 0x000001, "Wrong size on AmwPluginFunctionLibrary_IsAmwSystemError");
static_assert(offsetof(AmwPluginFunctionLibrary_IsAmwSystemError, ReturnValue) == 0x000000, "Member 'AmwPluginFunctionLibrary_IsAmwSystemError::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwPluginFunctionLibrary.IsSuccessAmwUpdateFirmwar
// 0x0008 (0x0008 - 0x0000)
struct AmwPluginFunctionLibrary_IsSuccessAmwUpdateFirmwar final
{
public:
	int32                                         DeviceIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AmwPluginFunctionLibrary_IsSuccessAmwUpdateFirmwar) == 0x000004, "Wrong alignment on AmwPluginFunctionLibrary_IsSuccessAmwUpdateFirmwar");
static_assert(sizeof(AmwPluginFunctionLibrary_IsSuccessAmwUpdateFirmwar) == 0x000008, "Wrong size on AmwPluginFunctionLibrary_IsSuccessAmwUpdateFirmwar");
static_assert(offsetof(AmwPluginFunctionLibrary_IsSuccessAmwUpdateFirmwar, DeviceIndex) == 0x000000, "Member 'AmwPluginFunctionLibrary_IsSuccessAmwUpdateFirmwar::DeviceIndex' has a wrong offset!");
static_assert(offsetof(AmwPluginFunctionLibrary_IsSuccessAmwUpdateFirmwar, ReturnValue) == 0x000004, "Member 'AmwPluginFunctionLibrary_IsSuccessAmwUpdateFirmwar::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwPluginFunctionLibrary.SetAmwLED
// 0x0008 (0x0008 - 0x0000)
struct AmwPluginFunctionLibrary_SetAmwLED final
{
public:
	int32                                         DeviceIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAmwLedType                                   LedType;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AmwPluginFunctionLibrary_SetAmwLED) == 0x000004, "Wrong alignment on AmwPluginFunctionLibrary_SetAmwLED");
static_assert(sizeof(AmwPluginFunctionLibrary_SetAmwLED) == 0x000008, "Wrong size on AmwPluginFunctionLibrary_SetAmwLED");
static_assert(offsetof(AmwPluginFunctionLibrary_SetAmwLED, DeviceIndex) == 0x000000, "Member 'AmwPluginFunctionLibrary_SetAmwLED::DeviceIndex' has a wrong offset!");
static_assert(offsetof(AmwPluginFunctionLibrary_SetAmwLED, LedType) == 0x000004, "Member 'AmwPluginFunctionLibrary_SetAmwLED::LedType' has a wrong offset!");

// Function AmwPlugin.AmwPluginFunctionLibrary.SetupEventListener
// 0x0008 (0x0008 - 0x0000)
struct AmwPluginFunctionLibrary_SetupEventListener final
{
public:
	class UAmwPluginEventListener*                EventListener;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmwPluginFunctionLibrary_SetupEventListener) == 0x000008, "Wrong alignment on AmwPluginFunctionLibrary_SetupEventListener");
static_assert(sizeof(AmwPluginFunctionLibrary_SetupEventListener) == 0x000008, "Wrong size on AmwPluginFunctionLibrary_SetupEventListener");
static_assert(offsetof(AmwPluginFunctionLibrary_SetupEventListener, EventListener) == 0x000000, "Member 'AmwPluginFunctionLibrary_SetupEventListener::EventListener' has a wrong offset!");

// Function AmwPlugin.AmwPluginFunctionLibrary.TryGetAmwEmoneyBrandInfo
// 0x0030 (0x0030 - 0x0000)
struct AmwPluginFunctionLibrary_TryGetAmwEmoneyBrandInfo final
{
public:
	EAmwEmoneyBrand                               Brand;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OutName;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutFilePath;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AmwPluginFunctionLibrary_TryGetAmwEmoneyBrandInfo) == 0x000008, "Wrong alignment on AmwPluginFunctionLibrary_TryGetAmwEmoneyBrandInfo");
static_assert(sizeof(AmwPluginFunctionLibrary_TryGetAmwEmoneyBrandInfo) == 0x000030, "Wrong size on AmwPluginFunctionLibrary_TryGetAmwEmoneyBrandInfo");
static_assert(offsetof(AmwPluginFunctionLibrary_TryGetAmwEmoneyBrandInfo, Brand) == 0x000000, "Member 'AmwPluginFunctionLibrary_TryGetAmwEmoneyBrandInfo::Brand' has a wrong offset!");
static_assert(offsetof(AmwPluginFunctionLibrary_TryGetAmwEmoneyBrandInfo, OutName) == 0x000008, "Member 'AmwPluginFunctionLibrary_TryGetAmwEmoneyBrandInfo::OutName' has a wrong offset!");
static_assert(offsetof(AmwPluginFunctionLibrary_TryGetAmwEmoneyBrandInfo, OutFilePath) == 0x000018, "Member 'AmwPluginFunctionLibrary_TryGetAmwEmoneyBrandInfo::OutFilePath' has a wrong offset!");
static_assert(offsetof(AmwPluginFunctionLibrary_TryGetAmwEmoneyBrandInfo, ReturnValue) == 0x000028, "Member 'AmwPluginFunctionLibrary_TryGetAmwEmoneyBrandInfo::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwPluginFunctionLibrary.TryGetEmoneyLatestDealResult
// 0x0060 (0x0060 - 0x0000)
struct AmwPluginFunctionLibrary_TryGetEmoneyLatestDealResult final
{
public:
	struct FAmwEmoneyDealResult                   OutResult;                                         // 0x0000(0x0058)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AmwPluginFunctionLibrary_TryGetEmoneyLatestDealResult) == 0x000008, "Wrong alignment on AmwPluginFunctionLibrary_TryGetEmoneyLatestDealResult");
static_assert(sizeof(AmwPluginFunctionLibrary_TryGetEmoneyLatestDealResult) == 0x000060, "Wrong size on AmwPluginFunctionLibrary_TryGetEmoneyLatestDealResult");
static_assert(offsetof(AmwPluginFunctionLibrary_TryGetEmoneyLatestDealResult, OutResult) == 0x000000, "Member 'AmwPluginFunctionLibrary_TryGetEmoneyLatestDealResult::OutResult' has a wrong offset!");
static_assert(offsetof(AmwPluginFunctionLibrary_TryGetEmoneyLatestDealResult, ReturnValue) == 0x000058, "Member 'AmwPluginFunctionLibrary_TryGetEmoneyLatestDealResult::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwSystemCheck.AmwSystenCheck
// 0x0018 (0x0018 - 0x0000)
struct AmwSystemCheck_AmwSystenCheck final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeviceIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAmwSystemCheck*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmwSystemCheck_AmwSystenCheck) == 0x000008, "Wrong alignment on AmwSystemCheck_AmwSystenCheck");
static_assert(sizeof(AmwSystemCheck_AmwSystenCheck) == 0x000018, "Wrong size on AmwSystemCheck_AmwSystenCheck");
static_assert(offsetof(AmwSystemCheck_AmwSystenCheck, WorldContextObject) == 0x000000, "Member 'AmwSystemCheck_AmwSystenCheck::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AmwSystemCheck_AmwSystenCheck, DeviceIndex) == 0x000008, "Member 'AmwSystemCheck_AmwSystenCheck::DeviceIndex' has a wrong offset!");
static_assert(offsetof(AmwSystemCheck_AmwSystenCheck, ReturnValue) == 0x000010, "Member 'AmwSystemCheck_AmwSystenCheck::ReturnValue' has a wrong offset!");

// Function AmwPlugin.AmwWaitTouch.AmwWaitTouch
// 0x0020 (0x0020 - 0x0000)
struct AmwWaitTouch_AmwWaitTouch final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeviceIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMobileOnly;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TimeOutSeconds;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnableLED;                                      // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAmwWaitTouch*                          ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmwWaitTouch_AmwWaitTouch) == 0x000008, "Wrong alignment on AmwWaitTouch_AmwWaitTouch");
static_assert(sizeof(AmwWaitTouch_AmwWaitTouch) == 0x000020, "Wrong size on AmwWaitTouch_AmwWaitTouch");
static_assert(offsetof(AmwWaitTouch_AmwWaitTouch, WorldContextObject) == 0x000000, "Member 'AmwWaitTouch_AmwWaitTouch::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AmwWaitTouch_AmwWaitTouch, DeviceIndex) == 0x000008, "Member 'AmwWaitTouch_AmwWaitTouch::DeviceIndex' has a wrong offset!");
static_assert(offsetof(AmwWaitTouch_AmwWaitTouch, bMobileOnly) == 0x00000C, "Member 'AmwWaitTouch_AmwWaitTouch::bMobileOnly' has a wrong offset!");
static_assert(offsetof(AmwWaitTouch_AmwWaitTouch, TimeOutSeconds) == 0x000010, "Member 'AmwWaitTouch_AmwWaitTouch::TimeOutSeconds' has a wrong offset!");
static_assert(offsetof(AmwWaitTouch_AmwWaitTouch, bIsEnableLED) == 0x000014, "Member 'AmwWaitTouch_AmwWaitTouch::bIsEnableLED' has a wrong offset!");
static_assert(offsetof(AmwWaitTouch_AmwWaitTouch, ReturnValue) == 0x000018, "Member 'AmwWaitTouch_AmwWaitTouch::ReturnValue' has a wrong offset!");

}

