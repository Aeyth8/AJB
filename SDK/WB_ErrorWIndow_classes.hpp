#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_ErrorWIndow

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AJB_structs.hpp"
#include "AJB_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_ErrorWIndow.WB_ErrorWindow_C
// 0x0068 (0x0328 - 0x02C0)
class UWB_ErrorWindow_C final : public UAJBWindowWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(Transient, DuplicateTransient)
	class UWidgetAnimation*                       NewAnimation_1;                                    // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              Img_BG;                                            // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               TextOnlyRoot;                                      // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               TitleRoot;                                         // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          Txt_Title;                                         // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          Txt_TitleTxt;                                      // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          Txt_TxtOnly;                                       // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	EAJBConfirmResult                             ButtonResult;                                      // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnFinishedConfirmDispatcher;                       // 0x0308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bButtonMode;                                       // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_319[0x7];                                      // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           PlayingErrorSE;                                    // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnFinishedConfirmDispatcher__DelegateSignature(EAJBConfirmResult Result);
	void ExecuteUbergraph_WB_ErrorWindow(int32 EntryPoint);
	void HideTitle();
	void Destruct();
	void OnFinishedOpenCurveAnim();
	void Construct();
	void ShowTitle(const class FText& Title, const class FText& Text, bool ErrorSoud);
	void ShowTextOnly(const class FText& Text);
	void OnClosingWindow();
	void OnOpeningWindow();
	void GetButtonResult(EAJBConfirmResult* Result);
	bool IsModeless();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_ErrorWindow_C">();
	}
	static class UWB_ErrorWindow_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_ErrorWindow_C>();
	}
};
static_assert(alignof(UWB_ErrorWindow_C) == 0x000008, "Wrong alignment on UWB_ErrorWindow_C");
static_assert(sizeof(UWB_ErrorWindow_C) == 0x000328, "Wrong size on UWB_ErrorWindow_C");
static_assert(offsetof(UWB_ErrorWindow_C, UberGraphFrame) == 0x0002C0, "Member 'UWB_ErrorWindow_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_ErrorWindow_C, NewAnimation_1) == 0x0002C8, "Member 'UWB_ErrorWindow_C::NewAnimation_1' has a wrong offset!");
static_assert(offsetof(UWB_ErrorWindow_C, Img_BG) == 0x0002D0, "Member 'UWB_ErrorWindow_C::Img_BG' has a wrong offset!");
static_assert(offsetof(UWB_ErrorWindow_C, TextOnlyRoot) == 0x0002D8, "Member 'UWB_ErrorWindow_C::TextOnlyRoot' has a wrong offset!");
static_assert(offsetof(UWB_ErrorWindow_C, TitleRoot) == 0x0002E0, "Member 'UWB_ErrorWindow_C::TitleRoot' has a wrong offset!");
static_assert(offsetof(UWB_ErrorWindow_C, Txt_Title) == 0x0002E8, "Member 'UWB_ErrorWindow_C::Txt_Title' has a wrong offset!");
static_assert(offsetof(UWB_ErrorWindow_C, Txt_TitleTxt) == 0x0002F0, "Member 'UWB_ErrorWindow_C::Txt_TitleTxt' has a wrong offset!");
static_assert(offsetof(UWB_ErrorWindow_C, Txt_TxtOnly) == 0x0002F8, "Member 'UWB_ErrorWindow_C::Txt_TxtOnly' has a wrong offset!");
static_assert(offsetof(UWB_ErrorWindow_C, ButtonResult) == 0x000300, "Member 'UWB_ErrorWindow_C::ButtonResult' has a wrong offset!");
static_assert(offsetof(UWB_ErrorWindow_C, OnFinishedConfirmDispatcher) == 0x000308, "Member 'UWB_ErrorWindow_C::OnFinishedConfirmDispatcher' has a wrong offset!");
static_assert(offsetof(UWB_ErrorWindow_C, bButtonMode) == 0x000318, "Member 'UWB_ErrorWindow_C::bButtonMode' has a wrong offset!");
static_assert(offsetof(UWB_ErrorWindow_C, PlayingErrorSE) == 0x000320, "Member 'UWB_ErrorWindow_C::PlayingErrorSE' has a wrong offset!");

}

