#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBStartupPlayerController

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AJB_structs.hpp"
#include "AJB_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBStartupPlayerController.BP_AJBStartupPlayerController_C
// 0x0080 (0x0778 - 0x06F8)
class ABP_AJBStartupPlayerController_C final : public AAJBPlayerControllerBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06F8(0x0008)(Transient, DuplicateTransient)
	class UBP_GameFlowStateManager_C*             BP_GameFlowStateManager;                           // 0x0700(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBStartupHUD_C*                    StartupHUD;                                        // 0x0708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAJBErrorID                                   SerialNumberError;                                 // 0x0710(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsConnectUSIO;                                    // 0x0711(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EAJBErrorID                                   ShowErrorID;                                       // 0x0712(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_713[0x5];                                      // 0x0713(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UNetHttp*                               NetHttp;                                           // 0x0718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAJBTestModeGameServerError                   GameServerError;                                   // 0x0720(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAJBNetAPIResult                              GameServerResult;                                  // 0x0721(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAJBTestModeUpdateServerError                 UpdateServerError;                                 // 0x0722(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAJBTestModeAllNetError                       AllNetCheckError;                                  // 0x0723(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_724[0x4];                                      // 0x0724(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CheckStartDate;                                    // 0x0728(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	EAJBAllNetTenpoError                          LocalNetCheckError;                                // 0x0730(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSupportIOBoard;                                  // 0x0731(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_732[0x6];                                      // 0x0732(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SupportIOBoardName;                                // 0x0738(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class ABP_AJBWwiseManager_C*                  WwiseManager;                                      // 0x0748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsAmwOK;                                          // 0x0750(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EAJBErrorID                                   CurrentError;                                      // 0x0751(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsVFDConnect;                                      // 0x0752(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bStopError;                                        // 0x0753(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_754[0x4];                                      // 0x0754(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EAJBErrorID>                           CheckErrorList;                                    // 0x0758(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         EmoneyCancelCheckCount;                            // 0x0768(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsSettingIP;                                      // 0x076C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_76D[0x3];                                      // 0x076D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RetryCountOfPinggingToServer;                      // 0x0770(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxRetryCountOfPinggingToServer;                   // 0x0774(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBStartupPlayerController(int32 EntryPoint);
	void OnBegin_Wait(const struct FGameplayTag& PrevState);
	void OnEnd_UpdateServerCheck(const struct FGameplayTag& NextState);
	void OnEnd_LoadSaveData(const struct FGameplayTag& NextState);
	void EnableErrorAlert();
	void OnTick_LoadSaveData(float DeltaSecond);
	void OnBegin_LoadSaveData(const struct FGameplayTag& PrevState);
	void OnTick_ErrorAlert(float DeltaSecond);
	void OnTick_UpdateServerCheck(float DeltaSecond);
	void UpdateNetworkTextResult();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void OnTick_LocalNetworlCheck(float DeltaSecond);
	void OnTIck_AllNetCheck(float DeltaSecond);
	void OnBegin_ErrorAlert(const struct FGameplayTag& PrevState);
	void OnNetworkError(int32 Code, const class FString& Errmsg);
	void OnBegin_LocalNetworkCheck(const struct FGameplayTag& PrevState);
	void OnBegin_End(const struct FGameplayTag& PrevState);
	void OnBegin_NOTICE(const struct FGameplayTag& PrevState);
	void OnBegin_UpdateServerCheck(const struct FGameplayTag& PrevState);
	void OnBegin_GameServerCheck(const struct FGameplayTag& PrevState);
	void OnBegin_AllNetCheck(const struct FGameplayTag& PrevState);
	void OnBegin_BackupCheck(const struct FGameplayTag& PrevState);
	void OnBegin_BNCRWCheck(const struct FGameplayTag& PrevState);
	void OnBegin_IOCheck(const struct FGameplayTag& PrevState);
	void OnBegin_SNCheck(const struct FGameplayTag& PrevState);
	void BindStateEvent();
	void ReceiveBeginPlay();
	void OnSuccess_28C9634A464F162EEEF19AAC35E99753();
	void OnFailed_28C9634A464F162EEEF19AAC35E99753();
	void OnSuccess_B7E80C254ADD1342D38938868FAD131C(EAJBNetAPIResult Result);
	void OnFailed_B7E80C254ADD1342D38938868FAD131C(EAJBNetAPIResult Result);
	void OnSuccess_597CD0864950CC3DCE3CE99B0AE81882(const class FString& IP);
	void OnFailed_597CD0864950CC3DCE3CE99B0AE81882(const class FString& IP);
	void OnSuccess_D1EE11994FAE53D9DB1BEDBDE9BB43F0(bool Result);
	void OnFailed_D1EE11994FAE53D9DB1BEDBDE9BB43F0(bool Result);
	void OnSuccess_74165C6E4DB3611AB07C4C89DAA83739();
	void OnFailed_74165C6E4DB3611AB07C4C89DAA83739();
	void OnSuccess_AFAF83754967FF0B8A7DF38FE1D037A7();
	void OnFailed_AFAF83754967FF0B8A7DF38FE1D037A7();
	void OnSuccess_5D24431B4888EC029B6A7EA48F26F0A7();
	void OnFailed_5D24431B4888EC029B6A7EA48F26F0A7();
	void OnSuccess_29B56AC54AE0D96127747995ED35E5E5(EAJBNetAPIResult Result);
	void OnFailed_29B56AC54AE0D96127747995ED35E5E5(EAJBNetAPIResult Result);
	void UserConstructionScript();
	void GetSystemCheckUI(class UWB_AJBSystemCheck_C** SystemCheckUI);
	void FinishSystemCheck();
	void ShowActiveError();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBStartupPlayerController_C">();
	}
	static class ABP_AJBStartupPlayerController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBStartupPlayerController_C>();
	}
};
static_assert(alignof(ABP_AJBStartupPlayerController_C) == 0x000008, "Wrong alignment on ABP_AJBStartupPlayerController_C");
static_assert(sizeof(ABP_AJBStartupPlayerController_C) == 0x000778, "Wrong size on ABP_AJBStartupPlayerController_C");
static_assert(offsetof(ABP_AJBStartupPlayerController_C, UberGraphFrame) == 0x0006F8, "Member 'ABP_AJBStartupPlayerController_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AJBStartupPlayerController_C, BP_GameFlowStateManager) == 0x000700, "Member 'ABP_AJBStartupPlayerController_C::BP_GameFlowStateManager' has a wrong offset!");
static_assert(offsetof(ABP_AJBStartupPlayerController_C, StartupHUD) == 0x000708, "Member 'ABP_AJBStartupPlayerController_C::StartupHUD' has a wrong offset!");
static_assert(offsetof(ABP_AJBStartupPlayerController_C, SerialNumberError) == 0x000710, "Member 'ABP_AJBStartupPlayerController_C::SerialNumberError' has a wrong offset!");
static_assert(offsetof(ABP_AJBStartupPlayerController_C, bIsConnectUSIO) == 0x000711, "Member 'ABP_AJBStartupPlayerController_C::bIsConnectUSIO' has a wrong offset!");
static_assert(offsetof(ABP_AJBStartupPlayerController_C, ShowErrorID) == 0x000712, "Member 'ABP_AJBStartupPlayerController_C::ShowErrorID' has a wrong offset!");
static_assert(offsetof(ABP_AJBStartupPlayerController_C, NetHttp) == 0x000718, "Member 'ABP_AJBStartupPlayerController_C::NetHttp' has a wrong offset!");
static_assert(offsetof(ABP_AJBStartupPlayerController_C, GameServerError) == 0x000720, "Member 'ABP_AJBStartupPlayerController_C::GameServerError' has a wrong offset!");
static_assert(offsetof(ABP_AJBStartupPlayerController_C, GameServerResult) == 0x000721, "Member 'ABP_AJBStartupPlayerController_C::GameServerResult' has a wrong offset!");
static_assert(offsetof(ABP_AJBStartupPlayerController_C, UpdateServerError) == 0x000722, "Member 'ABP_AJBStartupPlayerController_C::UpdateServerError' has a wrong offset!");
static_assert(offsetof(ABP_AJBStartupPlayerController_C, AllNetCheckError) == 0x000723, "Member 'ABP_AJBStartupPlayerController_C::AllNetCheckError' has a wrong offset!");
static_assert(offsetof(ABP_AJBStartupPlayerController_C, CheckStartDate) == 0x000728, "Member 'ABP_AJBStartupPlayerController_C::CheckStartDate' has a wrong offset!");
static_assert(offsetof(ABP_AJBStartupPlayerController_C, LocalNetCheckError) == 0x000730, "Member 'ABP_AJBStartupPlayerController_C::LocalNetCheckError' has a wrong offset!");
static_assert(offsetof(ABP_AJBStartupPlayerController_C, IsSupportIOBoard) == 0x000731, "Member 'ABP_AJBStartupPlayerController_C::IsSupportIOBoard' has a wrong offset!");
static_assert(offsetof(ABP_AJBStartupPlayerController_C, SupportIOBoardName) == 0x000738, "Member 'ABP_AJBStartupPlayerController_C::SupportIOBoardName' has a wrong offset!");
static_assert(offsetof(ABP_AJBStartupPlayerController_C, WwiseManager) == 0x000748, "Member 'ABP_AJBStartupPlayerController_C::WwiseManager' has a wrong offset!");
static_assert(offsetof(ABP_AJBStartupPlayerController_C, bIsAmwOK) == 0x000750, "Member 'ABP_AJBStartupPlayerController_C::bIsAmwOK' has a wrong offset!");
static_assert(offsetof(ABP_AJBStartupPlayerController_C, CurrentError) == 0x000751, "Member 'ABP_AJBStartupPlayerController_C::CurrentError' has a wrong offset!");
static_assert(offsetof(ABP_AJBStartupPlayerController_C, IsVFDConnect) == 0x000752, "Member 'ABP_AJBStartupPlayerController_C::IsVFDConnect' has a wrong offset!");
static_assert(offsetof(ABP_AJBStartupPlayerController_C, bStopError) == 0x000753, "Member 'ABP_AJBStartupPlayerController_C::bStopError' has a wrong offset!");
static_assert(offsetof(ABP_AJBStartupPlayerController_C, CheckErrorList) == 0x000758, "Member 'ABP_AJBStartupPlayerController_C::CheckErrorList' has a wrong offset!");
static_assert(offsetof(ABP_AJBStartupPlayerController_C, EmoneyCancelCheckCount) == 0x000768, "Member 'ABP_AJBStartupPlayerController_C::EmoneyCancelCheckCount' has a wrong offset!");
static_assert(offsetof(ABP_AJBStartupPlayerController_C, bIsSettingIP) == 0x00076C, "Member 'ABP_AJBStartupPlayerController_C::bIsSettingIP' has a wrong offset!");
static_assert(offsetof(ABP_AJBStartupPlayerController_C, RetryCountOfPinggingToServer) == 0x000770, "Member 'ABP_AJBStartupPlayerController_C::RetryCountOfPinggingToServer' has a wrong offset!");
static_assert(offsetof(ABP_AJBStartupPlayerController_C, MaxRetryCountOfPinggingToServer) == 0x000774, "Member 'ABP_AJBStartupPlayerController_C::MaxRetryCountOfPinggingToServer' has a wrong offset!");

}

