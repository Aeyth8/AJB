#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameDataStorage

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameDataStorage_structs.hpp"


namespace SDK::Params
{

// Function GameDataStorage.GameDataStorageManager.AddStorageValueAsByte
// 0x0018 (0x0018 - 0x0000)
struct GameDataStorageManager_AddStorageValueAsByte final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Key;                                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AddValue;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataStorageManager_AddStorageValueAsByte) == 0x000008, "Wrong alignment on GameDataStorageManager_AddStorageValueAsByte");
static_assert(sizeof(GameDataStorageManager_AddStorageValueAsByte) == 0x000018, "Wrong size on GameDataStorageManager_AddStorageValueAsByte");
static_assert(offsetof(GameDataStorageManager_AddStorageValueAsByte, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_AddStorageValueAsByte::StorageCategory' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_AddStorageValueAsByte, Key) == 0x000008, "Member 'GameDataStorageManager_AddStorageValueAsByte::Key' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_AddStorageValueAsByte, AddValue) == 0x000010, "Member 'GameDataStorageManager_AddStorageValueAsByte::AddValue' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.AddStorageValueAsFloat
// 0x0018 (0x0018 - 0x0000)
struct GameDataStorageManager_AddStorageValueAsFloat final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Key;                                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddValue;                                          // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataStorageManager_AddStorageValueAsFloat) == 0x000008, "Wrong alignment on GameDataStorageManager_AddStorageValueAsFloat");
static_assert(sizeof(GameDataStorageManager_AddStorageValueAsFloat) == 0x000018, "Wrong size on GameDataStorageManager_AddStorageValueAsFloat");
static_assert(offsetof(GameDataStorageManager_AddStorageValueAsFloat, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_AddStorageValueAsFloat::StorageCategory' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_AddStorageValueAsFloat, Key) == 0x000008, "Member 'GameDataStorageManager_AddStorageValueAsFloat::Key' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_AddStorageValueAsFloat, AddValue) == 0x000010, "Member 'GameDataStorageManager_AddStorageValueAsFloat::AddValue' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.AddStorageValueAsInt
// 0x0018 (0x0018 - 0x0000)
struct GameDataStorageManager_AddStorageValueAsInt final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Key;                                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddValue;                                          // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataStorageManager_AddStorageValueAsInt) == 0x000008, "Wrong alignment on GameDataStorageManager_AddStorageValueAsInt");
static_assert(sizeof(GameDataStorageManager_AddStorageValueAsInt) == 0x000018, "Wrong size on GameDataStorageManager_AddStorageValueAsInt");
static_assert(offsetof(GameDataStorageManager_AddStorageValueAsInt, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_AddStorageValueAsInt::StorageCategory' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_AddStorageValueAsInt, Key) == 0x000008, "Member 'GameDataStorageManager_AddStorageValueAsInt::Key' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_AddStorageValueAsInt, AddValue) == 0x000010, "Member 'GameDataStorageManager_AddStorageValueAsInt::AddValue' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.AddStorageValueAsRotator
// 0x0020 (0x0020 - 0x0000)
struct GameDataStorageManager_AddStorageValueAsRotator final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Key;                                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AddValue;                                          // 0x0010(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataStorageManager_AddStorageValueAsRotator) == 0x000008, "Wrong alignment on GameDataStorageManager_AddStorageValueAsRotator");
static_assert(sizeof(GameDataStorageManager_AddStorageValueAsRotator) == 0x000020, "Wrong size on GameDataStorageManager_AddStorageValueAsRotator");
static_assert(offsetof(GameDataStorageManager_AddStorageValueAsRotator, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_AddStorageValueAsRotator::StorageCategory' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_AddStorageValueAsRotator, Key) == 0x000008, "Member 'GameDataStorageManager_AddStorageValueAsRotator::Key' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_AddStorageValueAsRotator, AddValue) == 0x000010, "Member 'GameDataStorageManager_AddStorageValueAsRotator::AddValue' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.AddStorageValueAsVector
// 0x0020 (0x0020 - 0x0000)
struct GameDataStorageManager_AddStorageValueAsVector final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Key;                                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AddValue;                                          // 0x0010(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataStorageManager_AddStorageValueAsVector) == 0x000008, "Wrong alignment on GameDataStorageManager_AddStorageValueAsVector");
static_assert(sizeof(GameDataStorageManager_AddStorageValueAsVector) == 0x000020, "Wrong size on GameDataStorageManager_AddStorageValueAsVector");
static_assert(offsetof(GameDataStorageManager_AddStorageValueAsVector, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_AddStorageValueAsVector::StorageCategory' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_AddStorageValueAsVector, Key) == 0x000008, "Member 'GameDataStorageManager_AddStorageValueAsVector::Key' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_AddStorageValueAsVector, AddValue) == 0x000010, "Member 'GameDataStorageManager_AddStorageValueAsVector::AddValue' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.CreateDataStorageSaveDataArray
// 0x0050 (0x0050 - 0x0000)
struct GameDataStorageManager_CreateDataStorageSaveDataArray final
{
public:
	TMap<uint8, struct FDataStorageSaveData>      OutSaveDataArray;                                  // 0x0000(0x0050)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataStorageManager_CreateDataStorageSaveDataArray) == 0x000008, "Wrong alignment on GameDataStorageManager_CreateDataStorageSaveDataArray");
static_assert(sizeof(GameDataStorageManager_CreateDataStorageSaveDataArray) == 0x000050, "Wrong size on GameDataStorageManager_CreateDataStorageSaveDataArray");
static_assert(offsetof(GameDataStorageManager_CreateDataStorageSaveDataArray, OutSaveDataArray) == 0x000000, "Member 'GameDataStorageManager_CreateDataStorageSaveDataArray::OutSaveDataArray' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.Initialize
// 0x0010 (0x0010 - 0x0000)
struct GameDataStorageManager_Initialize final
{
public:
	TArray<uint8>                                 CategoryValues;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataStorageManager_Initialize) == 0x000008, "Wrong alignment on GameDataStorageManager_Initialize");
static_assert(sizeof(GameDataStorageManager_Initialize) == 0x000010, "Wrong size on GameDataStorageManager_Initialize");
static_assert(offsetof(GameDataStorageManager_Initialize, CategoryValues) == 0x000000, "Member 'GameDataStorageManager_Initialize::CategoryValues' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.JSONSerialize
// 0x0048 (0x0048 - 0x0000)
struct GameDataStorageManager_JSONSerialize final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RemoveKeyName;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  KeyBlackList;                                      // 0x0018(0x0020)(Parm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataStorageManager_JSONSerialize) == 0x000008, "Wrong alignment on GameDataStorageManager_JSONSerialize");
static_assert(sizeof(GameDataStorageManager_JSONSerialize) == 0x000048, "Wrong size on GameDataStorageManager_JSONSerialize");
static_assert(offsetof(GameDataStorageManager_JSONSerialize, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_JSONSerialize::StorageCategory' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_JSONSerialize, RemoveKeyName) == 0x000008, "Member 'GameDataStorageManager_JSONSerialize::RemoveKeyName' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_JSONSerialize, KeyBlackList) == 0x000018, "Member 'GameDataStorageManager_JSONSerialize::KeyBlackList' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_JSONSerialize, ReturnValue) == 0x000038, "Member 'GameDataStorageManager_JSONSerialize::ReturnValue' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.ResetCategory
// 0x0001 (0x0001 - 0x0000)
struct GameDataStorageManager_ResetCategory final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataStorageManager_ResetCategory) == 0x000001, "Wrong alignment on GameDataStorageManager_ResetCategory");
static_assert(sizeof(GameDataStorageManager_ResetCategory) == 0x000001, "Wrong size on GameDataStorageManager_ResetCategory");
static_assert(offsetof(GameDataStorageManager_ResetCategory, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_ResetCategory::StorageCategory' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.SetStorageValueAsByte
// 0x0018 (0x0018 - 0x0000)
struct GameDataStorageManager_SetStorageValueAsByte final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Key;                                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Value;                                             // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataStorageManager_SetStorageValueAsByte) == 0x000008, "Wrong alignment on GameDataStorageManager_SetStorageValueAsByte");
static_assert(sizeof(GameDataStorageManager_SetStorageValueAsByte) == 0x000018, "Wrong size on GameDataStorageManager_SetStorageValueAsByte");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsByte, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_SetStorageValueAsByte::StorageCategory' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsByte, Key) == 0x000008, "Member 'GameDataStorageManager_SetStorageValueAsByte::Key' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsByte, Value) == 0x000010, "Member 'GameDataStorageManager_SetStorageValueAsByte::Value' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.SetStorageValueAsByteArray
// 0x0020 (0x0020 - 0x0000)
struct GameDataStorageManager_SetStorageValueAsByteArray final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Key;                                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Values;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataStorageManager_SetStorageValueAsByteArray) == 0x000008, "Wrong alignment on GameDataStorageManager_SetStorageValueAsByteArray");
static_assert(sizeof(GameDataStorageManager_SetStorageValueAsByteArray) == 0x000020, "Wrong size on GameDataStorageManager_SetStorageValueAsByteArray");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsByteArray, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_SetStorageValueAsByteArray::StorageCategory' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsByteArray, Key) == 0x000008, "Member 'GameDataStorageManager_SetStorageValueAsByteArray::Key' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsByteArray, Values) == 0x000010, "Member 'GameDataStorageManager_SetStorageValueAsByteArray::Values' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.SetStorageValueAsFloat
// 0x0018 (0x0018 - 0x0000)
struct GameDataStorageManager_SetStorageValueAsFloat final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Key;                                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataStorageManager_SetStorageValueAsFloat) == 0x000008, "Wrong alignment on GameDataStorageManager_SetStorageValueAsFloat");
static_assert(sizeof(GameDataStorageManager_SetStorageValueAsFloat) == 0x000018, "Wrong size on GameDataStorageManager_SetStorageValueAsFloat");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsFloat, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_SetStorageValueAsFloat::StorageCategory' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsFloat, Key) == 0x000008, "Member 'GameDataStorageManager_SetStorageValueAsFloat::Key' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsFloat, Value) == 0x000010, "Member 'GameDataStorageManager_SetStorageValueAsFloat::Value' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.SetStorageValueAsFloatArray
// 0x0020 (0x0020 - 0x0000)
struct GameDataStorageManager_SetStorageValueAsFloatArray final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Key;                                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 Values;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataStorageManager_SetStorageValueAsFloatArray) == 0x000008, "Wrong alignment on GameDataStorageManager_SetStorageValueAsFloatArray");
static_assert(sizeof(GameDataStorageManager_SetStorageValueAsFloatArray) == 0x000020, "Wrong size on GameDataStorageManager_SetStorageValueAsFloatArray");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsFloatArray, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_SetStorageValueAsFloatArray::StorageCategory' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsFloatArray, Key) == 0x000008, "Member 'GameDataStorageManager_SetStorageValueAsFloatArray::Key' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsFloatArray, Values) == 0x000010, "Member 'GameDataStorageManager_SetStorageValueAsFloatArray::Values' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.SetStorageValueAsInt
// 0x0018 (0x0018 - 0x0000)
struct GameDataStorageManager_SetStorageValueAsInt final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Key;                                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataStorageManager_SetStorageValueAsInt) == 0x000008, "Wrong alignment on GameDataStorageManager_SetStorageValueAsInt");
static_assert(sizeof(GameDataStorageManager_SetStorageValueAsInt) == 0x000018, "Wrong size on GameDataStorageManager_SetStorageValueAsInt");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsInt, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_SetStorageValueAsInt::StorageCategory' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsInt, Key) == 0x000008, "Member 'GameDataStorageManager_SetStorageValueAsInt::Key' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsInt, Value) == 0x000010, "Member 'GameDataStorageManager_SetStorageValueAsInt::Value' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.SetStorageValueAsIntArray
// 0x0020 (0x0020 - 0x0000)
struct GameDataStorageManager_SetStorageValueAsIntArray final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Key;                                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Values;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataStorageManager_SetStorageValueAsIntArray) == 0x000008, "Wrong alignment on GameDataStorageManager_SetStorageValueAsIntArray");
static_assert(sizeof(GameDataStorageManager_SetStorageValueAsIntArray) == 0x000020, "Wrong size on GameDataStorageManager_SetStorageValueAsIntArray");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsIntArray, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_SetStorageValueAsIntArray::StorageCategory' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsIntArray, Key) == 0x000008, "Member 'GameDataStorageManager_SetStorageValueAsIntArray::Key' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsIntArray, Values) == 0x000010, "Member 'GameDataStorageManager_SetStorageValueAsIntArray::Values' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.SetStorageValueAsRotator
// 0x0020 (0x0020 - 0x0000)
struct GameDataStorageManager_SetStorageValueAsRotator final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Key;                                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Value;                                             // 0x0010(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataStorageManager_SetStorageValueAsRotator) == 0x000008, "Wrong alignment on GameDataStorageManager_SetStorageValueAsRotator");
static_assert(sizeof(GameDataStorageManager_SetStorageValueAsRotator) == 0x000020, "Wrong size on GameDataStorageManager_SetStorageValueAsRotator");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsRotator, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_SetStorageValueAsRotator::StorageCategory' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsRotator, Key) == 0x000008, "Member 'GameDataStorageManager_SetStorageValueAsRotator::Key' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsRotator, Value) == 0x000010, "Member 'GameDataStorageManager_SetStorageValueAsRotator::Value' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.SetStorageValueAsRotatorArray
// 0x0020 (0x0020 - 0x0000)
struct GameDataStorageManager_SetStorageValueAsRotatorArray final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Key;                                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRotator>                       Values;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataStorageManager_SetStorageValueAsRotatorArray) == 0x000008, "Wrong alignment on GameDataStorageManager_SetStorageValueAsRotatorArray");
static_assert(sizeof(GameDataStorageManager_SetStorageValueAsRotatorArray) == 0x000020, "Wrong size on GameDataStorageManager_SetStorageValueAsRotatorArray");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsRotatorArray, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_SetStorageValueAsRotatorArray::StorageCategory' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsRotatorArray, Key) == 0x000008, "Member 'GameDataStorageManager_SetStorageValueAsRotatorArray::Key' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsRotatorArray, Values) == 0x000010, "Member 'GameDataStorageManager_SetStorageValueAsRotatorArray::Values' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.SetStorageValueAsString
// 0x0020 (0x0020 - 0x0000)
struct GameDataStorageManager_SetStorageValueAsString final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Key;                                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataStorageManager_SetStorageValueAsString) == 0x000008, "Wrong alignment on GameDataStorageManager_SetStorageValueAsString");
static_assert(sizeof(GameDataStorageManager_SetStorageValueAsString) == 0x000020, "Wrong size on GameDataStorageManager_SetStorageValueAsString");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsString, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_SetStorageValueAsString::StorageCategory' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsString, Key) == 0x000008, "Member 'GameDataStorageManager_SetStorageValueAsString::Key' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsString, Value) == 0x000010, "Member 'GameDataStorageManager_SetStorageValueAsString::Value' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.SetStorageValueAsStringArray
// 0x0020 (0x0020 - 0x0000)
struct GameDataStorageManager_SetStorageValueAsStringArray final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Key;                                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Values;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataStorageManager_SetStorageValueAsStringArray) == 0x000008, "Wrong alignment on GameDataStorageManager_SetStorageValueAsStringArray");
static_assert(sizeof(GameDataStorageManager_SetStorageValueAsStringArray) == 0x000020, "Wrong size on GameDataStorageManager_SetStorageValueAsStringArray");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsStringArray, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_SetStorageValueAsStringArray::StorageCategory' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsStringArray, Key) == 0x000008, "Member 'GameDataStorageManager_SetStorageValueAsStringArray::Key' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsStringArray, Values) == 0x000010, "Member 'GameDataStorageManager_SetStorageValueAsStringArray::Values' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.SetStorageValueAsVector
// 0x0020 (0x0020 - 0x0000)
struct GameDataStorageManager_SetStorageValueAsVector final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Key;                                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Value;                                             // 0x0010(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataStorageManager_SetStorageValueAsVector) == 0x000008, "Wrong alignment on GameDataStorageManager_SetStorageValueAsVector");
static_assert(sizeof(GameDataStorageManager_SetStorageValueAsVector) == 0x000020, "Wrong size on GameDataStorageManager_SetStorageValueAsVector");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsVector, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_SetStorageValueAsVector::StorageCategory' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsVector, Key) == 0x000008, "Member 'GameDataStorageManager_SetStorageValueAsVector::Key' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsVector, Value) == 0x000010, "Member 'GameDataStorageManager_SetStorageValueAsVector::Value' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.SetStorageValueAsVectorArray
// 0x0020 (0x0020 - 0x0000)
struct GameDataStorageManager_SetStorageValueAsVectorArray final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Key;                                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Values;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataStorageManager_SetStorageValueAsVectorArray) == 0x000008, "Wrong alignment on GameDataStorageManager_SetStorageValueAsVectorArray");
static_assert(sizeof(GameDataStorageManager_SetStorageValueAsVectorArray) == 0x000020, "Wrong size on GameDataStorageManager_SetStorageValueAsVectorArray");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsVectorArray, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_SetStorageValueAsVectorArray::StorageCategory' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsVectorArray, Key) == 0x000008, "Member 'GameDataStorageManager_SetStorageValueAsVectorArray::Key' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_SetStorageValueAsVectorArray, Values) == 0x000010, "Member 'GameDataStorageManager_SetStorageValueAsVectorArray::Values' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.SetupDataStorageArray
// 0x0050 (0x0050 - 0x0000)
struct GameDataStorageManager_SetupDataStorageArray final
{
public:
	TMap<uint8, struct FDataStorageSaveData>      SaveDataArray;                                     // 0x0000(0x0050)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameDataStorageManager_SetupDataStorageArray) == 0x000008, "Wrong alignment on GameDataStorageManager_SetupDataStorageArray");
static_assert(sizeof(GameDataStorageManager_SetupDataStorageArray) == 0x000050, "Wrong size on GameDataStorageManager_SetupDataStorageArray");
static_assert(offsetof(GameDataStorageManager_SetupDataStorageArray, SaveDataArray) == 0x000000, "Member 'GameDataStorageManager_SetupDataStorageArray::SaveDataArray' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.SubStorageValueAsByte
// 0x0018 (0x0018 - 0x0000)
struct GameDataStorageManager_SubStorageValueAsByte final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Key;                                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SubValue;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataStorageManager_SubStorageValueAsByte) == 0x000008, "Wrong alignment on GameDataStorageManager_SubStorageValueAsByte");
static_assert(sizeof(GameDataStorageManager_SubStorageValueAsByte) == 0x000018, "Wrong size on GameDataStorageManager_SubStorageValueAsByte");
static_assert(offsetof(GameDataStorageManager_SubStorageValueAsByte, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_SubStorageValueAsByte::StorageCategory' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_SubStorageValueAsByte, Key) == 0x000008, "Member 'GameDataStorageManager_SubStorageValueAsByte::Key' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_SubStorageValueAsByte, SubValue) == 0x000010, "Member 'GameDataStorageManager_SubStorageValueAsByte::SubValue' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.SubStorageValueAsFloat
// 0x0018 (0x0018 - 0x0000)
struct GameDataStorageManager_SubStorageValueAsFloat final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Key;                                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SubValue;                                          // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataStorageManager_SubStorageValueAsFloat) == 0x000008, "Wrong alignment on GameDataStorageManager_SubStorageValueAsFloat");
static_assert(sizeof(GameDataStorageManager_SubStorageValueAsFloat) == 0x000018, "Wrong size on GameDataStorageManager_SubStorageValueAsFloat");
static_assert(offsetof(GameDataStorageManager_SubStorageValueAsFloat, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_SubStorageValueAsFloat::StorageCategory' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_SubStorageValueAsFloat, Key) == 0x000008, "Member 'GameDataStorageManager_SubStorageValueAsFloat::Key' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_SubStorageValueAsFloat, SubValue) == 0x000010, "Member 'GameDataStorageManager_SubStorageValueAsFloat::SubValue' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.SubStorageValueAsInt
// 0x0018 (0x0018 - 0x0000)
struct GameDataStorageManager_SubStorageValueAsInt final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Key;                                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubValue;                                          // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataStorageManager_SubStorageValueAsInt) == 0x000008, "Wrong alignment on GameDataStorageManager_SubStorageValueAsInt");
static_assert(sizeof(GameDataStorageManager_SubStorageValueAsInt) == 0x000018, "Wrong size on GameDataStorageManager_SubStorageValueAsInt");
static_assert(offsetof(GameDataStorageManager_SubStorageValueAsInt, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_SubStorageValueAsInt::StorageCategory' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_SubStorageValueAsInt, Key) == 0x000008, "Member 'GameDataStorageManager_SubStorageValueAsInt::Key' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_SubStorageValueAsInt, SubValue) == 0x000010, "Member 'GameDataStorageManager_SubStorageValueAsInt::SubValue' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.SubStorageValueAsRotator
// 0x0020 (0x0020 - 0x0000)
struct GameDataStorageManager_SubStorageValueAsRotator final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Key;                                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SubValue;                                          // 0x0010(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataStorageManager_SubStorageValueAsRotator) == 0x000008, "Wrong alignment on GameDataStorageManager_SubStorageValueAsRotator");
static_assert(sizeof(GameDataStorageManager_SubStorageValueAsRotator) == 0x000020, "Wrong size on GameDataStorageManager_SubStorageValueAsRotator");
static_assert(offsetof(GameDataStorageManager_SubStorageValueAsRotator, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_SubStorageValueAsRotator::StorageCategory' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_SubStorageValueAsRotator, Key) == 0x000008, "Member 'GameDataStorageManager_SubStorageValueAsRotator::Key' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_SubStorageValueAsRotator, SubValue) == 0x000010, "Member 'GameDataStorageManager_SubStorageValueAsRotator::SubValue' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.SubStorageValueAsVector
// 0x0020 (0x0020 - 0x0000)
struct GameDataStorageManager_SubStorageValueAsVector final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Key;                                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SubValue;                                          // 0x0010(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataStorageManager_SubStorageValueAsVector) == 0x000008, "Wrong alignment on GameDataStorageManager_SubStorageValueAsVector");
static_assert(sizeof(GameDataStorageManager_SubStorageValueAsVector) == 0x000020, "Wrong size on GameDataStorageManager_SubStorageValueAsVector");
static_assert(offsetof(GameDataStorageManager_SubStorageValueAsVector, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_SubStorageValueAsVector::StorageCategory' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_SubStorageValueAsVector, Key) == 0x000008, "Member 'GameDataStorageManager_SubStorageValueAsVector::Key' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_SubStorageValueAsVector, SubValue) == 0x000010, "Member 'GameDataStorageManager_SubStorageValueAsVector::SubValue' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.GetStorageValueAsByte
// 0x0018 (0x0018 - 0x0000)
struct GameDataStorageManager_GetStorageValueAsByte final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Key;                                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OutValue;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataStorageManager_GetStorageValueAsByte) == 0x000008, "Wrong alignment on GameDataStorageManager_GetStorageValueAsByte");
static_assert(sizeof(GameDataStorageManager_GetStorageValueAsByte) == 0x000018, "Wrong size on GameDataStorageManager_GetStorageValueAsByte");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsByte, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_GetStorageValueAsByte::StorageCategory' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsByte, Key) == 0x000008, "Member 'GameDataStorageManager_GetStorageValueAsByte::Key' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsByte, OutValue) == 0x000010, "Member 'GameDataStorageManager_GetStorageValueAsByte::OutValue' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsByte, ReturnValue) == 0x000011, "Member 'GameDataStorageManager_GetStorageValueAsByte::ReturnValue' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.GetStorageValueAsByteArray
// 0x0028 (0x0028 - 0x0000)
struct GameDataStorageManager_GetStorageValueAsByteArray final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Key;                                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 OutValues;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataStorageManager_GetStorageValueAsByteArray) == 0x000008, "Wrong alignment on GameDataStorageManager_GetStorageValueAsByteArray");
static_assert(sizeof(GameDataStorageManager_GetStorageValueAsByteArray) == 0x000028, "Wrong size on GameDataStorageManager_GetStorageValueAsByteArray");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsByteArray, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_GetStorageValueAsByteArray::StorageCategory' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsByteArray, Key) == 0x000008, "Member 'GameDataStorageManager_GetStorageValueAsByteArray::Key' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsByteArray, OutValues) == 0x000010, "Member 'GameDataStorageManager_GetStorageValueAsByteArray::OutValues' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsByteArray, ReturnValue) == 0x000020, "Member 'GameDataStorageManager_GetStorageValueAsByteArray::ReturnValue' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.GetStorageValueAsFloat
// 0x0018 (0x0018 - 0x0000)
struct GameDataStorageManager_GetStorageValueAsFloat final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Key;                                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutValue;                                          // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataStorageManager_GetStorageValueAsFloat) == 0x000008, "Wrong alignment on GameDataStorageManager_GetStorageValueAsFloat");
static_assert(sizeof(GameDataStorageManager_GetStorageValueAsFloat) == 0x000018, "Wrong size on GameDataStorageManager_GetStorageValueAsFloat");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsFloat, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_GetStorageValueAsFloat::StorageCategory' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsFloat, Key) == 0x000008, "Member 'GameDataStorageManager_GetStorageValueAsFloat::Key' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsFloat, OutValue) == 0x000010, "Member 'GameDataStorageManager_GetStorageValueAsFloat::OutValue' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsFloat, ReturnValue) == 0x000014, "Member 'GameDataStorageManager_GetStorageValueAsFloat::ReturnValue' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.GetStorageValueAsFloatArray
// 0x0028 (0x0028 - 0x0000)
struct GameDataStorageManager_GetStorageValueAsFloatArray final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Key;                                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 OutValues;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataStorageManager_GetStorageValueAsFloatArray) == 0x000008, "Wrong alignment on GameDataStorageManager_GetStorageValueAsFloatArray");
static_assert(sizeof(GameDataStorageManager_GetStorageValueAsFloatArray) == 0x000028, "Wrong size on GameDataStorageManager_GetStorageValueAsFloatArray");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsFloatArray, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_GetStorageValueAsFloatArray::StorageCategory' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsFloatArray, Key) == 0x000008, "Member 'GameDataStorageManager_GetStorageValueAsFloatArray::Key' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsFloatArray, OutValues) == 0x000010, "Member 'GameDataStorageManager_GetStorageValueAsFloatArray::OutValues' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsFloatArray, ReturnValue) == 0x000020, "Member 'GameDataStorageManager_GetStorageValueAsFloatArray::ReturnValue' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.GetStorageValueAsInt
// 0x0018 (0x0018 - 0x0000)
struct GameDataStorageManager_GetStorageValueAsInt final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Key;                                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutValue;                                          // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataStorageManager_GetStorageValueAsInt) == 0x000008, "Wrong alignment on GameDataStorageManager_GetStorageValueAsInt");
static_assert(sizeof(GameDataStorageManager_GetStorageValueAsInt) == 0x000018, "Wrong size on GameDataStorageManager_GetStorageValueAsInt");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsInt, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_GetStorageValueAsInt::StorageCategory' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsInt, Key) == 0x000008, "Member 'GameDataStorageManager_GetStorageValueAsInt::Key' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsInt, OutValue) == 0x000010, "Member 'GameDataStorageManager_GetStorageValueAsInt::OutValue' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsInt, ReturnValue) == 0x000014, "Member 'GameDataStorageManager_GetStorageValueAsInt::ReturnValue' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.GetStorageValueAsIntArray
// 0x0028 (0x0028 - 0x0000)
struct GameDataStorageManager_GetStorageValueAsIntArray final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Key;                                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 OutValues;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataStorageManager_GetStorageValueAsIntArray) == 0x000008, "Wrong alignment on GameDataStorageManager_GetStorageValueAsIntArray");
static_assert(sizeof(GameDataStorageManager_GetStorageValueAsIntArray) == 0x000028, "Wrong size on GameDataStorageManager_GetStorageValueAsIntArray");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsIntArray, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_GetStorageValueAsIntArray::StorageCategory' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsIntArray, Key) == 0x000008, "Member 'GameDataStorageManager_GetStorageValueAsIntArray::Key' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsIntArray, OutValues) == 0x000010, "Member 'GameDataStorageManager_GetStorageValueAsIntArray::OutValues' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsIntArray, ReturnValue) == 0x000020, "Member 'GameDataStorageManager_GetStorageValueAsIntArray::ReturnValue' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.GetStorageValueAsRotator
// 0x0020 (0x0020 - 0x0000)
struct GameDataStorageManager_GetStorageValueAsRotator final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Key;                                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OutValue;                                          // 0x0010(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataStorageManager_GetStorageValueAsRotator) == 0x000008, "Wrong alignment on GameDataStorageManager_GetStorageValueAsRotator");
static_assert(sizeof(GameDataStorageManager_GetStorageValueAsRotator) == 0x000020, "Wrong size on GameDataStorageManager_GetStorageValueAsRotator");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsRotator, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_GetStorageValueAsRotator::StorageCategory' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsRotator, Key) == 0x000008, "Member 'GameDataStorageManager_GetStorageValueAsRotator::Key' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsRotator, OutValue) == 0x000010, "Member 'GameDataStorageManager_GetStorageValueAsRotator::OutValue' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsRotator, ReturnValue) == 0x00001C, "Member 'GameDataStorageManager_GetStorageValueAsRotator::ReturnValue' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.GetStorageValueAsRotatorArray
// 0x0028 (0x0028 - 0x0000)
struct GameDataStorageManager_GetStorageValueAsRotatorArray final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Key;                                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRotator>                       OutValues;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataStorageManager_GetStorageValueAsRotatorArray) == 0x000008, "Wrong alignment on GameDataStorageManager_GetStorageValueAsRotatorArray");
static_assert(sizeof(GameDataStorageManager_GetStorageValueAsRotatorArray) == 0x000028, "Wrong size on GameDataStorageManager_GetStorageValueAsRotatorArray");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsRotatorArray, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_GetStorageValueAsRotatorArray::StorageCategory' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsRotatorArray, Key) == 0x000008, "Member 'GameDataStorageManager_GetStorageValueAsRotatorArray::Key' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsRotatorArray, OutValues) == 0x000010, "Member 'GameDataStorageManager_GetStorageValueAsRotatorArray::OutValues' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsRotatorArray, ReturnValue) == 0x000020, "Member 'GameDataStorageManager_GetStorageValueAsRotatorArray::ReturnValue' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.GetStorageValueAsString
// 0x0028 (0x0028 - 0x0000)
struct GameDataStorageManager_GetStorageValueAsString final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Key;                                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutValue;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataStorageManager_GetStorageValueAsString) == 0x000008, "Wrong alignment on GameDataStorageManager_GetStorageValueAsString");
static_assert(sizeof(GameDataStorageManager_GetStorageValueAsString) == 0x000028, "Wrong size on GameDataStorageManager_GetStorageValueAsString");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsString, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_GetStorageValueAsString::StorageCategory' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsString, Key) == 0x000008, "Member 'GameDataStorageManager_GetStorageValueAsString::Key' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsString, OutValue) == 0x000010, "Member 'GameDataStorageManager_GetStorageValueAsString::OutValue' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsString, ReturnValue) == 0x000020, "Member 'GameDataStorageManager_GetStorageValueAsString::ReturnValue' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.GetStorageValueAsStringArray
// 0x0028 (0x0028 - 0x0000)
struct GameDataStorageManager_GetStorageValueAsStringArray final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Key;                                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         OutValues;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataStorageManager_GetStorageValueAsStringArray) == 0x000008, "Wrong alignment on GameDataStorageManager_GetStorageValueAsStringArray");
static_assert(sizeof(GameDataStorageManager_GetStorageValueAsStringArray) == 0x000028, "Wrong size on GameDataStorageManager_GetStorageValueAsStringArray");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsStringArray, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_GetStorageValueAsStringArray::StorageCategory' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsStringArray, Key) == 0x000008, "Member 'GameDataStorageManager_GetStorageValueAsStringArray::Key' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsStringArray, OutValues) == 0x000010, "Member 'GameDataStorageManager_GetStorageValueAsStringArray::OutValues' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsStringArray, ReturnValue) == 0x000020, "Member 'GameDataStorageManager_GetStorageValueAsStringArray::ReturnValue' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.GetStorageValueAsVector
// 0x0020 (0x0020 - 0x0000)
struct GameDataStorageManager_GetStorageValueAsVector final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Key;                                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutValue;                                          // 0x0010(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataStorageManager_GetStorageValueAsVector) == 0x000008, "Wrong alignment on GameDataStorageManager_GetStorageValueAsVector");
static_assert(sizeof(GameDataStorageManager_GetStorageValueAsVector) == 0x000020, "Wrong size on GameDataStorageManager_GetStorageValueAsVector");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsVector, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_GetStorageValueAsVector::StorageCategory' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsVector, Key) == 0x000008, "Member 'GameDataStorageManager_GetStorageValueAsVector::Key' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsVector, OutValue) == 0x000010, "Member 'GameDataStorageManager_GetStorageValueAsVector::OutValue' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsVector, ReturnValue) == 0x00001C, "Member 'GameDataStorageManager_GetStorageValueAsVector::ReturnValue' has a wrong offset!");

// Function GameDataStorage.GameDataStorageManager.GetStorageValueAsVectorArray
// 0x0028 (0x0028 - 0x0000)
struct GameDataStorageManager_GetStorageValueAsVectorArray final
{
public:
	uint8                                         StorageCategory;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Key;                                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        OutValues;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameDataStorageManager_GetStorageValueAsVectorArray) == 0x000008, "Wrong alignment on GameDataStorageManager_GetStorageValueAsVectorArray");
static_assert(sizeof(GameDataStorageManager_GetStorageValueAsVectorArray) == 0x000028, "Wrong size on GameDataStorageManager_GetStorageValueAsVectorArray");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsVectorArray, StorageCategory) == 0x000000, "Member 'GameDataStorageManager_GetStorageValueAsVectorArray::StorageCategory' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsVectorArray, Key) == 0x000008, "Member 'GameDataStorageManager_GetStorageValueAsVectorArray::Key' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsVectorArray, OutValues) == 0x000010, "Member 'GameDataStorageManager_GetStorageValueAsVectorArray::OutValues' has a wrong offset!");
static_assert(offsetof(GameDataStorageManager_GetStorageValueAsVectorArray, ReturnValue) == 0x000020, "Member 'GameDataStorageManager_GetStorageValueAsVectorArray::ReturnValue' has a wrong offset!");

}

