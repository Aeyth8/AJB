#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AJB

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"
#include "AmwPlugin_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "AIModule_structs.hpp"
#include "AJB_structs.hpp"
#include "UMG_structs.hpp"
#include "Engine_structs.hpp"
#include "MovieScene_structs.hpp"


namespace SDK::Params
{

// Function AJB.ActorCluster.CalcCenterLocationOfActors
// 0x000C (0x000C - 0x0000)
struct ActorCluster_CalcCenterLocationOfActors final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorCluster_CalcCenterLocationOfActors) == 0x000004, "Wrong alignment on ActorCluster_CalcCenterLocationOfActors");
static_assert(sizeof(ActorCluster_CalcCenterLocationOfActors) == 0x00000C, "Wrong size on ActorCluster_CalcCenterLocationOfActors");
static_assert(offsetof(ActorCluster_CalcCenterLocationOfActors, ReturnValue) == 0x000000, "Member 'ActorCluster_CalcCenterLocationOfActors::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameAIController.GetContextActor
// 0x0008 (0x0008 - 0x0000)
struct AJBInGameAIController_GetContextActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameAIController_GetContextActor) == 0x000008, "Wrong alignment on AJBInGameAIController_GetContextActor");
static_assert(sizeof(AJBInGameAIController_GetContextActor) == 0x000008, "Wrong size on AJBInGameAIController_GetContextActor");
static_assert(offsetof(AJBInGameAIController_GetContextActor, ReturnValue) == 0x000000, "Member 'AJBInGameAIController_GetContextActor::ReturnValue' has a wrong offset!");

// Function AJB.ActorClusterHost.ClusterKMeansPPByLocation
// 0x0020 (0x0020 - 0x0000)
struct ActorClusterHost_ClusterKMeansPPByLocation final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         CountOfCluster;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountOfClusteringMax;                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocationXYOnlyArg;                                // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActorClusterHost_ClusterKMeansPPByLocation) == 0x000008, "Wrong alignment on ActorClusterHost_ClusterKMeansPPByLocation");
static_assert(sizeof(ActorClusterHost_ClusterKMeansPPByLocation) == 0x000020, "Wrong size on ActorClusterHost_ClusterKMeansPPByLocation");
static_assert(offsetof(ActorClusterHost_ClusterKMeansPPByLocation, Actors) == 0x000000, "Member 'ActorClusterHost_ClusterKMeansPPByLocation::Actors' has a wrong offset!");
static_assert(offsetof(ActorClusterHost_ClusterKMeansPPByLocation, CountOfCluster) == 0x000010, "Member 'ActorClusterHost_ClusterKMeansPPByLocation::CountOfCluster' has a wrong offset!");
static_assert(offsetof(ActorClusterHost_ClusterKMeansPPByLocation, CountOfClusteringMax) == 0x000014, "Member 'ActorClusterHost_ClusterKMeansPPByLocation::CountOfClusteringMax' has a wrong offset!");
static_assert(offsetof(ActorClusterHost_ClusterKMeansPPByLocation, bLocationXYOnlyArg) == 0x000018, "Member 'ActorClusterHost_ClusterKMeansPPByLocation::bLocationXYOnlyArg' has a wrong offset!");

// Function AJB.AJBInGameAIDirectorComponent.DebugRequestAddNPCFromDebugActor
// 0x0008 (0x0008 - 0x0000)
struct AJBInGameAIDirectorComponent_DebugRequestAddNPCFromDebugActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameAIDirectorComponent_DebugRequestAddNPCFromDebugActor) == 0x000008, "Wrong alignment on AJBInGameAIDirectorComponent_DebugRequestAddNPCFromDebugActor");
static_assert(sizeof(AJBInGameAIDirectorComponent_DebugRequestAddNPCFromDebugActor) == 0x000008, "Wrong size on AJBInGameAIDirectorComponent_DebugRequestAddNPCFromDebugActor");
static_assert(offsetof(AJBInGameAIDirectorComponent_DebugRequestAddNPCFromDebugActor, Actor) == 0x000000, "Member 'AJBInGameAIDirectorComponent_DebugRequestAddNPCFromDebugActor::Actor' has a wrong offset!");

// Function AJB.AJBInGameAIDirectorComponent.DebugRequestAddNPCFromDebugArgs
// 0x0040 (0x0040 - 0x0000)
struct AJBInGameAIDirectorComponent_DebugRequestAddNPCFromDebugArgs final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AddInfoTags;                                       // 0x0018(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         AILevel;                                           // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBInGameAIDirectorComponent_DebugRequestAddNPCFromDebugArgs) == 0x000008, "Wrong alignment on AJBInGameAIDirectorComponent_DebugRequestAddNPCFromDebugArgs");
static_assert(sizeof(AJBInGameAIDirectorComponent_DebugRequestAddNPCFromDebugArgs) == 0x000040, "Wrong size on AJBInGameAIDirectorComponent_DebugRequestAddNPCFromDebugArgs");
static_assert(offsetof(AJBInGameAIDirectorComponent_DebugRequestAddNPCFromDebugArgs, Location) == 0x000000, "Member 'AJBInGameAIDirectorComponent_DebugRequestAddNPCFromDebugArgs::Location' has a wrong offset!");
static_assert(offsetof(AJBInGameAIDirectorComponent_DebugRequestAddNPCFromDebugArgs, Rotation) == 0x00000C, "Member 'AJBInGameAIDirectorComponent_DebugRequestAddNPCFromDebugArgs::Rotation' has a wrong offset!");
static_assert(offsetof(AJBInGameAIDirectorComponent_DebugRequestAddNPCFromDebugArgs, AddInfoTags) == 0x000018, "Member 'AJBInGameAIDirectorComponent_DebugRequestAddNPCFromDebugArgs::AddInfoTags' has a wrong offset!");
static_assert(offsetof(AJBInGameAIDirectorComponent_DebugRequestAddNPCFromDebugArgs, AILevel) == 0x000038, "Member 'AJBInGameAIDirectorComponent_DebugRequestAddNPCFromDebugArgs::AILevel' has a wrong offset!");

// Function AJB.AJBInGameAIDirectorComponent.DebugRequestByGameplayTags
// 0x0038 (0x0038 - 0x0000)
struct AJBInGameAIDirectorComponent_DebugRequestByGameplayTags final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                VectorIn;                                          // 0x0028(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBInGameAIDirectorComponent_DebugRequestByGameplayTags) == 0x000008, "Wrong alignment on AJBInGameAIDirectorComponent_DebugRequestByGameplayTags");
static_assert(sizeof(AJBInGameAIDirectorComponent_DebugRequestByGameplayTags) == 0x000038, "Wrong size on AJBInGameAIDirectorComponent_DebugRequestByGameplayTags");
static_assert(offsetof(AJBInGameAIDirectorComponent_DebugRequestByGameplayTags, PlayerController) == 0x000000, "Member 'AJBInGameAIDirectorComponent_DebugRequestByGameplayTags::PlayerController' has a wrong offset!");
static_assert(offsetof(AJBInGameAIDirectorComponent_DebugRequestByGameplayTags, Tags) == 0x000008, "Member 'AJBInGameAIDirectorComponent_DebugRequestByGameplayTags::Tags' has a wrong offset!");
static_assert(offsetof(AJBInGameAIDirectorComponent_DebugRequestByGameplayTags, VectorIn) == 0x000028, "Member 'AJBInGameAIDirectorComponent_DebugRequestByGameplayTags::VectorIn' has a wrong offset!");

// Function AJB.AJBInGameAIDirectorComponent.DebugRequestHideDebugInfo
// 0x0008 (0x0008 - 0x0000)
struct AJBInGameAIDirectorComponent_DebugRequestHideDebugInfo final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameAIDirectorComponent_DebugRequestHideDebugInfo) == 0x000008, "Wrong alignment on AJBInGameAIDirectorComponent_DebugRequestHideDebugInfo");
static_assert(sizeof(AJBInGameAIDirectorComponent_DebugRequestHideDebugInfo) == 0x000008, "Wrong size on AJBInGameAIDirectorComponent_DebugRequestHideDebugInfo");
static_assert(offsetof(AJBInGameAIDirectorComponent_DebugRequestHideDebugInfo, PlayerController) == 0x000000, "Member 'AJBInGameAIDirectorComponent_DebugRequestHideDebugInfo::PlayerController' has a wrong offset!");

// Function AJB.AJBInGameAIDirectorComponent.DebugRequestNPCAllLog
// 0x0010 (0x0010 - 0x0000)
struct AJBInGameAIDirectorComponent_DebugRequestNPCAllLog final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NPCId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBInGameAIDirectorComponent_DebugRequestNPCAllLog) == 0x000008, "Wrong alignment on AJBInGameAIDirectorComponent_DebugRequestNPCAllLog");
static_assert(sizeof(AJBInGameAIDirectorComponent_DebugRequestNPCAllLog) == 0x000010, "Wrong size on AJBInGameAIDirectorComponent_DebugRequestNPCAllLog");
static_assert(offsetof(AJBInGameAIDirectorComponent_DebugRequestNPCAllLog, PlayerController) == 0x000000, "Member 'AJBInGameAIDirectorComponent_DebugRequestNPCAllLog::PlayerController' has a wrong offset!");
static_assert(offsetof(AJBInGameAIDirectorComponent_DebugRequestNPCAllLog, NPCId) == 0x000008, "Member 'AJBInGameAIDirectorComponent_DebugRequestNPCAllLog::NPCId' has a wrong offset!");

// Function AJB.AJBInGameAIDirectorComponent.DebugRequestRestartBehavior
// 0x0004 (0x0004 - 0x0000)
struct AJBInGameAIDirectorComponent_DebugRequestRestartBehavior final
{
public:
	int32                                         DebugMenuIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameAIDirectorComponent_DebugRequestRestartBehavior) == 0x000004, "Wrong alignment on AJBInGameAIDirectorComponent_DebugRequestRestartBehavior");
static_assert(sizeof(AJBInGameAIDirectorComponent_DebugRequestRestartBehavior) == 0x000004, "Wrong size on AJBInGameAIDirectorComponent_DebugRequestRestartBehavior");
static_assert(offsetof(AJBInGameAIDirectorComponent_DebugRequestRestartBehavior, DebugMenuIndex) == 0x000000, "Member 'AJBInGameAIDirectorComponent_DebugRequestRestartBehavior::DebugMenuIndex' has a wrong offset!");

// Function AJB.AJBInGameAIDirectorComponent.DebugRequestShowDebugInfo
// 0x0008 (0x0008 - 0x0000)
struct AJBInGameAIDirectorComponent_DebugRequestShowDebugInfo final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameAIDirectorComponent_DebugRequestShowDebugInfo) == 0x000008, "Wrong alignment on AJBInGameAIDirectorComponent_DebugRequestShowDebugInfo");
static_assert(sizeof(AJBInGameAIDirectorComponent_DebugRequestShowDebugInfo) == 0x000008, "Wrong size on AJBInGameAIDirectorComponent_DebugRequestShowDebugInfo");
static_assert(offsetof(AJBInGameAIDirectorComponent_DebugRequestShowDebugInfo, PlayerController) == 0x000000, "Member 'AJBInGameAIDirectorComponent_DebugRequestShowDebugInfo::PlayerController' has a wrong offset!");

// Function AJB.AJBAIEnvironmentBlock.AddBurningActor
// 0x0008 (0x0008 - 0x0000)
struct AJBAIEnvironmentBlock_AddBurningActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAIEnvironmentBlock_AddBurningActor) == 0x000008, "Wrong alignment on AJBAIEnvironmentBlock_AddBurningActor");
static_assert(sizeof(AJBAIEnvironmentBlock_AddBurningActor) == 0x000008, "Wrong size on AJBAIEnvironmentBlock_AddBurningActor");
static_assert(offsetof(AJBAIEnvironmentBlock_AddBurningActor, Actor) == 0x000000, "Member 'AJBAIEnvironmentBlock_AddBurningActor::Actor' has a wrong offset!");

// Function AJB.AJBAIEnvironmentBlock.AddDoor
// 0x0010 (0x0010 - 0x0000)
struct AJBAIEnvironmentBlock_AddDoor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNotInHouse;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBAIEnvironmentBlock_AddDoor) == 0x000008, "Wrong alignment on AJBAIEnvironmentBlock_AddDoor");
static_assert(sizeof(AJBAIEnvironmentBlock_AddDoor) == 0x000010, "Wrong size on AJBAIEnvironmentBlock_AddDoor");
static_assert(offsetof(AJBAIEnvironmentBlock_AddDoor, Actor) == 0x000000, "Member 'AJBAIEnvironmentBlock_AddDoor::Actor' has a wrong offset!");
static_assert(offsetof(AJBAIEnvironmentBlock_AddDoor, bIsNotInHouse) == 0x000008, "Member 'AJBAIEnvironmentBlock_AddDoor::bIsNotInHouse' has a wrong offset!");

// Function AJB.AJBAIEnvironmentBlock.AddGate
// 0x0008 (0x0008 - 0x0000)
struct AJBAIEnvironmentBlock_AddGate final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAIEnvironmentBlock_AddGate) == 0x000008, "Wrong alignment on AJBAIEnvironmentBlock_AddGate");
static_assert(sizeof(AJBAIEnvironmentBlock_AddGate) == 0x000008, "Wrong size on AJBAIEnvironmentBlock_AddGate");
static_assert(offsetof(AJBAIEnvironmentBlock_AddGate, Actor) == 0x000000, "Member 'AJBAIEnvironmentBlock_AddGate::Actor' has a wrong offset!");

// Function AJB.AJBAIEnvironmentBlock.AddHouseInfo
// 0x0008 (0x0008 - 0x0000)
struct AJBAIEnvironmentBlock_AddHouseInfo final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAIEnvironmentBlock_AddHouseInfo) == 0x000008, "Wrong alignment on AJBAIEnvironmentBlock_AddHouseInfo");
static_assert(sizeof(AJBAIEnvironmentBlock_AddHouseInfo) == 0x000008, "Wrong size on AJBAIEnvironmentBlock_AddHouseInfo");
static_assert(offsetof(AJBAIEnvironmentBlock_AddHouseInfo, Actor) == 0x000000, "Member 'AJBAIEnvironmentBlock_AddHouseInfo::Actor' has a wrong offset!");

// Function AJB.AJBAIEnvironmentBlock.AddStartPoint
// 0x000C (0x000C - 0x0000)
struct AJBAIEnvironmentBlock_AddStartPoint final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAIEnvironmentBlock_AddStartPoint) == 0x000004, "Wrong alignment on AJBAIEnvironmentBlock_AddStartPoint");
static_assert(sizeof(AJBAIEnvironmentBlock_AddStartPoint) == 0x00000C, "Wrong size on AJBAIEnvironmentBlock_AddStartPoint");
static_assert(offsetof(AJBAIEnvironmentBlock_AddStartPoint, Location) == 0x000000, "Member 'AJBAIEnvironmentBlock_AddStartPoint::Location' has a wrong offset!");

// Function AJB.AJBAIEnvironmentBlock.AddTrap
// 0x0008 (0x0008 - 0x0000)
struct AJBAIEnvironmentBlock_AddTrap final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAIEnvironmentBlock_AddTrap) == 0x000008, "Wrong alignment on AJBAIEnvironmentBlock_AddTrap");
static_assert(sizeof(AJBAIEnvironmentBlock_AddTrap) == 0x000008, "Wrong size on AJBAIEnvironmentBlock_AddTrap");
static_assert(offsetof(AJBAIEnvironmentBlock_AddTrap, Actor) == 0x000000, "Member 'AJBAIEnvironmentBlock_AddTrap::Actor' has a wrong offset!");

// Function AJB.AJBAIEnvironmentBlock.AddWaySpotByActor
// 0x0008 (0x0008 - 0x0000)
struct AJBAIEnvironmentBlock_AddWaySpotByActor final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAIEnvironmentBlock_AddWaySpotByActor) == 0x000008, "Wrong alignment on AJBAIEnvironmentBlock_AddWaySpotByActor");
static_assert(sizeof(AJBAIEnvironmentBlock_AddWaySpotByActor) == 0x000008, "Wrong size on AJBAIEnvironmentBlock_AddWaySpotByActor");
static_assert(offsetof(AJBAIEnvironmentBlock_AddWaySpotByActor, Actor) == 0x000000, "Member 'AJBAIEnvironmentBlock_AddWaySpotByActor::Actor' has a wrong offset!");

// Function AJB.AJBAIEnvironmentBlock.AddWaySpotByLocation
// 0x000C (0x000C - 0x0000)
struct AJBAIEnvironmentBlock_AddWaySpotByLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAIEnvironmentBlock_AddWaySpotByLocation) == 0x000004, "Wrong alignment on AJBAIEnvironmentBlock_AddWaySpotByLocation");
static_assert(sizeof(AJBAIEnvironmentBlock_AddWaySpotByLocation) == 0x00000C, "Wrong size on AJBAIEnvironmentBlock_AddWaySpotByLocation");
static_assert(offsetof(AJBAIEnvironmentBlock_AddWaySpotByLocation, Location) == 0x000000, "Member 'AJBAIEnvironmentBlock_AddWaySpotByLocation::Location' has a wrong offset!");

// Function AJB.AJBAIEnvironmentBlock.AddWindow
// 0x0008 (0x0008 - 0x0000)
struct AJBAIEnvironmentBlock_AddWindow final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAIEnvironmentBlock_AddWindow) == 0x000008, "Wrong alignment on AJBAIEnvironmentBlock_AddWindow");
static_assert(sizeof(AJBAIEnvironmentBlock_AddWindow) == 0x000008, "Wrong size on AJBAIEnvironmentBlock_AddWindow");
static_assert(offsetof(AJBAIEnvironmentBlock_AddWindow, Actor) == 0x000000, "Member 'AJBAIEnvironmentBlock_AddWindow::Actor' has a wrong offset!");

// Function AJB.AJBAIEnvironmentBlock.RemoveBurningActor
// 0x0008 (0x0008 - 0x0000)
struct AJBAIEnvironmentBlock_RemoveBurningActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAIEnvironmentBlock_RemoveBurningActor) == 0x000008, "Wrong alignment on AJBAIEnvironmentBlock_RemoveBurningActor");
static_assert(sizeof(AJBAIEnvironmentBlock_RemoveBurningActor) == 0x000008, "Wrong size on AJBAIEnvironmentBlock_RemoveBurningActor");
static_assert(offsetof(AJBAIEnvironmentBlock_RemoveBurningActor, Actor) == 0x000000, "Member 'AJBAIEnvironmentBlock_RemoveBurningActor::Actor' has a wrong offset!");

// Function AJB.AJBAIEnvironmentBlock.RemoveTrap
// 0x0008 (0x0008 - 0x0000)
struct AJBAIEnvironmentBlock_RemoveTrap final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAIEnvironmentBlock_RemoveTrap) == 0x000008, "Wrong alignment on AJBAIEnvironmentBlock_RemoveTrap");
static_assert(sizeof(AJBAIEnvironmentBlock_RemoveTrap) == 0x000008, "Wrong size on AJBAIEnvironmentBlock_RemoveTrap");
static_assert(offsetof(AJBAIEnvironmentBlock_RemoveTrap, Actor) == 0x000000, "Member 'AJBAIEnvironmentBlock_RemoveTrap::Actor' has a wrong offset!");

// Function AJB.AJBAIEnvironmentBlock.GetCenterLocation
// 0x000C (0x000C - 0x0000)
struct AJBAIEnvironmentBlock_GetCenterLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAIEnvironmentBlock_GetCenterLocation) == 0x000004, "Wrong alignment on AJBAIEnvironmentBlock_GetCenterLocation");
static_assert(sizeof(AJBAIEnvironmentBlock_GetCenterLocation) == 0x00000C, "Wrong size on AJBAIEnvironmentBlock_GetCenterLocation");
static_assert(offsetof(AJBAIEnvironmentBlock_GetCenterLocation, ReturnValue) == 0x000000, "Member 'AJBAIEnvironmentBlock_GetCenterLocation::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameAIEnvironmentComponent.RequestAddBurningActor
// 0x0008 (0x0008 - 0x0000)
struct AJBInGameAIEnvironmentComponent_RequestAddBurningActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameAIEnvironmentComponent_RequestAddBurningActor) == 0x000008, "Wrong alignment on AJBInGameAIEnvironmentComponent_RequestAddBurningActor");
static_assert(sizeof(AJBInGameAIEnvironmentComponent_RequestAddBurningActor) == 0x000008, "Wrong size on AJBInGameAIEnvironmentComponent_RequestAddBurningActor");
static_assert(offsetof(AJBInGameAIEnvironmentComponent_RequestAddBurningActor, Actor) == 0x000000, "Member 'AJBInGameAIEnvironmentComponent_RequestAddBurningActor::Actor' has a wrong offset!");

// Function AJB.AJBInGameAIEnvironmentComponent.RequestAddSpawnedItem
// 0x0008 (0x0008 - 0x0000)
struct AJBInGameAIEnvironmentComponent_RequestAddSpawnedItem final
{
public:
	class AActor*                                 Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameAIEnvironmentComponent_RequestAddSpawnedItem) == 0x000008, "Wrong alignment on AJBInGameAIEnvironmentComponent_RequestAddSpawnedItem");
static_assert(sizeof(AJBInGameAIEnvironmentComponent_RequestAddSpawnedItem) == 0x000008, "Wrong size on AJBInGameAIEnvironmentComponent_RequestAddSpawnedItem");
static_assert(offsetof(AJBInGameAIEnvironmentComponent_RequestAddSpawnedItem, Item) == 0x000000, "Member 'AJBInGameAIEnvironmentComponent_RequestAddSpawnedItem::Item' has a wrong offset!");

// Function AJB.AJBInGameAIEnvironmentComponent.RequestAddTrap
// 0x0008 (0x0008 - 0x0000)
struct AJBInGameAIEnvironmentComponent_RequestAddTrap final
{
public:
	class AActor*                                 Trap;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameAIEnvironmentComponent_RequestAddTrap) == 0x000008, "Wrong alignment on AJBInGameAIEnvironmentComponent_RequestAddTrap");
static_assert(sizeof(AJBInGameAIEnvironmentComponent_RequestAddTrap) == 0x000008, "Wrong size on AJBInGameAIEnvironmentComponent_RequestAddTrap");
static_assert(offsetof(AJBInGameAIEnvironmentComponent_RequestAddTrap, Trap) == 0x000000, "Member 'AJBInGameAIEnvironmentComponent_RequestAddTrap::Trap' has a wrong offset!");

// Function AJB.AJBInGameAIEnvironmentComponent.RequestAIGion
// 0x0020 (0x0020 - 0x0000)
struct AJBInGameAIEnvironmentComponent_RequestAIGion final
{
public:
	struct FGameplayTag                           GionEffectType;                                    // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 GionOwner;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBInGameAIEnvironmentComponent_RequestAIGion) == 0x000008, "Wrong alignment on AJBInGameAIEnvironmentComponent_RequestAIGion");
static_assert(sizeof(AJBInGameAIEnvironmentComponent_RequestAIGion) == 0x000020, "Wrong size on AJBInGameAIEnvironmentComponent_RequestAIGion");
static_assert(offsetof(AJBInGameAIEnvironmentComponent_RequestAIGion, GionEffectType) == 0x000000, "Member 'AJBInGameAIEnvironmentComponent_RequestAIGion::GionEffectType' has a wrong offset!");
static_assert(offsetof(AJBInGameAIEnvironmentComponent_RequestAIGion, GionOwner) == 0x000008, "Member 'AJBInGameAIEnvironmentComponent_RequestAIGion::GionOwner' has a wrong offset!");
static_assert(offsetof(AJBInGameAIEnvironmentComponent_RequestAIGion, Location) == 0x000010, "Member 'AJBInGameAIEnvironmentComponent_RequestAIGion::Location' has a wrong offset!");

// Function AJB.AJBInGameAIEnvironmentComponent.SetupEnvironmentBlocks
// 0x0010 (0x0010 - 0x0000)
struct AJBInGameAIEnvironmentComponent_SetupEnvironmentBlocks final
{
public:
	class AActor*                                 NavMeshVolume;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlockUnitSizeIn;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBInGameAIEnvironmentComponent_SetupEnvironmentBlocks) == 0x000008, "Wrong alignment on AJBInGameAIEnvironmentComponent_SetupEnvironmentBlocks");
static_assert(sizeof(AJBInGameAIEnvironmentComponent_SetupEnvironmentBlocks) == 0x000010, "Wrong size on AJBInGameAIEnvironmentComponent_SetupEnvironmentBlocks");
static_assert(offsetof(AJBInGameAIEnvironmentComponent_SetupEnvironmentBlocks, NavMeshVolume) == 0x000000, "Member 'AJBInGameAIEnvironmentComponent_SetupEnvironmentBlocks::NavMeshVolume' has a wrong offset!");
static_assert(offsetof(AJBInGameAIEnvironmentComponent_SetupEnvironmentBlocks, BlockUnitSizeIn) == 0x000008, "Member 'AJBInGameAIEnvironmentComponent_SetupEnvironmentBlocks::BlockUnitSizeIn' has a wrong offset!");

// Function AJB.AJBInGameAIEnvironmentComponent.GetBlockIndex
// 0x0010 (0x0010 - 0x0000)
struct AJBInGameAIEnvironmentComponent_GetBlockIndex final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameAIEnvironmentComponent_GetBlockIndex) == 0x000004, "Wrong alignment on AJBInGameAIEnvironmentComponent_GetBlockIndex");
static_assert(sizeof(AJBInGameAIEnvironmentComponent_GetBlockIndex) == 0x000010, "Wrong size on AJBInGameAIEnvironmentComponent_GetBlockIndex");
static_assert(offsetof(AJBInGameAIEnvironmentComponent_GetBlockIndex, Location) == 0x000000, "Member 'AJBInGameAIEnvironmentComponent_GetBlockIndex::Location' has a wrong offset!");
static_assert(offsetof(AJBInGameAIEnvironmentComponent_GetBlockIndex, ReturnValue) == 0x00000C, "Member 'AJBInGameAIEnvironmentComponent_GetBlockIndex::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameAIEnvironmentComponent.GetBlockIndexAround
// 0x0010 (0x0010 - 0x0000)
struct AJBInGameAIEnvironmentComponent_GetBlockIndexAround final
{
public:
	int32                                         BlockIndexCenter;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OffsetCountX;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OffsetCountY;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameAIEnvironmentComponent_GetBlockIndexAround) == 0x000004, "Wrong alignment on AJBInGameAIEnvironmentComponent_GetBlockIndexAround");
static_assert(sizeof(AJBInGameAIEnvironmentComponent_GetBlockIndexAround) == 0x000010, "Wrong size on AJBInGameAIEnvironmentComponent_GetBlockIndexAround");
static_assert(offsetof(AJBInGameAIEnvironmentComponent_GetBlockIndexAround, BlockIndexCenter) == 0x000000, "Member 'AJBInGameAIEnvironmentComponent_GetBlockIndexAround::BlockIndexCenter' has a wrong offset!");
static_assert(offsetof(AJBInGameAIEnvironmentComponent_GetBlockIndexAround, OffsetCountX) == 0x000004, "Member 'AJBInGameAIEnvironmentComponent_GetBlockIndexAround::OffsetCountX' has a wrong offset!");
static_assert(offsetof(AJBInGameAIEnvironmentComponent_GetBlockIndexAround, OffsetCountY) == 0x000008, "Member 'AJBInGameAIEnvironmentComponent_GetBlockIndexAround::OffsetCountY' has a wrong offset!");
static_assert(offsetof(AJBInGameAIEnvironmentComponent_GetBlockIndexAround, ReturnValue) == 0x00000C, "Member 'AJBInGameAIEnvironmentComponent_GetBlockIndexAround::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameAIEnvironmentComponent.IsInNavMeshVolume
// 0x0010 (0x0010 - 0x0000)
struct AJBInGameAIEnvironmentComponent_IsInNavMeshVolume final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBInGameAIEnvironmentComponent_IsInNavMeshVolume) == 0x000004, "Wrong alignment on AJBInGameAIEnvironmentComponent_IsInNavMeshVolume");
static_assert(sizeof(AJBInGameAIEnvironmentComponent_IsInNavMeshVolume) == 0x000010, "Wrong size on AJBInGameAIEnvironmentComponent_IsInNavMeshVolume");
static_assert(offsetof(AJBInGameAIEnvironmentComponent_IsInNavMeshVolume, Location) == 0x000000, "Member 'AJBInGameAIEnvironmentComponent_IsInNavMeshVolume::Location' has a wrong offset!");
static_assert(offsetof(AJBInGameAIEnvironmentComponent_IsInNavMeshVolume, ReturnValue) == 0x00000C, "Member 'AJBInGameAIEnvironmentComponent_IsInNavMeshVolume::ReturnValue' has a wrong offset!");

// Function AJB.AJBAIFunctionLibrary.AabbContainsAabb
// 0x003C (0x003C - 0x0000)
struct AJBAIFunctionLibrary_AabbContainsAabb final
{
public:
	struct FBox                                   Box;                                               // 0x0000(0x001C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox                                   Other;                                             // 0x001C(0x001C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBAIFunctionLibrary_AabbContainsAabb) == 0x000004, "Wrong alignment on AJBAIFunctionLibrary_AabbContainsAabb");
static_assert(sizeof(AJBAIFunctionLibrary_AabbContainsAabb) == 0x00003C, "Wrong size on AJBAIFunctionLibrary_AabbContainsAabb");
static_assert(offsetof(AJBAIFunctionLibrary_AabbContainsAabb, Box) == 0x000000, "Member 'AJBAIFunctionLibrary_AabbContainsAabb::Box' has a wrong offset!");
static_assert(offsetof(AJBAIFunctionLibrary_AabbContainsAabb, Other) == 0x00001C, "Member 'AJBAIFunctionLibrary_AabbContainsAabb::Other' has a wrong offset!");
static_assert(offsetof(AJBAIFunctionLibrary_AabbContainsAabb, ReturnValue) == 0x000038, "Member 'AJBAIFunctionLibrary_AabbContainsAabb::ReturnValue' has a wrong offset!");

// Function AJB.AJBAIFunctionLibrary.AabbContainsPoint
// 0x002C (0x002C - 0x0000)
struct AJBAIFunctionLibrary_AabbContainsPoint final
{
public:
	struct FBox                                   Box;                                               // 0x0000(0x001C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x001C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBAIFunctionLibrary_AabbContainsPoint) == 0x000004, "Wrong alignment on AJBAIFunctionLibrary_AabbContainsPoint");
static_assert(sizeof(AJBAIFunctionLibrary_AabbContainsPoint) == 0x00002C, "Wrong size on AJBAIFunctionLibrary_AabbContainsPoint");
static_assert(offsetof(AJBAIFunctionLibrary_AabbContainsPoint, Box) == 0x000000, "Member 'AJBAIFunctionLibrary_AabbContainsPoint::Box' has a wrong offset!");
static_assert(offsetof(AJBAIFunctionLibrary_AabbContainsPoint, Point) == 0x00001C, "Member 'AJBAIFunctionLibrary_AabbContainsPoint::Point' has a wrong offset!");
static_assert(offsetof(AJBAIFunctionLibrary_AabbContainsPoint, ReturnValue) == 0x000028, "Member 'AJBAIFunctionLibrary_AabbContainsPoint::ReturnValue' has a wrong offset!");

// Function AJB.AJBAIFunctionLibrary.DeprojectScreenPositionToWorldForAI
// 0x0048 (0x0048 - 0x0000)
struct AJBAIFunctionLibrary_DeprojectScreenPositionToWorldForAI final
{
public:
	float                                         ScreenX;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScreenY;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         FOV;                                               // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ViewSize;                                          // 0x0024(0x0008)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x002C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldDirection;                                    // 0x0038(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0044(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBAIFunctionLibrary_DeprojectScreenPositionToWorldForAI) == 0x000004, "Wrong alignment on AJBAIFunctionLibrary_DeprojectScreenPositionToWorldForAI");
static_assert(sizeof(AJBAIFunctionLibrary_DeprojectScreenPositionToWorldForAI) == 0x000048, "Wrong size on AJBAIFunctionLibrary_DeprojectScreenPositionToWorldForAI");
static_assert(offsetof(AJBAIFunctionLibrary_DeprojectScreenPositionToWorldForAI, ScreenX) == 0x000000, "Member 'AJBAIFunctionLibrary_DeprojectScreenPositionToWorldForAI::ScreenX' has a wrong offset!");
static_assert(offsetof(AJBAIFunctionLibrary_DeprojectScreenPositionToWorldForAI, ScreenY) == 0x000004, "Member 'AJBAIFunctionLibrary_DeprojectScreenPositionToWorldForAI::ScreenY' has a wrong offset!");
static_assert(offsetof(AJBAIFunctionLibrary_DeprojectScreenPositionToWorldForAI, Location) == 0x000008, "Member 'AJBAIFunctionLibrary_DeprojectScreenPositionToWorldForAI::Location' has a wrong offset!");
static_assert(offsetof(AJBAIFunctionLibrary_DeprojectScreenPositionToWorldForAI, Rotation) == 0x000014, "Member 'AJBAIFunctionLibrary_DeprojectScreenPositionToWorldForAI::Rotation' has a wrong offset!");
static_assert(offsetof(AJBAIFunctionLibrary_DeprojectScreenPositionToWorldForAI, FOV) == 0x000020, "Member 'AJBAIFunctionLibrary_DeprojectScreenPositionToWorldForAI::FOV' has a wrong offset!");
static_assert(offsetof(AJBAIFunctionLibrary_DeprojectScreenPositionToWorldForAI, ViewSize) == 0x000024, "Member 'AJBAIFunctionLibrary_DeprojectScreenPositionToWorldForAI::ViewSize' has a wrong offset!");
static_assert(offsetof(AJBAIFunctionLibrary_DeprojectScreenPositionToWorldForAI, WorldLocation) == 0x00002C, "Member 'AJBAIFunctionLibrary_DeprojectScreenPositionToWorldForAI::WorldLocation' has a wrong offset!");
static_assert(offsetof(AJBAIFunctionLibrary_DeprojectScreenPositionToWorldForAI, WorldDirection) == 0x000038, "Member 'AJBAIFunctionLibrary_DeprojectScreenPositionToWorldForAI::WorldDirection' has a wrong offset!");
static_assert(offsetof(AJBAIFunctionLibrary_DeprojectScreenPositionToWorldForAI, ReturnValue) == 0x000044, "Member 'AJBAIFunctionLibrary_DeprojectScreenPositionToWorldForAI::ReturnValue' has a wrong offset!");

// Function AJB.AJBAIFunctionLibrary.GetBlackboardKeyName
// 0x0030 (0x0030 - 0x0000)
struct AJBAIFunctionLibrary_GetBlackboardKeyName final
{
public:
	struct FBlackboardKeySelector                 Key;                                               // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAIFunctionLibrary_GetBlackboardKeyName) == 0x000008, "Wrong alignment on AJBAIFunctionLibrary_GetBlackboardKeyName");
static_assert(sizeof(AJBAIFunctionLibrary_GetBlackboardKeyName) == 0x000030, "Wrong size on AJBAIFunctionLibrary_GetBlackboardKeyName");
static_assert(offsetof(AJBAIFunctionLibrary_GetBlackboardKeyName, Key) == 0x000000, "Member 'AJBAIFunctionLibrary_GetBlackboardKeyName::Key' has a wrong offset!");
static_assert(offsetof(AJBAIFunctionLibrary_GetBlackboardKeyName, ReturnValue) == 0x000028, "Member 'AJBAIFunctionLibrary_GetBlackboardKeyName::ReturnValue' has a wrong offset!");

// Function AJB.AJBAIFunctionLibrary.GetClosestPointOnAabb
// 0x0034 (0x0034 - 0x0000)
struct AJBAIFunctionLibrary_GetClosestPointOnAabb final
{
public:
	struct FBox                                   Box;                                               // 0x0000(0x001C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x001C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0028(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAIFunctionLibrary_GetClosestPointOnAabb) == 0x000004, "Wrong alignment on AJBAIFunctionLibrary_GetClosestPointOnAabb");
static_assert(sizeof(AJBAIFunctionLibrary_GetClosestPointOnAabb) == 0x000034, "Wrong size on AJBAIFunctionLibrary_GetClosestPointOnAabb");
static_assert(offsetof(AJBAIFunctionLibrary_GetClosestPointOnAabb, Box) == 0x000000, "Member 'AJBAIFunctionLibrary_GetClosestPointOnAabb::Box' has a wrong offset!");
static_assert(offsetof(AJBAIFunctionLibrary_GetClosestPointOnAabb, Point) == 0x00001C, "Member 'AJBAIFunctionLibrary_GetClosestPointOnAabb::Point' has a wrong offset!");
static_assert(offsetof(AJBAIFunctionLibrary_GetClosestPointOnAabb, ReturnValue) == 0x000028, "Member 'AJBAIFunctionLibrary_GetClosestPointOnAabb::ReturnValue' has a wrong offset!");

// Function AJB.AJBAIFunctionLibrary.InvalidLocation
// 0x000C (0x000C - 0x0000)
struct AJBAIFunctionLibrary_InvalidLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAIFunctionLibrary_InvalidLocation) == 0x000004, "Wrong alignment on AJBAIFunctionLibrary_InvalidLocation");
static_assert(sizeof(AJBAIFunctionLibrary_InvalidLocation) == 0x00000C, "Wrong size on AJBAIFunctionLibrary_InvalidLocation");
static_assert(offsetof(AJBAIFunctionLibrary_InvalidLocation, ReturnValue) == 0x000000, "Member 'AJBAIFunctionLibrary_InvalidLocation::ReturnValue' has a wrong offset!");

// Function AJB.AJBAIFunctionLibrary.IsFinite
// 0x0008 (0x0008 - 0x0000)
struct AJBAIFunctionLibrary_IsFinite final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBAIFunctionLibrary_IsFinite) == 0x000004, "Wrong alignment on AJBAIFunctionLibrary_IsFinite");
static_assert(sizeof(AJBAIFunctionLibrary_IsFinite) == 0x000008, "Wrong size on AJBAIFunctionLibrary_IsFinite");
static_assert(offsetof(AJBAIFunctionLibrary_IsFinite, Value) == 0x000000, "Member 'AJBAIFunctionLibrary_IsFinite::Value' has a wrong offset!");
static_assert(offsetof(AJBAIFunctionLibrary_IsFinite, ReturnValue) == 0x000004, "Member 'AJBAIFunctionLibrary_IsFinite::ReturnValue' has a wrong offset!");

// Function AJB.AJBAIFunctionLibrary.IsNaN
// 0x0008 (0x0008 - 0x0000)
struct AJBAIFunctionLibrary_IsNaN final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBAIFunctionLibrary_IsNaN) == 0x000004, "Wrong alignment on AJBAIFunctionLibrary_IsNaN");
static_assert(sizeof(AJBAIFunctionLibrary_IsNaN) == 0x000008, "Wrong size on AJBAIFunctionLibrary_IsNaN");
static_assert(offsetof(AJBAIFunctionLibrary_IsNaN, Value) == 0x000000, "Member 'AJBAIFunctionLibrary_IsNaN::Value' has a wrong offset!");
static_assert(offsetof(AJBAIFunctionLibrary_IsNaN, ReturnValue) == 0x000004, "Member 'AJBAIFunctionLibrary_IsNaN::ReturnValue' has a wrong offset!");

// Function AJB.AJBAIFunctionLibrary.IsSameParentBTNode
// 0x0018 (0x0018 - 0x0000)
struct AJBAIFunctionLibrary_IsSameParentBTNode final
{
public:
	class UBTDecorator_BlueprintBase*             Decorator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBTService_BlueprintBase*               Service;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBAIFunctionLibrary_IsSameParentBTNode) == 0x000008, "Wrong alignment on AJBAIFunctionLibrary_IsSameParentBTNode");
static_assert(sizeof(AJBAIFunctionLibrary_IsSameParentBTNode) == 0x000018, "Wrong size on AJBAIFunctionLibrary_IsSameParentBTNode");
static_assert(offsetof(AJBAIFunctionLibrary_IsSameParentBTNode, Decorator) == 0x000000, "Member 'AJBAIFunctionLibrary_IsSameParentBTNode::Decorator' has a wrong offset!");
static_assert(offsetof(AJBAIFunctionLibrary_IsSameParentBTNode, Service) == 0x000008, "Member 'AJBAIFunctionLibrary_IsSameParentBTNode::Service' has a wrong offset!");
static_assert(offsetof(AJBAIFunctionLibrary_IsSameParentBTNode, ReturnValue) == 0x000010, "Member 'AJBAIFunctionLibrary_IsSameParentBTNode::ReturnValue' has a wrong offset!");

// Function AJB.AJBAIFunctionLibrary.LineAabbIntersection
// 0x0038 (0x0038 - 0x0000)
struct AJBAIFunctionLibrary_LineAabbIntersection final
{
public:
	struct FBox                                   Box;                                               // 0x0000(0x001C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x001C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0028(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBAIFunctionLibrary_LineAabbIntersection) == 0x000004, "Wrong alignment on AJBAIFunctionLibrary_LineAabbIntersection");
static_assert(sizeof(AJBAIFunctionLibrary_LineAabbIntersection) == 0x000038, "Wrong size on AJBAIFunctionLibrary_LineAabbIntersection");
static_assert(offsetof(AJBAIFunctionLibrary_LineAabbIntersection, Box) == 0x000000, "Member 'AJBAIFunctionLibrary_LineAabbIntersection::Box' has a wrong offset!");
static_assert(offsetof(AJBAIFunctionLibrary_LineAabbIntersection, Start) == 0x00001C, "Member 'AJBAIFunctionLibrary_LineAabbIntersection::Start' has a wrong offset!");
static_assert(offsetof(AJBAIFunctionLibrary_LineAabbIntersection, End) == 0x000028, "Member 'AJBAIFunctionLibrary_LineAabbIntersection::End' has a wrong offset!");
static_assert(offsetof(AJBAIFunctionLibrary_LineAabbIntersection, ReturnValue) == 0x000034, "Member 'AJBAIFunctionLibrary_LineAabbIntersection::ReturnValue' has a wrong offset!");

// Function AJB.AJBAIFunctionLibrary.MakeBoundingBoxFromLocations
// 0x0030 (0x0030 - 0x0000)
struct AJBAIFunctionLibrary_MakeBoundingBoxFromLocations final
{
public:
	TArray<struct FVector>                        Locations;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FBox                                   OutBox;                                            // 0x0010(0x001C)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBAIFunctionLibrary_MakeBoundingBoxFromLocations) == 0x000008, "Wrong alignment on AJBAIFunctionLibrary_MakeBoundingBoxFromLocations");
static_assert(sizeof(AJBAIFunctionLibrary_MakeBoundingBoxFromLocations) == 0x000030, "Wrong size on AJBAIFunctionLibrary_MakeBoundingBoxFromLocations");
static_assert(offsetof(AJBAIFunctionLibrary_MakeBoundingBoxFromLocations, Locations) == 0x000000, "Member 'AJBAIFunctionLibrary_MakeBoundingBoxFromLocations::Locations' has a wrong offset!");
static_assert(offsetof(AJBAIFunctionLibrary_MakeBoundingBoxFromLocations, OutBox) == 0x000010, "Member 'AJBAIFunctionLibrary_MakeBoundingBoxFromLocations::OutBox' has a wrong offset!");

// Function AJB.AJBInGameAIInputProxyComponent.DebugResetOwnerController
// 0x0008 (0x0008 - 0x0000)
struct AJBInGameAIInputProxyComponent_DebugResetOwnerController final
{
public:
	class AController*                            OwnerControllerIn;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameAIInputProxyComponent_DebugResetOwnerController) == 0x000008, "Wrong alignment on AJBInGameAIInputProxyComponent_DebugResetOwnerController");
static_assert(sizeof(AJBInGameAIInputProxyComponent_DebugResetOwnerController) == 0x000008, "Wrong size on AJBInGameAIInputProxyComponent_DebugResetOwnerController");
static_assert(offsetof(AJBInGameAIInputProxyComponent_DebugResetOwnerController, OwnerControllerIn) == 0x000000, "Member 'AJBInGameAIInputProxyComponent_DebugResetOwnerController::OwnerControllerIn' has a wrong offset!");

// Function AJB.AJBInGameAIInputProxyComponent.SetMovement
// 0x0010 (0x0010 - 0x0000)
struct AJBInGameAIInputProxyComponent_SetMovement final
{
public:
	float                                         Forward;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Right;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Turn;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookUp;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameAIInputProxyComponent_SetMovement) == 0x000004, "Wrong alignment on AJBInGameAIInputProxyComponent_SetMovement");
static_assert(sizeof(AJBInGameAIInputProxyComponent_SetMovement) == 0x000010, "Wrong size on AJBInGameAIInputProxyComponent_SetMovement");
static_assert(offsetof(AJBInGameAIInputProxyComponent_SetMovement, Forward) == 0x000000, "Member 'AJBInGameAIInputProxyComponent_SetMovement::Forward' has a wrong offset!");
static_assert(offsetof(AJBInGameAIInputProxyComponent_SetMovement, Right) == 0x000004, "Member 'AJBInGameAIInputProxyComponent_SetMovement::Right' has a wrong offset!");
static_assert(offsetof(AJBInGameAIInputProxyComponent_SetMovement, Turn) == 0x000008, "Member 'AJBInGameAIInputProxyComponent_SetMovement::Turn' has a wrong offset!");
static_assert(offsetof(AJBInGameAIInputProxyComponent_SetMovement, LookUp) == 0x00000C, "Member 'AJBInGameAIInputProxyComponent_SetMovement::LookUp' has a wrong offset!");

// Function AJB.AJBAMErrorObserverActor.FinishGameServerCheck
// 0x0001 (0x0001 - 0x0000)
struct AJBAMErrorObserverActor_FinishGameServerCheck final
{
public:
	EAJBTestModeGameServerError                   Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMErrorObserverActor_FinishGameServerCheck) == 0x000001, "Wrong alignment on AJBAMErrorObserverActor_FinishGameServerCheck");
static_assert(sizeof(AJBAMErrorObserverActor_FinishGameServerCheck) == 0x000001, "Wrong size on AJBAMErrorObserverActor_FinishGameServerCheck");
static_assert(offsetof(AJBAMErrorObserverActor_FinishGameServerCheck, Result) == 0x000000, "Member 'AJBAMErrorObserverActor_FinishGameServerCheck::Result' has a wrong offset!");

// Function AJB.AJBAMErrorObserverActor.FinishUploapErrorLog
// 0x0001 (0x0001 - 0x0000)
struct AJBAMErrorObserverActor_FinishUploapErrorLog final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMErrorObserverActor_FinishUploapErrorLog) == 0x000001, "Wrong alignment on AJBAMErrorObserverActor_FinishUploapErrorLog");
static_assert(sizeof(AJBAMErrorObserverActor_FinishUploapErrorLog) == 0x000001, "Wrong size on AJBAMErrorObserverActor_FinishUploapErrorLog");
static_assert(offsetof(AJBAMErrorObserverActor_FinishUploapErrorLog, bSuccess) == 0x000000, "Member 'AJBAMErrorObserverActor_FinishUploapErrorLog::bSuccess' has a wrong offset!");

// Function AJB.AJBAMErrorObserverActor.FinishUploapHeadClerk
// 0x0001 (0x0001 - 0x0000)
struct AJBAMErrorObserverActor_FinishUploapHeadClerk final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMErrorObserverActor_FinishUploapHeadClerk) == 0x000001, "Wrong alignment on AJBAMErrorObserverActor_FinishUploapHeadClerk");
static_assert(sizeof(AJBAMErrorObserverActor_FinishUploapHeadClerk) == 0x000001, "Wrong size on AJBAMErrorObserverActor_FinishUploapHeadClerk");
static_assert(offsetof(AJBAMErrorObserverActor_FinishUploapHeadClerk, bSuccess) == 0x000000, "Member 'AJBAMErrorObserverActor_FinishUploapHeadClerk::bSuccess' has a wrong offset!");

// Function AJB.AJBAMErrorObserverActor.OnShowErrorWindow
// 0x0001 (0x0001 - 0x0000)
struct AJBAMErrorObserverActor_OnShowErrorWindow final
{
public:
	EAJBErrorID                                   ErrorID;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMErrorObserverActor_OnShowErrorWindow) == 0x000001, "Wrong alignment on AJBAMErrorObserverActor_OnShowErrorWindow");
static_assert(sizeof(AJBAMErrorObserverActor_OnShowErrorWindow) == 0x000001, "Wrong size on AJBAMErrorObserverActor_OnShowErrorWindow");
static_assert(offsetof(AJBAMErrorObserverActor_OnShowErrorWindow, ErrorID) == 0x000000, "Member 'AJBAMErrorObserverActor_OnShowErrorWindow::ErrorID' has a wrong offset!");

// Function AJB.AJBAMErrorObserverActor.SetEnableErrorCheck
// 0x0001 (0x0001 - 0x0000)
struct AJBAMErrorObserverActor_SetEnableErrorCheck final
{
public:
	bool                                          bIsEnable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMErrorObserverActor_SetEnableErrorCheck) == 0x000001, "Wrong alignment on AJBAMErrorObserverActor_SetEnableErrorCheck");
static_assert(sizeof(AJBAMErrorObserverActor_SetEnableErrorCheck) == 0x000001, "Wrong size on AJBAMErrorObserverActor_SetEnableErrorCheck");
static_assert(offsetof(AJBAMErrorObserverActor_SetEnableErrorCheck, bIsEnable) == 0x000000, "Member 'AJBAMErrorObserverActor_SetEnableErrorCheck::bIsEnable' has a wrong offset!");

// Function AJB.AJBAMErrorObserverActor.SetEnableUpload
// 0x0001 (0x0001 - 0x0000)
struct AJBAMErrorObserverActor_SetEnableUpload final
{
public:
	bool                                          bIsEnable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMErrorObserverActor_SetEnableUpload) == 0x000001, "Wrong alignment on AJBAMErrorObserverActor_SetEnableUpload");
static_assert(sizeof(AJBAMErrorObserverActor_SetEnableUpload) == 0x000001, "Wrong size on AJBAMErrorObserverActor_SetEnableUpload");
static_assert(offsetof(AJBAMErrorObserverActor_SetEnableUpload, bIsEnable) == 0x000000, "Member 'AJBAMErrorObserverActor_SetEnableUpload::bIsEnable' has a wrong offset!");

// Function AJB.AJBAMLED.ALLOffLED
// 0x0008 (0x0008 - 0x0000)
struct AJBAMLED_ALLOffLED final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMLED_ALLOffLED) == 0x000008, "Wrong alignment on AJBAMLED_ALLOffLED");
static_assert(sizeof(AJBAMLED_ALLOffLED) == 0x000008, "Wrong size on AJBAMLED_ALLOffLED");
static_assert(offsetof(AJBAMLED_ALLOffLED, WorldContextObject) == 0x000000, "Member 'AJBAMLED_ALLOffLED::WorldContextObject' has a wrong offset!");

// Function AJB.AJBAMLED.SetAJBBoardLEDPattern
// 0x0010 (0x0010 - 0x0000)
struct AJBAMLED_SetAJBBoardLEDPattern final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAJBBoardLEDPattern                           Pattern;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBAMLED_SetAJBBoardLEDPattern) == 0x000008, "Wrong alignment on AJBAMLED_SetAJBBoardLEDPattern");
static_assert(sizeof(AJBAMLED_SetAJBBoardLEDPattern) == 0x000010, "Wrong size on AJBAMLED_SetAJBBoardLEDPattern");
static_assert(offsetof(AJBAMLED_SetAJBBoardLEDPattern, WorldContextObject) == 0x000000, "Member 'AJBAMLED_SetAJBBoardLEDPattern::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBAMLED_SetAJBBoardLEDPattern, Pattern) == 0x000008, "Member 'AJBAMLED_SetAJBBoardLEDPattern::Pattern' has a wrong offset!");

// Function AJB.AJBAMLED.SetBoardBackLEDColor
// 0x0010 (0x0010 - 0x0000)
struct AJBAMLED_SetBoardBackLEDColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMLED_SetBoardBackLEDColor) == 0x000004, "Wrong alignment on AJBAMLED_SetBoardBackLEDColor");
static_assert(sizeof(AJBAMLED_SetBoardBackLEDColor) == 0x000010, "Wrong size on AJBAMLED_SetBoardBackLEDColor");
static_assert(offsetof(AJBAMLED_SetBoardBackLEDColor, Color) == 0x000000, "Member 'AJBAMLED_SetBoardBackLEDColor::Color' has a wrong offset!");

// Function AJB.AJBAMLED.SetBoardCenterLEDColor
// 0x0010 (0x0010 - 0x0000)
struct AJBAMLED_SetBoardCenterLEDColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMLED_SetBoardCenterLEDColor) == 0x000004, "Wrong alignment on AJBAMLED_SetBoardCenterLEDColor");
static_assert(sizeof(AJBAMLED_SetBoardCenterLEDColor) == 0x000010, "Wrong size on AJBAMLED_SetBoardCenterLEDColor");
static_assert(offsetof(AJBAMLED_SetBoardCenterLEDColor, Color) == 0x000000, "Member 'AJBAMLED_SetBoardCenterLEDColor::Color' has a wrong offset!");

// Function AJB.AJBAMLED.SetBoardFrontLEDColor
// 0x0004 (0x0004 - 0x0000)
struct AJBAMLED_SetBoardFrontLEDColor final
{
public:
	int32                                         bright;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMLED_SetBoardFrontLEDColor) == 0x000004, "Wrong alignment on AJBAMLED_SetBoardFrontLEDColor");
static_assert(sizeof(AJBAMLED_SetBoardFrontLEDColor) == 0x000004, "Wrong size on AJBAMLED_SetBoardFrontLEDColor");
static_assert(offsetof(AJBAMLED_SetBoardFrontLEDColor, bright) == 0x000000, "Member 'AJBAMLED_SetBoardFrontLEDColor::bright' has a wrong offset!");

// Function AJB.AJBAMLED.SetQRCameraLED
// 0x0001 (0x0001 - 0x0000)
struct AJBAMLED_SetQRCameraLED final
{
public:
	bool                                          bOn;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMLED_SetQRCameraLED) == 0x000001, "Wrong alignment on AJBAMLED_SetQRCameraLED");
static_assert(sizeof(AJBAMLED_SetQRCameraLED) == 0x000001, "Wrong size on AJBAMLED_SetQRCameraLED");
static_assert(offsetof(AJBAMLED_SetQRCameraLED, bOn) == 0x000000, "Member 'AJBAMLED_SetQRCameraLED::bOn' has a wrong offset!");

// Function AJB.AJBAMLED.SetSideLEDColor
// 0x0010 (0x0010 - 0x0000)
struct AJBAMLED_SetSideLEDColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMLED_SetSideLEDColor) == 0x000004, "Wrong alignment on AJBAMLED_SetSideLEDColor");
static_assert(sizeof(AJBAMLED_SetSideLEDColor) == 0x000010, "Wrong size on AJBAMLED_SetSideLEDColor");
static_assert(offsetof(AJBAMLED_SetSideLEDColor, Color) == 0x000000, "Member 'AJBAMLED_SetSideLEDColor::Color' has a wrong offset!");

// Function AJB.AJBInGameCharacterBase.CleanUp
// 0x0001 (0x0001 - 0x0000)
struct AJBInGameCharacterBase_CleanUp final
{
public:
	bool                                          bShouldDestroy;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameCharacterBase_CleanUp) == 0x000001, "Wrong alignment on AJBInGameCharacterBase_CleanUp");
static_assert(sizeof(AJBInGameCharacterBase_CleanUp) == 0x000001, "Wrong size on AJBInGameCharacterBase_CleanUp");
static_assert(offsetof(AJBInGameCharacterBase_CleanUp, bShouldDestroy) == 0x000000, "Member 'AJBInGameCharacterBase_CleanUp::bShouldDestroy' has a wrong offset!");

// Function AJB.AJBInGameCharacterBase.LookupRate
// 0x0004 (0x0004 - 0x0000)
struct AJBInGameCharacterBase_LookupRate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameCharacterBase_LookupRate) == 0x000004, "Wrong alignment on AJBInGameCharacterBase_LookupRate");
static_assert(sizeof(AJBInGameCharacterBase_LookupRate) == 0x000004, "Wrong size on AJBInGameCharacterBase_LookupRate");
static_assert(offsetof(AJBInGameCharacterBase_LookupRate, Value) == 0x000000, "Member 'AJBInGameCharacterBase_LookupRate::Value' has a wrong offset!");

// Function AJB.AJBInGameCharacterBase.MoveForward
// 0x0004 (0x0004 - 0x0000)
struct AJBInGameCharacterBase_MoveForward final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameCharacterBase_MoveForward) == 0x000004, "Wrong alignment on AJBInGameCharacterBase_MoveForward");
static_assert(sizeof(AJBInGameCharacterBase_MoveForward) == 0x000004, "Wrong size on AJBInGameCharacterBase_MoveForward");
static_assert(offsetof(AJBInGameCharacterBase_MoveForward, Value) == 0x000000, "Member 'AJBInGameCharacterBase_MoveForward::Value' has a wrong offset!");

// Function AJB.AJBInGameCharacterBase.MoveRight
// 0x0004 (0x0004 - 0x0000)
struct AJBInGameCharacterBase_MoveRight final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameCharacterBase_MoveRight) == 0x000004, "Wrong alignment on AJBInGameCharacterBase_MoveRight");
static_assert(sizeof(AJBInGameCharacterBase_MoveRight) == 0x000004, "Wrong size on AJBInGameCharacterBase_MoveRight");
static_assert(offsetof(AJBInGameCharacterBase_MoveRight, Value) == 0x000000, "Member 'AJBInGameCharacterBase_MoveRight::Value' has a wrong offset!");

// Function AJB.AJBInGameCharacterBase.SetMatchingPlayerIndex
// 0x0004 (0x0004 - 0x0000)
struct AJBInGameCharacterBase_SetMatchingPlayerIndex final
{
public:
	int32                                         NewMatchingPlayerIndex;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameCharacterBase_SetMatchingPlayerIndex) == 0x000004, "Wrong alignment on AJBInGameCharacterBase_SetMatchingPlayerIndex");
static_assert(sizeof(AJBInGameCharacterBase_SetMatchingPlayerIndex) == 0x000004, "Wrong size on AJBInGameCharacterBase_SetMatchingPlayerIndex");
static_assert(offsetof(AJBInGameCharacterBase_SetMatchingPlayerIndex, NewMatchingPlayerIndex) == 0x000000, "Member 'AJBInGameCharacterBase_SetMatchingPlayerIndex::NewMatchingPlayerIndex' has a wrong offset!");

// Function AJB.AJBInGameCharacterBase.SetPairCharacter
// 0x0008 (0x0008 - 0x0000)
struct AJBInGameCharacterBase_SetPairCharacter final
{
public:
	class AAJBInGameCharacterBase*                InPairCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameCharacterBase_SetPairCharacter) == 0x000008, "Wrong alignment on AJBInGameCharacterBase_SetPairCharacter");
static_assert(sizeof(AJBInGameCharacterBase_SetPairCharacter) == 0x000008, "Wrong size on AJBInGameCharacterBase_SetPairCharacter");
static_assert(offsetof(AJBInGameCharacterBase_SetPairCharacter, InPairCharacter) == 0x000000, "Member 'AJBInGameCharacterBase_SetPairCharacter::InPairCharacter' has a wrong offset!");

// Function AJB.AJBInGameCharacterBase.SetPairID
// 0x0010 (0x0010 - 0x0000)
struct AJBInGameCharacterBase_SetPairID final
{
public:
	class FString                                 InPairID;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameCharacterBase_SetPairID) == 0x000008, "Wrong alignment on AJBInGameCharacterBase_SetPairID");
static_assert(sizeof(AJBInGameCharacterBase_SetPairID) == 0x000010, "Wrong size on AJBInGameCharacterBase_SetPairID");
static_assert(offsetof(AJBInGameCharacterBase_SetPairID, InPairID) == 0x000000, "Member 'AJBInGameCharacterBase_SetPairID::InPairID' has a wrong offset!");

// Function AJB.AJBInGameCharacterBase.SetRole
// 0x0001 (0x0001 - 0x0000)
struct AJBInGameCharacterBase_SetRole final
{
public:
	ENetRole                                      NewRole;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameCharacterBase_SetRole) == 0x000001, "Wrong alignment on AJBInGameCharacterBase_SetRole");
static_assert(sizeof(AJBInGameCharacterBase_SetRole) == 0x000001, "Wrong size on AJBInGameCharacterBase_SetRole");
static_assert(offsetof(AJBInGameCharacterBase_SetRole, NewRole) == 0x000000, "Member 'AJBInGameCharacterBase_SetRole::NewRole' has a wrong offset!");

// Function AJB.AJBInGameCharacterBase.SetSharedController
// 0x0008 (0x0008 - 0x0000)
struct AJBInGameCharacterBase_SetSharedController final
{
public:
	class AController*                            InController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameCharacterBase_SetSharedController) == 0x000008, "Wrong alignment on AJBInGameCharacterBase_SetSharedController");
static_assert(sizeof(AJBInGameCharacterBase_SetSharedController) == 0x000008, "Wrong size on AJBInGameCharacterBase_SetSharedController");
static_assert(offsetof(AJBInGameCharacterBase_SetSharedController, InController) == 0x000000, "Member 'AJBInGameCharacterBase_SetSharedController::InController' has a wrong offset!");

// Function AJB.AJBInGameCharacterBase.TryGetEmoteAnimMontageByIndex
// 0x0010 (0x0010 - 0x0000)
struct AJBInGameCharacterBase_TryGetEmoteAnimMontageByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameCharacterBase_TryGetEmoteAnimMontageByIndex) == 0x000008, "Wrong alignment on AJBInGameCharacterBase_TryGetEmoteAnimMontageByIndex");
static_assert(sizeof(AJBInGameCharacterBase_TryGetEmoteAnimMontageByIndex) == 0x000010, "Wrong size on AJBInGameCharacterBase_TryGetEmoteAnimMontageByIndex");
static_assert(offsetof(AJBInGameCharacterBase_TryGetEmoteAnimMontageByIndex, Index_0) == 0x000000, "Member 'AJBInGameCharacterBase_TryGetEmoteAnimMontageByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(AJBInGameCharacterBase_TryGetEmoteAnimMontageByIndex, ReturnValue) == 0x000008, "Member 'AJBInGameCharacterBase_TryGetEmoteAnimMontageByIndex::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameCharacterBase.TryGetEmoteVoiceByIndex
// 0x0008 (0x0008 - 0x0000)
struct AJBInGameCharacterBase_TryGetEmoteVoiceByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameCharacterBase_TryGetEmoteVoiceByIndex) == 0x000004, "Wrong alignment on AJBInGameCharacterBase_TryGetEmoteVoiceByIndex");
static_assert(sizeof(AJBInGameCharacterBase_TryGetEmoteVoiceByIndex) == 0x000008, "Wrong size on AJBInGameCharacterBase_TryGetEmoteVoiceByIndex");
static_assert(offsetof(AJBInGameCharacterBase_TryGetEmoteVoiceByIndex, Index_0) == 0x000000, "Member 'AJBInGameCharacterBase_TryGetEmoteVoiceByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(AJBInGameCharacterBase_TryGetEmoteVoiceByIndex, ReturnValue) == 0x000004, "Member 'AJBInGameCharacterBase_TryGetEmoteVoiceByIndex::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameCharacterBase.TryGetMatchingPlayerInfo
// 0x0090 (0x0090 - 0x0000)
struct AJBInGameCharacterBase_TryGetMatchingPlayerInfo final
{
public:
	struct FMatchingPlayerInfo                    Out;                                               // 0x0000(0x0088)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBInGameCharacterBase_TryGetMatchingPlayerInfo) == 0x000008, "Wrong alignment on AJBInGameCharacterBase_TryGetMatchingPlayerInfo");
static_assert(sizeof(AJBInGameCharacterBase_TryGetMatchingPlayerInfo) == 0x000090, "Wrong size on AJBInGameCharacterBase_TryGetMatchingPlayerInfo");
static_assert(offsetof(AJBInGameCharacterBase_TryGetMatchingPlayerInfo, Out) == 0x000000, "Member 'AJBInGameCharacterBase_TryGetMatchingPlayerInfo::Out' has a wrong offset!");
static_assert(offsetof(AJBInGameCharacterBase_TryGetMatchingPlayerInfo, ReturnValue) == 0x000088, "Member 'AJBInGameCharacterBase_TryGetMatchingPlayerInfo::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameCharacterBase.TryGetPlayerCustomData
// 0x0030 (0x0030 - 0x0000)
struct AJBInGameCharacterBase_TryGetPlayerCustomData final
{
public:
	int32                                         OutCharacterId;                                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCustomData                            Out;                                               // 0x0008(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBInGameCharacterBase_TryGetPlayerCustomData) == 0x000008, "Wrong alignment on AJBInGameCharacterBase_TryGetPlayerCustomData");
static_assert(sizeof(AJBInGameCharacterBase_TryGetPlayerCustomData) == 0x000030, "Wrong size on AJBInGameCharacterBase_TryGetPlayerCustomData");
static_assert(offsetof(AJBInGameCharacterBase_TryGetPlayerCustomData, OutCharacterId) == 0x000000, "Member 'AJBInGameCharacterBase_TryGetPlayerCustomData::OutCharacterId' has a wrong offset!");
static_assert(offsetof(AJBInGameCharacterBase_TryGetPlayerCustomData, Out) == 0x000008, "Member 'AJBInGameCharacterBase_TryGetPlayerCustomData::Out' has a wrong offset!");
static_assert(offsetof(AJBInGameCharacterBase_TryGetPlayerCustomData, ReturnValue) == 0x000028, "Member 'AJBInGameCharacterBase_TryGetPlayerCustomData::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameCharacterBase.TurnRate
// 0x0004 (0x0004 - 0x0000)
struct AJBInGameCharacterBase_TurnRate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameCharacterBase_TurnRate) == 0x000004, "Wrong alignment on AJBInGameCharacterBase_TurnRate");
static_assert(sizeof(AJBInGameCharacterBase_TurnRate) == 0x000004, "Wrong size on AJBInGameCharacterBase_TurnRate");
static_assert(offsetof(AJBInGameCharacterBase_TurnRate, Value) == 0x000000, "Member 'AJBInGameCharacterBase_TurnRate::Value' has a wrong offset!");

// Function AJB.AJBInGameCharacterBase.GetRole
// 0x0001 (0x0001 - 0x0000)
struct AJBInGameCharacterBase_GetRole final
{
public:
	ENetRole                                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameCharacterBase_GetRole) == 0x000001, "Wrong alignment on AJBInGameCharacterBase_GetRole");
static_assert(sizeof(AJBInGameCharacterBase_GetRole) == 0x000001, "Wrong size on AJBInGameCharacterBase_GetRole");
static_assert(offsetof(AJBInGameCharacterBase_GetRole, ReturnValue) == 0x000000, "Member 'AJBInGameCharacterBase_GetRole::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameCharacterBase.HasLocalSharedController
// 0x0001 (0x0001 - 0x0000)
struct AJBInGameCharacterBase_HasLocalSharedController final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameCharacterBase_HasLocalSharedController) == 0x000001, "Wrong alignment on AJBInGameCharacterBase_HasLocalSharedController");
static_assert(sizeof(AJBInGameCharacterBase_HasLocalSharedController) == 0x000001, "Wrong size on AJBInGameCharacterBase_HasLocalSharedController");
static_assert(offsetof(AJBInGameCharacterBase_HasLocalSharedController, ReturnValue) == 0x000000, "Member 'AJBInGameCharacterBase_HasLocalSharedController::ReturnValue' has a wrong offset!");

// Function AJB.AJBAMSystemObject.ActiveAJBError
// 0x0020 (0x0020 - 0x0000)
struct AJBAMSystemObject_ActiveAJBError final
{
public:
	class UAJBGameInstance*                       GameInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAJBErrorID                                   ErrorID;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DetailLog;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMSystemObject_ActiveAJBError) == 0x000008, "Wrong alignment on AJBAMSystemObject_ActiveAJBError");
static_assert(sizeof(AJBAMSystemObject_ActiveAJBError) == 0x000020, "Wrong size on AJBAMSystemObject_ActiveAJBError");
static_assert(offsetof(AJBAMSystemObject_ActiveAJBError, GameInstance) == 0x000000, "Member 'AJBAMSystemObject_ActiveAJBError::GameInstance' has a wrong offset!");
static_assert(offsetof(AJBAMSystemObject_ActiveAJBError, ErrorID) == 0x000008, "Member 'AJBAMSystemObject_ActiveAJBError::ErrorID' has a wrong offset!");
static_assert(offsetof(AJBAMSystemObject_ActiveAJBError, DetailLog) == 0x000010, "Member 'AJBAMSystemObject_ActiveAJBError::DetailLog' has a wrong offset!");

// Function AJB.AJBAMSystemObject.AddAJBError
// 0x0020 (0x0020 - 0x0000)
struct AJBAMSystemObject_AddAJBError final
{
public:
	class UAJBGameInstance*                       GameInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAJBErrorID                                   ErrorID;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DetailLog;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMSystemObject_AddAJBError) == 0x000008, "Wrong alignment on AJBAMSystemObject_AddAJBError");
static_assert(sizeof(AJBAMSystemObject_AddAJBError) == 0x000020, "Wrong size on AJBAMSystemObject_AddAJBError");
static_assert(offsetof(AJBAMSystemObject_AddAJBError, GameInstance) == 0x000000, "Member 'AJBAMSystemObject_AddAJBError::GameInstance' has a wrong offset!");
static_assert(offsetof(AJBAMSystemObject_AddAJBError, ErrorID) == 0x000008, "Member 'AJBAMSystemObject_AddAJBError::ErrorID' has a wrong offset!");
static_assert(offsetof(AJBAMSystemObject_AddAJBError, DetailLog) == 0x000010, "Member 'AJBAMSystemObject_AddAJBError::DetailLog' has a wrong offset!");

// Function AJB.AJBAMSystemObject.AddNoticeNetError
// 0x0010 (0x0010 - 0x0000)
struct AJBAMSystemObject_AddNoticeNetError final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAJBNetAPIResult                              Result;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBAMSystemObject_AddNoticeNetError) == 0x000008, "Wrong alignment on AJBAMSystemObject_AddNoticeNetError");
static_assert(sizeof(AJBAMSystemObject_AddNoticeNetError) == 0x000010, "Wrong size on AJBAMSystemObject_AddNoticeNetError");
static_assert(offsetof(AJBAMSystemObject_AddNoticeNetError, WorldContextObject) == 0x000000, "Member 'AJBAMSystemObject_AddNoticeNetError::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBAMSystemObject_AddNoticeNetError, Result) == 0x000008, "Member 'AJBAMSystemObject_AddNoticeNetError::Result' has a wrong offset!");

// Function AJB.AJBAMSystemObject.ChangeAMStatus
// 0x0010 (0x0010 - 0x0000)
struct AJBAMSystemObject_ChangeAMStatus final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAMStatus                                     ChangeStatus;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBAMSystemObject_ChangeAMStatus) == 0x000008, "Wrong alignment on AJBAMSystemObject_ChangeAMStatus");
static_assert(sizeof(AJBAMSystemObject_ChangeAMStatus) == 0x000010, "Wrong size on AJBAMSystemObject_ChangeAMStatus");
static_assert(offsetof(AJBAMSystemObject_ChangeAMStatus, WorldContextObject) == 0x000000, "Member 'AJBAMSystemObject_ChangeAMStatus::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBAMSystemObject_ChangeAMStatus, ChangeStatus) == 0x000008, "Member 'AJBAMSystemObject_ChangeAMStatus::ChangeStatus' has a wrong offset!");

// Function AJB.AJBAMSystemObject.CheckAJBDongleError
// 0x0008 (0x0008 - 0x0000)
struct AJBAMSystemObject_CheckAJBDongleError final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMSystemObject_CheckAJBDongleError) == 0x000008, "Wrong alignment on AJBAMSystemObject_CheckAJBDongleError");
static_assert(sizeof(AJBAMSystemObject_CheckAJBDongleError) == 0x000008, "Wrong size on AJBAMSystemObject_CheckAJBDongleError");
static_assert(offsetof(AJBAMSystemObject_CheckAJBDongleError, WorldContextObject) == 0x000000, "Member 'AJBAMSystemObject_CheckAJBDongleError::WorldContextObject' has a wrong offset!");

// Function AJB.AJBAMSystemObject.CheckAJBSerialNumber
// 0x0020 (0x0020 - 0x0000)
struct AJBAMSystemObject_CheckAJBSerialNumber final
{
public:
	bool                                          Repossession;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OutSerialNumber;                                   // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAJBErrorID                                   ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBAMSystemObject_CheckAJBSerialNumber) == 0x000008, "Wrong alignment on AJBAMSystemObject_CheckAJBSerialNumber");
static_assert(sizeof(AJBAMSystemObject_CheckAJBSerialNumber) == 0x000020, "Wrong size on AJBAMSystemObject_CheckAJBSerialNumber");
static_assert(offsetof(AJBAMSystemObject_CheckAJBSerialNumber, Repossession) == 0x000000, "Member 'AJBAMSystemObject_CheckAJBSerialNumber::Repossession' has a wrong offset!");
static_assert(offsetof(AJBAMSystemObject_CheckAJBSerialNumber, OutSerialNumber) == 0x000008, "Member 'AJBAMSystemObject_CheckAJBSerialNumber::OutSerialNumber' has a wrong offset!");
static_assert(offsetof(AJBAMSystemObject_CheckAJBSerialNumber, ReturnValue) == 0x000018, "Member 'AJBAMSystemObject_CheckAJBSerialNumber::ReturnValue' has a wrong offset!");

// Function AJB.AJBAMSystemObject.CheckAJBSerialNumberAndNetID
// 0x0028 (0x0028 - 0x0000)
struct AJBAMSystemObject_CheckAJBSerialNumberAndNetID final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Repossession;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OutSerialNumber;                                   // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAJBErrorID                                   ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBAMSystemObject_CheckAJBSerialNumberAndNetID) == 0x000008, "Wrong alignment on AJBAMSystemObject_CheckAJBSerialNumberAndNetID");
static_assert(sizeof(AJBAMSystemObject_CheckAJBSerialNumberAndNetID) == 0x000028, "Wrong size on AJBAMSystemObject_CheckAJBSerialNumberAndNetID");
static_assert(offsetof(AJBAMSystemObject_CheckAJBSerialNumberAndNetID, WorldContextObject) == 0x000000, "Member 'AJBAMSystemObject_CheckAJBSerialNumberAndNetID::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBAMSystemObject_CheckAJBSerialNumberAndNetID, Repossession) == 0x000008, "Member 'AJBAMSystemObject_CheckAJBSerialNumberAndNetID::Repossession' has a wrong offset!");
static_assert(offsetof(AJBAMSystemObject_CheckAJBSerialNumberAndNetID, OutSerialNumber) == 0x000010, "Member 'AJBAMSystemObject_CheckAJBSerialNumberAndNetID::OutSerialNumber' has a wrong offset!");
static_assert(offsetof(AJBAMSystemObject_CheckAJBSerialNumberAndNetID, ReturnValue) == 0x000020, "Member 'AJBAMSystemObject_CheckAJBSerialNumberAndNetID::ReturnValue' has a wrong offset!");

// Function AJB.AJBAMSystemObject.GetActiveDongleError
// 0x0010 (0x0010 - 0x0000)
struct AJBAMSystemObject_GetActiveDongleError final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAJBErrorID                                   ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBAMSystemObject_GetActiveDongleError) == 0x000008, "Wrong alignment on AJBAMSystemObject_GetActiveDongleError");
static_assert(sizeof(AJBAMSystemObject_GetActiveDongleError) == 0x000010, "Wrong size on AJBAMSystemObject_GetActiveDongleError");
static_assert(offsetof(AJBAMSystemObject_GetActiveDongleError, WorldContextObject) == 0x000000, "Member 'AJBAMSystemObject_GetActiveDongleError::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBAMSystemObject_GetActiveDongleError, ReturnValue) == 0x000008, "Member 'AJBAMSystemObject_GetActiveDongleError::ReturnValue' has a wrong offset!");

// Function AJB.AJBAMSystemObject.InactiveAJBError
// 0x0010 (0x0010 - 0x0000)
struct AJBAMSystemObject_InactiveAJBError final
{
public:
	class UAJBGameInstance*                       GameInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAJBErrorID                                   ErrorID;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBAMSystemObject_InactiveAJBError) == 0x000008, "Wrong alignment on AJBAMSystemObject_InactiveAJBError");
static_assert(sizeof(AJBAMSystemObject_InactiveAJBError) == 0x000010, "Wrong size on AJBAMSystemObject_InactiveAJBError");
static_assert(offsetof(AJBAMSystemObject_InactiveAJBError, GameInstance) == 0x000000, "Member 'AJBAMSystemObject_InactiveAJBError::GameInstance' has a wrong offset!");
static_assert(offsetof(AJBAMSystemObject_InactiveAJBError, ErrorID) == 0x000008, "Member 'AJBAMSystemObject_InactiveAJBError::ErrorID' has a wrong offset!");

// Function AJB.AJBAMSystemObject.InactiveAMErrorFromList
// 0x0018 (0x0018 - 0x0000)
struct AJBAMSystemObject_InactiveAMErrorFromList final
{
public:
	class UAJBGameInstance*                       GameInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EAJBErrorID>                           ErrorList;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMSystemObject_InactiveAMErrorFromList) == 0x000008, "Wrong alignment on AJBAMSystemObject_InactiveAMErrorFromList");
static_assert(sizeof(AJBAMSystemObject_InactiveAMErrorFromList) == 0x000018, "Wrong size on AJBAMSystemObject_InactiveAMErrorFromList");
static_assert(offsetof(AJBAMSystemObject_InactiveAMErrorFromList, GameInstance) == 0x000000, "Member 'AJBAMSystemObject_InactiveAMErrorFromList::GameInstance' has a wrong offset!");
static_assert(offsetof(AJBAMSystemObject_InactiveAMErrorFromList, ErrorList) == 0x000008, "Member 'AJBAMSystemObject_InactiveAMErrorFromList::ErrorList' has a wrong offset!");

// Function AJB.AJBAMSystemObject.IsAMSystemErrorMode
// 0x0010 (0x0010 - 0x0000)
struct AJBAMSystemObject_IsAMSystemErrorMode final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBAMSystemObject_IsAMSystemErrorMode) == 0x000008, "Wrong alignment on AJBAMSystemObject_IsAMSystemErrorMode");
static_assert(sizeof(AJBAMSystemObject_IsAMSystemErrorMode) == 0x000010, "Wrong size on AJBAMSystemObject_IsAMSystemErrorMode");
static_assert(offsetof(AJBAMSystemObject_IsAMSystemErrorMode, WorldContextObject) == 0x000000, "Member 'AJBAMSystemObject_IsAMSystemErrorMode::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBAMSystemObject_IsAMSystemErrorMode, ReturnValue) == 0x000008, "Member 'AJBAMSystemObject_IsAMSystemErrorMode::ReturnValue' has a wrong offset!");

// Function AJB.AJBAMSystemObject.OutNoticeNetError
// 0x0010 (0x0010 - 0x0000)
struct AJBAMSystemObject_OutNoticeNetError final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAJBNetAPIResult                              ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBAMSystemObject_OutNoticeNetError) == 0x000008, "Wrong alignment on AJBAMSystemObject_OutNoticeNetError");
static_assert(sizeof(AJBAMSystemObject_OutNoticeNetError) == 0x000010, "Wrong size on AJBAMSystemObject_OutNoticeNetError");
static_assert(offsetof(AJBAMSystemObject_OutNoticeNetError, WorldContextObject) == 0x000000, "Member 'AJBAMSystemObject_OutNoticeNetError::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBAMSystemObject_OutNoticeNetError, ReturnValue) == 0x000008, "Member 'AJBAMSystemObject_OutNoticeNetError::ReturnValue' has a wrong offset!");

// Function AJB.AJBAMSystemObject.SetAJBCoinLock
// 0x0010 (0x0010 - 0x0000)
struct AJBAMSystemObject_SetAJBCoinLock final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Lock;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBAMSystemObject_SetAJBCoinLock) == 0x000008, "Wrong alignment on AJBAMSystemObject_SetAJBCoinLock");
static_assert(sizeof(AJBAMSystemObject_SetAJBCoinLock) == 0x000010, "Wrong size on AJBAMSystemObject_SetAJBCoinLock");
static_assert(offsetof(AJBAMSystemObject_SetAJBCoinLock, WorldContextObject) == 0x000000, "Member 'AJBAMSystemObject_SetAJBCoinLock::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBAMSystemObject_SetAJBCoinLock, Lock) == 0x000008, "Member 'AJBAMSystemObject_SetAJBCoinLock::Lock' has a wrong offset!");

// Function AJB.AJBAMSystemObject.SetAJBEmoneyTouchWaitStatus
// 0x0010 (0x0010 - 0x0000)
struct AJBAMSystemObject_SetAJBEmoneyTouchWaitStatus final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsWait;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBAMSystemObject_SetAJBEmoneyTouchWaitStatus) == 0x000008, "Wrong alignment on AJBAMSystemObject_SetAJBEmoneyTouchWaitStatus");
static_assert(sizeof(AJBAMSystemObject_SetAJBEmoneyTouchWaitStatus) == 0x000010, "Wrong size on AJBAMSystemObject_SetAJBEmoneyTouchWaitStatus");
static_assert(offsetof(AJBAMSystemObject_SetAJBEmoneyTouchWaitStatus, WorldContextObject) == 0x000000, "Member 'AJBAMSystemObject_SetAJBEmoneyTouchWaitStatus::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBAMSystemObject_SetAJBEmoneyTouchWaitStatus, bIsWait) == 0x000008, "Member 'AJBAMSystemObject_SetAJBEmoneyTouchWaitStatus::bIsWait' has a wrong offset!");

// Function AJB.AJBAMSystemObject.UpdateAMErrorFromList
// 0x0020 (0x0020 - 0x0000)
struct AJBAMSystemObject_UpdateAMErrorFromList final
{
public:
	class UAJBGameInstance*                       GameInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAJBErrorID                                   ErrorID;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EAJBErrorID>                           ErrorList;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMSystemObject_UpdateAMErrorFromList) == 0x000008, "Wrong alignment on AJBAMSystemObject_UpdateAMErrorFromList");
static_assert(sizeof(AJBAMSystemObject_UpdateAMErrorFromList) == 0x000020, "Wrong size on AJBAMSystemObject_UpdateAMErrorFromList");
static_assert(offsetof(AJBAMSystemObject_UpdateAMErrorFromList, GameInstance) == 0x000000, "Member 'AJBAMSystemObject_UpdateAMErrorFromList::GameInstance' has a wrong offset!");
static_assert(offsetof(AJBAMSystemObject_UpdateAMErrorFromList, ErrorID) == 0x000008, "Member 'AJBAMSystemObject_UpdateAMErrorFromList::ErrorID' has a wrong offset!");
static_assert(offsetof(AJBAMSystemObject_UpdateAMErrorFromList, ErrorList) == 0x000010, "Member 'AJBAMSystemObject_UpdateAMErrorFromList::ErrorList' has a wrong offset!");

// Function AJB.AJBAMSystemObject.FindFistAMSystemErrorMode
// 0x0001 (0x0001 - 0x0000)
struct AJBAMSystemObject_FindFistAMSystemErrorMode final
{
public:
	EAJBErrorID                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMSystemObject_FindFistAMSystemErrorMode) == 0x000001, "Wrong alignment on AJBAMSystemObject_FindFistAMSystemErrorMode");
static_assert(sizeof(AJBAMSystemObject_FindFistAMSystemErrorMode) == 0x000001, "Wrong size on AJBAMSystemObject_FindFistAMSystemErrorMode");
static_assert(offsetof(AJBAMSystemObject_FindFistAMSystemErrorMode, ReturnValue) == 0x000000, "Member 'AJBAMSystemObject_FindFistAMSystemErrorMode::ReturnValue' has a wrong offset!");

// Function AJB.AJBAMSystemObject.FindFistLocalNetworkError
// 0x0001 (0x0001 - 0x0000)
struct AJBAMSystemObject_FindFistLocalNetworkError final
{
public:
	EAJBErrorID                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMSystemObject_FindFistLocalNetworkError) == 0x000001, "Wrong alignment on AJBAMSystemObject_FindFistLocalNetworkError");
static_assert(sizeof(AJBAMSystemObject_FindFistLocalNetworkError) == 0x000001, "Wrong size on AJBAMSystemObject_FindFistLocalNetworkError");
static_assert(offsetof(AJBAMSystemObject_FindFistLocalNetworkError, ReturnValue) == 0x000000, "Member 'AJBAMSystemObject_FindFistLocalNetworkError::ReturnValue' has a wrong offset!");

// Function AJB.AJBAMSystemObject.FindFistNetworkError
// 0x0001 (0x0001 - 0x0000)
struct AJBAMSystemObject_FindFistNetworkError final
{
public:
	EAJBErrorID                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMSystemObject_FindFistNetworkError) == 0x000001, "Wrong alignment on AJBAMSystemObject_FindFistNetworkError");
static_assert(sizeof(AJBAMSystemObject_FindFistNetworkError) == 0x000001, "Wrong size on AJBAMSystemObject_FindFistNetworkError");
static_assert(offsetof(AJBAMSystemObject_FindFistNetworkError, ReturnValue) == 0x000000, "Member 'AJBAMSystemObject_FindFistNetworkError::ReturnValue' has a wrong offset!");

// Function AJB.AJBAMSystemObject.IsActiveAJBError
// 0x0002 (0x0002 - 0x0000)
struct AJBAMSystemObject_IsActiveAJBError final
{
public:
	EAJBErrorID                                   ErrorID;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMSystemObject_IsActiveAJBError) == 0x000001, "Wrong alignment on AJBAMSystemObject_IsActiveAJBError");
static_assert(sizeof(AJBAMSystemObject_IsActiveAJBError) == 0x000002, "Wrong size on AJBAMSystemObject_IsActiveAJBError");
static_assert(offsetof(AJBAMSystemObject_IsActiveAJBError, ErrorID) == 0x000000, "Member 'AJBAMSystemObject_IsActiveAJBError::ErrorID' has a wrong offset!");
static_assert(offsetof(AJBAMSystemObject_IsActiveAJBError, ReturnValue) == 0x000001, "Member 'AJBAMSystemObject_IsActiveAJBError::ReturnValue' has a wrong offset!");

// Function AJB.AJBAMSystemObject.ReserveTestModeTransition
// 0x0008 (0x0008 - 0x0000)
struct AJBAMSystemObject_ReserveTestModeTransition final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMSystemObject_ReserveTestModeTransition) == 0x000008, "Wrong alignment on AJBAMSystemObject_ReserveTestModeTransition");
static_assert(sizeof(AJBAMSystemObject_ReserveTestModeTransition) == 0x000008, "Wrong size on AJBAMSystemObject_ReserveTestModeTransition");
static_assert(offsetof(AJBAMSystemObject_ReserveTestModeTransition, WorldContextObject) == 0x000000, "Member 'AJBAMSystemObject_ReserveTestModeTransition::WorldContextObject' has a wrong offset!");

// Function AJB.AJBInGameCharacter.IsNPC
// 0x0001 (0x0001 - 0x0000)
struct AJBInGameCharacter_IsNPC final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameCharacter_IsNPC) == 0x000001, "Wrong alignment on AJBInGameCharacter_IsNPC");
static_assert(sizeof(AJBInGameCharacter_IsNPC) == 0x000001, "Wrong size on AJBInGameCharacter_IsNPC");
static_assert(offsetof(AJBInGameCharacter_IsNPC, ReturnValue) == 0x000000, "Member 'AJBInGameCharacter_IsNPC::ReturnValue' has a wrong offset!");

// Function AJB.AJBAMSystemSettings.GetAMIOOptions
// 0x0028 (0x0028 - 0x0000)
struct AJBAMSystemSettings_GetAMIOOptions final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAMIOOptions                           ReturnValue;                                       // 0x0008(0x001A)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBAMSystemSettings_GetAMIOOptions) == 0x000008, "Wrong alignment on AJBAMSystemSettings_GetAMIOOptions");
static_assert(sizeof(AJBAMSystemSettings_GetAMIOOptions) == 0x000028, "Wrong size on AJBAMSystemSettings_GetAMIOOptions");
static_assert(offsetof(AJBAMSystemSettings_GetAMIOOptions, WorldContextObject) == 0x000000, "Member 'AJBAMSystemSettings_GetAMIOOptions::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBAMSystemSettings_GetAMIOOptions, ReturnValue) == 0x000008, "Member 'AJBAMSystemSettings_GetAMIOOptions::ReturnValue' has a wrong offset!");

// Function AJB.AJBAMSystemSettings.GetDefaultPurchaseLimitPP
// 0x0001 (0x0001 - 0x0000)
struct AJBAMSystemSettings_GetDefaultPurchaseLimitPP final
{
public:
	EPurchaseLimitPP                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMSystemSettings_GetDefaultPurchaseLimitPP) == 0x000001, "Wrong alignment on AJBAMSystemSettings_GetDefaultPurchaseLimitPP");
static_assert(sizeof(AJBAMSystemSettings_GetDefaultPurchaseLimitPP) == 0x000001, "Wrong size on AJBAMSystemSettings_GetDefaultPurchaseLimitPP");
static_assert(offsetof(AJBAMSystemSettings_GetDefaultPurchaseLimitPP, ReturnValue) == 0x000000, "Member 'AJBAMSystemSettings_GetDefaultPurchaseLimitPP::ReturnValue' has a wrong offset!");

// Function AJB.AJBAMSystemSettings.GetShopEventSettings
// 0x0010 (0x0010 - 0x0000)
struct AJBAMSystemSettings_GetShopEventSettings final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FShopEventSettings                     ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMSystemSettings_GetShopEventSettings) == 0x000008, "Wrong alignment on AJBAMSystemSettings_GetShopEventSettings");
static_assert(sizeof(AJBAMSystemSettings_GetShopEventSettings) == 0x000010, "Wrong size on AJBAMSystemSettings_GetShopEventSettings");
static_assert(offsetof(AJBAMSystemSettings_GetShopEventSettings, WorldContextObject) == 0x000000, "Member 'AJBAMSystemSettings_GetShopEventSettings::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBAMSystemSettings_GetShopEventSettings, ReturnValue) == 0x000008, "Member 'AJBAMSystemSettings_GetShopEventSettings::ReturnValue' has a wrong offset!");

// Function AJB.AJBAMSystemSettings.GetTimeByClose
// 0x0010 (0x0010 - 0x0000)
struct AJBAMSystemSettings_GetTimeByClose final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutMinute;                                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBAMSystemSettings_GetTimeByClose) == 0x000008, "Wrong alignment on AJBAMSystemSettings_GetTimeByClose");
static_assert(sizeof(AJBAMSystemSettings_GetTimeByClose) == 0x000010, "Wrong size on AJBAMSystemSettings_GetTimeByClose");
static_assert(offsetof(AJBAMSystemSettings_GetTimeByClose, WorldContextObject) == 0x000000, "Member 'AJBAMSystemSettings_GetTimeByClose::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBAMSystemSettings_GetTimeByClose, OutMinute) == 0x000008, "Member 'AJBAMSystemSettings_GetTimeByClose::OutMinute' has a wrong offset!");

// Function AJB.AJBAMSystemSettings.GetTodayCloseTime
// 0x0010 (0x0010 - 0x0000)
struct AJBAMSystemSettings_GetTodayCloseTime final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutHoure;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutMinute;                                         // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMSystemSettings_GetTodayCloseTime) == 0x000008, "Wrong alignment on AJBAMSystemSettings_GetTodayCloseTime");
static_assert(sizeof(AJBAMSystemSettings_GetTodayCloseTime) == 0x000010, "Wrong size on AJBAMSystemSettings_GetTodayCloseTime");
static_assert(offsetof(AJBAMSystemSettings_GetTodayCloseTime, WorldContextObject) == 0x000000, "Member 'AJBAMSystemSettings_GetTodayCloseTime::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBAMSystemSettings_GetTodayCloseTime, OutHoure) == 0x000008, "Member 'AJBAMSystemSettings_GetTodayCloseTime::OutHoure' has a wrong offset!");
static_assert(offsetof(AJBAMSystemSettings_GetTodayCloseTime, OutMinute) == 0x00000C, "Member 'AJBAMSystemSettings_GetTodayCloseTime::OutMinute' has a wrong offset!");

// Function AJB.AJBAMSystemSettings.IsEnableDebugInput
// 0x0010 (0x0010 - 0x0000)
struct AJBAMSystemSettings_IsEnableDebugInput final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBAMSystemSettings_IsEnableDebugInput) == 0x000008, "Wrong alignment on AJBAMSystemSettings_IsEnableDebugInput");
static_assert(sizeof(AJBAMSystemSettings_IsEnableDebugInput) == 0x000010, "Wrong size on AJBAMSystemSettings_IsEnableDebugInput");
static_assert(offsetof(AJBAMSystemSettings_IsEnableDebugInput, WorldContextObject) == 0x000000, "Member 'AJBAMSystemSettings_IsEnableDebugInput::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBAMSystemSettings_IsEnableDebugInput, ReturnValue) == 0x000008, "Member 'AJBAMSystemSettings_IsEnableDebugInput::ReturnValue' has a wrong offset!");

// Function AJB.AJBAMSystemSettings.IsEnableOverwriteDebugLogin
// 0x0010 (0x0010 - 0x0000)
struct AJBAMSystemSettings_IsEnableOverwriteDebugLogin final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBAMSystemSettings_IsEnableOverwriteDebugLogin) == 0x000008, "Wrong alignment on AJBAMSystemSettings_IsEnableOverwriteDebugLogin");
static_assert(sizeof(AJBAMSystemSettings_IsEnableOverwriteDebugLogin) == 0x000010, "Wrong size on AJBAMSystemSettings_IsEnableOverwriteDebugLogin");
static_assert(offsetof(AJBAMSystemSettings_IsEnableOverwriteDebugLogin, WorldContextObject) == 0x000000, "Member 'AJBAMSystemSettings_IsEnableOverwriteDebugLogin::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBAMSystemSettings_IsEnableOverwriteDebugLogin, ReturnValue) == 0x000008, "Member 'AJBAMSystemSettings_IsEnableOverwriteDebugLogin::ReturnValue' has a wrong offset!");

// Function AJB.AJBAMSystemSettings.ResetBackupMemory
// 0x0008 (0x0008 - 0x0000)
struct AJBAMSystemSettings_ResetBackupMemory final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMSystemSettings_ResetBackupMemory) == 0x000008, "Wrong alignment on AJBAMSystemSettings_ResetBackupMemory");
static_assert(sizeof(AJBAMSystemSettings_ResetBackupMemory) == 0x000008, "Wrong size on AJBAMSystemSettings_ResetBackupMemory");
static_assert(offsetof(AJBAMSystemSettings_ResetBackupMemory, WorldContextObject) == 0x000000, "Member 'AJBAMSystemSettings_ResetBackupMemory::WorldContextObject' has a wrong offset!");

// Function AJB.AJBAMSystemSettings.ResetBookKeeping
// 0x0008 (0x0008 - 0x0000)
struct AJBAMSystemSettings_ResetBookKeeping final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMSystemSettings_ResetBookKeeping) == 0x000008, "Wrong alignment on AJBAMSystemSettings_ResetBookKeeping");
static_assert(sizeof(AJBAMSystemSettings_ResetBookKeeping) == 0x000008, "Wrong size on AJBAMSystemSettings_ResetBookKeeping");
static_assert(offsetof(AJBAMSystemSettings_ResetBookKeeping, WorldContextObject) == 0x000000, "Member 'AJBAMSystemSettings_ResetBookKeeping::WorldContextObject' has a wrong offset!");

// Function AJB.AJBAMSystemSettings.SetLEDPowerAlive
// 0x0010 (0x0010 - 0x0000)
struct AJBAMSystemSettings_SetLEDPowerAlive final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Power;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBAMSystemSettings_SetLEDPowerAlive) == 0x000008, "Wrong alignment on AJBAMSystemSettings_SetLEDPowerAlive");
static_assert(sizeof(AJBAMSystemSettings_SetLEDPowerAlive) == 0x000010, "Wrong size on AJBAMSystemSettings_SetLEDPowerAlive");
static_assert(offsetof(AJBAMSystemSettings_SetLEDPowerAlive, WorldContextObject) == 0x000000, "Member 'AJBAMSystemSettings_SetLEDPowerAlive::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBAMSystemSettings_SetLEDPowerAlive, Power) == 0x000008, "Member 'AJBAMSystemSettings_SetLEDPowerAlive::Power' has a wrong offset!");

// Function AJB.AJBAMSystemSettings.SetLEDPowerNormal
// 0x0010 (0x0010 - 0x0000)
struct AJBAMSystemSettings_SetLEDPowerNormal final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Power;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBAMSystemSettings_SetLEDPowerNormal) == 0x000008, "Wrong alignment on AJBAMSystemSettings_SetLEDPowerNormal");
static_assert(sizeof(AJBAMSystemSettings_SetLEDPowerNormal) == 0x000010, "Wrong size on AJBAMSystemSettings_SetLEDPowerNormal");
static_assert(offsetof(AJBAMSystemSettings_SetLEDPowerNormal, WorldContextObject) == 0x000000, "Member 'AJBAMSystemSettings_SetLEDPowerNormal::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBAMSystemSettings_SetLEDPowerNormal, Power) == 0x000008, "Member 'AJBAMSystemSettings_SetLEDPowerNormal::Power' has a wrong offset!");

// Function AJB.AJBAMSystemSettings.SetShopCompetitionMatchingKey
// 0x0010 (0x0010 - 0x0000)
struct AJBAMSystemSettings_SetShopCompetitionMatchingKey final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchingKey;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBAMSystemSettings_SetShopCompetitionMatchingKey) == 0x000008, "Wrong alignment on AJBAMSystemSettings_SetShopCompetitionMatchingKey");
static_assert(sizeof(AJBAMSystemSettings_SetShopCompetitionMatchingKey) == 0x000010, "Wrong size on AJBAMSystemSettings_SetShopCompetitionMatchingKey");
static_assert(offsetof(AJBAMSystemSettings_SetShopCompetitionMatchingKey, WorldContextObject) == 0x000000, "Member 'AJBAMSystemSettings_SetShopCompetitionMatchingKey::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBAMSystemSettings_SetShopCompetitionMatchingKey, MatchingKey) == 0x000008, "Member 'AJBAMSystemSettings_SetShopCompetitionMatchingKey::MatchingKey' has a wrong offset!");

// Function AJB.AJBAMSystemSettings.SetShopCompetitionMode
// 0x0010 (0x0010 - 0x0000)
struct AJBAMSystemSettings_SetShopCompetitionMode final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsShopCompetition;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBAMSystemSettings_SetShopCompetitionMode) == 0x000008, "Wrong alignment on AJBAMSystemSettings_SetShopCompetitionMode");
static_assert(sizeof(AJBAMSystemSettings_SetShopCompetitionMode) == 0x000010, "Wrong size on AJBAMSystemSettings_SetShopCompetitionMode");
static_assert(offsetof(AJBAMSystemSettings_SetShopCompetitionMode, WorldContextObject) == 0x000000, "Member 'AJBAMSystemSettings_SetShopCompetitionMode::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBAMSystemSettings_SetShopCompetitionMode, bIsShopCompetition) == 0x000008, "Member 'AJBAMSystemSettings_SetShopCompetitionMode::bIsShopCompetition' has a wrong offset!");

// Function AJB.AJBAMSystemSettings.SetShopCompetitionPlayerType
// 0x0010 (0x0010 - 0x0000)
struct AJBAMSystemSettings_SetShopCompetitionPlayerType final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EShopEventPlayerType                          Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBAMSystemSettings_SetShopCompetitionPlayerType) == 0x000008, "Wrong alignment on AJBAMSystemSettings_SetShopCompetitionPlayerType");
static_assert(sizeof(AJBAMSystemSettings_SetShopCompetitionPlayerType) == 0x000010, "Wrong size on AJBAMSystemSettings_SetShopCompetitionPlayerType");
static_assert(offsetof(AJBAMSystemSettings_SetShopCompetitionPlayerType, WorldContextObject) == 0x000000, "Member 'AJBAMSystemSettings_SetShopCompetitionPlayerType::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBAMSystemSettings_SetShopCompetitionPlayerType, Type) == 0x000008, "Member 'AJBAMSystemSettings_SetShopCompetitionPlayerType::Type' has a wrong offset!");

// Function AJB.AJBAMSystemSettings.SetUpdateServerMode
// 0x0010 (0x0010 - 0x0000)
struct AJBAMSystemSettings_SetUpdateServerMode final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsServerMode;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBAMSystemSettings_SetUpdateServerMode) == 0x000008, "Wrong alignment on AJBAMSystemSettings_SetUpdateServerMode");
static_assert(sizeof(AJBAMSystemSettings_SetUpdateServerMode) == 0x000010, "Wrong size on AJBAMSystemSettings_SetUpdateServerMode");
static_assert(offsetof(AJBAMSystemSettings_SetUpdateServerMode, WorldContextObject) == 0x000000, "Member 'AJBAMSystemSettings_SetUpdateServerMode::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBAMSystemSettings_SetUpdateServerMode, bIsServerMode) == 0x000008, "Member 'AJBAMSystemSettings_SetUpdateServerMode::bIsServerMode' has a wrong offset!");

// Function AJB.AJBAMSystemSettings.SetUSIOAnalogSetting
// 0x0018 (0x0018 - 0x0000)
struct AJBAMSystemSettings_SetUSIOAnalogSetting final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChannelNo;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Min;                                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Center;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMSystemSettings_SetUSIOAnalogSetting) == 0x000008, "Wrong alignment on AJBAMSystemSettings_SetUSIOAnalogSetting");
static_assert(sizeof(AJBAMSystemSettings_SetUSIOAnalogSetting) == 0x000018, "Wrong size on AJBAMSystemSettings_SetUSIOAnalogSetting");
static_assert(offsetof(AJBAMSystemSettings_SetUSIOAnalogSetting, WorldContextObject) == 0x000000, "Member 'AJBAMSystemSettings_SetUSIOAnalogSetting::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBAMSystemSettings_SetUSIOAnalogSetting, ChannelNo) == 0x000008, "Member 'AJBAMSystemSettings_SetUSIOAnalogSetting::ChannelNo' has a wrong offset!");
static_assert(offsetof(AJBAMSystemSettings_SetUSIOAnalogSetting, Min) == 0x00000C, "Member 'AJBAMSystemSettings_SetUSIOAnalogSetting::Min' has a wrong offset!");
static_assert(offsetof(AJBAMSystemSettings_SetUSIOAnalogSetting, Max) == 0x000010, "Member 'AJBAMSystemSettings_SetUSIOAnalogSetting::Max' has a wrong offset!");
static_assert(offsetof(AJBAMSystemSettings_SetUSIOAnalogSetting, Center) == 0x000014, "Member 'AJBAMSystemSettings_SetUSIOAnalogSetting::Center' has a wrong offset!");

// Function AJB.AJBAMSystemSettings.UpdateCloseTime
// 0x0018 (0x0018 - 0x0000)
struct AJBAMSystemSettings_UpdateCloseTime final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeekIndex;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Houre;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minute;                                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBAMSystemSettings_UpdateCloseTime) == 0x000008, "Wrong alignment on AJBAMSystemSettings_UpdateCloseTime");
static_assert(sizeof(AJBAMSystemSettings_UpdateCloseTime) == 0x000018, "Wrong size on AJBAMSystemSettings_UpdateCloseTime");
static_assert(offsetof(AJBAMSystemSettings_UpdateCloseTime, WorldContextObject) == 0x000000, "Member 'AJBAMSystemSettings_UpdateCloseTime::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBAMSystemSettings_UpdateCloseTime, WeekIndex) == 0x000008, "Member 'AJBAMSystemSettings_UpdateCloseTime::WeekIndex' has a wrong offset!");
static_assert(offsetof(AJBAMSystemSettings_UpdateCloseTime, Houre) == 0x00000C, "Member 'AJBAMSystemSettings_UpdateCloseTime::Houre' has a wrong offset!");
static_assert(offsetof(AJBAMSystemSettings_UpdateCloseTime, Minute) == 0x000010, "Member 'AJBAMSystemSettings_UpdateCloseTime::Minute' has a wrong offset!");

// Function AJB.AJBAMSystemSettings.UpdateUSIOSetting
// 0x0008 (0x0008 - 0x0000)
struct AJBAMSystemSettings_UpdateUSIOSetting final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMSystemSettings_UpdateUSIOSetting) == 0x000008, "Wrong alignment on AJBAMSystemSettings_UpdateUSIOSetting");
static_assert(sizeof(AJBAMSystemSettings_UpdateUSIOSetting) == 0x000008, "Wrong size on AJBAMSystemSettings_UpdateUSIOSetting");
static_assert(offsetof(AJBAMSystemSettings_UpdateUSIOSetting, WorldContextObject) == 0x000000, "Member 'AJBAMSystemSettings_UpdateUSIOSetting::WorldContextObject' has a wrong offset!");

// Function AJB.AJBAMSystemSettings.IsNeedUploadErrorLog
// 0x0001 (0x0001 - 0x0000)
struct AJBAMSystemSettings_IsNeedUploadErrorLog final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMSystemSettings_IsNeedUploadErrorLog) == 0x000001, "Wrong alignment on AJBAMSystemSettings_IsNeedUploadErrorLog");
static_assert(sizeof(AJBAMSystemSettings_IsNeedUploadErrorLog) == 0x000001, "Wrong size on AJBAMSystemSettings_IsNeedUploadErrorLog");
static_assert(offsetof(AJBAMSystemSettings_IsNeedUploadErrorLog, ReturnValue) == 0x000000, "Member 'AJBAMSystemSettings_IsNeedUploadErrorLog::ReturnValue' has a wrong offset!");

// Function AJB.AJBAMSystemSettings.SetupSave_AMVersion
// 0x0010 (0x0010 - 0x0000)
struct AJBAMSystemSettings_SetupSave_AMVersion final
{
public:
	TArray<uint8>                                 Data;                                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMSystemSettings_SetupSave_AMVersion) == 0x000008, "Wrong alignment on AJBAMSystemSettings_SetupSave_AMVersion");
static_assert(sizeof(AJBAMSystemSettings_SetupSave_AMVersion) == 0x000010, "Wrong size on AJBAMSystemSettings_SetupSave_AMVersion");
static_assert(offsetof(AJBAMSystemSettings_SetupSave_AMVersion, Data) == 0x000000, "Member 'AJBAMSystemSettings_SetupSave_AMVersion::Data' has a wrong offset!");

// Function AJB.AJBAMSystemSettings.SetupSave_BookKeeping
// 0x0010 (0x0010 - 0x0000)
struct AJBAMSystemSettings_SetupSave_BookKeeping final
{
public:
	TArray<uint8>                                 Data;                                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMSystemSettings_SetupSave_BookKeeping) == 0x000008, "Wrong alignment on AJBAMSystemSettings_SetupSave_BookKeeping");
static_assert(sizeof(AJBAMSystemSettings_SetupSave_BookKeeping) == 0x000010, "Wrong size on AJBAMSystemSettings_SetupSave_BookKeeping");
static_assert(offsetof(AJBAMSystemSettings_SetupSave_BookKeeping, Data) == 0x000000, "Member 'AJBAMSystemSettings_SetupSave_BookKeeping::Data' has a wrong offset!");

// Function AJB.AJBAMSystemSettings.SetupSave_ErrorLogs
// 0x0010 (0x0010 - 0x0000)
struct AJBAMSystemSettings_SetupSave_ErrorLogs final
{
public:
	TArray<uint8>                                 Data;                                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMSystemSettings_SetupSave_ErrorLogs) == 0x000008, "Wrong alignment on AJBAMSystemSettings_SetupSave_ErrorLogs");
static_assert(sizeof(AJBAMSystemSettings_SetupSave_ErrorLogs) == 0x000010, "Wrong size on AJBAMSystemSettings_SetupSave_ErrorLogs");
static_assert(offsetof(AJBAMSystemSettings_SetupSave_ErrorLogs, Data) == 0x000000, "Member 'AJBAMSystemSettings_SetupSave_ErrorLogs::Data' has a wrong offset!");

// Function AJB.AJBAMSystemSettings.SetupSave_FreePlayCount
// 0x0010 (0x0010 - 0x0000)
struct AJBAMSystemSettings_SetupSave_FreePlayCount final
{
public:
	TArray<uint8>                                 Data;                                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMSystemSettings_SetupSave_FreePlayCount) == 0x000008, "Wrong alignment on AJBAMSystemSettings_SetupSave_FreePlayCount");
static_assert(sizeof(AJBAMSystemSettings_SetupSave_FreePlayCount) == 0x000010, "Wrong size on AJBAMSystemSettings_SetupSave_FreePlayCount");
static_assert(offsetof(AJBAMSystemSettings_SetupSave_FreePlayCount, Data) == 0x000000, "Member 'AJBAMSystemSettings_SetupSave_FreePlayCount::Data' has a wrong offset!");

// Function AJB.AJBAMSystemSettings.SetupSave_Information
// 0x0010 (0x0010 - 0x0000)
struct AJBAMSystemSettings_SetupSave_Information final
{
public:
	TArray<uint8>                                 Data;                                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMSystemSettings_SetupSave_Information) == 0x000008, "Wrong alignment on AJBAMSystemSettings_SetupSave_Information");
static_assert(sizeof(AJBAMSystemSettings_SetupSave_Information) == 0x000010, "Wrong size on AJBAMSystemSettings_SetupSave_Information");
static_assert(offsetof(AJBAMSystemSettings_SetupSave_Information, Data) == 0x000000, "Member 'AJBAMSystemSettings_SetupSave_Information::Data' has a wrong offset!");

// Function AJB.AJBAMSystemSettings.SetupSave_LastGameStatus
// 0x0010 (0x0010 - 0x0000)
struct AJBAMSystemSettings_SetupSave_LastGameStatus final
{
public:
	TArray<uint8>                                 Data;                                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMSystemSettings_SetupSave_LastGameStatus) == 0x000008, "Wrong alignment on AJBAMSystemSettings_SetupSave_LastGameStatus");
static_assert(sizeof(AJBAMSystemSettings_SetupSave_LastGameStatus) == 0x000010, "Wrong size on AJBAMSystemSettings_SetupSave_LastGameStatus");
static_assert(offsetof(AJBAMSystemSettings_SetupSave_LastGameStatus, Data) == 0x000000, "Member 'AJBAMSystemSettings_SetupSave_LastGameStatus::Data' has a wrong offset!");

// Function AJB.AJBAMSystemSettings.SetupSave_ShopInfoSaveData
// 0x0010 (0x0010 - 0x0000)
struct AJBAMSystemSettings_SetupSave_ShopInfoSaveData final
{
public:
	TArray<uint8>                                 Data;                                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMSystemSettings_SetupSave_ShopInfoSaveData) == 0x000008, "Wrong alignment on AJBAMSystemSettings_SetupSave_ShopInfoSaveData");
static_assert(sizeof(AJBAMSystemSettings_SetupSave_ShopInfoSaveData) == 0x000010, "Wrong size on AJBAMSystemSettings_SetupSave_ShopInfoSaveData");
static_assert(offsetof(AJBAMSystemSettings_SetupSave_ShopInfoSaveData, Data) == 0x000000, "Member 'AJBAMSystemSettings_SetupSave_ShopInfoSaveData::Data' has a wrong offset!");

// Function AJB.AJBAMSystemSettings.SetupSave_SystemOptions
// 0x0010 (0x0010 - 0x0000)
struct AJBAMSystemSettings_SetupSave_SystemOptions final
{
public:
	TArray<uint8>                                 Data;                                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMSystemSettings_SetupSave_SystemOptions) == 0x000008, "Wrong alignment on AJBAMSystemSettings_SetupSave_SystemOptions");
static_assert(sizeof(AJBAMSystemSettings_SetupSave_SystemOptions) == 0x000010, "Wrong size on AJBAMSystemSettings_SetupSave_SystemOptions");
static_assert(offsetof(AJBAMSystemSettings_SetupSave_SystemOptions, Data) == 0x000000, "Member 'AJBAMSystemSettings_SetupSave_SystemOptions::Data' has a wrong offset!");

// Function AJB.AJBAMSystemSettings.SetupSave_UpdateSettingsSaveData
// 0x0010 (0x0010 - 0x0000)
struct AJBAMSystemSettings_SetupSave_UpdateSettingsSaveData final
{
public:
	TArray<uint8>                                 Data;                                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMSystemSettings_SetupSave_UpdateSettingsSaveData) == 0x000008, "Wrong alignment on AJBAMSystemSettings_SetupSave_UpdateSettingsSaveData");
static_assert(sizeof(AJBAMSystemSettings_SetupSave_UpdateSettingsSaveData) == 0x000010, "Wrong size on AJBAMSystemSettings_SetupSave_UpdateSettingsSaveData");
static_assert(offsetof(AJBAMSystemSettings_SetupSave_UpdateSettingsSaveData, Data) == 0x000000, "Member 'AJBAMSystemSettings_SetupSave_UpdateSettingsSaveData::Data' has a wrong offset!");

// Function AJB.AJBAMSystemSettings.UpdatePlayTime
// 0x0001 (0x0001 - 0x0000)
struct AJBAMSystemSettings_UpdatePlayTime final
{
public:
	bool                                          bOnPlay;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMSystemSettings_UpdatePlayTime) == 0x000001, "Wrong alignment on AJBAMSystemSettings_UpdatePlayTime");
static_assert(sizeof(AJBAMSystemSettings_UpdatePlayTime) == 0x000001, "Wrong size on AJBAMSystemSettings_UpdatePlayTime");
static_assert(offsetof(AJBAMSystemSettings_UpdatePlayTime, bOnPlay) == 0x000000, "Member 'AJBAMSystemSettings_UpdatePlayTime::bOnPlay' has a wrong offset!");

// Function AJB.AJBAMSystemSettings.IsEnableCloseTime
// 0x0001 (0x0001 - 0x0000)
struct AJBAMSystemSettings_IsEnableCloseTime final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAMSystemSettings_IsEnableCloseTime) == 0x000001, "Wrong alignment on AJBAMSystemSettings_IsEnableCloseTime");
static_assert(sizeof(AJBAMSystemSettings_IsEnableCloseTime) == 0x000001, "Wrong size on AJBAMSystemSettings_IsEnableCloseTime");
static_assert(offsetof(AJBAMSystemSettings_IsEnableCloseTime, ReturnValue) == 0x000000, "Member 'AJBAMSystemSettings_IsEnableCloseTime::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameEffectActor.IsBeingUsed
// 0x0001 (0x0001 - 0x0000)
struct AJBInGameEffectActor_IsBeingUsed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameEffectActor_IsBeingUsed) == 0x000001, "Wrong alignment on AJBInGameEffectActor_IsBeingUsed");
static_assert(sizeof(AJBInGameEffectActor_IsBeingUsed) == 0x000001, "Wrong size on AJBInGameEffectActor_IsBeingUsed");
static_assert(offsetof(AJBInGameEffectActor_IsBeingUsed, ReturnValue) == 0x000000, "Member 'AJBInGameEffectActor_IsBeingUsed::ReturnValue' has a wrong offset!");

// Function AJB.AJBArcadeTimeManager.DevUpdateTodayWeekCloseTime
// 0x0008 (0x0008 - 0x0000)
struct AJBArcadeTimeManager_DevUpdateTodayWeekCloseTime final
{
public:
	int32                                         Houre;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minute;                                            // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBArcadeTimeManager_DevUpdateTodayWeekCloseTime) == 0x000004, "Wrong alignment on AJBArcadeTimeManager_DevUpdateTodayWeekCloseTime");
static_assert(sizeof(AJBArcadeTimeManager_DevUpdateTodayWeekCloseTime) == 0x000008, "Wrong size on AJBArcadeTimeManager_DevUpdateTodayWeekCloseTime");
static_assert(offsetof(AJBArcadeTimeManager_DevUpdateTodayWeekCloseTime, Houre) == 0x000000, "Member 'AJBArcadeTimeManager_DevUpdateTodayWeekCloseTime::Houre' has a wrong offset!");
static_assert(offsetof(AJBArcadeTimeManager_DevUpdateTodayWeekCloseTime, Minute) == 0x000004, "Member 'AJBArcadeTimeManager_DevUpdateTodayWeekCloseTime::Minute' has a wrong offset!");

// Function AJB.AJBArrayFunctionLibrary.SortInt32Array
// 0x0020 (0x0020 - 0x0000)
struct AJBArrayFunctionLibrary_SortInt32Array final
{
public:
	TArray<int32>                                 InArray;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 OutArray;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBArrayFunctionLibrary_SortInt32Array) == 0x000008, "Wrong alignment on AJBArrayFunctionLibrary_SortInt32Array");
static_assert(sizeof(AJBArrayFunctionLibrary_SortInt32Array) == 0x000020, "Wrong size on AJBArrayFunctionLibrary_SortInt32Array");
static_assert(offsetof(AJBArrayFunctionLibrary_SortInt32Array, InArray) == 0x000000, "Member 'AJBArrayFunctionLibrary_SortInt32Array::InArray' has a wrong offset!");
static_assert(offsetof(AJBArrayFunctionLibrary_SortInt32Array, OutArray) == 0x000010, "Member 'AJBArrayFunctionLibrary_SortInt32Array::OutArray' has a wrong offset!");

// Function AJB.AJBAssetManager.Get
// 0x0008 (0x0008 - 0x0000)
struct AJBAssetManager_Get final
{
public:
	class UAJBAssetManager*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAssetManager_Get) == 0x000008, "Wrong alignment on AJBAssetManager_Get");
static_assert(sizeof(AJBAssetManager_Get) == 0x000008, "Wrong size on AJBAssetManager_Get");
static_assert(offsetof(AJBAssetManager_Get, ReturnValue) == 0x000000, "Member 'AJBAssetManager_Get::ReturnValue' has a wrong offset!");

// Function AJB.AJBAssetManager.GetAJBInGameCharacterClassByCharaId
// 0x0018 (0x0018 - 0x0000)
struct AJBAssetManager_GetAJBInGameCharacterClassByCharaId final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterID;                                       // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AAJBInGameCharacter>        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAssetManager_GetAJBInGameCharacterClassByCharaId) == 0x000008, "Wrong alignment on AJBAssetManager_GetAJBInGameCharacterClassByCharaId");
static_assert(sizeof(AJBAssetManager_GetAJBInGameCharacterClassByCharaId) == 0x000018, "Wrong size on AJBAssetManager_GetAJBInGameCharacterClassByCharaId");
static_assert(offsetof(AJBAssetManager_GetAJBInGameCharacterClassByCharaId, WorldContextObject) == 0x000000, "Member 'AJBAssetManager_GetAJBInGameCharacterClassByCharaId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBAssetManager_GetAJBInGameCharacterClassByCharaId, CharacterID) == 0x000008, "Member 'AJBAssetManager_GetAJBInGameCharacterClassByCharaId::CharacterID' has a wrong offset!");
static_assert(offsetof(AJBAssetManager_GetAJBInGameCharacterClassByCharaId, bSuccess) == 0x00000C, "Member 'AJBAssetManager_GetAJBInGameCharacterClassByCharaId::bSuccess' has a wrong offset!");
static_assert(offsetof(AJBAssetManager_GetAJBInGameCharacterClassByCharaId, ReturnValue) == 0x000010, "Member 'AJBAssetManager_GetAJBInGameCharacterClassByCharaId::ReturnValue' has a wrong offset!");

// Function AJB.AJBAssetManager.GetAJBInGameCharacterClassByCharaTag
// 0x0018 (0x0018 - 0x0000)
struct AJBAssetManager_GetAJBInGameCharacterClassByCharaTag final
{
public:
	struct FGameplayTag                           CharaTag;                                          // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AAJBInGameCharacter>        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAssetManager_GetAJBInGameCharacterClassByCharaTag) == 0x000008, "Wrong alignment on AJBAssetManager_GetAJBInGameCharacterClassByCharaTag");
static_assert(sizeof(AJBAssetManager_GetAJBInGameCharacterClassByCharaTag) == 0x000018, "Wrong size on AJBAssetManager_GetAJBInGameCharacterClassByCharaTag");
static_assert(offsetof(AJBAssetManager_GetAJBInGameCharacterClassByCharaTag, CharaTag) == 0x000000, "Member 'AJBAssetManager_GetAJBInGameCharacterClassByCharaTag::CharaTag' has a wrong offset!");
static_assert(offsetof(AJBAssetManager_GetAJBInGameCharacterClassByCharaTag, bSuccess) == 0x000008, "Member 'AJBAssetManager_GetAJBInGameCharacterClassByCharaTag::bSuccess' has a wrong offset!");
static_assert(offsetof(AJBAssetManager_GetAJBInGameCharacterClassByCharaTag, ReturnValue) == 0x000010, "Member 'AJBAssetManager_GetAJBInGameCharacterClassByCharaTag::ReturnValue' has a wrong offset!");

// Function AJB.AJBAssetManager.GetAJBInGameCharacterTagByCharaId
// 0x0018 (0x0018 - 0x0000)
struct AJBAssetManager_GetAJBInGameCharacterTagByCharaId final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterID;                                       // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAssetManager_GetAJBInGameCharacterTagByCharaId) == 0x000008, "Wrong alignment on AJBAssetManager_GetAJBInGameCharacterTagByCharaId");
static_assert(sizeof(AJBAssetManager_GetAJBInGameCharacterTagByCharaId) == 0x000018, "Wrong size on AJBAssetManager_GetAJBInGameCharacterTagByCharaId");
static_assert(offsetof(AJBAssetManager_GetAJBInGameCharacterTagByCharaId, WorldContextObject) == 0x000000, "Member 'AJBAssetManager_GetAJBInGameCharacterTagByCharaId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBAssetManager_GetAJBInGameCharacterTagByCharaId, CharacterID) == 0x000008, "Member 'AJBAssetManager_GetAJBInGameCharacterTagByCharaId::CharacterID' has a wrong offset!");
static_assert(offsetof(AJBAssetManager_GetAJBInGameCharacterTagByCharaId, bSuccess) == 0x00000C, "Member 'AJBAssetManager_GetAJBInGameCharacterTagByCharaId::bSuccess' has a wrong offset!");
static_assert(offsetof(AJBAssetManager_GetAJBInGameCharacterTagByCharaId, ReturnValue) == 0x000010, "Member 'AJBAssetManager_GetAJBInGameCharacterTagByCharaId::ReturnValue' has a wrong offset!");

// Function AJB.AJBAssetManager.GetEmotePrimaryDataAssetIdByCharaId
// 0x0028 (0x0028 - 0x0000)
struct AJBAssetManager_GetEmotePrimaryDataAssetIdByCharaId final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterID;                                       // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EmoteId;                                           // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPrimaryAssetId                        ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAssetManager_GetEmotePrimaryDataAssetIdByCharaId) == 0x000008, "Wrong alignment on AJBAssetManager_GetEmotePrimaryDataAssetIdByCharaId");
static_assert(sizeof(AJBAssetManager_GetEmotePrimaryDataAssetIdByCharaId) == 0x000028, "Wrong size on AJBAssetManager_GetEmotePrimaryDataAssetIdByCharaId");
static_assert(offsetof(AJBAssetManager_GetEmotePrimaryDataAssetIdByCharaId, WorldContextObject) == 0x000000, "Member 'AJBAssetManager_GetEmotePrimaryDataAssetIdByCharaId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBAssetManager_GetEmotePrimaryDataAssetIdByCharaId, CharacterID) == 0x000008, "Member 'AJBAssetManager_GetEmotePrimaryDataAssetIdByCharaId::CharacterID' has a wrong offset!");
static_assert(offsetof(AJBAssetManager_GetEmotePrimaryDataAssetIdByCharaId, EmoteId) == 0x00000C, "Member 'AJBAssetManager_GetEmotePrimaryDataAssetIdByCharaId::EmoteId' has a wrong offset!");
static_assert(offsetof(AJBAssetManager_GetEmotePrimaryDataAssetIdByCharaId, bSuccess) == 0x000010, "Member 'AJBAssetManager_GetEmotePrimaryDataAssetIdByCharaId::bSuccess' has a wrong offset!");
static_assert(offsetof(AJBAssetManager_GetEmotePrimaryDataAssetIdByCharaId, ReturnValue) == 0x000018, "Member 'AJBAssetManager_GetEmotePrimaryDataAssetIdByCharaId::ReturnValue' has a wrong offset!");

// Function AJB.AJBAssetManager.GetEmotePrimaryDataAssetIdByCharaTag
// 0x0028 (0x0028 - 0x0000)
struct AJBAssetManager_GetEmotePrimaryDataAssetIdByCharaTag final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CharaTag;                                          // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EmoteId;                                           // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPrimaryAssetId                        ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAssetManager_GetEmotePrimaryDataAssetIdByCharaTag) == 0x000008, "Wrong alignment on AJBAssetManager_GetEmotePrimaryDataAssetIdByCharaTag");
static_assert(sizeof(AJBAssetManager_GetEmotePrimaryDataAssetIdByCharaTag) == 0x000028, "Wrong size on AJBAssetManager_GetEmotePrimaryDataAssetIdByCharaTag");
static_assert(offsetof(AJBAssetManager_GetEmotePrimaryDataAssetIdByCharaTag, WorldContextObject) == 0x000000, "Member 'AJBAssetManager_GetEmotePrimaryDataAssetIdByCharaTag::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBAssetManager_GetEmotePrimaryDataAssetIdByCharaTag, CharaTag) == 0x000008, "Member 'AJBAssetManager_GetEmotePrimaryDataAssetIdByCharaTag::CharaTag' has a wrong offset!");
static_assert(offsetof(AJBAssetManager_GetEmotePrimaryDataAssetIdByCharaTag, EmoteId) == 0x000010, "Member 'AJBAssetManager_GetEmotePrimaryDataAssetIdByCharaTag::EmoteId' has a wrong offset!");
static_assert(offsetof(AJBAssetManager_GetEmotePrimaryDataAssetIdByCharaTag, bSuccess) == 0x000014, "Member 'AJBAssetManager_GetEmotePrimaryDataAssetIdByCharaTag::bSuccess' has a wrong offset!");
static_assert(offsetof(AJBAssetManager_GetEmotePrimaryDataAssetIdByCharaTag, ReturnValue) == 0x000018, "Member 'AJBAssetManager_GetEmotePrimaryDataAssetIdByCharaTag::ReturnValue' has a wrong offset!");

// Function AJB.AJBAssetManager.GetPlayerIconIDByRewardNo
// 0x0008 (0x0008 - 0x0000)
struct AJBAssetManager_GetPlayerIconIDByRewardNo final
{
public:
	int32                                         RewardNo;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAssetManager_GetPlayerIconIDByRewardNo) == 0x000004, "Wrong alignment on AJBAssetManager_GetPlayerIconIDByRewardNo");
static_assert(sizeof(AJBAssetManager_GetPlayerIconIDByRewardNo) == 0x000008, "Wrong size on AJBAssetManager_GetPlayerIconIDByRewardNo");
static_assert(offsetof(AJBAssetManager_GetPlayerIconIDByRewardNo, RewardNo) == 0x000000, "Member 'AJBAssetManager_GetPlayerIconIDByRewardNo::RewardNo' has a wrong offset!");
static_assert(offsetof(AJBAssetManager_GetPlayerIconIDByRewardNo, ReturnValue) == 0x000004, "Member 'AJBAssetManager_GetPlayerIconIDByRewardNo::ReturnValue' has a wrong offset!");

// Function AJB.AJBAssetManager.GetPreLoadingPrimaryDataAssetId
// 0x0020 (0x0020 - 0x0000)
struct AJBAssetManager_GetPreLoadingPrimaryDataAssetId final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageId;                                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPrimaryAssetId                        ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAssetManager_GetPreLoadingPrimaryDataAssetId) == 0x000008, "Wrong alignment on AJBAssetManager_GetPreLoadingPrimaryDataAssetId");
static_assert(sizeof(AJBAssetManager_GetPreLoadingPrimaryDataAssetId) == 0x000020, "Wrong size on AJBAssetManager_GetPreLoadingPrimaryDataAssetId");
static_assert(offsetof(AJBAssetManager_GetPreLoadingPrimaryDataAssetId, WorldContextObject) == 0x000000, "Member 'AJBAssetManager_GetPreLoadingPrimaryDataAssetId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBAssetManager_GetPreLoadingPrimaryDataAssetId, StageId) == 0x000008, "Member 'AJBAssetManager_GetPreLoadingPrimaryDataAssetId::StageId' has a wrong offset!");
static_assert(offsetof(AJBAssetManager_GetPreLoadingPrimaryDataAssetId, ReturnValue) == 0x000010, "Member 'AJBAssetManager_GetPreLoadingPrimaryDataAssetId::ReturnValue' has a wrong offset!");

// Function AJB.AJBAssetManager.GetRewardCharaIconTexture
// 0x0038 (0x0038 - 0x0000)
struct AJBAssetManager_GetRewardCharaIconTexture final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharaIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardNo;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAssetManager_GetRewardCharaIconTexture) == 0x000008, "Wrong alignment on AJBAssetManager_GetRewardCharaIconTexture");
static_assert(sizeof(AJBAssetManager_GetRewardCharaIconTexture) == 0x000038, "Wrong size on AJBAssetManager_GetRewardCharaIconTexture");
static_assert(offsetof(AJBAssetManager_GetRewardCharaIconTexture, WorldContextObject) == 0x000000, "Member 'AJBAssetManager_GetRewardCharaIconTexture::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBAssetManager_GetRewardCharaIconTexture, CharaIndex) == 0x000008, "Member 'AJBAssetManager_GetRewardCharaIconTexture::CharaIndex' has a wrong offset!");
static_assert(offsetof(AJBAssetManager_GetRewardCharaIconTexture, RewardNo) == 0x00000C, "Member 'AJBAssetManager_GetRewardCharaIconTexture::RewardNo' has a wrong offset!");
static_assert(offsetof(AJBAssetManager_GetRewardCharaIconTexture, ReturnValue) == 0x000010, "Member 'AJBAssetManager_GetRewardCharaIconTexture::ReturnValue' has a wrong offset!");

// Function AJB.AJBAssetManager.GetRewardStandIconTexture
// 0x0038 (0x0038 - 0x0000)
struct AJBAssetManager_GetRewardStandIconTexture final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharaIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RewardNo;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAssetManager_GetRewardStandIconTexture) == 0x000008, "Wrong alignment on AJBAssetManager_GetRewardStandIconTexture");
static_assert(sizeof(AJBAssetManager_GetRewardStandIconTexture) == 0x000038, "Wrong size on AJBAssetManager_GetRewardStandIconTexture");
static_assert(offsetof(AJBAssetManager_GetRewardStandIconTexture, WorldContextObject) == 0x000000, "Member 'AJBAssetManager_GetRewardStandIconTexture::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBAssetManager_GetRewardStandIconTexture, CharaIndex) == 0x000008, "Member 'AJBAssetManager_GetRewardStandIconTexture::CharaIndex' has a wrong offset!");
static_assert(offsetof(AJBAssetManager_GetRewardStandIconTexture, RewardNo) == 0x00000C, "Member 'AJBAssetManager_GetRewardStandIconTexture::RewardNo' has a wrong offset!");
static_assert(offsetof(AJBAssetManager_GetRewardStandIconTexture, ReturnValue) == 0x000010, "Member 'AJBAssetManager_GetRewardStandIconTexture::ReturnValue' has a wrong offset!");

// Function AJB.AJBAssetManager.IsValidPrimaryAssetId
// 0x0018 (0x0018 - 0x0000)
struct AJBAssetManager_IsValidPrimaryAssetId final
{
public:
	struct FPrimaryAssetId                        CheckPrimaryAssetId;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBAssetManager_IsValidPrimaryAssetId) == 0x000008, "Wrong alignment on AJBAssetManager_IsValidPrimaryAssetId");
static_assert(sizeof(AJBAssetManager_IsValidPrimaryAssetId) == 0x000018, "Wrong size on AJBAssetManager_IsValidPrimaryAssetId");
static_assert(offsetof(AJBAssetManager_IsValidPrimaryAssetId, CheckPrimaryAssetId) == 0x000000, "Member 'AJBAssetManager_IsValidPrimaryAssetId::CheckPrimaryAssetId' has a wrong offset!");
static_assert(offsetof(AJBAssetManager_IsValidPrimaryAssetId, ReturnValue) == 0x000010, "Member 'AJBAssetManager_IsValidPrimaryAssetId::ReturnValue' has a wrong offset!");

// Function AJB.AJBAssetManager.LoadAssetSyncByPrimaryAssetId
// 0x0020 (0x0020 - 0x0000)
struct AJBAssetManager_LoadAssetSyncByPrimaryAssetId final
{
public:
	struct FPrimaryAssetId                        PrimaryAssetId;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLogWarning;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAssetManager_LoadAssetSyncByPrimaryAssetId) == 0x000008, "Wrong alignment on AJBAssetManager_LoadAssetSyncByPrimaryAssetId");
static_assert(sizeof(AJBAssetManager_LoadAssetSyncByPrimaryAssetId) == 0x000020, "Wrong size on AJBAssetManager_LoadAssetSyncByPrimaryAssetId");
static_assert(offsetof(AJBAssetManager_LoadAssetSyncByPrimaryAssetId, PrimaryAssetId) == 0x000000, "Member 'AJBAssetManager_LoadAssetSyncByPrimaryAssetId::PrimaryAssetId' has a wrong offset!");
static_assert(offsetof(AJBAssetManager_LoadAssetSyncByPrimaryAssetId, bLogWarning) == 0x000010, "Member 'AJBAssetManager_LoadAssetSyncByPrimaryAssetId::bLogWarning' has a wrong offset!");
static_assert(offsetof(AJBAssetManager_LoadAssetSyncByPrimaryAssetId, ReturnValue) == 0x000018, "Member 'AJBAssetManager_LoadAssetSyncByPrimaryAssetId::ReturnValue' has a wrong offset!");

// Function AJB.AJBAssetManager.RegisterLoadedPrimaryEmoteMap
// 0x0010 (0x0010 - 0x0000)
struct AJBAssetManager_RegisterLoadedPrimaryEmoteMap final
{
public:
	TArray<class UObject*>                        PrimaryEmoteAssets;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAssetManager_RegisterLoadedPrimaryEmoteMap) == 0x000008, "Wrong alignment on AJBAssetManager_RegisterLoadedPrimaryEmoteMap");
static_assert(sizeof(AJBAssetManager_RegisterLoadedPrimaryEmoteMap) == 0x000010, "Wrong size on AJBAssetManager_RegisterLoadedPrimaryEmoteMap");
static_assert(offsetof(AJBAssetManager_RegisterLoadedPrimaryEmoteMap, PrimaryEmoteAssets) == 0x000000, "Member 'AJBAssetManager_RegisterLoadedPrimaryEmoteMap::PrimaryEmoteAssets' has a wrong offset!");

// Function AJB.AJBAssetManager.SetupCharacterClassLoadingPrimaryDataAsset
// 0x0008 (0x0008 - 0x0000)
struct AJBAssetManager_SetupCharacterClassLoadingPrimaryDataAsset final
{
public:
	class UObject*                                PrimaryAsset;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAssetManager_SetupCharacterClassLoadingPrimaryDataAsset) == 0x000008, "Wrong alignment on AJBAssetManager_SetupCharacterClassLoadingPrimaryDataAsset");
static_assert(sizeof(AJBAssetManager_SetupCharacterClassLoadingPrimaryDataAsset) == 0x000008, "Wrong size on AJBAssetManager_SetupCharacterClassLoadingPrimaryDataAsset");
static_assert(offsetof(AJBAssetManager_SetupCharacterClassLoadingPrimaryDataAsset, PrimaryAsset) == 0x000000, "Member 'AJBAssetManager_SetupCharacterClassLoadingPrimaryDataAsset::PrimaryAsset' has a wrong offset!");

// Function AJB.AJBAssetManager.SetupTitlePreLoadingPrimaryDataAsset
// 0x0008 (0x0008 - 0x0000)
struct AJBAssetManager_SetupTitlePreLoadingPrimaryDataAsset final
{
public:
	class UObject*                                PrimaryAsset;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAssetManager_SetupTitlePreLoadingPrimaryDataAsset) == 0x000008, "Wrong alignment on AJBAssetManager_SetupTitlePreLoadingPrimaryDataAsset");
static_assert(sizeof(AJBAssetManager_SetupTitlePreLoadingPrimaryDataAsset) == 0x000008, "Wrong size on AJBAssetManager_SetupTitlePreLoadingPrimaryDataAsset");
static_assert(offsetof(AJBAssetManager_SetupTitlePreLoadingPrimaryDataAsset, PrimaryAsset) == 0x000000, "Member 'AJBAssetManager_SetupTitlePreLoadingPrimaryDataAsset::PrimaryAsset' has a wrong offset!");

// Function AJB.AJBAssetManager.TryGetLoadedPrimaryEmoteAsset
// 0x0018 (0x0018 - 0x0000)
struct AJBAssetManager_TryGetLoadedPrimaryEmoteAsset final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterID;                                       // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EmoteId;                                           // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAJBPrimaryEmote*                       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAssetManager_TryGetLoadedPrimaryEmoteAsset) == 0x000008, "Wrong alignment on AJBAssetManager_TryGetLoadedPrimaryEmoteAsset");
static_assert(sizeof(AJBAssetManager_TryGetLoadedPrimaryEmoteAsset) == 0x000018, "Wrong size on AJBAssetManager_TryGetLoadedPrimaryEmoteAsset");
static_assert(offsetof(AJBAssetManager_TryGetLoadedPrimaryEmoteAsset, WorldContextObject) == 0x000000, "Member 'AJBAssetManager_TryGetLoadedPrimaryEmoteAsset::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBAssetManager_TryGetLoadedPrimaryEmoteAsset, CharacterID) == 0x000008, "Member 'AJBAssetManager_TryGetLoadedPrimaryEmoteAsset::CharacterID' has a wrong offset!");
static_assert(offsetof(AJBAssetManager_TryGetLoadedPrimaryEmoteAsset, EmoteId) == 0x00000C, "Member 'AJBAssetManager_TryGetLoadedPrimaryEmoteAsset::EmoteId' has a wrong offset!");
static_assert(offsetof(AJBAssetManager_TryGetLoadedPrimaryEmoteAsset, ReturnValue) == 0x000010, "Member 'AJBAssetManager_TryGetLoadedPrimaryEmoteAsset::ReturnValue' has a wrong offset!");

// Function AJB.AJBAsyncTaskDownloadImage.AJBDownloadImage
// 0x0048 (0x0048 - 0x0000)
struct AJBAsyncTaskDownloadImage_AJBDownloadImage final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SourceURL_;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SourceMD5HashString_;                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DistFilename_;                                     // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeoutSec_;                                       // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BandwidthBytePerSec_;                              // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAJBAsyncTaskDownloadImage*             ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBAsyncTaskDownloadImage_AJBDownloadImage) == 0x000008, "Wrong alignment on AJBAsyncTaskDownloadImage_AJBDownloadImage");
static_assert(sizeof(AJBAsyncTaskDownloadImage_AJBDownloadImage) == 0x000048, "Wrong size on AJBAsyncTaskDownloadImage_AJBDownloadImage");
static_assert(offsetof(AJBAsyncTaskDownloadImage_AJBDownloadImage, WorldContextObject) == 0x000000, "Member 'AJBAsyncTaskDownloadImage_AJBDownloadImage::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBAsyncTaskDownloadImage_AJBDownloadImage, SourceURL_) == 0x000008, "Member 'AJBAsyncTaskDownloadImage_AJBDownloadImage::SourceURL_' has a wrong offset!");
static_assert(offsetof(AJBAsyncTaskDownloadImage_AJBDownloadImage, SourceMD5HashString_) == 0x000018, "Member 'AJBAsyncTaskDownloadImage_AJBDownloadImage::SourceMD5HashString_' has a wrong offset!");
static_assert(offsetof(AJBAsyncTaskDownloadImage_AJBDownloadImage, DistFilename_) == 0x000028, "Member 'AJBAsyncTaskDownloadImage_AJBDownloadImage::DistFilename_' has a wrong offset!");
static_assert(offsetof(AJBAsyncTaskDownloadImage_AJBDownloadImage, TimeoutSec_) == 0x000038, "Member 'AJBAsyncTaskDownloadImage_AJBDownloadImage::TimeoutSec_' has a wrong offset!");
static_assert(offsetof(AJBAsyncTaskDownloadImage_AJBDownloadImage, BandwidthBytePerSec_) == 0x00003C, "Member 'AJBAsyncTaskDownloadImage_AJBDownloadImage::BandwidthBytePerSec_' has a wrong offset!");
static_assert(offsetof(AJBAsyncTaskDownloadImage_AJBDownloadImage, ReturnValue) == 0x000040, "Member 'AJBAsyncTaskDownloadImage_AJBDownloadImage::ReturnValue' has a wrong offset!");

// Function AJB.AJBHUDBase.BindButtonsEventDynamic
// 0x0008 (0x0008 - 0x0000)
struct AJBHUDBase_BindButtonsEventDynamic final
{
public:
	class UAJBUserWidget*                         TargetWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHUDBase_BindButtonsEventDynamic) == 0x000008, "Wrong alignment on AJBHUDBase_BindButtonsEventDynamic");
static_assert(sizeof(AJBHUDBase_BindButtonsEventDynamic) == 0x000008, "Wrong size on AJBHUDBase_BindButtonsEventDynamic");
static_assert(offsetof(AJBHUDBase_BindButtonsEventDynamic, TargetWidget) == 0x000000, "Member 'AJBHUDBase_BindButtonsEventDynamic::TargetWidget' has a wrong offset!");

// Function AJB.AJBHUDBase.CallEndFadeEvent
// 0x0001 (0x0001 - 0x0000)
struct AJBHUDBase_CallEndFadeEvent final
{
public:
	EAJBFadeType                                  Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHUDBase_CallEndFadeEvent) == 0x000001, "Wrong alignment on AJBHUDBase_CallEndFadeEvent");
static_assert(sizeof(AJBHUDBase_CallEndFadeEvent) == 0x000001, "Wrong size on AJBHUDBase_CallEndFadeEvent");
static_assert(offsetof(AJBHUDBase_CallEndFadeEvent, Type) == 0x000000, "Member 'AJBHUDBase_CallEndFadeEvent::Type' has a wrong offset!");

// Function AJB.AJBHUDBase.CallStartFadeEvent
// 0x0001 (0x0001 - 0x0000)
struct AJBHUDBase_CallStartFadeEvent final
{
public:
	EAJBFadeType                                  Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHUDBase_CallStartFadeEvent) == 0x000001, "Wrong alignment on AJBHUDBase_CallStartFadeEvent");
static_assert(sizeof(AJBHUDBase_CallStartFadeEvent) == 0x000001, "Wrong size on AJBHUDBase_CallStartFadeEvent");
static_assert(offsetof(AJBHUDBase_CallStartFadeEvent, Type) == 0x000000, "Member 'AJBHUDBase_CallStartFadeEvent::Type' has a wrong offset!");

// Function AJB.AJBHUDBase.FindAJBWidgetOfClass
// 0x0010 (0x0010 - 0x0000)
struct AJBHUDBase_FindAJBWidgetOfClass final
{
public:
	TSubclassOf<class UAJBUserWidget>             AJBWidgetClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAJBUserWidget*                         OutWidget;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHUDBase_FindAJBWidgetOfClass) == 0x000008, "Wrong alignment on AJBHUDBase_FindAJBWidgetOfClass");
static_assert(sizeof(AJBHUDBase_FindAJBWidgetOfClass) == 0x000010, "Wrong size on AJBHUDBase_FindAJBWidgetOfClass");
static_assert(offsetof(AJBHUDBase_FindAJBWidgetOfClass, AJBWidgetClass) == 0x000000, "Member 'AJBHUDBase_FindAJBWidgetOfClass::AJBWidgetClass' has a wrong offset!");
static_assert(offsetof(AJBHUDBase_FindAJBWidgetOfClass, OutWidget) == 0x000008, "Member 'AJBHUDBase_FindAJBWidgetOfClass::OutWidget' has a wrong offset!");

// Function AJB.AJBHUDBase.FindAJBWidgetsOfClass
// 0x0018 (0x0018 - 0x0000)
struct AJBHUDBase_FindAJBWidgetsOfClass final
{
public:
	TSubclassOf<class UAJBUserWidget>             AJBWidgetClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAJBUserWidget*>                 OutWidgets;                                        // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHUDBase_FindAJBWidgetsOfClass) == 0x000008, "Wrong alignment on AJBHUDBase_FindAJBWidgetsOfClass");
static_assert(sizeof(AJBHUDBase_FindAJBWidgetsOfClass) == 0x000018, "Wrong size on AJBHUDBase_FindAJBWidgetsOfClass");
static_assert(offsetof(AJBHUDBase_FindAJBWidgetsOfClass, AJBWidgetClass) == 0x000000, "Member 'AJBHUDBase_FindAJBWidgetsOfClass::AJBWidgetClass' has a wrong offset!");
static_assert(offsetof(AJBHUDBase_FindAJBWidgetsOfClass, OutWidgets) == 0x000008, "Member 'AJBHUDBase_FindAJBWidgetsOfClass::OutWidgets' has a wrong offset!");

// Function AJB.AJBHUDBase.GetInputWidgets
// 0x0018 (0x0018 - 0x0000)
struct AJBHUDBase_GetInputWidgets final
{
public:
	TArray<class UAJBUserWidget*>                 OutWidgets;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBHUDBase_GetInputWidgets) == 0x000008, "Wrong alignment on AJBHUDBase_GetInputWidgets");
static_assert(sizeof(AJBHUDBase_GetInputWidgets) == 0x000018, "Wrong size on AJBHUDBase_GetInputWidgets");
static_assert(offsetof(AJBHUDBase_GetInputWidgets, OutWidgets) == 0x000000, "Member 'AJBHUDBase_GetInputWidgets::OutWidgets' has a wrong offset!");
static_assert(offsetof(AJBHUDBase_GetInputWidgets, ReturnValue) == 0x000010, "Member 'AJBHUDBase_GetInputWidgets::ReturnValue' has a wrong offset!");

// Function AJB.AJBHUDBase.GetViewportWidgets
// 0x0018 (0x0018 - 0x0000)
struct AJBHUDBase_GetViewportWidgets final
{
public:
	TArray<class UAJBUserWidget*>                 OutWidgets;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBHUDBase_GetViewportWidgets) == 0x000008, "Wrong alignment on AJBHUDBase_GetViewportWidgets");
static_assert(sizeof(AJBHUDBase_GetViewportWidgets) == 0x000018, "Wrong size on AJBHUDBase_GetViewportWidgets");
static_assert(offsetof(AJBHUDBase_GetViewportWidgets, OutWidgets) == 0x000000, "Member 'AJBHUDBase_GetViewportWidgets::OutWidgets' has a wrong offset!");
static_assert(offsetof(AJBHUDBase_GetViewportWidgets, ReturnValue) == 0x000010, "Member 'AJBHUDBase_GetViewportWidgets::ReturnValue' has a wrong offset!");

// Function AJB.AJBHUDBase.IsPressedInputButtonWidget
// 0x0001 (0x0001 - 0x0000)
struct AJBHUDBase_IsPressedInputButtonWidget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHUDBase_IsPressedInputButtonWidget) == 0x000001, "Wrong alignment on AJBHUDBase_IsPressedInputButtonWidget");
static_assert(sizeof(AJBHUDBase_IsPressedInputButtonWidget) == 0x000001, "Wrong size on AJBHUDBase_IsPressedInputButtonWidget");
static_assert(offsetof(AJBHUDBase_IsPressedInputButtonWidget, ReturnValue) == 0x000000, "Member 'AJBHUDBase_IsPressedInputButtonWidget::ReturnValue' has a wrong offset!");

// Function AJB.AJBHUDBase.IsPressedInputPad
// 0x0001 (0x0001 - 0x0000)
struct AJBHUDBase_IsPressedInputPad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHUDBase_IsPressedInputPad) == 0x000001, "Wrong alignment on AJBHUDBase_IsPressedInputPad");
static_assert(sizeof(AJBHUDBase_IsPressedInputPad) == 0x000001, "Wrong size on AJBHUDBase_IsPressedInputPad");
static_assert(offsetof(AJBHUDBase_IsPressedInputPad, ReturnValue) == 0x000000, "Member 'AJBHUDBase_IsPressedInputPad::ReturnValue' has a wrong offset!");

// Function AJB.AJBHUDBase.OnReceivedClosedWindow
// 0x0008 (0x0008 - 0x0000)
struct AJBHUDBase_OnReceivedClosedWindow final
{
public:
	class UAJBWindowWidget*                       TargetWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHUDBase_OnReceivedClosedWindow) == 0x000008, "Wrong alignment on AJBHUDBase_OnReceivedClosedWindow");
static_assert(sizeof(AJBHUDBase_OnReceivedClosedWindow) == 0x000008, "Wrong size on AJBHUDBase_OnReceivedClosedWindow");
static_assert(offsetof(AJBHUDBase_OnReceivedClosedWindow, TargetWidget) == 0x000000, "Member 'AJBHUDBase_OnReceivedClosedWindow::TargetWidget' has a wrong offset!");

// Function AJB.AJBHUDBase.OnReceivedClosingWindow
// 0x0008 (0x0008 - 0x0000)
struct AJBHUDBase_OnReceivedClosingWindow final
{
public:
	class UAJBWindowWidget*                       TargetWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHUDBase_OnReceivedClosingWindow) == 0x000008, "Wrong alignment on AJBHUDBase_OnReceivedClosingWindow");
static_assert(sizeof(AJBHUDBase_OnReceivedClosingWindow) == 0x000008, "Wrong size on AJBHUDBase_OnReceivedClosingWindow");
static_assert(offsetof(AJBHUDBase_OnReceivedClosingWindow, TargetWidget) == 0x000000, "Member 'AJBHUDBase_OnReceivedClosingWindow::TargetWidget' has a wrong offset!");

// Function AJB.AJBHUDBase.OnReceivedOpenedWindow
// 0x0008 (0x0008 - 0x0000)
struct AJBHUDBase_OnReceivedOpenedWindow final
{
public:
	class UAJBWindowWidget*                       TargetWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHUDBase_OnReceivedOpenedWindow) == 0x000008, "Wrong alignment on AJBHUDBase_OnReceivedOpenedWindow");
static_assert(sizeof(AJBHUDBase_OnReceivedOpenedWindow) == 0x000008, "Wrong size on AJBHUDBase_OnReceivedOpenedWindow");
static_assert(offsetof(AJBHUDBase_OnReceivedOpenedWindow, TargetWidget) == 0x000000, "Member 'AJBHUDBase_OnReceivedOpenedWindow::TargetWidget' has a wrong offset!");

// Function AJB.AJBHUDBase.OnReceivedOpeningWindow
// 0x0008 (0x0008 - 0x0000)
struct AJBHUDBase_OnReceivedOpeningWindow final
{
public:
	class UAJBWindowWidget*                       TargetWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHUDBase_OnReceivedOpeningWindow) == 0x000008, "Wrong alignment on AJBHUDBase_OnReceivedOpeningWindow");
static_assert(sizeof(AJBHUDBase_OnReceivedOpeningWindow) == 0x000008, "Wrong size on AJBHUDBase_OnReceivedOpeningWindow");
static_assert(offsetof(AJBHUDBase_OnReceivedOpeningWindow, TargetWidget) == 0x000000, "Member 'AJBHUDBase_OnReceivedOpeningWindow::TargetWidget' has a wrong offset!");

// Function AJB.AJBHUDBase.OnStartFadeIn
// 0x0004 (0x0004 - 0x0000)
struct AJBHUDBase_OnStartFadeIn final
{
public:
	float                                         FadeTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHUDBase_OnStartFadeIn) == 0x000004, "Wrong alignment on AJBHUDBase_OnStartFadeIn");
static_assert(sizeof(AJBHUDBase_OnStartFadeIn) == 0x000004, "Wrong size on AJBHUDBase_OnStartFadeIn");
static_assert(offsetof(AJBHUDBase_OnStartFadeIn, FadeTime) == 0x000000, "Member 'AJBHUDBase_OnStartFadeIn::FadeTime' has a wrong offset!");

// Function AJB.AJBHUDBase.OnStartFadeOut
// 0x0004 (0x0004 - 0x0000)
struct AJBHUDBase_OnStartFadeOut final
{
public:
	float                                         FadeTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHUDBase_OnStartFadeOut) == 0x000004, "Wrong alignment on AJBHUDBase_OnStartFadeOut");
static_assert(sizeof(AJBHUDBase_OnStartFadeOut) == 0x000004, "Wrong size on AJBHUDBase_OnStartFadeOut");
static_assert(offsetof(AJBHUDBase_OnStartFadeOut, FadeTime) == 0x000000, "Member 'AJBHUDBase_OnStartFadeOut::FadeTime' has a wrong offset!");

// Function AJB.AJBHUDBase.RegisterInputActor
// 0x0008 (0x0008 - 0x0000)
struct AJBHUDBase_RegisterInputActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHUDBase_RegisterInputActor) == 0x000008, "Wrong alignment on AJBHUDBase_RegisterInputActor");
static_assert(sizeof(AJBHUDBase_RegisterInputActor) == 0x000008, "Wrong size on AJBHUDBase_RegisterInputActor");
static_assert(offsetof(AJBHUDBase_RegisterInputActor, Actor) == 0x000000, "Member 'AJBHUDBase_RegisterInputActor::Actor' has a wrong offset!");

// Function AJB.AJBHUDBase.SetCreditWidgetInstance
// 0x0008 (0x0008 - 0x0000)
struct AJBHUDBase_SetCreditWidgetInstance final
{
public:
	class UAJBUserWidget*                         CreditWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHUDBase_SetCreditWidgetInstance) == 0x000008, "Wrong alignment on AJBHUDBase_SetCreditWidgetInstance");
static_assert(sizeof(AJBHUDBase_SetCreditWidgetInstance) == 0x000008, "Wrong size on AJBHUDBase_SetCreditWidgetInstance");
static_assert(offsetof(AJBHUDBase_SetCreditWidgetInstance, CreditWidget) == 0x000000, "Member 'AJBHUDBase_SetCreditWidgetInstance::CreditWidget' has a wrong offset!");

// Function AJB.AJBHUDBase.SetupForceInvisibleAllWidgetsFlag
// 0x0001 (0x0001 - 0x0000)
struct AJBHUDBase_SetupForceInvisibleAllWidgetsFlag final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHUDBase_SetupForceInvisibleAllWidgetsFlag) == 0x000001, "Wrong alignment on AJBHUDBase_SetupForceInvisibleAllWidgetsFlag");
static_assert(sizeof(AJBHUDBase_SetupForceInvisibleAllWidgetsFlag) == 0x000001, "Wrong size on AJBHUDBase_SetupForceInvisibleAllWidgetsFlag");
static_assert(offsetof(AJBHUDBase_SetupForceInvisibleAllWidgetsFlag, bVisible) == 0x000000, "Member 'AJBHUDBase_SetupForceInvisibleAllWidgetsFlag::bVisible' has a wrong offset!");

// Function AJB.AJBHUDBase.SetVisibilityTimeCountDown
// 0x0001 (0x0001 - 0x0000)
struct AJBHUDBase_SetVisibilityTimeCountDown final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHUDBase_SetVisibilityTimeCountDown) == 0x000001, "Wrong alignment on AJBHUDBase_SetVisibilityTimeCountDown");
static_assert(sizeof(AJBHUDBase_SetVisibilityTimeCountDown) == 0x000001, "Wrong size on AJBHUDBase_SetVisibilityTimeCountDown");
static_assert(offsetof(AJBHUDBase_SetVisibilityTimeCountDown, bVisible) == 0x000000, "Member 'AJBHUDBase_SetVisibilityTimeCountDown::bVisible' has a wrong offset!");

// Function AJB.AJBHUDBase.UnbindButtonsEventDynamic
// 0x0008 (0x0008 - 0x0000)
struct AJBHUDBase_UnbindButtonsEventDynamic final
{
public:
	class UAJBUserWidget*                         TargetWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHUDBase_UnbindButtonsEventDynamic) == 0x000008, "Wrong alignment on AJBHUDBase_UnbindButtonsEventDynamic");
static_assert(sizeof(AJBHUDBase_UnbindButtonsEventDynamic) == 0x000008, "Wrong size on AJBHUDBase_UnbindButtonsEventDynamic");
static_assert(offsetof(AJBHUDBase_UnbindButtonsEventDynamic, TargetWidget) == 0x000000, "Member 'AJBHUDBase_UnbindButtonsEventDynamic::TargetWidget' has a wrong offset!");

// Function AJB.AJBHUDBase.UnregisterInputActor
// 0x0008 (0x0008 - 0x0000)
struct AJBHUDBase_UnregisterInputActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHUDBase_UnregisterInputActor) == 0x000008, "Wrong alignment on AJBHUDBase_UnregisterInputActor");
static_assert(sizeof(AJBHUDBase_UnregisterInputActor) == 0x000008, "Wrong size on AJBHUDBase_UnregisterInputActor");
static_assert(offsetof(AJBHUDBase_UnregisterInputActor, Actor) == 0x000000, "Member 'AJBHUDBase_UnregisterInputActor::Actor' has a wrong offset!");

// Function AJB.AJBHUDBase.UpdateTimeCountDown
// 0x0008 (0x0008 - 0x0000)
struct AJBHUDBase_UpdateTimeCountDown final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTime;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHUDBase_UpdateTimeCountDown) == 0x000004, "Wrong alignment on AJBHUDBase_UpdateTimeCountDown");
static_assert(sizeof(AJBHUDBase_UpdateTimeCountDown) == 0x000008, "Wrong size on AJBHUDBase_UpdateTimeCountDown");
static_assert(offsetof(AJBHUDBase_UpdateTimeCountDown, Time) == 0x000000, "Member 'AJBHUDBase_UpdateTimeCountDown::Time' has a wrong offset!");
static_assert(offsetof(AJBHUDBase_UpdateTimeCountDown, MaxTime) == 0x000004, "Member 'AJBHUDBase_UpdateTimeCountDown::MaxTime' has a wrong offset!");

// Function AJB.AJBInGameHUD.IsActivateInGameUI
// 0x0001 (0x0001 - 0x0000)
struct AJBInGameHUD_IsActivateInGameUI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameHUD_IsActivateInGameUI) == 0x000001, "Wrong alignment on AJBInGameHUD_IsActivateInGameUI");
static_assert(sizeof(AJBInGameHUD_IsActivateInGameUI) == 0x000001, "Wrong size on AJBInGameHUD_IsActivateInGameUI");
static_assert(offsetof(AJBInGameHUD_IsActivateInGameUI, ReturnValue) == 0x000000, "Member 'AJBInGameHUD_IsActivateInGameUI::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameHUD.IsInitializedInGameUI
// 0x0001 (0x0001 - 0x0000)
struct AJBInGameHUD_IsInitializedInGameUI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameHUD_IsInitializedInGameUI) == 0x000001, "Wrong alignment on AJBInGameHUD_IsInitializedInGameUI");
static_assert(sizeof(AJBInGameHUD_IsInitializedInGameUI) == 0x000001, "Wrong size on AJBInGameHUD_IsInitializedInGameUI");
static_assert(offsetof(AJBInGameHUD_IsInitializedInGameUI, ReturnValue) == 0x000000, "Member 'AJBInGameHUD_IsInitializedInGameUI::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameHUD.OnChangedViewTargetCharacter
// 0x0008 (0x0008 - 0x0000)
struct AJBInGameHUD_OnChangedViewTargetCharacter final
{
public:
	class AAJBInGameCharacterBase*                ViewCharacter;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameHUD_OnChangedViewTargetCharacter) == 0x000008, "Wrong alignment on AJBInGameHUD_OnChangedViewTargetCharacter");
static_assert(sizeof(AJBInGameHUD_OnChangedViewTargetCharacter) == 0x000008, "Wrong size on AJBInGameHUD_OnChangedViewTargetCharacter");
static_assert(offsetof(AJBInGameHUD_OnChangedViewTargetCharacter, ViewCharacter) == 0x000000, "Member 'AJBInGameHUD_OnChangedViewTargetCharacter::ViewCharacter' has a wrong offset!");

// Function AJB.AJBInGameHUD.TryCreateSkillWidget
// 0x0010 (0x0010 - 0x0000)
struct AJBInGameHUD_TryCreateSkillWidget final
{
public:
	TSubclassOf<class UAJBInGameSkillWidget>      SkillWidgetClass;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAJBInGameSkillWidget*                  ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameHUD_TryCreateSkillWidget) == 0x000008, "Wrong alignment on AJBInGameHUD_TryCreateSkillWidget");
static_assert(sizeof(AJBInGameHUD_TryCreateSkillWidget) == 0x000010, "Wrong size on AJBInGameHUD_TryCreateSkillWidget");
static_assert(offsetof(AJBInGameHUD_TryCreateSkillWidget, SkillWidgetClass) == 0x000000, "Member 'AJBInGameHUD_TryCreateSkillWidget::SkillWidgetClass' has a wrong offset!");
static_assert(offsetof(AJBInGameHUD_TryCreateSkillWidget, ReturnValue) == 0x000008, "Member 'AJBInGameHUD_TryCreateSkillWidget::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameMovableStand.ROS_SetAppearanceTransition
// 0x0001 (0x0001 - 0x0000)
struct AJBInGameMovableStand_ROS_SetAppearanceTransition final
{
public:
	EStandAccompanyTransition                     NextTransition;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameMovableStand_ROS_SetAppearanceTransition) == 0x000001, "Wrong alignment on AJBInGameMovableStand_ROS_SetAppearanceTransition");
static_assert(sizeof(AJBInGameMovableStand_ROS_SetAppearanceTransition) == 0x000001, "Wrong size on AJBInGameMovableStand_ROS_SetAppearanceTransition");
static_assert(offsetof(AJBInGameMovableStand_ROS_SetAppearanceTransition, NextTransition) == 0x000000, "Member 'AJBInGameMovableStand_ROS_SetAppearanceTransition::NextTransition' has a wrong offset!");

// Function AJB.AJBInGameMovableStand.SetAppearanceTransition
// 0x0001 (0x0001 - 0x0000)
struct AJBInGameMovableStand_SetAppearanceTransition final
{
public:
	EStandAccompanyTransition                     NextTransition;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameMovableStand_SetAppearanceTransition) == 0x000001, "Wrong alignment on AJBInGameMovableStand_SetAppearanceTransition");
static_assert(sizeof(AJBInGameMovableStand_SetAppearanceTransition) == 0x000001, "Wrong size on AJBInGameMovableStand_SetAppearanceTransition");
static_assert(offsetof(AJBInGameMovableStand_SetAppearanceTransition, NextTransition) == 0x000000, "Member 'AJBInGameMovableStand_SetAppearanceTransition::NextTransition' has a wrong offset!");

// Function AJB.AJBInGameMovableStand.SetAppearanceTransitionAll
// 0x0001 (0x0001 - 0x0000)
struct AJBInGameMovableStand_SetAppearanceTransitionAll final
{
public:
	EStandAccompanyTransition                     NextTransition;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameMovableStand_SetAppearanceTransitionAll) == 0x000001, "Wrong alignment on AJBInGameMovableStand_SetAppearanceTransitionAll");
static_assert(sizeof(AJBInGameMovableStand_SetAppearanceTransitionAll) == 0x000001, "Wrong size on AJBInGameMovableStand_SetAppearanceTransitionAll");
static_assert(offsetof(AJBInGameMovableStand_SetAppearanceTransitionAll, NextTransition) == 0x000000, "Member 'AJBInGameMovableStand_SetAppearanceTransitionAll::NextTransition' has a wrong offset!");

// Function AJB.AJBInGameMovableStand.IsAppearance
// 0x0001 (0x0001 - 0x0000)
struct AJBInGameMovableStand_IsAppearance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameMovableStand_IsAppearance) == 0x000001, "Wrong alignment on AJBInGameMovableStand_IsAppearance");
static_assert(sizeof(AJBInGameMovableStand_IsAppearance) == 0x000001, "Wrong size on AJBInGameMovableStand_IsAppearance");
static_assert(offsetof(AJBInGameMovableStand_IsAppearance, ReturnValue) == 0x000000, "Member 'AJBInGameMovableStand_IsAppearance::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameMovableStand.IsBackwardTransition
// 0x0001 (0x0001 - 0x0000)
struct AJBInGameMovableStand_IsBackwardTransition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameMovableStand_IsBackwardTransition) == 0x000001, "Wrong alignment on AJBInGameMovableStand_IsBackwardTransition");
static_assert(sizeof(AJBInGameMovableStand_IsBackwardTransition) == 0x000001, "Wrong size on AJBInGameMovableStand_IsBackwardTransition");
static_assert(offsetof(AJBInGameMovableStand_IsBackwardTransition, ReturnValue) == 0x000000, "Member 'AJBInGameMovableStand_IsBackwardTransition::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameMovableStand.IsForwardTransition
// 0x0001 (0x0001 - 0x0000)
struct AJBInGameMovableStand_IsForwardTransition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameMovableStand_IsForwardTransition) == 0x000001, "Wrong alignment on AJBInGameMovableStand_IsForwardTransition");
static_assert(sizeof(AJBInGameMovableStand_IsForwardTransition) == 0x000001, "Wrong size on AJBInGameMovableStand_IsForwardTransition");
static_assert(offsetof(AJBInGameMovableStand_IsForwardTransition, ReturnValue) == 0x000000, "Member 'AJBInGameMovableStand_IsForwardTransition::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameMovableStand.IsNotAppearance
// 0x0001 (0x0001 - 0x0000)
struct AJBInGameMovableStand_IsNotAppearance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameMovableStand_IsNotAppearance) == 0x000001, "Wrong alignment on AJBInGameMovableStand_IsNotAppearance");
static_assert(sizeof(AJBInGameMovableStand_IsNotAppearance) == 0x000001, "Wrong size on AJBInGameMovableStand_IsNotAppearance");
static_assert(offsetof(AJBInGameMovableStand_IsNotAppearance, ReturnValue) == 0x000000, "Member 'AJBInGameMovableStand_IsNotAppearance::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameMovableStand.IsTransition
// 0x0001 (0x0001 - 0x0000)
struct AJBInGameMovableStand_IsTransition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameMovableStand_IsTransition) == 0x000001, "Wrong alignment on AJBInGameMovableStand_IsTransition");
static_assert(sizeof(AJBInGameMovableStand_IsTransition) == 0x000001, "Wrong size on AJBInGameMovableStand_IsTransition");
static_assert(offsetof(AJBInGameMovableStand_IsTransition, ReturnValue) == 0x000000, "Member 'AJBInGameMovableStand_IsTransition::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameGameMode.InitializeOnlineBeacon
// 0x0010 (0x0010 - 0x0000)
struct AJBInGameGameMode_InitializeOnlineBeacon final
{
public:
	TSubclassOf<class AAJBOnlineBeaconClient>     BeaconClientClass;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBInGameGameMode_InitializeOnlineBeacon) == 0x000008, "Wrong alignment on AJBInGameGameMode_InitializeOnlineBeacon");
static_assert(sizeof(AJBInGameGameMode_InitializeOnlineBeacon) == 0x000010, "Wrong size on AJBInGameGameMode_InitializeOnlineBeacon");
static_assert(offsetof(AJBInGameGameMode_InitializeOnlineBeacon, BeaconClientClass) == 0x000000, "Member 'AJBInGameGameMode_InitializeOnlineBeacon::BeaconClientClass' has a wrong offset!");
static_assert(offsetof(AJBInGameGameMode_InitializeOnlineBeacon, ReturnValue) == 0x000008, "Member 'AJBInGameGameMode_InitializeOnlineBeacon::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameGameMode.SetBlogLoingState
// 0x0001 (0x0001 - 0x0000)
struct AJBInGameGameMode_SetBlogLoingState final
{
public:
	bool                                          IsBlock;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameGameMode_SetBlogLoingState) == 0x000001, "Wrong alignment on AJBInGameGameMode_SetBlogLoingState");
static_assert(sizeof(AJBInGameGameMode_SetBlogLoingState) == 0x000001, "Wrong size on AJBInGameGameMode_SetBlogLoingState");
static_assert(offsetof(AJBInGameGameMode_SetBlogLoingState, IsBlock) == 0x000000, "Member 'AJBInGameGameMode_SetBlogLoingState::IsBlock' has a wrong offset!");

// Function AJB.AJBInGameMovementComponent.AddInput
// 0x0010 (0x0010 - 0x0000)
struct AJBInGameMovementComponent_AddInput final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsForce;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBInGameMovementComponent_AddInput) == 0x000004, "Wrong alignment on AJBInGameMovementComponent_AddInput");
static_assert(sizeof(AJBInGameMovementComponent_AddInput) == 0x000010, "Wrong size on AJBInGameMovementComponent_AddInput");
static_assert(offsetof(AJBInGameMovementComponent_AddInput, Vector) == 0x000000, "Member 'AJBInGameMovementComponent_AddInput::Vector' has a wrong offset!");
static_assert(offsetof(AJBInGameMovementComponent_AddInput, IsForce) == 0x00000C, "Member 'AJBInGameMovementComponent_AddInput::IsForce' has a wrong offset!");

// Function AJB.AJBInGameMovementComponent.AddInputPitch
// 0x0004 (0x0004 - 0x0000)
struct AJBInGameMovementComponent_AddInputPitch final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameMovementComponent_AddInputPitch) == 0x000004, "Wrong alignment on AJBInGameMovementComponent_AddInputPitch");
static_assert(sizeof(AJBInGameMovementComponent_AddInputPitch) == 0x000004, "Wrong size on AJBInGameMovementComponent_AddInputPitch");
static_assert(offsetof(AJBInGameMovementComponent_AddInputPitch, Value) == 0x000000, "Member 'AJBInGameMovementComponent_AddInputPitch::Value' has a wrong offset!");

// Function AJB.AJBInGameMovementComponent.AddInputYaw
// 0x0004 (0x0004 - 0x0000)
struct AJBInGameMovementComponent_AddInputYaw final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameMovementComponent_AddInputYaw) == 0x000004, "Wrong alignment on AJBInGameMovementComponent_AddInputYaw");
static_assert(sizeof(AJBInGameMovementComponent_AddInputYaw) == 0x000004, "Wrong size on AJBInGameMovementComponent_AddInputYaw");
static_assert(offsetof(AJBInGameMovementComponent_AddInputYaw, Value) == 0x000000, "Member 'AJBInGameMovementComponent_AddInputYaw::Value' has a wrong offset!");

// Function AJB.AJBInGameMovementComponent.AddInputZ
// 0x0010 (0x0010 - 0x0000)
struct AJBInGameMovementComponent_AddInputZ final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsForce;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBInGameMovementComponent_AddInputZ) == 0x000004, "Wrong alignment on AJBInGameMovementComponent_AddInputZ");
static_assert(sizeof(AJBInGameMovementComponent_AddInputZ) == 0x000010, "Wrong size on AJBInGameMovementComponent_AddInputZ");
static_assert(offsetof(AJBInGameMovementComponent_AddInputZ, Vector) == 0x000000, "Member 'AJBInGameMovementComponent_AddInputZ::Vector' has a wrong offset!");
static_assert(offsetof(AJBInGameMovementComponent_AddInputZ, IsForce) == 0x00000C, "Member 'AJBInGameMovementComponent_AddInputZ::IsForce' has a wrong offset!");

// Function AJB.AJBInGameMovementComponent.ROC_UpdateServerLocation
// 0x000C (0x000C - 0x0000)
struct AJBInGameMovementComponent_ROC_UpdateServerLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameMovementComponent_ROC_UpdateServerLocation) == 0x000004, "Wrong alignment on AJBInGameMovementComponent_ROC_UpdateServerLocation");
static_assert(sizeof(AJBInGameMovementComponent_ROC_UpdateServerLocation) == 0x00000C, "Wrong size on AJBInGameMovementComponent_ROC_UpdateServerLocation");
static_assert(offsetof(AJBInGameMovementComponent_ROC_UpdateServerLocation, Location) == 0x000000, "Member 'AJBInGameMovementComponent_ROC_UpdateServerLocation::Location' has a wrong offset!");

// Function AJB.AJBInGameMovementComponent.ROS_CheckServerLocation
// 0x000C (0x000C - 0x0000)
struct AJBInGameMovementComponent_ROS_CheckServerLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameMovementComponent_ROS_CheckServerLocation) == 0x000004, "Wrong alignment on AJBInGameMovementComponent_ROS_CheckServerLocation");
static_assert(sizeof(AJBInGameMovementComponent_ROS_CheckServerLocation) == 0x00000C, "Wrong size on AJBInGameMovementComponent_ROS_CheckServerLocation");
static_assert(offsetof(AJBInGameMovementComponent_ROS_CheckServerLocation, Location) == 0x000000, "Member 'AJBInGameMovementComponent_ROS_CheckServerLocation::Location' has a wrong offset!");

// Function AJB.AJBInGameMovementComponent.ROS_SetLocation
// 0x000C (0x000C - 0x0000)
struct AJBInGameMovementComponent_ROS_SetLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameMovementComponent_ROS_SetLocation) == 0x000004, "Wrong alignment on AJBInGameMovementComponent_ROS_SetLocation");
static_assert(sizeof(AJBInGameMovementComponent_ROS_SetLocation) == 0x00000C, "Wrong size on AJBInGameMovementComponent_ROS_SetLocation");
static_assert(offsetof(AJBInGameMovementComponent_ROS_SetLocation, Location) == 0x000000, "Member 'AJBInGameMovementComponent_ROS_SetLocation::Location' has a wrong offset!");

// Function AJB.AJBInGameMovementComponent.ROS_SetLocationReliable
// 0x000C (0x000C - 0x0000)
struct AJBInGameMovementComponent_ROS_SetLocationReliable final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameMovementComponent_ROS_SetLocationReliable) == 0x000004, "Wrong alignment on AJBInGameMovementComponent_ROS_SetLocationReliable");
static_assert(sizeof(AJBInGameMovementComponent_ROS_SetLocationReliable) == 0x00000C, "Wrong size on AJBInGameMovementComponent_ROS_SetLocationReliable");
static_assert(offsetof(AJBInGameMovementComponent_ROS_SetLocationReliable, Location) == 0x000000, "Member 'AJBInGameMovementComponent_ROS_SetLocationReliable::Location' has a wrong offset!");

// Function AJB.AJBInGameMovementComponent.ROS_SetMoveSpeed
// 0x0004 (0x0004 - 0x0000)
struct AJBInGameMovementComponent_ROS_SetMoveSpeed final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameMovementComponent_ROS_SetMoveSpeed) == 0x000004, "Wrong alignment on AJBInGameMovementComponent_ROS_SetMoveSpeed");
static_assert(sizeof(AJBInGameMovementComponent_ROS_SetMoveSpeed) == 0x000004, "Wrong size on AJBInGameMovementComponent_ROS_SetMoveSpeed");
static_assert(offsetof(AJBInGameMovementComponent_ROS_SetMoveSpeed, Speed) == 0x000000, "Member 'AJBInGameMovementComponent_ROS_SetMoveSpeed::Speed' has a wrong offset!");

// Function AJB.AJBInGameMovementComponent.ROS_SetRotation
// 0x000C (0x000C - 0x0000)
struct AJBInGameMovementComponent_ROS_SetRotation final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameMovementComponent_ROS_SetRotation) == 0x000004, "Wrong alignment on AJBInGameMovementComponent_ROS_SetRotation");
static_assert(sizeof(AJBInGameMovementComponent_ROS_SetRotation) == 0x00000C, "Wrong size on AJBInGameMovementComponent_ROS_SetRotation");
static_assert(offsetof(AJBInGameMovementComponent_ROS_SetRotation, Rotation) == 0x000000, "Member 'AJBInGameMovementComponent_ROS_SetRotation::Rotation' has a wrong offset!");

// Function AJB.AJBInGameMovementComponent.ROS_SetVelocity
// 0x000C (0x000C - 0x0000)
struct AJBInGameMovementComponent_ROS_SetVelocity final
{
public:
	struct FVector                                Velocity;                                          // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameMovementComponent_ROS_SetVelocity) == 0x000004, "Wrong alignment on AJBInGameMovementComponent_ROS_SetVelocity");
static_assert(sizeof(AJBInGameMovementComponent_ROS_SetVelocity) == 0x00000C, "Wrong size on AJBInGameMovementComponent_ROS_SetVelocity");
static_assert(offsetof(AJBInGameMovementComponent_ROS_SetVelocity, Velocity) == 0x000000, "Member 'AJBInGameMovementComponent_ROS_SetVelocity::Velocity' has a wrong offset!");

// Function AJB.AJBInGameMovementComponent.SetInterpSceneComponent
// 0x0008 (0x0008 - 0x0000)
struct AJBInGameMovementComponent_SetInterpSceneComponent final
{
public:
	class USceneComponent*                        SceneComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameMovementComponent_SetInterpSceneComponent) == 0x000008, "Wrong alignment on AJBInGameMovementComponent_SetInterpSceneComponent");
static_assert(sizeof(AJBInGameMovementComponent_SetInterpSceneComponent) == 0x000008, "Wrong size on AJBInGameMovementComponent_SetInterpSceneComponent");
static_assert(offsetof(AJBInGameMovementComponent_SetInterpSceneComponent, SceneComponent) == 0x000000, "Member 'AJBInGameMovementComponent_SetInterpSceneComponent::SceneComponent' has a wrong offset!");

// Function AJB.AJBInGameMovementComponent.SetLocation
// 0x000C (0x000C - 0x0000)
struct AJBInGameMovementComponent_SetLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameMovementComponent_SetLocation) == 0x000004, "Wrong alignment on AJBInGameMovementComponent_SetLocation");
static_assert(sizeof(AJBInGameMovementComponent_SetLocation) == 0x00000C, "Wrong size on AJBInGameMovementComponent_SetLocation");
static_assert(offsetof(AJBInGameMovementComponent_SetLocation, Location) == 0x000000, "Member 'AJBInGameMovementComponent_SetLocation::Location' has a wrong offset!");

// Function AJB.AJBInGameMovementComponent.SetLocationReliable
// 0x000C (0x000C - 0x0000)
struct AJBInGameMovementComponent_SetLocationReliable final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameMovementComponent_SetLocationReliable) == 0x000004, "Wrong alignment on AJBInGameMovementComponent_SetLocationReliable");
static_assert(sizeof(AJBInGameMovementComponent_SetLocationReliable) == 0x00000C, "Wrong size on AJBInGameMovementComponent_SetLocationReliable");
static_assert(offsetof(AJBInGameMovementComponent_SetLocationReliable, Location) == 0x000000, "Member 'AJBInGameMovementComponent_SetLocationReliable::Location' has a wrong offset!");

// Function AJB.AJBInGameMovementComponent.SetMoveSpeed
// 0x0004 (0x0004 - 0x0000)
struct AJBInGameMovementComponent_SetMoveSpeed final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameMovementComponent_SetMoveSpeed) == 0x000004, "Wrong alignment on AJBInGameMovementComponent_SetMoveSpeed");
static_assert(sizeof(AJBInGameMovementComponent_SetMoveSpeed) == 0x000004, "Wrong size on AJBInGameMovementComponent_SetMoveSpeed");
static_assert(offsetof(AJBInGameMovementComponent_SetMoveSpeed, Speed) == 0x000000, "Member 'AJBInGameMovementComponent_SetMoveSpeed::Speed' has a wrong offset!");

// Function AJB.AJBInGameMovementComponent.SetRotation
// 0x000C (0x000C - 0x0000)
struct AJBInGameMovementComponent_SetRotation final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameMovementComponent_SetRotation) == 0x000004, "Wrong alignment on AJBInGameMovementComponent_SetRotation");
static_assert(sizeof(AJBInGameMovementComponent_SetRotation) == 0x00000C, "Wrong size on AJBInGameMovementComponent_SetRotation");
static_assert(offsetof(AJBInGameMovementComponent_SetRotation, Rotation) == 0x000000, "Member 'AJBInGameMovementComponent_SetRotation::Rotation' has a wrong offset!");

// Function AJB.AJBInGameGameState.GetElapsedInGameTimespan
// 0x0008 (0x0008 - 0x0000)
struct AJBInGameGameState_GetElapsedInGameTimespan final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameGameState_GetElapsedInGameTimespan) == 0x000008, "Wrong alignment on AJBInGameGameState_GetElapsedInGameTimespan");
static_assert(sizeof(AJBInGameGameState_GetElapsedInGameTimespan) == 0x000008, "Wrong size on AJBInGameGameState_GetElapsedInGameTimespan");
static_assert(offsetof(AJBInGameGameState_GetElapsedInGameTimespan, ReturnValue) == 0x000000, "Member 'AJBInGameGameState_GetElapsedInGameTimespan::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameGameState.GetLoadingLevelCount
// 0x0004 (0x0004 - 0x0000)
struct AJBInGameGameState_GetLoadingLevelCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameGameState_GetLoadingLevelCount) == 0x000004, "Wrong alignment on AJBInGameGameState_GetLoadingLevelCount");
static_assert(sizeof(AJBInGameGameState_GetLoadingLevelCount) == 0x000004, "Wrong size on AJBInGameGameState_GetLoadingLevelCount");
static_assert(offsetof(AJBInGameGameState_GetLoadingLevelCount, ReturnValue) == 0x000000, "Member 'AJBInGameGameState_GetLoadingLevelCount::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameGameState.IsLoadedStageLevels
// 0x0001 (0x0001 - 0x0000)
struct AJBInGameGameState_IsLoadedStageLevels final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameGameState_IsLoadedStageLevels) == 0x000001, "Wrong alignment on AJBInGameGameState_IsLoadedStageLevels");
static_assert(sizeof(AJBInGameGameState_IsLoadedStageLevels) == 0x000001, "Wrong size on AJBInGameGameState_IsLoadedStageLevels");
static_assert(offsetof(AJBInGameGameState_IsLoadedStageLevels, ReturnValue) == 0x000000, "Member 'AJBInGameGameState_IsLoadedStageLevels::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameGameState.SetLoadingLevelCount
// 0x0004 (0x0004 - 0x0000)
struct AJBInGameGameState_SetLoadingLevelCount final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameGameState_SetLoadingLevelCount) == 0x000004, "Wrong alignment on AJBInGameGameState_SetLoadingLevelCount");
static_assert(sizeof(AJBInGameGameState_SetLoadingLevelCount) == 0x000004, "Wrong size on AJBInGameGameState_SetLoadingLevelCount");
static_assert(offsetof(AJBInGameGameState_SetLoadingLevelCount, Count) == 0x000000, "Member 'AJBInGameGameState_SetLoadingLevelCount::Count' has a wrong offset!");

// Function AJB.AJBBTNodeFunctionLibrary.HasObjectValue
// 0x0038 (0x0038 - 0x0000)
struct AJBBTNodeFunctionLibrary_HasObjectValue final
{
public:
	class UBTNode*                                NodeOwner;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                 Key;                                               // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBBTNodeFunctionLibrary_HasObjectValue) == 0x000008, "Wrong alignment on AJBBTNodeFunctionLibrary_HasObjectValue");
static_assert(sizeof(AJBBTNodeFunctionLibrary_HasObjectValue) == 0x000038, "Wrong size on AJBBTNodeFunctionLibrary_HasObjectValue");
static_assert(offsetof(AJBBTNodeFunctionLibrary_HasObjectValue, NodeOwner) == 0x000000, "Member 'AJBBTNodeFunctionLibrary_HasObjectValue::NodeOwner' has a wrong offset!");
static_assert(offsetof(AJBBTNodeFunctionLibrary_HasObjectValue, Key) == 0x000008, "Member 'AJBBTNodeFunctionLibrary_HasObjectValue::Key' has a wrong offset!");
static_assert(offsetof(AJBBTNodeFunctionLibrary_HasObjectValue, ReturnValue) == 0x000030, "Member 'AJBBTNodeFunctionLibrary_HasObjectValue::ReturnValue' has a wrong offset!");

// Function AJB.AJBBTNodeFunctionLibrary.IsValidVectorValue
// 0x0038 (0x0038 - 0x0000)
struct AJBBTNodeFunctionLibrary_IsValidVectorValue final
{
public:
	class UBTNode*                                NodeOwner;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                 Key;                                               // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBBTNodeFunctionLibrary_IsValidVectorValue) == 0x000008, "Wrong alignment on AJBBTNodeFunctionLibrary_IsValidVectorValue");
static_assert(sizeof(AJBBTNodeFunctionLibrary_IsValidVectorValue) == 0x000038, "Wrong size on AJBBTNodeFunctionLibrary_IsValidVectorValue");
static_assert(offsetof(AJBBTNodeFunctionLibrary_IsValidVectorValue, NodeOwner) == 0x000000, "Member 'AJBBTNodeFunctionLibrary_IsValidVectorValue::NodeOwner' has a wrong offset!");
static_assert(offsetof(AJBBTNodeFunctionLibrary_IsValidVectorValue, Key) == 0x000008, "Member 'AJBBTNodeFunctionLibrary_IsValidVectorValue::Key' has a wrong offset!");
static_assert(offsetof(AJBBTNodeFunctionLibrary_IsValidVectorValue, ReturnValue) == 0x000030, "Member 'AJBBTNodeFunctionLibrary_IsValidVectorValue::ReturnValue' has a wrong offset!");

// Function AJB.AJBButton.IsPressableButton
// 0x0001 (0x0001 - 0x0000)
struct AJBButton_IsPressableButton final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBButton_IsPressableButton) == 0x000001, "Wrong alignment on AJBButton_IsPressableButton");
static_assert(sizeof(AJBButton_IsPressableButton) == 0x000001, "Wrong size on AJBButton_IsPressableButton");
static_assert(offsetof(AJBButton_IsPressableButton, ReturnValue) == 0x000000, "Member 'AJBButton_IsPressableButton::ReturnValue' has a wrong offset!");

// Function AJB.AJBUserWidget.ResetAnimation
// 0x0010 (0x0010 - 0x0000)
struct AJBUserWidget_ResetAnimation final
{
public:
	class UWidgetAnimation*                       InAnimation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAtTime;                                       // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSequencePlayMode                          PlayMode;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBUserWidget_ResetAnimation) == 0x000008, "Wrong alignment on AJBUserWidget_ResetAnimation");
static_assert(sizeof(AJBUserWidget_ResetAnimation) == 0x000010, "Wrong size on AJBUserWidget_ResetAnimation");
static_assert(offsetof(AJBUserWidget_ResetAnimation, InAnimation) == 0x000000, "Member 'AJBUserWidget_ResetAnimation::InAnimation' has a wrong offset!");
static_assert(offsetof(AJBUserWidget_ResetAnimation, StartAtTime) == 0x000008, "Member 'AJBUserWidget_ResetAnimation::StartAtTime' has a wrong offset!");
static_assert(offsetof(AJBUserWidget_ResetAnimation, PlayMode) == 0x00000C, "Member 'AJBUserWidget_ResetAnimation::PlayMode' has a wrong offset!");

// Function AJB.AJBButtonWidget.CurveAnimationFinishDelegate
// 0x0020 (0x0020 - 0x0000)
struct AJBButtonWidget_CurveAnimationFinishDelegate final
{
public:
	TDelegate<void()>                             Delegate;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class UWidget*                                AnimWidget;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimSequence;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBButtonWidget_CurveAnimationFinishDelegate) == 0x000008, "Wrong alignment on AJBButtonWidget_CurveAnimationFinishDelegate");
static_assert(sizeof(AJBButtonWidget_CurveAnimationFinishDelegate) == 0x000020, "Wrong size on AJBButtonWidget_CurveAnimationFinishDelegate");
static_assert(offsetof(AJBButtonWidget_CurveAnimationFinishDelegate, Delegate) == 0x000000, "Member 'AJBButtonWidget_CurveAnimationFinishDelegate::Delegate' has a wrong offset!");
static_assert(offsetof(AJBButtonWidget_CurveAnimationFinishDelegate, AnimWidget) == 0x000010, "Member 'AJBButtonWidget_CurveAnimationFinishDelegate::AnimWidget' has a wrong offset!");
static_assert(offsetof(AJBButtonWidget_CurveAnimationFinishDelegate, AnimSequence) == 0x000018, "Member 'AJBButtonWidget_CurveAnimationFinishDelegate::AnimSequence' has a wrong offset!");

// Function AJB.AJBButtonWidget.GetButton
// 0x0008 (0x0008 - 0x0000)
struct AJBButtonWidget_GetButton final
{
public:
	class UAJBButton*                             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBButtonWidget_GetButton) == 0x000008, "Wrong alignment on AJBButtonWidget_GetButton");
static_assert(sizeof(AJBButtonWidget_GetButton) == 0x000008, "Wrong size on AJBButtonWidget_GetButton");
static_assert(offsetof(AJBButtonWidget_GetButton, ReturnValue) == 0x000000, "Member 'AJBButtonWidget_GetButton::ReturnValue' has a wrong offset!");

// Function AJB.AJBButtonWidget.GetTextBlock
// 0x0008 (0x0008 - 0x0000)
struct AJBButtonWidget_GetTextBlock final
{
public:
	class UAJBTextBlock*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBButtonWidget_GetTextBlock) == 0x000008, "Wrong alignment on AJBButtonWidget_GetTextBlock");
static_assert(sizeof(AJBButtonWidget_GetTextBlock) == 0x000008, "Wrong size on AJBButtonWidget_GetTextBlock");
static_assert(offsetof(AJBButtonWidget_GetTextBlock, ReturnValue) == 0x000000, "Member 'AJBButtonWidget_GetTextBlock::ReturnValue' has a wrong offset!");

// Function AJB.AJBButtonWidget.IsButtonPressed
// 0x0001 (0x0001 - 0x0000)
struct AJBButtonWidget_IsButtonPressed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBButtonWidget_IsButtonPressed) == 0x000001, "Wrong alignment on AJBButtonWidget_IsButtonPressed");
static_assert(sizeof(AJBButtonWidget_IsButtonPressed) == 0x000001, "Wrong size on AJBButtonWidget_IsButtonPressed");
static_assert(offsetof(AJBButtonWidget_IsButtonPressed, ReturnValue) == 0x000000, "Member 'AJBButtonWidget_IsButtonPressed::ReturnValue' has a wrong offset!");

// Function AJB.AJBButtonWidget.IsPlayingCurveAnimation
// 0x0010 (0x0010 - 0x0000)
struct AJBButtonWidget_IsPlayingCurveAnimation final
{
public:
	class UWidget*                                AnimWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimSequence;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBButtonWidget_IsPlayingCurveAnimation) == 0x000008, "Wrong alignment on AJBButtonWidget_IsPlayingCurveAnimation");
static_assert(sizeof(AJBButtonWidget_IsPlayingCurveAnimation) == 0x000010, "Wrong size on AJBButtonWidget_IsPlayingCurveAnimation");
static_assert(offsetof(AJBButtonWidget_IsPlayingCurveAnimation, AnimWidget) == 0x000000, "Member 'AJBButtonWidget_IsPlayingCurveAnimation::AnimWidget' has a wrong offset!");
static_assert(offsetof(AJBButtonWidget_IsPlayingCurveAnimation, AnimSequence) == 0x000008, "Member 'AJBButtonWidget_IsPlayingCurveAnimation::AnimSequence' has a wrong offset!");
static_assert(offsetof(AJBButtonWidget_IsPlayingCurveAnimation, ReturnValue) == 0x00000C, "Member 'AJBButtonWidget_IsPlayingCurveAnimation::ReturnValue' has a wrong offset!");

// Function AJB.AJBButtonWidget.PlayCurveAnimation
// 0x0018 (0x0018 - 0x0000)
struct AJBButtonWidget_PlayCurveAnimation final
{
public:
	class UWidget*                                AnimWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimSequence;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayingCheck;                                     // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSequencePlayMode                          PlayMode;                                          // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoopToPlay;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBButtonWidget_PlayCurveAnimation) == 0x000008, "Wrong alignment on AJBButtonWidget_PlayCurveAnimation");
static_assert(sizeof(AJBButtonWidget_PlayCurveAnimation) == 0x000018, "Wrong size on AJBButtonWidget_PlayCurveAnimation");
static_assert(offsetof(AJBButtonWidget_PlayCurveAnimation, AnimWidget) == 0x000000, "Member 'AJBButtonWidget_PlayCurveAnimation::AnimWidget' has a wrong offset!");
static_assert(offsetof(AJBButtonWidget_PlayCurveAnimation, AnimSequence) == 0x000008, "Member 'AJBButtonWidget_PlayCurveAnimation::AnimSequence' has a wrong offset!");
static_assert(offsetof(AJBButtonWidget_PlayCurveAnimation, bPlayingCheck) == 0x00000C, "Member 'AJBButtonWidget_PlayCurveAnimation::bPlayingCheck' has a wrong offset!");
static_assert(offsetof(AJBButtonWidget_PlayCurveAnimation, PlayMode) == 0x00000D, "Member 'AJBButtonWidget_PlayCurveAnimation::PlayMode' has a wrong offset!");
static_assert(offsetof(AJBButtonWidget_PlayCurveAnimation, NumLoopToPlay) == 0x000010, "Member 'AJBButtonWidget_PlayCurveAnimation::NumLoopToPlay' has a wrong offset!");

// Function AJB.AJBButtonWidget.RegisterCurve_Angle
// 0x0018 (0x0018 - 0x0000)
struct AJBButtonWidget_RegisterCurve_Angle final
{
public:
	class UWidget*                                AnimWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            Curve;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimSequence;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBButtonWidget_RegisterCurve_Angle) == 0x000008, "Wrong alignment on AJBButtonWidget_RegisterCurve_Angle");
static_assert(sizeof(AJBButtonWidget_RegisterCurve_Angle) == 0x000018, "Wrong size on AJBButtonWidget_RegisterCurve_Angle");
static_assert(offsetof(AJBButtonWidget_RegisterCurve_Angle, AnimWidget) == 0x000000, "Member 'AJBButtonWidget_RegisterCurve_Angle::AnimWidget' has a wrong offset!");
static_assert(offsetof(AJBButtonWidget_RegisterCurve_Angle, Curve) == 0x000008, "Member 'AJBButtonWidget_RegisterCurve_Angle::Curve' has a wrong offset!");
static_assert(offsetof(AJBButtonWidget_RegisterCurve_Angle, AnimSequence) == 0x000010, "Member 'AJBButtonWidget_RegisterCurve_Angle::AnimSequence' has a wrong offset!");

// Function AJB.AJBButtonWidget.RegisterCurve_Scale
// 0x0018 (0x0018 - 0x0000)
struct AJBButtonWidget_RegisterCurve_Scale final
{
public:
	class UWidget*                                AnimWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveBase*                             Curve;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimSequence;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBButtonWidget_RegisterCurve_Scale) == 0x000008, "Wrong alignment on AJBButtonWidget_RegisterCurve_Scale");
static_assert(sizeof(AJBButtonWidget_RegisterCurve_Scale) == 0x000018, "Wrong size on AJBButtonWidget_RegisterCurve_Scale");
static_assert(offsetof(AJBButtonWidget_RegisterCurve_Scale, AnimWidget) == 0x000000, "Member 'AJBButtonWidget_RegisterCurve_Scale::AnimWidget' has a wrong offset!");
static_assert(offsetof(AJBButtonWidget_RegisterCurve_Scale, Curve) == 0x000008, "Member 'AJBButtonWidget_RegisterCurve_Scale::Curve' has a wrong offset!");
static_assert(offsetof(AJBButtonWidget_RegisterCurve_Scale, AnimSequence) == 0x000010, "Member 'AJBButtonWidget_RegisterCurve_Scale::AnimSequence' has a wrong offset!");

// Function AJB.AJBButtonWidget.RegisterCurve_Trans
// 0x0018 (0x0018 - 0x0000)
struct AJBButtonWidget_RegisterCurve_Trans final
{
public:
	class UWidget*                                AnimWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           CurveVector;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimSequence;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBButtonWidget_RegisterCurve_Trans) == 0x000008, "Wrong alignment on AJBButtonWidget_RegisterCurve_Trans");
static_assert(sizeof(AJBButtonWidget_RegisterCurve_Trans) == 0x000018, "Wrong size on AJBButtonWidget_RegisterCurve_Trans");
static_assert(offsetof(AJBButtonWidget_RegisterCurve_Trans, AnimWidget) == 0x000000, "Member 'AJBButtonWidget_RegisterCurve_Trans::AnimWidget' has a wrong offset!");
static_assert(offsetof(AJBButtonWidget_RegisterCurve_Trans, CurveVector) == 0x000008, "Member 'AJBButtonWidget_RegisterCurve_Trans::CurveVector' has a wrong offset!");
static_assert(offsetof(AJBButtonWidget_RegisterCurve_Trans, AnimSequence) == 0x000010, "Member 'AJBButtonWidget_RegisterCurve_Trans::AnimSequence' has a wrong offset!");

// Function AJB.AJBButtonWidget.RegisterCurve_TransX
// 0x0018 (0x0018 - 0x0000)
struct AJBButtonWidget_RegisterCurve_TransX final
{
public:
	class UWidget*                                AnimWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            Curve;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimSequence;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBButtonWidget_RegisterCurve_TransX) == 0x000008, "Wrong alignment on AJBButtonWidget_RegisterCurve_TransX");
static_assert(sizeof(AJBButtonWidget_RegisterCurve_TransX) == 0x000018, "Wrong size on AJBButtonWidget_RegisterCurve_TransX");
static_assert(offsetof(AJBButtonWidget_RegisterCurve_TransX, AnimWidget) == 0x000000, "Member 'AJBButtonWidget_RegisterCurve_TransX::AnimWidget' has a wrong offset!");
static_assert(offsetof(AJBButtonWidget_RegisterCurve_TransX, Curve) == 0x000008, "Member 'AJBButtonWidget_RegisterCurve_TransX::Curve' has a wrong offset!");
static_assert(offsetof(AJBButtonWidget_RegisterCurve_TransX, AnimSequence) == 0x000010, "Member 'AJBButtonWidget_RegisterCurve_TransX::AnimSequence' has a wrong offset!");

// Function AJB.AJBButtonWidget.RegisterCurve_TransY
// 0x0018 (0x0018 - 0x0000)
struct AJBButtonWidget_RegisterCurve_TransY final
{
public:
	class UWidget*                                AnimWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            Curve;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimSequence;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBButtonWidget_RegisterCurve_TransY) == 0x000008, "Wrong alignment on AJBButtonWidget_RegisterCurve_TransY");
static_assert(sizeof(AJBButtonWidget_RegisterCurve_TransY) == 0x000018, "Wrong size on AJBButtonWidget_RegisterCurve_TransY");
static_assert(offsetof(AJBButtonWidget_RegisterCurve_TransY, AnimWidget) == 0x000000, "Member 'AJBButtonWidget_RegisterCurve_TransY::AnimWidget' has a wrong offset!");
static_assert(offsetof(AJBButtonWidget_RegisterCurve_TransY, Curve) == 0x000008, "Member 'AJBButtonWidget_RegisterCurve_TransY::Curve' has a wrong offset!");
static_assert(offsetof(AJBButtonWidget_RegisterCurve_TransY, AnimSequence) == 0x000010, "Member 'AJBButtonWidget_RegisterCurve_TransY::AnimSequence' has a wrong offset!");

// Function AJB.AJBButtonWidget.StopCurveAnimation
// 0x0010 (0x0010 - 0x0000)
struct AJBButtonWidget_StopCurveAnimation final
{
public:
	class UWidget*                                AnimWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimSequence;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBButtonWidget_StopCurveAnimation) == 0x000008, "Wrong alignment on AJBButtonWidget_StopCurveAnimation");
static_assert(sizeof(AJBButtonWidget_StopCurveAnimation) == 0x000010, "Wrong size on AJBButtonWidget_StopCurveAnimation");
static_assert(offsetof(AJBButtonWidget_StopCurveAnimation, AnimWidget) == 0x000000, "Member 'AJBButtonWidget_StopCurveAnimation::AnimWidget' has a wrong offset!");
static_assert(offsetof(AJBButtonWidget_StopCurveAnimation, AnimSequence) == 0x000008, "Member 'AJBButtonWidget_StopCurveAnimation::AnimSequence' has a wrong offset!");

// Function AJB.AJBButtonWidget.UpdateButtonText
// 0x0018 (0x0018 - 0x0000)
struct AJBButtonWidget_UpdateButtonText final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBButtonWidget_UpdateButtonText) == 0x000008, "Wrong alignment on AJBButtonWidget_UpdateButtonText");
static_assert(sizeof(AJBButtonWidget_UpdateButtonText) == 0x000018, "Wrong size on AJBButtonWidget_UpdateButtonText");
static_assert(offsetof(AJBButtonWidget_UpdateButtonText, NewText) == 0x000000, "Member 'AJBButtonWidget_UpdateButtonText::NewText' has a wrong offset!");

// Function AJB.AJBCharaSelectMannequin.IsFinishedMannequinTextureStreaming
// 0x0001 (0x0001 - 0x0000)
struct AJBCharaSelectMannequin_IsFinishedMannequinTextureStreaming final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBCharaSelectMannequin_IsFinishedMannequinTextureStreaming) == 0x000001, "Wrong alignment on AJBCharaSelectMannequin_IsFinishedMannequinTextureStreaming");
static_assert(sizeof(AJBCharaSelectMannequin_IsFinishedMannequinTextureStreaming) == 0x000001, "Wrong size on AJBCharaSelectMannequin_IsFinishedMannequinTextureStreaming");
static_assert(offsetof(AJBCharaSelectMannequin_IsFinishedMannequinTextureStreaming, ReturnValue) == 0x000000, "Member 'AJBCharaSelectMannequin_IsFinishedMannequinTextureStreaming::ReturnValue' has a wrong offset!");

// Function AJB.AJBCheatManager.CallActorProcessEvent
// 0x0010 (0x0010 - 0x0000)
struct AJBCheatManager_CallActorProcessEvent final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TagName;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBCheatManager_CallActorProcessEvent) == 0x000004, "Wrong alignment on AJBCheatManager_CallActorProcessEvent");
static_assert(sizeof(AJBCheatManager_CallActorProcessEvent) == 0x000010, "Wrong size on AJBCheatManager_CallActorProcessEvent");
static_assert(offsetof(AJBCheatManager_CallActorProcessEvent, EventName) == 0x000000, "Member 'AJBCheatManager_CallActorProcessEvent::EventName' has a wrong offset!");
static_assert(offsetof(AJBCheatManager_CallActorProcessEvent, TagName) == 0x000008, "Member 'AJBCheatManager_CallActorProcessEvent::TagName' has a wrong offset!");

// Function AJB.AJBCheckRewardLottery.CheckRewardLottery
// 0x0010 (0x0010 - 0x0000)
struct AJBCheckRewardLottery_CheckRewardLottery final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAJBCheckRewardLottery*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBCheckRewardLottery_CheckRewardLottery) == 0x000008, "Wrong alignment on AJBCheckRewardLottery_CheckRewardLottery");
static_assert(sizeof(AJBCheckRewardLottery_CheckRewardLottery) == 0x000010, "Wrong size on AJBCheckRewardLottery_CheckRewardLottery");
static_assert(offsetof(AJBCheckRewardLottery_CheckRewardLottery, WorldContextObject) == 0x000000, "Member 'AJBCheckRewardLottery_CheckRewardLottery::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBCheckRewardLottery_CheckRewardLottery, ReturnValue) == 0x000008, "Member 'AJBCheckRewardLottery_CheckRewardLottery::ReturnValue' has a wrong offset!");

// Function AJB.AJBCheckRewardLottery.RemoveRewardLottery
// 0x0008 (0x0008 - 0x0000)
struct AJBCheckRewardLottery_RemoveRewardLottery final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBCheckRewardLottery_RemoveRewardLottery) == 0x000008, "Wrong alignment on AJBCheckRewardLottery_RemoveRewardLottery");
static_assert(sizeof(AJBCheckRewardLottery_RemoveRewardLottery) == 0x000008, "Wrong size on AJBCheckRewardLottery_RemoveRewardLottery");
static_assert(offsetof(AJBCheckRewardLottery_RemoveRewardLottery, WorldContextObject) == 0x000000, "Member 'AJBCheckRewardLottery_RemoveRewardLottery::WorldContextObject' has a wrong offset!");

// DelegateFunction AJB.AJBCheckRewardLottery.AJBResponse__DelegateSignature
// 0x0028 (0x0028 - 0x0000)
struct AJBCheckRewardLottery_AJBResponse__DelegateSignature final
{
public:
	bool                                          bIsSuccess;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAJBGachaID                            GachaID;                                           // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBCheckRewardLottery_AJBResponse__DelegateSignature) == 0x000008, "Wrong alignment on AJBCheckRewardLottery_AJBResponse__DelegateSignature");
static_assert(sizeof(AJBCheckRewardLottery_AJBResponse__DelegateSignature) == 0x000028, "Wrong size on AJBCheckRewardLottery_AJBResponse__DelegateSignature");
static_assert(offsetof(AJBCheckRewardLottery_AJBResponse__DelegateSignature, bIsSuccess) == 0x000000, "Member 'AJBCheckRewardLottery_AJBResponse__DelegateSignature::bIsSuccess' has a wrong offset!");
static_assert(offsetof(AJBCheckRewardLottery_AJBResponse__DelegateSignature, GachaID) == 0x000008, "Member 'AJBCheckRewardLottery_AJBResponse__DelegateSignature::GachaID' has a wrong offset!");

// Function AJB.AJBDataTableFunctionLibrary.GetDataTableRow_WwiseVoiceEventInfo
// 0x0038 (0x0038 - 0x0000)
struct AJBDataTableFunctionLibrary_GetDataTableRow_WwiseVoiceEventInfo final
{
public:
	class UDataTable*                             DataTable;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RowName;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWwiseVoiceEventInfo                   OutRow;                                            // 0x0010(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBDataTableFunctionLibrary_GetDataTableRow_WwiseVoiceEventInfo) == 0x000008, "Wrong alignment on AJBDataTableFunctionLibrary_GetDataTableRow_WwiseVoiceEventInfo");
static_assert(sizeof(AJBDataTableFunctionLibrary_GetDataTableRow_WwiseVoiceEventInfo) == 0x000038, "Wrong size on AJBDataTableFunctionLibrary_GetDataTableRow_WwiseVoiceEventInfo");
static_assert(offsetof(AJBDataTableFunctionLibrary_GetDataTableRow_WwiseVoiceEventInfo, DataTable) == 0x000000, "Member 'AJBDataTableFunctionLibrary_GetDataTableRow_WwiseVoiceEventInfo::DataTable' has a wrong offset!");
static_assert(offsetof(AJBDataTableFunctionLibrary_GetDataTableRow_WwiseVoiceEventInfo, RowName) == 0x000008, "Member 'AJBDataTableFunctionLibrary_GetDataTableRow_WwiseVoiceEventInfo::RowName' has a wrong offset!");
static_assert(offsetof(AJBDataTableFunctionLibrary_GetDataTableRow_WwiseVoiceEventInfo, OutRow) == 0x000010, "Member 'AJBDataTableFunctionLibrary_GetDataTableRow_WwiseVoiceEventInfo::OutRow' has a wrong offset!");
static_assert(offsetof(AJBDataTableFunctionLibrary_GetDataTableRow_WwiseVoiceEventInfo, ReturnValue) == 0x000030, "Member 'AJBDataTableFunctionLibrary_GetDataTableRow_WwiseVoiceEventInfo::ReturnValue' has a wrong offset!");

// Function AJB.AJBPlayerControllerBase.AssignKeyFromDataTable
// 0x0008 (0x0008 - 0x0000)
struct AJBPlayerControllerBase_AssignKeyFromDataTable final
{
public:
	class UDataTable*                             DataTable;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBPlayerControllerBase_AssignKeyFromDataTable) == 0x000008, "Wrong alignment on AJBPlayerControllerBase_AssignKeyFromDataTable");
static_assert(sizeof(AJBPlayerControllerBase_AssignKeyFromDataTable) == 0x000008, "Wrong size on AJBPlayerControllerBase_AssignKeyFromDataTable");
static_assert(offsetof(AJBPlayerControllerBase_AssignKeyFromDataTable, DataTable) == 0x000000, "Member 'AJBPlayerControllerBase_AssignKeyFromDataTable::DataTable' has a wrong offset!");

// Function AJB.AJBPlayerControllerBase.ChangeInputMode
// 0x0001 (0x0001 - 0x0000)
struct AJBPlayerControllerBase_ChangeInputMode final
{
public:
	EAJBInputMode                                 NewMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBPlayerControllerBase_ChangeInputMode) == 0x000001, "Wrong alignment on AJBPlayerControllerBase_ChangeInputMode");
static_assert(sizeof(AJBPlayerControllerBase_ChangeInputMode) == 0x000001, "Wrong size on AJBPlayerControllerBase_ChangeInputMode");
static_assert(offsetof(AJBPlayerControllerBase_ChangeInputMode, NewMode) == 0x000000, "Member 'AJBPlayerControllerBase_ChangeInputMode::NewMode' has a wrong offset!");

// Function AJB.AJBPlayerControllerBase.GetGamePlayKeyFromActionName
// 0x0020 (0x0020 - 0x0000)
struct AJBPlayerControllerBase_GetGamePlayKeyFromActionName final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBPlayerControllerBase_GetGamePlayKeyFromActionName) == 0x000008, "Wrong alignment on AJBPlayerControllerBase_GetGamePlayKeyFromActionName");
static_assert(sizeof(AJBPlayerControllerBase_GetGamePlayKeyFromActionName) == 0x000020, "Wrong size on AJBPlayerControllerBase_GetGamePlayKeyFromActionName");
static_assert(offsetof(AJBPlayerControllerBase_GetGamePlayKeyFromActionName, ActionName) == 0x000000, "Member 'AJBPlayerControllerBase_GetGamePlayKeyFromActionName::ActionName' has a wrong offset!");
static_assert(offsetof(AJBPlayerControllerBase_GetGamePlayKeyFromActionName, ReturnValue) == 0x000008, "Member 'AJBPlayerControllerBase_GetGamePlayKeyFromActionName::ReturnValue' has a wrong offset!");

// Function AJB.AJBPlayerControllerBase.IsDisabledInputMode
// 0x0001 (0x0001 - 0x0000)
struct AJBPlayerControllerBase_IsDisabledInputMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBPlayerControllerBase_IsDisabledInputMode) == 0x000001, "Wrong alignment on AJBPlayerControllerBase_IsDisabledInputMode");
static_assert(sizeof(AJBPlayerControllerBase_IsDisabledInputMode) == 0x000001, "Wrong size on AJBPlayerControllerBase_IsDisabledInputMode");
static_assert(offsetof(AJBPlayerControllerBase_IsDisabledInputMode, ReturnValue) == 0x000000, "Member 'AJBPlayerControllerBase_IsDisabledInputMode::ReturnValue' has a wrong offset!");

// Function AJB.AJBPlayerControllerBase.IsInputModeInGameOnly
// 0x0001 (0x0001 - 0x0000)
struct AJBPlayerControllerBase_IsInputModeInGameOnly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBPlayerControllerBase_IsInputModeInGameOnly) == 0x000001, "Wrong alignment on AJBPlayerControllerBase_IsInputModeInGameOnly");
static_assert(sizeof(AJBPlayerControllerBase_IsInputModeInGameOnly) == 0x000001, "Wrong size on AJBPlayerControllerBase_IsInputModeInGameOnly");
static_assert(offsetof(AJBPlayerControllerBase_IsInputModeInGameOnly, ReturnValue) == 0x000000, "Member 'AJBPlayerControllerBase_IsInputModeInGameOnly::ReturnValue' has a wrong offset!");

// Function AJB.AJBPlayerControllerBase.IsInputModeUIOnly
// 0x0001 (0x0001 - 0x0000)
struct AJBPlayerControllerBase_IsInputModeUIOnly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBPlayerControllerBase_IsInputModeUIOnly) == 0x000001, "Wrong alignment on AJBPlayerControllerBase_IsInputModeUIOnly");
static_assert(sizeof(AJBPlayerControllerBase_IsInputModeUIOnly) == 0x000001, "Wrong size on AJBPlayerControllerBase_IsInputModeUIOnly");
static_assert(offsetof(AJBPlayerControllerBase_IsInputModeUIOnly, ReturnValue) == 0x000000, "Member 'AJBPlayerControllerBase_IsInputModeUIOnly::ReturnValue' has a wrong offset!");

// Function AJB.AJBPlayerControllerBase.RunOnServerCmd
// 0x0010 (0x0010 - 0x0000)
struct AJBPlayerControllerBase_RunOnServerCmd final
{
public:
	class FString                                 Cmd;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBPlayerControllerBase_RunOnServerCmd) == 0x000008, "Wrong alignment on AJBPlayerControllerBase_RunOnServerCmd");
static_assert(sizeof(AJBPlayerControllerBase_RunOnServerCmd) == 0x000010, "Wrong size on AJBPlayerControllerBase_RunOnServerCmd");
static_assert(offsetof(AJBPlayerControllerBase_RunOnServerCmd, Cmd) == 0x000000, "Member 'AJBPlayerControllerBase_RunOnServerCmd::Cmd' has a wrong offset!");

// Function AJB.AJBPlayerControllerBase.ServerCmd
// 0x0010 (0x0010 - 0x0000)
struct AJBPlayerControllerBase_ServerCmd final
{
public:
	class FString                                 Cmd;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBPlayerControllerBase_ServerCmd) == 0x000008, "Wrong alignment on AJBPlayerControllerBase_ServerCmd");
static_assert(sizeof(AJBPlayerControllerBase_ServerCmd) == 0x000010, "Wrong size on AJBPlayerControllerBase_ServerCmd");
static_assert(offsetof(AJBPlayerControllerBase_ServerCmd, Cmd) == 0x000000, "Member 'AJBPlayerControllerBase_ServerCmd::Cmd' has a wrong offset!");

// Function AJB.AJBInGamePlayerController.CallReadyControllCharacterDispatcher
// 0x0010 (0x0010 - 0x0000)
struct AJBInGamePlayerController_CallReadyControllCharacterDispatcher final
{
public:
	class AAJBInGameCharacterBase*                TargetCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBInGamePlayerController_CallReadyControllCharacterDispatcher) == 0x000008, "Wrong alignment on AJBInGamePlayerController_CallReadyControllCharacterDispatcher");
static_assert(sizeof(AJBInGamePlayerController_CallReadyControllCharacterDispatcher) == 0x000010, "Wrong size on AJBInGamePlayerController_CallReadyControllCharacterDispatcher");
static_assert(offsetof(AJBInGamePlayerController_CallReadyControllCharacterDispatcher, TargetCharacter) == 0x000000, "Member 'AJBInGamePlayerController_CallReadyControllCharacterDispatcher::TargetCharacter' has a wrong offset!");
static_assert(offsetof(AJBInGamePlayerController_CallReadyControllCharacterDispatcher, ReturnValue) == 0x000008, "Member 'AJBInGamePlayerController_CallReadyControllCharacterDispatcher::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGamePlayerController.DevOnly_GetL3Pressed
// 0x0001 (0x0001 - 0x0000)
struct AJBInGamePlayerController_DevOnly_GetL3Pressed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGamePlayerController_DevOnly_GetL3Pressed) == 0x000001, "Wrong alignment on AJBInGamePlayerController_DevOnly_GetL3Pressed");
static_assert(sizeof(AJBInGamePlayerController_DevOnly_GetL3Pressed) == 0x000001, "Wrong size on AJBInGamePlayerController_DevOnly_GetL3Pressed");
static_assert(offsetof(AJBInGamePlayerController_DevOnly_GetL3Pressed, ReturnValue) == 0x000000, "Member 'AJBInGamePlayerController_DevOnly_GetL3Pressed::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGamePlayerController.DevOnly_GetLookupRateInputvalue
// 0x0004 (0x0004 - 0x0000)
struct AJBInGamePlayerController_DevOnly_GetLookupRateInputvalue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGamePlayerController_DevOnly_GetLookupRateInputvalue) == 0x000004, "Wrong alignment on AJBInGamePlayerController_DevOnly_GetLookupRateInputvalue");
static_assert(sizeof(AJBInGamePlayerController_DevOnly_GetLookupRateInputvalue) == 0x000004, "Wrong size on AJBInGamePlayerController_DevOnly_GetLookupRateInputvalue");
static_assert(offsetof(AJBInGamePlayerController_DevOnly_GetLookupRateInputvalue, ReturnValue) == 0x000000, "Member 'AJBInGamePlayerController_DevOnly_GetLookupRateInputvalue::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGamePlayerController.DevOnly_GetMoveForwardInputvalue
// 0x0004 (0x0004 - 0x0000)
struct AJBInGamePlayerController_DevOnly_GetMoveForwardInputvalue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGamePlayerController_DevOnly_GetMoveForwardInputvalue) == 0x000004, "Wrong alignment on AJBInGamePlayerController_DevOnly_GetMoveForwardInputvalue");
static_assert(sizeof(AJBInGamePlayerController_DevOnly_GetMoveForwardInputvalue) == 0x000004, "Wrong size on AJBInGamePlayerController_DevOnly_GetMoveForwardInputvalue");
static_assert(offsetof(AJBInGamePlayerController_DevOnly_GetMoveForwardInputvalue, ReturnValue) == 0x000000, "Member 'AJBInGamePlayerController_DevOnly_GetMoveForwardInputvalue::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGamePlayerController.DevOnly_GetMoveRightInputvalue
// 0x0004 (0x0004 - 0x0000)
struct AJBInGamePlayerController_DevOnly_GetMoveRightInputvalue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGamePlayerController_DevOnly_GetMoveRightInputvalue) == 0x000004, "Wrong alignment on AJBInGamePlayerController_DevOnly_GetMoveRightInputvalue");
static_assert(sizeof(AJBInGamePlayerController_DevOnly_GetMoveRightInputvalue) == 0x000004, "Wrong size on AJBInGamePlayerController_DevOnly_GetMoveRightInputvalue");
static_assert(offsetof(AJBInGamePlayerController_DevOnly_GetMoveRightInputvalue, ReturnValue) == 0x000000, "Member 'AJBInGamePlayerController_DevOnly_GetMoveRightInputvalue::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGamePlayerController.DevOnly_GetR3Pressed
// 0x0001 (0x0001 - 0x0000)
struct AJBInGamePlayerController_DevOnly_GetR3Pressed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGamePlayerController_DevOnly_GetR3Pressed) == 0x000001, "Wrong alignment on AJBInGamePlayerController_DevOnly_GetR3Pressed");
static_assert(sizeof(AJBInGamePlayerController_DevOnly_GetR3Pressed) == 0x000001, "Wrong size on AJBInGamePlayerController_DevOnly_GetR3Pressed");
static_assert(offsetof(AJBInGamePlayerController_DevOnly_GetR3Pressed, ReturnValue) == 0x000000, "Member 'AJBInGamePlayerController_DevOnly_GetR3Pressed::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGamePlayerController.DevOnly_GetTurnRateInputvalue
// 0x0004 (0x0004 - 0x0000)
struct AJBInGamePlayerController_DevOnly_GetTurnRateInputvalue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGamePlayerController_DevOnly_GetTurnRateInputvalue) == 0x000004, "Wrong alignment on AJBInGamePlayerController_DevOnly_GetTurnRateInputvalue");
static_assert(sizeof(AJBInGamePlayerController_DevOnly_GetTurnRateInputvalue) == 0x000004, "Wrong size on AJBInGamePlayerController_DevOnly_GetTurnRateInputvalue");
static_assert(offsetof(AJBInGamePlayerController_DevOnly_GetTurnRateInputvalue, ReturnValue) == 0x000000, "Member 'AJBInGamePlayerController_DevOnly_GetTurnRateInputvalue::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGamePlayerController.GetCameraManagerViewPoint
// 0x000C (0x000C - 0x0000)
struct AJBInGamePlayerController_GetCameraManagerViewPoint final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGamePlayerController_GetCameraManagerViewPoint) == 0x000004, "Wrong alignment on AJBInGamePlayerController_GetCameraManagerViewPoint");
static_assert(sizeof(AJBInGamePlayerController_GetCameraManagerViewPoint) == 0x00000C, "Wrong size on AJBInGamePlayerController_GetCameraManagerViewPoint");
static_assert(offsetof(AJBInGamePlayerController_GetCameraManagerViewPoint, Location) == 0x000000, "Member 'AJBInGamePlayerController_GetCameraManagerViewPoint::Location' has a wrong offset!");

// Function AJB.AJBInGamePlayerController.SetAutoManageActiveCameraTarget
// 0x0001 (0x0001 - 0x0000)
struct AJBInGamePlayerController_SetAutoManageActiveCameraTarget final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGamePlayerController_SetAutoManageActiveCameraTarget) == 0x000001, "Wrong alignment on AJBInGamePlayerController_SetAutoManageActiveCameraTarget");
static_assert(sizeof(AJBInGamePlayerController_SetAutoManageActiveCameraTarget) == 0x000001, "Wrong size on AJBInGamePlayerController_SetAutoManageActiveCameraTarget");
static_assert(offsetof(AJBInGamePlayerController_SetAutoManageActiveCameraTarget, bEnable) == 0x000000, "Member 'AJBInGamePlayerController_SetAutoManageActiveCameraTarget::bEnable' has a wrong offset!");

// Function AJB.AJBInGamePlayerController.SetCameraManagerClientSideCameraUpdate
// 0x0001 (0x0001 - 0x0000)
struct AJBInGamePlayerController_SetCameraManagerClientSideCameraUpdate final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGamePlayerController_SetCameraManagerClientSideCameraUpdate) == 0x000001, "Wrong alignment on AJBInGamePlayerController_SetCameraManagerClientSideCameraUpdate");
static_assert(sizeof(AJBInGamePlayerController_SetCameraManagerClientSideCameraUpdate) == 0x000001, "Wrong size on AJBInGamePlayerController_SetCameraManagerClientSideCameraUpdate");
static_assert(offsetof(AJBInGamePlayerController_SetCameraManagerClientSideCameraUpdate, bEnable) == 0x000000, "Member 'AJBInGamePlayerController_SetCameraManagerClientSideCameraUpdate::bEnable' has a wrong offset!");

// Function AJB.AJBInGamePlayerController.GetAutoManageActiveCameraTarget
// 0x0001 (0x0001 - 0x0000)
struct AJBInGamePlayerController_GetAutoManageActiveCameraTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGamePlayerController_GetAutoManageActiveCameraTarget) == 0x000001, "Wrong alignment on AJBInGamePlayerController_GetAutoManageActiveCameraTarget");
static_assert(sizeof(AJBInGamePlayerController_GetAutoManageActiveCameraTarget) == 0x000001, "Wrong size on AJBInGamePlayerController_GetAutoManageActiveCameraTarget");
static_assert(offsetof(AJBInGamePlayerController_GetAutoManageActiveCameraTarget, ReturnValue) == 0x000000, "Member 'AJBInGamePlayerController_GetAutoManageActiveCameraTarget::ReturnValue' has a wrong offset!");

// Function AJB.AJBDemoRecSpectator.DemoNotifyCausedHit
// 0x0038 (0x0038 - 0x0000)
struct AJBDemoRecSpectator_DemoNotifyCausedHit final
{
public:
	class APawn*                                  InstigatorPawn;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AAJBInGameCharacter*                    HitPawn;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AppliedDamage;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Momentum;                                          // 0x0014(0x000C)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDamageEvent                           DamageEvent;                                       // 0x0020(0x0010)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bArmorDamage;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverhealth;                                       // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBDemoRecSpectator_DemoNotifyCausedHit) == 0x000008, "Wrong alignment on AJBDemoRecSpectator_DemoNotifyCausedHit");
static_assert(sizeof(AJBDemoRecSpectator_DemoNotifyCausedHit) == 0x000038, "Wrong size on AJBDemoRecSpectator_DemoNotifyCausedHit");
static_assert(offsetof(AJBDemoRecSpectator_DemoNotifyCausedHit, InstigatorPawn) == 0x000000, "Member 'AJBDemoRecSpectator_DemoNotifyCausedHit::InstigatorPawn' has a wrong offset!");
static_assert(offsetof(AJBDemoRecSpectator_DemoNotifyCausedHit, HitPawn) == 0x000008, "Member 'AJBDemoRecSpectator_DemoNotifyCausedHit::HitPawn' has a wrong offset!");
static_assert(offsetof(AJBDemoRecSpectator_DemoNotifyCausedHit, AppliedDamage) == 0x000010, "Member 'AJBDemoRecSpectator_DemoNotifyCausedHit::AppliedDamage' has a wrong offset!");
static_assert(offsetof(AJBDemoRecSpectator_DemoNotifyCausedHit, Momentum) == 0x000014, "Member 'AJBDemoRecSpectator_DemoNotifyCausedHit::Momentum' has a wrong offset!");
static_assert(offsetof(AJBDemoRecSpectator_DemoNotifyCausedHit, DamageEvent) == 0x000020, "Member 'AJBDemoRecSpectator_DemoNotifyCausedHit::DamageEvent' has a wrong offset!");
static_assert(offsetof(AJBDemoRecSpectator_DemoNotifyCausedHit, bArmorDamage) == 0x000030, "Member 'AJBDemoRecSpectator_DemoNotifyCausedHit::bArmorDamage' has a wrong offset!");
static_assert(offsetof(AJBDemoRecSpectator_DemoNotifyCausedHit, bOverhealth) == 0x000031, "Member 'AJBDemoRecSpectator_DemoNotifyCausedHit::bOverhealth' has a wrong offset!");

// Function AJB.AJBDemoRecSpectator.MulticastReceiveLocalizedMessage
// 0x0028 (0x0028 - 0x0000)
struct AJBDemoRecSpectator_MulticastReceiveLocalizedMessage final
{
public:
	TSubclassOf<class ULocalMessage>              Message;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SWITCH;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           RelatedPlayerState_1;                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           RelatedPlayerState_2;                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OptionalObject;                                    // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBDemoRecSpectator_MulticastReceiveLocalizedMessage) == 0x000008, "Wrong alignment on AJBDemoRecSpectator_MulticastReceiveLocalizedMessage");
static_assert(sizeof(AJBDemoRecSpectator_MulticastReceiveLocalizedMessage) == 0x000028, "Wrong size on AJBDemoRecSpectator_MulticastReceiveLocalizedMessage");
static_assert(offsetof(AJBDemoRecSpectator_MulticastReceiveLocalizedMessage, Message) == 0x000000, "Member 'AJBDemoRecSpectator_MulticastReceiveLocalizedMessage::Message' has a wrong offset!");
static_assert(offsetof(AJBDemoRecSpectator_MulticastReceiveLocalizedMessage, SWITCH) == 0x000008, "Member 'AJBDemoRecSpectator_MulticastReceiveLocalizedMessage::SWITCH' has a wrong offset!");
static_assert(offsetof(AJBDemoRecSpectator_MulticastReceiveLocalizedMessage, RelatedPlayerState_1) == 0x000010, "Member 'AJBDemoRecSpectator_MulticastReceiveLocalizedMessage::RelatedPlayerState_1' has a wrong offset!");
static_assert(offsetof(AJBDemoRecSpectator_MulticastReceiveLocalizedMessage, RelatedPlayerState_2) == 0x000018, "Member 'AJBDemoRecSpectator_MulticastReceiveLocalizedMessage::RelatedPlayerState_2' has a wrong offset!");
static_assert(offsetof(AJBDemoRecSpectator_MulticastReceiveLocalizedMessage, OptionalObject) == 0x000020, "Member 'AJBDemoRecSpectator_MulticastReceiveLocalizedMessage::OptionalObject' has a wrong offset!");

// Function AJB.AJBError.GetErrorEnglish
// 0x0020 (0x0020 - 0x0000)
struct AJBError_GetErrorEnglish final
{
public:
	EAJBErrorID                                   ErrorID;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBError_GetErrorEnglish) == 0x000008, "Wrong alignment on AJBError_GetErrorEnglish");
static_assert(sizeof(AJBError_GetErrorEnglish) == 0x000020, "Wrong size on AJBError_GetErrorEnglish");
static_assert(offsetof(AJBError_GetErrorEnglish, ErrorID) == 0x000000, "Member 'AJBError_GetErrorEnglish::ErrorID' has a wrong offset!");
static_assert(offsetof(AJBError_GetErrorEnglish, ReturnValue) == 0x000008, "Member 'AJBError_GetErrorEnglish::ReturnValue' has a wrong offset!");

// Function AJB.AJBError.GetErrorNo
// 0x0020 (0x0020 - 0x0000)
struct AJBError_GetErrorNo final
{
public:
	EAJBErrorID                                   ErrorID;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBError_GetErrorNo) == 0x000008, "Wrong alignment on AJBError_GetErrorNo");
static_assert(sizeof(AJBError_GetErrorNo) == 0x000020, "Wrong size on AJBError_GetErrorNo");
static_assert(offsetof(AJBError_GetErrorNo, ErrorID) == 0x000000, "Member 'AJBError_GetErrorNo::ErrorID' has a wrong offset!");
static_assert(offsetof(AJBError_GetErrorNo, ReturnValue) == 0x000008, "Member 'AJBError_GetErrorNo::ReturnValue' has a wrong offset!");

// Function AJB.AJBError.GetErrorText
// 0x0020 (0x0020 - 0x0000)
struct AJBError_GetErrorText final
{
public:
	EAJBErrorID                                   ErrorID;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBError_GetErrorText) == 0x000008, "Wrong alignment on AJBError_GetErrorText");
static_assert(sizeof(AJBError_GetErrorText) == 0x000020, "Wrong size on AJBError_GetErrorText");
static_assert(offsetof(AJBError_GetErrorText, ErrorID) == 0x000000, "Member 'AJBError_GetErrorText::ErrorID' has a wrong offset!");
static_assert(offsetof(AJBError_GetErrorText, ReturnValue) == 0x000008, "Member 'AJBError_GetErrorText::ReturnValue' has a wrong offset!");

// Function AJB.AJBError.GetNetAPIErrorText
// 0x0020 (0x0020 - 0x0000)
struct AJBError_GetNetAPIErrorText final
{
public:
	EAJBNetAPIResult                              ErrorID;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBError_GetNetAPIErrorText) == 0x000008, "Wrong alignment on AJBError_GetNetAPIErrorText");
static_assert(sizeof(AJBError_GetNetAPIErrorText) == 0x000020, "Wrong size on AJBError_GetNetAPIErrorText");
static_assert(offsetof(AJBError_GetNetAPIErrorText, ErrorID) == 0x000000, "Member 'AJBError_GetNetAPIErrorText::ErrorID' has a wrong offset!");
static_assert(offsetof(AJBError_GetNetAPIErrorText, ReturnValue) == 0x000008, "Member 'AJBError_GetNetAPIErrorText::ReturnValue' has a wrong offset!");

// Function AJB.AJBErrorHandler.PrintAllPropertyValue
// 0x0008 (0x0008 - 0x0000)
struct AJBErrorHandler_PrintAllPropertyValue final
{
public:
	class UObject*                                Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBErrorHandler_PrintAllPropertyValue) == 0x000008, "Wrong alignment on AJBErrorHandler_PrintAllPropertyValue");
static_assert(sizeof(AJBErrorHandler_PrintAllPropertyValue) == 0x000008, "Wrong size on AJBErrorHandler_PrintAllPropertyValue");
static_assert(offsetof(AJBErrorHandler_PrintAllPropertyValue, Obj) == 0x000000, "Member 'AJBErrorHandler_PrintAllPropertyValue::Obj' has a wrong offset!");

// Function AJB.AJBGameInstance.AddCoinCredit
// 0x0008 (0x0008 - 0x0000)
struct AJBGameInstance_AddCoinCredit final
{
public:
	int32                                         AddCredit;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSaveLastStatus;                                  // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBGameInstance_AddCoinCredit) == 0x000004, "Wrong alignment on AJBGameInstance_AddCoinCredit");
static_assert(sizeof(AJBGameInstance_AddCoinCredit) == 0x000008, "Wrong size on AJBGameInstance_AddCoinCredit");
static_assert(offsetof(AJBGameInstance_AddCoinCredit, AddCredit) == 0x000000, "Member 'AJBGameInstance_AddCoinCredit::AddCredit' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_AddCoinCredit, IsSaveLastStatus) == 0x000004, "Member 'AJBGameInstance_AddCoinCredit::IsSaveLastStatus' has a wrong offset!");

// Function AJB.AJBGameInstance.AddEmoneyCredit
// 0x0008 (0x0008 - 0x0000)
struct AJBGameInstance_AddEmoneyCredit final
{
public:
	int32                                         AddCredit;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSaveLastStatus;                                  // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBGameInstance_AddEmoneyCredit) == 0x000004, "Wrong alignment on AJBGameInstance_AddEmoneyCredit");
static_assert(sizeof(AJBGameInstance_AddEmoneyCredit) == 0x000008, "Wrong size on AJBGameInstance_AddEmoneyCredit");
static_assert(offsetof(AJBGameInstance_AddEmoneyCredit, AddCredit) == 0x000000, "Member 'AJBGameInstance_AddEmoneyCredit::AddCredit' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_AddEmoneyCredit, IsSaveLastStatus) == 0x000004, "Member 'AJBGameInstance_AddEmoneyCredit::IsSaveLastStatus' has a wrong offset!");

// Function AJB.AJBGameInstance.AddPP
// 0x000C (0x000C - 0x0000)
struct AJBGameInstance_AddPP final
{
public:
	int32                                         PayCreditNum;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddPPNum;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBGameInstance_AddPP) == 0x000004, "Wrong alignment on AJBGameInstance_AddPP");
static_assert(sizeof(AJBGameInstance_AddPP) == 0x00000C, "Wrong size on AJBGameInstance_AddPP");
static_assert(offsetof(AJBGameInstance_AddPP, PayCreditNum) == 0x000000, "Member 'AJBGameInstance_AddPP::PayCreditNum' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_AddPP, AddPPNum) == 0x000004, "Member 'AJBGameInstance_AddPP::AddPPNum' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_AddPP, ReturnValue) == 0x000008, "Member 'AJBGameInstance_AddPP::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.AddServiceCredit
// 0x0008 (0x0008 - 0x0000)
struct AJBGameInstance_AddServiceCredit final
{
public:
	int32                                         AddCredit;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSaveLastStatus;                                  // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBGameInstance_AddServiceCredit) == 0x000004, "Wrong alignment on AJBGameInstance_AddServiceCredit");
static_assert(sizeof(AJBGameInstance_AddServiceCredit) == 0x000008, "Wrong size on AJBGameInstance_AddServiceCredit");
static_assert(offsetof(AJBGameInstance_AddServiceCredit, AddCredit) == 0x000000, "Member 'AJBGameInstance_AddServiceCredit::AddCredit' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_AddServiceCredit, IsSaveLastStatus) == 0x000004, "Member 'AJBGameInstance_AddServiceCredit::IsSaveLastStatus' has a wrong offset!");

// Function AJB.AJBGameInstance.CallSaved
// 0x0020 (0x0020 - 0x0000)
struct AJBGameInstance_CallSaved final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Data;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBGameInstance_CallSaved) == 0x000008, "Wrong alignment on AJBGameInstance_CallSaved");
static_assert(sizeof(AJBGameInstance_CallSaved) == 0x000020, "Wrong size on AJBGameInstance_CallSaved");
static_assert(offsetof(AJBGameInstance_CallSaved, Result) == 0x000000, "Member 'AJBGameInstance_CallSaved::Result' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_CallSaved, Data) == 0x000008, "Member 'AJBGameInstance_CallSaved::Data' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_CallSaved, ReturnValue) == 0x000018, "Member 'AJBGameInstance_CallSaved::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.CanBuyAddPP
// 0x0001 (0x0001 - 0x0000)
struct AJBGameInstance_CanBuyAddPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_CanBuyAddPP) == 0x000001, "Wrong alignment on AJBGameInstance_CanBuyAddPP");
static_assert(sizeof(AJBGameInstance_CanBuyAddPP) == 0x000001, "Wrong size on AJBGameInstance_CanBuyAddPP");
static_assert(offsetof(AJBGameInstance_CanBuyAddPP, ReturnValue) == 0x000000, "Member 'AJBGameInstance_CanBuyAddPP::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.CanPayCredit
// 0x0008 (0x0008 - 0x0000)
struct AJBGameInstance_CanPayCredit final
{
public:
	int32                                         Credit;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBGameInstance_CanPayCredit) == 0x000004, "Wrong alignment on AJBGameInstance_CanPayCredit");
static_assert(sizeof(AJBGameInstance_CanPayCredit) == 0x000008, "Wrong size on AJBGameInstance_CanPayCredit");
static_assert(offsetof(AJBGameInstance_CanPayCredit, Credit) == 0x000000, "Member 'AJBGameInstance_CanPayCredit::Credit' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_CanPayCredit, ReturnValue) == 0x000004, "Member 'AJBGameInstance_CanPayCredit::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.CanUploadHighlight
// 0x0001 (0x0001 - 0x0000)
struct AJBGameInstance_CanUploadHighlight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_CanUploadHighlight) == 0x000001, "Wrong alignment on AJBGameInstance_CanUploadHighlight");
static_assert(sizeof(AJBGameInstance_CanUploadHighlight) == 0x000001, "Wrong size on AJBGameInstance_CanUploadHighlight");
static_assert(offsetof(AJBGameInstance_CanUploadHighlight, ReturnValue) == 0x000000, "Member 'AJBGameInstance_CanUploadHighlight::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.CompensationCredit
// 0x0001 (0x0001 - 0x0000)
struct AJBGameInstance_CompensationCredit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_CompensationCredit) == 0x000001, "Wrong alignment on AJBGameInstance_CompensationCredit");
static_assert(sizeof(AJBGameInstance_CompensationCredit) == 0x000001, "Wrong size on AJBGameInstance_CompensationCredit");
static_assert(offsetof(AJBGameInstance_CompensationCredit, ReturnValue) == 0x000000, "Member 'AJBGameInstance_CompensationCredit::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.CompensationPP
// 0x0001 (0x0001 - 0x0000)
struct AJBGameInstance_CompensationPP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_CompensationPP) == 0x000001, "Wrong alignment on AJBGameInstance_CompensationPP");
static_assert(sizeof(AJBGameInstance_CompensationPP) == 0x000001, "Wrong size on AJBGameInstance_CompensationPP");
static_assert(offsetof(AJBGameInstance_CompensationPP, ReturnValue) == 0x000000, "Member 'AJBGameInstance_CompensationPP::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.GetAJBInGameCharacterByPlayerID
// 0x0010 (0x0010 - 0x0000)
struct AJBGameInstance_GetAJBInGameCharacterByPlayerID final
{
public:
	int32                                         PlayerID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacterBase*                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_GetAJBInGameCharacterByPlayerID) == 0x000008, "Wrong alignment on AJBGameInstance_GetAJBInGameCharacterByPlayerID");
static_assert(sizeof(AJBGameInstance_GetAJBInGameCharacterByPlayerID) == 0x000010, "Wrong size on AJBGameInstance_GetAJBInGameCharacterByPlayerID");
static_assert(offsetof(AJBGameInstance_GetAJBInGameCharacterByPlayerID, PlayerID) == 0x000000, "Member 'AJBGameInstance_GetAJBInGameCharacterByPlayerID::PlayerID' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_GetAJBInGameCharacterByPlayerID, ReturnValue) == 0x000008, "Member 'AJBGameInstance_GetAJBInGameCharacterByPlayerID::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.GetBuyPPByPayCreditNum
// 0x0008 (0x0008 - 0x0000)
struct AJBGameInstance_GetBuyPPByPayCreditNum final
{
public:
	int32                                         PayCredit_0;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_GetBuyPPByPayCreditNum) == 0x000004, "Wrong alignment on AJBGameInstance_GetBuyPPByPayCreditNum");
static_assert(sizeof(AJBGameInstance_GetBuyPPByPayCreditNum) == 0x000008, "Wrong size on AJBGameInstance_GetBuyPPByPayCreditNum");
static_assert(offsetof(AJBGameInstance_GetBuyPPByPayCreditNum, PayCredit_0) == 0x000000, "Member 'AJBGameInstance_GetBuyPPByPayCreditNum::PayCredit_0' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_GetBuyPPByPayCreditNum, ReturnValue) == 0x000004, "Member 'AJBGameInstance_GetBuyPPByPayCreditNum::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.GetCharacterSkinId
// 0x0008 (0x0008 - 0x0000)
struct AJBGameInstance_GetCharacterSkinId final
{
public:
	int32                                         CharaID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_GetCharacterSkinId) == 0x000004, "Wrong alignment on AJBGameInstance_GetCharacterSkinId");
static_assert(sizeof(AJBGameInstance_GetCharacterSkinId) == 0x000008, "Wrong size on AJBGameInstance_GetCharacterSkinId");
static_assert(offsetof(AJBGameInstance_GetCharacterSkinId, CharaID) == 0x000000, "Member 'AJBGameInstance_GetCharacterSkinId::CharaID' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_GetCharacterSkinId, ReturnValue) == 0x000004, "Member 'AJBGameInstance_GetCharacterSkinId::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.GetCloseScheduleType
// 0x0001 (0x0001 - 0x0000)
struct AJBGameInstance_GetCloseScheduleType final
{
public:
	ECloseScheduleType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_GetCloseScheduleType) == 0x000001, "Wrong alignment on AJBGameInstance_GetCloseScheduleType");
static_assert(sizeof(AJBGameInstance_GetCloseScheduleType) == 0x000001, "Wrong size on AJBGameInstance_GetCloseScheduleType");
static_assert(offsetof(AJBGameInstance_GetCloseScheduleType, ReturnValue) == 0x000000, "Member 'AJBGameInstance_GetCloseScheduleType::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.GetCloseTimeSetting
// 0x000C (0x000C - 0x0000)
struct AJBGameInstance_GetCloseTimeSetting final
{
public:
	EAJBDayOfWeek                                 WeekIndex;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCloseTimeInfo                         ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_GetCloseTimeSetting) == 0x000004, "Wrong alignment on AJBGameInstance_GetCloseTimeSetting");
static_assert(sizeof(AJBGameInstance_GetCloseTimeSetting) == 0x00000C, "Wrong size on AJBGameInstance_GetCloseTimeSetting");
static_assert(offsetof(AJBGameInstance_GetCloseTimeSetting, WeekIndex) == 0x000000, "Member 'AJBGameInstance_GetCloseTimeSetting::WeekIndex' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_GetCloseTimeSetting, ReturnValue) == 0x000004, "Member 'AJBGameInstance_GetCloseTimeSetting::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.GetCreaditNum
// 0x0004 (0x0004 - 0x0000)
struct AJBGameInstance_GetCreaditNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_GetCreaditNum) == 0x000004, "Wrong alignment on AJBGameInstance_GetCreaditNum");
static_assert(sizeof(AJBGameInstance_GetCreaditNum) == 0x000004, "Wrong size on AJBGameInstance_GetCreaditNum");
static_assert(offsetof(AJBGameInstance_GetCreaditNum, ReturnValue) == 0x000000, "Member 'AJBGameInstance_GetCreaditNum::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.GetCreditNumPurchaseLimitPP
// 0x0004 (0x0004 - 0x0000)
struct AJBGameInstance_GetCreditNumPurchaseLimitPP final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_GetCreditNumPurchaseLimitPP) == 0x000004, "Wrong alignment on AJBGameInstance_GetCreditNumPurchaseLimitPP");
static_assert(sizeof(AJBGameInstance_GetCreditNumPurchaseLimitPP) == 0x000004, "Wrong size on AJBGameInstance_GetCreditNumPurchaseLimitPP");
static_assert(offsetof(AJBGameInstance_GetCreditNumPurchaseLimitPP, ReturnValue) == 0x000000, "Member 'AJBGameInstance_GetCreditNumPurchaseLimitPP::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.GetDefaultOutputLevelIndex
// 0x0004 (0x0004 - 0x0000)
struct AJBGameInstance_GetDefaultOutputLevelIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_GetDefaultOutputLevelIndex) == 0x000004, "Wrong alignment on AJBGameInstance_GetDefaultOutputLevelIndex");
static_assert(sizeof(AJBGameInstance_GetDefaultOutputLevelIndex) == 0x000004, "Wrong size on AJBGameInstance_GetDefaultOutputLevelIndex");
static_assert(offsetof(AJBGameInstance_GetDefaultOutputLevelIndex, ReturnValue) == 0x000000, "Member 'AJBGameInstance_GetDefaultOutputLevelIndex::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.GetDefaultSoundVolumeValue
// 0x0004 (0x0004 - 0x0000)
struct AJBGameInstance_GetDefaultSoundVolumeValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_GetDefaultSoundVolumeValue) == 0x000004, "Wrong alignment on AJBGameInstance_GetDefaultSoundVolumeValue");
static_assert(sizeof(AJBGameInstance_GetDefaultSoundVolumeValue) == 0x000004, "Wrong size on AJBGameInstance_GetDefaultSoundVolumeValue");
static_assert(offsetof(AJBGameInstance_GetDefaultSoundVolumeValue, ReturnValue) == 0x000000, "Member 'AJBGameInstance_GetDefaultSoundVolumeValue::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.GetEveryDayCloseTimeSetting
// 0x0008 (0x0008 - 0x0000)
struct AJBGameInstance_GetEveryDayCloseTimeSetting final
{
public:
	struct FCloseTimeInfo                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_GetEveryDayCloseTimeSetting) == 0x000004, "Wrong alignment on AJBGameInstance_GetEveryDayCloseTimeSetting");
static_assert(sizeof(AJBGameInstance_GetEveryDayCloseTimeSetting) == 0x000008, "Wrong size on AJBGameInstance_GetEveryDayCloseTimeSetting");
static_assert(offsetof(AJBGameInstance_GetEveryDayCloseTimeSetting, ReturnValue) == 0x000000, "Member 'AJBGameInstance_GetEveryDayCloseTimeSetting::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.GetExtraPPByPayCreditNum
// 0x0008 (0x0008 - 0x0000)
struct AJBGameInstance_GetExtraPPByPayCreditNum final
{
public:
	int32                                         PayCredit_0;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_GetExtraPPByPayCreditNum) == 0x000004, "Wrong alignment on AJBGameInstance_GetExtraPPByPayCreditNum");
static_assert(sizeof(AJBGameInstance_GetExtraPPByPayCreditNum) == 0x000008, "Wrong size on AJBGameInstance_GetExtraPPByPayCreditNum");
static_assert(offsetof(AJBGameInstance_GetExtraPPByPayCreditNum, PayCredit_0) == 0x000000, "Member 'AJBGameInstance_GetExtraPPByPayCreditNum::PayCredit_0' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_GetExtraPPByPayCreditNum, ReturnValue) == 0x000004, "Member 'AJBGameInstance_GetExtraPPByPayCreditNum::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.GetExtraPPKind
// 0x0001 (0x0001 - 0x0000)
struct AJBGameInstance_GetExtraPPKind final
{
public:
	EExtraPPKind                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_GetExtraPPKind) == 0x000001, "Wrong alignment on AJBGameInstance_GetExtraPPKind");
static_assert(sizeof(AJBGameInstance_GetExtraPPKind) == 0x000001, "Wrong size on AJBGameInstance_GetExtraPPKind");
static_assert(offsetof(AJBGameInstance_GetExtraPPKind, ReturnValue) == 0x000000, "Member 'AJBGameInstance_GetExtraPPKind::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.GetFocusActor
// 0x0008 (0x0008 - 0x0000)
struct AJBGameInstance_GetFocusActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_GetFocusActor) == 0x000008, "Wrong alignment on AJBGameInstance_GetFocusActor");
static_assert(sizeof(AJBGameInstance_GetFocusActor) == 0x000008, "Wrong size on AJBGameInstance_GetFocusActor");
static_assert(offsetof(AJBGameInstance_GetFocusActor, ReturnValue) == 0x000000, "Member 'AJBGameInstance_GetFocusActor::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.GetFocusActorID
// 0x0010 (0x0010 - 0x0000)
struct AJBGameInstance_GetFocusActorID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_GetFocusActorID) == 0x000008, "Wrong alignment on AJBGameInstance_GetFocusActorID");
static_assert(sizeof(AJBGameInstance_GetFocusActorID) == 0x000010, "Wrong size on AJBGameInstance_GetFocusActorID");
static_assert(offsetof(AJBGameInstance_GetFocusActorID, ReturnValue) == 0x000000, "Member 'AJBGameInstance_GetFocusActorID::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.GetFocusStand
// 0x0008 (0x0008 - 0x0000)
struct AJBGameInstance_GetFocusStand final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_GetFocusStand) == 0x000008, "Wrong alignment on AJBGameInstance_GetFocusStand");
static_assert(sizeof(AJBGameInstance_GetFocusStand) == 0x000008, "Wrong size on AJBGameInstance_GetFocusStand");
static_assert(offsetof(AJBGameInstance_GetFocusStand, ReturnValue) == 0x000000, "Member 'AJBGameInstance_GetFocusStand::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.GetFocusStandID
// 0x0010 (0x0010 - 0x0000)
struct AJBGameInstance_GetFocusStandID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_GetFocusStandID) == 0x000008, "Wrong alignment on AJBGameInstance_GetFocusStandID");
static_assert(sizeof(AJBGameInstance_GetFocusStandID) == 0x000010, "Wrong size on AJBGameInstance_GetFocusStandID");
static_assert(offsetof(AJBGameInstance_GetFocusStandID, ReturnValue) == 0x000000, "Member 'AJBGameInstance_GetFocusStandID::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.GetGachaDetails
// 0x0088 (0x0088 - 0x0000)
struct AJBGameInstance_GetGachaDetails final
{
public:
	bool                                          OutNeedUpdate;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAJBGachaDetail                        OutLuckyDrawDetail;                                // 0x0008(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FAJBGachaDetail                        OutPremiumDrawDetail;                              // 0x0048(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_GetGachaDetails) == 0x000008, "Wrong alignment on AJBGameInstance_GetGachaDetails");
static_assert(sizeof(AJBGameInstance_GetGachaDetails) == 0x000088, "Wrong size on AJBGameInstance_GetGachaDetails");
static_assert(offsetof(AJBGameInstance_GetGachaDetails, OutNeedUpdate) == 0x000000, "Member 'AJBGameInstance_GetGachaDetails::OutNeedUpdate' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_GetGachaDetails, OutLuckyDrawDetail) == 0x000008, "Member 'AJBGameInstance_GetGachaDetails::OutLuckyDrawDetail' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_GetGachaDetails, OutPremiumDrawDetail) == 0x000048, "Member 'AJBGameInstance_GetGachaDetails::OutPremiumDrawDetail' has a wrong offset!");

// Function AJB.AJBGameInstance.GetGameServerURL
// 0x0010 (0x0010 - 0x0000)
struct AJBGameInstance_GetGameServerURL final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_GetGameServerURL) == 0x000008, "Wrong alignment on AJBGameInstance_GetGameServerURL");
static_assert(sizeof(AJBGameInstance_GetGameServerURL) == 0x000010, "Wrong size on AJBGameInstance_GetGameServerURL");
static_assert(offsetof(AJBGameInstance_GetGameServerURL, ReturnValue) == 0x000000, "Member 'AJBGameInstance_GetGameServerURL::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.GetHighlightManager
// 0x0008 (0x0008 - 0x0000)
struct AJBGameInstance_GetHighlightManager final
{
public:
	class UAJBHighlightManager*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_GetHighlightManager) == 0x000008, "Wrong alignment on AJBGameInstance_GetHighlightManager");
static_assert(sizeof(AJBGameInstance_GetHighlightManager) == 0x000008, "Wrong size on AJBGameInstance_GetHighlightManager");
static_assert(offsetof(AJBGameInstance_GetHighlightManager, ReturnValue) == 0x000000, "Member 'AJBGameInstance_GetHighlightManager::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.GetHighlightUploadRemainingNum
// 0x0004 (0x0004 - 0x0000)
struct AJBGameInstance_GetHighlightUploadRemainingNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_GetHighlightUploadRemainingNum) == 0x000004, "Wrong alignment on AJBGameInstance_GetHighlightUploadRemainingNum");
static_assert(sizeof(AJBGameInstance_GetHighlightUploadRemainingNum) == 0x000004, "Wrong size on AJBGameInstance_GetHighlightUploadRemainingNum");
static_assert(offsetof(AJBGameInstance_GetHighlightUploadRemainingNum, ReturnValue) == 0x000000, "Member 'AJBGameInstance_GetHighlightUploadRemainingNum::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.GetMaxHighlightUploadNum
// 0x0004 (0x0004 - 0x0000)
struct AJBGameInstance_GetMaxHighlightUploadNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_GetMaxHighlightUploadNum) == 0x000004, "Wrong alignment on AJBGameInstance_GetMaxHighlightUploadNum");
static_assert(sizeof(AJBGameInstance_GetMaxHighlightUploadNum) == 0x000004, "Wrong size on AJBGameInstance_GetMaxHighlightUploadNum");
static_assert(offsetof(AJBGameInstance_GetMaxHighlightUploadNum, ReturnValue) == 0x000000, "Member 'AJBGameInstance_GetMaxHighlightUploadNum::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.GetMaxOutputLevelIndex
// 0x0004 (0x0004 - 0x0000)
struct AJBGameInstance_GetMaxOutputLevelIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_GetMaxOutputLevelIndex) == 0x000004, "Wrong alignment on AJBGameInstance_GetMaxOutputLevelIndex");
static_assert(sizeof(AJBGameInstance_GetMaxOutputLevelIndex) == 0x000004, "Wrong size on AJBGameInstance_GetMaxOutputLevelIndex");
static_assert(offsetof(AJBGameInstance_GetMaxOutputLevelIndex, ReturnValue) == 0x000000, "Member 'AJBGameInstance_GetMaxOutputLevelIndex::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.GetMaxSoundVolumeValue
// 0x0004 (0x0004 - 0x0000)
struct AJBGameInstance_GetMaxSoundVolumeValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_GetMaxSoundVolumeValue) == 0x000004, "Wrong alignment on AJBGameInstance_GetMaxSoundVolumeValue");
static_assert(sizeof(AJBGameInstance_GetMaxSoundVolumeValue) == 0x000004, "Wrong size on AJBGameInstance_GetMaxSoundVolumeValue");
static_assert(offsetof(AJBGameInstance_GetMaxSoundVolumeValue, ReturnValue) == 0x000000, "Member 'AJBGameInstance_GetMaxSoundVolumeValue::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.GetMinOutputLevelIndex
// 0x0004 (0x0004 - 0x0000)
struct AJBGameInstance_GetMinOutputLevelIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_GetMinOutputLevelIndex) == 0x000004, "Wrong alignment on AJBGameInstance_GetMinOutputLevelIndex");
static_assert(sizeof(AJBGameInstance_GetMinOutputLevelIndex) == 0x000004, "Wrong size on AJBGameInstance_GetMinOutputLevelIndex");
static_assert(offsetof(AJBGameInstance_GetMinOutputLevelIndex, ReturnValue) == 0x000000, "Member 'AJBGameInstance_GetMinOutputLevelIndex::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.GetMinSoundVolumeValue
// 0x0004 (0x0004 - 0x0000)
struct AJBGameInstance_GetMinSoundVolumeValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_GetMinSoundVolumeValue) == 0x000004, "Wrong alignment on AJBGameInstance_GetMinSoundVolumeValue");
static_assert(sizeof(AJBGameInstance_GetMinSoundVolumeValue) == 0x000004, "Wrong size on AJBGameInstance_GetMinSoundVolumeValue");
static_assert(offsetof(AJBGameInstance_GetMinSoundVolumeValue, ReturnValue) == 0x000000, "Member 'AJBGameInstance_GetMinSoundVolumeValue::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.GetNationalMatchSchedule
// 0x0060 (0x0060 - 0x0000)
struct AJBGameInstance_GetNationalMatchSchedule final
{
public:
	bool                                          OutCanPlaySoloMode;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutCanPlayPairMode;                                // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAJBMatchSchedule                      OutMatchSchedule;                                  // 0x0008(0x0018)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FAJBMatchScheduleDateTime              OutSoloScheduleDateTime;                           // 0x0020(0x0020)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FAJBMatchScheduleDateTime              OutPairScheduleDateTime;                           // 0x0040(0x0020)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_GetNationalMatchSchedule) == 0x000008, "Wrong alignment on AJBGameInstance_GetNationalMatchSchedule");
static_assert(sizeof(AJBGameInstance_GetNationalMatchSchedule) == 0x000060, "Wrong size on AJBGameInstance_GetNationalMatchSchedule");
static_assert(offsetof(AJBGameInstance_GetNationalMatchSchedule, OutCanPlaySoloMode) == 0x000000, "Member 'AJBGameInstance_GetNationalMatchSchedule::OutCanPlaySoloMode' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_GetNationalMatchSchedule, OutCanPlayPairMode) == 0x000001, "Member 'AJBGameInstance_GetNationalMatchSchedule::OutCanPlayPairMode' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_GetNationalMatchSchedule, OutMatchSchedule) == 0x000008, "Member 'AJBGameInstance_GetNationalMatchSchedule::OutMatchSchedule' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_GetNationalMatchSchedule, OutSoloScheduleDateTime) == 0x000020, "Member 'AJBGameInstance_GetNationalMatchSchedule::OutSoloScheduleDateTime' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_GetNationalMatchSchedule, OutPairScheduleDateTime) == 0x000040, "Member 'AJBGameInstance_GetNationalMatchSchedule::OutPairScheduleDateTime' has a wrong offset!");

// Function AJB.AJBGameInstance.GetOutputLevelIndexHeadphone
// 0x0004 (0x0004 - 0x0000)
struct AJBGameInstance_GetOutputLevelIndexHeadphone final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_GetOutputLevelIndexHeadphone) == 0x000004, "Wrong alignment on AJBGameInstance_GetOutputLevelIndexHeadphone");
static_assert(sizeof(AJBGameInstance_GetOutputLevelIndexHeadphone) == 0x000004, "Wrong size on AJBGameInstance_GetOutputLevelIndexHeadphone");
static_assert(offsetof(AJBGameInstance_GetOutputLevelIndexHeadphone, ReturnValue) == 0x000000, "Member 'AJBGameInstance_GetOutputLevelIndexHeadphone::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.GetPairMatchingPlayerInfo
// 0x0010 (0x0010 - 0x0000)
struct AJBGameInstance_GetPairMatchingPlayerInfo final
{
public:
	TArray<struct FRoomPlayerInfo>                OutPairMatching;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_GetPairMatchingPlayerInfo) == 0x000008, "Wrong alignment on AJBGameInstance_GetPairMatchingPlayerInfo");
static_assert(sizeof(AJBGameInstance_GetPairMatchingPlayerInfo) == 0x000010, "Wrong size on AJBGameInstance_GetPairMatchingPlayerInfo");
static_assert(offsetof(AJBGameInstance_GetPairMatchingPlayerInfo, OutPairMatching) == 0x000000, "Member 'AJBGameInstance_GetPairMatchingPlayerInfo::OutPairMatching' has a wrong offset!");

// Function AJB.AJBGameInstance.GetPlayerCharacterEmoteData
// 0x0020 (0x0020 - 0x0000)
struct AJBGameInstance_GetPlayerCharacterEmoteData final
{
public:
	int32                                         CharacterID;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEmoteData>                     OutEmoteData;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBGameInstance_GetPlayerCharacterEmoteData) == 0x000008, "Wrong alignment on AJBGameInstance_GetPlayerCharacterEmoteData");
static_assert(sizeof(AJBGameInstance_GetPlayerCharacterEmoteData) == 0x000020, "Wrong size on AJBGameInstance_GetPlayerCharacterEmoteData");
static_assert(offsetof(AJBGameInstance_GetPlayerCharacterEmoteData, CharacterID) == 0x000000, "Member 'AJBGameInstance_GetPlayerCharacterEmoteData::CharacterID' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_GetPlayerCharacterEmoteData, OutEmoteData) == 0x000008, "Member 'AJBGameInstance_GetPlayerCharacterEmoteData::OutEmoteData' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_GetPlayerCharacterEmoteData, ReturnValue) == 0x000018, "Member 'AJBGameInstance_GetPlayerCharacterEmoteData::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.GetPurchaseLimitPP
// 0x0001 (0x0001 - 0x0000)
struct AJBGameInstance_GetPurchaseLimitPP final
{
public:
	EPurchaseLimitPP                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_GetPurchaseLimitPP) == 0x000001, "Wrong alignment on AJBGameInstance_GetPurchaseLimitPP");
static_assert(sizeof(AJBGameInstance_GetPurchaseLimitPP) == 0x000001, "Wrong size on AJBGameInstance_GetPurchaseLimitPP");
static_assert(offsetof(AJBGameInstance_GetPurchaseLimitPP, ReturnValue) == 0x000000, "Member 'AJBGameInstance_GetPurchaseLimitPP::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.GetSelectedCharacterNo
// 0x0004 (0x0004 - 0x0000)
struct AJBGameInstance_GetSelectedCharacterNo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_GetSelectedCharacterNo) == 0x000004, "Wrong alignment on AJBGameInstance_GetSelectedCharacterNo");
static_assert(sizeof(AJBGameInstance_GetSelectedCharacterNo) == 0x000004, "Wrong size on AJBGameInstance_GetSelectedCharacterNo");
static_assert(offsetof(AJBGameInstance_GetSelectedCharacterNo, ReturnValue) == 0x000000, "Member 'AJBGameInstance_GetSelectedCharacterNo::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.GetStandSkinId
// 0x0008 (0x0008 - 0x0000)
struct AJBGameInstance_GetStandSkinId final
{
public:
	int32                                         CharaID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_GetStandSkinId) == 0x000004, "Wrong alignment on AJBGameInstance_GetStandSkinId");
static_assert(sizeof(AJBGameInstance_GetStandSkinId) == 0x000008, "Wrong size on AJBGameInstance_GetStandSkinId");
static_assert(offsetof(AJBGameInstance_GetStandSkinId, CharaID) == 0x000000, "Member 'AJBGameInstance_GetStandSkinId::CharaID' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_GetStandSkinId, ReturnValue) == 0x000004, "Member 'AJBGameInstance_GetStandSkinId::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.GetTargetSeconds
// 0x0004 (0x0004 - 0x0000)
struct AJBGameInstance_GetTargetSeconds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_GetTargetSeconds) == 0x000004, "Wrong alignment on AJBGameInstance_GetTargetSeconds");
static_assert(sizeof(AJBGameInstance_GetTargetSeconds) == 0x000004, "Wrong size on AJBGameInstance_GetTargetSeconds");
static_assert(offsetof(AJBGameInstance_GetTargetSeconds, ReturnValue) == 0x000000, "Member 'AJBGameInstance_GetTargetSeconds::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.GetVolumeAttract
// 0x0004 (0x0004 - 0x0000)
struct AJBGameInstance_GetVolumeAttract final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_GetVolumeAttract) == 0x000004, "Wrong alignment on AJBGameInstance_GetVolumeAttract");
static_assert(sizeof(AJBGameInstance_GetVolumeAttract) == 0x000004, "Wrong size on AJBGameInstance_GetVolumeAttract");
static_assert(offsetof(AJBGameInstance_GetVolumeAttract, ReturnValue) == 0x000000, "Member 'AJBGameInstance_GetVolumeAttract::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.GetVolumeGame
// 0x0004 (0x0004 - 0x0000)
struct AJBGameInstance_GetVolumeGame final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_GetVolumeGame) == 0x000004, "Wrong alignment on AJBGameInstance_GetVolumeGame");
static_assert(sizeof(AJBGameInstance_GetVolumeGame) == 0x000004, "Wrong size on AJBGameInstance_GetVolumeGame");
static_assert(offsetof(AJBGameInstance_GetVolumeGame, ReturnValue) == 0x000000, "Member 'AJBGameInstance_GetVolumeGame::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.HasStartedPlayingReplay
// 0x0001 (0x0001 - 0x0000)
struct AJBGameInstance_HasStartedPlayingReplay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_HasStartedPlayingReplay) == 0x000001, "Wrong alignment on AJBGameInstance_HasStartedPlayingReplay");
static_assert(sizeof(AJBGameInstance_HasStartedPlayingReplay) == 0x000001, "Wrong size on AJBGameInstance_HasStartedPlayingReplay");
static_assert(offsetof(AJBGameInstance_HasStartedPlayingReplay, ReturnValue) == 0x000000, "Member 'AJBGameInstance_HasStartedPlayingReplay::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.IsConsumePP
// 0x0001 (0x0001 - 0x0000)
struct AJBGameInstance_IsConsumePP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_IsConsumePP) == 0x000001, "Wrong alignment on AJBGameInstance_IsConsumePP");
static_assert(sizeof(AJBGameInstance_IsConsumePP) == 0x000001, "Wrong size on AJBGameInstance_IsConsumePP");
static_assert(offsetof(AJBGameInstance_IsConsumePP, ReturnValue) == 0x000000, "Member 'AJBGameInstance_IsConsumePP::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.IsExecutedReplay
// 0x0001 (0x0001 - 0x0000)
struct AJBGameInstance_IsExecutedReplay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_IsExecutedReplay) == 0x000001, "Wrong alignment on AJBGameInstance_IsExecutedReplay");
static_assert(sizeof(AJBGameInstance_IsExecutedReplay) == 0x000001, "Wrong size on AJBGameInstance_IsExecutedReplay");
static_assert(offsetof(AJBGameInstance_IsExecutedReplay, ReturnValue) == 0x000000, "Member 'AJBGameInstance_IsExecutedReplay::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.IsFreePlay
// 0x0001 (0x0001 - 0x0000)
struct AJBGameInstance_IsFreePlay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_IsFreePlay) == 0x000001, "Wrong alignment on AJBGameInstance_IsFreePlay");
static_assert(sizeof(AJBGameInstance_IsFreePlay) == 0x000001, "Wrong size on AJBGameInstance_IsFreePlay");
static_assert(offsetof(AJBGameInstance_IsFreePlay, ReturnValue) == 0x000000, "Member 'AJBGameInstance_IsFreePlay::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.IsGuestPlaying
// 0x0001 (0x0001 - 0x0000)
struct AJBGameInstance_IsGuestPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_IsGuestPlaying) == 0x000001, "Wrong alignment on AJBGameInstance_IsGuestPlaying");
static_assert(sizeof(AJBGameInstance_IsGuestPlaying) == 0x000001, "Wrong size on AJBGameInstance_IsGuestPlaying");
static_assert(offsetof(AJBGameInstance_IsGuestPlaying, ReturnValue) == 0x000000, "Member 'AJBGameInstance_IsGuestPlaying::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.IsHighlightReady
// 0x0001 (0x0001 - 0x0000)
struct AJBGameInstance_IsHighlightReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_IsHighlightReady) == 0x000001, "Wrong alignment on AJBGameInstance_IsHighlightReady");
static_assert(sizeof(AJBGameInstance_IsHighlightReady) == 0x000001, "Wrong size on AJBGameInstance_IsHighlightReady");
static_assert(offsetof(AJBGameInstance_IsHighlightReady, ReturnValue) == 0x000000, "Member 'AJBGameInstance_IsHighlightReady::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.IsIdleNBANSave
// 0x0001 (0x0001 - 0x0000)
struct AJBGameInstance_IsIdleNBANSave final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_IsIdleNBANSave) == 0x000001, "Wrong alignment on AJBGameInstance_IsIdleNBANSave");
static_assert(sizeof(AJBGameInstance_IsIdleNBANSave) == 0x000001, "Wrong size on AJBGameInstance_IsIdleNBANSave");
static_assert(offsetof(AJBGameInstance_IsIdleNBANSave, ReturnValue) == 0x000000, "Member 'AJBGameInstance_IsIdleNBANSave::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.IsLockLimitedCredit
// 0x0001 (0x0001 - 0x0000)
struct AJBGameInstance_IsLockLimitedCredit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_IsLockLimitedCredit) == 0x000001, "Wrong alignment on AJBGameInstance_IsLockLimitedCredit");
static_assert(sizeof(AJBGameInstance_IsLockLimitedCredit) == 0x000001, "Wrong size on AJBGameInstance_IsLockLimitedCredit");
static_assert(offsetof(AJBGameInstance_IsLockLimitedCredit, ReturnValue) == 0x000000, "Member 'AJBGameInstance_IsLockLimitedCredit::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.IsLoginPlayer
// 0x0001 (0x0001 - 0x0000)
struct AJBGameInstance_IsLoginPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_IsLoginPlayer) == 0x000001, "Wrong alignment on AJBGameInstance_IsLoginPlayer");
static_assert(sizeof(AJBGameInstance_IsLoginPlayer) == 0x000001, "Wrong size on AJBGameInstance_IsLoginPlayer");
static_assert(offsetof(AJBGameInstance_IsLoginPlayer, ReturnValue) == 0x000000, "Member 'AJBGameInstance_IsLoginPlayer::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.IsMatchCompensationLoginUserDataID
// 0x0001 (0x0001 - 0x0000)
struct AJBGameInstance_IsMatchCompensationLoginUserDataID final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_IsMatchCompensationLoginUserDataID) == 0x000001, "Wrong alignment on AJBGameInstance_IsMatchCompensationLoginUserDataID");
static_assert(sizeof(AJBGameInstance_IsMatchCompensationLoginUserDataID) == 0x000001, "Wrong size on AJBGameInstance_IsMatchCompensationLoginUserDataID");
static_assert(offsetof(AJBGameInstance_IsMatchCompensationLoginUserDataID, ReturnValue) == 0x000000, "Member 'AJBGameInstance_IsMatchCompensationLoginUserDataID::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.IsNeedCompensation
// 0x0003 (0x0003 - 0x0000)
struct AJBGameInstance_IsNeedCompensation final
{
public:
	bool                                          bCompensationCredit;                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCompensationPP;                                   // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_IsNeedCompensation) == 0x000001, "Wrong alignment on AJBGameInstance_IsNeedCompensation");
static_assert(sizeof(AJBGameInstance_IsNeedCompensation) == 0x000003, "Wrong size on AJBGameInstance_IsNeedCompensation");
static_assert(offsetof(AJBGameInstance_IsNeedCompensation, bCompensationCredit) == 0x000000, "Member 'AJBGameInstance_IsNeedCompensation::bCompensationCredit' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_IsNeedCompensation, bCompensationPP) == 0x000001, "Member 'AJBGameInstance_IsNeedCompensation::bCompensationPP' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_IsNeedCompensation, ReturnValue) == 0x000002, "Member 'AJBGameInstance_IsNeedCompensation::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.IsNPCPartner
// 0x0001 (0x0001 - 0x0000)
struct AJBGameInstance_IsNPCPartner final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_IsNPCPartner) == 0x000001, "Wrong alignment on AJBGameInstance_IsNPCPartner");
static_assert(sizeof(AJBGameInstance_IsNPCPartner) == 0x000001, "Wrong size on AJBGameInstance_IsNPCPartner");
static_assert(offsetof(AJBGameInstance_IsNPCPartner, ReturnValue) == 0x000000, "Member 'AJBGameInstance_IsNPCPartner::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.IsPlayBanapassCardPlayCompensation
// 0x0001 (0x0001 - 0x0000)
struct AJBGameInstance_IsPlayBanapassCardPlayCompensation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_IsPlayBanapassCardPlayCompensation) == 0x000001, "Wrong alignment on AJBGameInstance_IsPlayBanapassCardPlayCompensation");
static_assert(sizeof(AJBGameInstance_IsPlayBanapassCardPlayCompensation) == 0x000001, "Wrong size on AJBGameInstance_IsPlayBanapassCardPlayCompensation");
static_assert(offsetof(AJBGameInstance_IsPlayBanapassCardPlayCompensation, ReturnValue) == 0x000000, "Member 'AJBGameInstance_IsPlayBanapassCardPlayCompensation::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.IsPlayingReplay
// 0x0001 (0x0001 - 0x0000)
struct AJBGameInstance_IsPlayingReplay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_IsPlayingReplay) == 0x000001, "Wrong alignment on AJBGameInstance_IsPlayingReplay");
static_assert(sizeof(AJBGameInstance_IsPlayingReplay) == 0x000001, "Wrong size on AJBGameInstance_IsPlayingReplay");
static_assert(offsetof(AJBGameInstance_IsPlayingReplay, ReturnValue) == 0x000000, "Member 'AJBGameInstance_IsPlayingReplay::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.IsPlayingReplayDataAvailable
// 0x0001 (0x0001 - 0x0000)
struct AJBGameInstance_IsPlayingReplayDataAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_IsPlayingReplayDataAvailable) == 0x000001, "Wrong alignment on AJBGameInstance_IsPlayingReplayDataAvailable");
static_assert(sizeof(AJBGameInstance_IsPlayingReplayDataAvailable) == 0x000001, "Wrong size on AJBGameInstance_IsPlayingReplayDataAvailable");
static_assert(offsetof(AJBGameInstance_IsPlayingReplayDataAvailable, ReturnValue) == 0x000000, "Member 'AJBGameInstance_IsPlayingReplayDataAvailable::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.IsRecordingReplay
// 0x0001 (0x0001 - 0x0000)
struct AJBGameInstance_IsRecordingReplay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_IsRecordingReplay) == 0x000001, "Wrong alignment on AJBGameInstance_IsRecordingReplay");
static_assert(sizeof(AJBGameInstance_IsRecordingReplay) == 0x000001, "Wrong size on AJBGameInstance_IsRecordingReplay");
static_assert(offsetof(AJBGameInstance_IsRecordingReplay, ReturnValue) == 0x000000, "Member 'AJBGameInstance_IsRecordingReplay::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.IsServicePlay
// 0x0001 (0x0001 - 0x0000)
struct AJBGameInstance_IsServicePlay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_IsServicePlay) == 0x000001, "Wrong alignment on AJBGameInstance_IsServicePlay");
static_assert(sizeof(AJBGameInstance_IsServicePlay) == 0x000001, "Wrong size on AJBGameInstance_IsServicePlay");
static_assert(offsetof(AJBGameInstance_IsServicePlay, ReturnValue) == 0x000000, "Member 'AJBGameInstance_IsServicePlay::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.IsShopCompetitionMode
// 0x0001 (0x0001 - 0x0000)
struct AJBGameInstance_IsShopCompetitionMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_IsShopCompetitionMode) == 0x000001, "Wrong alignment on AJBGameInstance_IsShopCompetitionMode");
static_assert(sizeof(AJBGameInstance_IsShopCompetitionMode) == 0x000001, "Wrong size on AJBGameInstance_IsShopCompetitionMode");
static_assert(offsetof(AJBGameInstance_IsShopCompetitionMode, ReturnValue) == 0x000000, "Member 'AJBGameInstance_IsShopCompetitionMode::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.OnLoaded_AMVersion
// 0x0020 (0x0020 - 0x0000)
struct AJBGameInstance_OnLoaded_AMVersion final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Data;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBGameInstance_OnLoaded_AMVersion) == 0x000008, "Wrong alignment on AJBGameInstance_OnLoaded_AMVersion");
static_assert(sizeof(AJBGameInstance_OnLoaded_AMVersion) == 0x000020, "Wrong size on AJBGameInstance_OnLoaded_AMVersion");
static_assert(offsetof(AJBGameInstance_OnLoaded_AMVersion, Result) == 0x000000, "Member 'AJBGameInstance_OnLoaded_AMVersion::Result' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_OnLoaded_AMVersion, Data) == 0x000008, "Member 'AJBGameInstance_OnLoaded_AMVersion::Data' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_OnLoaded_AMVersion, ReturnValue) == 0x000018, "Member 'AJBGameInstance_OnLoaded_AMVersion::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.OnLoaded_BookKeeping
// 0x0020 (0x0020 - 0x0000)
struct AJBGameInstance_OnLoaded_BookKeeping final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Data;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBGameInstance_OnLoaded_BookKeeping) == 0x000008, "Wrong alignment on AJBGameInstance_OnLoaded_BookKeeping");
static_assert(sizeof(AJBGameInstance_OnLoaded_BookKeeping) == 0x000020, "Wrong size on AJBGameInstance_OnLoaded_BookKeeping");
static_assert(offsetof(AJBGameInstance_OnLoaded_BookKeeping, Result) == 0x000000, "Member 'AJBGameInstance_OnLoaded_BookKeeping::Result' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_OnLoaded_BookKeeping, Data) == 0x000008, "Member 'AJBGameInstance_OnLoaded_BookKeeping::Data' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_OnLoaded_BookKeeping, ReturnValue) == 0x000018, "Member 'AJBGameInstance_OnLoaded_BookKeeping::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.OnLoaded_ErrorLogs
// 0x0020 (0x0020 - 0x0000)
struct AJBGameInstance_OnLoaded_ErrorLogs final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Data;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBGameInstance_OnLoaded_ErrorLogs) == 0x000008, "Wrong alignment on AJBGameInstance_OnLoaded_ErrorLogs");
static_assert(sizeof(AJBGameInstance_OnLoaded_ErrorLogs) == 0x000020, "Wrong size on AJBGameInstance_OnLoaded_ErrorLogs");
static_assert(offsetof(AJBGameInstance_OnLoaded_ErrorLogs, Result) == 0x000000, "Member 'AJBGameInstance_OnLoaded_ErrorLogs::Result' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_OnLoaded_ErrorLogs, Data) == 0x000008, "Member 'AJBGameInstance_OnLoaded_ErrorLogs::Data' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_OnLoaded_ErrorLogs, ReturnValue) == 0x000018, "Member 'AJBGameInstance_OnLoaded_ErrorLogs::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.OnLoaded_FreePlayCount
// 0x0020 (0x0020 - 0x0000)
struct AJBGameInstance_OnLoaded_FreePlayCount final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Data;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBGameInstance_OnLoaded_FreePlayCount) == 0x000008, "Wrong alignment on AJBGameInstance_OnLoaded_FreePlayCount");
static_assert(sizeof(AJBGameInstance_OnLoaded_FreePlayCount) == 0x000020, "Wrong size on AJBGameInstance_OnLoaded_FreePlayCount");
static_assert(offsetof(AJBGameInstance_OnLoaded_FreePlayCount, Result) == 0x000000, "Member 'AJBGameInstance_OnLoaded_FreePlayCount::Result' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_OnLoaded_FreePlayCount, Data) == 0x000008, "Member 'AJBGameInstance_OnLoaded_FreePlayCount::Data' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_OnLoaded_FreePlayCount, ReturnValue) == 0x000018, "Member 'AJBGameInstance_OnLoaded_FreePlayCount::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.OnLoaded_Information
// 0x0020 (0x0020 - 0x0000)
struct AJBGameInstance_OnLoaded_Information final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Data;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBGameInstance_OnLoaded_Information) == 0x000008, "Wrong alignment on AJBGameInstance_OnLoaded_Information");
static_assert(sizeof(AJBGameInstance_OnLoaded_Information) == 0x000020, "Wrong size on AJBGameInstance_OnLoaded_Information");
static_assert(offsetof(AJBGameInstance_OnLoaded_Information, Result) == 0x000000, "Member 'AJBGameInstance_OnLoaded_Information::Result' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_OnLoaded_Information, Data) == 0x000008, "Member 'AJBGameInstance_OnLoaded_Information::Data' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_OnLoaded_Information, ReturnValue) == 0x000018, "Member 'AJBGameInstance_OnLoaded_Information::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.OnLoaded_LastGameStatus
// 0x0020 (0x0020 - 0x0000)
struct AJBGameInstance_OnLoaded_LastGameStatus final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Data;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBGameInstance_OnLoaded_LastGameStatus) == 0x000008, "Wrong alignment on AJBGameInstance_OnLoaded_LastGameStatus");
static_assert(sizeof(AJBGameInstance_OnLoaded_LastGameStatus) == 0x000020, "Wrong size on AJBGameInstance_OnLoaded_LastGameStatus");
static_assert(offsetof(AJBGameInstance_OnLoaded_LastGameStatus, Result) == 0x000000, "Member 'AJBGameInstance_OnLoaded_LastGameStatus::Result' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_OnLoaded_LastGameStatus, Data) == 0x000008, "Member 'AJBGameInstance_OnLoaded_LastGameStatus::Data' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_OnLoaded_LastGameStatus, ReturnValue) == 0x000018, "Member 'AJBGameInstance_OnLoaded_LastGameStatus::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.OnLoaded_ShopInfo
// 0x0020 (0x0020 - 0x0000)
struct AJBGameInstance_OnLoaded_ShopInfo final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Data;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBGameInstance_OnLoaded_ShopInfo) == 0x000008, "Wrong alignment on AJBGameInstance_OnLoaded_ShopInfo");
static_assert(sizeof(AJBGameInstance_OnLoaded_ShopInfo) == 0x000020, "Wrong size on AJBGameInstance_OnLoaded_ShopInfo");
static_assert(offsetof(AJBGameInstance_OnLoaded_ShopInfo, Result) == 0x000000, "Member 'AJBGameInstance_OnLoaded_ShopInfo::Result' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_OnLoaded_ShopInfo, Data) == 0x000008, "Member 'AJBGameInstance_OnLoaded_ShopInfo::Data' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_OnLoaded_ShopInfo, ReturnValue) == 0x000018, "Member 'AJBGameInstance_OnLoaded_ShopInfo::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.OnLoaded_SystemOptions
// 0x0020 (0x0020 - 0x0000)
struct AJBGameInstance_OnLoaded_SystemOptions final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Data;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBGameInstance_OnLoaded_SystemOptions) == 0x000008, "Wrong alignment on AJBGameInstance_OnLoaded_SystemOptions");
static_assert(sizeof(AJBGameInstance_OnLoaded_SystemOptions) == 0x000020, "Wrong size on AJBGameInstance_OnLoaded_SystemOptions");
static_assert(offsetof(AJBGameInstance_OnLoaded_SystemOptions, Result) == 0x000000, "Member 'AJBGameInstance_OnLoaded_SystemOptions::Result' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_OnLoaded_SystemOptions, Data) == 0x000008, "Member 'AJBGameInstance_OnLoaded_SystemOptions::Data' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_OnLoaded_SystemOptions, ReturnValue) == 0x000018, "Member 'AJBGameInstance_OnLoaded_SystemOptions::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.OnLoaded_UpdateSettings
// 0x0020 (0x0020 - 0x0000)
struct AJBGameInstance_OnLoaded_UpdateSettings final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Data;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBGameInstance_OnLoaded_UpdateSettings) == 0x000008, "Wrong alignment on AJBGameInstance_OnLoaded_UpdateSettings");
static_assert(sizeof(AJBGameInstance_OnLoaded_UpdateSettings) == 0x000020, "Wrong size on AJBGameInstance_OnLoaded_UpdateSettings");
static_assert(offsetof(AJBGameInstance_OnLoaded_UpdateSettings, Result) == 0x000000, "Member 'AJBGameInstance_OnLoaded_UpdateSettings::Result' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_OnLoaded_UpdateSettings, Data) == 0x000008, "Member 'AJBGameInstance_OnLoaded_UpdateSettings::Data' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_OnLoaded_UpdateSettings, ReturnValue) == 0x000018, "Member 'AJBGameInstance_OnLoaded_UpdateSettings::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.PayCredit
// 0x0008 (0x0008 - 0x0000)
struct AJBGameInstance_PayCredit final
{
public:
	int32                                         Credit;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SaveLastStatus;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBGameInstance_PayCredit) == 0x000004, "Wrong alignment on AJBGameInstance_PayCredit");
static_assert(sizeof(AJBGameInstance_PayCredit) == 0x000008, "Wrong size on AJBGameInstance_PayCredit");
static_assert(offsetof(AJBGameInstance_PayCredit, Credit) == 0x000000, "Member 'AJBGameInstance_PayCredit::Credit' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_PayCredit, SaveLastStatus) == 0x000004, "Member 'AJBGameInstance_PayCredit::SaveLastStatus' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_PayCredit, ReturnValue) == 0x000005, "Member 'AJBGameInstance_PayCredit::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.ResetCompensationInfo
// 0x0001 (0x0001 - 0x0000)
struct AJBGameInstance_ResetCompensationInfo final
{
public:
	bool                                          bIsSaveLastGameStatus;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_ResetCompensationInfo) == 0x000001, "Wrong alignment on AJBGameInstance_ResetCompensationInfo");
static_assert(sizeof(AJBGameInstance_ResetCompensationInfo) == 0x000001, "Wrong size on AJBGameInstance_ResetCompensationInfo");
static_assert(offsetof(AJBGameInstance_ResetCompensationInfo, bIsSaveLastGameStatus) == 0x000000, "Member 'AJBGameInstance_ResetCompensationInfo::bIsSaveLastGameStatus' has a wrong offset!");

// Function AJB.AJBGameInstance.ResetLastGameStatus
// 0x0001 (0x0001 - 0x0000)
struct AJBGameInstance_ResetLastGameStatus final
{
public:
	bool                                          bClearUsed;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_ResetLastGameStatus) == 0x000001, "Wrong alignment on AJBGameInstance_ResetLastGameStatus");
static_assert(sizeof(AJBGameInstance_ResetLastGameStatus) == 0x000001, "Wrong size on AJBGameInstance_ResetLastGameStatus");
static_assert(offsetof(AJBGameInstance_ResetLastGameStatus, bClearUsed) == 0x000000, "Member 'AJBGameInstance_ResetLastGameStatus::bClearUsed' has a wrong offset!");

// Function AJB.AJBGameInstance.ResetPP
// 0x0001 (0x0001 - 0x0000)
struct AJBGameInstance_ResetPP final
{
public:
	bool                                          bIsSaveLastGameStatus;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_ResetPP) == 0x000001, "Wrong alignment on AJBGameInstance_ResetPP");
static_assert(sizeof(AJBGameInstance_ResetPP) == 0x000001, "Wrong size on AJBGameInstance_ResetPP");
static_assert(offsetof(AJBGameInstance_ResetPP, bIsSaveLastGameStatus) == 0x000000, "Member 'AJBGameInstance_ResetPP::bIsSaveLastGameStatus' has a wrong offset!");

// Function AJB.AJBGameInstance.SaveStorage_HeadClerk
// 0x0028 (0x0028 - 0x0000)
struct AJBGameInstance_SaveStorage_HeadClerk final
{
public:
	struct FAMHeadClerkInfo                       HeadClerkInfo;                                     // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FString                                 FilePath;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_SaveStorage_HeadClerk) == 0x000008, "Wrong alignment on AJBGameInstance_SaveStorage_HeadClerk");
static_assert(sizeof(AJBGameInstance_SaveStorage_HeadClerk) == 0x000028, "Wrong size on AJBGameInstance_SaveStorage_HeadClerk");
static_assert(offsetof(AJBGameInstance_SaveStorage_HeadClerk, HeadClerkInfo) == 0x000000, "Member 'AJBGameInstance_SaveStorage_HeadClerk::HeadClerkInfo' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_SaveStorage_HeadClerk, FilePath) == 0x000018, "Member 'AJBGameInstance_SaveStorage_HeadClerk::FilePath' has a wrong offset!");

// Function AJB.AJBGameInstance.SeekReplay
// 0x0004 (0x0004 - 0x0000)
struct AJBGameInstance_SeekReplay final
{
public:
	float                                         Second;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_SeekReplay) == 0x000004, "Wrong alignment on AJBGameInstance_SeekReplay");
static_assert(sizeof(AJBGameInstance_SeekReplay) == 0x000004, "Wrong size on AJBGameInstance_SeekReplay");
static_assert(offsetof(AJBGameInstance_SeekReplay, Second) == 0x000000, "Member 'AJBGameInstance_SeekReplay::Second' has a wrong offset!");

// Function AJB.AJBGameInstance.SetBattleSettings
// 0x0008 (0x0008 - 0x0000)
struct AJBGameInstance_SetBattleSettings final
{
public:
	struct FAJBBattleSettings                     InBattleSettings;                                  // 0x0000(0x0008)(ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_SetBattleSettings) == 0x000004, "Wrong alignment on AJBGameInstance_SetBattleSettings");
static_assert(sizeof(AJBGameInstance_SetBattleSettings) == 0x000008, "Wrong size on AJBGameInstance_SetBattleSettings");
static_assert(offsetof(AJBGameInstance_SetBattleSettings, InBattleSettings) == 0x000000, "Member 'AJBGameInstance_SetBattleSettings::InBattleSettings' has a wrong offset!");

// Function AJB.AJBGameInstance.SetBuyAddPP
// 0x0001 (0x0001 - 0x0000)
struct AJBGameInstance_SetBuyAddPP final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_SetBuyAddPP) == 0x000001, "Wrong alignment on AJBGameInstance_SetBuyAddPP");
static_assert(sizeof(AJBGameInstance_SetBuyAddPP) == 0x000001, "Wrong size on AJBGameInstance_SetBuyAddPP");
static_assert(offsetof(AJBGameInstance_SetBuyAddPP, bEnable) == 0x000000, "Member 'AJBGameInstance_SetBuyAddPP::bEnable' has a wrong offset!");

// Function AJB.AJBGameInstance.SetCharacterSkinId
// 0x0008 (0x0008 - 0x0000)
struct AJBGameInstance_SetCharacterSkinId final
{
public:
	int32                                         CharaID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkinID;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_SetCharacterSkinId) == 0x000004, "Wrong alignment on AJBGameInstance_SetCharacterSkinId");
static_assert(sizeof(AJBGameInstance_SetCharacterSkinId) == 0x000008, "Wrong size on AJBGameInstance_SetCharacterSkinId");
static_assert(offsetof(AJBGameInstance_SetCharacterSkinId, CharaID) == 0x000000, "Member 'AJBGameInstance_SetCharacterSkinId::CharaID' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_SetCharacterSkinId, SkinID) == 0x000004, "Member 'AJBGameInstance_SetCharacterSkinId::SkinID' has a wrong offset!");

// Function AJB.AJBGameInstance.SetCloseScheduleType
// 0x0001 (0x0001 - 0x0000)
struct AJBGameInstance_SetCloseScheduleType final
{
public:
	ECloseScheduleType                            Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_SetCloseScheduleType) == 0x000001, "Wrong alignment on AJBGameInstance_SetCloseScheduleType");
static_assert(sizeof(AJBGameInstance_SetCloseScheduleType) == 0x000001, "Wrong size on AJBGameInstance_SetCloseScheduleType");
static_assert(offsetof(AJBGameInstance_SetCloseScheduleType, Type) == 0x000000, "Member 'AJBGameInstance_SetCloseScheduleType::Type' has a wrong offset!");

// Function AJB.AJBGameInstance.SetCloseTimeSetting
// 0x000C (0x000C - 0x0000)
struct AJBGameInstance_SetCloseTimeSetting final
{
public:
	EAJBDayOfWeek                                 Week;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCloseTimeInfo                         Info;                                              // 0x0004(0x0008)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_SetCloseTimeSetting) == 0x000004, "Wrong alignment on AJBGameInstance_SetCloseTimeSetting");
static_assert(sizeof(AJBGameInstance_SetCloseTimeSetting) == 0x00000C, "Wrong size on AJBGameInstance_SetCloseTimeSetting");
static_assert(offsetof(AJBGameInstance_SetCloseTimeSetting, Week) == 0x000000, "Member 'AJBGameInstance_SetCloseTimeSetting::Week' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_SetCloseTimeSetting, Info) == 0x000004, "Member 'AJBGameInstance_SetCloseTimeSetting::Info' has a wrong offset!");

// Function AJB.AJBGameInstance.SetEveryDayCloseTimeSetting
// 0x0008 (0x0008 - 0x0000)
struct AJBGameInstance_SetEveryDayCloseTimeSetting final
{
public:
	struct FCloseTimeInfo                         Info;                                              // 0x0000(0x0008)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_SetEveryDayCloseTimeSetting) == 0x000004, "Wrong alignment on AJBGameInstance_SetEveryDayCloseTimeSetting");
static_assert(sizeof(AJBGameInstance_SetEveryDayCloseTimeSetting) == 0x000008, "Wrong size on AJBGameInstance_SetEveryDayCloseTimeSetting");
static_assert(offsetof(AJBGameInstance_SetEveryDayCloseTimeSetting, Info) == 0x000000, "Member 'AJBGameInstance_SetEveryDayCloseTimeSetting::Info' has a wrong offset!");

// Function AJB.AJBGameInstance.SetExtraPPKind
// 0x0001 (0x0001 - 0x0000)
struct AJBGameInstance_SetExtraPPKind final
{
public:
	EExtraPPKind                                  Kind;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_SetExtraPPKind) == 0x000001, "Wrong alignment on AJBGameInstance_SetExtraPPKind");
static_assert(sizeof(AJBGameInstance_SetExtraPPKind) == 0x000001, "Wrong size on AJBGameInstance_SetExtraPPKind");
static_assert(offsetof(AJBGameInstance_SetExtraPPKind, Kind) == 0x000000, "Member 'AJBGameInstance_SetExtraPPKind::Kind' has a wrong offset!");

// Function AJB.AJBGameInstance.SetFocusActor
// 0x0010 (0x0010 - 0x0000)
struct AJBGameInstance_SetFocusActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBGameInstance_SetFocusActor) == 0x000008, "Wrong alignment on AJBGameInstance_SetFocusActor");
static_assert(sizeof(AJBGameInstance_SetFocusActor) == 0x000010, "Wrong size on AJBGameInstance_SetFocusActor");
static_assert(offsetof(AJBGameInstance_SetFocusActor, Actor) == 0x000000, "Member 'AJBGameInstance_SetFocusActor::Actor' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_SetFocusActor, ReturnValue) == 0x000008, "Member 'AJBGameInstance_SetFocusActor::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.SetFocusId
// 0x0004 (0x0004 - 0x0000)
struct AJBGameInstance_SetFocusId final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_SetFocusId) == 0x000004, "Wrong alignment on AJBGameInstance_SetFocusId");
static_assert(sizeof(AJBGameInstance_SetFocusId) == 0x000004, "Wrong size on AJBGameInstance_SetFocusId");
static_assert(offsetof(AJBGameInstance_SetFocusId, ID) == 0x000000, "Member 'AJBGameInstance_SetFocusId::ID' has a wrong offset!");

// Function AJB.AJBGameInstance.SetFocusStand
// 0x0010 (0x0010 - 0x0000)
struct AJBGameInstance_SetFocusStand final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBGameInstance_SetFocusStand) == 0x000008, "Wrong alignment on AJBGameInstance_SetFocusStand");
static_assert(sizeof(AJBGameInstance_SetFocusStand) == 0x000010, "Wrong size on AJBGameInstance_SetFocusStand");
static_assert(offsetof(AJBGameInstance_SetFocusStand, Actor) == 0x000000, "Member 'AJBGameInstance_SetFocusStand::Actor' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_SetFocusStand, ReturnValue) == 0x000008, "Member 'AJBGameInstance_SetFocusStand::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.SetFreePlay
// 0x0001 (0x0001 - 0x0000)
struct AJBGameInstance_SetFreePlay final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_SetFreePlay) == 0x000001, "Wrong alignment on AJBGameInstance_SetFreePlay");
static_assert(sizeof(AJBGameInstance_SetFreePlay) == 0x000001, "Wrong size on AJBGameInstance_SetFreePlay");
static_assert(offsetof(AJBGameInstance_SetFreePlay, bEnable) == 0x000000, "Member 'AJBGameInstance_SetFreePlay::bEnable' has a wrong offset!");

// Function AJB.AJBGameInstance.SetFreePPTime
// 0x0004 (0x0004 - 0x0000)
struct AJBGameInstance_SetFreePPTime final
{
public:
	int32                                         Second;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_SetFreePPTime) == 0x000004, "Wrong alignment on AJBGameInstance_SetFreePPTime");
static_assert(sizeof(AJBGameInstance_SetFreePPTime) == 0x000004, "Wrong size on AJBGameInstance_SetFreePPTime");
static_assert(offsetof(AJBGameInstance_SetFreePPTime, Second) == 0x000000, "Member 'AJBGameInstance_SetFreePPTime::Second' has a wrong offset!");

// Function AJB.AJBGameInstance.SetHighlightReady
// 0x0001 (0x0001 - 0x0000)
struct AJBGameInstance_SetHighlightReady final
{
public:
	bool                                          bReady;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_SetHighlightReady) == 0x000001, "Wrong alignment on AJBGameInstance_SetHighlightReady");
static_assert(sizeof(AJBGameInstance_SetHighlightReady) == 0x000001, "Wrong size on AJBGameInstance_SetHighlightReady");
static_assert(offsetof(AJBGameInstance_SetHighlightReady, bReady) == 0x000000, "Member 'AJBGameInstance_SetHighlightReady::bReady' has a wrong offset!");

// Function AJB.AJBGameInstance.SetMaxConsumePP
// 0x0004 (0x0004 - 0x0000)
struct AJBGameInstance_SetMaxConsumePP final
{
public:
	int32                                         MaxPP;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_SetMaxConsumePP) == 0x000004, "Wrong alignment on AJBGameInstance_SetMaxConsumePP");
static_assert(sizeof(AJBGameInstance_SetMaxConsumePP) == 0x000004, "Wrong size on AJBGameInstance_SetMaxConsumePP");
static_assert(offsetof(AJBGameInstance_SetMaxConsumePP, MaxPP) == 0x000000, "Member 'AJBGameInstance_SetMaxConsumePP::MaxPP' has a wrong offset!");

// Function AJB.AJBGameInstance.SetOutputLevelIndexHeadphone
// 0x0004 (0x0004 - 0x0000)
struct AJBGameInstance_SetOutputLevelIndexHeadphone final
{
public:
	int32                                         NewIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_SetOutputLevelIndexHeadphone) == 0x000004, "Wrong alignment on AJBGameInstance_SetOutputLevelIndexHeadphone");
static_assert(sizeof(AJBGameInstance_SetOutputLevelIndexHeadphone) == 0x000004, "Wrong size on AJBGameInstance_SetOutputLevelIndexHeadphone");
static_assert(offsetof(AJBGameInstance_SetOutputLevelIndexHeadphone, NewIndex) == 0x000000, "Member 'AJBGameInstance_SetOutputLevelIndexHeadphone::NewIndex' has a wrong offset!");

// Function AJB.AJBGameInstance.SetPauseState
// 0x0018 (0x0018 - 0x0000)
struct AJBGameInstance_SetPauseState final
{
public:
	bool                                          bDoPause;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      Causer;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBGameInstance_SetPauseState) == 0x000008, "Wrong alignment on AJBGameInstance_SetPauseState");
static_assert(sizeof(AJBGameInstance_SetPauseState) == 0x000018, "Wrong size on AJBGameInstance_SetPauseState");
static_assert(offsetof(AJBGameInstance_SetPauseState, bDoPause) == 0x000000, "Member 'AJBGameInstance_SetPauseState::bDoPause' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_SetPauseState, Causer) == 0x000008, "Member 'AJBGameInstance_SetPauseState::Causer' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_SetPauseState, ReturnValue) == 0x000010, "Member 'AJBGameInstance_SetPauseState::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.SetPurchaseLimitPP
// 0x0001 (0x0001 - 0x0000)
struct AJBGameInstance_SetPurchaseLimitPP final
{
public:
	EPurchaseLimitPP                              LimitPP;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_SetPurchaseLimitPP) == 0x000001, "Wrong alignment on AJBGameInstance_SetPurchaseLimitPP");
static_assert(sizeof(AJBGameInstance_SetPurchaseLimitPP) == 0x000001, "Wrong size on AJBGameInstance_SetPurchaseLimitPP");
static_assert(offsetof(AJBGameInstance_SetPurchaseLimitPP, LimitPP) == 0x000000, "Member 'AJBGameInstance_SetPurchaseLimitPP::LimitPP' has a wrong offset!");

// Function AJB.AJBGameInstance.SetSelectedCharacterNo
// 0x0004 (0x0004 - 0x0000)
struct AJBGameInstance_SetSelectedCharacterNo final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_SetSelectedCharacterNo) == 0x000004, "Wrong alignment on AJBGameInstance_SetSelectedCharacterNo");
static_assert(sizeof(AJBGameInstance_SetSelectedCharacterNo) == 0x000004, "Wrong size on AJBGameInstance_SetSelectedCharacterNo");
static_assert(offsetof(AJBGameInstance_SetSelectedCharacterNo, ID) == 0x000000, "Member 'AJBGameInstance_SetSelectedCharacterNo::ID' has a wrong offset!");

// Function AJB.AJBGameInstance.SetStandSkinId
// 0x0008 (0x0008 - 0x0000)
struct AJBGameInstance_SetStandSkinId final
{
public:
	int32                                         CharaID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkinID;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_SetStandSkinId) == 0x000004, "Wrong alignment on AJBGameInstance_SetStandSkinId");
static_assert(sizeof(AJBGameInstance_SetStandSkinId) == 0x000008, "Wrong size on AJBGameInstance_SetStandSkinId");
static_assert(offsetof(AJBGameInstance_SetStandSkinId, CharaID) == 0x000000, "Member 'AJBGameInstance_SetStandSkinId::CharaID' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_SetStandSkinId, SkinID) == 0x000004, "Member 'AJBGameInstance_SetStandSkinId::SkinID' has a wrong offset!");

// Function AJB.AJBGameInstance.SetTargetSeconds
// 0x0008 (0x0008 - 0x0000)
struct AJBGameInstance_SetTargetSeconds final
{
public:
	float                                         TargetSeconds;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SeekTargetSeconds;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_SetTargetSeconds) == 0x000004, "Wrong alignment on AJBGameInstance_SetTargetSeconds");
static_assert(sizeof(AJBGameInstance_SetTargetSeconds) == 0x000008, "Wrong size on AJBGameInstance_SetTargetSeconds");
static_assert(offsetof(AJBGameInstance_SetTargetSeconds, TargetSeconds) == 0x000000, "Member 'AJBGameInstance_SetTargetSeconds::TargetSeconds' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_SetTargetSeconds, SeekTargetSeconds) == 0x000004, "Member 'AJBGameInstance_SetTargetSeconds::SeekTargetSeconds' has a wrong offset!");

// Function AJB.AJBGameInstance.SetupLocalMatchingNPC
// 0x000C (0x000C - 0x0000)
struct AJBGameInstance_SetupLocalMatchingNPC final
{
public:
	int32                                         NPCNum;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStartLocation                         StageLocationSize;                                 // 0x0004(0x0002)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CanPutNum;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_SetupLocalMatchingNPC) == 0x000004, "Wrong alignment on AJBGameInstance_SetupLocalMatchingNPC");
static_assert(sizeof(AJBGameInstance_SetupLocalMatchingNPC) == 0x00000C, "Wrong size on AJBGameInstance_SetupLocalMatchingNPC");
static_assert(offsetof(AJBGameInstance_SetupLocalMatchingNPC, NPCNum) == 0x000000, "Member 'AJBGameInstance_SetupLocalMatchingNPC::NPCNum' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_SetupLocalMatchingNPC, StageLocationSize) == 0x000004, "Member 'AJBGameInstance_SetupLocalMatchingNPC::StageLocationSize' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_SetupLocalMatchingNPC, CanPutNum) == 0x000008, "Member 'AJBGameInstance_SetupLocalMatchingNPC::CanPutNum' has a wrong offset!");

// Function AJB.AJBGameInstance.SetVolumeAttract
// 0x0004 (0x0004 - 0x0000)
struct AJBGameInstance_SetVolumeAttract final
{
public:
	int32                                         NewVolume;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_SetVolumeAttract) == 0x000004, "Wrong alignment on AJBGameInstance_SetVolumeAttract");
static_assert(sizeof(AJBGameInstance_SetVolumeAttract) == 0x000004, "Wrong size on AJBGameInstance_SetVolumeAttract");
static_assert(offsetof(AJBGameInstance_SetVolumeAttract, NewVolume) == 0x000000, "Member 'AJBGameInstance_SetVolumeAttract::NewVolume' has a wrong offset!");

// Function AJB.AJBGameInstance.SetVolumeGame
// 0x0004 (0x0004 - 0x0000)
struct AJBGameInstance_SetVolumeGame final
{
public:
	int32                                         NewVolume;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_SetVolumeGame) == 0x000004, "Wrong alignment on AJBGameInstance_SetVolumeGame");
static_assert(sizeof(AJBGameInstance_SetVolumeGame) == 0x000004, "Wrong size on AJBGameInstance_SetVolumeGame");
static_assert(offsetof(AJBGameInstance_SetVolumeGame, NewVolume) == 0x000000, "Member 'AJBGameInstance_SetVolumeGame::NewVolume' has a wrong offset!");

// Function AJB.AJBGameInstance.SubCoinCredit
// 0x0008 (0x0008 - 0x0000)
struct AJBGameInstance_SubCoinCredit final
{
public:
	int32                                         SubCredit;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSaveLastStatus;                                  // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBGameInstance_SubCoinCredit) == 0x000004, "Wrong alignment on AJBGameInstance_SubCoinCredit");
static_assert(sizeof(AJBGameInstance_SubCoinCredit) == 0x000008, "Wrong size on AJBGameInstance_SubCoinCredit");
static_assert(offsetof(AJBGameInstance_SubCoinCredit, SubCredit) == 0x000000, "Member 'AJBGameInstance_SubCoinCredit::SubCredit' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_SubCoinCredit, IsSaveLastStatus) == 0x000004, "Member 'AJBGameInstance_SubCoinCredit::IsSaveLastStatus' has a wrong offset!");

// Function AJB.AJBGameInstance.SubEmoneyCredit
// 0x0008 (0x0008 - 0x0000)
struct AJBGameInstance_SubEmoneyCredit final
{
public:
	int32                                         SubCredit;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSaveLastStatus;                                  // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBGameInstance_SubEmoneyCredit) == 0x000004, "Wrong alignment on AJBGameInstance_SubEmoneyCredit");
static_assert(sizeof(AJBGameInstance_SubEmoneyCredit) == 0x000008, "Wrong size on AJBGameInstance_SubEmoneyCredit");
static_assert(offsetof(AJBGameInstance_SubEmoneyCredit, SubCredit) == 0x000000, "Member 'AJBGameInstance_SubEmoneyCredit::SubCredit' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_SubEmoneyCredit, IsSaveLastStatus) == 0x000004, "Member 'AJBGameInstance_SubEmoneyCredit::IsSaveLastStatus' has a wrong offset!");

// Function AJB.AJBGameInstance.SubPP
// 0x0008 (0x0008 - 0x0000)
struct AJBGameInstance_SubPP final
{
public:
	int32                                         SubPPNum;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBGameInstance_SubPP) == 0x000004, "Wrong alignment on AJBGameInstance_SubPP");
static_assert(sizeof(AJBGameInstance_SubPP) == 0x000008, "Wrong size on AJBGameInstance_SubPP");
static_assert(offsetof(AJBGameInstance_SubPP, SubPPNum) == 0x000000, "Member 'AJBGameInstance_SubPP::SubPPNum' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_SubPP, ReturnValue) == 0x000004, "Member 'AJBGameInstance_SubPP::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.SubServiceCredit
// 0x0008 (0x0008 - 0x0000)
struct AJBGameInstance_SubServiceCredit final
{
public:
	int32                                         SubCredit;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSaveLastStatus;                                  // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBGameInstance_SubServiceCredit) == 0x000004, "Wrong alignment on AJBGameInstance_SubServiceCredit");
static_assert(sizeof(AJBGameInstance_SubServiceCredit) == 0x000008, "Wrong size on AJBGameInstance_SubServiceCredit");
static_assert(offsetof(AJBGameInstance_SubServiceCredit, SubCredit) == 0x000000, "Member 'AJBGameInstance_SubServiceCredit::SubCredit' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_SubServiceCredit, IsSaveLastStatus) == 0x000004, "Member 'AJBGameInstance_SubServiceCredit::IsSaveLastStatus' has a wrong offset!");

// Function AJB.AJBGameInstance.TryCreateOfflinePlayerInfo
// 0x0001 (0x0001 - 0x0000)
struct AJBGameInstance_TryCreateOfflinePlayerInfo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_TryCreateOfflinePlayerInfo) == 0x000001, "Wrong alignment on AJBGameInstance_TryCreateOfflinePlayerInfo");
static_assert(sizeof(AJBGameInstance_TryCreateOfflinePlayerInfo) == 0x000001, "Wrong size on AJBGameInstance_TryCreateOfflinePlayerInfo");
static_assert(offsetof(AJBGameInstance_TryCreateOfflinePlayerInfo, ReturnValue) == 0x000000, "Member 'AJBGameInstance_TryCreateOfflinePlayerInfo::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.TryGetMatchingPlayerInfoByPlayerID
// 0x0098 (0x0098 - 0x0000)
struct AJBGameInstance_TryGetMatchingPlayerInfoByPlayerID final
{
public:
	int32                                         PlayerID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatchingPlayerInfo                    Out;                                               // 0x0008(0x0088)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBGameInstance_TryGetMatchingPlayerInfoByPlayerID) == 0x000008, "Wrong alignment on AJBGameInstance_TryGetMatchingPlayerInfoByPlayerID");
static_assert(sizeof(AJBGameInstance_TryGetMatchingPlayerInfoByPlayerID) == 0x000098, "Wrong size on AJBGameInstance_TryGetMatchingPlayerInfoByPlayerID");
static_assert(offsetof(AJBGameInstance_TryGetMatchingPlayerInfoByPlayerID, PlayerID) == 0x000000, "Member 'AJBGameInstance_TryGetMatchingPlayerInfoByPlayerID::PlayerID' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_TryGetMatchingPlayerInfoByPlayerID, Out) == 0x000008, "Member 'AJBGameInstance_TryGetMatchingPlayerInfoByPlayerID::Out' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_TryGetMatchingPlayerInfoByPlayerID, ReturnValue) == 0x000090, "Member 'AJBGameInstance_TryGetMatchingPlayerInfoByPlayerID::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.TryGetMatchingPlayerInfoByPlayerIDPureFunction
// 0x0098 (0x0098 - 0x0000)
struct AJBGameInstance_TryGetMatchingPlayerInfoByPlayerIDPureFunction final
{
public:
	int32                                         PlayerID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatchingPlayerInfo                    Out;                                               // 0x0008(0x0088)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBGameInstance_TryGetMatchingPlayerInfoByPlayerIDPureFunction) == 0x000008, "Wrong alignment on AJBGameInstance_TryGetMatchingPlayerInfoByPlayerIDPureFunction");
static_assert(sizeof(AJBGameInstance_TryGetMatchingPlayerInfoByPlayerIDPureFunction) == 0x000098, "Wrong size on AJBGameInstance_TryGetMatchingPlayerInfoByPlayerIDPureFunction");
static_assert(offsetof(AJBGameInstance_TryGetMatchingPlayerInfoByPlayerIDPureFunction, PlayerID) == 0x000000, "Member 'AJBGameInstance_TryGetMatchingPlayerInfoByPlayerIDPureFunction::PlayerID' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_TryGetMatchingPlayerInfoByPlayerIDPureFunction, Out) == 0x000008, "Member 'AJBGameInstance_TryGetMatchingPlayerInfoByPlayerIDPureFunction::Out' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_TryGetMatchingPlayerInfoByPlayerIDPureFunction, ReturnValue) == 0x000090, "Member 'AJBGameInstance_TryGetMatchingPlayerInfoByPlayerIDPureFunction::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.TryGetMatchingPlayerInfoByUserID
// 0x00A0 (0x00A0 - 0x0000)
struct AJBGameInstance_TryGetMatchingPlayerInfoByUserID final
{
public:
	class FString                                 UserID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatchingPlayerInfo                    Out;                                               // 0x0010(0x0088)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBGameInstance_TryGetMatchingPlayerInfoByUserID) == 0x000008, "Wrong alignment on AJBGameInstance_TryGetMatchingPlayerInfoByUserID");
static_assert(sizeof(AJBGameInstance_TryGetMatchingPlayerInfoByUserID) == 0x0000A0, "Wrong size on AJBGameInstance_TryGetMatchingPlayerInfoByUserID");
static_assert(offsetof(AJBGameInstance_TryGetMatchingPlayerInfoByUserID, UserID) == 0x000000, "Member 'AJBGameInstance_TryGetMatchingPlayerInfoByUserID::UserID' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_TryGetMatchingPlayerInfoByUserID, Out) == 0x000010, "Member 'AJBGameInstance_TryGetMatchingPlayerInfoByUserID::Out' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_TryGetMatchingPlayerInfoByUserID, ReturnValue) == 0x000098, "Member 'AJBGameInstance_TryGetMatchingPlayerInfoByUserID::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.TryGetMyPairMatchingPlayerInfo
// 0x0090 (0x0090 - 0x0000)
struct AJBGameInstance_TryGetMyPairMatchingPlayerInfo final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRoomHost;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatchingPlayerInfo                    Out;                                               // 0x0008(0x0088)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_TryGetMyPairMatchingPlayerInfo) == 0x000008, "Wrong alignment on AJBGameInstance_TryGetMyPairMatchingPlayerInfo");
static_assert(sizeof(AJBGameInstance_TryGetMyPairMatchingPlayerInfo) == 0x000090, "Wrong size on AJBGameInstance_TryGetMyPairMatchingPlayerInfo");
static_assert(offsetof(AJBGameInstance_TryGetMyPairMatchingPlayerInfo, bIsValid) == 0x000000, "Member 'AJBGameInstance_TryGetMyPairMatchingPlayerInfo::bIsValid' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_TryGetMyPairMatchingPlayerInfo, bIsRoomHost) == 0x000001, "Member 'AJBGameInstance_TryGetMyPairMatchingPlayerInfo::bIsRoomHost' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_TryGetMyPairMatchingPlayerInfo, Out) == 0x000008, "Member 'AJBGameInstance_TryGetMyPairMatchingPlayerInfo::Out' has a wrong offset!");

// Function AJB.AJBGameInstance.TryUpdateCustomDataAndCharacterIDByPlayerID
// 0x0030 (0x0030 - 0x0000)
struct AJBGameInstance_TryUpdateCustomDataAndCharacterIDByPlayerID final
{
public:
	uint8                                         PlayerID;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCustomData                            NewCustomData;                                     // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	uint8                                         NewCharacterID;                                    // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBGameInstance_TryUpdateCustomDataAndCharacterIDByPlayerID) == 0x000008, "Wrong alignment on AJBGameInstance_TryUpdateCustomDataAndCharacterIDByPlayerID");
static_assert(sizeof(AJBGameInstance_TryUpdateCustomDataAndCharacterIDByPlayerID) == 0x000030, "Wrong size on AJBGameInstance_TryUpdateCustomDataAndCharacterIDByPlayerID");
static_assert(offsetof(AJBGameInstance_TryUpdateCustomDataAndCharacterIDByPlayerID, PlayerID) == 0x000000, "Member 'AJBGameInstance_TryUpdateCustomDataAndCharacterIDByPlayerID::PlayerID' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_TryUpdateCustomDataAndCharacterIDByPlayerID, NewCustomData) == 0x000008, "Member 'AJBGameInstance_TryUpdateCustomDataAndCharacterIDByPlayerID::NewCustomData' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_TryUpdateCustomDataAndCharacterIDByPlayerID, NewCharacterID) == 0x000028, "Member 'AJBGameInstance_TryUpdateCustomDataAndCharacterIDByPlayerID::NewCharacterID' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_TryUpdateCustomDataAndCharacterIDByPlayerID, ReturnValue) == 0x000029, "Member 'AJBGameInstance_TryUpdateCustomDataAndCharacterIDByPlayerID::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.TryUpdateCustomDataAndCharacterIDByUserID
// 0x0038 (0x0038 - 0x0000)
struct AJBGameInstance_TryUpdateCustomDataAndCharacterIDByUserID final
{
public:
	class FString                                 UserID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCustomData                            NewCustomData;                                     // 0x0010(0x0020)(Parm, NativeAccessSpecifierPublic)
	uint8                                         NewCharacterID;                                    // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBGameInstance_TryUpdateCustomDataAndCharacterIDByUserID) == 0x000008, "Wrong alignment on AJBGameInstance_TryUpdateCustomDataAndCharacterIDByUserID");
static_assert(sizeof(AJBGameInstance_TryUpdateCustomDataAndCharacterIDByUserID) == 0x000038, "Wrong size on AJBGameInstance_TryUpdateCustomDataAndCharacterIDByUserID");
static_assert(offsetof(AJBGameInstance_TryUpdateCustomDataAndCharacterIDByUserID, UserID) == 0x000000, "Member 'AJBGameInstance_TryUpdateCustomDataAndCharacterIDByUserID::UserID' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_TryUpdateCustomDataAndCharacterIDByUserID, NewCustomData) == 0x000010, "Member 'AJBGameInstance_TryUpdateCustomDataAndCharacterIDByUserID::NewCustomData' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_TryUpdateCustomDataAndCharacterIDByUserID, NewCharacterID) == 0x000030, "Member 'AJBGameInstance_TryUpdateCustomDataAndCharacterIDByUserID::NewCharacterID' has a wrong offset!");
static_assert(offsetof(AJBGameInstance_TryUpdateCustomDataAndCharacterIDByUserID, ReturnValue) == 0x000031, "Member 'AJBGameInstance_TryUpdateCustomDataAndCharacterIDByUserID::ReturnValue' has a wrong offset!");

// Function AJB.AJBGameInstance.GetParamRepos
// 0x0008 (0x0008 - 0x0000)
struct AJBGameInstance_GetParamRepos final
{
public:
	class UAJBParamRepos*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGameInstance_GetParamRepos) == 0x000008, "Wrong alignment on AJBGameInstance_GetParamRepos");
static_assert(sizeof(AJBGameInstance_GetParamRepos) == 0x000008, "Wrong size on AJBGameInstance_GetParamRepos");
static_assert(offsetof(AJBGameInstance_GetParamRepos, ReturnValue) == 0x000000, "Member 'AJBGameInstance_GetParamRepos::ReturnValue' has a wrong offset!");

// Function AJB.AJBGetIPAddress.GetIPAddress
// 0x0010 (0x0010 - 0x0000)
struct AJBGetIPAddress_GetIPAddress final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAJBGetIPAddress*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGetIPAddress_GetIPAddress) == 0x000008, "Wrong alignment on AJBGetIPAddress_GetIPAddress");
static_assert(sizeof(AJBGetIPAddress_GetIPAddress) == 0x000010, "Wrong size on AJBGetIPAddress_GetIPAddress");
static_assert(offsetof(AJBGetIPAddress_GetIPAddress, WorldContextObject) == 0x000000, "Member 'AJBGetIPAddress_GetIPAddress::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBGetIPAddress_GetIPAddress, ReturnValue) == 0x000008, "Member 'AJBGetIPAddress_GetIPAddress::ReturnValue' has a wrong offset!");

// DelegateFunction AJB.AJBGetIPAddress.AJBIPGetAddressResponse__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct AJBGetIPAddress_AJBIPGetAddressResponse__DelegateSignature final
{
public:
	class FString                                 IP;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBGetIPAddress_AJBIPGetAddressResponse__DelegateSignature) == 0x000008, "Wrong alignment on AJBGetIPAddress_AJBIPGetAddressResponse__DelegateSignature");
static_assert(sizeof(AJBGetIPAddress_AJBIPGetAddressResponse__DelegateSignature) == 0x000010, "Wrong size on AJBGetIPAddress_AJBIPGetAddressResponse__DelegateSignature");
static_assert(offsetof(AJBGetIPAddress_AJBIPGetAddressResponse__DelegateSignature, IP) == 0x000000, "Member 'AJBGetIPAddress_AJBIPGetAddressResponse__DelegateSignature::IP' has a wrong offset!");

// Function AJB.AJBHighlightManager.HighlightOnly_PrintString
// 0x0030 (0x0030 - 0x0000)
struct AJBHighlightManager_HighlightOnly_PrintString final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InString;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrintToScreen;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrintToLog;                                       // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TextColor;                                         // 0x001C(0x0010)(Parm, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHighlightManager_HighlightOnly_PrintString) == 0x000008, "Wrong alignment on AJBHighlightManager_HighlightOnly_PrintString");
static_assert(sizeof(AJBHighlightManager_HighlightOnly_PrintString) == 0x000030, "Wrong size on AJBHighlightManager_HighlightOnly_PrintString");
static_assert(offsetof(AJBHighlightManager_HighlightOnly_PrintString, WorldContextObject) == 0x000000, "Member 'AJBHighlightManager_HighlightOnly_PrintString::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBHighlightManager_HighlightOnly_PrintString, InString) == 0x000008, "Member 'AJBHighlightManager_HighlightOnly_PrintString::InString' has a wrong offset!");
static_assert(offsetof(AJBHighlightManager_HighlightOnly_PrintString, bPrintToScreen) == 0x000018, "Member 'AJBHighlightManager_HighlightOnly_PrintString::bPrintToScreen' has a wrong offset!");
static_assert(offsetof(AJBHighlightManager_HighlightOnly_PrintString, bPrintToLog) == 0x000019, "Member 'AJBHighlightManager_HighlightOnly_PrintString::bPrintToLog' has a wrong offset!");
static_assert(offsetof(AJBHighlightManager_HighlightOnly_PrintString, TextColor) == 0x00001C, "Member 'AJBHighlightManager_HighlightOnly_PrintString::TextColor' has a wrong offset!");
static_assert(offsetof(AJBHighlightManager_HighlightOnly_PrintString, Duration) == 0x00002C, "Member 'AJBHighlightManager_HighlightOnly_PrintString::Duration' has a wrong offset!");

// Function AJB.AJBHighlightManager.ExistsMovieCache
// 0x0001 (0x0001 - 0x0000)
struct AJBHighlightManager_ExistsMovieCache final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHighlightManager_ExistsMovieCache) == 0x000001, "Wrong alignment on AJBHighlightManager_ExistsMovieCache");
static_assert(sizeof(AJBHighlightManager_ExistsMovieCache) == 0x000001, "Wrong size on AJBHighlightManager_ExistsMovieCache");
static_assert(offsetof(AJBHighlightManager_ExistsMovieCache, ReturnValue) == 0x000000, "Member 'AJBHighlightManager_ExistsMovieCache::ReturnValue' has a wrong offset!");

// Function AJB.AJBHighlightManager.FinalizeHighlight
// 0x0001 (0x0001 - 0x0000)
struct AJBHighlightManager_FinalizeHighlight final
{
public:
	bool                                          bResetHighlightPlayingMemory;                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHighlightManager_FinalizeHighlight) == 0x000001, "Wrong alignment on AJBHighlightManager_FinalizeHighlight");
static_assert(sizeof(AJBHighlightManager_FinalizeHighlight) == 0x000001, "Wrong size on AJBHighlightManager_FinalizeHighlight");
static_assert(offsetof(AJBHighlightManager_FinalizeHighlight, bResetHighlightPlayingMemory) == 0x000000, "Member 'AJBHighlightManager_FinalizeHighlight::bResetHighlightPlayingMemory' has a wrong offset!");

// Function AJB.AJBHighlightManager.FinishedCreateMovie
// 0x0001 (0x0001 - 0x0000)
struct AJBHighlightManager_FinishedCreateMovie final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHighlightManager_FinishedCreateMovie) == 0x000001, "Wrong alignment on AJBHighlightManager_FinishedCreateMovie");
static_assert(sizeof(AJBHighlightManager_FinishedCreateMovie) == 0x000001, "Wrong size on AJBHighlightManager_FinishedCreateMovie");
static_assert(offsetof(AJBHighlightManager_FinishedCreateMovie, ReturnValue) == 0x000000, "Member 'AJBHighlightManager_FinishedCreateMovie::ReturnValue' has a wrong offset!");

// Function AJB.AJBHighlightManager.GetCurrentHighlightTime
// 0x0004 (0x0004 - 0x0000)
struct AJBHighlightManager_GetCurrentHighlightTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHighlightManager_GetCurrentHighlightTime) == 0x000004, "Wrong alignment on AJBHighlightManager_GetCurrentHighlightTime");
static_assert(sizeof(AJBHighlightManager_GetCurrentHighlightTime) == 0x000004, "Wrong size on AJBHighlightManager_GetCurrentHighlightTime");
static_assert(offsetof(AJBHighlightManager_GetCurrentHighlightTime, ReturnValue) == 0x000000, "Member 'AJBHighlightManager_GetCurrentHighlightTime::ReturnValue' has a wrong offset!");

// Function AJB.AJBHighlightManager.GetDebugFullReplayFlag
// 0x0001 (0x0001 - 0x0000)
struct AJBHighlightManager_GetDebugFullReplayFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHighlightManager_GetDebugFullReplayFlag) == 0x000001, "Wrong alignment on AJBHighlightManager_GetDebugFullReplayFlag");
static_assert(sizeof(AJBHighlightManager_GetDebugFullReplayFlag) == 0x000001, "Wrong size on AJBHighlightManager_GetDebugFullReplayFlag");
static_assert(offsetof(AJBHighlightManager_GetDebugFullReplayFlag, ReturnValue) == 0x000000, "Member 'AJBHighlightManager_GetDebugFullReplayFlag::ReturnValue' has a wrong offset!");

// Function AJB.AJBHighlightManager.GetFadeTime
// 0x0004 (0x0004 - 0x0000)
struct AJBHighlightManager_GetFadeTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHighlightManager_GetFadeTime) == 0x000004, "Wrong alignment on AJBHighlightManager_GetFadeTime");
static_assert(sizeof(AJBHighlightManager_GetFadeTime) == 0x000004, "Wrong size on AJBHighlightManager_GetFadeTime");
static_assert(offsetof(AJBHighlightManager_GetFadeTime, ReturnValue) == 0x000000, "Member 'AJBHighlightManager_GetFadeTime::ReturnValue' has a wrong offset!");

// Function AJB.AJBHighlightManager.GetFocusActor
// 0x0008 (0x0008 - 0x0000)
struct AJBHighlightManager_GetFocusActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHighlightManager_GetFocusActor) == 0x000008, "Wrong alignment on AJBHighlightManager_GetFocusActor");
static_assert(sizeof(AJBHighlightManager_GetFocusActor) == 0x000008, "Wrong size on AJBHighlightManager_GetFocusActor");
static_assert(offsetof(AJBHighlightManager_GetFocusActor, ReturnValue) == 0x000000, "Member 'AJBHighlightManager_GetFocusActor::ReturnValue' has a wrong offset!");

// Function AJB.AJBHighlightManager.GetFocusActorID
// 0x0010 (0x0010 - 0x0000)
struct AJBHighlightManager_GetFocusActorID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHighlightManager_GetFocusActorID) == 0x000008, "Wrong alignment on AJBHighlightManager_GetFocusActorID");
static_assert(sizeof(AJBHighlightManager_GetFocusActorID) == 0x000010, "Wrong size on AJBHighlightManager_GetFocusActorID");
static_assert(offsetof(AJBHighlightManager_GetFocusActorID, ReturnValue) == 0x000000, "Member 'AJBHighlightManager_GetFocusActorID::ReturnValue' has a wrong offset!");

// Function AJB.AJBHighlightManager.GetFocusStand
// 0x0008 (0x0008 - 0x0000)
struct AJBHighlightManager_GetFocusStand final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHighlightManager_GetFocusStand) == 0x000008, "Wrong alignment on AJBHighlightManager_GetFocusStand");
static_assert(sizeof(AJBHighlightManager_GetFocusStand) == 0x000008, "Wrong size on AJBHighlightManager_GetFocusStand");
static_assert(offsetof(AJBHighlightManager_GetFocusStand, ReturnValue) == 0x000000, "Member 'AJBHighlightManager_GetFocusStand::ReturnValue' has a wrong offset!");

// Function AJB.AJBHighlightManager.GetFocusStandID
// 0x0010 (0x0010 - 0x0000)
struct AJBHighlightManager_GetFocusStandID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHighlightManager_GetFocusStandID) == 0x000008, "Wrong alignment on AJBHighlightManager_GetFocusStandID");
static_assert(sizeof(AJBHighlightManager_GetFocusStandID) == 0x000010, "Wrong size on AJBHighlightManager_GetFocusStandID");
static_assert(offsetof(AJBHighlightManager_GetFocusStandID, ReturnValue) == 0x000000, "Member 'AJBHighlightManager_GetFocusStandID::ReturnValue' has a wrong offset!");

// Function AJB.AJBHighlightManager.GetLastCheckPointTimeBySeekTargetTime
// 0x0008 (0x0008 - 0x0000)
struct AJBHighlightManager_GetLastCheckPointTimeBySeekTargetTime final
{
public:
	float                                         SeekTargetTime;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHighlightManager_GetLastCheckPointTimeBySeekTargetTime) == 0x000004, "Wrong alignment on AJBHighlightManager_GetLastCheckPointTimeBySeekTargetTime");
static_assert(sizeof(AJBHighlightManager_GetLastCheckPointTimeBySeekTargetTime) == 0x000008, "Wrong size on AJBHighlightManager_GetLastCheckPointTimeBySeekTargetTime");
static_assert(offsetof(AJBHighlightManager_GetLastCheckPointTimeBySeekTargetTime, SeekTargetTime) == 0x000000, "Member 'AJBHighlightManager_GetLastCheckPointTimeBySeekTargetTime::SeekTargetTime' has a wrong offset!");
static_assert(offsetof(AJBHighlightManager_GetLastCheckPointTimeBySeekTargetTime, ReturnValue) == 0x000004, "Member 'AJBHighlightManager_GetLastCheckPointTimeBySeekTargetTime::ReturnValue' has a wrong offset!");

// Function AJB.AJBHighlightManager.GetMoviePath
// 0x0010 (0x0010 - 0x0000)
struct AJBHighlightManager_GetMoviePath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHighlightManager_GetMoviePath) == 0x000008, "Wrong alignment on AJBHighlightManager_GetMoviePath");
static_assert(sizeof(AJBHighlightManager_GetMoviePath) == 0x000010, "Wrong size on AJBHighlightManager_GetMoviePath");
static_assert(offsetof(AJBHighlightManager_GetMoviePath, ReturnValue) == 0x000000, "Member 'AJBHighlightManager_GetMoviePath::ReturnValue' has a wrong offset!");

// Function AJB.AJBHighlightManager.GetSeekTargetSeconds
// 0x0004 (0x0004 - 0x0000)
struct AJBHighlightManager_GetSeekTargetSeconds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHighlightManager_GetSeekTargetSeconds) == 0x000004, "Wrong alignment on AJBHighlightManager_GetSeekTargetSeconds");
static_assert(sizeof(AJBHighlightManager_GetSeekTargetSeconds) == 0x000004, "Wrong size on AJBHighlightManager_GetSeekTargetSeconds");
static_assert(offsetof(AJBHighlightManager_GetSeekTargetSeconds, ReturnValue) == 0x000000, "Member 'AJBHighlightManager_GetSeekTargetSeconds::ReturnValue' has a wrong offset!");

// Function AJB.AJBHighlightManager.GetTargetSeconds
// 0x0004 (0x0004 - 0x0000)
struct AJBHighlightManager_GetTargetSeconds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHighlightManager_GetTargetSeconds) == 0x000004, "Wrong alignment on AJBHighlightManager_GetTargetSeconds");
static_assert(sizeof(AJBHighlightManager_GetTargetSeconds) == 0x000004, "Wrong size on AJBHighlightManager_GetTargetSeconds");
static_assert(offsetof(AJBHighlightManager_GetTargetSeconds, ReturnValue) == 0x000000, "Member 'AJBHighlightManager_GetTargetSeconds::ReturnValue' has a wrong offset!");

// Function AJB.AJBHighlightManager.HasStartedPlayingReplay
// 0x0001 (0x0001 - 0x0000)
struct AJBHighlightManager_HasStartedPlayingReplay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHighlightManager_HasStartedPlayingReplay) == 0x000001, "Wrong alignment on AJBHighlightManager_HasStartedPlayingReplay");
static_assert(sizeof(AJBHighlightManager_HasStartedPlayingReplay) == 0x000001, "Wrong size on AJBHighlightManager_HasStartedPlayingReplay");
static_assert(offsetof(AJBHighlightManager_HasStartedPlayingReplay, ReturnValue) == 0x000000, "Member 'AJBHighlightManager_HasStartedPlayingReplay::ReturnValue' has a wrong offset!");

// Function AJB.AJBHighlightManager.IsCabinet
// 0x0001 (0x0001 - 0x0000)
struct AJBHighlightManager_IsCabinet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHighlightManager_IsCabinet) == 0x000001, "Wrong alignment on AJBHighlightManager_IsCabinet");
static_assert(sizeof(AJBHighlightManager_IsCabinet) == 0x000001, "Wrong size on AJBHighlightManager_IsCabinet");
static_assert(offsetof(AJBHighlightManager_IsCabinet, ReturnValue) == 0x000000, "Member 'AJBHighlightManager_IsCabinet::ReturnValue' has a wrong offset!");

// Function AJB.AJBHighlightManager.IsExecutedReplay
// 0x0001 (0x0001 - 0x0000)
struct AJBHighlightManager_IsExecutedReplay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHighlightManager_IsExecutedReplay) == 0x000001, "Wrong alignment on AJBHighlightManager_IsExecutedReplay");
static_assert(sizeof(AJBHighlightManager_IsExecutedReplay) == 0x000001, "Wrong size on AJBHighlightManager_IsExecutedReplay");
static_assert(offsetof(AJBHighlightManager_IsExecutedReplay, ReturnValue) == 0x000000, "Member 'AJBHighlightManager_IsExecutedReplay::ReturnValue' has a wrong offset!");

// Function AJB.AJBHighlightManager.IsHighlightReady
// 0x0001 (0x0001 - 0x0000)
struct AJBHighlightManager_IsHighlightReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHighlightManager_IsHighlightReady) == 0x000001, "Wrong alignment on AJBHighlightManager_IsHighlightReady");
static_assert(sizeof(AJBHighlightManager_IsHighlightReady) == 0x000001, "Wrong size on AJBHighlightManager_IsHighlightReady");
static_assert(offsetof(AJBHighlightManager_IsHighlightReady, ReturnValue) == 0x000000, "Member 'AJBHighlightManager_IsHighlightReady::ReturnValue' has a wrong offset!");

// Function AJB.AJBHighlightManager.IsPlayingReplay
// 0x0001 (0x0001 - 0x0000)
struct AJBHighlightManager_IsPlayingReplay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHighlightManager_IsPlayingReplay) == 0x000001, "Wrong alignment on AJBHighlightManager_IsPlayingReplay");
static_assert(sizeof(AJBHighlightManager_IsPlayingReplay) == 0x000001, "Wrong size on AJBHighlightManager_IsPlayingReplay");
static_assert(offsetof(AJBHighlightManager_IsPlayingReplay, ReturnValue) == 0x000000, "Member 'AJBHighlightManager_IsPlayingReplay::ReturnValue' has a wrong offset!");

// Function AJB.AJBHighlightManager.IsRecordingReplay
// 0x0001 (0x0001 - 0x0000)
struct AJBHighlightManager_IsRecordingReplay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHighlightManager_IsRecordingReplay) == 0x000001, "Wrong alignment on AJBHighlightManager_IsRecordingReplay");
static_assert(sizeof(AJBHighlightManager_IsRecordingReplay) == 0x000001, "Wrong size on AJBHighlightManager_IsRecordingReplay");
static_assert(offsetof(AJBHighlightManager_IsRecordingReplay, ReturnValue) == 0x000000, "Member 'AJBHighlightManager_IsRecordingReplay::ReturnValue' has a wrong offset!");

// Function AJB.AJBHighlightManager.RequestEncodeMovie
// 0x0020 (0x0020 - 0x0000)
struct AJBHighlightManager_RequestEncodeMovie final
{
public:
	bool                                          bLaunchDetached;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLaunchHidden;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLaunchReallyHidden;                               // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBHighlightManager_RequestEncodeMovie) == 0x000008, "Wrong alignment on AJBHighlightManager_RequestEncodeMovie");
static_assert(sizeof(AJBHighlightManager_RequestEncodeMovie) == 0x000020, "Wrong size on AJBHighlightManager_RequestEncodeMovie");
static_assert(offsetof(AJBHighlightManager_RequestEncodeMovie, bLaunchDetached) == 0x000000, "Member 'AJBHighlightManager_RequestEncodeMovie::bLaunchDetached' has a wrong offset!");
static_assert(offsetof(AJBHighlightManager_RequestEncodeMovie, bLaunchHidden) == 0x000001, "Member 'AJBHighlightManager_RequestEncodeMovie::bLaunchHidden' has a wrong offset!");
static_assert(offsetof(AJBHighlightManager_RequestEncodeMovie, bLaunchReallyHidden) == 0x000002, "Member 'AJBHighlightManager_RequestEncodeMovie::bLaunchReallyHidden' has a wrong offset!");
static_assert(offsetof(AJBHighlightManager_RequestEncodeMovie, ErrorMessage) == 0x000008, "Member 'AJBHighlightManager_RequestEncodeMovie::ErrorMessage' has a wrong offset!");
static_assert(offsetof(AJBHighlightManager_RequestEncodeMovie, ReturnValue) == 0x000018, "Member 'AJBHighlightManager_RequestEncodeMovie::ReturnValue' has a wrong offset!");

// Function AJB.AJBHighlightManager.SeekReplay
// 0x0004 (0x0004 - 0x0000)
struct AJBHighlightManager_SeekReplay final
{
public:
	float                                         Second;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHighlightManager_SeekReplay) == 0x000004, "Wrong alignment on AJBHighlightManager_SeekReplay");
static_assert(sizeof(AJBHighlightManager_SeekReplay) == 0x000004, "Wrong size on AJBHighlightManager_SeekReplay");
static_assert(offsetof(AJBHighlightManager_SeekReplay, Second) == 0x000000, "Member 'AJBHighlightManager_SeekReplay::Second' has a wrong offset!");

// Function AJB.AJBHighlightManager.SetDebugFullReplayFlag
// 0x0001 (0x0001 - 0x0000)
struct AJBHighlightManager_SetDebugFullReplayFlag final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHighlightManager_SetDebugFullReplayFlag) == 0x000001, "Wrong alignment on AJBHighlightManager_SetDebugFullReplayFlag");
static_assert(sizeof(AJBHighlightManager_SetDebugFullReplayFlag) == 0x000001, "Wrong size on AJBHighlightManager_SetDebugFullReplayFlag");
static_assert(offsetof(AJBHighlightManager_SetDebugFullReplayFlag, Flag) == 0x000000, "Member 'AJBHighlightManager_SetDebugFullReplayFlag::Flag' has a wrong offset!");

// Function AJB.AJBHighlightManager.SetFocusActor
// 0x0010 (0x0010 - 0x0000)
struct AJBHighlightManager_SetFocusActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBHighlightManager_SetFocusActor) == 0x000008, "Wrong alignment on AJBHighlightManager_SetFocusActor");
static_assert(sizeof(AJBHighlightManager_SetFocusActor) == 0x000010, "Wrong size on AJBHighlightManager_SetFocusActor");
static_assert(offsetof(AJBHighlightManager_SetFocusActor, Actor) == 0x000000, "Member 'AJBHighlightManager_SetFocusActor::Actor' has a wrong offset!");
static_assert(offsetof(AJBHighlightManager_SetFocusActor, ReturnValue) == 0x000008, "Member 'AJBHighlightManager_SetFocusActor::ReturnValue' has a wrong offset!");

// Function AJB.AJBHighlightManager.SetFocusId
// 0x0004 (0x0004 - 0x0000)
struct AJBHighlightManager_SetFocusId final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHighlightManager_SetFocusId) == 0x000004, "Wrong alignment on AJBHighlightManager_SetFocusId");
static_assert(sizeof(AJBHighlightManager_SetFocusId) == 0x000004, "Wrong size on AJBHighlightManager_SetFocusId");
static_assert(offsetof(AJBHighlightManager_SetFocusId, ID) == 0x000000, "Member 'AJBHighlightManager_SetFocusId::ID' has a wrong offset!");

// Function AJB.AJBHighlightManager.SetFocusStand
// 0x0010 (0x0010 - 0x0000)
struct AJBHighlightManager_SetFocusStand final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBHighlightManager_SetFocusStand) == 0x000008, "Wrong alignment on AJBHighlightManager_SetFocusStand");
static_assert(sizeof(AJBHighlightManager_SetFocusStand) == 0x000010, "Wrong size on AJBHighlightManager_SetFocusStand");
static_assert(offsetof(AJBHighlightManager_SetFocusStand, Actor) == 0x000000, "Member 'AJBHighlightManager_SetFocusStand::Actor' has a wrong offset!");
static_assert(offsetof(AJBHighlightManager_SetFocusStand, ReturnValue) == 0x000008, "Member 'AJBHighlightManager_SetFocusStand::ReturnValue' has a wrong offset!");

// Function AJB.AJBHighlightManager.SetHighlightReady
// 0x0001 (0x0001 - 0x0000)
struct AJBHighlightManager_SetHighlightReady final
{
public:
	bool                                          bReady;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHighlightManager_SetHighlightReady) == 0x000001, "Wrong alignment on AJBHighlightManager_SetHighlightReady");
static_assert(sizeof(AJBHighlightManager_SetHighlightReady) == 0x000001, "Wrong size on AJBHighlightManager_SetHighlightReady");
static_assert(offsetof(AJBHighlightManager_SetHighlightReady, bReady) == 0x000000, "Member 'AJBHighlightManager_SetHighlightReady::bReady' has a wrong offset!");

// Function AJB.AJBHighlightManager.SetPauseState
// 0x0018 (0x0018 - 0x0000)
struct AJBHighlightManager_SetPauseState final
{
public:
	bool                                          bDoPause;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      Causer;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBHighlightManager_SetPauseState) == 0x000008, "Wrong alignment on AJBHighlightManager_SetPauseState");
static_assert(sizeof(AJBHighlightManager_SetPauseState) == 0x000018, "Wrong size on AJBHighlightManager_SetPauseState");
static_assert(offsetof(AJBHighlightManager_SetPauseState, bDoPause) == 0x000000, "Member 'AJBHighlightManager_SetPauseState::bDoPause' has a wrong offset!");
static_assert(offsetof(AJBHighlightManager_SetPauseState, Causer) == 0x000008, "Member 'AJBHighlightManager_SetPauseState::Causer' has a wrong offset!");
static_assert(offsetof(AJBHighlightManager_SetPauseState, ReturnValue) == 0x000010, "Member 'AJBHighlightManager_SetPauseState::ReturnValue' has a wrong offset!");

// Function AJB.AJBHighlightManager.SetTargetSeconds
// 0x0008 (0x0008 - 0x0000)
struct AJBHighlightManager_SetTargetSeconds final
{
public:
	float                                         TargetSeconds;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SeekTargetSeconds;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBHighlightManager_SetTargetSeconds) == 0x000004, "Wrong alignment on AJBHighlightManager_SetTargetSeconds");
static_assert(sizeof(AJBHighlightManager_SetTargetSeconds) == 0x000008, "Wrong size on AJBHighlightManager_SetTargetSeconds");
static_assert(offsetof(AJBHighlightManager_SetTargetSeconds, TargetSeconds) == 0x000000, "Member 'AJBHighlightManager_SetTargetSeconds::TargetSeconds' has a wrong offset!");
static_assert(offsetof(AJBHighlightManager_SetTargetSeconds, SeekTargetSeconds) == 0x000004, "Member 'AJBHighlightManager_SetTargetSeconds::SeekTargetSeconds' has a wrong offset!");

// Function AJB.AJBIcmpPing.Request_Ping
// 0x0028 (0x0028 - 0x0000)
struct AJBIcmpPing_Request_Ping final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetAddress;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBIcmpPing*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBIcmpPing_Request_Ping) == 0x000008, "Wrong alignment on AJBIcmpPing_Request_Ping");
static_assert(sizeof(AJBIcmpPing_Request_Ping) == 0x000028, "Wrong size on AJBIcmpPing_Request_Ping");
static_assert(offsetof(AJBIcmpPing_Request_Ping, WorldContextObject) == 0x000000, "Member 'AJBIcmpPing_Request_Ping::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBIcmpPing_Request_Ping, TargetAddress) == 0x000008, "Member 'AJBIcmpPing_Request_Ping::TargetAddress' has a wrong offset!");
static_assert(offsetof(AJBIcmpPing_Request_Ping, Timeout) == 0x000018, "Member 'AJBIcmpPing_Request_Ping::Timeout' has a wrong offset!");
static_assert(offsetof(AJBIcmpPing_Request_Ping, ReturnValue) == 0x000020, "Member 'AJBIcmpPing_Request_Ping::ReturnValue' has a wrong offset!");

// DelegateFunction AJB.AJBIcmpPing.AJBIcmpPingResponse__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct AJBIcmpPing_AJBIcmpPingResponse__DelegateSignature final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBIcmpPing_AJBIcmpPingResponse__DelegateSignature) == 0x000001, "Wrong alignment on AJBIcmpPing_AJBIcmpPingResponse__DelegateSignature");
static_assert(sizeof(AJBIcmpPing_AJBIcmpPingResponse__DelegateSignature) == 0x000001, "Wrong size on AJBIcmpPing_AJBIcmpPingResponse__DelegateSignature");
static_assert(offsetof(AJBIcmpPing_AJBIcmpPingResponse__DelegateSignature, Result) == 0x000000, "Member 'AJBIcmpPing_AJBIcmpPingResponse__DelegateSignature::Result' has a wrong offset!");

// Function AJB.AJBInGameServerInfo.InitializeConnection
// 0x0008 (0x0008 - 0x0000)
struct AJBInGameServerInfo_InitializeConnection final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameServerInfo_InitializeConnection) == 0x000008, "Wrong alignment on AJBInGameServerInfo_InitializeConnection");
static_assert(sizeof(AJBInGameServerInfo_InitializeConnection) == 0x000008, "Wrong size on AJBInGameServerInfo_InitializeConnection");
static_assert(offsetof(AJBInGameServerInfo_InitializeConnection, WorldContextObject) == 0x000000, "Member 'AJBInGameServerInfo_InitializeConnection::WorldContextObject' has a wrong offset!");

// Function AJB.AJBInGameServerInfo.IsEnableRedis
// 0x0010 (0x0010 - 0x0000)
struct AJBInGameServerInfo_IsEnableRedis final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBInGameServerInfo_IsEnableRedis) == 0x000008, "Wrong alignment on AJBInGameServerInfo_IsEnableRedis");
static_assert(sizeof(AJBInGameServerInfo_IsEnableRedis) == 0x000010, "Wrong size on AJBInGameServerInfo_IsEnableRedis");
static_assert(offsetof(AJBInGameServerInfo_IsEnableRedis, WorldContextObject) == 0x000000, "Member 'AJBInGameServerInfo_IsEnableRedis::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBInGameServerInfo_IsEnableRedis, ReturnValue) == 0x000008, "Member 'AJBInGameServerInfo_IsEnableRedis::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameServerInfo.IsInitializedNPC
// 0x0010 (0x0010 - 0x0000)
struct AJBInGameServerInfo_IsInitializedNPC final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBInGameServerInfo_IsInitializedNPC) == 0x000008, "Wrong alignment on AJBInGameServerInfo_IsInitializedNPC");
static_assert(sizeof(AJBInGameServerInfo_IsInitializedNPC) == 0x000010, "Wrong size on AJBInGameServerInfo_IsInitializedNPC");
static_assert(offsetof(AJBInGameServerInfo_IsInitializedNPC, WorldContextObject) == 0x000000, "Member 'AJBInGameServerInfo_IsInitializedNPC::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBInGameServerInfo_IsInitializedNPC, ReturnValue) == 0x000008, "Member 'AJBInGameServerInfo_IsInitializedNPC::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameServerInfo.OutputLogServer
// 0x0018 (0x0018 - 0x0000)
struct AJBInGameServerInfo_OutputLogServer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Log;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameServerInfo_OutputLogServer) == 0x000008, "Wrong alignment on AJBInGameServerInfo_OutputLogServer");
static_assert(sizeof(AJBInGameServerInfo_OutputLogServer) == 0x000018, "Wrong size on AJBInGameServerInfo_OutputLogServer");
static_assert(offsetof(AJBInGameServerInfo_OutputLogServer, WorldContextObject) == 0x000000, "Member 'AJBInGameServerInfo_OutputLogServer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBInGameServerInfo_OutputLogServer, Log) == 0x000008, "Member 'AJBInGameServerInfo_OutputLogServer::Log' has a wrong offset!");

// Function AJB.AJBInGameServerInfo.OutputLogStatus
// 0x0008 (0x0008 - 0x0000)
struct AJBInGameServerInfo_OutputLogStatus final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameServerInfo_OutputLogStatus) == 0x000008, "Wrong alignment on AJBInGameServerInfo_OutputLogStatus");
static_assert(sizeof(AJBInGameServerInfo_OutputLogStatus) == 0x000008, "Wrong size on AJBInGameServerInfo_OutputLogStatus");
static_assert(offsetof(AJBInGameServerInfo_OutputLogStatus, WorldContextObject) == 0x000000, "Member 'AJBInGameServerInfo_OutputLogStatus::WorldContextObject' has a wrong offset!");

// Function AJB.AJBInGameServerInfo.RunServerConsoleCmd
// 0x0018 (0x0018 - 0x0000)
struct AJBInGameServerInfo_RunServerConsoleCmd final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Cmd;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameServerInfo_RunServerConsoleCmd) == 0x000008, "Wrong alignment on AJBInGameServerInfo_RunServerConsoleCmd");
static_assert(sizeof(AJBInGameServerInfo_RunServerConsoleCmd) == 0x000018, "Wrong size on AJBInGameServerInfo_RunServerConsoleCmd");
static_assert(offsetof(AJBInGameServerInfo_RunServerConsoleCmd, WorldContextObject) == 0x000000, "Member 'AJBInGameServerInfo_RunServerConsoleCmd::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBInGameServerInfo_RunServerConsoleCmd, Cmd) == 0x000008, "Member 'AJBInGameServerInfo_RunServerConsoleCmd::Cmd' has a wrong offset!");

// Function AJB.AJBInGameServerInfo.SendCommand_DEL_GD_COMMAND
// 0x0008 (0x0008 - 0x0000)
struct AJBInGameServerInfo_SendCommand_DEL_GD_COMMAND final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameServerInfo_SendCommand_DEL_GD_COMMAND) == 0x000008, "Wrong alignment on AJBInGameServerInfo_SendCommand_DEL_GD_COMMAND");
static_assert(sizeof(AJBInGameServerInfo_SendCommand_DEL_GD_COMMAND) == 0x000008, "Wrong size on AJBInGameServerInfo_SendCommand_DEL_GD_COMMAND");
static_assert(offsetof(AJBInGameServerInfo_SendCommand_DEL_GD_COMMAND, WorldContextObject) == 0x000000, "Member 'AJBInGameServerInfo_SendCommand_DEL_GD_COMMAND::WorldContextObject' has a wrong offset!");

// Function AJB.AJBInGameServerInfo.SendCommand_EXPIRE_DG_STATUS
// 0x0008 (0x0008 - 0x0000)
struct AJBInGameServerInfo_SendCommand_EXPIRE_DG_STATUS final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameServerInfo_SendCommand_EXPIRE_DG_STATUS) == 0x000008, "Wrong alignment on AJBInGameServerInfo_SendCommand_EXPIRE_DG_STATUS");
static_assert(sizeof(AJBInGameServerInfo_SendCommand_EXPIRE_DG_STATUS) == 0x000008, "Wrong size on AJBInGameServerInfo_SendCommand_EXPIRE_DG_STATUS");
static_assert(offsetof(AJBInGameServerInfo_SendCommand_EXPIRE_DG_STATUS, WorldContextObject) == 0x000000, "Member 'AJBInGameServerInfo_SendCommand_EXPIRE_DG_STATUS::WorldContextObject' has a wrong offset!");

// Function AJB.AJBInGameServerInfo.SendCommand_GET_GD_COMMAND
// 0x0008 (0x0008 - 0x0000)
struct AJBInGameServerInfo_SendCommand_GET_GD_COMMAND final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameServerInfo_SendCommand_GET_GD_COMMAND) == 0x000008, "Wrong alignment on AJBInGameServerInfo_SendCommand_GET_GD_COMMAND");
static_assert(sizeof(AJBInGameServerInfo_SendCommand_GET_GD_COMMAND) == 0x000008, "Wrong size on AJBInGameServerInfo_SendCommand_GET_GD_COMMAND");
static_assert(offsetof(AJBInGameServerInfo_SendCommand_GET_GD_COMMAND, WorldContextObject) == 0x000000, "Member 'AJBInGameServerInfo_SendCommand_GET_GD_COMMAND::WorldContextObject' has a wrong offset!");

// Function AJB.AJBInGameServerInfo.SendCommand_SET_DG_STATUS
// 0x0010 (0x0010 - 0x0000)
struct AJBInGameServerInfo_SendCommand_SET_DG_STATUS final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInGameServerStatus                           Status;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBInGameServerInfo_SendCommand_SET_DG_STATUS) == 0x000008, "Wrong alignment on AJBInGameServerInfo_SendCommand_SET_DG_STATUS");
static_assert(sizeof(AJBInGameServerInfo_SendCommand_SET_DG_STATUS) == 0x000010, "Wrong size on AJBInGameServerInfo_SendCommand_SET_DG_STATUS");
static_assert(offsetof(AJBInGameServerInfo_SendCommand_SET_DG_STATUS, WorldContextObject) == 0x000000, "Member 'AJBInGameServerInfo_SendCommand_SET_DG_STATUS::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBInGameServerInfo_SendCommand_SET_DG_STATUS, Status) == 0x000008, "Member 'AJBInGameServerInfo_SendCommand_SET_DG_STATUS::Status' has a wrong offset!");

// Function AJB.AJBInGameServerInfo.SetDG_STATUS_ExpireSeconds
// 0x0010 (0x0010 - 0x0000)
struct AJBInGameServerInfo_SetDG_STATUS_ExpireSeconds final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Seconds;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBInGameServerInfo_SetDG_STATUS_ExpireSeconds) == 0x000008, "Wrong alignment on AJBInGameServerInfo_SetDG_STATUS_ExpireSeconds");
static_assert(sizeof(AJBInGameServerInfo_SetDG_STATUS_ExpireSeconds) == 0x000010, "Wrong size on AJBInGameServerInfo_SetDG_STATUS_ExpireSeconds");
static_assert(offsetof(AJBInGameServerInfo_SetDG_STATUS_ExpireSeconds, WorldContextObject) == 0x000000, "Member 'AJBInGameServerInfo_SetDG_STATUS_ExpireSeconds::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBInGameServerInfo_SetDG_STATUS_ExpireSeconds, Seconds) == 0x000008, "Member 'AJBInGameServerInfo_SetDG_STATUS_ExpireSeconds::Seconds' has a wrong offset!");

// Function AJB.AJBInGameServerInfo.SetEnableRedis
// 0x0010 (0x0010 - 0x0000)
struct AJBInGameServerInfo_SetEnableRedis final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnable;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBInGameServerInfo_SetEnableRedis) == 0x000008, "Wrong alignment on AJBInGameServerInfo_SetEnableRedis");
static_assert(sizeof(AJBInGameServerInfo_SetEnableRedis) == 0x000010, "Wrong size on AJBInGameServerInfo_SetEnableRedis");
static_assert(offsetof(AJBInGameServerInfo_SetEnableRedis, WorldContextObject) == 0x000000, "Member 'AJBInGameServerInfo_SetEnableRedis::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBInGameServerInfo_SetEnableRedis, bIsEnable) == 0x000008, "Member 'AJBInGameServerInfo_SetEnableRedis::bIsEnable' has a wrong offset!");

// Function AJB.AJBInGameServerInfo.Response_DEL_GD_COMMAND
// 0x0020 (0x0020 - 0x0000)
struct AJBInGameServerInfo_Response_DEL_GD_COMMAND final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Data;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBInGameServerInfo_Response_DEL_GD_COMMAND) == 0x000008, "Wrong alignment on AJBInGameServerInfo_Response_DEL_GD_COMMAND");
static_assert(sizeof(AJBInGameServerInfo_Response_DEL_GD_COMMAND) == 0x000020, "Wrong size on AJBInGameServerInfo_Response_DEL_GD_COMMAND");
static_assert(offsetof(AJBInGameServerInfo_Response_DEL_GD_COMMAND, Result) == 0x000000, "Member 'AJBInGameServerInfo_Response_DEL_GD_COMMAND::Result' has a wrong offset!");
static_assert(offsetof(AJBInGameServerInfo_Response_DEL_GD_COMMAND, Data) == 0x000008, "Member 'AJBInGameServerInfo_Response_DEL_GD_COMMAND::Data' has a wrong offset!");
static_assert(offsetof(AJBInGameServerInfo_Response_DEL_GD_COMMAND, ReturnValue) == 0x000018, "Member 'AJBInGameServerInfo_Response_DEL_GD_COMMAND::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameServerInfo.Response_EXPIRE_DG_STATUS
// 0x0020 (0x0020 - 0x0000)
struct AJBInGameServerInfo_Response_EXPIRE_DG_STATUS final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Data;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBInGameServerInfo_Response_EXPIRE_DG_STATUS) == 0x000008, "Wrong alignment on AJBInGameServerInfo_Response_EXPIRE_DG_STATUS");
static_assert(sizeof(AJBInGameServerInfo_Response_EXPIRE_DG_STATUS) == 0x000020, "Wrong size on AJBInGameServerInfo_Response_EXPIRE_DG_STATUS");
static_assert(offsetof(AJBInGameServerInfo_Response_EXPIRE_DG_STATUS, Result) == 0x000000, "Member 'AJBInGameServerInfo_Response_EXPIRE_DG_STATUS::Result' has a wrong offset!");
static_assert(offsetof(AJBInGameServerInfo_Response_EXPIRE_DG_STATUS, Data) == 0x000008, "Member 'AJBInGameServerInfo_Response_EXPIRE_DG_STATUS::Data' has a wrong offset!");
static_assert(offsetof(AJBInGameServerInfo_Response_EXPIRE_DG_STATUS, ReturnValue) == 0x000018, "Member 'AJBInGameServerInfo_Response_EXPIRE_DG_STATUS::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameServerInfo.Response_GET_GD_COMMAND
// 0x0020 (0x0020 - 0x0000)
struct AJBInGameServerInfo_Response_GET_GD_COMMAND final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Data;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBInGameServerInfo_Response_GET_GD_COMMAND) == 0x000008, "Wrong alignment on AJBInGameServerInfo_Response_GET_GD_COMMAND");
static_assert(sizeof(AJBInGameServerInfo_Response_GET_GD_COMMAND) == 0x000020, "Wrong size on AJBInGameServerInfo_Response_GET_GD_COMMAND");
static_assert(offsetof(AJBInGameServerInfo_Response_GET_GD_COMMAND, Result) == 0x000000, "Member 'AJBInGameServerInfo_Response_GET_GD_COMMAND::Result' has a wrong offset!");
static_assert(offsetof(AJBInGameServerInfo_Response_GET_GD_COMMAND, Data) == 0x000008, "Member 'AJBInGameServerInfo_Response_GET_GD_COMMAND::Data' has a wrong offset!");
static_assert(offsetof(AJBInGameServerInfo_Response_GET_GD_COMMAND, ReturnValue) == 0x000018, "Member 'AJBInGameServerInfo_Response_GET_GD_COMMAND::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameServerInfo.Response_SET_DG_STATUS
// 0x0020 (0x0020 - 0x0000)
struct AJBInGameServerInfo_Response_SET_DG_STATUS final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Data;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBInGameServerInfo_Response_SET_DG_STATUS) == 0x000008, "Wrong alignment on AJBInGameServerInfo_Response_SET_DG_STATUS");
static_assert(sizeof(AJBInGameServerInfo_Response_SET_DG_STATUS) == 0x000020, "Wrong size on AJBInGameServerInfo_Response_SET_DG_STATUS");
static_assert(offsetof(AJBInGameServerInfo_Response_SET_DG_STATUS, Result) == 0x000000, "Member 'AJBInGameServerInfo_Response_SET_DG_STATUS::Result' has a wrong offset!");
static_assert(offsetof(AJBInGameServerInfo_Response_SET_DG_STATUS, Data) == 0x000008, "Member 'AJBInGameServerInfo_Response_SET_DG_STATUS::Data' has a wrong offset!");
static_assert(offsetof(AJBInGameServerInfo_Response_SET_DG_STATUS, ReturnValue) == 0x000018, "Member 'AJBInGameServerInfo_Response_SET_DG_STATUS::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameSkillComponent.CanUseSkill
// 0x0028 (0x0028 - 0x0000)
struct AJBInGameSkillComponent_CanUseSkill final
{
public:
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0000(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBInGameSkillComponent_CanUseSkill) == 0x000008, "Wrong alignment on AJBInGameSkillComponent_CanUseSkill");
static_assert(sizeof(AJBInGameSkillComponent_CanUseSkill) == 0x000028, "Wrong size on AJBInGameSkillComponent_CanUseSkill");
static_assert(offsetof(AJBInGameSkillComponent_CanUseSkill, TagContainer) == 0x000000, "Member 'AJBInGameSkillComponent_CanUseSkill::TagContainer' has a wrong offset!");
static_assert(offsetof(AJBInGameSkillComponent_CanUseSkill, ReturnValue) == 0x000020, "Member 'AJBInGameSkillComponent_CanUseSkill::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameSkillComponent.CheckSkillAction
// 0x0001 (0x0001 - 0x0000)
struct AJBInGameSkillComponent_CheckSkillAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameSkillComponent_CheckSkillAction) == 0x000001, "Wrong alignment on AJBInGameSkillComponent_CheckSkillAction");
static_assert(sizeof(AJBInGameSkillComponent_CheckSkillAction) == 0x000001, "Wrong size on AJBInGameSkillComponent_CheckSkillAction");
static_assert(offsetof(AJBInGameSkillComponent_CheckSkillAction, ReturnValue) == 0x000000, "Member 'AJBInGameSkillComponent_CheckSkillAction::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameSkillComponent.GetComponentUniqueID
// 0x0004 (0x0004 - 0x0000)
struct AJBInGameSkillComponent_GetComponentUniqueID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameSkillComponent_GetComponentUniqueID) == 0x000004, "Wrong alignment on AJBInGameSkillComponent_GetComponentUniqueID");
static_assert(sizeof(AJBInGameSkillComponent_GetComponentUniqueID) == 0x000004, "Wrong size on AJBInGameSkillComponent_GetComponentUniqueID");
static_assert(offsetof(AJBInGameSkillComponent_GetComponentUniqueID, ReturnValue) == 0x000000, "Member 'AJBInGameSkillComponent_GetComponentUniqueID::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameSkillComponent.GetOwnerCharacter
// 0x0008 (0x0008 - 0x0000)
struct AJBInGameSkillComponent_GetOwnerCharacter final
{
public:
	class AAJBInGameCharacterBase*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameSkillComponent_GetOwnerCharacter) == 0x000008, "Wrong alignment on AJBInGameSkillComponent_GetOwnerCharacter");
static_assert(sizeof(AJBInGameSkillComponent_GetOwnerCharacter) == 0x000008, "Wrong size on AJBInGameSkillComponent_GetOwnerCharacter");
static_assert(offsetof(AJBInGameSkillComponent_GetOwnerCharacter, ReturnValue) == 0x000000, "Member 'AJBInGameSkillComponent_GetOwnerCharacter::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameSkillComponent.GetOwnerMovableStand
// 0x0008 (0x0008 - 0x0000)
struct AJBInGameSkillComponent_GetOwnerMovableStand final
{
public:
	class AAJBInGameMovableStand*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameSkillComponent_GetOwnerMovableStand) == 0x000008, "Wrong alignment on AJBInGameSkillComponent_GetOwnerMovableStand");
static_assert(sizeof(AJBInGameSkillComponent_GetOwnerMovableStand) == 0x000008, "Wrong size on AJBInGameSkillComponent_GetOwnerMovableStand");
static_assert(offsetof(AJBInGameSkillComponent_GetOwnerMovableStand, ReturnValue) == 0x000000, "Member 'AJBInGameSkillComponent_GetOwnerMovableStand::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameSkillComponent.GetOwnerStand
// 0x0008 (0x0008 - 0x0000)
struct AJBInGameSkillComponent_GetOwnerStand final
{
public:
	class AAJBInGameStand*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameSkillComponent_GetOwnerStand) == 0x000008, "Wrong alignment on AJBInGameSkillComponent_GetOwnerStand");
static_assert(sizeof(AJBInGameSkillComponent_GetOwnerStand) == 0x000008, "Wrong size on AJBInGameSkillComponent_GetOwnerStand");
static_assert(offsetof(AJBInGameSkillComponent_GetOwnerStand, ReturnValue) == 0x000000, "Member 'AJBInGameSkillComponent_GetOwnerStand::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameSkillComponent.InactiveSkill
// 0x0001 (0x0001 - 0x0000)
struct AJBInGameSkillComponent_InactiveSkill final
{
public:
	bool                                          bForce;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameSkillComponent_InactiveSkill) == 0x000001, "Wrong alignment on AJBInGameSkillComponent_InactiveSkill");
static_assert(sizeof(AJBInGameSkillComponent_InactiveSkill) == 0x000001, "Wrong size on AJBInGameSkillComponent_InactiveSkill");
static_assert(offsetof(AJBInGameSkillComponent_InactiveSkill, bForce) == 0x000000, "Member 'AJBInGameSkillComponent_InactiveSkill::bForce' has a wrong offset!");

// Function AJB.AJBInGameSkillComponent.MC_NotifyActive
// 0x0001 (0x0001 - 0x0000)
struct AJBInGameSkillComponent_MC_NotifyActive final
{
public:
	bool                                          bInActive;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameSkillComponent_MC_NotifyActive) == 0x000001, "Wrong alignment on AJBInGameSkillComponent_MC_NotifyActive");
static_assert(sizeof(AJBInGameSkillComponent_MC_NotifyActive) == 0x000001, "Wrong size on AJBInGameSkillComponent_MC_NotifyActive");
static_assert(offsetof(AJBInGameSkillComponent_MC_NotifyActive, bInActive) == 0x000000, "Member 'AJBInGameSkillComponent_MC_NotifyActive::bInActive' has a wrong offset!");

// Function AJB.AJBInGameSkillComponent.RegisterSkillWidget
// 0x0008 (0x0008 - 0x0000)
struct AJBInGameSkillComponent_RegisterSkillWidget final
{
public:
	class UAJBInGameSkillWidget*                  RegisterSkillWidget_0;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameSkillComponent_RegisterSkillWidget) == 0x000008, "Wrong alignment on AJBInGameSkillComponent_RegisterSkillWidget");
static_assert(sizeof(AJBInGameSkillComponent_RegisterSkillWidget) == 0x000008, "Wrong size on AJBInGameSkillComponent_RegisterSkillWidget");
static_assert(offsetof(AJBInGameSkillComponent_RegisterSkillWidget, RegisterSkillWidget_0) == 0x000000, "Member 'AJBInGameSkillComponent_RegisterSkillWidget::RegisterSkillWidget_0' has a wrong offset!");

// Function AJB.AJBInGameSkillComponent.ROS_SetSkillActive
// 0x0001 (0x0001 - 0x0000)
struct AJBInGameSkillComponent_ROS_SetSkillActive final
{
public:
	bool                                          bInActive;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameSkillComponent_ROS_SetSkillActive) == 0x000001, "Wrong alignment on AJBInGameSkillComponent_ROS_SetSkillActive");
static_assert(sizeof(AJBInGameSkillComponent_ROS_SetSkillActive) == 0x000001, "Wrong size on AJBInGameSkillComponent_ROS_SetSkillActive");
static_assert(offsetof(AJBInGameSkillComponent_ROS_SetSkillActive, bInActive) == 0x000000, "Member 'AJBInGameSkillComponent_ROS_SetSkillActive::bInActive' has a wrong offset!");

// Function AJB.AJBInGameSkillComponent.IsInPreview
// 0x0001 (0x0001 - 0x0000)
struct AJBInGameSkillComponent_IsInPreview final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameSkillComponent_IsInPreview) == 0x000001, "Wrong alignment on AJBInGameSkillComponent_IsInPreview");
static_assert(sizeof(AJBInGameSkillComponent_IsInPreview) == 0x000001, "Wrong size on AJBInGameSkillComponent_IsInPreview");
static_assert(offsetof(AJBInGameSkillComponent_IsInPreview, ReturnValue) == 0x000000, "Member 'AJBInGameSkillComponent_IsInPreview::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameSkillComponent.IsSkillActive
// 0x0003 (0x0003 - 0x0000)
struct AJBInGameSkillComponent_IsSkillActive final
{
public:
	bool                                          bIncludeReady;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludePreview;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameSkillComponent_IsSkillActive) == 0x000001, "Wrong alignment on AJBInGameSkillComponent_IsSkillActive");
static_assert(sizeof(AJBInGameSkillComponent_IsSkillActive) == 0x000003, "Wrong size on AJBInGameSkillComponent_IsSkillActive");
static_assert(offsetof(AJBInGameSkillComponent_IsSkillActive, bIncludeReady) == 0x000000, "Member 'AJBInGameSkillComponent_IsSkillActive::bIncludeReady' has a wrong offset!");
static_assert(offsetof(AJBInGameSkillComponent_IsSkillActive, bIncludePreview) == 0x000001, "Member 'AJBInGameSkillComponent_IsSkillActive::bIncludePreview' has a wrong offset!");
static_assert(offsetof(AJBInGameSkillComponent_IsSkillActive, ReturnValue) == 0x000002, "Member 'AJBInGameSkillComponent_IsSkillActive::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameSkillWidget.OnOutsideComponentUpdate
// 0x0004 (0x0004 - 0x0000)
struct AJBInGameSkillWidget_OnOutsideComponentUpdate final
{
public:
	float                                         InDeltaTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameSkillWidget_OnOutsideComponentUpdate) == 0x000004, "Wrong alignment on AJBInGameSkillWidget_OnOutsideComponentUpdate");
static_assert(sizeof(AJBInGameSkillWidget_OnOutsideComponentUpdate) == 0x000004, "Wrong size on AJBInGameSkillWidget_OnOutsideComponentUpdate");
static_assert(offsetof(AJBInGameSkillWidget_OnOutsideComponentUpdate, InDeltaTime) == 0x000000, "Member 'AJBInGameSkillWidget_OnOutsideComponentUpdate::InDeltaTime' has a wrong offset!");

// Function AJB.AJBInGameSkillWidget.OnOwnerSkillStateChanged
// 0x0002 (0x0002 - 0x0000)
struct AJBInGameSkillWidget_OnOwnerSkillStateChanged final
{
public:
	uint8                                         NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PreState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameSkillWidget_OnOwnerSkillStateChanged) == 0x000001, "Wrong alignment on AJBInGameSkillWidget_OnOwnerSkillStateChanged");
static_assert(sizeof(AJBInGameSkillWidget_OnOwnerSkillStateChanged) == 0x000002, "Wrong size on AJBInGameSkillWidget_OnOwnerSkillStateChanged");
static_assert(offsetof(AJBInGameSkillWidget_OnOwnerSkillStateChanged, NewState) == 0x000000, "Member 'AJBInGameSkillWidget_OnOwnerSkillStateChanged::NewState' has a wrong offset!");
static_assert(offsetof(AJBInGameSkillWidget_OnOwnerSkillStateChanged, PreState) == 0x000001, "Member 'AJBInGameSkillWidget_OnOwnerSkillStateChanged::PreState' has a wrong offset!");

// Function AJB.AJBInGameSpeedTreeWindBlower.UpdateSpeedTreeWind
// 0x0004 (0x0004 - 0x0000)
struct AJBInGameSpeedTreeWindBlower_UpdateSpeedTreeWind final
{
public:
	float                                         TimeSeconds;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameSpeedTreeWindBlower_UpdateSpeedTreeWind) == 0x000004, "Wrong alignment on AJBInGameSpeedTreeWindBlower_UpdateSpeedTreeWind");
static_assert(sizeof(AJBInGameSpeedTreeWindBlower_UpdateSpeedTreeWind) == 0x000004, "Wrong size on AJBInGameSpeedTreeWindBlower_UpdateSpeedTreeWind");
static_assert(offsetof(AJBInGameSpeedTreeWindBlower_UpdateSpeedTreeWind, TimeSeconds) == 0x000000, "Member 'AJBInGameSpeedTreeWindBlower_UpdateSpeedTreeWind::TimeSeconds' has a wrong offset!");

// Function AJB.AJBInGameStand.CleanUp
// 0x0001 (0x0001 - 0x0000)
struct AJBInGameStand_CleanUp final
{
public:
	bool                                          bShouldDestroy;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameStand_CleanUp) == 0x000001, "Wrong alignment on AJBInGameStand_CleanUp");
static_assert(sizeof(AJBInGameStand_CleanUp) == 0x000001, "Wrong size on AJBInGameStand_CleanUp");
static_assert(offsetof(AJBInGameStand_CleanUp, bShouldDestroy) == 0x000000, "Member 'AJBInGameStand_CleanUp::bShouldDestroy' has a wrong offset!");

// Function AJB.AJBInGameStand.MC_NotifyTransitionChanged
// 0x0003 (0x0003 - 0x0000)
struct AJBInGameStand_MC_NotifyTransitionChanged final
{
public:
	EStandAccompanyTransition                     PrevTransition;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStandAccompanyTransition                     NextTransition;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBySeparate;                                       // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameStand_MC_NotifyTransitionChanged) == 0x000001, "Wrong alignment on AJBInGameStand_MC_NotifyTransitionChanged");
static_assert(sizeof(AJBInGameStand_MC_NotifyTransitionChanged) == 0x000003, "Wrong size on AJBInGameStand_MC_NotifyTransitionChanged");
static_assert(offsetof(AJBInGameStand_MC_NotifyTransitionChanged, PrevTransition) == 0x000000, "Member 'AJBInGameStand_MC_NotifyTransitionChanged::PrevTransition' has a wrong offset!");
static_assert(offsetof(AJBInGameStand_MC_NotifyTransitionChanged, NextTransition) == 0x000001, "Member 'AJBInGameStand_MC_NotifyTransitionChanged::NextTransition' has a wrong offset!");
static_assert(offsetof(AJBInGameStand_MC_NotifyTransitionChanged, bBySeparate) == 0x000002, "Member 'AJBInGameStand_MC_NotifyTransitionChanged::bBySeparate' has a wrong offset!");

// Function AJB.AJBInGameStand.OnTransitionChanged
// 0x0003 (0x0003 - 0x0000)
struct AJBInGameStand_OnTransitionChanged final
{
public:
	EStandAccompanyTransition                     PrevTransition;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStandAccompanyTransition                     NextTransition;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBySeparate;                                       // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameStand_OnTransitionChanged) == 0x000001, "Wrong alignment on AJBInGameStand_OnTransitionChanged");
static_assert(sizeof(AJBInGameStand_OnTransitionChanged) == 0x000003, "Wrong size on AJBInGameStand_OnTransitionChanged");
static_assert(offsetof(AJBInGameStand_OnTransitionChanged, PrevTransition) == 0x000000, "Member 'AJBInGameStand_OnTransitionChanged::PrevTransition' has a wrong offset!");
static_assert(offsetof(AJBInGameStand_OnTransitionChanged, NextTransition) == 0x000001, "Member 'AJBInGameStand_OnTransitionChanged::NextTransition' has a wrong offset!");
static_assert(offsetof(AJBInGameStand_OnTransitionChanged, bBySeparate) == 0x000002, "Member 'AJBInGameStand_OnTransitionChanged::bBySeparate' has a wrong offset!");

// Function AJB.AJBInGameStand.ROS_SetAccompanyTransition
// 0x0003 (0x0003 - 0x0000)
struct AJBInGameStand_ROS_SetAccompanyTransition final
{
public:
	EStandAccompanyTransition                     PrevTransition;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStandAccompanyTransition                     NextTransition;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBySeparate;                                       // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameStand_ROS_SetAccompanyTransition) == 0x000001, "Wrong alignment on AJBInGameStand_ROS_SetAccompanyTransition");
static_assert(sizeof(AJBInGameStand_ROS_SetAccompanyTransition) == 0x000003, "Wrong size on AJBInGameStand_ROS_SetAccompanyTransition");
static_assert(offsetof(AJBInGameStand_ROS_SetAccompanyTransition, PrevTransition) == 0x000000, "Member 'AJBInGameStand_ROS_SetAccompanyTransition::PrevTransition' has a wrong offset!");
static_assert(offsetof(AJBInGameStand_ROS_SetAccompanyTransition, NextTransition) == 0x000001, "Member 'AJBInGameStand_ROS_SetAccompanyTransition::NextTransition' has a wrong offset!");
static_assert(offsetof(AJBInGameStand_ROS_SetAccompanyTransition, bBySeparate) == 0x000002, "Member 'AJBInGameStand_ROS_SetAccompanyTransition::bBySeparate' has a wrong offset!");

// Function AJB.AJBInGameStand.SetAccompanyTransition
// 0x0002 (0x0002 - 0x0000)
struct AJBInGameStand_SetAccompanyTransition final
{
public:
	EStandAccompanyTransition                     NextTransition;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBySeparate;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameStand_SetAccompanyTransition) == 0x000001, "Wrong alignment on AJBInGameStand_SetAccompanyTransition");
static_assert(sizeof(AJBInGameStand_SetAccompanyTransition) == 0x000002, "Wrong size on AJBInGameStand_SetAccompanyTransition");
static_assert(offsetof(AJBInGameStand_SetAccompanyTransition, NextTransition) == 0x000000, "Member 'AJBInGameStand_SetAccompanyTransition::NextTransition' has a wrong offset!");
static_assert(offsetof(AJBInGameStand_SetAccompanyTransition, bBySeparate) == 0x000001, "Member 'AJBInGameStand_SetAccompanyTransition::bBySeparate' has a wrong offset!");

// Function AJB.AJBInGameStand.SetAccompanyTransitionAll
// 0x0002 (0x0002 - 0x0000)
struct AJBInGameStand_SetAccompanyTransitionAll final
{
public:
	EStandAccompanyTransition                     NextTransition;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBySeparate;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameStand_SetAccompanyTransitionAll) == 0x000001, "Wrong alignment on AJBInGameStand_SetAccompanyTransitionAll");
static_assert(sizeof(AJBInGameStand_SetAccompanyTransitionAll) == 0x000002, "Wrong size on AJBInGameStand_SetAccompanyTransitionAll");
static_assert(offsetof(AJBInGameStand_SetAccompanyTransitionAll, NextTransition) == 0x000000, "Member 'AJBInGameStand_SetAccompanyTransitionAll::NextTransition' has a wrong offset!");
static_assert(offsetof(AJBInGameStand_SetAccompanyTransitionAll, bBySeparate) == 0x000001, "Member 'AJBInGameStand_SetAccompanyTransitionAll::bBySeparate' has a wrong offset!");

// Function AJB.AJBInGameStand.SetMatchingPlayerIndex
// 0x0004 (0x0004 - 0x0000)
struct AJBInGameStand_SetMatchingPlayerIndex final
{
public:
	int32                                         NewMatchingPlayerIndex;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameStand_SetMatchingPlayerIndex) == 0x000004, "Wrong alignment on AJBInGameStand_SetMatchingPlayerIndex");
static_assert(sizeof(AJBInGameStand_SetMatchingPlayerIndex) == 0x000004, "Wrong size on AJBInGameStand_SetMatchingPlayerIndex");
static_assert(offsetof(AJBInGameStand_SetMatchingPlayerIndex, NewMatchingPlayerIndex) == 0x000000, "Member 'AJBInGameStand_SetMatchingPlayerIndex::NewMatchingPlayerIndex' has a wrong offset!");

// Function AJB.AJBInGameStand.GetOwnerCharacterMovableStand
// 0x0010 (0x0010 - 0x0000)
struct AJBInGameStand_GetOwnerCharacterMovableStand final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameMovableStand*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameStand_GetOwnerCharacterMovableStand) == 0x000008, "Wrong alignment on AJBInGameStand_GetOwnerCharacterMovableStand");
static_assert(sizeof(AJBInGameStand_GetOwnerCharacterMovableStand) == 0x000010, "Wrong size on AJBInGameStand_GetOwnerCharacterMovableStand");
static_assert(offsetof(AJBInGameStand_GetOwnerCharacterMovableStand, bIsValid) == 0x000000, "Member 'AJBInGameStand_GetOwnerCharacterMovableStand::bIsValid' has a wrong offset!");
static_assert(offsetof(AJBInGameStand_GetOwnerCharacterMovableStand, ReturnValue) == 0x000008, "Member 'AJBInGameStand_GetOwnerCharacterMovableStand::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameStand.IsAccompany
// 0x0001 (0x0001 - 0x0000)
struct AJBInGameStand_IsAccompany final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameStand_IsAccompany) == 0x000001, "Wrong alignment on AJBInGameStand_IsAccompany");
static_assert(sizeof(AJBInGameStand_IsAccompany) == 0x000001, "Wrong size on AJBInGameStand_IsAccompany");
static_assert(offsetof(AJBInGameStand_IsAccompany, ReturnValue) == 0x000000, "Member 'AJBInGameStand_IsAccompany::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameStand.IsBackwardTransition
// 0x0001 (0x0001 - 0x0000)
struct AJBInGameStand_IsBackwardTransition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameStand_IsBackwardTransition) == 0x000001, "Wrong alignment on AJBInGameStand_IsBackwardTransition");
static_assert(sizeof(AJBInGameStand_IsBackwardTransition) == 0x000001, "Wrong size on AJBInGameStand_IsBackwardTransition");
static_assert(offsetof(AJBInGameStand_IsBackwardTransition, ReturnValue) == 0x000000, "Member 'AJBInGameStand_IsBackwardTransition::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameStand.IsForwardTransition
// 0x0001 (0x0001 - 0x0000)
struct AJBInGameStand_IsForwardTransition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameStand_IsForwardTransition) == 0x000001, "Wrong alignment on AJBInGameStand_IsForwardTransition");
static_assert(sizeof(AJBInGameStand_IsForwardTransition) == 0x000001, "Wrong size on AJBInGameStand_IsForwardTransition");
static_assert(offsetof(AJBInGameStand_IsForwardTransition, ReturnValue) == 0x000000, "Member 'AJBInGameStand_IsForwardTransition::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameStand.IsNotAccompany
// 0x0001 (0x0001 - 0x0000)
struct AJBInGameStand_IsNotAccompany final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameStand_IsNotAccompany) == 0x000001, "Wrong alignment on AJBInGameStand_IsNotAccompany");
static_assert(sizeof(AJBInGameStand_IsNotAccompany) == 0x000001, "Wrong size on AJBInGameStand_IsNotAccompany");
static_assert(offsetof(AJBInGameStand_IsNotAccompany, ReturnValue) == 0x000000, "Member 'AJBInGameStand_IsNotAccompany::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameStand.IsSeparating
// 0x0002 (0x0002 - 0x0000)
struct AJBInGameStand_IsSeparating final
{
public:
	bool                                          bIncludeTransition;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameStand_IsSeparating) == 0x000001, "Wrong alignment on AJBInGameStand_IsSeparating");
static_assert(sizeof(AJBInGameStand_IsSeparating) == 0x000002, "Wrong size on AJBInGameStand_IsSeparating");
static_assert(offsetof(AJBInGameStand_IsSeparating, bIncludeTransition) == 0x000000, "Member 'AJBInGameStand_IsSeparating::bIncludeTransition' has a wrong offset!");
static_assert(offsetof(AJBInGameStand_IsSeparating, ReturnValue) == 0x000001, "Member 'AJBInGameStand_IsSeparating::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameStand.IsTransition
// 0x0001 (0x0001 - 0x0000)
struct AJBInGameStand_IsTransition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameStand_IsTransition) == 0x000001, "Wrong alignment on AJBInGameStand_IsTransition");
static_assert(sizeof(AJBInGameStand_IsTransition) == 0x000001, "Wrong size on AJBInGameStand_IsTransition");
static_assert(offsetof(AJBInGameStand_IsTransition, ReturnValue) == 0x000000, "Member 'AJBInGameStand_IsTransition::ReturnValue' has a wrong offset!");

// Function AJB.AJBInGameWindow.IsSmallWindow
// 0x0001 (0x0001 - 0x0000)
struct AJBInGameWindow_IsSmallWindow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInGameWindow_IsSmallWindow) == 0x000001, "Wrong alignment on AJBInGameWindow_IsSmallWindow");
static_assert(sizeof(AJBInGameWindow_IsSmallWindow) == 0x000001, "Wrong size on AJBInGameWindow_IsSmallWindow");
static_assert(offsetof(AJBInGameWindow_IsSmallWindow, ReturnValue) == 0x000000, "Member 'AJBInGameWindow_IsSmallWindow::ReturnValue' has a wrong offset!");

// Function AJB.AJBInputUIInterface.IsModeless
// 0x0001 (0x0001 - 0x0000)
struct AJBInputUIInterface_IsModeless final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInputUIInterface_IsModeless) == 0x000001, "Wrong alignment on AJBInputUIInterface_IsModeless");
static_assert(sizeof(AJBInputUIInterface_IsModeless) == 0x000001, "Wrong size on AJBInputUIInterface_IsModeless");
static_assert(offsetof(AJBInputUIInterface_IsModeless, ReturnValue) == 0x000000, "Member 'AJBInputUIInterface_IsModeless::ReturnValue' has a wrong offset!");

// Function AJB.AJBInputUIInterface.OnInputLookupRate
// 0x0008 (0x0008 - 0x0000)
struct AJBInputUIInterface_OnInputLookupRate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBInputUIInterface_OnInputLookupRate) == 0x000004, "Wrong alignment on AJBInputUIInterface_OnInputLookupRate");
static_assert(sizeof(AJBInputUIInterface_OnInputLookupRate) == 0x000008, "Wrong size on AJBInputUIInterface_OnInputLookupRate");
static_assert(offsetof(AJBInputUIInterface_OnInputLookupRate, Value) == 0x000000, "Member 'AJBInputUIInterface_OnInputLookupRate::Value' has a wrong offset!");
static_assert(offsetof(AJBInputUIInterface_OnInputLookupRate, ReturnValue) == 0x000004, "Member 'AJBInputUIInterface_OnInputLookupRate::ReturnValue' has a wrong offset!");

// Function AJB.AJBInputUIInterface.OnInputMoveForward
// 0x0008 (0x0008 - 0x0000)
struct AJBInputUIInterface_OnInputMoveForward final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBInputUIInterface_OnInputMoveForward) == 0x000004, "Wrong alignment on AJBInputUIInterface_OnInputMoveForward");
static_assert(sizeof(AJBInputUIInterface_OnInputMoveForward) == 0x000008, "Wrong size on AJBInputUIInterface_OnInputMoveForward");
static_assert(offsetof(AJBInputUIInterface_OnInputMoveForward, Value) == 0x000000, "Member 'AJBInputUIInterface_OnInputMoveForward::Value' has a wrong offset!");
static_assert(offsetof(AJBInputUIInterface_OnInputMoveForward, ReturnValue) == 0x000004, "Member 'AJBInputUIInterface_OnInputMoveForward::ReturnValue' has a wrong offset!");

// Function AJB.AJBInputUIInterface.OnInputMoveRight
// 0x0008 (0x0008 - 0x0000)
struct AJBInputUIInterface_OnInputMoveRight final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBInputUIInterface_OnInputMoveRight) == 0x000004, "Wrong alignment on AJBInputUIInterface_OnInputMoveRight");
static_assert(sizeof(AJBInputUIInterface_OnInputMoveRight) == 0x000008, "Wrong size on AJBInputUIInterface_OnInputMoveRight");
static_assert(offsetof(AJBInputUIInterface_OnInputMoveRight, Value) == 0x000000, "Member 'AJBInputUIInterface_OnInputMoveRight::Value' has a wrong offset!");
static_assert(offsetof(AJBInputUIInterface_OnInputMoveRight, ReturnValue) == 0x000004, "Member 'AJBInputUIInterface_OnInputMoveRight::ReturnValue' has a wrong offset!");

// Function AJB.AJBInputUIInterface.OnInputPressedCancel
// 0x0001 (0x0001 - 0x0000)
struct AJBInputUIInterface_OnInputPressedCancel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInputUIInterface_OnInputPressedCancel) == 0x000001, "Wrong alignment on AJBInputUIInterface_OnInputPressedCancel");
static_assert(sizeof(AJBInputUIInterface_OnInputPressedCancel) == 0x000001, "Wrong size on AJBInputUIInterface_OnInputPressedCancel");
static_assert(offsetof(AJBInputUIInterface_OnInputPressedCancel, ReturnValue) == 0x000000, "Member 'AJBInputUIInterface_OnInputPressedCancel::ReturnValue' has a wrong offset!");

// Function AJB.AJBInputUIInterface.OnInputPressedDecide
// 0x0001 (0x0001 - 0x0000)
struct AJBInputUIInterface_OnInputPressedDecide final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInputUIInterface_OnInputPressedDecide) == 0x000001, "Wrong alignment on AJBInputUIInterface_OnInputPressedDecide");
static_assert(sizeof(AJBInputUIInterface_OnInputPressedDecide) == 0x000001, "Wrong size on AJBInputUIInterface_OnInputPressedDecide");
static_assert(offsetof(AJBInputUIInterface_OnInputPressedDecide, ReturnValue) == 0x000000, "Member 'AJBInputUIInterface_OnInputPressedDecide::ReturnValue' has a wrong offset!");

// Function AJB.AJBInputUIInterface.OnInputPressedDown
// 0x0001 (0x0001 - 0x0000)
struct AJBInputUIInterface_OnInputPressedDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInputUIInterface_OnInputPressedDown) == 0x000001, "Wrong alignment on AJBInputUIInterface_OnInputPressedDown");
static_assert(sizeof(AJBInputUIInterface_OnInputPressedDown) == 0x000001, "Wrong size on AJBInputUIInterface_OnInputPressedDown");
static_assert(offsetof(AJBInputUIInterface_OnInputPressedDown, ReturnValue) == 0x000000, "Member 'AJBInputUIInterface_OnInputPressedDown::ReturnValue' has a wrong offset!");

// Function AJB.AJBInputUIInterface.OnInputPressedL1
// 0x0001 (0x0001 - 0x0000)
struct AJBInputUIInterface_OnInputPressedL1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInputUIInterface_OnInputPressedL1) == 0x000001, "Wrong alignment on AJBInputUIInterface_OnInputPressedL1");
static_assert(sizeof(AJBInputUIInterface_OnInputPressedL1) == 0x000001, "Wrong size on AJBInputUIInterface_OnInputPressedL1");
static_assert(offsetof(AJBInputUIInterface_OnInputPressedL1, ReturnValue) == 0x000000, "Member 'AJBInputUIInterface_OnInputPressedL1::ReturnValue' has a wrong offset!");

// Function AJB.AJBInputUIInterface.OnInputPressedL2
// 0x0001 (0x0001 - 0x0000)
struct AJBInputUIInterface_OnInputPressedL2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInputUIInterface_OnInputPressedL2) == 0x000001, "Wrong alignment on AJBInputUIInterface_OnInputPressedL2");
static_assert(sizeof(AJBInputUIInterface_OnInputPressedL2) == 0x000001, "Wrong size on AJBInputUIInterface_OnInputPressedL2");
static_assert(offsetof(AJBInputUIInterface_OnInputPressedL2, ReturnValue) == 0x000000, "Member 'AJBInputUIInterface_OnInputPressedL2::ReturnValue' has a wrong offset!");

// Function AJB.AJBInputUIInterface.OnInputPressedL3
// 0x0001 (0x0001 - 0x0000)
struct AJBInputUIInterface_OnInputPressedL3 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInputUIInterface_OnInputPressedL3) == 0x000001, "Wrong alignment on AJBInputUIInterface_OnInputPressedL3");
static_assert(sizeof(AJBInputUIInterface_OnInputPressedL3) == 0x000001, "Wrong size on AJBInputUIInterface_OnInputPressedL3");
static_assert(offsetof(AJBInputUIInterface_OnInputPressedL3, ReturnValue) == 0x000000, "Member 'AJBInputUIInterface_OnInputPressedL3::ReturnValue' has a wrong offset!");

// Function AJB.AJBInputUIInterface.OnInputPressedLeft
// 0x0001 (0x0001 - 0x0000)
struct AJBInputUIInterface_OnInputPressedLeft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInputUIInterface_OnInputPressedLeft) == 0x000001, "Wrong alignment on AJBInputUIInterface_OnInputPressedLeft");
static_assert(sizeof(AJBInputUIInterface_OnInputPressedLeft) == 0x000001, "Wrong size on AJBInputUIInterface_OnInputPressedLeft");
static_assert(offsetof(AJBInputUIInterface_OnInputPressedLeft, ReturnValue) == 0x000000, "Member 'AJBInputUIInterface_OnInputPressedLeft::ReturnValue' has a wrong offset!");

// Function AJB.AJBInputUIInterface.OnInputPressedR1
// 0x0001 (0x0001 - 0x0000)
struct AJBInputUIInterface_OnInputPressedR1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInputUIInterface_OnInputPressedR1) == 0x000001, "Wrong alignment on AJBInputUIInterface_OnInputPressedR1");
static_assert(sizeof(AJBInputUIInterface_OnInputPressedR1) == 0x000001, "Wrong size on AJBInputUIInterface_OnInputPressedR1");
static_assert(offsetof(AJBInputUIInterface_OnInputPressedR1, ReturnValue) == 0x000000, "Member 'AJBInputUIInterface_OnInputPressedR1::ReturnValue' has a wrong offset!");

// Function AJB.AJBInputUIInterface.OnInputPressedR2
// 0x0001 (0x0001 - 0x0000)
struct AJBInputUIInterface_OnInputPressedR2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInputUIInterface_OnInputPressedR2) == 0x000001, "Wrong alignment on AJBInputUIInterface_OnInputPressedR2");
static_assert(sizeof(AJBInputUIInterface_OnInputPressedR2) == 0x000001, "Wrong size on AJBInputUIInterface_OnInputPressedR2");
static_assert(offsetof(AJBInputUIInterface_OnInputPressedR2, ReturnValue) == 0x000000, "Member 'AJBInputUIInterface_OnInputPressedR2::ReturnValue' has a wrong offset!");

// Function AJB.AJBInputUIInterface.OnInputPressedRight
// 0x0001 (0x0001 - 0x0000)
struct AJBInputUIInterface_OnInputPressedRight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInputUIInterface_OnInputPressedRight) == 0x000001, "Wrong alignment on AJBInputUIInterface_OnInputPressedRight");
static_assert(sizeof(AJBInputUIInterface_OnInputPressedRight) == 0x000001, "Wrong size on AJBInputUIInterface_OnInputPressedRight");
static_assert(offsetof(AJBInputUIInterface_OnInputPressedRight, ReturnValue) == 0x000000, "Member 'AJBInputUIInterface_OnInputPressedRight::ReturnValue' has a wrong offset!");

// Function AJB.AJBInputUIInterface.OnInputPressedTouch
// 0x000C (0x000C - 0x0000)
struct AJBInputUIInterface_OnInputPressedTouch final
{
public:
	float                                         LocationX;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocationY;                                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBInputUIInterface_OnInputPressedTouch) == 0x000004, "Wrong alignment on AJBInputUIInterface_OnInputPressedTouch");
static_assert(sizeof(AJBInputUIInterface_OnInputPressedTouch) == 0x00000C, "Wrong size on AJBInputUIInterface_OnInputPressedTouch");
static_assert(offsetof(AJBInputUIInterface_OnInputPressedTouch, LocationX) == 0x000000, "Member 'AJBInputUIInterface_OnInputPressedTouch::LocationX' has a wrong offset!");
static_assert(offsetof(AJBInputUIInterface_OnInputPressedTouch, LocationY) == 0x000004, "Member 'AJBInputUIInterface_OnInputPressedTouch::LocationY' has a wrong offset!");
static_assert(offsetof(AJBInputUIInterface_OnInputPressedTouch, ReturnValue) == 0x000008, "Member 'AJBInputUIInterface_OnInputPressedTouch::ReturnValue' has a wrong offset!");

// Function AJB.AJBInputUIInterface.OnInputPressedUp
// 0x0001 (0x0001 - 0x0000)
struct AJBInputUIInterface_OnInputPressedUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInputUIInterface_OnInputPressedUp) == 0x000001, "Wrong alignment on AJBInputUIInterface_OnInputPressedUp");
static_assert(sizeof(AJBInputUIInterface_OnInputPressedUp) == 0x000001, "Wrong size on AJBInputUIInterface_OnInputPressedUp");
static_assert(offsetof(AJBInputUIInterface_OnInputPressedUp, ReturnValue) == 0x000000, "Member 'AJBInputUIInterface_OnInputPressedUp::ReturnValue' has a wrong offset!");

// Function AJB.AJBInputUIInterface.OnInputReleasedCancel
// 0x0001 (0x0001 - 0x0000)
struct AJBInputUIInterface_OnInputReleasedCancel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInputUIInterface_OnInputReleasedCancel) == 0x000001, "Wrong alignment on AJBInputUIInterface_OnInputReleasedCancel");
static_assert(sizeof(AJBInputUIInterface_OnInputReleasedCancel) == 0x000001, "Wrong size on AJBInputUIInterface_OnInputReleasedCancel");
static_assert(offsetof(AJBInputUIInterface_OnInputReleasedCancel, ReturnValue) == 0x000000, "Member 'AJBInputUIInterface_OnInputReleasedCancel::ReturnValue' has a wrong offset!");

// Function AJB.AJBInputUIInterface.OnInputReleasedDecide
// 0x0001 (0x0001 - 0x0000)
struct AJBInputUIInterface_OnInputReleasedDecide final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInputUIInterface_OnInputReleasedDecide) == 0x000001, "Wrong alignment on AJBInputUIInterface_OnInputReleasedDecide");
static_assert(sizeof(AJBInputUIInterface_OnInputReleasedDecide) == 0x000001, "Wrong size on AJBInputUIInterface_OnInputReleasedDecide");
static_assert(offsetof(AJBInputUIInterface_OnInputReleasedDecide, ReturnValue) == 0x000000, "Member 'AJBInputUIInterface_OnInputReleasedDecide::ReturnValue' has a wrong offset!");

// Function AJB.AJBInputUIInterface.OnInputReleasedDown
// 0x0001 (0x0001 - 0x0000)
struct AJBInputUIInterface_OnInputReleasedDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInputUIInterface_OnInputReleasedDown) == 0x000001, "Wrong alignment on AJBInputUIInterface_OnInputReleasedDown");
static_assert(sizeof(AJBInputUIInterface_OnInputReleasedDown) == 0x000001, "Wrong size on AJBInputUIInterface_OnInputReleasedDown");
static_assert(offsetof(AJBInputUIInterface_OnInputReleasedDown, ReturnValue) == 0x000000, "Member 'AJBInputUIInterface_OnInputReleasedDown::ReturnValue' has a wrong offset!");

// Function AJB.AJBInputUIInterface.OnInputReleasedL1
// 0x0001 (0x0001 - 0x0000)
struct AJBInputUIInterface_OnInputReleasedL1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInputUIInterface_OnInputReleasedL1) == 0x000001, "Wrong alignment on AJBInputUIInterface_OnInputReleasedL1");
static_assert(sizeof(AJBInputUIInterface_OnInputReleasedL1) == 0x000001, "Wrong size on AJBInputUIInterface_OnInputReleasedL1");
static_assert(offsetof(AJBInputUIInterface_OnInputReleasedL1, ReturnValue) == 0x000000, "Member 'AJBInputUIInterface_OnInputReleasedL1::ReturnValue' has a wrong offset!");

// Function AJB.AJBInputUIInterface.OnInputReleasedL2
// 0x0001 (0x0001 - 0x0000)
struct AJBInputUIInterface_OnInputReleasedL2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInputUIInterface_OnInputReleasedL2) == 0x000001, "Wrong alignment on AJBInputUIInterface_OnInputReleasedL2");
static_assert(sizeof(AJBInputUIInterface_OnInputReleasedL2) == 0x000001, "Wrong size on AJBInputUIInterface_OnInputReleasedL2");
static_assert(offsetof(AJBInputUIInterface_OnInputReleasedL2, ReturnValue) == 0x000000, "Member 'AJBInputUIInterface_OnInputReleasedL2::ReturnValue' has a wrong offset!");

// Function AJB.AJBInputUIInterface.OnInputReleasedL3
// 0x0001 (0x0001 - 0x0000)
struct AJBInputUIInterface_OnInputReleasedL3 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInputUIInterface_OnInputReleasedL3) == 0x000001, "Wrong alignment on AJBInputUIInterface_OnInputReleasedL3");
static_assert(sizeof(AJBInputUIInterface_OnInputReleasedL3) == 0x000001, "Wrong size on AJBInputUIInterface_OnInputReleasedL3");
static_assert(offsetof(AJBInputUIInterface_OnInputReleasedL3, ReturnValue) == 0x000000, "Member 'AJBInputUIInterface_OnInputReleasedL3::ReturnValue' has a wrong offset!");

// Function AJB.AJBInputUIInterface.OnInputReleasedLeft
// 0x0001 (0x0001 - 0x0000)
struct AJBInputUIInterface_OnInputReleasedLeft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInputUIInterface_OnInputReleasedLeft) == 0x000001, "Wrong alignment on AJBInputUIInterface_OnInputReleasedLeft");
static_assert(sizeof(AJBInputUIInterface_OnInputReleasedLeft) == 0x000001, "Wrong size on AJBInputUIInterface_OnInputReleasedLeft");
static_assert(offsetof(AJBInputUIInterface_OnInputReleasedLeft, ReturnValue) == 0x000000, "Member 'AJBInputUIInterface_OnInputReleasedLeft::ReturnValue' has a wrong offset!");

// Function AJB.AJBInputUIInterface.OnInputReleasedR1
// 0x0001 (0x0001 - 0x0000)
struct AJBInputUIInterface_OnInputReleasedR1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInputUIInterface_OnInputReleasedR1) == 0x000001, "Wrong alignment on AJBInputUIInterface_OnInputReleasedR1");
static_assert(sizeof(AJBInputUIInterface_OnInputReleasedR1) == 0x000001, "Wrong size on AJBInputUIInterface_OnInputReleasedR1");
static_assert(offsetof(AJBInputUIInterface_OnInputReleasedR1, ReturnValue) == 0x000000, "Member 'AJBInputUIInterface_OnInputReleasedR1::ReturnValue' has a wrong offset!");

// Function AJB.AJBInputUIInterface.OnInputReleasedR2
// 0x0001 (0x0001 - 0x0000)
struct AJBInputUIInterface_OnInputReleasedR2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInputUIInterface_OnInputReleasedR2) == 0x000001, "Wrong alignment on AJBInputUIInterface_OnInputReleasedR2");
static_assert(sizeof(AJBInputUIInterface_OnInputReleasedR2) == 0x000001, "Wrong size on AJBInputUIInterface_OnInputReleasedR2");
static_assert(offsetof(AJBInputUIInterface_OnInputReleasedR2, ReturnValue) == 0x000000, "Member 'AJBInputUIInterface_OnInputReleasedR2::ReturnValue' has a wrong offset!");

// Function AJB.AJBInputUIInterface.OnInputReleasedRight
// 0x0001 (0x0001 - 0x0000)
struct AJBInputUIInterface_OnInputReleasedRight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInputUIInterface_OnInputReleasedRight) == 0x000001, "Wrong alignment on AJBInputUIInterface_OnInputReleasedRight");
static_assert(sizeof(AJBInputUIInterface_OnInputReleasedRight) == 0x000001, "Wrong size on AJBInputUIInterface_OnInputReleasedRight");
static_assert(offsetof(AJBInputUIInterface_OnInputReleasedRight, ReturnValue) == 0x000000, "Member 'AJBInputUIInterface_OnInputReleasedRight::ReturnValue' has a wrong offset!");

// Function AJB.AJBInputUIInterface.OnInputReleasedTouch
// 0x0001 (0x0001 - 0x0000)
struct AJBInputUIInterface_OnInputReleasedTouch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInputUIInterface_OnInputReleasedTouch) == 0x000001, "Wrong alignment on AJBInputUIInterface_OnInputReleasedTouch");
static_assert(sizeof(AJBInputUIInterface_OnInputReleasedTouch) == 0x000001, "Wrong size on AJBInputUIInterface_OnInputReleasedTouch");
static_assert(offsetof(AJBInputUIInterface_OnInputReleasedTouch, ReturnValue) == 0x000000, "Member 'AJBInputUIInterface_OnInputReleasedTouch::ReturnValue' has a wrong offset!");

// Function AJB.AJBInputUIInterface.OnInputReleasedUp
// 0x0001 (0x0001 - 0x0000)
struct AJBInputUIInterface_OnInputReleasedUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBInputUIInterface_OnInputReleasedUp) == 0x000001, "Wrong alignment on AJBInputUIInterface_OnInputReleasedUp");
static_assert(sizeof(AJBInputUIInterface_OnInputReleasedUp) == 0x000001, "Wrong size on AJBInputUIInterface_OnInputReleasedUp");
static_assert(offsetof(AJBInputUIInterface_OnInputReleasedUp, ReturnValue) == 0x000000, "Member 'AJBInputUIInterface_OnInputReleasedUp::ReturnValue' has a wrong offset!");

// Function AJB.AJBInputUIInterface.OnInputTurnRate
// 0x0008 (0x0008 - 0x0000)
struct AJBInputUIInterface_OnInputTurnRate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBInputUIInterface_OnInputTurnRate) == 0x000004, "Wrong alignment on AJBInputUIInterface_OnInputTurnRate");
static_assert(sizeof(AJBInputUIInterface_OnInputTurnRate) == 0x000008, "Wrong size on AJBInputUIInterface_OnInputTurnRate");
static_assert(offsetof(AJBInputUIInterface_OnInputTurnRate, Value) == 0x000000, "Member 'AJBInputUIInterface_OnInputTurnRate::Value' has a wrong offset!");
static_assert(offsetof(AJBInputUIInterface_OnInputTurnRate, ReturnValue) == 0x000004, "Member 'AJBInputUIInterface_OnInputTurnRate::ReturnValue' has a wrong offset!");

// Function AJB.AJBIPSetAddress.NetshIPSetAddress
// 0x0038 (0x0038 - 0x0000)
struct AJBIPSetAddress_NetshIPSetAddress final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Address;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Gateway;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBIPSetAddress*                       ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBIPSetAddress_NetshIPSetAddress) == 0x000008, "Wrong alignment on AJBIPSetAddress_NetshIPSetAddress");
static_assert(sizeof(AJBIPSetAddress_NetshIPSetAddress) == 0x000038, "Wrong size on AJBIPSetAddress_NetshIPSetAddress");
static_assert(offsetof(AJBIPSetAddress_NetshIPSetAddress, WorldContextObject) == 0x000000, "Member 'AJBIPSetAddress_NetshIPSetAddress::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBIPSetAddress_NetshIPSetAddress, Address) == 0x000008, "Member 'AJBIPSetAddress_NetshIPSetAddress::Address' has a wrong offset!");
static_assert(offsetof(AJBIPSetAddress_NetshIPSetAddress, Gateway) == 0x000018, "Member 'AJBIPSetAddress_NetshIPSetAddress::Gateway' has a wrong offset!");
static_assert(offsetof(AJBIPSetAddress_NetshIPSetAddress, Timeout) == 0x000028, "Member 'AJBIPSetAddress_NetshIPSetAddress::Timeout' has a wrong offset!");
static_assert(offsetof(AJBIPSetAddress_NetshIPSetAddress, ReturnValue) == 0x000030, "Member 'AJBIPSetAddress_NetshIPSetAddress::ReturnValue' has a wrong offset!");

// Function AJB.AJBIPSetAddress.NetshIPSetDHCP
// 0x0018 (0x0018 - 0x0000)
struct AJBIPSetAddress_NetshIPSetDHCP final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timeout;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBIPSetAddress*                       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBIPSetAddress_NetshIPSetDHCP) == 0x000008, "Wrong alignment on AJBIPSetAddress_NetshIPSetDHCP");
static_assert(sizeof(AJBIPSetAddress_NetshIPSetDHCP) == 0x000018, "Wrong size on AJBIPSetAddress_NetshIPSetDHCP");
static_assert(offsetof(AJBIPSetAddress_NetshIPSetDHCP, WorldContextObject) == 0x000000, "Member 'AJBIPSetAddress_NetshIPSetDHCP::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBIPSetAddress_NetshIPSetDHCP, Timeout) == 0x000008, "Member 'AJBIPSetAddress_NetshIPSetDHCP::Timeout' has a wrong offset!");
static_assert(offsetof(AJBIPSetAddress_NetshIPSetDHCP, ReturnValue) == 0x000010, "Member 'AJBIPSetAddress_NetshIPSetDHCP::ReturnValue' has a wrong offset!");

// Function AJB.AJBLevelSequenceActor.PlaySequence
// 0x0001 (0x0001 - 0x0000)
struct AJBLevelSequenceActor_PlaySequence final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBLevelSequenceActor_PlaySequence) == 0x000001, "Wrong alignment on AJBLevelSequenceActor_PlaySequence");
static_assert(sizeof(AJBLevelSequenceActor_PlaySequence) == 0x000001, "Wrong size on AJBLevelSequenceActor_PlaySequence");
static_assert(offsetof(AJBLevelSequenceActor_PlaySequence, ReturnValue) == 0x000000, "Member 'AJBLevelSequenceActor_PlaySequence::ReturnValue' has a wrong offset!");

// Function AJB.AJBLevelSequenceActor.StopSequence
// 0x0001 (0x0001 - 0x0000)
struct AJBLevelSequenceActor_StopSequence final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBLevelSequenceActor_StopSequence) == 0x000001, "Wrong alignment on AJBLevelSequenceActor_StopSequence");
static_assert(sizeof(AJBLevelSequenceActor_StopSequence) == 0x000001, "Wrong size on AJBLevelSequenceActor_StopSequence");
static_assert(offsetof(AJBLevelSequenceActor_StopSequence, ReturnValue) == 0x000000, "Member 'AJBLevelSequenceActor_StopSequence::ReturnValue' has a wrong offset!");

// Function AJB.AJBLocalPlayer.IsKillcamReplayActive
// 0x0001 (0x0001 - 0x0000)
struct AJBLocalPlayer_IsKillcamReplayActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBLocalPlayer_IsKillcamReplayActive) == 0x000001, "Wrong alignment on AJBLocalPlayer_IsKillcamReplayActive");
static_assert(sizeof(AJBLocalPlayer_IsKillcamReplayActive) == 0x000001, "Wrong size on AJBLocalPlayer_IsKillcamReplayActive");
static_assert(offsetof(AJBLocalPlayer_IsKillcamReplayActive, ReturnValue) == 0x000000, "Member 'AJBLocalPlayer_IsKillcamReplayActive::ReturnValue' has a wrong offset!");

// Function AJB.AJBMessageManager.GetStringTablePath
// 0x0008 (0x0008 - 0x0000)
struct AJBMessageManager_GetStringTablePath final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBMessageManager_GetStringTablePath) == 0x000004, "Wrong alignment on AJBMessageManager_GetStringTablePath");
static_assert(sizeof(AJBMessageManager_GetStringTablePath) == 0x000008, "Wrong size on AJBMessageManager_GetStringTablePath");
static_assert(offsetof(AJBMessageManager_GetStringTablePath, ReturnValue) == 0x000000, "Member 'AJBMessageManager_GetStringTablePath::ReturnValue' has a wrong offset!");

// Function AJB.AJBMessageManager.OnMessageRequested
// 0x000C (0x000C - 0x0000)
struct AJBMessageManager_OnMessageRequested final
{
public:
	int32                                         MessageType;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value1;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value2;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBMessageManager_OnMessageRequested) == 0x000004, "Wrong alignment on AJBMessageManager_OnMessageRequested");
static_assert(sizeof(AJBMessageManager_OnMessageRequested) == 0x00000C, "Wrong size on AJBMessageManager_OnMessageRequested");
static_assert(offsetof(AJBMessageManager_OnMessageRequested, MessageType) == 0x000000, "Member 'AJBMessageManager_OnMessageRequested::MessageType' has a wrong offset!");
static_assert(offsetof(AJBMessageManager_OnMessageRequested, Value1) == 0x000004, "Member 'AJBMessageManager_OnMessageRequested::Value1' has a wrong offset!");
static_assert(offsetof(AJBMessageManager_OnMessageRequested, Value2) == 0x000008, "Member 'AJBMessageManager_OnMessageRequested::Value2' has a wrong offset!");

// Function AJB.AJBMessageManager.RequestMessage
// 0x000C (0x000C - 0x0000)
struct AJBMessageManager_RequestMessage final
{
public:
	int32                                         MessageType;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value1;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value2;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBMessageManager_RequestMessage) == 0x000004, "Wrong alignment on AJBMessageManager_RequestMessage");
static_assert(sizeof(AJBMessageManager_RequestMessage) == 0x00000C, "Wrong size on AJBMessageManager_RequestMessage");
static_assert(offsetof(AJBMessageManager_RequestMessage, MessageType) == 0x000000, "Member 'AJBMessageManager_RequestMessage::MessageType' has a wrong offset!");
static_assert(offsetof(AJBMessageManager_RequestMessage, Value1) == 0x000004, "Member 'AJBMessageManager_RequestMessage::Value1' has a wrong offset!");
static_assert(offsetof(AJBMessageManager_RequestMessage, Value2) == 0x000008, "Member 'AJBMessageManager_RequestMessage::Value2' has a wrong offset!");

// Function AJB.AJBNetAPI.CleanLoginPlayerInfo
// 0x0008 (0x0008 - 0x0000)
struct AJBNetAPI_CleanLoginPlayerInfo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_CleanLoginPlayerInfo) == 0x000008, "Wrong alignment on AJBNetAPI_CleanLoginPlayerInfo");
static_assert(sizeof(AJBNetAPI_CleanLoginPlayerInfo) == 0x000008, "Wrong size on AJBNetAPI_CleanLoginPlayerInfo");
static_assert(offsetof(AJBNetAPI_CleanLoginPlayerInfo, WorldContextObject) == 0x000000, "Member 'AJBNetAPI_CleanLoginPlayerInfo::WorldContextObject' has a wrong offset!");

// Function AJB.AJBNetAPI.CreateBNCSiteURL
// 0x0018 (0x0018 - 0x0000)
struct AJBNetAPI_CreateBNCSiteURL final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_CreateBNCSiteURL) == 0x000008, "Wrong alignment on AJBNetAPI_CreateBNCSiteURL");
static_assert(sizeof(AJBNetAPI_CreateBNCSiteURL) == 0x000018, "Wrong size on AJBNetAPI_CreateBNCSiteURL");
static_assert(offsetof(AJBNetAPI_CreateBNCSiteURL, WorldContextObject) == 0x000000, "Member 'AJBNetAPI_CreateBNCSiteURL::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_CreateBNCSiteURL, ReturnValue) == 0x000008, "Member 'AJBNetAPI_CreateBNCSiteURL::ReturnValue' has a wrong offset!");

// Function AJB.AJBNetAPI.Request_CatalogGetArea
// 0x0020 (0x0020 - 0x0000)
struct AJBNetAPI_Request_CatalogGetArea final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetHttp*                               NetHttp;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitSec;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBNetAPI*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Request_CatalogGetArea) == 0x000008, "Wrong alignment on AJBNetAPI_Request_CatalogGetArea");
static_assert(sizeof(AJBNetAPI_Request_CatalogGetArea) == 0x000020, "Wrong size on AJBNetAPI_Request_CatalogGetArea");
static_assert(offsetof(AJBNetAPI_Request_CatalogGetArea, WorldContextObject) == 0x000000, "Member 'AJBNetAPI_Request_CatalogGetArea::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_CatalogGetArea, NetHttp) == 0x000008, "Member 'AJBNetAPI_Request_CatalogGetArea::NetHttp' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_CatalogGetArea, LimitSec) == 0x000010, "Member 'AJBNetAPI_Request_CatalogGetArea::LimitSec' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_CatalogGetArea, ReturnValue) == 0x000018, "Member 'AJBNetAPI_Request_CatalogGetArea::ReturnValue' has a wrong offset!");

// Function AJB.AJBNetAPI.Request_CatalogGetLobby
// 0x0020 (0x0020 - 0x0000)
struct AJBNetAPI_Request_CatalogGetLobby final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetHttp*                               NetHttp;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitSec;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBNetAPI*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Request_CatalogGetLobby) == 0x000008, "Wrong alignment on AJBNetAPI_Request_CatalogGetLobby");
static_assert(sizeof(AJBNetAPI_Request_CatalogGetLobby) == 0x000020, "Wrong size on AJBNetAPI_Request_CatalogGetLobby");
static_assert(offsetof(AJBNetAPI_Request_CatalogGetLobby, WorldContextObject) == 0x000000, "Member 'AJBNetAPI_Request_CatalogGetLobby::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_CatalogGetLobby, NetHttp) == 0x000008, "Member 'AJBNetAPI_Request_CatalogGetLobby::NetHttp' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_CatalogGetLobby, LimitSec) == 0x000010, "Member 'AJBNetAPI_Request_CatalogGetLobby::LimitSec' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_CatalogGetLobby, ReturnValue) == 0x000018, "Member 'AJBNetAPI_Request_CatalogGetLobby::ReturnValue' has a wrong offset!");

// Function AJB.AJBNetAPI.Request_CatalogGetRegion
// 0x0020 (0x0020 - 0x0000)
struct AJBNetAPI_Request_CatalogGetRegion final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetHttp*                               NetHttp;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitSec;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBNetAPI*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Request_CatalogGetRegion) == 0x000008, "Wrong alignment on AJBNetAPI_Request_CatalogGetRegion");
static_assert(sizeof(AJBNetAPI_Request_CatalogGetRegion) == 0x000020, "Wrong size on AJBNetAPI_Request_CatalogGetRegion");
static_assert(offsetof(AJBNetAPI_Request_CatalogGetRegion, WorldContextObject) == 0x000000, "Member 'AJBNetAPI_Request_CatalogGetRegion::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_CatalogGetRegion, NetHttp) == 0x000008, "Member 'AJBNetAPI_Request_CatalogGetRegion::NetHttp' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_CatalogGetRegion, LimitSec) == 0x000010, "Member 'AJBNetAPI_Request_CatalogGetRegion::LimitSec' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_CatalogGetRegion, ReturnValue) == 0x000018, "Member 'AJBNetAPI_Request_CatalogGetRegion::ReturnValue' has a wrong offset!");

// Function AJB.AJBNetAPI.Request_GachaDetails
// 0x0020 (0x0020 - 0x0000)
struct AJBNetAPI_Request_GachaDetails final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetHttp*                               NetHttp;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitSec;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBNetAPI*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Request_GachaDetails) == 0x000008, "Wrong alignment on AJBNetAPI_Request_GachaDetails");
static_assert(sizeof(AJBNetAPI_Request_GachaDetails) == 0x000020, "Wrong size on AJBNetAPI_Request_GachaDetails");
static_assert(offsetof(AJBNetAPI_Request_GachaDetails, WorldContextObject) == 0x000000, "Member 'AJBNetAPI_Request_GachaDetails::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_GachaDetails, NetHttp) == 0x000008, "Member 'AJBNetAPI_Request_GachaDetails::NetHttp' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_GachaDetails, LimitSec) == 0x000010, "Member 'AJBNetAPI_Request_GachaDetails::LimitSec' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_GachaDetails, ReturnValue) == 0x000018, "Member 'AJBNetAPI_Request_GachaDetails::ReturnValue' has a wrong offset!");

// Function AJB.AJBNetAPI.Request_InfoGetInfo
// 0x0020 (0x0020 - 0x0000)
struct AJBNetAPI_Request_InfoGetInfo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetHttp*                               NetHttp;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitSec;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBNetAPI*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Request_InfoGetInfo) == 0x000008, "Wrong alignment on AJBNetAPI_Request_InfoGetInfo");
static_assert(sizeof(AJBNetAPI_Request_InfoGetInfo) == 0x000020, "Wrong size on AJBNetAPI_Request_InfoGetInfo");
static_assert(offsetof(AJBNetAPI_Request_InfoGetInfo, WorldContextObject) == 0x000000, "Member 'AJBNetAPI_Request_InfoGetInfo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_InfoGetInfo, NetHttp) == 0x000008, "Member 'AJBNetAPI_Request_InfoGetInfo::NetHttp' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_InfoGetInfo, LimitSec) == 0x000010, "Member 'AJBNetAPI_Request_InfoGetInfo::LimitSec' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_InfoGetInfo, ReturnValue) == 0x000018, "Member 'AJBNetAPI_Request_InfoGetInfo::ReturnValue' has a wrong offset!");

// Function AJB.AJBNetAPI.Request_ResultSetReward
// 0x0040 (0x0040 - 0x0000)
struct AJBNetAPI_Request_ResultSetReward final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetHttp*                               NetHttp;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAJBSetGameRewardParam                 RewardParam;                                       // 0x0010(0x0020)(Parm, NativeAccessSpecifierPublic)
	float                                         LimitSec;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBNetAPI*                             ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Request_ResultSetReward) == 0x000008, "Wrong alignment on AJBNetAPI_Request_ResultSetReward");
static_assert(sizeof(AJBNetAPI_Request_ResultSetReward) == 0x000040, "Wrong size on AJBNetAPI_Request_ResultSetReward");
static_assert(offsetof(AJBNetAPI_Request_ResultSetReward, WorldContextObject) == 0x000000, "Member 'AJBNetAPI_Request_ResultSetReward::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_ResultSetReward, NetHttp) == 0x000008, "Member 'AJBNetAPI_Request_ResultSetReward::NetHttp' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_ResultSetReward, RewardParam) == 0x000010, "Member 'AJBNetAPI_Request_ResultSetReward::RewardParam' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_ResultSetReward, LimitSec) == 0x000030, "Member 'AJBNetAPI_Request_ResultSetReward::LimitSec' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_ResultSetReward, ReturnValue) == 0x000038, "Member 'AJBNetAPI_Request_ResultSetReward::ReturnValue' has a wrong offset!");

// Function AJB.AJBNetAPI.Request_ResultUploadWinnerResult
// 0x0038 (0x0038 - 0x0000)
struct AJBNetAPI_Request_ResultUploadWinnerResult final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetHttp*                               NetHttp;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FColor>                         ColorBuffer;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ImageWidth;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ImageHeight;                                       // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitSec;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBNetAPI*                             ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Request_ResultUploadWinnerResult) == 0x000008, "Wrong alignment on AJBNetAPI_Request_ResultUploadWinnerResult");
static_assert(sizeof(AJBNetAPI_Request_ResultUploadWinnerResult) == 0x000038, "Wrong size on AJBNetAPI_Request_ResultUploadWinnerResult");
static_assert(offsetof(AJBNetAPI_Request_ResultUploadWinnerResult, WorldContextObject) == 0x000000, "Member 'AJBNetAPI_Request_ResultUploadWinnerResult::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_ResultUploadWinnerResult, NetHttp) == 0x000008, "Member 'AJBNetAPI_Request_ResultUploadWinnerResult::NetHttp' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_ResultUploadWinnerResult, ColorBuffer) == 0x000010, "Member 'AJBNetAPI_Request_ResultUploadWinnerResult::ColorBuffer' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_ResultUploadWinnerResult, ImageWidth) == 0x000020, "Member 'AJBNetAPI_Request_ResultUploadWinnerResult::ImageWidth' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_ResultUploadWinnerResult, ImageHeight) == 0x000024, "Member 'AJBNetAPI_Request_ResultUploadWinnerResult::ImageHeight' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_ResultUploadWinnerResult, LimitSec) == 0x000028, "Member 'AJBNetAPI_Request_ResultUploadWinnerResult::LimitSec' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_ResultUploadWinnerResult, ReturnValue) == 0x000030, "Member 'AJBNetAPI_Request_ResultUploadWinnerResult::ReturnValue' has a wrong offset!");

// Function AJB.AJBNetAPI.Request_SysGetEnv
// 0x0020 (0x0020 - 0x0000)
struct AJBNetAPI_Request_SysGetEnv final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetHttp*                               NetHttp;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitSec;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBNetAPI*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Request_SysGetEnv) == 0x000008, "Wrong alignment on AJBNetAPI_Request_SysGetEnv");
static_assert(sizeof(AJBNetAPI_Request_SysGetEnv) == 0x000020, "Wrong size on AJBNetAPI_Request_SysGetEnv");
static_assert(offsetof(AJBNetAPI_Request_SysGetEnv, WorldContextObject) == 0x000000, "Member 'AJBNetAPI_Request_SysGetEnv::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_SysGetEnv, NetHttp) == 0x000008, "Member 'AJBNetAPI_Request_SysGetEnv::NetHttp' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_SysGetEnv, LimitSec) == 0x000010, "Member 'AJBNetAPI_Request_SysGetEnv::LimitSec' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_SysGetEnv, ReturnValue) == 0x000018, "Member 'AJBNetAPI_Request_SysGetEnv::ReturnValue' has a wrong offset!");

// Function AJB.AJBNetAPI.Request_SysMachineError
// 0x0020 (0x0020 - 0x0000)
struct AJBNetAPI_Request_SysMachineError final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetHttp*                               NetHttp;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitSec;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBNetAPI*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Request_SysMachineError) == 0x000008, "Wrong alignment on AJBNetAPI_Request_SysMachineError");
static_assert(sizeof(AJBNetAPI_Request_SysMachineError) == 0x000020, "Wrong size on AJBNetAPI_Request_SysMachineError");
static_assert(offsetof(AJBNetAPI_Request_SysMachineError, WorldContextObject) == 0x000000, "Member 'AJBNetAPI_Request_SysMachineError::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_SysMachineError, NetHttp) == 0x000008, "Member 'AJBNetAPI_Request_SysMachineError::NetHttp' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_SysMachineError, LimitSec) == 0x000010, "Member 'AJBNetAPI_Request_SysMachineError::LimitSec' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_SysMachineError, ReturnValue) == 0x000018, "Member 'AJBNetAPI_Request_SysMachineError::ReturnValue' has a wrong offset!");

// Function AJB.AJBNetAPI.Request_SysNationalMatchInfo
// 0x0020 (0x0020 - 0x0000)
struct AJBNetAPI_Request_SysNationalMatchInfo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetHttp*                               NetHttp;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitSec;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBNetAPI*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Request_SysNationalMatchInfo) == 0x000008, "Wrong alignment on AJBNetAPI_Request_SysNationalMatchInfo");
static_assert(sizeof(AJBNetAPI_Request_SysNationalMatchInfo) == 0x000020, "Wrong size on AJBNetAPI_Request_SysNationalMatchInfo");
static_assert(offsetof(AJBNetAPI_Request_SysNationalMatchInfo, WorldContextObject) == 0x000000, "Member 'AJBNetAPI_Request_SysNationalMatchInfo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_SysNationalMatchInfo, NetHttp) == 0x000008, "Member 'AJBNetAPI_Request_SysNationalMatchInfo::NetHttp' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_SysNationalMatchInfo, LimitSec) == 0x000010, "Member 'AJBNetAPI_Request_SysNationalMatchInfo::LimitSec' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_SysNationalMatchInfo, ReturnValue) == 0x000018, "Member 'AJBNetAPI_Request_SysNationalMatchInfo::ReturnValue' has a wrong offset!");

// Function AJB.AJBNetAPI.Request_SysServeralive
// 0x0020 (0x0020 - 0x0000)
struct AJBNetAPI_Request_SysServeralive final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetHttp*                               NetHttp;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitSec;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBNetAPI*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Request_SysServeralive) == 0x000008, "Wrong alignment on AJBNetAPI_Request_SysServeralive");
static_assert(sizeof(AJBNetAPI_Request_SysServeralive) == 0x000020, "Wrong size on AJBNetAPI_Request_SysServeralive");
static_assert(offsetof(AJBNetAPI_Request_SysServeralive, WorldContextObject) == 0x000000, "Member 'AJBNetAPI_Request_SysServeralive::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_SysServeralive, NetHttp) == 0x000008, "Member 'AJBNetAPI_Request_SysServeralive::NetHttp' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_SysServeralive, LimitSec) == 0x000010, "Member 'AJBNetAPI_Request_SysServeralive::LimitSec' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_SysServeralive, ReturnValue) == 0x000018, "Member 'AJBNetAPI_Request_SysServeralive::ReturnValue' has a wrong offset!");

// Function AJB.AJBNetAPI.Request_SysShopInfo
// 0x0020 (0x0020 - 0x0000)
struct AJBNetAPI_Request_SysShopInfo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetHttp*                               NetHttp;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitSec;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBNetAPI*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Request_SysShopInfo) == 0x000008, "Wrong alignment on AJBNetAPI_Request_SysShopInfo");
static_assert(sizeof(AJBNetAPI_Request_SysShopInfo) == 0x000020, "Wrong size on AJBNetAPI_Request_SysShopInfo");
static_assert(offsetof(AJBNetAPI_Request_SysShopInfo, WorldContextObject) == 0x000000, "Member 'AJBNetAPI_Request_SysShopInfo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_SysShopInfo, NetHttp) == 0x000008, "Member 'AJBNetAPI_Request_SysShopInfo::NetHttp' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_SysShopInfo, LimitSec) == 0x000010, "Member 'AJBNetAPI_Request_SysShopInfo::LimitSec' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_SysShopInfo, ReturnValue) == 0x000018, "Member 'AJBNetAPI_Request_SysShopInfo::ReturnValue' has a wrong offset!");

// Function AJB.AJBNetAPI.Request_SysVersionInfo
// 0x0020 (0x0020 - 0x0000)
struct AJBNetAPI_Request_SysVersionInfo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetHttp*                               NetHttp;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitSec;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBNetAPI*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Request_SysVersionInfo) == 0x000008, "Wrong alignment on AJBNetAPI_Request_SysVersionInfo");
static_assert(sizeof(AJBNetAPI_Request_SysVersionInfo) == 0x000020, "Wrong size on AJBNetAPI_Request_SysVersionInfo");
static_assert(offsetof(AJBNetAPI_Request_SysVersionInfo, WorldContextObject) == 0x000000, "Member 'AJBNetAPI_Request_SysVersionInfo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_SysVersionInfo, NetHttp) == 0x000008, "Member 'AJBNetAPI_Request_SysVersionInfo::NetHttp' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_SysVersionInfo, LimitSec) == 0x000010, "Member 'AJBNetAPI_Request_SysVersionInfo::LimitSec' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_SysVersionInfo, ReturnValue) == 0x000018, "Member 'AJBNetAPI_Request_SysVersionInfo::ReturnValue' has a wrong offset!");

// Function AJB.AJBNetAPI.Request_TSSRead
// 0x0020 (0x0020 - 0x0000)
struct AJBNetAPI_Request_TSSRead final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetHttp*                               NetHttp;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitSec;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBNetAPI*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Request_TSSRead) == 0x000008, "Wrong alignment on AJBNetAPI_Request_TSSRead");
static_assert(sizeof(AJBNetAPI_Request_TSSRead) == 0x000020, "Wrong size on AJBNetAPI_Request_TSSRead");
static_assert(offsetof(AJBNetAPI_Request_TSSRead, WorldContextObject) == 0x000000, "Member 'AJBNetAPI_Request_TSSRead::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_TSSRead, NetHttp) == 0x000008, "Member 'AJBNetAPI_Request_TSSRead::NetHttp' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_TSSRead, LimitSec) == 0x000010, "Member 'AJBNetAPI_Request_TSSRead::LimitSec' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_TSSRead, ReturnValue) == 0x000018, "Member 'AJBNetAPI_Request_TSSRead::ReturnValue' has a wrong offset!");

// Function AJB.AJBNetAPI.Request_TUSRead
// 0x0020 (0x0020 - 0x0000)
struct AJBNetAPI_Request_TUSRead final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetHttp*                               NetHttp;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitSec;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBNetAPI*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Request_TUSRead) == 0x000008, "Wrong alignment on AJBNetAPI_Request_TUSRead");
static_assert(sizeof(AJBNetAPI_Request_TUSRead) == 0x000020, "Wrong size on AJBNetAPI_Request_TUSRead");
static_assert(offsetof(AJBNetAPI_Request_TUSRead, WorldContextObject) == 0x000000, "Member 'AJBNetAPI_Request_TUSRead::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_TUSRead, NetHttp) == 0x000008, "Member 'AJBNetAPI_Request_TUSRead::NetHttp' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_TUSRead, LimitSec) == 0x000010, "Member 'AJBNetAPI_Request_TUSRead::LimitSec' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_TUSRead, ReturnValue) == 0x000018, "Member 'AJBNetAPI_Request_TUSRead::ReturnValue' has a wrong offset!");

// Function AJB.AJBNetAPI.Request_TUSWrite
// 0x0020 (0x0020 - 0x0000)
struct AJBNetAPI_Request_TUSWrite final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetHttp*                               NetHttp;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitSec;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBNetAPI*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Request_TUSWrite) == 0x000008, "Wrong alignment on AJBNetAPI_Request_TUSWrite");
static_assert(sizeof(AJBNetAPI_Request_TUSWrite) == 0x000020, "Wrong size on AJBNetAPI_Request_TUSWrite");
static_assert(offsetof(AJBNetAPI_Request_TUSWrite, WorldContextObject) == 0x000000, "Member 'AJBNetAPI_Request_TUSWrite::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_TUSWrite, NetHttp) == 0x000008, "Member 'AJBNetAPI_Request_TUSWrite::NetHttp' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_TUSWrite, LimitSec) == 0x000010, "Member 'AJBNetAPI_Request_TUSWrite::LimitSec' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_TUSWrite, ReturnValue) == 0x000018, "Member 'AJBNetAPI_Request_TUSWrite::ReturnValue' has a wrong offset!");

// Function AJB.AJBNetAPI.Request_UserDelete
// 0x0020 (0x0020 - 0x0000)
struct AJBNetAPI_Request_UserDelete final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetHttp*                               NetHttp;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitSec;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBNetAPI*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Request_UserDelete) == 0x000008, "Wrong alignment on AJBNetAPI_Request_UserDelete");
static_assert(sizeof(AJBNetAPI_Request_UserDelete) == 0x000020, "Wrong size on AJBNetAPI_Request_UserDelete");
static_assert(offsetof(AJBNetAPI_Request_UserDelete, WorldContextObject) == 0x000000, "Member 'AJBNetAPI_Request_UserDelete::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_UserDelete, NetHttp) == 0x000008, "Member 'AJBNetAPI_Request_UserDelete::NetHttp' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_UserDelete, LimitSec) == 0x000010, "Member 'AJBNetAPI_Request_UserDelete::LimitSec' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Request_UserDelete, ReturnValue) == 0x000018, "Member 'AJBNetAPI_Request_UserDelete::ReturnValue' has a wrong offset!");

// DelegateFunction AJB.AJBNetAPI.AJBNetAPIResponse__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct AJBNetAPI_AJBNetAPIResponse__DelegateSignature final
{
public:
	EAJBNetAPIResult                              Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_AJBNetAPIResponse__DelegateSignature) == 0x000001, "Wrong alignment on AJBNetAPI_AJBNetAPIResponse__DelegateSignature");
static_assert(sizeof(AJBNetAPI_AJBNetAPIResponse__DelegateSignature) == 0x000001, "Wrong size on AJBNetAPI_AJBNetAPIResponse__DelegateSignature");
static_assert(offsetof(AJBNetAPI_AJBNetAPIResponse__DelegateSignature, Result) == 0x000000, "Member 'AJBNetAPI_AJBNetAPIResponse__DelegateSignature::Result' has a wrong offset!");

// Function AJB.AJBNetAPI.HttpError
// 0x0018 (0x0018 - 0x0000)
struct AJBNetAPI_HttpError final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_HttpError) == 0x000008, "Wrong alignment on AJBNetAPI_HttpError");
static_assert(sizeof(AJBNetAPI_HttpError) == 0x000018, "Wrong size on AJBNetAPI_HttpError");
static_assert(offsetof(AJBNetAPI_HttpError, Code) == 0x000000, "Member 'AJBNetAPI_HttpError::Code' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_HttpError, ErrorMessage) == 0x000008, "Member 'AJBNetAPI_HttpError::ErrorMessage' has a wrong offset!");

// Function AJB.AJBNetAPI.Response_CatalogGetArea
// 0x0008 (0x0008 - 0x0000)
struct AJBNetAPI_Response_CatalogGetArea final
{
public:
	class UNetMessage*                            Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Response_CatalogGetArea) == 0x000008, "Wrong alignment on AJBNetAPI_Response_CatalogGetArea");
static_assert(sizeof(AJBNetAPI_Response_CatalogGetArea) == 0x000008, "Wrong size on AJBNetAPI_Response_CatalogGetArea");
static_assert(offsetof(AJBNetAPI_Response_CatalogGetArea, Data) == 0x000000, "Member 'AJBNetAPI_Response_CatalogGetArea::Data' has a wrong offset!");

// Function AJB.AJBNetAPI.Response_CatalogGetLobby
// 0x0008 (0x0008 - 0x0000)
struct AJBNetAPI_Response_CatalogGetLobby final
{
public:
	class UNetMessage*                            Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Response_CatalogGetLobby) == 0x000008, "Wrong alignment on AJBNetAPI_Response_CatalogGetLobby");
static_assert(sizeof(AJBNetAPI_Response_CatalogGetLobby) == 0x000008, "Wrong size on AJBNetAPI_Response_CatalogGetLobby");
static_assert(offsetof(AJBNetAPI_Response_CatalogGetLobby, Data) == 0x000000, "Member 'AJBNetAPI_Response_CatalogGetLobby::Data' has a wrong offset!");

// Function AJB.AJBNetAPI.Response_CatalogGetRegion
// 0x0008 (0x0008 - 0x0000)
struct AJBNetAPI_Response_CatalogGetRegion final
{
public:
	class UNetMessage*                            Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Response_CatalogGetRegion) == 0x000008, "Wrong alignment on AJBNetAPI_Response_CatalogGetRegion");
static_assert(sizeof(AJBNetAPI_Response_CatalogGetRegion) == 0x000008, "Wrong size on AJBNetAPI_Response_CatalogGetRegion");
static_assert(offsetof(AJBNetAPI_Response_CatalogGetRegion, Data) == 0x000000, "Member 'AJBNetAPI_Response_CatalogGetRegion::Data' has a wrong offset!");

// Function AJB.AJBNetAPI.Response_GachaDetails
// 0x0008 (0x0008 - 0x0000)
struct AJBNetAPI_Response_GachaDetails final
{
public:
	class UNetMessage*                            Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Response_GachaDetails) == 0x000008, "Wrong alignment on AJBNetAPI_Response_GachaDetails");
static_assert(sizeof(AJBNetAPI_Response_GachaDetails) == 0x000008, "Wrong size on AJBNetAPI_Response_GachaDetails");
static_assert(offsetof(AJBNetAPI_Response_GachaDetails, Data) == 0x000000, "Member 'AJBNetAPI_Response_GachaDetails::Data' has a wrong offset!");

// Function AJB.AJBNetAPI.Response_InfoGetInfo
// 0x0008 (0x0008 - 0x0000)
struct AJBNetAPI_Response_InfoGetInfo final
{
public:
	class UNetMessage*                            Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Response_InfoGetInfo) == 0x000008, "Wrong alignment on AJBNetAPI_Response_InfoGetInfo");
static_assert(sizeof(AJBNetAPI_Response_InfoGetInfo) == 0x000008, "Wrong size on AJBNetAPI_Response_InfoGetInfo");
static_assert(offsetof(AJBNetAPI_Response_InfoGetInfo, Data) == 0x000000, "Member 'AJBNetAPI_Response_InfoGetInfo::Data' has a wrong offset!");

// Function AJB.AJBNetAPI.Response_ResultSetReward
// 0x0008 (0x0008 - 0x0000)
struct AJBNetAPI_Response_ResultSetReward final
{
public:
	class UNetMessage*                            Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Response_ResultSetReward) == 0x000008, "Wrong alignment on AJBNetAPI_Response_ResultSetReward");
static_assert(sizeof(AJBNetAPI_Response_ResultSetReward) == 0x000008, "Wrong size on AJBNetAPI_Response_ResultSetReward");
static_assert(offsetof(AJBNetAPI_Response_ResultSetReward, Data) == 0x000000, "Member 'AJBNetAPI_Response_ResultSetReward::Data' has a wrong offset!");

// Function AJB.AJBNetAPI.Response_ResultUploadWinnerResult
// 0x0008 (0x0008 - 0x0000)
struct AJBNetAPI_Response_ResultUploadWinnerResult final
{
public:
	class UNetMessage*                            Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Response_ResultUploadWinnerResult) == 0x000008, "Wrong alignment on AJBNetAPI_Response_ResultUploadWinnerResult");
static_assert(sizeof(AJBNetAPI_Response_ResultUploadWinnerResult) == 0x000008, "Wrong size on AJBNetAPI_Response_ResultUploadWinnerResult");
static_assert(offsetof(AJBNetAPI_Response_ResultUploadWinnerResult, Data) == 0x000000, "Member 'AJBNetAPI_Response_ResultUploadWinnerResult::Data' has a wrong offset!");

// Function AJB.AJBNetAPI.Response_SysGetEnv
// 0x0008 (0x0008 - 0x0000)
struct AJBNetAPI_Response_SysGetEnv final
{
public:
	class UNetMessage*                            Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Response_SysGetEnv) == 0x000008, "Wrong alignment on AJBNetAPI_Response_SysGetEnv");
static_assert(sizeof(AJBNetAPI_Response_SysGetEnv) == 0x000008, "Wrong size on AJBNetAPI_Response_SysGetEnv");
static_assert(offsetof(AJBNetAPI_Response_SysGetEnv, Data) == 0x000000, "Member 'AJBNetAPI_Response_SysGetEnv::Data' has a wrong offset!");

// Function AJB.AJBNetAPI.Response_SysMachineError
// 0x0008 (0x0008 - 0x0000)
struct AJBNetAPI_Response_SysMachineError final
{
public:
	class UNetMessage*                            Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Response_SysMachineError) == 0x000008, "Wrong alignment on AJBNetAPI_Response_SysMachineError");
static_assert(sizeof(AJBNetAPI_Response_SysMachineError) == 0x000008, "Wrong size on AJBNetAPI_Response_SysMachineError");
static_assert(offsetof(AJBNetAPI_Response_SysMachineError, Data) == 0x000000, "Member 'AJBNetAPI_Response_SysMachineError::Data' has a wrong offset!");

// Function AJB.AJBNetAPI.Response_SysNationalMatchInfo
// 0x0008 (0x0008 - 0x0000)
struct AJBNetAPI_Response_SysNationalMatchInfo final
{
public:
	class UNetMessage*                            Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Response_SysNationalMatchInfo) == 0x000008, "Wrong alignment on AJBNetAPI_Response_SysNationalMatchInfo");
static_assert(sizeof(AJBNetAPI_Response_SysNationalMatchInfo) == 0x000008, "Wrong size on AJBNetAPI_Response_SysNationalMatchInfo");
static_assert(offsetof(AJBNetAPI_Response_SysNationalMatchInfo, Data) == 0x000000, "Member 'AJBNetAPI_Response_SysNationalMatchInfo::Data' has a wrong offset!");

// Function AJB.AJBNetAPI.Response_SysServeralive
// 0x0008 (0x0008 - 0x0000)
struct AJBNetAPI_Response_SysServeralive final
{
public:
	class UNetMessage*                            Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Response_SysServeralive) == 0x000008, "Wrong alignment on AJBNetAPI_Response_SysServeralive");
static_assert(sizeof(AJBNetAPI_Response_SysServeralive) == 0x000008, "Wrong size on AJBNetAPI_Response_SysServeralive");
static_assert(offsetof(AJBNetAPI_Response_SysServeralive, Data) == 0x000000, "Member 'AJBNetAPI_Response_SysServeralive::Data' has a wrong offset!");

// Function AJB.AJBNetAPI.Response_SysShopInfo
// 0x0008 (0x0008 - 0x0000)
struct AJBNetAPI_Response_SysShopInfo final
{
public:
	class UNetMessage*                            Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Response_SysShopInfo) == 0x000008, "Wrong alignment on AJBNetAPI_Response_SysShopInfo");
static_assert(sizeof(AJBNetAPI_Response_SysShopInfo) == 0x000008, "Wrong size on AJBNetAPI_Response_SysShopInfo");
static_assert(offsetof(AJBNetAPI_Response_SysShopInfo, Data) == 0x000000, "Member 'AJBNetAPI_Response_SysShopInfo::Data' has a wrong offset!");

// Function AJB.AJBNetAPI.Response_SysVersionInfo
// 0x0008 (0x0008 - 0x0000)
struct AJBNetAPI_Response_SysVersionInfo final
{
public:
	class UNetMessage*                            Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Response_SysVersionInfo) == 0x000008, "Wrong alignment on AJBNetAPI_Response_SysVersionInfo");
static_assert(sizeof(AJBNetAPI_Response_SysVersionInfo) == 0x000008, "Wrong size on AJBNetAPI_Response_SysVersionInfo");
static_assert(offsetof(AJBNetAPI_Response_SysVersionInfo, Data) == 0x000000, "Member 'AJBNetAPI_Response_SysVersionInfo::Data' has a wrong offset!");

// Function AJB.AJBNetAPI.Response_TSSRead
// 0x0008 (0x0008 - 0x0000)
struct AJBNetAPI_Response_TSSRead final
{
public:
	class UNetMessage*                            Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Response_TSSRead) == 0x000008, "Wrong alignment on AJBNetAPI_Response_TSSRead");
static_assert(sizeof(AJBNetAPI_Response_TSSRead) == 0x000008, "Wrong size on AJBNetAPI_Response_TSSRead");
static_assert(offsetof(AJBNetAPI_Response_TSSRead, Data) == 0x000000, "Member 'AJBNetAPI_Response_TSSRead::Data' has a wrong offset!");

// Function AJB.AJBNetAPI.Response_TUSRead
// 0x0008 (0x0008 - 0x0000)
struct AJBNetAPI_Response_TUSRead final
{
public:
	class UNetMessage*                            Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Response_TUSRead) == 0x000008, "Wrong alignment on AJBNetAPI_Response_TUSRead");
static_assert(sizeof(AJBNetAPI_Response_TUSRead) == 0x000008, "Wrong size on AJBNetAPI_Response_TUSRead");
static_assert(offsetof(AJBNetAPI_Response_TUSRead, Data) == 0x000000, "Member 'AJBNetAPI_Response_TUSRead::Data' has a wrong offset!");

// Function AJB.AJBNetAPI.Response_TUSWrite
// 0x0008 (0x0008 - 0x0000)
struct AJBNetAPI_Response_TUSWrite final
{
public:
	class UNetMessage*                            Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Response_TUSWrite) == 0x000008, "Wrong alignment on AJBNetAPI_Response_TUSWrite");
static_assert(sizeof(AJBNetAPI_Response_TUSWrite) == 0x000008, "Wrong size on AJBNetAPI_Response_TUSWrite");
static_assert(offsetof(AJBNetAPI_Response_TUSWrite, Data) == 0x000000, "Member 'AJBNetAPI_Response_TUSWrite::Data' has a wrong offset!");

// Function AJB.AJBNetAPI.Response_UserDelete
// 0x0008 (0x0008 - 0x0000)
struct AJBNetAPI_Response_UserDelete final
{
public:
	class UNetMessage*                            Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Response_UserDelete) == 0x000008, "Wrong alignment on AJBNetAPI_Response_UserDelete");
static_assert(sizeof(AJBNetAPI_Response_UserDelete) == 0x000008, "Wrong size on AJBNetAPI_Response_UserDelete");
static_assert(offsetof(AJBNetAPI_Response_UserDelete, Data) == 0x000000, "Member 'AJBNetAPI_Response_UserDelete::Data' has a wrong offset!");

// Function AJB.AJBNetAPI_Login.Request_UserLoginFromAwm
// 0x0048 (0x0048 - 0x0000)
struct AJBNetAPI_Login_Request_UserLoginFromAwm final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetHttp*                               NetHttp;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAmwTouchInfo                          TouchInfo;                                         // 0x0010(0x0028)(Parm, NativeAccessSpecifierPublic)
	float                                         LimitSec;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBNetAPI_Login*                       ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Login_Request_UserLoginFromAwm) == 0x000008, "Wrong alignment on AJBNetAPI_Login_Request_UserLoginFromAwm");
static_assert(sizeof(AJBNetAPI_Login_Request_UserLoginFromAwm) == 0x000048, "Wrong size on AJBNetAPI_Login_Request_UserLoginFromAwm");
static_assert(offsetof(AJBNetAPI_Login_Request_UserLoginFromAwm, WorldContextObject) == 0x000000, "Member 'AJBNetAPI_Login_Request_UserLoginFromAwm::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Login_Request_UserLoginFromAwm, NetHttp) == 0x000008, "Member 'AJBNetAPI_Login_Request_UserLoginFromAwm::NetHttp' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Login_Request_UserLoginFromAwm, TouchInfo) == 0x000010, "Member 'AJBNetAPI_Login_Request_UserLoginFromAwm::TouchInfo' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Login_Request_UserLoginFromAwm, LimitSec) == 0x000038, "Member 'AJBNetAPI_Login_Request_UserLoginFromAwm::LimitSec' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Login_Request_UserLoginFromAwm, ReturnValue) == 0x000040, "Member 'AJBNetAPI_Login_Request_UserLoginFromAwm::ReturnValue' has a wrong offset!");

// DelegateFunction AJB.AJBNetAPI_Login.AJBNetAPIResponse__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct AJBNetAPI_Login_AJBNetAPIResponse__DelegateSignature final
{
public:
	EAJBNetAPIResult                              Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNewCard;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAJBBNCardStatus                              CardStatus;                                        // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RegistBNCS;                                        // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Login_AJBNetAPIResponse__DelegateSignature) == 0x000001, "Wrong alignment on AJBNetAPI_Login_AJBNetAPIResponse__DelegateSignature");
static_assert(sizeof(AJBNetAPI_Login_AJBNetAPIResponse__DelegateSignature) == 0x000004, "Wrong size on AJBNetAPI_Login_AJBNetAPIResponse__DelegateSignature");
static_assert(offsetof(AJBNetAPI_Login_AJBNetAPIResponse__DelegateSignature, Result) == 0x000000, "Member 'AJBNetAPI_Login_AJBNetAPIResponse__DelegateSignature::Result' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Login_AJBNetAPIResponse__DelegateSignature, IsNewCard) == 0x000001, "Member 'AJBNetAPI_Login_AJBNetAPIResponse__DelegateSignature::IsNewCard' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Login_AJBNetAPIResponse__DelegateSignature, CardStatus) == 0x000002, "Member 'AJBNetAPI_Login_AJBNetAPIResponse__DelegateSignature::CardStatus' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Login_AJBNetAPIResponse__DelegateSignature, RegistBNCS) == 0x000003, "Member 'AJBNetAPI_Login_AJBNetAPIResponse__DelegateSignature::RegistBNCS' has a wrong offset!");

// Function AJB.AJBNetAPI_Login.HttpError
// 0x0018 (0x0018 - 0x0000)
struct AJBNetAPI_Login_HttpError final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Login_HttpError) == 0x000008, "Wrong alignment on AJBNetAPI_Login_HttpError");
static_assert(sizeof(AJBNetAPI_Login_HttpError) == 0x000018, "Wrong size on AJBNetAPI_Login_HttpError");
static_assert(offsetof(AJBNetAPI_Login_HttpError, Code) == 0x000000, "Member 'AJBNetAPI_Login_HttpError::Code' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Login_HttpError, ErrorMessage) == 0x000008, "Member 'AJBNetAPI_Login_HttpError::ErrorMessage' has a wrong offset!");

// Function AJB.AJBNetAPI_Login.Response_UserLogin
// 0x0008 (0x0008 - 0x0000)
struct AJBNetAPI_Login_Response_UserLogin final
{
public:
	class UNetMessage*                            Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Login_Response_UserLogin) == 0x000008, "Wrong alignment on AJBNetAPI_Login_Response_UserLogin");
static_assert(sizeof(AJBNetAPI_Login_Response_UserLogin) == 0x000008, "Wrong size on AJBNetAPI_Login_Response_UserLogin");
static_assert(offsetof(AJBNetAPI_Login_Response_UserLogin, Data) == 0x000000, "Member 'AJBNetAPI_Login_Response_UserLogin::Data' has a wrong offset!");

// Function AJB.AJBNetAPI_CreateUser.Request_UserCreateFromAwm
// 0x0048 (0x0048 - 0x0000)
struct AJBNetAPI_CreateUser_Request_UserCreateFromAwm final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetHttp*                               NetHttp;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAmwTouchInfo                          TouchInfo;                                         // 0x0010(0x0028)(Parm, NativeAccessSpecifierPublic)
	bool                                          IsGuest;                                           // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LimitSec;                                          // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAJBNetAPI_CreateUser*                  ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_CreateUser_Request_UserCreateFromAwm) == 0x000008, "Wrong alignment on AJBNetAPI_CreateUser_Request_UserCreateFromAwm");
static_assert(sizeof(AJBNetAPI_CreateUser_Request_UserCreateFromAwm) == 0x000048, "Wrong size on AJBNetAPI_CreateUser_Request_UserCreateFromAwm");
static_assert(offsetof(AJBNetAPI_CreateUser_Request_UserCreateFromAwm, WorldContextObject) == 0x000000, "Member 'AJBNetAPI_CreateUser_Request_UserCreateFromAwm::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_CreateUser_Request_UserCreateFromAwm, NetHttp) == 0x000008, "Member 'AJBNetAPI_CreateUser_Request_UserCreateFromAwm::NetHttp' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_CreateUser_Request_UserCreateFromAwm, TouchInfo) == 0x000010, "Member 'AJBNetAPI_CreateUser_Request_UserCreateFromAwm::TouchInfo' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_CreateUser_Request_UserCreateFromAwm, IsGuest) == 0x000038, "Member 'AJBNetAPI_CreateUser_Request_UserCreateFromAwm::IsGuest' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_CreateUser_Request_UserCreateFromAwm, LimitSec) == 0x00003C, "Member 'AJBNetAPI_CreateUser_Request_UserCreateFromAwm::LimitSec' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_CreateUser_Request_UserCreateFromAwm, ReturnValue) == 0x000040, "Member 'AJBNetAPI_CreateUser_Request_UserCreateFromAwm::ReturnValue' has a wrong offset!");

// DelegateFunction AJB.AJBNetAPI_CreateUser.AJBNetAPIResponse__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct AJBNetAPI_CreateUser_AJBNetAPIResponse__DelegateSignature final
{
public:
	EAJBNetAPIResult                              Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_CreateUser_AJBNetAPIResponse__DelegateSignature) == 0x000001, "Wrong alignment on AJBNetAPI_CreateUser_AJBNetAPIResponse__DelegateSignature");
static_assert(sizeof(AJBNetAPI_CreateUser_AJBNetAPIResponse__DelegateSignature) == 0x000001, "Wrong size on AJBNetAPI_CreateUser_AJBNetAPIResponse__DelegateSignature");
static_assert(offsetof(AJBNetAPI_CreateUser_AJBNetAPIResponse__DelegateSignature, Result) == 0x000000, "Member 'AJBNetAPI_CreateUser_AJBNetAPIResponse__DelegateSignature::Result' has a wrong offset!");

// Function AJB.AJBNetAPI_CreateUser.HttpError
// 0x0018 (0x0018 - 0x0000)
struct AJBNetAPI_CreateUser_HttpError final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_CreateUser_HttpError) == 0x000008, "Wrong alignment on AJBNetAPI_CreateUser_HttpError");
static_assert(sizeof(AJBNetAPI_CreateUser_HttpError) == 0x000018, "Wrong size on AJBNetAPI_CreateUser_HttpError");
static_assert(offsetof(AJBNetAPI_CreateUser_HttpError, Code) == 0x000000, "Member 'AJBNetAPI_CreateUser_HttpError::Code' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_CreateUser_HttpError, ErrorMessage) == 0x000008, "Member 'AJBNetAPI_CreateUser_HttpError::ErrorMessage' has a wrong offset!");

// Function AJB.AJBNetAPI_CreateUser.Response_UserCreate
// 0x0008 (0x0008 - 0x0000)
struct AJBNetAPI_CreateUser_Response_UserCreate final
{
public:
	class UNetMessage*                            Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_CreateUser_Response_UserCreate) == 0x000008, "Wrong alignment on AJBNetAPI_CreateUser_Response_UserCreate");
static_assert(sizeof(AJBNetAPI_CreateUser_Response_UserCreate) == 0x000008, "Wrong size on AJBNetAPI_CreateUser_Response_UserCreate");
static_assert(offsetof(AJBNetAPI_CreateUser_Response_UserCreate, Data) == 0x000000, "Member 'AJBNetAPI_CreateUser_Response_UserCreate::Data' has a wrong offset!");

// Function AJB.AJBNetAPI_Logout.Request_UserLogout
// 0x0020 (0x0020 - 0x0000)
struct AJBNetAPI_Logout_Request_UserLogout final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetHttp*                               NetHttp;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCheck;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoginCancel;                                     // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LimitSec;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAJBNetAPI_Logout*                      ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Logout_Request_UserLogout) == 0x000008, "Wrong alignment on AJBNetAPI_Logout_Request_UserLogout");
static_assert(sizeof(AJBNetAPI_Logout_Request_UserLogout) == 0x000020, "Wrong size on AJBNetAPI_Logout_Request_UserLogout");
static_assert(offsetof(AJBNetAPI_Logout_Request_UserLogout, WorldContextObject) == 0x000000, "Member 'AJBNetAPI_Logout_Request_UserLogout::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Logout_Request_UserLogout, NetHttp) == 0x000008, "Member 'AJBNetAPI_Logout_Request_UserLogout::NetHttp' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Logout_Request_UserLogout, IsCheck) == 0x000010, "Member 'AJBNetAPI_Logout_Request_UserLogout::IsCheck' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Logout_Request_UserLogout, IsLoginCancel) == 0x000011, "Member 'AJBNetAPI_Logout_Request_UserLogout::IsLoginCancel' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Logout_Request_UserLogout, LimitSec) == 0x000014, "Member 'AJBNetAPI_Logout_Request_UserLogout::LimitSec' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Logout_Request_UserLogout, ReturnValue) == 0x000018, "Member 'AJBNetAPI_Logout_Request_UserLogout::ReturnValue' has a wrong offset!");

// DelegateFunction AJB.AJBNetAPI_Logout.AJBNetAPIResponse__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct AJBNetAPI_Logout_AJBNetAPIResponse__DelegateSignature final
{
public:
	EAJBNetAPIResult                              Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAJBLogoutReward                       Reward;                                            // 0x0008(0x00A0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Logout_AJBNetAPIResponse__DelegateSignature) == 0x000008, "Wrong alignment on AJBNetAPI_Logout_AJBNetAPIResponse__DelegateSignature");
static_assert(sizeof(AJBNetAPI_Logout_AJBNetAPIResponse__DelegateSignature) == 0x0000A8, "Wrong size on AJBNetAPI_Logout_AJBNetAPIResponse__DelegateSignature");
static_assert(offsetof(AJBNetAPI_Logout_AJBNetAPIResponse__DelegateSignature, Result) == 0x000000, "Member 'AJBNetAPI_Logout_AJBNetAPIResponse__DelegateSignature::Result' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Logout_AJBNetAPIResponse__DelegateSignature, Reward) == 0x000008, "Member 'AJBNetAPI_Logout_AJBNetAPIResponse__DelegateSignature::Reward' has a wrong offset!");

// Function AJB.AJBNetAPI_Logout.HttpError
// 0x0018 (0x0018 - 0x0000)
struct AJBNetAPI_Logout_HttpError final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Logout_HttpError) == 0x000008, "Wrong alignment on AJBNetAPI_Logout_HttpError");
static_assert(sizeof(AJBNetAPI_Logout_HttpError) == 0x000018, "Wrong size on AJBNetAPI_Logout_HttpError");
static_assert(offsetof(AJBNetAPI_Logout_HttpError, Code) == 0x000000, "Member 'AJBNetAPI_Logout_HttpError::Code' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_Logout_HttpError, ErrorMessage) == 0x000008, "Member 'AJBNetAPI_Logout_HttpError::ErrorMessage' has a wrong offset!");

// Function AJB.AJBNetAPI_Logout.Response_UserLogout
// 0x0008 (0x0008 - 0x0000)
struct AJBNetAPI_Logout_Response_UserLogout final
{
public:
	class UNetMessage*                            Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_Logout_Response_UserLogout) == 0x000008, "Wrong alignment on AJBNetAPI_Logout_Response_UserLogout");
static_assert(sizeof(AJBNetAPI_Logout_Response_UserLogout) == 0x000008, "Wrong size on AJBNetAPI_Logout_Response_UserLogout");
static_assert(offsetof(AJBNetAPI_Logout_Response_UserLogout, Data) == 0x000000, "Member 'AJBNetAPI_Logout_Response_UserLogout::Data' has a wrong offset!");

// Function AJB.AJBNetAPI_GetAnnouncement.Request_InfoGetAnnouncement
// 0x0020 (0x0020 - 0x0000)
struct AJBNetAPI_GetAnnouncement_Request_InfoGetAnnouncement final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetHttp*                               NetHttp;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitSec;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBNetAPI_GetAnnouncement*             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_GetAnnouncement_Request_InfoGetAnnouncement) == 0x000008, "Wrong alignment on AJBNetAPI_GetAnnouncement_Request_InfoGetAnnouncement");
static_assert(sizeof(AJBNetAPI_GetAnnouncement_Request_InfoGetAnnouncement) == 0x000020, "Wrong size on AJBNetAPI_GetAnnouncement_Request_InfoGetAnnouncement");
static_assert(offsetof(AJBNetAPI_GetAnnouncement_Request_InfoGetAnnouncement, WorldContextObject) == 0x000000, "Member 'AJBNetAPI_GetAnnouncement_Request_InfoGetAnnouncement::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_GetAnnouncement_Request_InfoGetAnnouncement, NetHttp) == 0x000008, "Member 'AJBNetAPI_GetAnnouncement_Request_InfoGetAnnouncement::NetHttp' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_GetAnnouncement_Request_InfoGetAnnouncement, LimitSec) == 0x000010, "Member 'AJBNetAPI_GetAnnouncement_Request_InfoGetAnnouncement::LimitSec' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_GetAnnouncement_Request_InfoGetAnnouncement, ReturnValue) == 0x000018, "Member 'AJBNetAPI_GetAnnouncement_Request_InfoGetAnnouncement::ReturnValue' has a wrong offset!");

// DelegateFunction AJB.AJBNetAPI_GetAnnouncement.AJBNetAPIResponse__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct AJBNetAPI_GetAnnouncement_AJBNetAPIResponse__DelegateSignature final
{
public:
	EAJBNetAPIResult                              Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAJBAnnouncement>               Announcements;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_GetAnnouncement_AJBNetAPIResponse__DelegateSignature) == 0x000008, "Wrong alignment on AJBNetAPI_GetAnnouncement_AJBNetAPIResponse__DelegateSignature");
static_assert(sizeof(AJBNetAPI_GetAnnouncement_AJBNetAPIResponse__DelegateSignature) == 0x000018, "Wrong size on AJBNetAPI_GetAnnouncement_AJBNetAPIResponse__DelegateSignature");
static_assert(offsetof(AJBNetAPI_GetAnnouncement_AJBNetAPIResponse__DelegateSignature, Result) == 0x000000, "Member 'AJBNetAPI_GetAnnouncement_AJBNetAPIResponse__DelegateSignature::Result' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_GetAnnouncement_AJBNetAPIResponse__DelegateSignature, Announcements) == 0x000008, "Member 'AJBNetAPI_GetAnnouncement_AJBNetAPIResponse__DelegateSignature::Announcements' has a wrong offset!");

// Function AJB.AJBNetAPI_GetAnnouncement.HttpError
// 0x0018 (0x0018 - 0x0000)
struct AJBNetAPI_GetAnnouncement_HttpError final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_GetAnnouncement_HttpError) == 0x000008, "Wrong alignment on AJBNetAPI_GetAnnouncement_HttpError");
static_assert(sizeof(AJBNetAPI_GetAnnouncement_HttpError) == 0x000018, "Wrong size on AJBNetAPI_GetAnnouncement_HttpError");
static_assert(offsetof(AJBNetAPI_GetAnnouncement_HttpError, Code) == 0x000000, "Member 'AJBNetAPI_GetAnnouncement_HttpError::Code' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_GetAnnouncement_HttpError, ErrorMessage) == 0x000008, "Member 'AJBNetAPI_GetAnnouncement_HttpError::ErrorMessage' has a wrong offset!");

// Function AJB.AJBNetAPI_GetAnnouncement.Response_InfoGetAnnouncement
// 0x0008 (0x0008 - 0x0000)
struct AJBNetAPI_GetAnnouncement_Response_InfoGetAnnouncement final
{
public:
	class UNetMessage*                            Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_GetAnnouncement_Response_InfoGetAnnouncement) == 0x000008, "Wrong alignment on AJBNetAPI_GetAnnouncement_Response_InfoGetAnnouncement");
static_assert(sizeof(AJBNetAPI_GetAnnouncement_Response_InfoGetAnnouncement) == 0x000008, "Wrong size on AJBNetAPI_GetAnnouncement_Response_InfoGetAnnouncement");
static_assert(offsetof(AJBNetAPI_GetAnnouncement_Response_InfoGetAnnouncement, Data) == 0x000000, "Member 'AJBNetAPI_GetAnnouncement_Response_InfoGetAnnouncement::Data' has a wrong offset!");

// Function AJB.AJBNetAPI_GameResult.Request_GameResult
// 0x0058 (0x0058 - 0x0000)
struct AJBNetAPI_GameResult_Request_GameResult final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetHttp*                               NetHttp;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAJBGameRecord                         GameRecord;                                        // 0x0010(0x0038)(Parm, NativeAccessSpecifierPublic)
	float                                         LimitSec;                                          // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBNetAPI_GameResult*                  ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_GameResult_Request_GameResult) == 0x000008, "Wrong alignment on AJBNetAPI_GameResult_Request_GameResult");
static_assert(sizeof(AJBNetAPI_GameResult_Request_GameResult) == 0x000058, "Wrong size on AJBNetAPI_GameResult_Request_GameResult");
static_assert(offsetof(AJBNetAPI_GameResult_Request_GameResult, WorldContextObject) == 0x000000, "Member 'AJBNetAPI_GameResult_Request_GameResult::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_GameResult_Request_GameResult, NetHttp) == 0x000008, "Member 'AJBNetAPI_GameResult_Request_GameResult::NetHttp' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_GameResult_Request_GameResult, GameRecord) == 0x000010, "Member 'AJBNetAPI_GameResult_Request_GameResult::GameRecord' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_GameResult_Request_GameResult, LimitSec) == 0x000048, "Member 'AJBNetAPI_GameResult_Request_GameResult::LimitSec' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_GameResult_Request_GameResult, ReturnValue) == 0x000050, "Member 'AJBNetAPI_GameResult_Request_GameResult::ReturnValue' has a wrong offset!");

// DelegateFunction AJB.AJBNetAPI_GameResult.AJBNetAPIResponse__DelegateSignature
// 0x0198 (0x0198 - 0x0000)
struct AJBNetAPI_GameResult_AJBNetAPIResponse__DelegateSignature final
{
public:
	EAJBNetAPIResult                              Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAJBGameResult                         GameResultData;                                    // 0x0008(0x0190)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_GameResult_AJBNetAPIResponse__DelegateSignature) == 0x000008, "Wrong alignment on AJBNetAPI_GameResult_AJBNetAPIResponse__DelegateSignature");
static_assert(sizeof(AJBNetAPI_GameResult_AJBNetAPIResponse__DelegateSignature) == 0x000198, "Wrong size on AJBNetAPI_GameResult_AJBNetAPIResponse__DelegateSignature");
static_assert(offsetof(AJBNetAPI_GameResult_AJBNetAPIResponse__DelegateSignature, Result) == 0x000000, "Member 'AJBNetAPI_GameResult_AJBNetAPIResponse__DelegateSignature::Result' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_GameResult_AJBNetAPIResponse__DelegateSignature, GameResultData) == 0x000008, "Member 'AJBNetAPI_GameResult_AJBNetAPIResponse__DelegateSignature::GameResultData' has a wrong offset!");

// Function AJB.AJBNetAPI_GameResult.HttpError
// 0x0018 (0x0018 - 0x0000)
struct AJBNetAPI_GameResult_HttpError final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_GameResult_HttpError) == 0x000008, "Wrong alignment on AJBNetAPI_GameResult_HttpError");
static_assert(sizeof(AJBNetAPI_GameResult_HttpError) == 0x000018, "Wrong size on AJBNetAPI_GameResult_HttpError");
static_assert(offsetof(AJBNetAPI_GameResult_HttpError, Code) == 0x000000, "Member 'AJBNetAPI_GameResult_HttpError::Code' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_GameResult_HttpError, ErrorMessage) == 0x000008, "Member 'AJBNetAPI_GameResult_HttpError::ErrorMessage' has a wrong offset!");

// Function AJB.AJBNetAPI_GameResult.Response_GameResult
// 0x0008 (0x0008 - 0x0000)
struct AJBNetAPI_GameResult_Response_GameResult final
{
public:
	class UNetMessage*                            Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_GameResult_Response_GameResult) == 0x000008, "Wrong alignment on AJBNetAPI_GameResult_Response_GameResult");
static_assert(sizeof(AJBNetAPI_GameResult_Response_GameResult) == 0x000008, "Wrong size on AJBNetAPI_GameResult_Response_GameResult");
static_assert(offsetof(AJBNetAPI_GameResult_Response_GameResult, Data) == 0x000000, "Member 'AJBNetAPI_GameResult_Response_GameResult::Data' has a wrong offset!");

// Function AJB.AJBNetAPI_ResultGetReward.Request_ResultGetReward
// 0x0020 (0x0020 - 0x0000)
struct AJBNetAPI_ResultGetReward_Request_ResultGetReward final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetHttp*                               NetHttp;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAJBGachaType                                 GachaType;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LimitSec;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAJBNetAPI_ResultGetReward*             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_ResultGetReward_Request_ResultGetReward) == 0x000008, "Wrong alignment on AJBNetAPI_ResultGetReward_Request_ResultGetReward");
static_assert(sizeof(AJBNetAPI_ResultGetReward_Request_ResultGetReward) == 0x000020, "Wrong size on AJBNetAPI_ResultGetReward_Request_ResultGetReward");
static_assert(offsetof(AJBNetAPI_ResultGetReward_Request_ResultGetReward, WorldContextObject) == 0x000000, "Member 'AJBNetAPI_ResultGetReward_Request_ResultGetReward::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_ResultGetReward_Request_ResultGetReward, NetHttp) == 0x000008, "Member 'AJBNetAPI_ResultGetReward_Request_ResultGetReward::NetHttp' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_ResultGetReward_Request_ResultGetReward, GachaType) == 0x000010, "Member 'AJBNetAPI_ResultGetReward_Request_ResultGetReward::GachaType' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_ResultGetReward_Request_ResultGetReward, LimitSec) == 0x000014, "Member 'AJBNetAPI_ResultGetReward_Request_ResultGetReward::LimitSec' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_ResultGetReward_Request_ResultGetReward, ReturnValue) == 0x000018, "Member 'AJBNetAPI_ResultGetReward_Request_ResultGetReward::ReturnValue' has a wrong offset!");

// Function AJB.AJBNetAPI_ResultGetReward.Request_ResultGetRewardCheckGachaID
// 0x0040 (0x0040 - 0x0000)
struct AJBNetAPI_ResultGetReward_Request_ResultGetRewardCheckGachaID final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetHttp*                               NetHttp;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAJBGachaID                            GachaID;                                           // 0x0010(0x0020)(Parm, NativeAccessSpecifierPublic)
	EAJBGachaType                                 GachaType;                                         // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LimitSec;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAJBNetAPI_ResultGetReward*             ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_ResultGetReward_Request_ResultGetRewardCheckGachaID) == 0x000008, "Wrong alignment on AJBNetAPI_ResultGetReward_Request_ResultGetRewardCheckGachaID");
static_assert(sizeof(AJBNetAPI_ResultGetReward_Request_ResultGetRewardCheckGachaID) == 0x000040, "Wrong size on AJBNetAPI_ResultGetReward_Request_ResultGetRewardCheckGachaID");
static_assert(offsetof(AJBNetAPI_ResultGetReward_Request_ResultGetRewardCheckGachaID, WorldContextObject) == 0x000000, "Member 'AJBNetAPI_ResultGetReward_Request_ResultGetRewardCheckGachaID::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_ResultGetReward_Request_ResultGetRewardCheckGachaID, NetHttp) == 0x000008, "Member 'AJBNetAPI_ResultGetReward_Request_ResultGetRewardCheckGachaID::NetHttp' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_ResultGetReward_Request_ResultGetRewardCheckGachaID, GachaID) == 0x000010, "Member 'AJBNetAPI_ResultGetReward_Request_ResultGetRewardCheckGachaID::GachaID' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_ResultGetReward_Request_ResultGetRewardCheckGachaID, GachaType) == 0x000030, "Member 'AJBNetAPI_ResultGetReward_Request_ResultGetRewardCheckGachaID::GachaType' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_ResultGetReward_Request_ResultGetRewardCheckGachaID, LimitSec) == 0x000034, "Member 'AJBNetAPI_ResultGetReward_Request_ResultGetRewardCheckGachaID::LimitSec' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_ResultGetReward_Request_ResultGetRewardCheckGachaID, ReturnValue) == 0x000038, "Member 'AJBNetAPI_ResultGetReward_Request_ResultGetRewardCheckGachaID::ReturnValue' has a wrong offset!");

// DelegateFunction AJB.AJBNetAPI_ResultGetReward.AJBNetAPIResponse__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct AJBNetAPI_ResultGetReward_AJBNetAPIResponse__DelegateSignature final
{
public:
	EAJBNetAPIResult                              Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAJBRewardReceivingStatus                     ReceiveingStatus;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAJBGetRewardsResponse                 GetRewards;                                        // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_ResultGetReward_AJBNetAPIResponse__DelegateSignature) == 0x000008, "Wrong alignment on AJBNetAPI_ResultGetReward_AJBNetAPIResponse__DelegateSignature");
static_assert(sizeof(AJBNetAPI_ResultGetReward_AJBNetAPIResponse__DelegateSignature) == 0x000018, "Wrong size on AJBNetAPI_ResultGetReward_AJBNetAPIResponse__DelegateSignature");
static_assert(offsetof(AJBNetAPI_ResultGetReward_AJBNetAPIResponse__DelegateSignature, Result) == 0x000000, "Member 'AJBNetAPI_ResultGetReward_AJBNetAPIResponse__DelegateSignature::Result' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_ResultGetReward_AJBNetAPIResponse__DelegateSignature, ReceiveingStatus) == 0x000001, "Member 'AJBNetAPI_ResultGetReward_AJBNetAPIResponse__DelegateSignature::ReceiveingStatus' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_ResultGetReward_AJBNetAPIResponse__DelegateSignature, GetRewards) == 0x000008, "Member 'AJBNetAPI_ResultGetReward_AJBNetAPIResponse__DelegateSignature::GetRewards' has a wrong offset!");

// Function AJB.AJBNetAPI_ResultGetReward.HttpError
// 0x0018 (0x0018 - 0x0000)
struct AJBNetAPI_ResultGetReward_HttpError final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_ResultGetReward_HttpError) == 0x000008, "Wrong alignment on AJBNetAPI_ResultGetReward_HttpError");
static_assert(sizeof(AJBNetAPI_ResultGetReward_HttpError) == 0x000018, "Wrong size on AJBNetAPI_ResultGetReward_HttpError");
static_assert(offsetof(AJBNetAPI_ResultGetReward_HttpError, Code) == 0x000000, "Member 'AJBNetAPI_ResultGetReward_HttpError::Code' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_ResultGetReward_HttpError, ErrorMessage) == 0x000008, "Member 'AJBNetAPI_ResultGetReward_HttpError::ErrorMessage' has a wrong offset!");

// Function AJB.AJBNetAPI_ResultGetReward.Response_ResultGetReward
// 0x0008 (0x0008 - 0x0000)
struct AJBNetAPI_ResultGetReward_Response_ResultGetReward final
{
public:
	class UNetMessage*                            Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_ResultGetReward_Response_ResultGetReward) == 0x000008, "Wrong alignment on AJBNetAPI_ResultGetReward_Response_ResultGetReward");
static_assert(sizeof(AJBNetAPI_ResultGetReward_Response_ResultGetReward) == 0x000008, "Wrong size on AJBNetAPI_ResultGetReward_Response_ResultGetReward");
static_assert(offsetof(AJBNetAPI_ResultGetReward_Response_ResultGetReward, Data) == 0x000000, "Member 'AJBNetAPI_ResultGetReward_Response_ResultGetReward::Data' has a wrong offset!");

// Function AJB.AJBNetAPI_UserCheck.Request_UserCheckFromAwm
// 0x0048 (0x0048 - 0x0000)
struct AJBNetAPI_UserCheck_Request_UserCheckFromAwm final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetHttp*                               NetHttp;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAmwTouchInfo                          TouchInfo;                                         // 0x0010(0x0028)(Parm, NativeAccessSpecifierPublic)
	float                                         LimitSec;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBNetAPI_UserCheck*                   ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_UserCheck_Request_UserCheckFromAwm) == 0x000008, "Wrong alignment on AJBNetAPI_UserCheck_Request_UserCheckFromAwm");
static_assert(sizeof(AJBNetAPI_UserCheck_Request_UserCheckFromAwm) == 0x000048, "Wrong size on AJBNetAPI_UserCheck_Request_UserCheckFromAwm");
static_assert(offsetof(AJBNetAPI_UserCheck_Request_UserCheckFromAwm, WorldContextObject) == 0x000000, "Member 'AJBNetAPI_UserCheck_Request_UserCheckFromAwm::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UserCheck_Request_UserCheckFromAwm, NetHttp) == 0x000008, "Member 'AJBNetAPI_UserCheck_Request_UserCheckFromAwm::NetHttp' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UserCheck_Request_UserCheckFromAwm, TouchInfo) == 0x000010, "Member 'AJBNetAPI_UserCheck_Request_UserCheckFromAwm::TouchInfo' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UserCheck_Request_UserCheckFromAwm, LimitSec) == 0x000038, "Member 'AJBNetAPI_UserCheck_Request_UserCheckFromAwm::LimitSec' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UserCheck_Request_UserCheckFromAwm, ReturnValue) == 0x000040, "Member 'AJBNetAPI_UserCheck_Request_UserCheckFromAwm::ReturnValue' has a wrong offset!");

// DelegateFunction AJB.AJBNetAPI_UserCheck.AJBNetAPIResponse__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct AJBNetAPI_UserCheck_AJBNetAPIResponse__DelegateSignature final
{
public:
	EAJBNetAPIResult                              Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNewUser;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAJBBNCardStatus                              CardStatus;                                        // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RegistBNCS;                                        // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_UserCheck_AJBNetAPIResponse__DelegateSignature) == 0x000001, "Wrong alignment on AJBNetAPI_UserCheck_AJBNetAPIResponse__DelegateSignature");
static_assert(sizeof(AJBNetAPI_UserCheck_AJBNetAPIResponse__DelegateSignature) == 0x000004, "Wrong size on AJBNetAPI_UserCheck_AJBNetAPIResponse__DelegateSignature");
static_assert(offsetof(AJBNetAPI_UserCheck_AJBNetAPIResponse__DelegateSignature, Result) == 0x000000, "Member 'AJBNetAPI_UserCheck_AJBNetAPIResponse__DelegateSignature::Result' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UserCheck_AJBNetAPIResponse__DelegateSignature, bIsNewUser) == 0x000001, "Member 'AJBNetAPI_UserCheck_AJBNetAPIResponse__DelegateSignature::bIsNewUser' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UserCheck_AJBNetAPIResponse__DelegateSignature, CardStatus) == 0x000002, "Member 'AJBNetAPI_UserCheck_AJBNetAPIResponse__DelegateSignature::CardStatus' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UserCheck_AJBNetAPIResponse__DelegateSignature, RegistBNCS) == 0x000003, "Member 'AJBNetAPI_UserCheck_AJBNetAPIResponse__DelegateSignature::RegistBNCS' has a wrong offset!");

// Function AJB.AJBNetAPI_UserCheck.HttpError
// 0x0018 (0x0018 - 0x0000)
struct AJBNetAPI_UserCheck_HttpError final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_UserCheck_HttpError) == 0x000008, "Wrong alignment on AJBNetAPI_UserCheck_HttpError");
static_assert(sizeof(AJBNetAPI_UserCheck_HttpError) == 0x000018, "Wrong size on AJBNetAPI_UserCheck_HttpError");
static_assert(offsetof(AJBNetAPI_UserCheck_HttpError, Code) == 0x000000, "Member 'AJBNetAPI_UserCheck_HttpError::Code' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UserCheck_HttpError, ErrorMessage) == 0x000008, "Member 'AJBNetAPI_UserCheck_HttpError::ErrorMessage' has a wrong offset!");

// Function AJB.AJBNetAPI_UserCheck.Response_UserCheck
// 0x0008 (0x0008 - 0x0000)
struct AJBNetAPI_UserCheck_Response_UserCheck final
{
public:
	class UNetMessage*                            Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_UserCheck_Response_UserCheck) == 0x000008, "Wrong alignment on AJBNetAPI_UserCheck_Response_UserCheck");
static_assert(sizeof(AJBNetAPI_UserCheck_Response_UserCheck) == 0x000008, "Wrong size on AJBNetAPI_UserCheck_Response_UserCheck");
static_assert(offsetof(AJBNetAPI_UserCheck_Response_UserCheck, Data) == 0x000000, "Member 'AJBNetAPI_UserCheck_Response_UserCheck::Data' has a wrong offset!");

// Function AJB.AJBNetAPI_UserUnlock.Request_LoginedUserUnlock
// 0x0020 (0x0020 - 0x0000)
struct AJBNetAPI_UserUnlock_Request_LoginedUserUnlock final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetHttp*                               NetHttp;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitSec;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBNetAPI_UserUnlock*                  ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_UserUnlock_Request_LoginedUserUnlock) == 0x000008, "Wrong alignment on AJBNetAPI_UserUnlock_Request_LoginedUserUnlock");
static_assert(sizeof(AJBNetAPI_UserUnlock_Request_LoginedUserUnlock) == 0x000020, "Wrong size on AJBNetAPI_UserUnlock_Request_LoginedUserUnlock");
static_assert(offsetof(AJBNetAPI_UserUnlock_Request_LoginedUserUnlock, WorldContextObject) == 0x000000, "Member 'AJBNetAPI_UserUnlock_Request_LoginedUserUnlock::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UserUnlock_Request_LoginedUserUnlock, NetHttp) == 0x000008, "Member 'AJBNetAPI_UserUnlock_Request_LoginedUserUnlock::NetHttp' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UserUnlock_Request_LoginedUserUnlock, LimitSec) == 0x000010, "Member 'AJBNetAPI_UserUnlock_Request_LoginedUserUnlock::LimitSec' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UserUnlock_Request_LoginedUserUnlock, ReturnValue) == 0x000018, "Member 'AJBNetAPI_UserUnlock_Request_LoginedUserUnlock::ReturnValue' has a wrong offset!");

// Function AJB.AJBNetAPI_UserUnlock.Request_UserUnlockFromAwm
// 0x0048 (0x0048 - 0x0000)
struct AJBNetAPI_UserUnlock_Request_UserUnlockFromAwm final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetHttp*                               NetHttp;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAmwTouchInfo                          TouchInfo;                                         // 0x0010(0x0028)(Parm, NativeAccessSpecifierPublic)
	float                                         LimitSec;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBNetAPI_UserUnlock*                  ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_UserUnlock_Request_UserUnlockFromAwm) == 0x000008, "Wrong alignment on AJBNetAPI_UserUnlock_Request_UserUnlockFromAwm");
static_assert(sizeof(AJBNetAPI_UserUnlock_Request_UserUnlockFromAwm) == 0x000048, "Wrong size on AJBNetAPI_UserUnlock_Request_UserUnlockFromAwm");
static_assert(offsetof(AJBNetAPI_UserUnlock_Request_UserUnlockFromAwm, WorldContextObject) == 0x000000, "Member 'AJBNetAPI_UserUnlock_Request_UserUnlockFromAwm::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UserUnlock_Request_UserUnlockFromAwm, NetHttp) == 0x000008, "Member 'AJBNetAPI_UserUnlock_Request_UserUnlockFromAwm::NetHttp' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UserUnlock_Request_UserUnlockFromAwm, TouchInfo) == 0x000010, "Member 'AJBNetAPI_UserUnlock_Request_UserUnlockFromAwm::TouchInfo' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UserUnlock_Request_UserUnlockFromAwm, LimitSec) == 0x000038, "Member 'AJBNetAPI_UserUnlock_Request_UserUnlockFromAwm::LimitSec' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UserUnlock_Request_UserUnlockFromAwm, ReturnValue) == 0x000040, "Member 'AJBNetAPI_UserUnlock_Request_UserUnlockFromAwm::ReturnValue' has a wrong offset!");

// DelegateFunction AJB.AJBNetAPI_UserUnlock.AJBNetAPIResponse__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct AJBNetAPI_UserUnlock_AJBNetAPIResponse__DelegateSignature final
{
public:
	EAJBNetAPIResult                              Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNewUser;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAJBBNCardStatus                              CardStatus;                                        // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNotLocked;                                      // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_UserUnlock_AJBNetAPIResponse__DelegateSignature) == 0x000001, "Wrong alignment on AJBNetAPI_UserUnlock_AJBNetAPIResponse__DelegateSignature");
static_assert(sizeof(AJBNetAPI_UserUnlock_AJBNetAPIResponse__DelegateSignature) == 0x000004, "Wrong size on AJBNetAPI_UserUnlock_AJBNetAPIResponse__DelegateSignature");
static_assert(offsetof(AJBNetAPI_UserUnlock_AJBNetAPIResponse__DelegateSignature, Result) == 0x000000, "Member 'AJBNetAPI_UserUnlock_AJBNetAPIResponse__DelegateSignature::Result' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UserUnlock_AJBNetAPIResponse__DelegateSignature, bIsNewUser) == 0x000001, "Member 'AJBNetAPI_UserUnlock_AJBNetAPIResponse__DelegateSignature::bIsNewUser' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UserUnlock_AJBNetAPIResponse__DelegateSignature, CardStatus) == 0x000002, "Member 'AJBNetAPI_UserUnlock_AJBNetAPIResponse__DelegateSignature::CardStatus' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UserUnlock_AJBNetAPIResponse__DelegateSignature, bIsNotLocked) == 0x000003, "Member 'AJBNetAPI_UserUnlock_AJBNetAPIResponse__DelegateSignature::bIsNotLocked' has a wrong offset!");

// Function AJB.AJBNetAPI_UserUnlock.HttpError
// 0x0018 (0x0018 - 0x0000)
struct AJBNetAPI_UserUnlock_HttpError final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_UserUnlock_HttpError) == 0x000008, "Wrong alignment on AJBNetAPI_UserUnlock_HttpError");
static_assert(sizeof(AJBNetAPI_UserUnlock_HttpError) == 0x000018, "Wrong size on AJBNetAPI_UserUnlock_HttpError");
static_assert(offsetof(AJBNetAPI_UserUnlock_HttpError, Code) == 0x000000, "Member 'AJBNetAPI_UserUnlock_HttpError::Code' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UserUnlock_HttpError, ErrorMessage) == 0x000008, "Member 'AJBNetAPI_UserUnlock_HttpError::ErrorMessage' has a wrong offset!");

// Function AJB.AJBNetAPI_UserUnlock.Response_UserUnlock
// 0x0008 (0x0008 - 0x0000)
struct AJBNetAPI_UserUnlock_Response_UserUnlock final
{
public:
	class UNetMessage*                            Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_UserUnlock_Response_UserUnlock) == 0x000008, "Wrong alignment on AJBNetAPI_UserUnlock_Response_UserUnlock");
static_assert(sizeof(AJBNetAPI_UserUnlock_Response_UserUnlock) == 0x000008, "Wrong size on AJBNetAPI_UserUnlock_Response_UserUnlock");
static_assert(offsetof(AJBNetAPI_UserUnlock_Response_UserUnlock, Data) == 0x000000, "Member 'AJBNetAPI_UserUnlock_Response_UserUnlock::Data' has a wrong offset!");

// Function AJB.AJBNetAPI_UploadHighlight.Request_UploadHighlight
// 0x0048 (0x0048 - 0x0000)
struct AJBNetAPI_UploadHighlight_Request_UploadHighlight final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetHttp*                               NetHttp;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FColor>                         ColorBuffer;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ImageWidth;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ImageHeight;                                       // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HighLightFilePath;                                 // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitSec;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBNetAPI_UploadHighlight*             ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_UploadHighlight_Request_UploadHighlight) == 0x000008, "Wrong alignment on AJBNetAPI_UploadHighlight_Request_UploadHighlight");
static_assert(sizeof(AJBNetAPI_UploadHighlight_Request_UploadHighlight) == 0x000048, "Wrong size on AJBNetAPI_UploadHighlight_Request_UploadHighlight");
static_assert(offsetof(AJBNetAPI_UploadHighlight_Request_UploadHighlight, WorldContextObject) == 0x000000, "Member 'AJBNetAPI_UploadHighlight_Request_UploadHighlight::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UploadHighlight_Request_UploadHighlight, NetHttp) == 0x000008, "Member 'AJBNetAPI_UploadHighlight_Request_UploadHighlight::NetHttp' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UploadHighlight_Request_UploadHighlight, ColorBuffer) == 0x000010, "Member 'AJBNetAPI_UploadHighlight_Request_UploadHighlight::ColorBuffer' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UploadHighlight_Request_UploadHighlight, ImageWidth) == 0x000020, "Member 'AJBNetAPI_UploadHighlight_Request_UploadHighlight::ImageWidth' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UploadHighlight_Request_UploadHighlight, ImageHeight) == 0x000024, "Member 'AJBNetAPI_UploadHighlight_Request_UploadHighlight::ImageHeight' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UploadHighlight_Request_UploadHighlight, HighLightFilePath) == 0x000028, "Member 'AJBNetAPI_UploadHighlight_Request_UploadHighlight::HighLightFilePath' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UploadHighlight_Request_UploadHighlight, LimitSec) == 0x000038, "Member 'AJBNetAPI_UploadHighlight_Request_UploadHighlight::LimitSec' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UploadHighlight_Request_UploadHighlight, ReturnValue) == 0x000040, "Member 'AJBNetAPI_UploadHighlight_Request_UploadHighlight::ReturnValue' has a wrong offset!");

// DelegateFunction AJB.AJBNetAPI_UploadHighlight.AJBNetAPIResponse__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct AJBNetAPI_UploadHighlight_AJBNetAPIResponse__DelegateSignature final
{
public:
	EAJBNetAPIResult                              Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentSection;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSection;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_UploadHighlight_AJBNetAPIResponse__DelegateSignature) == 0x000004, "Wrong alignment on AJBNetAPI_UploadHighlight_AJBNetAPIResponse__DelegateSignature");
static_assert(sizeof(AJBNetAPI_UploadHighlight_AJBNetAPIResponse__DelegateSignature) == 0x00000C, "Wrong size on AJBNetAPI_UploadHighlight_AJBNetAPIResponse__DelegateSignature");
static_assert(offsetof(AJBNetAPI_UploadHighlight_AJBNetAPIResponse__DelegateSignature, Result) == 0x000000, "Member 'AJBNetAPI_UploadHighlight_AJBNetAPIResponse__DelegateSignature::Result' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UploadHighlight_AJBNetAPIResponse__DelegateSignature, CurrentSection) == 0x000004, "Member 'AJBNetAPI_UploadHighlight_AJBNetAPIResponse__DelegateSignature::CurrentSection' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UploadHighlight_AJBNetAPIResponse__DelegateSignature, TotalSection) == 0x000008, "Member 'AJBNetAPI_UploadHighlight_AJBNetAPIResponse__DelegateSignature::TotalSection' has a wrong offset!");

// Function AJB.AJBNetAPI_UploadHighlight.HttpError
// 0x0018 (0x0018 - 0x0000)
struct AJBNetAPI_UploadHighlight_HttpError final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_UploadHighlight_HttpError) == 0x000008, "Wrong alignment on AJBNetAPI_UploadHighlight_HttpError");
static_assert(sizeof(AJBNetAPI_UploadHighlight_HttpError) == 0x000018, "Wrong size on AJBNetAPI_UploadHighlight_HttpError");
static_assert(offsetof(AJBNetAPI_UploadHighlight_HttpError, Code) == 0x000000, "Member 'AJBNetAPI_UploadHighlight_HttpError::Code' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UploadHighlight_HttpError, ErrorMessage) == 0x000008, "Member 'AJBNetAPI_UploadHighlight_HttpError::ErrorMessage' has a wrong offset!");

// Function AJB.AJBNetAPI_UploadHighlight.Response_UploadHighlight
// 0x0008 (0x0008 - 0x0000)
struct AJBNetAPI_UploadHighlight_Response_UploadHighlight final
{
public:
	class UNetMessage*                            Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_UploadHighlight_Response_UploadHighlight) == 0x000008, "Wrong alignment on AJBNetAPI_UploadHighlight_Response_UploadHighlight");
static_assert(sizeof(AJBNetAPI_UploadHighlight_Response_UploadHighlight) == 0x000008, "Wrong size on AJBNetAPI_UploadHighlight_Response_UploadHighlight");
static_assert(offsetof(AJBNetAPI_UploadHighlight_Response_UploadHighlight, Data) == 0x000000, "Member 'AJBNetAPI_UploadHighlight_Response_UploadHighlight::Data' has a wrong offset!");

// Function AJB.AJBNetAPI_UploadHeadClerk.Request_UploadHeadClerk
// 0x0018 (0x0018 - 0x0000)
struct AJBNetAPI_UploadHeadClerk_Request_UploadHeadClerk final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetHttp*                               NetHttp;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAJBNetAPI_UploadHeadClerk*             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_UploadHeadClerk_Request_UploadHeadClerk) == 0x000008, "Wrong alignment on AJBNetAPI_UploadHeadClerk_Request_UploadHeadClerk");
static_assert(sizeof(AJBNetAPI_UploadHeadClerk_Request_UploadHeadClerk) == 0x000018, "Wrong size on AJBNetAPI_UploadHeadClerk_Request_UploadHeadClerk");
static_assert(offsetof(AJBNetAPI_UploadHeadClerk_Request_UploadHeadClerk, WorldContextObject) == 0x000000, "Member 'AJBNetAPI_UploadHeadClerk_Request_UploadHeadClerk::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UploadHeadClerk_Request_UploadHeadClerk, NetHttp) == 0x000008, "Member 'AJBNetAPI_UploadHeadClerk_Request_UploadHeadClerk::NetHttp' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UploadHeadClerk_Request_UploadHeadClerk, ReturnValue) == 0x000010, "Member 'AJBNetAPI_UploadHeadClerk_Request_UploadHeadClerk::ReturnValue' has a wrong offset!");

// Function AJB.AJBNetAPI_UploadHeadClerk.SaveUploadHeadClerk
// 0x0008 (0x0008 - 0x0000)
struct AJBNetAPI_UploadHeadClerk_SaveUploadHeadClerk final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_UploadHeadClerk_SaveUploadHeadClerk) == 0x000008, "Wrong alignment on AJBNetAPI_UploadHeadClerk_SaveUploadHeadClerk");
static_assert(sizeof(AJBNetAPI_UploadHeadClerk_SaveUploadHeadClerk) == 0x000008, "Wrong size on AJBNetAPI_UploadHeadClerk_SaveUploadHeadClerk");
static_assert(offsetof(AJBNetAPI_UploadHeadClerk_SaveUploadHeadClerk, WorldContextObject) == 0x000000, "Member 'AJBNetAPI_UploadHeadClerk_SaveUploadHeadClerk::WorldContextObject' has a wrong offset!");

// DelegateFunction AJB.AJBNetAPI_UploadHeadClerk.AJBNetAPIResponse__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct AJBNetAPI_UploadHeadClerk_AJBNetAPIResponse__DelegateSignature final
{
public:
	EAJBNetAPIResult                              Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RemaingNum;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_UploadHeadClerk_AJBNetAPIResponse__DelegateSignature) == 0x000004, "Wrong alignment on AJBNetAPI_UploadHeadClerk_AJBNetAPIResponse__DelegateSignature");
static_assert(sizeof(AJBNetAPI_UploadHeadClerk_AJBNetAPIResponse__DelegateSignature) == 0x000008, "Wrong size on AJBNetAPI_UploadHeadClerk_AJBNetAPIResponse__DelegateSignature");
static_assert(offsetof(AJBNetAPI_UploadHeadClerk_AJBNetAPIResponse__DelegateSignature, Result) == 0x000000, "Member 'AJBNetAPI_UploadHeadClerk_AJBNetAPIResponse__DelegateSignature::Result' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UploadHeadClerk_AJBNetAPIResponse__DelegateSignature, RemaingNum) == 0x000004, "Member 'AJBNetAPI_UploadHeadClerk_AJBNetAPIResponse__DelegateSignature::RemaingNum' has a wrong offset!");

// Function AJB.AJBNetAPI_UploadHeadClerk.HttpError
// 0x0018 (0x0018 - 0x0000)
struct AJBNetAPI_UploadHeadClerk_HttpError final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_UploadHeadClerk_HttpError) == 0x000008, "Wrong alignment on AJBNetAPI_UploadHeadClerk_HttpError");
static_assert(sizeof(AJBNetAPI_UploadHeadClerk_HttpError) == 0x000018, "Wrong size on AJBNetAPI_UploadHeadClerk_HttpError");
static_assert(offsetof(AJBNetAPI_UploadHeadClerk_HttpError, Code) == 0x000000, "Member 'AJBNetAPI_UploadHeadClerk_HttpError::Code' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UploadHeadClerk_HttpError, ErrorMessage) == 0x000008, "Member 'AJBNetAPI_UploadHeadClerk_HttpError::ErrorMessage' has a wrong offset!");

// Function AJB.AJBNetAPI_UploadHeadClerk.Response_UploadHeadClerk
// 0x0008 (0x0008 - 0x0000)
struct AJBNetAPI_UploadHeadClerk_Response_UploadHeadClerk final
{
public:
	class UNetMessage*                            Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_UploadHeadClerk_Response_UploadHeadClerk) == 0x000008, "Wrong alignment on AJBNetAPI_UploadHeadClerk_Response_UploadHeadClerk");
static_assert(sizeof(AJBNetAPI_UploadHeadClerk_Response_UploadHeadClerk) == 0x000008, "Wrong size on AJBNetAPI_UploadHeadClerk_Response_UploadHeadClerk");
static_assert(offsetof(AJBNetAPI_UploadHeadClerk_Response_UploadHeadClerk, Data) == 0x000000, "Member 'AJBNetAPI_UploadHeadClerk_Response_UploadHeadClerk::Data' has a wrong offset!");

// Function AJB.AJBNetAPI_UserExtendBPLock.Request_UserExtendBPLock
// 0x0020 (0x0020 - 0x0000)
struct AJBNetAPI_UserExtendBPLock_Request_UserExtendBPLock final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetHttp*                               NetHttp;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitSec;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBNetAPI_UserExtendBPLock*            ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_UserExtendBPLock_Request_UserExtendBPLock) == 0x000008, "Wrong alignment on AJBNetAPI_UserExtendBPLock_Request_UserExtendBPLock");
static_assert(sizeof(AJBNetAPI_UserExtendBPLock_Request_UserExtendBPLock) == 0x000020, "Wrong size on AJBNetAPI_UserExtendBPLock_Request_UserExtendBPLock");
static_assert(offsetof(AJBNetAPI_UserExtendBPLock_Request_UserExtendBPLock, WorldContextObject) == 0x000000, "Member 'AJBNetAPI_UserExtendBPLock_Request_UserExtendBPLock::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UserExtendBPLock_Request_UserExtendBPLock, NetHttp) == 0x000008, "Member 'AJBNetAPI_UserExtendBPLock_Request_UserExtendBPLock::NetHttp' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UserExtendBPLock_Request_UserExtendBPLock, LimitSec) == 0x000010, "Member 'AJBNetAPI_UserExtendBPLock_Request_UserExtendBPLock::LimitSec' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UserExtendBPLock_Request_UserExtendBPLock, ReturnValue) == 0x000018, "Member 'AJBNetAPI_UserExtendBPLock_Request_UserExtendBPLock::ReturnValue' has a wrong offset!");

// DelegateFunction AJB.AJBNetAPI_UserExtendBPLock.AJBNetAPIResponse__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct AJBNetAPI_UserExtendBPLock_AJBNetAPIResponse__DelegateSignature final
{
public:
	EAJBNetAPIResult                              Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NextExtendSpan;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_UserExtendBPLock_AJBNetAPIResponse__DelegateSignature) == 0x000004, "Wrong alignment on AJBNetAPI_UserExtendBPLock_AJBNetAPIResponse__DelegateSignature");
static_assert(sizeof(AJBNetAPI_UserExtendBPLock_AJBNetAPIResponse__DelegateSignature) == 0x000008, "Wrong size on AJBNetAPI_UserExtendBPLock_AJBNetAPIResponse__DelegateSignature");
static_assert(offsetof(AJBNetAPI_UserExtendBPLock_AJBNetAPIResponse__DelegateSignature, Result) == 0x000000, "Member 'AJBNetAPI_UserExtendBPLock_AJBNetAPIResponse__DelegateSignature::Result' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UserExtendBPLock_AJBNetAPIResponse__DelegateSignature, NextExtendSpan) == 0x000004, "Member 'AJBNetAPI_UserExtendBPLock_AJBNetAPIResponse__DelegateSignature::NextExtendSpan' has a wrong offset!");

// Function AJB.AJBNetAPI_UserExtendBPLock.HttpError
// 0x0018 (0x0018 - 0x0000)
struct AJBNetAPI_UserExtendBPLock_HttpError final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_UserExtendBPLock_HttpError) == 0x000008, "Wrong alignment on AJBNetAPI_UserExtendBPLock_HttpError");
static_assert(sizeof(AJBNetAPI_UserExtendBPLock_HttpError) == 0x000018, "Wrong size on AJBNetAPI_UserExtendBPLock_HttpError");
static_assert(offsetof(AJBNetAPI_UserExtendBPLock_HttpError, Code) == 0x000000, "Member 'AJBNetAPI_UserExtendBPLock_HttpError::Code' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_UserExtendBPLock_HttpError, ErrorMessage) == 0x000008, "Member 'AJBNetAPI_UserExtendBPLock_HttpError::ErrorMessage' has a wrong offset!");

// Function AJB.AJBNetAPI_UserExtendBPLock.Response_UserExtendBPLock
// 0x0008 (0x0008 - 0x0000)
struct AJBNetAPI_UserExtendBPLock_Response_UserExtendBPLock final
{
public:
	class UNetMessage*                            Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_UserExtendBPLock_Response_UserExtendBPLock) == 0x000008, "Wrong alignment on AJBNetAPI_UserExtendBPLock_Response_UserExtendBPLock");
static_assert(sizeof(AJBNetAPI_UserExtendBPLock_Response_UserExtendBPLock) == 0x000008, "Wrong size on AJBNetAPI_UserExtendBPLock_Response_UserExtendBPLock");
static_assert(offsetof(AJBNetAPI_UserExtendBPLock_Response_UserExtendBPLock, Data) == 0x000000, "Member 'AJBNetAPI_UserExtendBPLock_Response_UserExtendBPLock::Data' has a wrong offset!");

// Function AJB.AJBNetAPI_GetRewardLottery.Request_GetRewardLottery
// 0x0020 (0x0020 - 0x0000)
struct AJBNetAPI_GetRewardLottery_Request_GetRewardLottery final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetHttp*                               NetHttp;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitSec;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBNetAPI_GetRewardLottery*            ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_GetRewardLottery_Request_GetRewardLottery) == 0x000008, "Wrong alignment on AJBNetAPI_GetRewardLottery_Request_GetRewardLottery");
static_assert(sizeof(AJBNetAPI_GetRewardLottery_Request_GetRewardLottery) == 0x000020, "Wrong size on AJBNetAPI_GetRewardLottery_Request_GetRewardLottery");
static_assert(offsetof(AJBNetAPI_GetRewardLottery_Request_GetRewardLottery, WorldContextObject) == 0x000000, "Member 'AJBNetAPI_GetRewardLottery_Request_GetRewardLottery::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_GetRewardLottery_Request_GetRewardLottery, NetHttp) == 0x000008, "Member 'AJBNetAPI_GetRewardLottery_Request_GetRewardLottery::NetHttp' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_GetRewardLottery_Request_GetRewardLottery, LimitSec) == 0x000010, "Member 'AJBNetAPI_GetRewardLottery_Request_GetRewardLottery::LimitSec' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_GetRewardLottery_Request_GetRewardLottery, ReturnValue) == 0x000018, "Member 'AJBNetAPI_GetRewardLottery_Request_GetRewardLottery::ReturnValue' has a wrong offset!");

// DelegateFunction AJB.AJBNetAPI_GetRewardLottery.AJBNetAPIResponse__DelegateSignature
// 0x0028 (0x0028 - 0x0000)
struct AJBNetAPI_GetRewardLottery_AJBNetAPIResponse__DelegateSignature final
{
public:
	EAJBNetAPIResult                              Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAJBGachaID                            GachaID;                                           // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_GetRewardLottery_AJBNetAPIResponse__DelegateSignature) == 0x000008, "Wrong alignment on AJBNetAPI_GetRewardLottery_AJBNetAPIResponse__DelegateSignature");
static_assert(sizeof(AJBNetAPI_GetRewardLottery_AJBNetAPIResponse__DelegateSignature) == 0x000028, "Wrong size on AJBNetAPI_GetRewardLottery_AJBNetAPIResponse__DelegateSignature");
static_assert(offsetof(AJBNetAPI_GetRewardLottery_AJBNetAPIResponse__DelegateSignature, Result) == 0x000000, "Member 'AJBNetAPI_GetRewardLottery_AJBNetAPIResponse__DelegateSignature::Result' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_GetRewardLottery_AJBNetAPIResponse__DelegateSignature, GachaID) == 0x000008, "Member 'AJBNetAPI_GetRewardLottery_AJBNetAPIResponse__DelegateSignature::GachaID' has a wrong offset!");

// Function AJB.AJBNetAPI_GetRewardLottery.HttpError
// 0x0018 (0x0018 - 0x0000)
struct AJBNetAPI_GetRewardLottery_HttpError final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_GetRewardLottery_HttpError) == 0x000008, "Wrong alignment on AJBNetAPI_GetRewardLottery_HttpError");
static_assert(sizeof(AJBNetAPI_GetRewardLottery_HttpError) == 0x000018, "Wrong size on AJBNetAPI_GetRewardLottery_HttpError");
static_assert(offsetof(AJBNetAPI_GetRewardLottery_HttpError, Code) == 0x000000, "Member 'AJBNetAPI_GetRewardLottery_HttpError::Code' has a wrong offset!");
static_assert(offsetof(AJBNetAPI_GetRewardLottery_HttpError, ErrorMessage) == 0x000008, "Member 'AJBNetAPI_GetRewardLottery_HttpError::ErrorMessage' has a wrong offset!");

// Function AJB.AJBNetAPI_GetRewardLottery.Response_GetRewardLottery
// 0x0008 (0x0008 - 0x0000)
struct AJBNetAPI_GetRewardLottery_Response_GetRewardLottery final
{
public:
	class UNetMessage*                            Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetAPI_GetRewardLottery_Response_GetRewardLottery) == 0x000008, "Wrong alignment on AJBNetAPI_GetRewardLottery_Response_GetRewardLottery");
static_assert(sizeof(AJBNetAPI_GetRewardLottery_Response_GetRewardLottery) == 0x000008, "Wrong size on AJBNetAPI_GetRewardLottery_Response_GetRewardLottery");
static_assert(offsetof(AJBNetAPI_GetRewardLottery_Response_GetRewardLottery, Data) == 0x000000, "Member 'AJBNetAPI_GetRewardLottery_Response_GetRewardLottery::Data' has a wrong offset!");

// Function AJB.AJBNetVaryFloatComponent.ROC_RepValue
// 0x0004 (0x0004 - 0x0000)
struct AJBNetVaryFloatComponent_ROC_RepValue final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetVaryFloatComponent_ROC_RepValue) == 0x000004, "Wrong alignment on AJBNetVaryFloatComponent_ROC_RepValue");
static_assert(sizeof(AJBNetVaryFloatComponent_ROC_RepValue) == 0x000004, "Wrong size on AJBNetVaryFloatComponent_ROC_RepValue");
static_assert(offsetof(AJBNetVaryFloatComponent_ROC_RepValue, NewValue) == 0x000000, "Member 'AJBNetVaryFloatComponent_ROC_RepValue::NewValue' has a wrong offset!");

// Function AJB.AJBNetVaryFloatComponent.ROS_GoodValue
// 0x0004 (0x0004 - 0x0000)
struct AJBNetVaryFloatComponent_ROS_GoodValue final
{
public:
	float                                         GoodValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetVaryFloatComponent_ROS_GoodValue) == 0x000004, "Wrong alignment on AJBNetVaryFloatComponent_ROS_GoodValue");
static_assert(sizeof(AJBNetVaryFloatComponent_ROS_GoodValue) == 0x000004, "Wrong size on AJBNetVaryFloatComponent_ROS_GoodValue");
static_assert(offsetof(AJBNetVaryFloatComponent_ROS_GoodValue, GoodValue) == 0x000000, "Member 'AJBNetVaryFloatComponent_ROS_GoodValue::GoodValue' has a wrong offset!");

// Function AJB.AJBNetVaryFloatComponent.ROS_SetDeltaPerSecond
// 0x0004 (0x0004 - 0x0000)
struct AJBNetVaryFloatComponent_ROS_SetDeltaPerSecond final
{
public:
	float                                         NewDeltaPerScond;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetVaryFloatComponent_ROS_SetDeltaPerSecond) == 0x000004, "Wrong alignment on AJBNetVaryFloatComponent_ROS_SetDeltaPerSecond");
static_assert(sizeof(AJBNetVaryFloatComponent_ROS_SetDeltaPerSecond) == 0x000004, "Wrong size on AJBNetVaryFloatComponent_ROS_SetDeltaPerSecond");
static_assert(offsetof(AJBNetVaryFloatComponent_ROS_SetDeltaPerSecond, NewDeltaPerScond) == 0x000000, "Member 'AJBNetVaryFloatComponent_ROS_SetDeltaPerSecond::NewDeltaPerScond' has a wrong offset!");

// Function AJB.AJBNetVaryFloatComponent.ROS_SetValue
// 0x0004 (0x0004 - 0x0000)
struct AJBNetVaryFloatComponent_ROS_SetValue final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetVaryFloatComponent_ROS_SetValue) == 0x000004, "Wrong alignment on AJBNetVaryFloatComponent_ROS_SetValue");
static_assert(sizeof(AJBNetVaryFloatComponent_ROS_SetValue) == 0x000004, "Wrong size on AJBNetVaryFloatComponent_ROS_SetValue");
static_assert(offsetof(AJBNetVaryFloatComponent_ROS_SetValue, NewValue) == 0x000000, "Member 'AJBNetVaryFloatComponent_ROS_SetValue::NewValue' has a wrong offset!");

// Function AJB.AJBNetVaryFloatComponent.ROS_SetValueMax
// 0x0004 (0x0004 - 0x0000)
struct AJBNetVaryFloatComponent_ROS_SetValueMax final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetVaryFloatComponent_ROS_SetValueMax) == 0x000004, "Wrong alignment on AJBNetVaryFloatComponent_ROS_SetValueMax");
static_assert(sizeof(AJBNetVaryFloatComponent_ROS_SetValueMax) == 0x000004, "Wrong size on AJBNetVaryFloatComponent_ROS_SetValueMax");
static_assert(offsetof(AJBNetVaryFloatComponent_ROS_SetValueMax, NewValue) == 0x000000, "Member 'AJBNetVaryFloatComponent_ROS_SetValueMax::NewValue' has a wrong offset!");

// Function AJB.AJBNetVaryFloatComponent.ROS_SetValueMin
// 0x0004 (0x0004 - 0x0000)
struct AJBNetVaryFloatComponent_ROS_SetValueMin final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetVaryFloatComponent_ROS_SetValueMin) == 0x000004, "Wrong alignment on AJBNetVaryFloatComponent_ROS_SetValueMin");
static_assert(sizeof(AJBNetVaryFloatComponent_ROS_SetValueMin) == 0x000004, "Wrong size on AJBNetVaryFloatComponent_ROS_SetValueMin");
static_assert(offsetof(AJBNetVaryFloatComponent_ROS_SetValueMin, NewValue) == 0x000000, "Member 'AJBNetVaryFloatComponent_ROS_SetValueMin::NewValue' has a wrong offset!");

// Function AJB.AJBNetVaryFloatComponent.SetDeltaPerSecond
// 0x0004 (0x0004 - 0x0000)
struct AJBNetVaryFloatComponent_SetDeltaPerSecond final
{
public:
	float                                         NewDeltaPerScond;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetVaryFloatComponent_SetDeltaPerSecond) == 0x000004, "Wrong alignment on AJBNetVaryFloatComponent_SetDeltaPerSecond");
static_assert(sizeof(AJBNetVaryFloatComponent_SetDeltaPerSecond) == 0x000004, "Wrong size on AJBNetVaryFloatComponent_SetDeltaPerSecond");
static_assert(offsetof(AJBNetVaryFloatComponent_SetDeltaPerSecond, NewDeltaPerScond) == 0x000000, "Member 'AJBNetVaryFloatComponent_SetDeltaPerSecond::NewDeltaPerScond' has a wrong offset!");

// Function AJB.AJBNetVaryFloatComponent.SetValue
// 0x0004 (0x0004 - 0x0000)
struct AJBNetVaryFloatComponent_SetValue final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetVaryFloatComponent_SetValue) == 0x000004, "Wrong alignment on AJBNetVaryFloatComponent_SetValue");
static_assert(sizeof(AJBNetVaryFloatComponent_SetValue) == 0x000004, "Wrong size on AJBNetVaryFloatComponent_SetValue");
static_assert(offsetof(AJBNetVaryFloatComponent_SetValue, NewValue) == 0x000000, "Member 'AJBNetVaryFloatComponent_SetValue::NewValue' has a wrong offset!");

// Function AJB.AJBNetVaryFloatComponent.SetValueMax
// 0x0004 (0x0004 - 0x0000)
struct AJBNetVaryFloatComponent_SetValueMax final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetVaryFloatComponent_SetValueMax) == 0x000004, "Wrong alignment on AJBNetVaryFloatComponent_SetValueMax");
static_assert(sizeof(AJBNetVaryFloatComponent_SetValueMax) == 0x000004, "Wrong size on AJBNetVaryFloatComponent_SetValueMax");
static_assert(offsetof(AJBNetVaryFloatComponent_SetValueMax, NewValue) == 0x000000, "Member 'AJBNetVaryFloatComponent_SetValueMax::NewValue' has a wrong offset!");

// Function AJB.AJBNetVaryFloatComponent.SetValueMin
// 0x0004 (0x0004 - 0x0000)
struct AJBNetVaryFloatComponent_SetValueMin final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetVaryFloatComponent_SetValueMin) == 0x000004, "Wrong alignment on AJBNetVaryFloatComponent_SetValueMin");
static_assert(sizeof(AJBNetVaryFloatComponent_SetValueMin) == 0x000004, "Wrong size on AJBNetVaryFloatComponent_SetValueMin");
static_assert(offsetof(AJBNetVaryFloatComponent_SetValueMin, NewValue) == 0x000000, "Member 'AJBNetVaryFloatComponent_SetValueMin::NewValue' has a wrong offset!");

// Function AJB.AJBNetworkObserver.CheckAMNetworkError
// 0x0008 (0x0008 - 0x0000)
struct AJBNetworkObserver_CheckAMNetworkError final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetworkObserver_CheckAMNetworkError) == 0x000008, "Wrong alignment on AJBNetworkObserver_CheckAMNetworkError");
static_assert(sizeof(AJBNetworkObserver_CheckAMNetworkError) == 0x000008, "Wrong size on AJBNetworkObserver_CheckAMNetworkError");
static_assert(offsetof(AJBNetworkObserver_CheckAMNetworkError, WorldContextObject) == 0x000000, "Member 'AJBNetworkObserver_CheckAMNetworkError::WorldContextObject' has a wrong offset!");

// Function AJB.AJBNetworkObserver.CheckLocalNetworkError
// 0x0008 (0x0008 - 0x0000)
struct AJBNetworkObserver_CheckLocalNetworkError final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetworkObserver_CheckLocalNetworkError) == 0x000008, "Wrong alignment on AJBNetworkObserver_CheckLocalNetworkError");
static_assert(sizeof(AJBNetworkObserver_CheckLocalNetworkError) == 0x000008, "Wrong size on AJBNetworkObserver_CheckLocalNetworkError");
static_assert(offsetof(AJBNetworkObserver_CheckLocalNetworkError, WorldContextObject) == 0x000000, "Member 'AJBNetworkObserver_CheckLocalNetworkError::WorldContextObject' has a wrong offset!");

// Function AJB.AJBNetworkObserver.IsOfflineMode
// 0x0010 (0x0010 - 0x0000)
struct AJBNetworkObserver_IsOfflineMode final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBNetworkObserver_IsOfflineMode) == 0x000008, "Wrong alignment on AJBNetworkObserver_IsOfflineMode");
static_assert(sizeof(AJBNetworkObserver_IsOfflineMode) == 0x000010, "Wrong size on AJBNetworkObserver_IsOfflineMode");
static_assert(offsetof(AJBNetworkObserver_IsOfflineMode, WorldContextObject) == 0x000000, "Member 'AJBNetworkObserver_IsOfflineMode::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBNetworkObserver_IsOfflineMode, ReturnValue) == 0x000008, "Member 'AJBNetworkObserver_IsOfflineMode::ReturnValue' has a wrong offset!");

// Function AJB.AJBNetworkObserver.CheckLocalNetwork
// 0x0001 (0x0001 - 0x0000)
struct AJBNetworkObserver_CheckLocalNetwork final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetworkObserver_CheckLocalNetwork) == 0x000001, "Wrong alignment on AJBNetworkObserver_CheckLocalNetwork");
static_assert(sizeof(AJBNetworkObserver_CheckLocalNetwork) == 0x000001, "Wrong size on AJBNetworkObserver_CheckLocalNetwork");
static_assert(offsetof(AJBNetworkObserver_CheckLocalNetwork, ReturnValue) == 0x000000, "Member 'AJBNetworkObserver_CheckLocalNetwork::ReturnValue' has a wrong offset!");

// Function AJB.AJBNetworkObserver.EndGameServerCheck
// 0x0001 (0x0001 - 0x0000)
struct AJBNetworkObserver_EndGameServerCheck final
{
public:
	EAJBTestModeGameServerError                   Error;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetworkObserver_EndGameServerCheck) == 0x000001, "Wrong alignment on AJBNetworkObserver_EndGameServerCheck");
static_assert(sizeof(AJBNetworkObserver_EndGameServerCheck) == 0x000001, "Wrong size on AJBNetworkObserver_EndGameServerCheck");
static_assert(offsetof(AJBNetworkObserver_EndGameServerCheck, Error) == 0x000000, "Member 'AJBNetworkObserver_EndGameServerCheck::Error' has a wrong offset!");

// Function AJB.AJBNetworkObserver.GetAuthGateway
// 0x0010 (0x0010 - 0x0000)
struct AJBNetworkObserver_GetAuthGateway final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetworkObserver_GetAuthGateway) == 0x000008, "Wrong alignment on AJBNetworkObserver_GetAuthGateway");
static_assert(sizeof(AJBNetworkObserver_GetAuthGateway) == 0x000010, "Wrong size on AJBNetworkObserver_GetAuthGateway");
static_assert(offsetof(AJBNetworkObserver_GetAuthGateway, ReturnValue) == 0x000000, "Member 'AJBNetworkObserver_GetAuthGateway::ReturnValue' has a wrong offset!");

// Function AJB.AJBNetworkObserver.GetMacAddress
// 0x0010 (0x0010 - 0x0000)
struct AJBNetworkObserver_GetMacAddress final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetworkObserver_GetMacAddress) == 0x000008, "Wrong alignment on AJBNetworkObserver_GetMacAddress");
static_assert(sizeof(AJBNetworkObserver_GetMacAddress) == 0x000010, "Wrong size on AJBNetworkObserver_GetMacAddress");
static_assert(offsetof(AJBNetworkObserver_GetMacAddress, ReturnValue) == 0x000000, "Member 'AJBNetworkObserver_GetMacAddress::ReturnValue' has a wrong offset!");

// Function AJB.AJBNetworkObserver.GetShopSupportWebSiteLogInID
// 0x0010 (0x0010 - 0x0000)
struct AJBNetworkObserver_GetShopSupportWebSiteLogInID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetworkObserver_GetShopSupportWebSiteLogInID) == 0x000008, "Wrong alignment on AJBNetworkObserver_GetShopSupportWebSiteLogInID");
static_assert(sizeof(AJBNetworkObserver_GetShopSupportWebSiteLogInID) == 0x000010, "Wrong size on AJBNetworkObserver_GetShopSupportWebSiteLogInID");
static_assert(offsetof(AJBNetworkObserver_GetShopSupportWebSiteLogInID, ReturnValue) == 0x000000, "Member 'AJBNetworkObserver_GetShopSupportWebSiteLogInID::ReturnValue' has a wrong offset!");

// Function AJB.AJBNetworkObserver.GetShopSupportWebSiteLogInPassword
// 0x0010 (0x0010 - 0x0000)
struct AJBNetworkObserver_GetShopSupportWebSiteLogInPassword final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetworkObserver_GetShopSupportWebSiteLogInPassword) == 0x000008, "Wrong alignment on AJBNetworkObserver_GetShopSupportWebSiteLogInPassword");
static_assert(sizeof(AJBNetworkObserver_GetShopSupportWebSiteLogInPassword) == 0x000010, "Wrong size on AJBNetworkObserver_GetShopSupportWebSiteLogInPassword");
static_assert(offsetof(AJBNetworkObserver_GetShopSupportWebSiteLogInPassword, ReturnValue) == 0x000000, "Member 'AJBNetworkObserver_GetShopSupportWebSiteLogInPassword::ReturnValue' has a wrong offset!");

// Function AJB.AJBNetworkObserver.IsFinishedCheckLocalNetwork
// 0x0001 (0x0001 - 0x0000)
struct AJBNetworkObserver_IsFinishedCheckLocalNetwork final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetworkObserver_IsFinishedCheckLocalNetwork) == 0x000001, "Wrong alignment on AJBNetworkObserver_IsFinishedCheckLocalNetwork");
static_assert(sizeof(AJBNetworkObserver_IsFinishedCheckLocalNetwork) == 0x000001, "Wrong size on AJBNetworkObserver_IsFinishedCheckLocalNetwork");
static_assert(offsetof(AJBNetworkObserver_IsFinishedCheckLocalNetwork, ReturnValue) == 0x000000, "Member 'AJBNetworkObserver_IsFinishedCheckLocalNetwork::ReturnValue' has a wrong offset!");

// Function AJB.AJBNetworkObserver.IsInitializeAuth
// 0x0001 (0x0001 - 0x0000)
struct AJBNetworkObserver_IsInitializeAuth final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetworkObserver_IsInitializeAuth) == 0x000001, "Wrong alignment on AJBNetworkObserver_IsInitializeAuth");
static_assert(sizeof(AJBNetworkObserver_IsInitializeAuth) == 0x000001, "Wrong size on AJBNetworkObserver_IsInitializeAuth");
static_assert(offsetof(AJBNetworkObserver_IsInitializeAuth, ReturnValue) == 0x000000, "Member 'AJBNetworkObserver_IsInitializeAuth::ReturnValue' has a wrong offset!");

// Function AJB.AJBNetworkObserver.IsServerUpdateMode
// 0x0001 (0x0001 - 0x0000)
struct AJBNetworkObserver_IsServerUpdateMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetworkObserver_IsServerUpdateMode) == 0x000001, "Wrong alignment on AJBNetworkObserver_IsServerUpdateMode");
static_assert(sizeof(AJBNetworkObserver_IsServerUpdateMode) == 0x000001, "Wrong size on AJBNetworkObserver_IsServerUpdateMode");
static_assert(offsetof(AJBNetworkObserver_IsServerUpdateMode, ReturnValue) == 0x000000, "Member 'AJBNetworkObserver_IsServerUpdateMode::ReturnValue' has a wrong offset!");

// Function AJB.AJBNetworkObserver.RequestAllNetLicense
// 0x0001 (0x0001 - 0x0000)
struct AJBNetworkObserver_RequestAllNetLicense final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetworkObserver_RequestAllNetLicense) == 0x000001, "Wrong alignment on AJBNetworkObserver_RequestAllNetLicense");
static_assert(sizeof(AJBNetworkObserver_RequestAllNetLicense) == 0x000001, "Wrong size on AJBNetworkObserver_RequestAllNetLicense");
static_assert(offsetof(AJBNetworkObserver_RequestAllNetLicense, ReturnValue) == 0x000000, "Member 'AJBNetworkObserver_RequestAllNetLicense::ReturnValue' has a wrong offset!");

// Function AJB.AJBNetworkObserver.RequestRestartNet
// 0x0001 (0x0001 - 0x0000)
struct AJBNetworkObserver_RequestRestartNet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetworkObserver_RequestRestartNet) == 0x000001, "Wrong alignment on AJBNetworkObserver_RequestRestartNet");
static_assert(sizeof(AJBNetworkObserver_RequestRestartNet) == 0x000001, "Wrong size on AJBNetworkObserver_RequestRestartNet");
static_assert(offsetof(AJBNetworkObserver_RequestRestartNet, ReturnValue) == 0x000000, "Member 'AJBNetworkObserver_RequestRestartNet::ReturnValue' has a wrong offset!");

// Function AJB.AJBNetworkObserver.SetNetworkTest
// 0x0001 (0x0001 - 0x0000)
struct AJBNetworkObserver_SetNetworkTest final
{
public:
	bool                                          IsNetworkTest;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetworkObserver_SetNetworkTest) == 0x000001, "Wrong alignment on AJBNetworkObserver_SetNetworkTest");
static_assert(sizeof(AJBNetworkObserver_SetNetworkTest) == 0x000001, "Wrong size on AJBNetworkObserver_SetNetworkTest");
static_assert(offsetof(AJBNetworkObserver_SetNetworkTest, IsNetworkTest) == 0x000000, "Member 'AJBNetworkObserver_SetNetworkTest::IsNetworkTest' has a wrong offset!");

// Function AJB.AJBNetworkObserver.SetServerUpdateMode
// 0x0002 (0x0002 - 0x0000)
struct AJBNetworkObserver_SetServerUpdateMode final
{
public:
	bool                                          bIsSeverUpdateMode;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetworkObserver_SetServerUpdateMode) == 0x000001, "Wrong alignment on AJBNetworkObserver_SetServerUpdateMode");
static_assert(sizeof(AJBNetworkObserver_SetServerUpdateMode) == 0x000002, "Wrong size on AJBNetworkObserver_SetServerUpdateMode");
static_assert(offsetof(AJBNetworkObserver_SetServerUpdateMode, bIsSeverUpdateMode) == 0x000000, "Member 'AJBNetworkObserver_SetServerUpdateMode::bIsSeverUpdateMode' has a wrong offset!");
static_assert(offsetof(AJBNetworkObserver_SetServerUpdateMode, ReturnValue) == 0x000001, "Member 'AJBNetworkObserver_SetServerUpdateMode::ReturnValue' has a wrong offset!");

// Function AJB.AJBNetworkObserver.GetNetID
// 0x0010 (0x0010 - 0x0000)
struct AJBNetworkObserver_GetNetID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBNetworkObserver_GetNetID) == 0x000008, "Wrong alignment on AJBNetworkObserver_GetNetID");
static_assert(sizeof(AJBNetworkObserver_GetNetID) == 0x000010, "Wrong size on AJBNetworkObserver_GetNetID");
static_assert(offsetof(AJBNetworkObserver_GetNetID, ReturnValue) == 0x000000, "Member 'AJBNetworkObserver_GetNetID::ReturnValue' has a wrong offset!");

// Function AJB.AJBOnlineBeaconClient.ConvertPortNoDedicatedServerToBeaconHost
// 0x0008 (0x0008 - 0x0000)
struct AJBOnlineBeaconClient_ConvertPortNoDedicatedServerToBeaconHost final
{
public:
	int32                                         DedicatedServerPort;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOnlineBeaconClient_ConvertPortNoDedicatedServerToBeaconHost) == 0x000004, "Wrong alignment on AJBOnlineBeaconClient_ConvertPortNoDedicatedServerToBeaconHost");
static_assert(sizeof(AJBOnlineBeaconClient_ConvertPortNoDedicatedServerToBeaconHost) == 0x000008, "Wrong size on AJBOnlineBeaconClient_ConvertPortNoDedicatedServerToBeaconHost");
static_assert(offsetof(AJBOnlineBeaconClient_ConvertPortNoDedicatedServerToBeaconHost, DedicatedServerPort) == 0x000000, "Member 'AJBOnlineBeaconClient_ConvertPortNoDedicatedServerToBeaconHost::DedicatedServerPort' has a wrong offset!");
static_assert(offsetof(AJBOnlineBeaconClient_ConvertPortNoDedicatedServerToBeaconHost, ReturnValue) == 0x000004, "Member 'AJBOnlineBeaconClient_ConvertPortNoDedicatedServerToBeaconHost::ReturnValue' has a wrong offset!");

// Function AJB.AJBOnlineBeaconClient.JoinBeacon
// 0x0018 (0x0018 - 0x0000)
struct AJBOnlineBeaconClient_JoinBeacon final
{
public:
	class FString                                 HostName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBOnlineBeaconClient_JoinBeacon) == 0x000008, "Wrong alignment on AJBOnlineBeaconClient_JoinBeacon");
static_assert(sizeof(AJBOnlineBeaconClient_JoinBeacon) == 0x000018, "Wrong size on AJBOnlineBeaconClient_JoinBeacon");
static_assert(offsetof(AJBOnlineBeaconClient_JoinBeacon, HostName) == 0x000000, "Member 'AJBOnlineBeaconClient_JoinBeacon::HostName' has a wrong offset!");
static_assert(offsetof(AJBOnlineBeaconClient_JoinBeacon, Port) == 0x000010, "Member 'AJBOnlineBeaconClient_JoinBeacon::Port' has a wrong offset!");

// Function AJB.AJBOutGameProxy.OutputLogMatchingPlayerInfo
// 0x0088 (0x0088 - 0x0000)
struct AJBOutGameProxy_OutputLogMatchingPlayerInfo final
{
public:
	struct FMatchingPlayerInfo                    MatchingPlayerInfo;                                // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_OutputLogMatchingPlayerInfo) == 0x000008, "Wrong alignment on AJBOutGameProxy_OutputLogMatchingPlayerInfo");
static_assert(sizeof(AJBOutGameProxy_OutputLogMatchingPlayerInfo) == 0x000088, "Wrong size on AJBOutGameProxy_OutputLogMatchingPlayerInfo");
static_assert(offsetof(AJBOutGameProxy_OutputLogMatchingPlayerInfo, MatchingPlayerInfo) == 0x000000, "Member 'AJBOutGameProxy_OutputLogMatchingPlayerInfo::MatchingPlayerInfo' has a wrong offset!");

// Function AJB.AJBOutGameProxy.CanTenpoBattle
// 0x0001 (0x0001 - 0x0000)
struct AJBOutGameProxy_CanTenpoBattle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_CanTenpoBattle) == 0x000001, "Wrong alignment on AJBOutGameProxy_CanTenpoBattle");
static_assert(sizeof(AJBOutGameProxy_CanTenpoBattle) == 0x000001, "Wrong size on AJBOutGameProxy_CanTenpoBattle");
static_assert(offsetof(AJBOutGameProxy_CanTenpoBattle, ReturnValue) == 0x000000, "Member 'AJBOutGameProxy_CanTenpoBattle::ReturnValue' has a wrong offset!");

// Function AJB.AJBOutGameProxy.ClearProtocolTimeOut
// 0x0004 (0x0004 - 0x0000)
struct AJBOutGameProxy_ClearProtocolTimeOut final
{
public:
	int32                                         ProtocolID;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_ClearProtocolTimeOut) == 0x000004, "Wrong alignment on AJBOutGameProxy_ClearProtocolTimeOut");
static_assert(sizeof(AJBOutGameProxy_ClearProtocolTimeOut) == 0x000004, "Wrong size on AJBOutGameProxy_ClearProtocolTimeOut");
static_assert(offsetof(AJBOutGameProxy_ClearProtocolTimeOut, ProtocolID) == 0x000000, "Member 'AJBOutGameProxy_ClearProtocolTimeOut::ProtocolID' has a wrong offset!");

// Function AJB.AJBOutGameProxy.CreateNetMessage_ChangeCharacter
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_CreateNetMessage_ChangeCharacter final
{
public:
	class UNetMessage*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_CreateNetMessage_ChangeCharacter) == 0x000008, "Wrong alignment on AJBOutGameProxy_CreateNetMessage_ChangeCharacter");
static_assert(sizeof(AJBOutGameProxy_CreateNetMessage_ChangeCharacter) == 0x000008, "Wrong size on AJBOutGameProxy_CreateNetMessage_ChangeCharacter");
static_assert(offsetof(AJBOutGameProxy_CreateNetMessage_ChangeCharacter, ReturnValue) == 0x000000, "Member 'AJBOutGameProxy_CreateNetMessage_ChangeCharacter::ReturnValue' has a wrong offset!");

// Function AJB.AJBOutGameProxy.CreateNetMessage_CreateRoom
// 0x0010 (0x0010 - 0x0000)
struct AJBOutGameProxy_CreateNetMessage_CreateRoom final
{
public:
	int32                                         RoomNo;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNetMessage*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_CreateNetMessage_CreateRoom) == 0x000008, "Wrong alignment on AJBOutGameProxy_CreateNetMessage_CreateRoom");
static_assert(sizeof(AJBOutGameProxy_CreateNetMessage_CreateRoom) == 0x000010, "Wrong size on AJBOutGameProxy_CreateNetMessage_CreateRoom");
static_assert(offsetof(AJBOutGameProxy_CreateNetMessage_CreateRoom, RoomNo) == 0x000000, "Member 'AJBOutGameProxy_CreateNetMessage_CreateRoom::RoomNo' has a wrong offset!");
static_assert(offsetof(AJBOutGameProxy_CreateNetMessage_CreateRoom, ReturnValue) == 0x000008, "Member 'AJBOutGameProxy_CreateNetMessage_CreateRoom::ReturnValue' has a wrong offset!");

// Function AJB.AJBOutGameProxy.CreateNetMessage_DeletePairIDMatch
// 0x0018 (0x0018 - 0x0000)
struct AJBOutGameProxy_CreateNetMessage_DeletePairIDMatch final
{
public:
	class FString                                 PairMatchID;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetMessage*                            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_CreateNetMessage_DeletePairIDMatch) == 0x000008, "Wrong alignment on AJBOutGameProxy_CreateNetMessage_DeletePairIDMatch");
static_assert(sizeof(AJBOutGameProxy_CreateNetMessage_DeletePairIDMatch) == 0x000018, "Wrong size on AJBOutGameProxy_CreateNetMessage_DeletePairIDMatch");
static_assert(offsetof(AJBOutGameProxy_CreateNetMessage_DeletePairIDMatch, PairMatchID) == 0x000000, "Member 'AJBOutGameProxy_CreateNetMessage_DeletePairIDMatch::PairMatchID' has a wrong offset!");
static_assert(offsetof(AJBOutGameProxy_CreateNetMessage_DeletePairIDMatch, ReturnValue) == 0x000010, "Member 'AJBOutGameProxy_CreateNetMessage_DeletePairIDMatch::ReturnValue' has a wrong offset!");

// Function AJB.AJBOutGameProxy.CreateNetMessage_DeleteRoom
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_CreateNetMessage_DeleteRoom final
{
public:
	class UNetMessage*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_CreateNetMessage_DeleteRoom) == 0x000008, "Wrong alignment on AJBOutGameProxy_CreateNetMessage_DeleteRoom");
static_assert(sizeof(AJBOutGameProxy_CreateNetMessage_DeleteRoom) == 0x000008, "Wrong size on AJBOutGameProxy_CreateNetMessage_DeleteRoom");
static_assert(offsetof(AJBOutGameProxy_CreateNetMessage_DeleteRoom, ReturnValue) == 0x000000, "Member 'AJBOutGameProxy_CreateNetMessage_DeleteRoom::ReturnValue' has a wrong offset!");

// Function AJB.AJBOutGameProxy.CreateNetMessage_EnterRoom
// 0x0010 (0x0010 - 0x0000)
struct AJBOutGameProxy_CreateNetMessage_EnterRoom final
{
public:
	int32                                         RoomNo;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNetMessage*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_CreateNetMessage_EnterRoom) == 0x000008, "Wrong alignment on AJBOutGameProxy_CreateNetMessage_EnterRoom");
static_assert(sizeof(AJBOutGameProxy_CreateNetMessage_EnterRoom) == 0x000010, "Wrong size on AJBOutGameProxy_CreateNetMessage_EnterRoom");
static_assert(offsetof(AJBOutGameProxy_CreateNetMessage_EnterRoom, RoomNo) == 0x000000, "Member 'AJBOutGameProxy_CreateNetMessage_EnterRoom::RoomNo' has a wrong offset!");
static_assert(offsetof(AJBOutGameProxy_CreateNetMessage_EnterRoom, ReturnValue) == 0x000008, "Member 'AJBOutGameProxy_CreateNetMessage_EnterRoom::ReturnValue' has a wrong offset!");

// Function AJB.AJBOutGameProxy.CreateNetMessage_GetRoomInfo
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_CreateNetMessage_GetRoomInfo final
{
public:
	class UNetMessage*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_CreateNetMessage_GetRoomInfo) == 0x000008, "Wrong alignment on AJBOutGameProxy_CreateNetMessage_GetRoomInfo");
static_assert(sizeof(AJBOutGameProxy_CreateNetMessage_GetRoomInfo) == 0x000008, "Wrong size on AJBOutGameProxy_CreateNetMessage_GetRoomInfo");
static_assert(offsetof(AJBOutGameProxy_CreateNetMessage_GetRoomInfo, ReturnValue) == 0x000000, "Member 'AJBOutGameProxy_CreateNetMessage_GetRoomInfo::ReturnValue' has a wrong offset!");

// Function AJB.AJBOutGameProxy.CreateNetMessage_Matching_Breakup
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_CreateNetMessage_Matching_Breakup final
{
public:
	class UNetMessage*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_CreateNetMessage_Matching_Breakup) == 0x000008, "Wrong alignment on AJBOutGameProxy_CreateNetMessage_Matching_Breakup");
static_assert(sizeof(AJBOutGameProxy_CreateNetMessage_Matching_Breakup) == 0x000008, "Wrong size on AJBOutGameProxy_CreateNetMessage_Matching_Breakup");
static_assert(offsetof(AJBOutGameProxy_CreateNetMessage_Matching_Breakup, ReturnValue) == 0x000000, "Member 'AJBOutGameProxy_CreateNetMessage_Matching_Breakup::ReturnValue' has a wrong offset!");

// Function AJB.AJBOutGameProxy.CreateNetMessage_Matching_Finish
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_CreateNetMessage_Matching_Finish final
{
public:
	class UNetMessage*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_CreateNetMessage_Matching_Finish) == 0x000008, "Wrong alignment on AJBOutGameProxy_CreateNetMessage_Matching_Finish");
static_assert(sizeof(AJBOutGameProxy_CreateNetMessage_Matching_Finish) == 0x000008, "Wrong size on AJBOutGameProxy_CreateNetMessage_Matching_Finish");
static_assert(offsetof(AJBOutGameProxy_CreateNetMessage_Matching_Finish, ReturnValue) == 0x000000, "Member 'AJBOutGameProxy_CreateNetMessage_Matching_Finish::ReturnValue' has a wrong offset!");

// Function AJB.AJBOutGameProxy.CreateNetMessage_Matching_Start
// 0x0010 (0x0010 - 0x0000)
struct AJBOutGameProxy_CreateNetMessage_Matching_Start final
{
public:
	bool                                          IsReconnect;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNetMessage*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_CreateNetMessage_Matching_Start) == 0x000008, "Wrong alignment on AJBOutGameProxy_CreateNetMessage_Matching_Start");
static_assert(sizeof(AJBOutGameProxy_CreateNetMessage_Matching_Start) == 0x000010, "Wrong size on AJBOutGameProxy_CreateNetMessage_Matching_Start");
static_assert(offsetof(AJBOutGameProxy_CreateNetMessage_Matching_Start, IsReconnect) == 0x000000, "Member 'AJBOutGameProxy_CreateNetMessage_Matching_Start::IsReconnect' has a wrong offset!");
static_assert(offsetof(AJBOutGameProxy_CreateNetMessage_Matching_Start, ReturnValue) == 0x000008, "Member 'AJBOutGameProxy_CreateNetMessage_Matching_Start::ReturnValue' has a wrong offset!");

// Function AJB.AJBOutGameProxy.CreateNetMessage_PairIDMatch
// 0x0018 (0x0018 - 0x0000)
struct AJBOutGameProxy_CreateNetMessage_PairIDMatch final
{
public:
	class FString                                 PairMatchID;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetMessage*                            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_CreateNetMessage_PairIDMatch) == 0x000008, "Wrong alignment on AJBOutGameProxy_CreateNetMessage_PairIDMatch");
static_assert(sizeof(AJBOutGameProxy_CreateNetMessage_PairIDMatch) == 0x000018, "Wrong size on AJBOutGameProxy_CreateNetMessage_PairIDMatch");
static_assert(offsetof(AJBOutGameProxy_CreateNetMessage_PairIDMatch, PairMatchID) == 0x000000, "Member 'AJBOutGameProxy_CreateNetMessage_PairIDMatch::PairMatchID' has a wrong offset!");
static_assert(offsetof(AJBOutGameProxy_CreateNetMessage_PairIDMatch, ReturnValue) == 0x000010, "Member 'AJBOutGameProxy_CreateNetMessage_PairIDMatch::ReturnValue' has a wrong offset!");

// Function AJB.AJBOutGameProxy.CreateNetMessage_PairRandomMatch
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_CreateNetMessage_PairRandomMatch final
{
public:
	class UNetMessage*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_CreateNetMessage_PairRandomMatch) == 0x000008, "Wrong alignment on AJBOutGameProxy_CreateNetMessage_PairRandomMatch");
static_assert(sizeof(AJBOutGameProxy_CreateNetMessage_PairRandomMatch) == 0x000008, "Wrong size on AJBOutGameProxy_CreateNetMessage_PairRandomMatch");
static_assert(offsetof(AJBOutGameProxy_CreateNetMessage_PairRandomMatch, ReturnValue) == 0x000000, "Member 'AJBOutGameProxy_CreateNetMessage_PairRandomMatch::ReturnValue' has a wrong offset!");

// Function AJB.AJBOutGameProxy.CreateNetMessage_ServerTest
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_CreateNetMessage_ServerTest final
{
public:
	class UNetMessage*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_CreateNetMessage_ServerTest) == 0x000008, "Wrong alignment on AJBOutGameProxy_CreateNetMessage_ServerTest");
static_assert(sizeof(AJBOutGameProxy_CreateNetMessage_ServerTest) == 0x000008, "Wrong size on AJBOutGameProxy_CreateNetMessage_ServerTest");
static_assert(offsetof(AJBOutGameProxy_CreateNetMessage_ServerTest, ReturnValue) == 0x000000, "Member 'AJBOutGameProxy_CreateNetMessage_ServerTest::ReturnValue' has a wrong offset!");

// Function AJB.AJBOutGameProxy.CreateNetMessage_StartLocation_GetNPCInfo
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_CreateNetMessage_StartLocation_GetNPCInfo final
{
public:
	class UNetMessage*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_CreateNetMessage_StartLocation_GetNPCInfo) == 0x000008, "Wrong alignment on AJBOutGameProxy_CreateNetMessage_StartLocation_GetNPCInfo");
static_assert(sizeof(AJBOutGameProxy_CreateNetMessage_StartLocation_GetNPCInfo) == 0x000008, "Wrong size on AJBOutGameProxy_CreateNetMessage_StartLocation_GetNPCInfo");
static_assert(offsetof(AJBOutGameProxy_CreateNetMessage_StartLocation_GetNPCInfo, ReturnValue) == 0x000000, "Member 'AJBOutGameProxy_CreateNetMessage_StartLocation_GetNPCInfo::ReturnValue' has a wrong offset!");

// Function AJB.AJBOutGameProxy.CreateNetMessage_StartLocation_GetPlayerInfo
// 0x0018 (0x0018 - 0x0000)
struct AJBOutGameProxy_CreateNetMessage_StartLocation_GetPlayerInfo final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPartnerNPC;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNetMessage*                            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_CreateNetMessage_StartLocation_GetPlayerInfo) == 0x000008, "Wrong alignment on AJBOutGameProxy_CreateNetMessage_StartLocation_GetPlayerInfo");
static_assert(sizeof(AJBOutGameProxy_CreateNetMessage_StartLocation_GetPlayerInfo) == 0x000018, "Wrong size on AJBOutGameProxy_CreateNetMessage_StartLocation_GetPlayerInfo");
static_assert(offsetof(AJBOutGameProxy_CreateNetMessage_StartLocation_GetPlayerInfo, X) == 0x000000, "Member 'AJBOutGameProxy_CreateNetMessage_StartLocation_GetPlayerInfo::X' has a wrong offset!");
static_assert(offsetof(AJBOutGameProxy_CreateNetMessage_StartLocation_GetPlayerInfo, Y) == 0x000004, "Member 'AJBOutGameProxy_CreateNetMessage_StartLocation_GetPlayerInfo::Y' has a wrong offset!");
static_assert(offsetof(AJBOutGameProxy_CreateNetMessage_StartLocation_GetPlayerInfo, bIsPartnerNPC) == 0x000008, "Member 'AJBOutGameProxy_CreateNetMessage_StartLocation_GetPlayerInfo::bIsPartnerNPC' has a wrong offset!");
static_assert(offsetof(AJBOutGameProxy_CreateNetMessage_StartLocation_GetPlayerInfo, ReturnValue) == 0x000010, "Member 'AJBOutGameProxy_CreateNetMessage_StartLocation_GetPlayerInfo::ReturnValue' has a wrong offset!");

// Function AJB.AJBOutGameProxy.CreateNetMessage_Tenpo_EnterRoom
// 0x0010 (0x0010 - 0x0000)
struct AJBOutGameProxy_CreateNetMessage_Tenpo_EnterRoom final
{
public:
	int32                                         TimeLimit;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNetMessage*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_CreateNetMessage_Tenpo_EnterRoom) == 0x000008, "Wrong alignment on AJBOutGameProxy_CreateNetMessage_Tenpo_EnterRoom");
static_assert(sizeof(AJBOutGameProxy_CreateNetMessage_Tenpo_EnterRoom) == 0x000010, "Wrong size on AJBOutGameProxy_CreateNetMessage_Tenpo_EnterRoom");
static_assert(offsetof(AJBOutGameProxy_CreateNetMessage_Tenpo_EnterRoom, TimeLimit) == 0x000000, "Member 'AJBOutGameProxy_CreateNetMessage_Tenpo_EnterRoom::TimeLimit' has a wrong offset!");
static_assert(offsetof(AJBOutGameProxy_CreateNetMessage_Tenpo_EnterRoom, ReturnValue) == 0x000008, "Member 'AJBOutGameProxy_CreateNetMessage_Tenpo_EnterRoom::ReturnValue' has a wrong offset!");

// Function AJB.AJBOutGameProxy.CreateNetMessage_Tenpo_ExitRoom
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_CreateNetMessage_Tenpo_ExitRoom final
{
public:
	class UNetMessage*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_CreateNetMessage_Tenpo_ExitRoom) == 0x000008, "Wrong alignment on AJBOutGameProxy_CreateNetMessage_Tenpo_ExitRoom");
static_assert(sizeof(AJBOutGameProxy_CreateNetMessage_Tenpo_ExitRoom) == 0x000008, "Wrong size on AJBOutGameProxy_CreateNetMessage_Tenpo_ExitRoom");
static_assert(offsetof(AJBOutGameProxy_CreateNetMessage_Tenpo_ExitRoom, ReturnValue) == 0x000000, "Member 'AJBOutGameProxy_CreateNetMessage_Tenpo_ExitRoom::ReturnValue' has a wrong offset!");

// Function AJB.AJBOutGameProxy.CreateNetMessage_Tenpo_GameSetting
// 0x0010 (0x0010 - 0x0000)
struct AJBOutGameProxy_CreateNetMessage_Tenpo_GameSetting final
{
public:
	int32                                         NPCNum;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayMode;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetMessage*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_CreateNetMessage_Tenpo_GameSetting) == 0x000008, "Wrong alignment on AJBOutGameProxy_CreateNetMessage_Tenpo_GameSetting");
static_assert(sizeof(AJBOutGameProxy_CreateNetMessage_Tenpo_GameSetting) == 0x000010, "Wrong size on AJBOutGameProxy_CreateNetMessage_Tenpo_GameSetting");
static_assert(offsetof(AJBOutGameProxy_CreateNetMessage_Tenpo_GameSetting, NPCNum) == 0x000000, "Member 'AJBOutGameProxy_CreateNetMessage_Tenpo_GameSetting::NPCNum' has a wrong offset!");
static_assert(offsetof(AJBOutGameProxy_CreateNetMessage_Tenpo_GameSetting, PlayMode) == 0x000004, "Member 'AJBOutGameProxy_CreateNetMessage_Tenpo_GameSetting::PlayMode' has a wrong offset!");
static_assert(offsetof(AJBOutGameProxy_CreateNetMessage_Tenpo_GameSetting, ReturnValue) == 0x000008, "Member 'AJBOutGameProxy_CreateNetMessage_Tenpo_GameSetting::ReturnValue' has a wrong offset!");

// Function AJB.AJBOutGameProxy.CreateNetMessage_Tenpo_GetRoomInfo
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_CreateNetMessage_Tenpo_GetRoomInfo final
{
public:
	class UNetMessage*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_CreateNetMessage_Tenpo_GetRoomInfo) == 0x000008, "Wrong alignment on AJBOutGameProxy_CreateNetMessage_Tenpo_GetRoomInfo");
static_assert(sizeof(AJBOutGameProxy_CreateNetMessage_Tenpo_GetRoomInfo) == 0x000008, "Wrong size on AJBOutGameProxy_CreateNetMessage_Tenpo_GetRoomInfo");
static_assert(offsetof(AJBOutGameProxy_CreateNetMessage_Tenpo_GetRoomInfo, ReturnValue) == 0x000000, "Member 'AJBOutGameProxy_CreateNetMessage_Tenpo_GetRoomInfo::ReturnValue' has a wrong offset!");

// Function AJB.AJBOutGameProxy.CreateNetMessage_Tenpo_Logined
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_CreateNetMessage_Tenpo_Logined final
{
public:
	class UNetMessage*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_CreateNetMessage_Tenpo_Logined) == 0x000008, "Wrong alignment on AJBOutGameProxy_CreateNetMessage_Tenpo_Logined");
static_assert(sizeof(AJBOutGameProxy_CreateNetMessage_Tenpo_Logined) == 0x000008, "Wrong size on AJBOutGameProxy_CreateNetMessage_Tenpo_Logined");
static_assert(offsetof(AJBOutGameProxy_CreateNetMessage_Tenpo_Logined, ReturnValue) == 0x000000, "Member 'AJBOutGameProxy_CreateNetMessage_Tenpo_Logined::ReturnValue' has a wrong offset!");

// Function AJB.AJBOutGameProxy.CreateNetMessage_Tenpo_StartMatching
// 0x0010 (0x0010 - 0x0000)
struct AJBOutGameProxy_CreateNetMessage_Tenpo_StartMatching final
{
public:
	int32                                         InAreaType;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNetMessage*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_CreateNetMessage_Tenpo_StartMatching) == 0x000008, "Wrong alignment on AJBOutGameProxy_CreateNetMessage_Tenpo_StartMatching");
static_assert(sizeof(AJBOutGameProxy_CreateNetMessage_Tenpo_StartMatching) == 0x000010, "Wrong size on AJBOutGameProxy_CreateNetMessage_Tenpo_StartMatching");
static_assert(offsetof(AJBOutGameProxy_CreateNetMessage_Tenpo_StartMatching, InAreaType) == 0x000000, "Member 'AJBOutGameProxy_CreateNetMessage_Tenpo_StartMatching::InAreaType' has a wrong offset!");
static_assert(offsetof(AJBOutGameProxy_CreateNetMessage_Tenpo_StartMatching, ReturnValue) == 0x000008, "Member 'AJBOutGameProxy_CreateNetMessage_Tenpo_StartMatching::ReturnValue' has a wrong offset!");

// Function AJB.AJBOutGameProxy.DebugSetupLoginPlayerInfo
// 0x0001 (0x0001 - 0x0000)
struct AJBOutGameProxy_DebugSetupLoginPlayerInfo final
{
public:
	bool                                          bForceSetting;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_DebugSetupLoginPlayerInfo) == 0x000001, "Wrong alignment on AJBOutGameProxy_DebugSetupLoginPlayerInfo");
static_assert(sizeof(AJBOutGameProxy_DebugSetupLoginPlayerInfo) == 0x000001, "Wrong size on AJBOutGameProxy_DebugSetupLoginPlayerInfo");
static_assert(offsetof(AJBOutGameProxy_DebugSetupLoginPlayerInfo, bForceSetting) == 0x000000, "Member 'AJBOutGameProxy_DebugSetupLoginPlayerInfo::bForceSetting' has a wrong offset!");

// Function AJB.AJBOutGameProxy.DecodeCustomData
// 0x0030 (0x0030 - 0x0000)
struct AJBOutGameProxy_DecodeCustomData final
{
public:
	struct FCustomData                            OutCustomData;                                     // 0x0000(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FString                                 InDecodeString;                                    // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_DecodeCustomData) == 0x000008, "Wrong alignment on AJBOutGameProxy_DecodeCustomData");
static_assert(sizeof(AJBOutGameProxy_DecodeCustomData) == 0x000030, "Wrong size on AJBOutGameProxy_DecodeCustomData");
static_assert(offsetof(AJBOutGameProxy_DecodeCustomData, OutCustomData) == 0x000000, "Member 'AJBOutGameProxy_DecodeCustomData::OutCustomData' has a wrong offset!");
static_assert(offsetof(AJBOutGameProxy_DecodeCustomData, InDecodeString) == 0x000020, "Member 'AJBOutGameProxy_DecodeCustomData::InDecodeString' has a wrong offset!");

// Function AJB.AJBOutGameProxy.EncodeCustomData
// 0x0030 (0x0030 - 0x0000)
struct AJBOutGameProxy_EncodeCustomData final
{
public:
	class FString                                 OutEncodeString;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCustomData                            InCustomData;                                      // 0x0010(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_EncodeCustomData) == 0x000008, "Wrong alignment on AJBOutGameProxy_EncodeCustomData");
static_assert(sizeof(AJBOutGameProxy_EncodeCustomData) == 0x000030, "Wrong size on AJBOutGameProxy_EncodeCustomData");
static_assert(offsetof(AJBOutGameProxy_EncodeCustomData, OutEncodeString) == 0x000000, "Member 'AJBOutGameProxy_EncodeCustomData::OutEncodeString' has a wrong offset!");
static_assert(offsetof(AJBOutGameProxy_EncodeCustomData, InCustomData) == 0x000010, "Member 'AJBOutGameProxy_EncodeCustomData::InCustomData' has a wrong offset!");

// Function AJB.AJBOutGameProxy.GetOpenCommand
// 0x0010 (0x0010 - 0x0000)
struct AJBOutGameProxy_GetOpenCommand final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_GetOpenCommand) == 0x000008, "Wrong alignment on AJBOutGameProxy_GetOpenCommand");
static_assert(sizeof(AJBOutGameProxy_GetOpenCommand) == 0x000010, "Wrong size on AJBOutGameProxy_GetOpenCommand");
static_assert(offsetof(AJBOutGameProxy_GetOpenCommand, ReturnValue) == 0x000000, "Member 'AJBOutGameProxy_GetOpenCommand::ReturnValue' has a wrong offset!");

// Function AJB.AJBOutGameProxy.GetTenpoBattleDamageAreaType
// 0x0004 (0x0004 - 0x0000)
struct AJBOutGameProxy_GetTenpoBattleDamageAreaType final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_GetTenpoBattleDamageAreaType) == 0x000004, "Wrong alignment on AJBOutGameProxy_GetTenpoBattleDamageAreaType");
static_assert(sizeof(AJBOutGameProxy_GetTenpoBattleDamageAreaType) == 0x000004, "Wrong size on AJBOutGameProxy_GetTenpoBattleDamageAreaType");
static_assert(offsetof(AJBOutGameProxy_GetTenpoBattleDamageAreaType, ReturnValue) == 0x000000, "Member 'AJBOutGameProxy_GetTenpoBattleDamageAreaType::ReturnValue' has a wrong offset!");

// Function AJB.AJBOutGameProxy.GetTenpoRoomRemainingTimeSeconds
// 0x0004 (0x0004 - 0x0000)
struct AJBOutGameProxy_GetTenpoRoomRemainingTimeSeconds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_GetTenpoRoomRemainingTimeSeconds) == 0x000004, "Wrong alignment on AJBOutGameProxy_GetTenpoRoomRemainingTimeSeconds");
static_assert(sizeof(AJBOutGameProxy_GetTenpoRoomRemainingTimeSeconds) == 0x000004, "Wrong size on AJBOutGameProxy_GetTenpoRoomRemainingTimeSeconds");
static_assert(offsetof(AJBOutGameProxy_GetTenpoRoomRemainingTimeSeconds, ReturnValue) == 0x000000, "Member 'AJBOutGameProxy_GetTenpoRoomRemainingTimeSeconds::ReturnValue' has a wrong offset!");

// Function AJB.AJBOutGameProxy.HasTenpoHostIP
// 0x0001 (0x0001 - 0x0000)
struct AJBOutGameProxy_HasTenpoHostIP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_HasTenpoHostIP) == 0x000001, "Wrong alignment on AJBOutGameProxy_HasTenpoHostIP");
static_assert(sizeof(AJBOutGameProxy_HasTenpoHostIP) == 0x000001, "Wrong size on AJBOutGameProxy_HasTenpoHostIP");
static_assert(offsetof(AJBOutGameProxy_HasTenpoHostIP, ReturnValue) == 0x000000, "Member 'AJBOutGameProxy_HasTenpoHostIP::ReturnValue' has a wrong offset!");

// Function AJB.AJBOutGameProxy.IsTenpoHost
// 0x0001 (0x0001 - 0x0000)
struct AJBOutGameProxy_IsTenpoHost final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_IsTenpoHost) == 0x000001, "Wrong alignment on AJBOutGameProxy_IsTenpoHost");
static_assert(sizeof(AJBOutGameProxy_IsTenpoHost) == 0x000001, "Wrong size on AJBOutGameProxy_IsTenpoHost");
static_assert(offsetof(AJBOutGameProxy_IsTenpoHost, ReturnValue) == 0x000000, "Member 'AJBOutGameProxy_IsTenpoHost::ReturnValue' has a wrong offset!");

// Function AJB.AJBOutGameProxy.NotifyAPI_ChangeRoomInfo
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_NotifyAPI_ChangeRoomInfo final
{
public:
	class UNetMessage*                            Msg;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_NotifyAPI_ChangeRoomInfo) == 0x000008, "Wrong alignment on AJBOutGameProxy_NotifyAPI_ChangeRoomInfo");
static_assert(sizeof(AJBOutGameProxy_NotifyAPI_ChangeRoomInfo) == 0x000008, "Wrong size on AJBOutGameProxy_NotifyAPI_ChangeRoomInfo");
static_assert(offsetof(AJBOutGameProxy_NotifyAPI_ChangeRoomInfo, Msg) == 0x000000, "Member 'AJBOutGameProxy_NotifyAPI_ChangeRoomInfo::Msg' has a wrong offset!");

// Function AJB.AJBOutGameProxy.NotifyAPI_Matching_Status
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_NotifyAPI_Matching_Status final
{
public:
	class UNetMessage*                            Msg;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_NotifyAPI_Matching_Status) == 0x000008, "Wrong alignment on AJBOutGameProxy_NotifyAPI_Matching_Status");
static_assert(sizeof(AJBOutGameProxy_NotifyAPI_Matching_Status) == 0x000008, "Wrong size on AJBOutGameProxy_NotifyAPI_Matching_Status");
static_assert(offsetof(AJBOutGameProxy_NotifyAPI_Matching_Status, Msg) == 0x000000, "Member 'AJBOutGameProxy_NotifyAPI_Matching_Status::Msg' has a wrong offset!");

// Function AJB.AJBOutGameProxy.NotifyAPI_PairRandomMatch
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_NotifyAPI_PairRandomMatch final
{
public:
	class UNetMessage*                            Msg;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_NotifyAPI_PairRandomMatch) == 0x000008, "Wrong alignment on AJBOutGameProxy_NotifyAPI_PairRandomMatch");
static_assert(sizeof(AJBOutGameProxy_NotifyAPI_PairRandomMatch) == 0x000008, "Wrong size on AJBOutGameProxy_NotifyAPI_PairRandomMatch");
static_assert(offsetof(AJBOutGameProxy_NotifyAPI_PairRandomMatch, Msg) == 0x000000, "Member 'AJBOutGameProxy_NotifyAPI_PairRandomMatch::Msg' has a wrong offset!");

// Function AJB.AJBOutGameProxy.NotifyAPI_StartLocation_GetPlayerInfo
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_NotifyAPI_StartLocation_GetPlayerInfo final
{
public:
	class UNetMessage*                            Msg;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_NotifyAPI_StartLocation_GetPlayerInfo) == 0x000008, "Wrong alignment on AJBOutGameProxy_NotifyAPI_StartLocation_GetPlayerInfo");
static_assert(sizeof(AJBOutGameProxy_NotifyAPI_StartLocation_GetPlayerInfo) == 0x000008, "Wrong size on AJBOutGameProxy_NotifyAPI_StartLocation_GetPlayerInfo");
static_assert(offsetof(AJBOutGameProxy_NotifyAPI_StartLocation_GetPlayerInfo, Msg) == 0x000000, "Member 'AJBOutGameProxy_NotifyAPI_StartLocation_GetPlayerInfo::Msg' has a wrong offset!");

// Function AJB.AJBOutGameProxy.NotifyAPI_Tenpo_ChangeGameSetting
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_NotifyAPI_Tenpo_ChangeGameSetting final
{
public:
	class UNetMessage*                            Msg;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_NotifyAPI_Tenpo_ChangeGameSetting) == 0x000008, "Wrong alignment on AJBOutGameProxy_NotifyAPI_Tenpo_ChangeGameSetting");
static_assert(sizeof(AJBOutGameProxy_NotifyAPI_Tenpo_ChangeGameSetting) == 0x000008, "Wrong size on AJBOutGameProxy_NotifyAPI_Tenpo_ChangeGameSetting");
static_assert(offsetof(AJBOutGameProxy_NotifyAPI_Tenpo_ChangeGameSetting, Msg) == 0x000000, "Member 'AJBOutGameProxy_NotifyAPI_Tenpo_ChangeGameSetting::Msg' has a wrong offset!");

// Function AJB.AJBOutGameProxy.NotifyAPI_Tenpo_ChangeRoomInfo
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_NotifyAPI_Tenpo_ChangeRoomInfo final
{
public:
	class UNetMessage*                            Msg;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_NotifyAPI_Tenpo_ChangeRoomInfo) == 0x000008, "Wrong alignment on AJBOutGameProxy_NotifyAPI_Tenpo_ChangeRoomInfo");
static_assert(sizeof(AJBOutGameProxy_NotifyAPI_Tenpo_ChangeRoomInfo) == 0x000008, "Wrong size on AJBOutGameProxy_NotifyAPI_Tenpo_ChangeRoomInfo");
static_assert(offsetof(AJBOutGameProxy_NotifyAPI_Tenpo_ChangeRoomInfo, Msg) == 0x000000, "Member 'AJBOutGameProxy_NotifyAPI_Tenpo_ChangeRoomInfo::Msg' has a wrong offset!");

// Function AJB.AJBOutGameProxy.NotifyAPI_Tenpo_Logined
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_NotifyAPI_Tenpo_Logined final
{
public:
	class UNetMessage*                            Msg;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_NotifyAPI_Tenpo_Logined) == 0x000008, "Wrong alignment on AJBOutGameProxy_NotifyAPI_Tenpo_Logined");
static_assert(sizeof(AJBOutGameProxy_NotifyAPI_Tenpo_Logined) == 0x000008, "Wrong size on AJBOutGameProxy_NotifyAPI_Tenpo_Logined");
static_assert(offsetof(AJBOutGameProxy_NotifyAPI_Tenpo_Logined, Msg) == 0x000000, "Member 'AJBOutGameProxy_NotifyAPI_Tenpo_Logined::Msg' has a wrong offset!");

// Function AJB.AJBOutGameProxy.NotifyAPI_Tenpo_Matching
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_NotifyAPI_Tenpo_Matching final
{
public:
	class UNetMessage*                            Msg;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_NotifyAPI_Tenpo_Matching) == 0x000008, "Wrong alignment on AJBOutGameProxy_NotifyAPI_Tenpo_Matching");
static_assert(sizeof(AJBOutGameProxy_NotifyAPI_Tenpo_Matching) == 0x000008, "Wrong size on AJBOutGameProxy_NotifyAPI_Tenpo_Matching");
static_assert(offsetof(AJBOutGameProxy_NotifyAPI_Tenpo_Matching, Msg) == 0x000000, "Member 'AJBOutGameProxy_NotifyAPI_Tenpo_Matching::Msg' has a wrong offset!");

// Function AJB.AJBOutGameProxy.OnErrorHttp
// 0x0018 (0x0018 - 0x0000)
struct AJBOutGameProxy_OnErrorHttp final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Errmsg;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_OnErrorHttp) == 0x000008, "Wrong alignment on AJBOutGameProxy_OnErrorHttp");
static_assert(sizeof(AJBOutGameProxy_OnErrorHttp) == 0x000018, "Wrong size on AJBOutGameProxy_OnErrorHttp");
static_assert(offsetof(AJBOutGameProxy_OnErrorHttp, Code) == 0x000000, "Member 'AJBOutGameProxy_OnErrorHttp::Code' has a wrong offset!");
static_assert(offsetof(AJBOutGameProxy_OnErrorHttp, Errmsg) == 0x000008, "Member 'AJBOutGameProxy_OnErrorHttp::Errmsg' has a wrong offset!");

// Function AJB.AJBOutGameProxy.OnNotifyTenpoGameSettings
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_OnNotifyTenpoGameSettings final
{
public:
	int32                                         CPUNum;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExchangeMode;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBOutGameProxy_OnNotifyTenpoGameSettings) == 0x000004, "Wrong alignment on AJBOutGameProxy_OnNotifyTenpoGameSettings");
static_assert(sizeof(AJBOutGameProxy_OnNotifyTenpoGameSettings) == 0x000008, "Wrong size on AJBOutGameProxy_OnNotifyTenpoGameSettings");
static_assert(offsetof(AJBOutGameProxy_OnNotifyTenpoGameSettings, CPUNum) == 0x000000, "Member 'AJBOutGameProxy_OnNotifyTenpoGameSettings::CPUNum' has a wrong offset!");
static_assert(offsetof(AJBOutGameProxy_OnNotifyTenpoGameSettings, ExchangeMode) == 0x000004, "Member 'AJBOutGameProxy_OnNotifyTenpoGameSettings::ExchangeMode' has a wrong offset!");

// Function AJB.AJBOutGameProxy.OnNotifyUpdateSelectCharacter
// 0x0118 (0x0118 - 0x0000)
struct AJBOutGameProxy_OnNotifyUpdateSelectCharacter final
{
public:
	bool                                          bFinished;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRoomPlayerInfo                        RoomPlayerInfo;                                    // 0x0008(0x0110)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_OnNotifyUpdateSelectCharacter) == 0x000008, "Wrong alignment on AJBOutGameProxy_OnNotifyUpdateSelectCharacter");
static_assert(sizeof(AJBOutGameProxy_OnNotifyUpdateSelectCharacter) == 0x000118, "Wrong size on AJBOutGameProxy_OnNotifyUpdateSelectCharacter");
static_assert(offsetof(AJBOutGameProxy_OnNotifyUpdateSelectCharacter, bFinished) == 0x000000, "Member 'AJBOutGameProxy_OnNotifyUpdateSelectCharacter::bFinished' has a wrong offset!");
static_assert(offsetof(AJBOutGameProxy_OnNotifyUpdateSelectCharacter, RoomPlayerInfo) == 0x000008, "Member 'AJBOutGameProxy_OnNotifyUpdateSelectCharacter::RoomPlayerInfo' has a wrong offset!");

// Function AJB.AJBOutGameProxy.OnNotifyUpdateTenpoMatching
// 0x0001 (0x0001 - 0x0000)
struct AJBOutGameProxy_OnNotifyUpdateTenpoMatching final
{
public:
	ETenpoMatchingResult                          Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_OnNotifyUpdateTenpoMatching) == 0x000001, "Wrong alignment on AJBOutGameProxy_OnNotifyUpdateTenpoMatching");
static_assert(sizeof(AJBOutGameProxy_OnNotifyUpdateTenpoMatching) == 0x000001, "Wrong size on AJBOutGameProxy_OnNotifyUpdateTenpoMatching");
static_assert(offsetof(AJBOutGameProxy_OnNotifyUpdateTenpoMatching, Result) == 0x000000, "Member 'AJBOutGameProxy_OnNotifyUpdateTenpoMatching::Result' has a wrong offset!");

// Function AJB.AJBOutGameProxy.OnResponsCharacterSelect
// 0x0001 (0x0001 - 0x0000)
struct AJBOutGameProxy_OnResponsCharacterSelect final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_OnResponsCharacterSelect) == 0x000001, "Wrong alignment on AJBOutGameProxy_OnResponsCharacterSelect");
static_assert(sizeof(AJBOutGameProxy_OnResponsCharacterSelect) == 0x000001, "Wrong size on AJBOutGameProxy_OnResponsCharacterSelect");
static_assert(offsetof(AJBOutGameProxy_OnResponsCharacterSelect, bSuccess) == 0x000000, "Member 'AJBOutGameProxy_OnResponsCharacterSelect::bSuccess' has a wrong offset!");

// Function AJB.AJBOutGameProxy.OnResponseCreateRoom
// 0x0001 (0x0001 - 0x0000)
struct AJBOutGameProxy_OnResponseCreateRoom final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_OnResponseCreateRoom) == 0x000001, "Wrong alignment on AJBOutGameProxy_OnResponseCreateRoom");
static_assert(sizeof(AJBOutGameProxy_OnResponseCreateRoom) == 0x000001, "Wrong size on AJBOutGameProxy_OnResponseCreateRoom");
static_assert(offsetof(AJBOutGameProxy_OnResponseCreateRoom, bSuccess) == 0x000000, "Member 'AJBOutGameProxy_OnResponseCreateRoom::bSuccess' has a wrong offset!");

// Function AJB.AJBOutGameProxy.OnResponseDeletePairIDMatch
// 0x0001 (0x0001 - 0x0000)
struct AJBOutGameProxy_OnResponseDeletePairIDMatch final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_OnResponseDeletePairIDMatch) == 0x000001, "Wrong alignment on AJBOutGameProxy_OnResponseDeletePairIDMatch");
static_assert(sizeof(AJBOutGameProxy_OnResponseDeletePairIDMatch) == 0x000001, "Wrong size on AJBOutGameProxy_OnResponseDeletePairIDMatch");
static_assert(offsetof(AJBOutGameProxy_OnResponseDeletePairIDMatch, bSuccess) == 0x000000, "Member 'AJBOutGameProxy_OnResponseDeletePairIDMatch::bSuccess' has a wrong offset!");

// Function AJB.AJBOutGameProxy.OnResponseDeleteRoom
// 0x0001 (0x0001 - 0x0000)
struct AJBOutGameProxy_OnResponseDeleteRoom final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_OnResponseDeleteRoom) == 0x000001, "Wrong alignment on AJBOutGameProxy_OnResponseDeleteRoom");
static_assert(sizeof(AJBOutGameProxy_OnResponseDeleteRoom) == 0x000001, "Wrong size on AJBOutGameProxy_OnResponseDeleteRoom");
static_assert(offsetof(AJBOutGameProxy_OnResponseDeleteRoom, bSuccess) == 0x000000, "Member 'AJBOutGameProxy_OnResponseDeleteRoom::bSuccess' has a wrong offset!");

// Function AJB.AJBOutGameProxy.OnResponseEnterRoom
// 0x0001 (0x0001 - 0x0000)
struct AJBOutGameProxy_OnResponseEnterRoom final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_OnResponseEnterRoom) == 0x000001, "Wrong alignment on AJBOutGameProxy_OnResponseEnterRoom");
static_assert(sizeof(AJBOutGameProxy_OnResponseEnterRoom) == 0x000001, "Wrong size on AJBOutGameProxy_OnResponseEnterRoom");
static_assert(offsetof(AJBOutGameProxy_OnResponseEnterRoom, bSuccess) == 0x000000, "Member 'AJBOutGameProxy_OnResponseEnterRoom::bSuccess' has a wrong offset!");

// Function AJB.AJBOutGameProxy.OnResponsePairIDMatching
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_OnResponsePairIDMatching final
{
public:
	bool                                          bSuccessMatching;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RemainTime;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_OnResponsePairIDMatching) == 0x000004, "Wrong alignment on AJBOutGameProxy_OnResponsePairIDMatching");
static_assert(sizeof(AJBOutGameProxy_OnResponsePairIDMatching) == 0x000008, "Wrong size on AJBOutGameProxy_OnResponsePairIDMatching");
static_assert(offsetof(AJBOutGameProxy_OnResponsePairIDMatching, bSuccessMatching) == 0x000000, "Member 'AJBOutGameProxy_OnResponsePairIDMatching::bSuccessMatching' has a wrong offset!");
static_assert(offsetof(AJBOutGameProxy_OnResponsePairIDMatching, RemainTime) == 0x000004, "Member 'AJBOutGameProxy_OnResponsePairIDMatching::RemainTime' has a wrong offset!");

// Function AJB.AJBOutGameProxy.OnResponsePairMatching
// 0x0090 (0x0090 - 0x0000)
struct AJBOutGameProxy_OnResponsePairMatching final
{
public:
	bool                                          bSuccessMatching;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatchingPlayerInfo                    PairMatchingPlayerInfo;                            // 0x0008(0x0088)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_OnResponsePairMatching) == 0x000008, "Wrong alignment on AJBOutGameProxy_OnResponsePairMatching");
static_assert(sizeof(AJBOutGameProxy_OnResponsePairMatching) == 0x000090, "Wrong size on AJBOutGameProxy_OnResponsePairMatching");
static_assert(offsetof(AJBOutGameProxy_OnResponsePairMatching, bSuccessMatching) == 0x000000, "Member 'AJBOutGameProxy_OnResponsePairMatching::bSuccessMatching' has a wrong offset!");
static_assert(offsetof(AJBOutGameProxy_OnResponsePairMatching, PairMatchingPlayerInfo) == 0x000008, "Member 'AJBOutGameProxy_OnResponsePairMatching::PairMatchingPlayerInfo' has a wrong offset!");

// Function AJB.AJBOutGameProxy.OnResponseRandomPairMatching
// 0x0001 (0x0001 - 0x0000)
struct AJBOutGameProxy_OnResponseRandomPairMatching final
{
public:
	bool                                          bSuccessMatching;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_OnResponseRandomPairMatching) == 0x000001, "Wrong alignment on AJBOutGameProxy_OnResponseRandomPairMatching");
static_assert(sizeof(AJBOutGameProxy_OnResponseRandomPairMatching) == 0x000001, "Wrong size on AJBOutGameProxy_OnResponseRandomPairMatching");
static_assert(offsetof(AJBOutGameProxy_OnResponseRandomPairMatching, bSuccessMatching) == 0x000000, "Member 'AJBOutGameProxy_OnResponseRandomPairMatching::bSuccessMatching' has a wrong offset!");

// Function AJB.AJBOutGameProxy.OnResponseSelectStartLocation
// 0x0020 (0x0020 - 0x0000)
struct AJBOutGameProxy_OnResponseSelectStartLocation final
{
public:
	EResultStartLocation                          Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         X;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserID;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_OnResponseSelectStartLocation) == 0x000008, "Wrong alignment on AJBOutGameProxy_OnResponseSelectStartLocation");
static_assert(sizeof(AJBOutGameProxy_OnResponseSelectStartLocation) == 0x000020, "Wrong size on AJBOutGameProxy_OnResponseSelectStartLocation");
static_assert(offsetof(AJBOutGameProxy_OnResponseSelectStartLocation, Result) == 0x000000, "Member 'AJBOutGameProxy_OnResponseSelectStartLocation::Result' has a wrong offset!");
static_assert(offsetof(AJBOutGameProxy_OnResponseSelectStartLocation, X) == 0x000004, "Member 'AJBOutGameProxy_OnResponseSelectStartLocation::X' has a wrong offset!");
static_assert(offsetof(AJBOutGameProxy_OnResponseSelectStartLocation, Y) == 0x000008, "Member 'AJBOutGameProxy_OnResponseSelectStartLocation::Y' has a wrong offset!");
static_assert(offsetof(AJBOutGameProxy_OnResponseSelectStartLocation, UserID) == 0x000010, "Member 'AJBOutGameProxy_OnResponseSelectStartLocation::UserID' has a wrong offset!");

// Function AJB.AJBOutGameProxy.OnResponseServerTest
// 0x0001 (0x0001 - 0x0000)
struct AJBOutGameProxy_OnResponseServerTest final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_OnResponseServerTest) == 0x000001, "Wrong alignment on AJBOutGameProxy_OnResponseServerTest");
static_assert(sizeof(AJBOutGameProxy_OnResponseServerTest) == 0x000001, "Wrong size on AJBOutGameProxy_OnResponseServerTest");
static_assert(offsetof(AJBOutGameProxy_OnResponseServerTest, bSuccess) == 0x000000, "Member 'AJBOutGameProxy_OnResponseServerTest::bSuccess' has a wrong offset!");

// Function AJB.AJBOutGameProxy.OnResponseTenpoDeleteRoom
// 0x0001 (0x0001 - 0x0000)
struct AJBOutGameProxy_OnResponseTenpoDeleteRoom final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_OnResponseTenpoDeleteRoom) == 0x000001, "Wrong alignment on AJBOutGameProxy_OnResponseTenpoDeleteRoom");
static_assert(sizeof(AJBOutGameProxy_OnResponseTenpoDeleteRoom) == 0x000001, "Wrong size on AJBOutGameProxy_OnResponseTenpoDeleteRoom");
static_assert(offsetof(AJBOutGameProxy_OnResponseTenpoDeleteRoom, bSuccess) == 0x000000, "Member 'AJBOutGameProxy_OnResponseTenpoDeleteRoom::bSuccess' has a wrong offset!");

// Function AJB.AJBOutGameProxy.OnResponseTenpoEnterRoom
// 0x0002 (0x0002 - 0x0000)
struct AJBOutGameProxy_OnResponseTenpoEnterRoom final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETenpoRoomEnterResult                         Result;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_OnResponseTenpoEnterRoom) == 0x000001, "Wrong alignment on AJBOutGameProxy_OnResponseTenpoEnterRoom");
static_assert(sizeof(AJBOutGameProxy_OnResponseTenpoEnterRoom) == 0x000002, "Wrong size on AJBOutGameProxy_OnResponseTenpoEnterRoom");
static_assert(offsetof(AJBOutGameProxy_OnResponseTenpoEnterRoom, bSuccess) == 0x000000, "Member 'AJBOutGameProxy_OnResponseTenpoEnterRoom::bSuccess' has a wrong offset!");
static_assert(offsetof(AJBOutGameProxy_OnResponseTenpoEnterRoom, Result) == 0x000001, "Member 'AJBOutGameProxy_OnResponseTenpoEnterRoom::Result' has a wrong offset!");

// Function AJB.AJBOutGameProxy.OnResponseTenpoGameSettings
// 0x0001 (0x0001 - 0x0000)
struct AJBOutGameProxy_OnResponseTenpoGameSettings final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_OnResponseTenpoGameSettings) == 0x000001, "Wrong alignment on AJBOutGameProxy_OnResponseTenpoGameSettings");
static_assert(sizeof(AJBOutGameProxy_OnResponseTenpoGameSettings) == 0x000001, "Wrong size on AJBOutGameProxy_OnResponseTenpoGameSettings");
static_assert(offsetof(AJBOutGameProxy_OnResponseTenpoGameSettings, bSuccess) == 0x000000, "Member 'AJBOutGameProxy_OnResponseTenpoGameSettings::bSuccess' has a wrong offset!");

// Function AJB.AJBOutGameProxy.OnResponseTenpoStartMatching
// 0x0001 (0x0001 - 0x0000)
struct AJBOutGameProxy_OnResponseTenpoStartMatching final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_OnResponseTenpoStartMatching) == 0x000001, "Wrong alignment on AJBOutGameProxy_OnResponseTenpoStartMatching");
static_assert(sizeof(AJBOutGameProxy_OnResponseTenpoStartMatching) == 0x000001, "Wrong size on AJBOutGameProxy_OnResponseTenpoStartMatching");
static_assert(offsetof(AJBOutGameProxy_OnResponseTenpoStartMatching, bSuccess) == 0x000000, "Member 'AJBOutGameProxy_OnResponseTenpoStartMatching::bSuccess' has a wrong offset!");

// Function AJB.AJBOutGameProxy.OnUpdateMatchingStatus
// 0x0001 (0x0001 - 0x0000)
struct AJBOutGameProxy_OnUpdateMatchingStatus final
{
public:
	bool                                          bComplete;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_OnUpdateMatchingStatus) == 0x000001, "Wrong alignment on AJBOutGameProxy_OnUpdateMatchingStatus");
static_assert(sizeof(AJBOutGameProxy_OnUpdateMatchingStatus) == 0x000001, "Wrong size on AJBOutGameProxy_OnUpdateMatchingStatus");
static_assert(offsetof(AJBOutGameProxy_OnUpdateMatchingStatus, bComplete) == 0x000000, "Member 'AJBOutGameProxy_OnUpdateMatchingStatus::bComplete' has a wrong offset!");

// Function AJB.AJBOutGameProxy.Receive_SocketNetMessage
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_Receive_SocketNetMessage final
{
public:
	class UNetMessage*                            Msg;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_Receive_SocketNetMessage) == 0x000008, "Wrong alignment on AJBOutGameProxy_Receive_SocketNetMessage");
static_assert(sizeof(AJBOutGameProxy_Receive_SocketNetMessage) == 0x000008, "Wrong size on AJBOutGameProxy_Receive_SocketNetMessage");
static_assert(offsetof(AJBOutGameProxy_Receive_SocketNetMessage, Msg) == 0x000000, "Member 'AJBOutGameProxy_Receive_SocketNetMessage::Msg' has a wrong offset!");

// Function AJB.AJBOutGameProxy.ResponseAPI_ChangeCharacter
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_ResponseAPI_ChangeCharacter final
{
public:
	class UNetMessage*                            Msg;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_ResponseAPI_ChangeCharacter) == 0x000008, "Wrong alignment on AJBOutGameProxy_ResponseAPI_ChangeCharacter");
static_assert(sizeof(AJBOutGameProxy_ResponseAPI_ChangeCharacter) == 0x000008, "Wrong size on AJBOutGameProxy_ResponseAPI_ChangeCharacter");
static_assert(offsetof(AJBOutGameProxy_ResponseAPI_ChangeCharacter, Msg) == 0x000000, "Member 'AJBOutGameProxy_ResponseAPI_ChangeCharacter::Msg' has a wrong offset!");

// Function AJB.AJBOutGameProxy.ResponseAPI_CreateRoom
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_ResponseAPI_CreateRoom final
{
public:
	class UNetMessage*                            Msg;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_ResponseAPI_CreateRoom) == 0x000008, "Wrong alignment on AJBOutGameProxy_ResponseAPI_CreateRoom");
static_assert(sizeof(AJBOutGameProxy_ResponseAPI_CreateRoom) == 0x000008, "Wrong size on AJBOutGameProxy_ResponseAPI_CreateRoom");
static_assert(offsetof(AJBOutGameProxy_ResponseAPI_CreateRoom, Msg) == 0x000000, "Member 'AJBOutGameProxy_ResponseAPI_CreateRoom::Msg' has a wrong offset!");

// Function AJB.AJBOutGameProxy.ResponseAPI_DeletePairIDMatch
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_ResponseAPI_DeletePairIDMatch final
{
public:
	class UNetMessage*                            Msg;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_ResponseAPI_DeletePairIDMatch) == 0x000008, "Wrong alignment on AJBOutGameProxy_ResponseAPI_DeletePairIDMatch");
static_assert(sizeof(AJBOutGameProxy_ResponseAPI_DeletePairIDMatch) == 0x000008, "Wrong size on AJBOutGameProxy_ResponseAPI_DeletePairIDMatch");
static_assert(offsetof(AJBOutGameProxy_ResponseAPI_DeletePairIDMatch, Msg) == 0x000000, "Member 'AJBOutGameProxy_ResponseAPI_DeletePairIDMatch::Msg' has a wrong offset!");

// Function AJB.AJBOutGameProxy.ResponseAPI_DeleteRoom
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_ResponseAPI_DeleteRoom final
{
public:
	class UNetMessage*                            Msg;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_ResponseAPI_DeleteRoom) == 0x000008, "Wrong alignment on AJBOutGameProxy_ResponseAPI_DeleteRoom");
static_assert(sizeof(AJBOutGameProxy_ResponseAPI_DeleteRoom) == 0x000008, "Wrong size on AJBOutGameProxy_ResponseAPI_DeleteRoom");
static_assert(offsetof(AJBOutGameProxy_ResponseAPI_DeleteRoom, Msg) == 0x000000, "Member 'AJBOutGameProxy_ResponseAPI_DeleteRoom::Msg' has a wrong offset!");

// Function AJB.AJBOutGameProxy.ResponseAPI_EnterRoom
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_ResponseAPI_EnterRoom final
{
public:
	class UNetMessage*                            Msg;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_ResponseAPI_EnterRoom) == 0x000008, "Wrong alignment on AJBOutGameProxy_ResponseAPI_EnterRoom");
static_assert(sizeof(AJBOutGameProxy_ResponseAPI_EnterRoom) == 0x000008, "Wrong size on AJBOutGameProxy_ResponseAPI_EnterRoom");
static_assert(offsetof(AJBOutGameProxy_ResponseAPI_EnterRoom, Msg) == 0x000000, "Member 'AJBOutGameProxy_ResponseAPI_EnterRoom::Msg' has a wrong offset!");

// Function AJB.AJBOutGameProxy.ResponseAPI_GetRoomInfo
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_ResponseAPI_GetRoomInfo final
{
public:
	class UNetMessage*                            Msg;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_ResponseAPI_GetRoomInfo) == 0x000008, "Wrong alignment on AJBOutGameProxy_ResponseAPI_GetRoomInfo");
static_assert(sizeof(AJBOutGameProxy_ResponseAPI_GetRoomInfo) == 0x000008, "Wrong size on AJBOutGameProxy_ResponseAPI_GetRoomInfo");
static_assert(offsetof(AJBOutGameProxy_ResponseAPI_GetRoomInfo, Msg) == 0x000000, "Member 'AJBOutGameProxy_ResponseAPI_GetRoomInfo::Msg' has a wrong offset!");

// Function AJB.AJBOutGameProxy.ResponseAPI_Matching_Breakup
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_ResponseAPI_Matching_Breakup final
{
public:
	class UNetMessage*                            Msg;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_ResponseAPI_Matching_Breakup) == 0x000008, "Wrong alignment on AJBOutGameProxy_ResponseAPI_Matching_Breakup");
static_assert(sizeof(AJBOutGameProxy_ResponseAPI_Matching_Breakup) == 0x000008, "Wrong size on AJBOutGameProxy_ResponseAPI_Matching_Breakup");
static_assert(offsetof(AJBOutGameProxy_ResponseAPI_Matching_Breakup, Msg) == 0x000000, "Member 'AJBOutGameProxy_ResponseAPI_Matching_Breakup::Msg' has a wrong offset!");

// Function AJB.AJBOutGameProxy.ResponseAPI_Matching_Finish
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_ResponseAPI_Matching_Finish final
{
public:
	class UNetMessage*                            Msg;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_ResponseAPI_Matching_Finish) == 0x000008, "Wrong alignment on AJBOutGameProxy_ResponseAPI_Matching_Finish");
static_assert(sizeof(AJBOutGameProxy_ResponseAPI_Matching_Finish) == 0x000008, "Wrong size on AJBOutGameProxy_ResponseAPI_Matching_Finish");
static_assert(offsetof(AJBOutGameProxy_ResponseAPI_Matching_Finish, Msg) == 0x000000, "Member 'AJBOutGameProxy_ResponseAPI_Matching_Finish::Msg' has a wrong offset!");

// Function AJB.AJBOutGameProxy.ResponseAPI_Matching_Start
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_ResponseAPI_Matching_Start final
{
public:
	class UNetMessage*                            Msg;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_ResponseAPI_Matching_Start) == 0x000008, "Wrong alignment on AJBOutGameProxy_ResponseAPI_Matching_Start");
static_assert(sizeof(AJBOutGameProxy_ResponseAPI_Matching_Start) == 0x000008, "Wrong size on AJBOutGameProxy_ResponseAPI_Matching_Start");
static_assert(offsetof(AJBOutGameProxy_ResponseAPI_Matching_Start, Msg) == 0x000000, "Member 'AJBOutGameProxy_ResponseAPI_Matching_Start::Msg' has a wrong offset!");

// Function AJB.AJBOutGameProxy.ResponseAPI_PairIDMatch
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_ResponseAPI_PairIDMatch final
{
public:
	class UNetMessage*                            Msg;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_ResponseAPI_PairIDMatch) == 0x000008, "Wrong alignment on AJBOutGameProxy_ResponseAPI_PairIDMatch");
static_assert(sizeof(AJBOutGameProxy_ResponseAPI_PairIDMatch) == 0x000008, "Wrong size on AJBOutGameProxy_ResponseAPI_PairIDMatch");
static_assert(offsetof(AJBOutGameProxy_ResponseAPI_PairIDMatch, Msg) == 0x000000, "Member 'AJBOutGameProxy_ResponseAPI_PairIDMatch::Msg' has a wrong offset!");

// Function AJB.AJBOutGameProxy.ResponseAPI_PairRandomMatch
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_ResponseAPI_PairRandomMatch final
{
public:
	class UNetMessage*                            Msg;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_ResponseAPI_PairRandomMatch) == 0x000008, "Wrong alignment on AJBOutGameProxy_ResponseAPI_PairRandomMatch");
static_assert(sizeof(AJBOutGameProxy_ResponseAPI_PairRandomMatch) == 0x000008, "Wrong size on AJBOutGameProxy_ResponseAPI_PairRandomMatch");
static_assert(offsetof(AJBOutGameProxy_ResponseAPI_PairRandomMatch, Msg) == 0x000000, "Member 'AJBOutGameProxy_ResponseAPI_PairRandomMatch::Msg' has a wrong offset!");

// Function AJB.AJBOutGameProxy.ResponseAPI_ServerTest
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_ResponseAPI_ServerTest final
{
public:
	class UNetMessage*                            Msg;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_ResponseAPI_ServerTest) == 0x000008, "Wrong alignment on AJBOutGameProxy_ResponseAPI_ServerTest");
static_assert(sizeof(AJBOutGameProxy_ResponseAPI_ServerTest) == 0x000008, "Wrong size on AJBOutGameProxy_ResponseAPI_ServerTest");
static_assert(offsetof(AJBOutGameProxy_ResponseAPI_ServerTest, Msg) == 0x000000, "Member 'AJBOutGameProxy_ResponseAPI_ServerTest::Msg' has a wrong offset!");

// Function AJB.AJBOutGameProxy.ResponseAPI_StartLocation_GetNPCInfo
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_ResponseAPI_StartLocation_GetNPCInfo final
{
public:
	class UNetMessage*                            Msg;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_ResponseAPI_StartLocation_GetNPCInfo) == 0x000008, "Wrong alignment on AJBOutGameProxy_ResponseAPI_StartLocation_GetNPCInfo");
static_assert(sizeof(AJBOutGameProxy_ResponseAPI_StartLocation_GetNPCInfo) == 0x000008, "Wrong size on AJBOutGameProxy_ResponseAPI_StartLocation_GetNPCInfo");
static_assert(offsetof(AJBOutGameProxy_ResponseAPI_StartLocation_GetNPCInfo, Msg) == 0x000000, "Member 'AJBOutGameProxy_ResponseAPI_StartLocation_GetNPCInfo::Msg' has a wrong offset!");

// Function AJB.AJBOutGameProxy.ResponseAPI_StartLocation_GetPlayerInfo
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_ResponseAPI_StartLocation_GetPlayerInfo final
{
public:
	class UNetMessage*                            Msg;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_ResponseAPI_StartLocation_GetPlayerInfo) == 0x000008, "Wrong alignment on AJBOutGameProxy_ResponseAPI_StartLocation_GetPlayerInfo");
static_assert(sizeof(AJBOutGameProxy_ResponseAPI_StartLocation_GetPlayerInfo) == 0x000008, "Wrong size on AJBOutGameProxy_ResponseAPI_StartLocation_GetPlayerInfo");
static_assert(offsetof(AJBOutGameProxy_ResponseAPI_StartLocation_GetPlayerInfo, Msg) == 0x000000, "Member 'AJBOutGameProxy_ResponseAPI_StartLocation_GetPlayerInfo::Msg' has a wrong offset!");

// Function AJB.AJBOutGameProxy.ResponseAPI_Tenpo_EnterRoom
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_ResponseAPI_Tenpo_EnterRoom final
{
public:
	class UNetMessage*                            Msg;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_ResponseAPI_Tenpo_EnterRoom) == 0x000008, "Wrong alignment on AJBOutGameProxy_ResponseAPI_Tenpo_EnterRoom");
static_assert(sizeof(AJBOutGameProxy_ResponseAPI_Tenpo_EnterRoom) == 0x000008, "Wrong size on AJBOutGameProxy_ResponseAPI_Tenpo_EnterRoom");
static_assert(offsetof(AJBOutGameProxy_ResponseAPI_Tenpo_EnterRoom, Msg) == 0x000000, "Member 'AJBOutGameProxy_ResponseAPI_Tenpo_EnterRoom::Msg' has a wrong offset!");

// Function AJB.AJBOutGameProxy.ResponseAPI_Tenpo_ExitRoom
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_ResponseAPI_Tenpo_ExitRoom final
{
public:
	class UNetMessage*                            Msg;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_ResponseAPI_Tenpo_ExitRoom) == 0x000008, "Wrong alignment on AJBOutGameProxy_ResponseAPI_Tenpo_ExitRoom");
static_assert(sizeof(AJBOutGameProxy_ResponseAPI_Tenpo_ExitRoom) == 0x000008, "Wrong size on AJBOutGameProxy_ResponseAPI_Tenpo_ExitRoom");
static_assert(offsetof(AJBOutGameProxy_ResponseAPI_Tenpo_ExitRoom, Msg) == 0x000000, "Member 'AJBOutGameProxy_ResponseAPI_Tenpo_ExitRoom::Msg' has a wrong offset!");

// Function AJB.AJBOutGameProxy.ResponseAPI_Tenpo_GameSetting
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_ResponseAPI_Tenpo_GameSetting final
{
public:
	class UNetMessage*                            Msg;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_ResponseAPI_Tenpo_GameSetting) == 0x000008, "Wrong alignment on AJBOutGameProxy_ResponseAPI_Tenpo_GameSetting");
static_assert(sizeof(AJBOutGameProxy_ResponseAPI_Tenpo_GameSetting) == 0x000008, "Wrong size on AJBOutGameProxy_ResponseAPI_Tenpo_GameSetting");
static_assert(offsetof(AJBOutGameProxy_ResponseAPI_Tenpo_GameSetting, Msg) == 0x000000, "Member 'AJBOutGameProxy_ResponseAPI_Tenpo_GameSetting::Msg' has a wrong offset!");

// Function AJB.AJBOutGameProxy.ResponseAPI_Tenpo_GetRoomInfo
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_ResponseAPI_Tenpo_GetRoomInfo final
{
public:
	class UNetMessage*                            Msg;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_ResponseAPI_Tenpo_GetRoomInfo) == 0x000008, "Wrong alignment on AJBOutGameProxy_ResponseAPI_Tenpo_GetRoomInfo");
static_assert(sizeof(AJBOutGameProxy_ResponseAPI_Tenpo_GetRoomInfo) == 0x000008, "Wrong size on AJBOutGameProxy_ResponseAPI_Tenpo_GetRoomInfo");
static_assert(offsetof(AJBOutGameProxy_ResponseAPI_Tenpo_GetRoomInfo, Msg) == 0x000000, "Member 'AJBOutGameProxy_ResponseAPI_Tenpo_GetRoomInfo::Msg' has a wrong offset!");

// Function AJB.AJBOutGameProxy.ResponseAPI_Tenpo_Logined
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_ResponseAPI_Tenpo_Logined final
{
public:
	class UNetMessage*                            Msg;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_ResponseAPI_Tenpo_Logined) == 0x000008, "Wrong alignment on AJBOutGameProxy_ResponseAPI_Tenpo_Logined");
static_assert(sizeof(AJBOutGameProxy_ResponseAPI_Tenpo_Logined) == 0x000008, "Wrong size on AJBOutGameProxy_ResponseAPI_Tenpo_Logined");
static_assert(offsetof(AJBOutGameProxy_ResponseAPI_Tenpo_Logined, Msg) == 0x000000, "Member 'AJBOutGameProxy_ResponseAPI_Tenpo_Logined::Msg' has a wrong offset!");

// Function AJB.AJBOutGameProxy.ResponseAPI_Tenpo_Matching
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_ResponseAPI_Tenpo_Matching final
{
public:
	class UNetMessage*                            Msg;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_ResponseAPI_Tenpo_Matching) == 0x000008, "Wrong alignment on AJBOutGameProxy_ResponseAPI_Tenpo_Matching");
static_assert(sizeof(AJBOutGameProxy_ResponseAPI_Tenpo_Matching) == 0x000008, "Wrong size on AJBOutGameProxy_ResponseAPI_Tenpo_Matching");
static_assert(offsetof(AJBOutGameProxy_ResponseAPI_Tenpo_Matching, Msg) == 0x000000, "Member 'AJBOutGameProxy_ResponseAPI_Tenpo_Matching::Msg' has a wrong offset!");

// Function AJB.AJBOutGameProxy.SetOutGameProxyState
// 0x0001 (0x0001 - 0x0000)
struct AJBOutGameProxy_SetOutGameProxyState final
{
public:
	EOutGameProxyState                            State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_SetOutGameProxyState) == 0x000001, "Wrong alignment on AJBOutGameProxy_SetOutGameProxyState");
static_assert(sizeof(AJBOutGameProxy_SetOutGameProxyState) == 0x000001, "Wrong size on AJBOutGameProxy_SetOutGameProxyState");
static_assert(offsetof(AJBOutGameProxy_SetOutGameProxyState, State) == 0x000000, "Member 'AJBOutGameProxy_SetOutGameProxyState::State' has a wrong offset!");

// Function AJB.AJBOutGameProxy.SetReconnectRetryProtocol
// 0x0001 (0x0001 - 0x0000)
struct AJBOutGameProxy_SetReconnectRetryProtocol final
{
public:
	EReconnectRetryProtocol                       RequestProtocol;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_SetReconnectRetryProtocol) == 0x000001, "Wrong alignment on AJBOutGameProxy_SetReconnectRetryProtocol");
static_assert(sizeof(AJBOutGameProxy_SetReconnectRetryProtocol) == 0x000001, "Wrong size on AJBOutGameProxy_SetReconnectRetryProtocol");
static_assert(offsetof(AJBOutGameProxy_SetReconnectRetryProtocol, RequestProtocol) == 0x000000, "Member 'AJBOutGameProxy_SetReconnectRetryProtocol::RequestProtocol' has a wrong offset!");

// Function AJB.AJBOutGameProxy.SetSolvedProtocol
// 0x0001 (0x0001 - 0x0000)
struct AJBOutGameProxy_SetSolvedProtocol final
{
public:
	EReconnectRetryProtocol                       RequestProtocol;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_SetSolvedProtocol) == 0x000001, "Wrong alignment on AJBOutGameProxy_SetSolvedProtocol");
static_assert(sizeof(AJBOutGameProxy_SetSolvedProtocol) == 0x000001, "Wrong size on AJBOutGameProxy_SetSolvedProtocol");
static_assert(offsetof(AJBOutGameProxy_SetSolvedProtocol, RequestProtocol) == 0x000000, "Member 'AJBOutGameProxy_SetSolvedProtocol::RequestProtocol' has a wrong offset!");

// Function AJB.AJBOutGameProxy.StartProtocolRequestTimeOut
// 0x0008 (0x0008 - 0x0000)
struct AJBOutGameProxy_StartProtocolRequestTimeOut final
{
public:
	int32                                         ProtocolID;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeOutSecond;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBOutGameProxy_StartProtocolRequestTimeOut) == 0x000004, "Wrong alignment on AJBOutGameProxy_StartProtocolRequestTimeOut");
static_assert(sizeof(AJBOutGameProxy_StartProtocolRequestTimeOut) == 0x000008, "Wrong size on AJBOutGameProxy_StartProtocolRequestTimeOut");
static_assert(offsetof(AJBOutGameProxy_StartProtocolRequestTimeOut, ProtocolID) == 0x000000, "Member 'AJBOutGameProxy_StartProtocolRequestTimeOut::ProtocolID' has a wrong offset!");
static_assert(offsetof(AJBOutGameProxy_StartProtocolRequestTimeOut, TimeOutSecond) == 0x000004, "Member 'AJBOutGameProxy_StartProtocolRequestTimeOut::TimeOutSecond' has a wrong offset!");

// Function AJB.AJBOutGameProxy.TryGetPartnerMatchingPlayerInfo
// 0x0090 (0x0090 - 0x0000)
struct AJBOutGameProxy_TryGetPartnerMatchingPlayerInfo final
{
public:
	struct FMatchingPlayerInfo                    PairMatchingPlayerInfo;                            // 0x0000(0x0088)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBOutGameProxy_TryGetPartnerMatchingPlayerInfo) == 0x000008, "Wrong alignment on AJBOutGameProxy_TryGetPartnerMatchingPlayerInfo");
static_assert(sizeof(AJBOutGameProxy_TryGetPartnerMatchingPlayerInfo) == 0x000090, "Wrong size on AJBOutGameProxy_TryGetPartnerMatchingPlayerInfo");
static_assert(offsetof(AJBOutGameProxy_TryGetPartnerMatchingPlayerInfo, PairMatchingPlayerInfo) == 0x000000, "Member 'AJBOutGameProxy_TryGetPartnerMatchingPlayerInfo::PairMatchingPlayerInfo' has a wrong offset!");
static_assert(offsetof(AJBOutGameProxy_TryGetPartnerMatchingPlayerInfo, ReturnValue) == 0x000088, "Member 'AJBOutGameProxy_TryGetPartnerMatchingPlayerInfo::ReturnValue' has a wrong offset!");

// Function AJB.AJBParamAccessor.AssignParamsFromContentArray
// 0x0028 (0x0028 - 0x0000)
struct AJBParamAccessor_AssignParamsFromContentArray final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ClassRef;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Object;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Filename;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArrayIndex;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBParamAccessor_AssignParamsFromContentArray) == 0x000008, "Wrong alignment on AJBParamAccessor_AssignParamsFromContentArray");
static_assert(sizeof(AJBParamAccessor_AssignParamsFromContentArray) == 0x000028, "Wrong size on AJBParamAccessor_AssignParamsFromContentArray");
static_assert(offsetof(AJBParamAccessor_AssignParamsFromContentArray, WorldContextObject) == 0x000000, "Member 'AJBParamAccessor_AssignParamsFromContentArray::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBParamAccessor_AssignParamsFromContentArray, ClassRef) == 0x000008, "Member 'AJBParamAccessor_AssignParamsFromContentArray::ClassRef' has a wrong offset!");
static_assert(offsetof(AJBParamAccessor_AssignParamsFromContentArray, Object) == 0x000010, "Member 'AJBParamAccessor_AssignParamsFromContentArray::Object' has a wrong offset!");
static_assert(offsetof(AJBParamAccessor_AssignParamsFromContentArray, Filename) == 0x000018, "Member 'AJBParamAccessor_AssignParamsFromContentArray::Filename' has a wrong offset!");
static_assert(offsetof(AJBParamAccessor_AssignParamsFromContentArray, ArrayIndex) == 0x000020, "Member 'AJBParamAccessor_AssignParamsFromContentArray::ArrayIndex' has a wrong offset!");

// Function AJB.AJBParamAccessor.AssignParamsFromContentMap
// 0x0028 (0x0028 - 0x0000)
struct AJBParamAccessor_AssignParamsFromContentMap final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ClassRef;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Object;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Filename;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ContentName;                                       // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBParamAccessor_AssignParamsFromContentMap) == 0x000008, "Wrong alignment on AJBParamAccessor_AssignParamsFromContentMap");
static_assert(sizeof(AJBParamAccessor_AssignParamsFromContentMap) == 0x000028, "Wrong size on AJBParamAccessor_AssignParamsFromContentMap");
static_assert(offsetof(AJBParamAccessor_AssignParamsFromContentMap, WorldContextObject) == 0x000000, "Member 'AJBParamAccessor_AssignParamsFromContentMap::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBParamAccessor_AssignParamsFromContentMap, ClassRef) == 0x000008, "Member 'AJBParamAccessor_AssignParamsFromContentMap::ClassRef' has a wrong offset!");
static_assert(offsetof(AJBParamAccessor_AssignParamsFromContentMap, Object) == 0x000010, "Member 'AJBParamAccessor_AssignParamsFromContentMap::Object' has a wrong offset!");
static_assert(offsetof(AJBParamAccessor_AssignParamsFromContentMap, Filename) == 0x000018, "Member 'AJBParamAccessor_AssignParamsFromContentMap::Filename' has a wrong offset!");
static_assert(offsetof(AJBParamAccessor_AssignParamsFromContentMap, ContentName) == 0x000020, "Member 'AJBParamAccessor_AssignParamsFromContentMap::ContentName' has a wrong offset!");

// Function AJB.AJBParamAccessor.AssignParamsFromDefaultContent
// 0x0020 (0x0020 - 0x0000)
struct AJBParamAccessor_AssignParamsFromDefaultContent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ClassRef;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Object;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Filename;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBParamAccessor_AssignParamsFromDefaultContent) == 0x000008, "Wrong alignment on AJBParamAccessor_AssignParamsFromDefaultContent");
static_assert(sizeof(AJBParamAccessor_AssignParamsFromDefaultContent) == 0x000020, "Wrong size on AJBParamAccessor_AssignParamsFromDefaultContent");
static_assert(offsetof(AJBParamAccessor_AssignParamsFromDefaultContent, WorldContextObject) == 0x000000, "Member 'AJBParamAccessor_AssignParamsFromDefaultContent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBParamAccessor_AssignParamsFromDefaultContent, ClassRef) == 0x000008, "Member 'AJBParamAccessor_AssignParamsFromDefaultContent::ClassRef' has a wrong offset!");
static_assert(offsetof(AJBParamAccessor_AssignParamsFromDefaultContent, Object) == 0x000010, "Member 'AJBParamAccessor_AssignParamsFromDefaultContent::Object' has a wrong offset!");
static_assert(offsetof(AJBParamAccessor_AssignParamsFromDefaultContent, Filename) == 0x000018, "Member 'AJBParamAccessor_AssignParamsFromDefaultContent::Filename' has a wrong offset!");

// Function AJB.AJBParamAccessor.GetParamContentArray
// 0x0020 (0x0020 - 0x0000)
struct AJBParamAccessor_GetParamContentArray final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Filename;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArrayIndex;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBParamContent*                       ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBParamAccessor_GetParamContentArray) == 0x000008, "Wrong alignment on AJBParamAccessor_GetParamContentArray");
static_assert(sizeof(AJBParamAccessor_GetParamContentArray) == 0x000020, "Wrong size on AJBParamAccessor_GetParamContentArray");
static_assert(offsetof(AJBParamAccessor_GetParamContentArray, WorldContextObject) == 0x000000, "Member 'AJBParamAccessor_GetParamContentArray::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBParamAccessor_GetParamContentArray, Filename) == 0x000008, "Member 'AJBParamAccessor_GetParamContentArray::Filename' has a wrong offset!");
static_assert(offsetof(AJBParamAccessor_GetParamContentArray, ArrayIndex) == 0x000010, "Member 'AJBParamAccessor_GetParamContentArray::ArrayIndex' has a wrong offset!");
static_assert(offsetof(AJBParamAccessor_GetParamContentArray, ReturnValue) == 0x000018, "Member 'AJBParamAccessor_GetParamContentArray::ReturnValue' has a wrong offset!");

// Function AJB.AJBParamAccessor.GetParamContentMap
// 0x0020 (0x0020 - 0x0000)
struct AJBParamAccessor_GetParamContentMap final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Filename;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ContentName;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAJBParamContent*                       ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBParamAccessor_GetParamContentMap) == 0x000008, "Wrong alignment on AJBParamAccessor_GetParamContentMap");
static_assert(sizeof(AJBParamAccessor_GetParamContentMap) == 0x000020, "Wrong size on AJBParamAccessor_GetParamContentMap");
static_assert(offsetof(AJBParamAccessor_GetParamContentMap, WorldContextObject) == 0x000000, "Member 'AJBParamAccessor_GetParamContentMap::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBParamAccessor_GetParamContentMap, Filename) == 0x000008, "Member 'AJBParamAccessor_GetParamContentMap::Filename' has a wrong offset!");
static_assert(offsetof(AJBParamAccessor_GetParamContentMap, ContentName) == 0x000010, "Member 'AJBParamAccessor_GetParamContentMap::ContentName' has a wrong offset!");
static_assert(offsetof(AJBParamAccessor_GetParamContentMap, ReturnValue) == 0x000018, "Member 'AJBParamAccessor_GetParamContentMap::ReturnValue' has a wrong offset!");

// Function AJB.AJBParamAccessor.GetParamDefaultContent
// 0x0018 (0x0018 - 0x0000)
struct AJBParamAccessor_GetParamDefaultContent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Filename;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAJBParamContent*                       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBParamAccessor_GetParamDefaultContent) == 0x000008, "Wrong alignment on AJBParamAccessor_GetParamDefaultContent");
static_assert(sizeof(AJBParamAccessor_GetParamDefaultContent) == 0x000018, "Wrong size on AJBParamAccessor_GetParamDefaultContent");
static_assert(offsetof(AJBParamAccessor_GetParamDefaultContent, WorldContextObject) == 0x000000, "Member 'AJBParamAccessor_GetParamDefaultContent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBParamAccessor_GetParamDefaultContent, Filename) == 0x000008, "Member 'AJBParamAccessor_GetParamDefaultContent::Filename' has a wrong offset!");
static_assert(offsetof(AJBParamAccessor_GetParamDefaultContent, ReturnValue) == 0x000010, "Member 'AJBParamAccessor_GetParamDefaultContent::ReturnValue' has a wrong offset!");

// Function AJB.AJBParamAccessor.GetParamFile
// 0x0018 (0x0018 - 0x0000)
struct AJBParamAccessor_GetParamFile final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Filename;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAJBParamFile*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBParamAccessor_GetParamFile) == 0x000008, "Wrong alignment on AJBParamAccessor_GetParamFile");
static_assert(sizeof(AJBParamAccessor_GetParamFile) == 0x000018, "Wrong size on AJBParamAccessor_GetParamFile");
static_assert(offsetof(AJBParamAccessor_GetParamFile, WorldContextObject) == 0x000000, "Member 'AJBParamAccessor_GetParamFile::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBParamAccessor_GetParamFile, Filename) == 0x000008, "Member 'AJBParamAccessor_GetParamFile::Filename' has a wrong offset!");
static_assert(offsetof(AJBParamAccessor_GetParamFile, ReturnValue) == 0x000010, "Member 'AJBParamAccessor_GetParamFile::ReturnValue' has a wrong offset!");

// Function AJB.AJBParamContent.Contains
// 0x0010 (0x0010 - 0x0000)
struct AJBParamContent_Contains final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBParamContent_Contains) == 0x000004, "Wrong alignment on AJBParamContent_Contains");
static_assert(sizeof(AJBParamContent_Contains) == 0x000010, "Wrong size on AJBParamContent_Contains");
static_assert(offsetof(AJBParamContent_Contains, Name_0) == 0x000000, "Member 'AJBParamContent_Contains::Name_0' has a wrong offset!");
static_assert(offsetof(AJBParamContent_Contains, ReturnValue) == 0x000008, "Member 'AJBParamContent_Contains::ReturnValue' has a wrong offset!");

// Function AJB.AJBParamContent.GetBoolValue
// 0x0010 (0x0010 - 0x0000)
struct AJBParamContent_GetBoolValue final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBParamContent_GetBoolValue) == 0x000004, "Wrong alignment on AJBParamContent_GetBoolValue");
static_assert(sizeof(AJBParamContent_GetBoolValue) == 0x000010, "Wrong size on AJBParamContent_GetBoolValue");
static_assert(offsetof(AJBParamContent_GetBoolValue, Name_0) == 0x000000, "Member 'AJBParamContent_GetBoolValue::Name_0' has a wrong offset!");
static_assert(offsetof(AJBParamContent_GetBoolValue, ReturnValue) == 0x000008, "Member 'AJBParamContent_GetBoolValue::ReturnValue' has a wrong offset!");

// Function AJB.AJBParamContent.GetFloatValue
// 0x0010 (0x0010 - 0x0000)
struct AJBParamContent_GetFloatValue final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBParamContent_GetFloatValue) == 0x000004, "Wrong alignment on AJBParamContent_GetFloatValue");
static_assert(sizeof(AJBParamContent_GetFloatValue) == 0x000010, "Wrong size on AJBParamContent_GetFloatValue");
static_assert(offsetof(AJBParamContent_GetFloatValue, Name_0) == 0x000000, "Member 'AJBParamContent_GetFloatValue::Name_0' has a wrong offset!");
static_assert(offsetof(AJBParamContent_GetFloatValue, ReturnValue) == 0x000008, "Member 'AJBParamContent_GetFloatValue::ReturnValue' has a wrong offset!");

// Function AJB.AJBParamContent.GetStringValue
// 0x0018 (0x0018 - 0x0000)
struct AJBParamContent_GetStringValue final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBParamContent_GetStringValue) == 0x000008, "Wrong alignment on AJBParamContent_GetStringValue");
static_assert(sizeof(AJBParamContent_GetStringValue) == 0x000018, "Wrong size on AJBParamContent_GetStringValue");
static_assert(offsetof(AJBParamContent_GetStringValue, Name_0) == 0x000000, "Member 'AJBParamContent_GetStringValue::Name_0' has a wrong offset!");
static_assert(offsetof(AJBParamContent_GetStringValue, ReturnValue) == 0x000008, "Member 'AJBParamContent_GetStringValue::ReturnValue' has a wrong offset!");

// Function AJB.AJBParamContent.GetVectorValue
// 0x0018 (0x0018 - 0x0000)
struct AJBParamContent_GetVectorValue final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBParamContent_GetVectorValue) == 0x000004, "Wrong alignment on AJBParamContent_GetVectorValue");
static_assert(sizeof(AJBParamContent_GetVectorValue) == 0x000018, "Wrong size on AJBParamContent_GetVectorValue");
static_assert(offsetof(AJBParamContent_GetVectorValue, Name_0) == 0x000000, "Member 'AJBParamContent_GetVectorValue::Name_0' has a wrong offset!");
static_assert(offsetof(AJBParamContent_GetVectorValue, ReturnValue) == 0x000008, "Member 'AJBParamContent_GetVectorValue::ReturnValue' has a wrong offset!");

// Function AJB.AJBParamFile.Contains
// 0x0010 (0x0010 - 0x0000)
struct AJBParamFile_Contains final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBParamFile_Contains) == 0x000004, "Wrong alignment on AJBParamFile_Contains");
static_assert(sizeof(AJBParamFile_Contains) == 0x000010, "Wrong size on AJBParamFile_Contains");
static_assert(offsetof(AJBParamFile_Contains, Name_0) == 0x000000, "Member 'AJBParamFile_Contains::Name_0' has a wrong offset!");
static_assert(offsetof(AJBParamFile_Contains, ReturnValue) == 0x000008, "Member 'AJBParamFile_Contains::ReturnValue' has a wrong offset!");

// Function AJB.AJBParamFile.ContentNum
// 0x0004 (0x0004 - 0x0000)
struct AJBParamFile_ContentNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBParamFile_ContentNum) == 0x000004, "Wrong alignment on AJBParamFile_ContentNum");
static_assert(sizeof(AJBParamFile_ContentNum) == 0x000004, "Wrong size on AJBParamFile_ContentNum");
static_assert(offsetof(AJBParamFile_ContentNum, ReturnValue) == 0x000000, "Member 'AJBParamFile_ContentNum::ReturnValue' has a wrong offset!");

// Function AJB.AJBParamFile.GetContentArray
// 0x0010 (0x0010 - 0x0000)
struct AJBParamFile_GetContentArray final
{
public:
	int32                                         ArrayIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBParamContent*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBParamFile_GetContentArray) == 0x000008, "Wrong alignment on AJBParamFile_GetContentArray");
static_assert(sizeof(AJBParamFile_GetContentArray) == 0x000010, "Wrong size on AJBParamFile_GetContentArray");
static_assert(offsetof(AJBParamFile_GetContentArray, ArrayIndex) == 0x000000, "Member 'AJBParamFile_GetContentArray::ArrayIndex' has a wrong offset!");
static_assert(offsetof(AJBParamFile_GetContentArray, ReturnValue) == 0x000008, "Member 'AJBParamFile_GetContentArray::ReturnValue' has a wrong offset!");

// Function AJB.AJBParamFile.GetContentMap
// 0x0010 (0x0010 - 0x0000)
struct AJBParamFile_GetContentMap final
{
public:
	class FName                                   ContentName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAJBParamContent*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBParamFile_GetContentMap) == 0x000008, "Wrong alignment on AJBParamFile_GetContentMap");
static_assert(sizeof(AJBParamFile_GetContentMap) == 0x000010, "Wrong size on AJBParamFile_GetContentMap");
static_assert(offsetof(AJBParamFile_GetContentMap, ContentName) == 0x000000, "Member 'AJBParamFile_GetContentMap::ContentName' has a wrong offset!");
static_assert(offsetof(AJBParamFile_GetContentMap, ReturnValue) == 0x000008, "Member 'AJBParamFile_GetContentMap::ReturnValue' has a wrong offset!");

// Function AJB.AJBParamFile.GetDefaultContent
// 0x0008 (0x0008 - 0x0000)
struct AJBParamFile_GetDefaultContent final
{
public:
	class UAJBParamContent*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBParamFile_GetDefaultContent) == 0x000008, "Wrong alignment on AJBParamFile_GetDefaultContent");
static_assert(sizeof(AJBParamFile_GetDefaultContent) == 0x000008, "Wrong size on AJBParamFile_GetDefaultContent");
static_assert(offsetof(AJBParamFile_GetDefaultContent, ReturnValue) == 0x000000, "Member 'AJBParamFile_GetDefaultContent::ReturnValue' has a wrong offset!");

// Function AJB.AJBParamRepos.AssignParamsFromContentArray
// 0x0020 (0x0020 - 0x0000)
struct AJBParamRepos_AssignParamsFromContentArray final
{
public:
	class UClass*                                 ClassRef;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Object;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Filename;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArrayIndex;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBParamRepos_AssignParamsFromContentArray) == 0x000008, "Wrong alignment on AJBParamRepos_AssignParamsFromContentArray");
static_assert(sizeof(AJBParamRepos_AssignParamsFromContentArray) == 0x000020, "Wrong size on AJBParamRepos_AssignParamsFromContentArray");
static_assert(offsetof(AJBParamRepos_AssignParamsFromContentArray, ClassRef) == 0x000000, "Member 'AJBParamRepos_AssignParamsFromContentArray::ClassRef' has a wrong offset!");
static_assert(offsetof(AJBParamRepos_AssignParamsFromContentArray, Object) == 0x000008, "Member 'AJBParamRepos_AssignParamsFromContentArray::Object' has a wrong offset!");
static_assert(offsetof(AJBParamRepos_AssignParamsFromContentArray, Filename) == 0x000010, "Member 'AJBParamRepos_AssignParamsFromContentArray::Filename' has a wrong offset!");
static_assert(offsetof(AJBParamRepos_AssignParamsFromContentArray, ArrayIndex) == 0x000018, "Member 'AJBParamRepos_AssignParamsFromContentArray::ArrayIndex' has a wrong offset!");

// Function AJB.AJBParamRepos.AssignParamsFromContentMap
// 0x0020 (0x0020 - 0x0000)
struct AJBParamRepos_AssignParamsFromContentMap final
{
public:
	class UClass*                                 ClassRef;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Object;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Filename;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ContentName;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBParamRepos_AssignParamsFromContentMap) == 0x000008, "Wrong alignment on AJBParamRepos_AssignParamsFromContentMap");
static_assert(sizeof(AJBParamRepos_AssignParamsFromContentMap) == 0x000020, "Wrong size on AJBParamRepos_AssignParamsFromContentMap");
static_assert(offsetof(AJBParamRepos_AssignParamsFromContentMap, ClassRef) == 0x000000, "Member 'AJBParamRepos_AssignParamsFromContentMap::ClassRef' has a wrong offset!");
static_assert(offsetof(AJBParamRepos_AssignParamsFromContentMap, Object) == 0x000008, "Member 'AJBParamRepos_AssignParamsFromContentMap::Object' has a wrong offset!");
static_assert(offsetof(AJBParamRepos_AssignParamsFromContentMap, Filename) == 0x000010, "Member 'AJBParamRepos_AssignParamsFromContentMap::Filename' has a wrong offset!");
static_assert(offsetof(AJBParamRepos_AssignParamsFromContentMap, ContentName) == 0x000018, "Member 'AJBParamRepos_AssignParamsFromContentMap::ContentName' has a wrong offset!");

// Function AJB.AJBParamRepos.AssignParamsFromDefaultContent
// 0x0018 (0x0018 - 0x0000)
struct AJBParamRepos_AssignParamsFromDefaultContent final
{
public:
	class UClass*                                 ClassRef;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Object;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Filename;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBParamRepos_AssignParamsFromDefaultContent) == 0x000008, "Wrong alignment on AJBParamRepos_AssignParamsFromDefaultContent");
static_assert(sizeof(AJBParamRepos_AssignParamsFromDefaultContent) == 0x000018, "Wrong size on AJBParamRepos_AssignParamsFromDefaultContent");
static_assert(offsetof(AJBParamRepos_AssignParamsFromDefaultContent, ClassRef) == 0x000000, "Member 'AJBParamRepos_AssignParamsFromDefaultContent::ClassRef' has a wrong offset!");
static_assert(offsetof(AJBParamRepos_AssignParamsFromDefaultContent, Object) == 0x000008, "Member 'AJBParamRepos_AssignParamsFromDefaultContent::Object' has a wrong offset!");
static_assert(offsetof(AJBParamRepos_AssignParamsFromDefaultContent, Filename) == 0x000010, "Member 'AJBParamRepos_AssignParamsFromDefaultContent::Filename' has a wrong offset!");

// Function AJB.AJBParamRepos.CheckExistParamFile
// 0x0018 (0x0018 - 0x0000)
struct AJBParamRepos_CheckExistParamFile final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBParamRepos_CheckExistParamFile) == 0x000008, "Wrong alignment on AJBParamRepos_CheckExistParamFile");
static_assert(sizeof(AJBParamRepos_CheckExistParamFile) == 0x000018, "Wrong size on AJBParamRepos_CheckExistParamFile");
static_assert(offsetof(AJBParamRepos_CheckExistParamFile, Filename) == 0x000000, "Member 'AJBParamRepos_CheckExistParamFile::Filename' has a wrong offset!");
static_assert(offsetof(AJBParamRepos_CheckExistParamFile, ReturnValue) == 0x000010, "Member 'AJBParamRepos_CheckExistParamFile::ReturnValue' has a wrong offset!");

// Function AJB.AJBParamRepos.LoadParamFile
// 0x0010 (0x0010 - 0x0000)
struct AJBParamRepos_LoadParamFile final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBParamRepos_LoadParamFile) == 0x000008, "Wrong alignment on AJBParamRepos_LoadParamFile");
static_assert(sizeof(AJBParamRepos_LoadParamFile) == 0x000010, "Wrong size on AJBParamRepos_LoadParamFile");
static_assert(offsetof(AJBParamRepos_LoadParamFile, Filename) == 0x000000, "Member 'AJBParamRepos_LoadParamFile::Filename' has a wrong offset!");

// Function AJB.AJBParamRepos.GetFile
// 0x0010 (0x0010 - 0x0000)
struct AJBParamRepos_GetFile final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAJBParamFile*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBParamRepos_GetFile) == 0x000008, "Wrong alignment on AJBParamRepos_GetFile");
static_assert(sizeof(AJBParamRepos_GetFile) == 0x000010, "Wrong size on AJBParamRepos_GetFile");
static_assert(offsetof(AJBParamRepos_GetFile, Name_0) == 0x000000, "Member 'AJBParamRepos_GetFile::Name_0' has a wrong offset!");
static_assert(offsetof(AJBParamRepos_GetFile, ReturnValue) == 0x000008, "Member 'AJBParamRepos_GetFile::ReturnValue' has a wrong offset!");

// Function AJB.AJBPlayerInfoUtility.ClearResultAtTime
// 0x0008 (0x0008 - 0x0000)
struct AJBPlayerInfoUtility_ClearResultAtTime final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBPlayerInfoUtility_ClearResultAtTime) == 0x000008, "Wrong alignment on AJBPlayerInfoUtility_ClearResultAtTime");
static_assert(sizeof(AJBPlayerInfoUtility_ClearResultAtTime) == 0x000008, "Wrong size on AJBPlayerInfoUtility_ClearResultAtTime");
static_assert(offsetof(AJBPlayerInfoUtility_ClearResultAtTime, WorldContextObject) == 0x000000, "Member 'AJBPlayerInfoUtility_ClearResultAtTime::WorldContextObject' has a wrong offset!");

// Function AJB.AJBPlayerInfoUtility.ConvNumberHankakuToZenkaku
// 0x0020 (0x0020 - 0x0000)
struct AJBPlayerInfoUtility_ConvNumberHankakuToZenkaku final
{
public:
	class FString                                 Source;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBPlayerInfoUtility_ConvNumberHankakuToZenkaku) == 0x000008, "Wrong alignment on AJBPlayerInfoUtility_ConvNumberHankakuToZenkaku");
static_assert(sizeof(AJBPlayerInfoUtility_ConvNumberHankakuToZenkaku) == 0x000020, "Wrong size on AJBPlayerInfoUtility_ConvNumberHankakuToZenkaku");
static_assert(offsetof(AJBPlayerInfoUtility_ConvNumberHankakuToZenkaku, Source) == 0x000000, "Member 'AJBPlayerInfoUtility_ConvNumberHankakuToZenkaku::Source' has a wrong offset!");
static_assert(offsetof(AJBPlayerInfoUtility_ConvNumberHankakuToZenkaku, ReturnValue) == 0x000010, "Member 'AJBPlayerInfoUtility_ConvNumberHankakuToZenkaku::ReturnValue' has a wrong offset!");

// Function AJB.AJBPlayerInfoUtility.FixLogoutTime
// 0x0008 (0x0008 - 0x0000)
struct AJBPlayerInfoUtility_FixLogoutTime final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBPlayerInfoUtility_FixLogoutTime) == 0x000008, "Wrong alignment on AJBPlayerInfoUtility_FixLogoutTime");
static_assert(sizeof(AJBPlayerInfoUtility_FixLogoutTime) == 0x000008, "Wrong size on AJBPlayerInfoUtility_FixLogoutTime");
static_assert(offsetof(AJBPlayerInfoUtility_FixLogoutTime, WorldContextObject) == 0x000000, "Member 'AJBPlayerInfoUtility_FixLogoutTime::WorldContextObject' has a wrong offset!");

// Function AJB.AJBPlayerInfoUtility.GetNextExtendBPUnlockSecond
// 0x0010 (0x0010 - 0x0000)
struct AJBPlayerInfoUtility_GetNextExtendBPUnlockSecond final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBPlayerInfoUtility_GetNextExtendBPUnlockSecond) == 0x000008, "Wrong alignment on AJBPlayerInfoUtility_GetNextExtendBPUnlockSecond");
static_assert(sizeof(AJBPlayerInfoUtility_GetNextExtendBPUnlockSecond) == 0x000010, "Wrong size on AJBPlayerInfoUtility_GetNextExtendBPUnlockSecond");
static_assert(offsetof(AJBPlayerInfoUtility_GetNextExtendBPUnlockSecond, WorldContextObject) == 0x000000, "Member 'AJBPlayerInfoUtility_GetNextExtendBPUnlockSecond::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBPlayerInfoUtility_GetNextExtendBPUnlockSecond, ReturnValue) == 0x000008, "Member 'AJBPlayerInfoUtility_GetNextExtendBPUnlockSecond::ReturnValue' has a wrong offset!");

// Function AJB.AJBPlayerInfoUtility.MakeAutoPlayerName
// 0x0028 (0x0028 - 0x0000)
struct AJBPlayerInfoUtility_MakeAutoPlayerName final
{
public:
	class FString                                 NamePrefix;                                        // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAvoidNG;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSerialNumber;                                  // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBPlayerInfoUtility_MakeAutoPlayerName) == 0x000008, "Wrong alignment on AJBPlayerInfoUtility_MakeAutoPlayerName");
static_assert(sizeof(AJBPlayerInfoUtility_MakeAutoPlayerName) == 0x000028, "Wrong size on AJBPlayerInfoUtility_MakeAutoPlayerName");
static_assert(offsetof(AJBPlayerInfoUtility_MakeAutoPlayerName, NamePrefix) == 0x000000, "Member 'AJBPlayerInfoUtility_MakeAutoPlayerName::NamePrefix' has a wrong offset!");
static_assert(offsetof(AJBPlayerInfoUtility_MakeAutoPlayerName, bAvoidNG) == 0x000010, "Member 'AJBPlayerInfoUtility_MakeAutoPlayerName::bAvoidNG' has a wrong offset!");
static_assert(offsetof(AJBPlayerInfoUtility_MakeAutoPlayerName, bUseSerialNumber) == 0x000011, "Member 'AJBPlayerInfoUtility_MakeAutoPlayerName::bUseSerialNumber' has a wrong offset!");
static_assert(offsetof(AJBPlayerInfoUtility_MakeAutoPlayerName, ReturnValue) == 0x000018, "Member 'AJBPlayerInfoUtility_MakeAutoPlayerName::ReturnValue' has a wrong offset!");

// Function AJB.AJBPlayerInfoUtility.SetBotFMatchingPlayerInfo
// 0x0098 (0x0098 - 0x0000)
struct AJBPlayerInfoUtility_SetBotFMatchingPlayerInfo final
{
public:
	struct FMatchingPlayerInfo                    OutMatchingPlayerInfo;                             // 0x0000(0x0088)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FString                                 UserID;                                            // 0x0088(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBPlayerInfoUtility_SetBotFMatchingPlayerInfo) == 0x000008, "Wrong alignment on AJBPlayerInfoUtility_SetBotFMatchingPlayerInfo");
static_assert(sizeof(AJBPlayerInfoUtility_SetBotFMatchingPlayerInfo) == 0x000098, "Wrong size on AJBPlayerInfoUtility_SetBotFMatchingPlayerInfo");
static_assert(offsetof(AJBPlayerInfoUtility_SetBotFMatchingPlayerInfo, OutMatchingPlayerInfo) == 0x000000, "Member 'AJBPlayerInfoUtility_SetBotFMatchingPlayerInfo::OutMatchingPlayerInfo' has a wrong offset!");
static_assert(offsetof(AJBPlayerInfoUtility_SetBotFMatchingPlayerInfo, UserID) == 0x000088, "Member 'AJBPlayerInfoUtility_SetBotFMatchingPlayerInfo::UserID' has a wrong offset!");

// Function AJB.AJBPrimaryDataAsset.GetIdentifierString
// 0x0010 (0x0010 - 0x0000)
struct AJBPrimaryDataAsset_GetIdentifierString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBPrimaryDataAsset_GetIdentifierString) == 0x000008, "Wrong alignment on AJBPrimaryDataAsset_GetIdentifierString");
static_assert(sizeof(AJBPrimaryDataAsset_GetIdentifierString) == 0x000010, "Wrong size on AJBPrimaryDataAsset_GetIdentifierString");
static_assert(offsetof(AJBPrimaryDataAsset_GetIdentifierString, ReturnValue) == 0x000000, "Member 'AJBPrimaryDataAsset_GetIdentifierString::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.AppendDebugTags
// 0x0020 (0x0020 - 0x0000)
struct AJBSettings_AppendDebugTags final
{
public:
	struct FGameplayTagContainer                  TagContainerIn;                                    // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_AppendDebugTags) == 0x000008, "Wrong alignment on AJBSettings_AppendDebugTags");
static_assert(sizeof(AJBSettings_AppendDebugTags) == 0x000020, "Wrong size on AJBSettings_AppendDebugTags");
static_assert(offsetof(AJBSettings_AppendDebugTags, TagContainerIn) == 0x000000, "Member 'AJBSettings_AppendDebugTags::TagContainerIn' has a wrong offset!");

// Function AJB.AJBSettings.GetAllowCreateMovieBlocking
// 0x0001 (0x0001 - 0x0000)
struct AJBSettings_GetAllowCreateMovieBlocking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_GetAllowCreateMovieBlocking) == 0x000001, "Wrong alignment on AJBSettings_GetAllowCreateMovieBlocking");
static_assert(sizeof(AJBSettings_GetAllowCreateMovieBlocking) == 0x000001, "Wrong size on AJBSettings_GetAllowCreateMovieBlocking");
static_assert(offsetof(AJBSettings_GetAllowCreateMovieBlocking, ReturnValue) == 0x000000, "Member 'AJBSettings_GetAllowCreateMovieBlocking::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.GetAutoPlayTestMode
// 0x0004 (0x0004 - 0x0000)
struct AJBSettings_GetAutoPlayTestMode final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_GetAutoPlayTestMode) == 0x000004, "Wrong alignment on AJBSettings_GetAutoPlayTestMode");
static_assert(sizeof(AJBSettings_GetAutoPlayTestMode) == 0x000004, "Wrong size on AJBSettings_GetAutoPlayTestMode");
static_assert(offsetof(AJBSettings_GetAutoPlayTestMode, ReturnValue) == 0x000000, "Member 'AJBSettings_GetAutoPlayTestMode::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.GetAvailableAllCharacters
// 0x0001 (0x0001 - 0x0000)
struct AJBSettings_GetAvailableAllCharacters final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_GetAvailableAllCharacters) == 0x000001, "Wrong alignment on AJBSettings_GetAvailableAllCharacters");
static_assert(sizeof(AJBSettings_GetAvailableAllCharacters) == 0x000001, "Wrong size on AJBSettings_GetAvailableAllCharacters");
static_assert(offsetof(AJBSettings_GetAvailableAllCharacters, ReturnValue) == 0x000000, "Member 'AJBSettings_GetAvailableAllCharacters::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.GetAvailableAllStages
// 0x0001 (0x0001 - 0x0000)
struct AJBSettings_GetAvailableAllStages final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_GetAvailableAllStages) == 0x000001, "Wrong alignment on AJBSettings_GetAvailableAllStages");
static_assert(sizeof(AJBSettings_GetAvailableAllStages) == 0x000001, "Wrong size on AJBSettings_GetAvailableAllStages");
static_assert(offsetof(AJBSettings_GetAvailableAllStages, ReturnValue) == 0x000000, "Member 'AJBSettings_GetAvailableAllStages::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.GetChangeColorLivingPlayerCount
// 0x0004 (0x0004 - 0x0000)
struct AJBSettings_GetChangeColorLivingPlayerCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_GetChangeColorLivingPlayerCount) == 0x000004, "Wrong alignment on AJBSettings_GetChangeColorLivingPlayerCount");
static_assert(sizeof(AJBSettings_GetChangeColorLivingPlayerCount) == 0x000004, "Wrong size on AJBSettings_GetChangeColorLivingPlayerCount");
static_assert(offsetof(AJBSettings_GetChangeColorLivingPlayerCount, ReturnValue) == 0x000000, "Member 'AJBSettings_GetChangeColorLivingPlayerCount::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.GetContentRouterGatewayIP
// 0x0010 (0x0010 - 0x0000)
struct AJBSettings_GetContentRouterGatewayIP final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_GetContentRouterGatewayIP) == 0x000008, "Wrong alignment on AJBSettings_GetContentRouterGatewayIP");
static_assert(sizeof(AJBSettings_GetContentRouterGatewayIP) == 0x000010, "Wrong size on AJBSettings_GetContentRouterGatewayIP");
static_assert(offsetof(AJBSettings_GetContentRouterGatewayIP, ReturnValue) == 0x000000, "Member 'AJBSettings_GetContentRouterGatewayIP::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.GetDebugTags
// 0x0020 (0x0020 - 0x0000)
struct AJBSettings_GetDebugTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_GetDebugTags) == 0x000008, "Wrong alignment on AJBSettings_GetDebugTags");
static_assert(sizeof(AJBSettings_GetDebugTags) == 0x000020, "Wrong size on AJBSettings_GetDebugTags");
static_assert(offsetof(AJBSettings_GetDebugTags, ReturnValue) == 0x000000, "Member 'AJBSettings_GetDebugTags::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.GetDefaultCredit
// 0x0004 (0x0004 - 0x0000)
struct AJBSettings_GetDefaultCredit final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_GetDefaultCredit) == 0x000004, "Wrong alignment on AJBSettings_GetDefaultCredit");
static_assert(sizeof(AJBSettings_GetDefaultCredit) == 0x000004, "Wrong size on AJBSettings_GetDefaultCredit");
static_assert(offsetof(AJBSettings_GetDefaultCredit, ReturnValue) == 0x000000, "Member 'AJBSettings_GetDefaultCredit::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.GetDifficultyMaxNum
// 0x0004 (0x0004 - 0x0000)
struct AJBSettings_GetDifficultyMaxNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_GetDifficultyMaxNum) == 0x000004, "Wrong alignment on AJBSettings_GetDifficultyMaxNum");
static_assert(sizeof(AJBSettings_GetDifficultyMaxNum) == 0x000004, "Wrong size on AJBSettings_GetDifficultyMaxNum");
static_assert(offsetof(AJBSettings_GetDifficultyMaxNum, ReturnValue) == 0x000000, "Member 'AJBSettings_GetDifficultyMaxNum::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.GetEMoneyPrice
// 0x0004 (0x0004 - 0x0000)
struct AJBSettings_GetEMoneyPrice final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_GetEMoneyPrice) == 0x000004, "Wrong alignment on AJBSettings_GetEMoneyPrice");
static_assert(sizeof(AJBSettings_GetEMoneyPrice) == 0x000004, "Wrong size on AJBSettings_GetEMoneyPrice");
static_assert(offsetof(AJBSettings_GetEMoneyPrice, ReturnValue) == 0x000000, "Member 'AJBSettings_GetEMoneyPrice::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.GetEnableSkinCustomDebug
// 0x0001 (0x0001 - 0x0000)
struct AJBSettings_GetEnableSkinCustomDebug final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_GetEnableSkinCustomDebug) == 0x000001, "Wrong alignment on AJBSettings_GetEnableSkinCustomDebug");
static_assert(sizeof(AJBSettings_GetEnableSkinCustomDebug) == 0x000001, "Wrong size on AJBSettings_GetEnableSkinCustomDebug");
static_assert(offsetof(AJBSettings_GetEnableSkinCustomDebug, ReturnValue) == 0x000000, "Member 'AJBSettings_GetEnableSkinCustomDebug::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.GetHighlightVersion
// 0x0004 (0x0004 - 0x0000)
struct AJBSettings_GetHighlightVersion final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_GetHighlightVersion) == 0x000004, "Wrong alignment on AJBSettings_GetHighlightVersion");
static_assert(sizeof(AJBSettings_GetHighlightVersion) == 0x000004, "Wrong size on AJBSettings_GetHighlightVersion");
static_assert(offsetof(AJBSettings_GetHighlightVersion, ReturnValue) == 0x000000, "Member 'AJBSettings_GetHighlightVersion::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.GetInGameStartFadeInTime
// 0x0004 (0x0004 - 0x0000)
struct AJBSettings_GetInGameStartFadeInTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_GetInGameStartFadeInTime) == 0x000004, "Wrong alignment on AJBSettings_GetInGameStartFadeInTime");
static_assert(sizeof(AJBSettings_GetInGameStartFadeInTime) == 0x000004, "Wrong size on AJBSettings_GetInGameStartFadeInTime");
static_assert(offsetof(AJBSettings_GetInGameStartFadeInTime, ReturnValue) == 0x000000, "Member 'AJBSettings_GetInGameStartFadeInTime::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.GetInGameStartFadeOutTime
// 0x0004 (0x0004 - 0x0000)
struct AJBSettings_GetInGameStartFadeOutTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_GetInGameStartFadeOutTime) == 0x000004, "Wrong alignment on AJBSettings_GetInGameStartFadeOutTime");
static_assert(sizeof(AJBSettings_GetInGameStartFadeOutTime) == 0x000004, "Wrong size on AJBSettings_GetInGameStartFadeOutTime");
static_assert(offsetof(AJBSettings_GetInGameStartFadeOutTime, ReturnValue) == 0x000000, "Member 'AJBSettings_GetInGameStartFadeOutTime::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.GetJoystickLeftPlayHighInGame
// 0x0004 (0x0004 - 0x0000)
struct AJBSettings_GetJoystickLeftPlayHighInGame final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_GetJoystickLeftPlayHighInGame) == 0x000004, "Wrong alignment on AJBSettings_GetJoystickLeftPlayHighInGame");
static_assert(sizeof(AJBSettings_GetJoystickLeftPlayHighInGame) == 0x000004, "Wrong size on AJBSettings_GetJoystickLeftPlayHighInGame");
static_assert(offsetof(AJBSettings_GetJoystickLeftPlayHighInGame, ReturnValue) == 0x000000, "Member 'AJBSettings_GetJoystickLeftPlayHighInGame::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.GetJoystickRightPlayHighInGame
// 0x0004 (0x0004 - 0x0000)
struct AJBSettings_GetJoystickRightPlayHighInGame final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_GetJoystickRightPlayHighInGame) == 0x000004, "Wrong alignment on AJBSettings_GetJoystickRightPlayHighInGame");
static_assert(sizeof(AJBSettings_GetJoystickRightPlayHighInGame) == 0x000004, "Wrong size on AJBSettings_GetJoystickRightPlayHighInGame");
static_assert(offsetof(AJBSettings_GetJoystickRightPlayHighInGame, ReturnValue) == 0x000000, "Member 'AJBSettings_GetJoystickRightPlayHighInGame::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.GetMenuBGLevelName
// 0x0008 (0x0008 - 0x0000)
struct AJBSettings_GetMenuBGLevelName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_GetMenuBGLevelName) == 0x000004, "Wrong alignment on AJBSettings_GetMenuBGLevelName");
static_assert(sizeof(AJBSettings_GetMenuBGLevelName) == 0x000008, "Wrong size on AJBSettings_GetMenuBGLevelName");
static_assert(offsetof(AJBSettings_GetMenuBGLevelName, ReturnValue) == 0x000000, "Member 'AJBSettings_GetMenuBGLevelName::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.GetMUCHAServerLocalIP
// 0x0010 (0x0010 - 0x0000)
struct AJBSettings_GetMUCHAServerLocalIP final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_GetMUCHAServerLocalIP) == 0x000008, "Wrong alignment on AJBSettings_GetMUCHAServerLocalIP");
static_assert(sizeof(AJBSettings_GetMUCHAServerLocalIP) == 0x000010, "Wrong size on AJBSettings_GetMUCHAServerLocalIP");
static_assert(offsetof(AJBSettings_GetMUCHAServerLocalIP, ReturnValue) == 0x000000, "Member 'AJBSettings_GetMUCHAServerLocalIP::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.GetNetErrorComebackMap
// 0x0010 (0x0010 - 0x0000)
struct AJBSettings_GetNetErrorComebackMap final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_GetNetErrorComebackMap) == 0x000008, "Wrong alignment on AJBSettings_GetNetErrorComebackMap");
static_assert(sizeof(AJBSettings_GetNetErrorComebackMap) == 0x000010, "Wrong size on AJBSettings_GetNetErrorComebackMap");
static_assert(offsetof(AJBSettings_GetNetErrorComebackMap, ReturnValue) == 0x000000, "Member 'AJBSettings_GetNetErrorComebackMap::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.GetPlayerIconCabinetPath
// 0x0010 (0x0010 - 0x0000)
struct AJBSettings_GetPlayerIconCabinetPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_GetPlayerIconCabinetPath) == 0x000008, "Wrong alignment on AJBSettings_GetPlayerIconCabinetPath");
static_assert(sizeof(AJBSettings_GetPlayerIconCabinetPath) == 0x000010, "Wrong size on AJBSettings_GetPlayerIconCabinetPath");
static_assert(offsetof(AJBSettings_GetPlayerIconCabinetPath, ReturnValue) == 0x000000, "Member 'AJBSettings_GetPlayerIconCabinetPath::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.GetPlayerIconDevelopPath
// 0x0010 (0x0010 - 0x0000)
struct AJBSettings_GetPlayerIconDevelopPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_GetPlayerIconDevelopPath) == 0x000008, "Wrong alignment on AJBSettings_GetPlayerIconDevelopPath");
static_assert(sizeof(AJBSettings_GetPlayerIconDevelopPath) == 0x000010, "Wrong size on AJBSettings_GetPlayerIconDevelopPath");
static_assert(offsetof(AJBSettings_GetPlayerIconDevelopPath, ReturnValue) == 0x000000, "Member 'AJBSettings_GetPlayerIconDevelopPath::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.GetPlayerIconDistributionPath
// 0x0010 (0x0010 - 0x0000)
struct AJBSettings_GetPlayerIconDistributionPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_GetPlayerIconDistributionPath) == 0x000008, "Wrong alignment on AJBSettings_GetPlayerIconDistributionPath");
static_assert(sizeof(AJBSettings_GetPlayerIconDistributionPath) == 0x000010, "Wrong size on AJBSettings_GetPlayerIconDistributionPath");
static_assert(offsetof(AJBSettings_GetPlayerIconDistributionPath, ReturnValue) == 0x000000, "Member 'AJBSettings_GetPlayerIconDistributionPath::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.GetPlayerIconEditorPath
// 0x0010 (0x0010 - 0x0000)
struct AJBSettings_GetPlayerIconEditorPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_GetPlayerIconEditorPath) == 0x000008, "Wrong alignment on AJBSettings_GetPlayerIconEditorPath");
static_assert(sizeof(AJBSettings_GetPlayerIconEditorPath) == 0x000010, "Wrong size on AJBSettings_GetPlayerIconEditorPath");
static_assert(offsetof(AJBSettings_GetPlayerIconEditorPath, ReturnValue) == 0x000000, "Member 'AJBSettings_GetPlayerIconEditorPath::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.GetRewardPercentURL
// 0x0010 (0x0010 - 0x0000)
struct AJBSettings_GetRewardPercentURL final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_GetRewardPercentURL) == 0x000008, "Wrong alignment on AJBSettings_GetRewardPercentURL");
static_assert(sizeof(AJBSettings_GetRewardPercentURL) == 0x000010, "Wrong size on AJBSettings_GetRewardPercentURL");
static_assert(offsetof(AJBSettings_GetRewardPercentURL, ReturnValue) == 0x000000, "Member 'AJBSettings_GetRewardPercentURL::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.GetSettingNPCMinNum
// 0x0004 (0x0004 - 0x0000)
struct AJBSettings_GetSettingNPCMinNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_GetSettingNPCMinNum) == 0x000004, "Wrong alignment on AJBSettings_GetSettingNPCMinNum");
static_assert(sizeof(AJBSettings_GetSettingNPCMinNum) == 0x000004, "Wrong size on AJBSettings_GetSettingNPCMinNum");
static_assert(offsetof(AJBSettings_GetSettingNPCMinNum, ReturnValue) == 0x000000, "Member 'AJBSettings_GetSettingNPCMinNum::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.GetStartUpNextLevelName
// 0x0008 (0x0008 - 0x0000)
struct AJBSettings_GetStartUpNextLevelName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_GetStartUpNextLevelName) == 0x000004, "Wrong alignment on AJBSettings_GetStartUpNextLevelName");
static_assert(sizeof(AJBSettings_GetStartUpNextLevelName) == 0x000008, "Wrong size on AJBSettings_GetStartUpNextLevelName");
static_assert(offsetof(AJBSettings_GetStartUpNextLevelName, ReturnValue) == 0x000000, "Member 'AJBSettings_GetStartUpNextLevelName::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.GetUseYButtonAsVictoryShot
// 0x0001 (0x0001 - 0x0000)
struct AJBSettings_GetUseYButtonAsVictoryShot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_GetUseYButtonAsVictoryShot) == 0x000001, "Wrong alignment on AJBSettings_GetUseYButtonAsVictoryShot");
static_assert(sizeof(AJBSettings_GetUseYButtonAsVictoryShot) == 0x000001, "Wrong size on AJBSettings_GetUseYButtonAsVictoryShot");
static_assert(offsetof(AJBSettings_GetUseYButtonAsVictoryShot, ReturnValue) == 0x000000, "Member 'AJBSettings_GetUseYButtonAsVictoryShot::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.IsEnableDebugDisplay
// 0x0001 (0x0001 - 0x0000)
struct AJBSettings_IsEnableDebugDisplay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_IsEnableDebugDisplay) == 0x000001, "Wrong alignment on AJBSettings_IsEnableDebugDisplay");
static_assert(sizeof(AJBSettings_IsEnableDebugDisplay) == 0x000001, "Wrong size on AJBSettings_IsEnableDebugDisplay");
static_assert(offsetof(AJBSettings_IsEnableDebugDisplay, ReturnValue) == 0x000000, "Member 'AJBSettings_IsEnableDebugDisplay::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.IsEnableEMoneyBrandTest
// 0x0001 (0x0001 - 0x0000)
struct AJBSettings_IsEnableEMoneyBrandTest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_IsEnableEMoneyBrandTest) == 0x000001, "Wrong alignment on AJBSettings_IsEnableEMoneyBrandTest");
static_assert(sizeof(AJBSettings_IsEnableEMoneyBrandTest) == 0x000001, "Wrong size on AJBSettings_IsEnableEMoneyBrandTest");
static_assert(offsetof(AJBSettings_IsEnableEMoneyBrandTest, ReturnValue) == 0x000000, "Member 'AJBSettings_IsEnableEMoneyBrandTest::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.IsEnableInputCountForDev
// 0x0001 (0x0001 - 0x0000)
struct AJBSettings_IsEnableInputCountForDev final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_IsEnableInputCountForDev) == 0x000001, "Wrong alignment on AJBSettings_IsEnableInputCountForDev");
static_assert(sizeof(AJBSettings_IsEnableInputCountForDev) == 0x000001, "Wrong size on AJBSettings_IsEnableInputCountForDev");
static_assert(offsetof(AJBSettings_IsEnableInputCountForDev, ReturnValue) == 0x000000, "Member 'AJBSettings_IsEnableInputCountForDev::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.IsEnablePlayerIconRelativePath
// 0x0001 (0x0001 - 0x0000)
struct AJBSettings_IsEnablePlayerIconRelativePath final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_IsEnablePlayerIconRelativePath) == 0x000001, "Wrong alignment on AJBSettings_IsEnablePlayerIconRelativePath");
static_assert(sizeof(AJBSettings_IsEnablePlayerIconRelativePath) == 0x000001, "Wrong size on AJBSettings_IsEnablePlayerIconRelativePath");
static_assert(offsetof(AJBSettings_IsEnablePlayerIconRelativePath, ReturnValue) == 0x000000, "Member 'AJBSettings_IsEnablePlayerIconRelativePath::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.IsEnablePromotionMode
// 0x0001 (0x0001 - 0x0000)
struct AJBSettings_IsEnablePromotionMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_IsEnablePromotionMode) == 0x000001, "Wrong alignment on AJBSettings_IsEnablePromotionMode");
static_assert(sizeof(AJBSettings_IsEnablePromotionMode) == 0x000001, "Wrong size on AJBSettings_IsEnablePromotionMode");
static_assert(offsetof(AJBSettings_IsEnablePromotionMode, ReturnValue) == 0x000000, "Member 'AJBSettings_IsEnablePromotionMode::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.IsForElectricalTest
// 0x0001 (0x0001 - 0x0000)
struct AJBSettings_IsForElectricalTest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_IsForElectricalTest) == 0x000001, "Wrong alignment on AJBSettings_IsForElectricalTest");
static_assert(sizeof(AJBSettings_IsForElectricalTest) == 0x000001, "Wrong size on AJBSettings_IsForElectricalTest");
static_assert(offsetof(AJBSettings_IsForElectricalTest, ReturnValue) == 0x000000, "Member 'AJBSettings_IsForElectricalTest::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.IsForLocationTest
// 0x0001 (0x0001 - 0x0000)
struct AJBSettings_IsForLocationTest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_IsForLocationTest) == 0x000001, "Wrong alignment on AJBSettings_IsForLocationTest");
static_assert(sizeof(AJBSettings_IsForLocationTest) == 0x000001, "Wrong size on AJBSettings_IsForLocationTest");
static_assert(offsetof(AJBSettings_IsForLocationTest, ReturnValue) == 0x000000, "Member 'AJBSettings_IsForLocationTest::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.IsForNegotiations
// 0x0001 (0x0001 - 0x0000)
struct AJBSettings_IsForNegotiations final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_IsForNegotiations) == 0x000001, "Wrong alignment on AJBSettings_IsForNegotiations");
static_assert(sizeof(AJBSettings_IsForNegotiations) == 0x000001, "Wrong size on AJBSettings_IsForNegotiations");
static_assert(offsetof(AJBSettings_IsForNegotiations, ReturnValue) == 0x000000, "Member 'AJBSettings_IsForNegotiations::ReturnValue' has a wrong offset!");

// Function AJB.AJBSettings.IsShowShopSupportWebSiteInfo
// 0x0001 (0x0001 - 0x0000)
struct AJBSettings_IsShowShopSupportWebSiteInfo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBSettings_IsShowShopSupportWebSiteInfo) == 0x000001, "Wrong alignment on AJBSettings_IsShowShopSupportWebSiteInfo");
static_assert(sizeof(AJBSettings_IsShowShopSupportWebSiteInfo) == 0x000001, "Wrong size on AJBSettings_IsShowShopSupportWebSiteInfo");
static_assert(offsetof(AJBSettings_IsShowShopSupportWebSiteInfo, ReturnValue) == 0x000000, "Member 'AJBSettings_IsShowShopSupportWebSiteInfo::ReturnValue' has a wrong offset!");

// Function AJB.AJBStringTableManagerComponent.GetStringFromTable
// 0x0020 (0x0020 - 0x0000)
struct AJBStringTableManagerComponent_GetStringFromTable final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResult;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 String;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBStringTableManagerComponent_GetStringFromTable) == 0x000008, "Wrong alignment on AJBStringTableManagerComponent_GetStringFromTable");
static_assert(sizeof(AJBStringTableManagerComponent_GetStringFromTable) == 0x000020, "Wrong size on AJBStringTableManagerComponent_GetStringFromTable");
static_assert(offsetof(AJBStringTableManagerComponent_GetStringFromTable, Tag) == 0x000000, "Member 'AJBStringTableManagerComponent_GetStringFromTable::Tag' has a wrong offset!");
static_assert(offsetof(AJBStringTableManagerComponent_GetStringFromTable, bResult) == 0x000008, "Member 'AJBStringTableManagerComponent_GetStringFromTable::bResult' has a wrong offset!");
static_assert(offsetof(AJBStringTableManagerComponent_GetStringFromTable, String) == 0x000010, "Member 'AJBStringTableManagerComponent_GetStringFromTable::String' has a wrong offset!");

// Function AJB.AJBStringTableManagerComponent.GetStringFromTableByKey
// 0x0028 (0x0028 - 0x0000)
struct AJBStringTableManagerComponent_GetStringFromTableByKey final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResult;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 String;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBStringTableManagerComponent_GetStringFromTableByKey) == 0x000008, "Wrong alignment on AJBStringTableManagerComponent_GetStringFromTableByKey");
static_assert(sizeof(AJBStringTableManagerComponent_GetStringFromTableByKey) == 0x000028, "Wrong size on AJBStringTableManagerComponent_GetStringFromTableByKey");
static_assert(offsetof(AJBStringTableManagerComponent_GetStringFromTableByKey, Key) == 0x000000, "Member 'AJBStringTableManagerComponent_GetStringFromTableByKey::Key' has a wrong offset!");
static_assert(offsetof(AJBStringTableManagerComponent_GetStringFromTableByKey, bResult) == 0x000010, "Member 'AJBStringTableManagerComponent_GetStringFromTableByKey::bResult' has a wrong offset!");
static_assert(offsetof(AJBStringTableManagerComponent_GetStringFromTableByKey, String) == 0x000018, "Member 'AJBStringTableManagerComponent_GetStringFromTableByKey::String' has a wrong offset!");

// Function AJB.AJBStringTableManagerComponent.GetStringTablePath
// 0x0008 (0x0008 - 0x0000)
struct AJBStringTableManagerComponent_GetStringTablePath final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBStringTableManagerComponent_GetStringTablePath) == 0x000004, "Wrong alignment on AJBStringTableManagerComponent_GetStringTablePath");
static_assert(sizeof(AJBStringTableManagerComponent_GetStringTablePath) == 0x000008, "Wrong size on AJBStringTableManagerComponent_GetStringTablePath");
static_assert(offsetof(AJBStringTableManagerComponent_GetStringTablePath, ReturnValue) == 0x000000, "Member 'AJBStringTableManagerComponent_GetStringTablePath::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.AddComponentByClass
// 0x0018 (0x0018 - 0x0000)
struct AJBUtilityFunctionLibrary_AddComponentByClass final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ComponentClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBUtilityFunctionLibrary_AddComponentByClass) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_AddComponentByClass");
static_assert(sizeof(AJBUtilityFunctionLibrary_AddComponentByClass) == 0x000018, "Wrong size on AJBUtilityFunctionLibrary_AddComponentByClass");
static_assert(offsetof(AJBUtilityFunctionLibrary_AddComponentByClass, Owner) == 0x000000, "Member 'AJBUtilityFunctionLibrary_AddComponentByClass::Owner' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_AddComponentByClass, ComponentClass) == 0x000008, "Member 'AJBUtilityFunctionLibrary_AddComponentByClass::ComponentClass' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_AddComponentByClass, ReturnValue) == 0x000010, "Member 'AJBUtilityFunctionLibrary_AddComponentByClass::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.ApplyExposureSettings
// 0x0A40 (0x0A40 - 0x0000)
struct AJBUtilityFunctionLibrary_ApplyExposureSettings final
{
public:
	struct FPostProcessSettings                   ApplyTarget;                                       // 0x0000(0x0520)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPostProcessSettings                   ApplySrc;                                          // 0x0520(0x0520)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBUtilityFunctionLibrary_ApplyExposureSettings) == 0x000010, "Wrong alignment on AJBUtilityFunctionLibrary_ApplyExposureSettings");
static_assert(sizeof(AJBUtilityFunctionLibrary_ApplyExposureSettings) == 0x000A40, "Wrong size on AJBUtilityFunctionLibrary_ApplyExposureSettings");
static_assert(offsetof(AJBUtilityFunctionLibrary_ApplyExposureSettings, ApplyTarget) == 0x000000, "Member 'AJBUtilityFunctionLibrary_ApplyExposureSettings::ApplyTarget' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_ApplyExposureSettings, ApplySrc) == 0x000520, "Member 'AJBUtilityFunctionLibrary_ApplyExposureSettings::ApplySrc' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.CanAJBArcadeGamePlay
// 0x0010 (0x0010 - 0x0000)
struct AJBUtilityFunctionLibrary_CanAJBArcadeGamePlay final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBUtilityFunctionLibrary_CanAJBArcadeGamePlay) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_CanAJBArcadeGamePlay");
static_assert(sizeof(AJBUtilityFunctionLibrary_CanAJBArcadeGamePlay) == 0x000010, "Wrong size on AJBUtilityFunctionLibrary_CanAJBArcadeGamePlay");
static_assert(offsetof(AJBUtilityFunctionLibrary_CanAJBArcadeGamePlay, WorldContextObject) == 0x000000, "Member 'AJBUtilityFunctionLibrary_CanAJBArcadeGamePlay::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_CanAJBArcadeGamePlay, ReturnValue) == 0x000008, "Member 'AJBUtilityFunctionLibrary_CanAJBArcadeGamePlay::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.ChangeUSIOInputProperty_DeadZone
// 0x0010 (0x0010 - 0x0000)
struct AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_DeadZone final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeadZone;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_DeadZone) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_DeadZone");
static_assert(sizeof(AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_DeadZone) == 0x000010, "Wrong size on AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_DeadZone");
static_assert(offsetof(AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_DeadZone, PlayerController) == 0x000000, "Member 'AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_DeadZone::PlayerController' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_DeadZone, DeadZone) == 0x000008, "Member 'AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_DeadZone::DeadZone' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.ChangeUSIOInputProperty_Exponent
// 0x0010 (0x0010 - 0x0000)
struct AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_Exponent final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Exponent;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_Exponent) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_Exponent");
static_assert(sizeof(AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_Exponent) == 0x000010, "Wrong size on AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_Exponent");
static_assert(offsetof(AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_Exponent, PlayerController) == 0x000000, "Member 'AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_Exponent::PlayerController' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_Exponent, Exponent) == 0x000008, "Member 'AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_Exponent::Exponent' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.ChangeUSIOInputProperty_Invert
// 0x0010 (0x0010 - 0x0000)
struct AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_Invert final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvert;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_Invert) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_Invert");
static_assert(sizeof(AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_Invert) == 0x000010, "Wrong size on AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_Invert");
static_assert(offsetof(AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_Invert, PlayerController) == 0x000000, "Member 'AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_Invert::PlayerController' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_Invert, bInvert) == 0x000008, "Member 'AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_Invert::bInvert' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.ChangeUSIOInputProperty_Sensitivity
// 0x0010 (0x0010 - 0x0000)
struct AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_Sensitivity final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Sensitivity;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_Sensitivity) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_Sensitivity");
static_assert(sizeof(AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_Sensitivity) == 0x000010, "Wrong size on AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_Sensitivity");
static_assert(offsetof(AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_Sensitivity, PlayerController) == 0x000000, "Member 'AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_Sensitivity::PlayerController' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_Sensitivity, Sensitivity) == 0x000008, "Member 'AJBUtilityFunctionLibrary_ChangeUSIOInputProperty_Sensitivity::Sensitivity' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.CheckAnimationLoop
// 0x0010 (0x0010 - 0x0000)
struct AJBUtilityFunctionLibrary_CheckAnimationLoop final
{
public:
	class UAnimationAsset*                        TargetAnimation;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBUtilityFunctionLibrary_CheckAnimationLoop) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_CheckAnimationLoop");
static_assert(sizeof(AJBUtilityFunctionLibrary_CheckAnimationLoop) == 0x000010, "Wrong size on AJBUtilityFunctionLibrary_CheckAnimationLoop");
static_assert(offsetof(AJBUtilityFunctionLibrary_CheckAnimationLoop, TargetAnimation) == 0x000000, "Member 'AJBUtilityFunctionLibrary_CheckAnimationLoop::TargetAnimation' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_CheckAnimationLoop, ReturnValue) == 0x000008, "Member 'AJBUtilityFunctionLibrary_CheckAnimationLoop::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.CheckDefaultListener
// 0x0010 (0x0010 - 0x0000)
struct AJBUtilityFunctionLibrary_CheckDefaultListener final
{
public:
	class UAkComponent*                           In_pListener;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBUtilityFunctionLibrary_CheckDefaultListener) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_CheckDefaultListener");
static_assert(sizeof(AJBUtilityFunctionLibrary_CheckDefaultListener) == 0x000010, "Wrong size on AJBUtilityFunctionLibrary_CheckDefaultListener");
static_assert(offsetof(AJBUtilityFunctionLibrary_CheckDefaultListener, In_pListener) == 0x000000, "Member 'AJBUtilityFunctionLibrary_CheckDefaultListener::In_pListener' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_CheckDefaultListener, ReturnValue) == 0x000008, "Member 'AJBUtilityFunctionLibrary_CheckDefaultListener::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.ConvertAJBInGamePadIconKeyAction
// 0x0010 (0x0010 - 0x0000)
struct AJBUtilityFunctionLibrary_ConvertAJBInGamePadIconKeyAction final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAJBPadIconType                               UIPadIconType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAJBPadIconType                               ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBUtilityFunctionLibrary_ConvertAJBInGamePadIconKeyAction) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_ConvertAJBInGamePadIconKeyAction");
static_assert(sizeof(AJBUtilityFunctionLibrary_ConvertAJBInGamePadIconKeyAction) == 0x000010, "Wrong size on AJBUtilityFunctionLibrary_ConvertAJBInGamePadIconKeyAction");
static_assert(offsetof(AJBUtilityFunctionLibrary_ConvertAJBInGamePadIconKeyAction, WorldContextObject) == 0x000000, "Member 'AJBUtilityFunctionLibrary_ConvertAJBInGamePadIconKeyAction::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_ConvertAJBInGamePadIconKeyAction, UIPadIconType) == 0x000008, "Member 'AJBUtilityFunctionLibrary_ConvertAJBInGamePadIconKeyAction::UIPadIconType' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_ConvertAJBInGamePadIconKeyAction, ReturnValue) == 0x000009, "Member 'AJBUtilityFunctionLibrary_ConvertAJBInGamePadIconKeyAction::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.CreateAJBLevelSequencePlayer
// 0x0060 (0x0060 - 0x0000)
struct AJBUtilityFunctionLibrary_CreateAJBLevelSequencePlayer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         LevelSequence;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneSequencePlaybackSettings    Settings;                                          // 0x0010(0x0040)(Parm, NativeAccessSpecifierPublic)
	class AAJBLevelSequenceActor*                 OutActor;                                          // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequencePlayer*                   ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBUtilityFunctionLibrary_CreateAJBLevelSequencePlayer) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_CreateAJBLevelSequencePlayer");
static_assert(sizeof(AJBUtilityFunctionLibrary_CreateAJBLevelSequencePlayer) == 0x000060, "Wrong size on AJBUtilityFunctionLibrary_CreateAJBLevelSequencePlayer");
static_assert(offsetof(AJBUtilityFunctionLibrary_CreateAJBLevelSequencePlayer, WorldContextObject) == 0x000000, "Member 'AJBUtilityFunctionLibrary_CreateAJBLevelSequencePlayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_CreateAJBLevelSequencePlayer, LevelSequence) == 0x000008, "Member 'AJBUtilityFunctionLibrary_CreateAJBLevelSequencePlayer::LevelSequence' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_CreateAJBLevelSequencePlayer, Settings) == 0x000010, "Member 'AJBUtilityFunctionLibrary_CreateAJBLevelSequencePlayer::Settings' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_CreateAJBLevelSequencePlayer, OutActor) == 0x000050, "Member 'AJBUtilityFunctionLibrary_CreateAJBLevelSequencePlayer::OutActor' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_CreateAJBLevelSequencePlayer, ReturnValue) == 0x000058, "Member 'AJBUtilityFunctionLibrary_CreateAJBLevelSequencePlayer::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.FindAJBViewportWidgetOfClass
// 0x0020 (0x0020 - 0x0000)
struct AJBUtilityFunctionLibrary_FindAJBViewportWidgetOfClass final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAJBUserWidget>             AJBWidgetClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBUserWidget*                         OutWidget;                                         // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBUtilityFunctionLibrary_FindAJBViewportWidgetOfClass) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_FindAJBViewportWidgetOfClass");
static_assert(sizeof(AJBUtilityFunctionLibrary_FindAJBViewportWidgetOfClass) == 0x000020, "Wrong size on AJBUtilityFunctionLibrary_FindAJBViewportWidgetOfClass");
static_assert(offsetof(AJBUtilityFunctionLibrary_FindAJBViewportWidgetOfClass, WorldContextObject) == 0x000000, "Member 'AJBUtilityFunctionLibrary_FindAJBViewportWidgetOfClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_FindAJBViewportWidgetOfClass, AJBWidgetClass) == 0x000008, "Member 'AJBUtilityFunctionLibrary_FindAJBViewportWidgetOfClass::AJBWidgetClass' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_FindAJBViewportWidgetOfClass, bSuccess) == 0x000010, "Member 'AJBUtilityFunctionLibrary_FindAJBViewportWidgetOfClass::bSuccess' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_FindAJBViewportWidgetOfClass, OutWidget) == 0x000018, "Member 'AJBUtilityFunctionLibrary_FindAJBViewportWidgetOfClass::OutWidget' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.FindAJBViewportWidgetsOfClass
// 0x0028 (0x0028 - 0x0000)
struct AJBUtilityFunctionLibrary_FindAJBViewportWidgetsOfClass final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAJBUserWidget>             AJBWidgetClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAJBUserWidget*>                 OutWidgets;                                        // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBUtilityFunctionLibrary_FindAJBViewportWidgetsOfClass) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_FindAJBViewportWidgetsOfClass");
static_assert(sizeof(AJBUtilityFunctionLibrary_FindAJBViewportWidgetsOfClass) == 0x000028, "Wrong size on AJBUtilityFunctionLibrary_FindAJBViewportWidgetsOfClass");
static_assert(offsetof(AJBUtilityFunctionLibrary_FindAJBViewportWidgetsOfClass, WorldContextObject) == 0x000000, "Member 'AJBUtilityFunctionLibrary_FindAJBViewportWidgetsOfClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_FindAJBViewportWidgetsOfClass, AJBWidgetClass) == 0x000008, "Member 'AJBUtilityFunctionLibrary_FindAJBViewportWidgetsOfClass::AJBWidgetClass' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_FindAJBViewportWidgetsOfClass, bSuccess) == 0x000010, "Member 'AJBUtilityFunctionLibrary_FindAJBViewportWidgetsOfClass::bSuccess' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_FindAJBViewportWidgetsOfClass, OutWidgets) == 0x000018, "Member 'AJBUtilityFunctionLibrary_FindAJBViewportWidgetsOfClass::OutWidgets' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.ForceUpdateOverlaps
// 0x0008 (0x0008 - 0x0000)
struct AJBUtilityFunctionLibrary_ForceUpdateOverlaps final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBUtilityFunctionLibrary_ForceUpdateOverlaps) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_ForceUpdateOverlaps");
static_assert(sizeof(AJBUtilityFunctionLibrary_ForceUpdateOverlaps) == 0x000008, "Wrong size on AJBUtilityFunctionLibrary_ForceUpdateOverlaps");
static_assert(offsetof(AJBUtilityFunctionLibrary_ForceUpdateOverlaps, Component) == 0x000000, "Member 'AJBUtilityFunctionLibrary_ForceUpdateOverlaps::Component' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.GetAJBArcadeLimitAdditionalCredit
// 0x0010 (0x0010 - 0x0000)
struct AJBUtilityFunctionLibrary_GetAJBArcadeLimitAdditionalCredit final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBUtilityFunctionLibrary_GetAJBArcadeLimitAdditionalCredit) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_GetAJBArcadeLimitAdditionalCredit");
static_assert(sizeof(AJBUtilityFunctionLibrary_GetAJBArcadeLimitAdditionalCredit) == 0x000010, "Wrong size on AJBUtilityFunctionLibrary_GetAJBArcadeLimitAdditionalCredit");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBArcadeLimitAdditionalCredit, WorldContextObject) == 0x000000, "Member 'AJBUtilityFunctionLibrary_GetAJBArcadeLimitAdditionalCredit::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBArcadeLimitAdditionalCredit, ReturnValue) == 0x000008, "Member 'AJBUtilityFunctionLibrary_GetAJBArcadeLimitAdditionalCredit::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.GetAJBArcadeLimitNumPossessionPP
// 0x0010 (0x0010 - 0x0000)
struct AJBUtilityFunctionLibrary_GetAJBArcadeLimitNumPossessionPP final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBUtilityFunctionLibrary_GetAJBArcadeLimitNumPossessionPP) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_GetAJBArcadeLimitNumPossessionPP");
static_assert(sizeof(AJBUtilityFunctionLibrary_GetAJBArcadeLimitNumPossessionPP) == 0x000010, "Wrong size on AJBUtilityFunctionLibrary_GetAJBArcadeLimitNumPossessionPP");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBArcadeLimitNumPossessionPP, WorldContextObject) == 0x000000, "Member 'AJBUtilityFunctionLibrary_GetAJBArcadeLimitNumPossessionPP::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBArcadeLimitNumPossessionPP, ReturnValue) == 0x000008, "Member 'AJBUtilityFunctionLibrary_GetAJBArcadeLimitNumPossessionPP::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.GetAJBArcadeTimeManager
// 0x0018 (0x0018 - 0x0000)
struct AJBUtilityFunctionLibrary_GetAJBArcadeTimeManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBArcadeTimeManager*                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBUtilityFunctionLibrary_GetAJBArcadeTimeManager) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_GetAJBArcadeTimeManager");
static_assert(sizeof(AJBUtilityFunctionLibrary_GetAJBArcadeTimeManager) == 0x000018, "Wrong size on AJBUtilityFunctionLibrary_GetAJBArcadeTimeManager");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBArcadeTimeManager, WorldContextObject) == 0x000000, "Member 'AJBUtilityFunctionLibrary_GetAJBArcadeTimeManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBArcadeTimeManager, bIsValid) == 0x000008, "Member 'AJBUtilityFunctionLibrary_GetAJBArcadeTimeManager::bIsValid' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBArcadeTimeManager, ReturnValue) == 0x000010, "Member 'AJBUtilityFunctionLibrary_GetAJBArcadeTimeManager::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.GetAJBCharacterInfoList
// 0x0018 (0x0018 - 0x0000)
struct AJBUtilityFunctionLibrary_GetAJBCharacterInfoList final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAJBCharacterInfo>              OutCharacterInfoList;                              // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBUtilityFunctionLibrary_GetAJBCharacterInfoList) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_GetAJBCharacterInfoList");
static_assert(sizeof(AJBUtilityFunctionLibrary_GetAJBCharacterInfoList) == 0x000018, "Wrong size on AJBUtilityFunctionLibrary_GetAJBCharacterInfoList");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBCharacterInfoList, WorldContextObject) == 0x000000, "Member 'AJBUtilityFunctionLibrary_GetAJBCharacterInfoList::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBCharacterInfoList, OutCharacterInfoList) == 0x000008, "Member 'AJBUtilityFunctionLibrary_GetAJBCharacterInfoList::OutCharacterInfoList' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.GetAJBControlledInGameCharacter
// 0x0018 (0x0018 - 0x0000)
struct AJBUtilityFunctionLibrary_GetAJBControlledInGameCharacter final
{
public:
	const class AController*                      Controller;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacter*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBUtilityFunctionLibrary_GetAJBControlledInGameCharacter) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_GetAJBControlledInGameCharacter");
static_assert(sizeof(AJBUtilityFunctionLibrary_GetAJBControlledInGameCharacter) == 0x000018, "Wrong size on AJBUtilityFunctionLibrary_GetAJBControlledInGameCharacter");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBControlledInGameCharacter, Controller) == 0x000000, "Member 'AJBUtilityFunctionLibrary_GetAJBControlledInGameCharacter::Controller' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBControlledInGameCharacter, bIsValid) == 0x000008, "Member 'AJBUtilityFunctionLibrary_GetAJBControlledInGameCharacter::bIsValid' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBControlledInGameCharacter, ReturnValue) == 0x000010, "Member 'AJBUtilityFunctionLibrary_GetAJBControlledInGameCharacter::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.GetAJBDefaultGravityZ
// 0x0004 (0x0004 - 0x0000)
struct AJBUtilityFunctionLibrary_GetAJBDefaultGravityZ final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBUtilityFunctionLibrary_GetAJBDefaultGravityZ) == 0x000004, "Wrong alignment on AJBUtilityFunctionLibrary_GetAJBDefaultGravityZ");
static_assert(sizeof(AJBUtilityFunctionLibrary_GetAJBDefaultGravityZ) == 0x000004, "Wrong size on AJBUtilityFunctionLibrary_GetAJBDefaultGravityZ");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBDefaultGravityZ, ReturnValue) == 0x000000, "Member 'AJBUtilityFunctionLibrary_GetAJBDefaultGravityZ::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.GetAJBGameInstanceFromWorldContextObjectChecked
// 0x0010 (0x0010 - 0x0000)
struct AJBUtilityFunctionLibrary_GetAJBGameInstanceFromWorldContextObjectChecked final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAJBGameInstance*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBUtilityFunctionLibrary_GetAJBGameInstanceFromWorldContextObjectChecked) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_GetAJBGameInstanceFromWorldContextObjectChecked");
static_assert(sizeof(AJBUtilityFunctionLibrary_GetAJBGameInstanceFromWorldContextObjectChecked) == 0x000010, "Wrong size on AJBUtilityFunctionLibrary_GetAJBGameInstanceFromWorldContextObjectChecked");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBGameInstanceFromWorldContextObjectChecked, WorldContextObject) == 0x000000, "Member 'AJBUtilityFunctionLibrary_GetAJBGameInstanceFromWorldContextObjectChecked::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBGameInstanceFromWorldContextObjectChecked, ReturnValue) == 0x000008, "Member 'AJBUtilityFunctionLibrary_GetAJBGameInstanceFromWorldContextObjectChecked::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.GetAJBHighlightManager
// 0x0018 (0x0018 - 0x0000)
struct AJBUtilityFunctionLibrary_GetAJBHighlightManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBHighlightManager*                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBUtilityFunctionLibrary_GetAJBHighlightManager) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_GetAJBHighlightManager");
static_assert(sizeof(AJBUtilityFunctionLibrary_GetAJBHighlightManager) == 0x000018, "Wrong size on AJBUtilityFunctionLibrary_GetAJBHighlightManager");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBHighlightManager, WorldContextObject) == 0x000000, "Member 'AJBUtilityFunctionLibrary_GetAJBHighlightManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBHighlightManager, bIsValid) == 0x000008, "Member 'AJBUtilityFunctionLibrary_GetAJBHighlightManager::bIsValid' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBHighlightManager, ReturnValue) == 0x000010, "Member 'AJBUtilityFunctionLibrary_GetAJBHighlightManager::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.GetAJBHighlightOnlyInGamePlayerController
// 0x0018 (0x0018 - 0x0000)
struct AJBUtilityFunctionLibrary_GetAJBHighlightOnlyInGamePlayerController final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGamePlayerController*             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBUtilityFunctionLibrary_GetAJBHighlightOnlyInGamePlayerController) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_GetAJBHighlightOnlyInGamePlayerController");
static_assert(sizeof(AJBUtilityFunctionLibrary_GetAJBHighlightOnlyInGamePlayerController) == 0x000018, "Wrong size on AJBUtilityFunctionLibrary_GetAJBHighlightOnlyInGamePlayerController");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBHighlightOnlyInGamePlayerController, WorldContextObject) == 0x000000, "Member 'AJBUtilityFunctionLibrary_GetAJBHighlightOnlyInGamePlayerController::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBHighlightOnlyInGamePlayerController, bIsValid) == 0x000008, "Member 'AJBUtilityFunctionLibrary_GetAJBHighlightOnlyInGamePlayerController::bIsValid' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBHighlightOnlyInGamePlayerController, ReturnValue) == 0x000010, "Member 'AJBUtilityFunctionLibrary_GetAJBHighlightOnlyInGamePlayerController::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.GetAJBInGameDataStorageManager
// 0x0018 (0x0018 - 0x0000)
struct AJBUtilityFunctionLibrary_GetAJBInGameDataStorageManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBGameDataStorageManager*             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBUtilityFunctionLibrary_GetAJBInGameDataStorageManager) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_GetAJBInGameDataStorageManager");
static_assert(sizeof(AJBUtilityFunctionLibrary_GetAJBInGameDataStorageManager) == 0x000018, "Wrong size on AJBUtilityFunctionLibrary_GetAJBInGameDataStorageManager");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBInGameDataStorageManager, WorldContextObject) == 0x000000, "Member 'AJBUtilityFunctionLibrary_GetAJBInGameDataStorageManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBInGameDataStorageManager, bIsValid) == 0x000008, "Member 'AJBUtilityFunctionLibrary_GetAJBInGameDataStorageManager::bIsValid' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBInGameDataStorageManager, ReturnValue) == 0x000010, "Member 'AJBUtilityFunctionLibrary_GetAJBInGameDataStorageManager::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.GetAJBInGameGameState
// 0x0018 (0x0018 - 0x0000)
struct AJBUtilityFunctionLibrary_GetAJBInGameGameState final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameGameState*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBUtilityFunctionLibrary_GetAJBInGameGameState) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_GetAJBInGameGameState");
static_assert(sizeof(AJBUtilityFunctionLibrary_GetAJBInGameGameState) == 0x000018, "Wrong size on AJBUtilityFunctionLibrary_GetAJBInGameGameState");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBInGameGameState, WorldContextObject) == 0x000000, "Member 'AJBUtilityFunctionLibrary_GetAJBInGameGameState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBInGameGameState, bIsValid) == 0x000008, "Member 'AJBUtilityFunctionLibrary_GetAJBInGameGameState::bIsValid' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBInGameGameState, ReturnValue) == 0x000010, "Member 'AJBUtilityFunctionLibrary_GetAJBInGameGameState::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.GetAJBInGameHUD
// 0x0018 (0x0018 - 0x0000)
struct AJBUtilityFunctionLibrary_GetAJBInGameHUD final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerIndex;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AAJBInGameHUD*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBUtilityFunctionLibrary_GetAJBInGameHUD) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_GetAJBInGameHUD");
static_assert(sizeof(AJBUtilityFunctionLibrary_GetAJBInGameHUD) == 0x000018, "Wrong size on AJBUtilityFunctionLibrary_GetAJBInGameHUD");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBInGameHUD, WorldContextObject) == 0x000000, "Member 'AJBUtilityFunctionLibrary_GetAJBInGameHUD::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBInGameHUD, bIsValid) == 0x000008, "Member 'AJBUtilityFunctionLibrary_GetAJBInGameHUD::bIsValid' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBInGameHUD, PlayerIndex) == 0x00000C, "Member 'AJBUtilityFunctionLibrary_GetAJBInGameHUD::PlayerIndex' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBInGameHUD, ReturnValue) == 0x000010, "Member 'AJBUtilityFunctionLibrary_GetAJBInGameHUD::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.GetAJBInGamePadIconByKeyAction
// 0x0018 (0x0018 - 0x0000)
struct AJBUtilityFunctionLibrary_GetAJBInGamePadIconByKeyAction final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KeyActionName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAJBPadIconType                               ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBUtilityFunctionLibrary_GetAJBInGamePadIconByKeyAction) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_GetAJBInGamePadIconByKeyAction");
static_assert(sizeof(AJBUtilityFunctionLibrary_GetAJBInGamePadIconByKeyAction) == 0x000018, "Wrong size on AJBUtilityFunctionLibrary_GetAJBInGamePadIconByKeyAction");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBInGamePadIconByKeyAction, WorldContextObject) == 0x000000, "Member 'AJBUtilityFunctionLibrary_GetAJBInGamePadIconByKeyAction::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBInGamePadIconByKeyAction, KeyActionName) == 0x000008, "Member 'AJBUtilityFunctionLibrary_GetAJBInGamePadIconByKeyAction::KeyActionName' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBInGamePadIconByKeyAction, ReturnValue) == 0x000010, "Member 'AJBUtilityFunctionLibrary_GetAJBInGamePadIconByKeyAction::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.GetAJBInGamePlayerController
// 0x0018 (0x0018 - 0x0000)
struct AJBUtilityFunctionLibrary_GetAJBInGamePlayerController final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGamePlayerController*             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBUtilityFunctionLibrary_GetAJBInGamePlayerController) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_GetAJBInGamePlayerController");
static_assert(sizeof(AJBUtilityFunctionLibrary_GetAJBInGamePlayerController) == 0x000018, "Wrong size on AJBUtilityFunctionLibrary_GetAJBInGamePlayerController");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBInGamePlayerController, WorldContextObject) == 0x000000, "Member 'AJBUtilityFunctionLibrary_GetAJBInGamePlayerController::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBInGamePlayerController, bIsValid) == 0x000008, "Member 'AJBUtilityFunctionLibrary_GetAJBInGamePlayerController::bIsValid' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBInGamePlayerController, ReturnValue) == 0x000010, "Member 'AJBUtilityFunctionLibrary_GetAJBInGamePlayerController::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.GetAJBLimitCoinNumber
// 0x0004 (0x0004 - 0x0000)
struct AJBUtilityFunctionLibrary_GetAJBLimitCoinNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBUtilityFunctionLibrary_GetAJBLimitCoinNumber) == 0x000004, "Wrong alignment on AJBUtilityFunctionLibrary_GetAJBLimitCoinNumber");
static_assert(sizeof(AJBUtilityFunctionLibrary_GetAJBLimitCoinNumber) == 0x000004, "Wrong size on AJBUtilityFunctionLibrary_GetAJBLimitCoinNumber");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBLimitCoinNumber, ReturnValue) == 0x000000, "Member 'AJBUtilityFunctionLibrary_GetAJBLimitCoinNumber::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.GetAJBMaxBuyPP
// 0x0010 (0x0010 - 0x0000)
struct AJBUtilityFunctionLibrary_GetAJBMaxBuyPP final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBUtilityFunctionLibrary_GetAJBMaxBuyPP) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_GetAJBMaxBuyPP");
static_assert(sizeof(AJBUtilityFunctionLibrary_GetAJBMaxBuyPP) == 0x000010, "Wrong size on AJBUtilityFunctionLibrary_GetAJBMaxBuyPP");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBMaxBuyPP, WorldContextObject) == 0x000000, "Member 'AJBUtilityFunctionLibrary_GetAJBMaxBuyPP::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAJBMaxBuyPP, ReturnValue) == 0x000008, "Member 'AJBUtilityFunctionLibrary_GetAJBMaxBuyPP::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.GetAllActorsByLevelName
// 0x0028 (0x0028 - 0x0000)
struct AJBUtilityFunctionLibrary_GetAllActorsByLevelName final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LevelName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutActors;                                         // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBUtilityFunctionLibrary_GetAllActorsByLevelName) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_GetAllActorsByLevelName");
static_assert(sizeof(AJBUtilityFunctionLibrary_GetAllActorsByLevelName) == 0x000028, "Wrong size on AJBUtilityFunctionLibrary_GetAllActorsByLevelName");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAllActorsByLevelName, WorldContextObject) == 0x000000, "Member 'AJBUtilityFunctionLibrary_GetAllActorsByLevelName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAllActorsByLevelName, LevelName) == 0x000008, "Member 'AJBUtilityFunctionLibrary_GetAllActorsByLevelName::LevelName' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAllActorsByLevelName, ActorClass) == 0x000010, "Member 'AJBUtilityFunctionLibrary_GetAllActorsByLevelName::ActorClass' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetAllActorsByLevelName, OutActors) == 0x000018, "Member 'AJBUtilityFunctionLibrary_GetAllActorsByLevelName::OutActors' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.GetCharacterInfoByCharaIndex
// 0x00F8 (0x00F8 - 0x0000)
struct AJBUtilityFunctionLibrary_GetCharacterInfoByCharaIndex final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAJBCharacterInfo                      Out;                                               // 0x0010(0x00E0)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBUtilityFunctionLibrary_GetCharacterInfoByCharaIndex) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_GetCharacterInfoByCharaIndex");
static_assert(sizeof(AJBUtilityFunctionLibrary_GetCharacterInfoByCharaIndex) == 0x0000F8, "Wrong size on AJBUtilityFunctionLibrary_GetCharacterInfoByCharaIndex");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetCharacterInfoByCharaIndex, WorldContextObject) == 0x000000, "Member 'AJBUtilityFunctionLibrary_GetCharacterInfoByCharaIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetCharacterInfoByCharaIndex, Index_0) == 0x000008, "Member 'AJBUtilityFunctionLibrary_GetCharacterInfoByCharaIndex::Index_0' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetCharacterInfoByCharaIndex, Out) == 0x000010, "Member 'AJBUtilityFunctionLibrary_GetCharacterInfoByCharaIndex::Out' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetCharacterInfoByCharaIndex, ReturnValue) == 0x0000F0, "Member 'AJBUtilityFunctionLibrary_GetCharacterInfoByCharaIndex::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.GetCharacterInfoByCharaTag
// 0x00F8 (0x00F8 - 0x0000)
struct AJBUtilityFunctionLibrary_GetCharacterInfoByCharaTag final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAJBCharacterInfo                      Out;                                               // 0x0010(0x00E0)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBUtilityFunctionLibrary_GetCharacterInfoByCharaTag) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_GetCharacterInfoByCharaTag");
static_assert(sizeof(AJBUtilityFunctionLibrary_GetCharacterInfoByCharaTag) == 0x0000F8, "Wrong size on AJBUtilityFunctionLibrary_GetCharacterInfoByCharaTag");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetCharacterInfoByCharaTag, WorldContextObject) == 0x000000, "Member 'AJBUtilityFunctionLibrary_GetCharacterInfoByCharaTag::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetCharacterInfoByCharaTag, Tag) == 0x000008, "Member 'AJBUtilityFunctionLibrary_GetCharacterInfoByCharaTag::Tag' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetCharacterInfoByCharaTag, Out) == 0x000010, "Member 'AJBUtilityFunctionLibrary_GetCharacterInfoByCharaTag::Out' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetCharacterInfoByCharaTag, ReturnValue) == 0x0000F0, "Member 'AJBUtilityFunctionLibrary_GetCharacterInfoByCharaTag::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.GetConnectionTimeout
// 0x0010 (0x0010 - 0x0000)
struct AJBUtilityFunctionLibrary_GetConnectionTimeout final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBUtilityFunctionLibrary_GetConnectionTimeout) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_GetConnectionTimeout");
static_assert(sizeof(AJBUtilityFunctionLibrary_GetConnectionTimeout) == 0x000010, "Wrong size on AJBUtilityFunctionLibrary_GetConnectionTimeout");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetConnectionTimeout, WorldContextObject) == 0x000000, "Member 'AJBUtilityFunctionLibrary_GetConnectionTimeout::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetConnectionTimeout, ReturnValue) == 0x000008, "Member 'AJBUtilityFunctionLibrary_GetConnectionTimeout::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.GetDayOfWeek
// 0x0010 (0x0010 - 0x0000)
struct AJBUtilityFunctionLibrary_GetDayOfWeek final
{
public:
	struct FDateTime                              Date;                                              // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAJBDayOfWeek                                 ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBUtilityFunctionLibrary_GetDayOfWeek) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_GetDayOfWeek");
static_assert(sizeof(AJBUtilityFunctionLibrary_GetDayOfWeek) == 0x000010, "Wrong size on AJBUtilityFunctionLibrary_GetDayOfWeek");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetDayOfWeek, Date) == 0x000000, "Member 'AJBUtilityFunctionLibrary_GetDayOfWeek::Date' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetDayOfWeek, ReturnValue) == 0x000008, "Member 'AJBUtilityFunctionLibrary_GetDayOfWeek::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.GetInGameEffectPoolManagers
// 0x0020 (0x0020 - 0x0000)
struct AJBUtilityFunctionLibrary_GetInGameEffectPoolManagers final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AAJBInGameEffectPoolManager> EffectPoolManagerClass;                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AAJBInGameEffectPoolManager*>    OutEffectPoolManagers;                             // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBUtilityFunctionLibrary_GetInGameEffectPoolManagers) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_GetInGameEffectPoolManagers");
static_assert(sizeof(AJBUtilityFunctionLibrary_GetInGameEffectPoolManagers) == 0x000020, "Wrong size on AJBUtilityFunctionLibrary_GetInGameEffectPoolManagers");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetInGameEffectPoolManagers, WorldContextObject) == 0x000000, "Member 'AJBUtilityFunctionLibrary_GetInGameEffectPoolManagers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetInGameEffectPoolManagers, EffectPoolManagerClass) == 0x000008, "Member 'AJBUtilityFunctionLibrary_GetInGameEffectPoolManagers::EffectPoolManagerClass' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetInGameEffectPoolManagers, OutEffectPoolManagers) == 0x000010, "Member 'AJBUtilityFunctionLibrary_GetInGameEffectPoolManagers::OutEffectPoolManagers' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.GetInitialConnectTimeout
// 0x0010 (0x0010 - 0x0000)
struct AJBUtilityFunctionLibrary_GetInitialConnectTimeout final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBUtilityFunctionLibrary_GetInitialConnectTimeout) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_GetInitialConnectTimeout");
static_assert(sizeof(AJBUtilityFunctionLibrary_GetInitialConnectTimeout) == 0x000010, "Wrong size on AJBUtilityFunctionLibrary_GetInitialConnectTimeout");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetInitialConnectTimeout, WorldContextObject) == 0x000000, "Member 'AJBUtilityFunctionLibrary_GetInitialConnectTimeout::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetInitialConnectTimeout, ReturnValue) == 0x000008, "Member 'AJBUtilityFunctionLibrary_GetInitialConnectTimeout::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.GetJoinPawns
// 0x0020 (0x0020 - 0x0000)
struct AJBUtilityFunctionLibrary_GetJoinPawns final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APawn>                      PawnClass;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class APawn*>                          OutPawns;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBUtilityFunctionLibrary_GetJoinPawns) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_GetJoinPawns");
static_assert(sizeof(AJBUtilityFunctionLibrary_GetJoinPawns) == 0x000020, "Wrong size on AJBUtilityFunctionLibrary_GetJoinPawns");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetJoinPawns, WorldContextObject) == 0x000000, "Member 'AJBUtilityFunctionLibrary_GetJoinPawns::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetJoinPawns, PawnClass) == 0x000008, "Member 'AJBUtilityFunctionLibrary_GetJoinPawns::PawnClass' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetJoinPawns, OutPawns) == 0x000010, "Member 'AJBUtilityFunctionLibrary_GetJoinPawns::OutPawns' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.GetJoinPlayerControllers
// 0x0018 (0x0018 - 0x0000)
struct AJBUtilityFunctionLibrary_GetJoinPlayerControllers final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class APlayerController*>              OutPlayerControllers;                              // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBUtilityFunctionLibrary_GetJoinPlayerControllers) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_GetJoinPlayerControllers");
static_assert(sizeof(AJBUtilityFunctionLibrary_GetJoinPlayerControllers) == 0x000018, "Wrong size on AJBUtilityFunctionLibrary_GetJoinPlayerControllers");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetJoinPlayerControllers, WorldContextObject) == 0x000000, "Member 'AJBUtilityFunctionLibrary_GetJoinPlayerControllers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetJoinPlayerControllers, OutPlayerControllers) == 0x000008, "Member 'AJBUtilityFunctionLibrary_GetJoinPlayerControllers::OutPlayerControllers' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.GetNPCAJBCharacterInfoList
// 0x0018 (0x0018 - 0x0000)
struct AJBUtilityFunctionLibrary_GetNPCAJBCharacterInfoList final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAJBCharacterInfo>              OutCharacterInfoList;                              // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBUtilityFunctionLibrary_GetNPCAJBCharacterInfoList) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_GetNPCAJBCharacterInfoList");
static_assert(sizeof(AJBUtilityFunctionLibrary_GetNPCAJBCharacterInfoList) == 0x000018, "Wrong size on AJBUtilityFunctionLibrary_GetNPCAJBCharacterInfoList");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetNPCAJBCharacterInfoList, WorldContextObject) == 0x000000, "Member 'AJBUtilityFunctionLibrary_GetNPCAJBCharacterInfoList::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_GetNPCAJBCharacterInfoList, OutCharacterInfoList) == 0x000008, "Member 'AJBUtilityFunctionLibrary_GetNPCAJBCharacterInfoList::OutCharacterInfoList' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.HasGameplayTagFromStaticMesh
// 0x0018 (0x0018 - 0x0000)
struct AJBUtilityFunctionLibrary_HasGameplayTagFromStaticMesh final
{
public:
	class UStaticMesh*                            TargetStaticMesh;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TagToCheck;                                        // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExactMatch;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBUtilityFunctionLibrary_HasGameplayTagFromStaticMesh) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_HasGameplayTagFromStaticMesh");
static_assert(sizeof(AJBUtilityFunctionLibrary_HasGameplayTagFromStaticMesh) == 0x000018, "Wrong size on AJBUtilityFunctionLibrary_HasGameplayTagFromStaticMesh");
static_assert(offsetof(AJBUtilityFunctionLibrary_HasGameplayTagFromStaticMesh, TargetStaticMesh) == 0x000000, "Member 'AJBUtilityFunctionLibrary_HasGameplayTagFromStaticMesh::TargetStaticMesh' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_HasGameplayTagFromStaticMesh, TagToCheck) == 0x000008, "Member 'AJBUtilityFunctionLibrary_HasGameplayTagFromStaticMesh::TagToCheck' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_HasGameplayTagFromStaticMesh, bExactMatch) == 0x000010, "Member 'AJBUtilityFunctionLibrary_HasGameplayTagFromStaticMesh::bExactMatch' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_HasGameplayTagFromStaticMesh, ReturnValue) == 0x000011, "Member 'AJBUtilityFunctionLibrary_HasGameplayTagFromStaticMesh::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.IsAJBArcadeTerminateGame
// 0x0010 (0x0010 - 0x0000)
struct AJBUtilityFunctionLibrary_IsAJBArcadeTerminateGame final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBUtilityFunctionLibrary_IsAJBArcadeTerminateGame) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_IsAJBArcadeTerminateGame");
static_assert(sizeof(AJBUtilityFunctionLibrary_IsAJBArcadeTerminateGame) == 0x000010, "Wrong size on AJBUtilityFunctionLibrary_IsAJBArcadeTerminateGame");
static_assert(offsetof(AJBUtilityFunctionLibrary_IsAJBArcadeTerminateGame, WorldContextObject) == 0x000000, "Member 'AJBUtilityFunctionLibrary_IsAJBArcadeTerminateGame::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_IsAJBArcadeTerminateGame, ReturnValue) == 0x000008, "Member 'AJBUtilityFunctionLibrary_IsAJBArcadeTerminateGame::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.IsAJBOfflineMode
// 0x0010 (0x0010 - 0x0000)
struct AJBUtilityFunctionLibrary_IsAJBOfflineMode final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBUtilityFunctionLibrary_IsAJBOfflineMode) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_IsAJBOfflineMode");
static_assert(sizeof(AJBUtilityFunctionLibrary_IsAJBOfflineMode) == 0x000010, "Wrong size on AJBUtilityFunctionLibrary_IsAJBOfflineMode");
static_assert(offsetof(AJBUtilityFunctionLibrary_IsAJBOfflineMode, WorldContextObject) == 0x000000, "Member 'AJBUtilityFunctionLibrary_IsAJBOfflineMode::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_IsAJBOfflineMode, ReturnValue) == 0x000008, "Member 'AJBUtilityFunctionLibrary_IsAJBOfflineMode::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.IsCommandlet
// 0x0001 (0x0001 - 0x0000)
struct AJBUtilityFunctionLibrary_IsCommandlet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBUtilityFunctionLibrary_IsCommandlet) == 0x000001, "Wrong alignment on AJBUtilityFunctionLibrary_IsCommandlet");
static_assert(sizeof(AJBUtilityFunctionLibrary_IsCommandlet) == 0x000001, "Wrong size on AJBUtilityFunctionLibrary_IsCommandlet");
static_assert(offsetof(AJBUtilityFunctionLibrary_IsCommandlet, ReturnValue) == 0x000000, "Member 'AJBUtilityFunctionLibrary_IsCommandlet::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.IsDistribution
// 0x0001 (0x0001 - 0x0000)
struct AJBUtilityFunctionLibrary_IsDistribution final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBUtilityFunctionLibrary_IsDistribution) == 0x000001, "Wrong alignment on AJBUtilityFunctionLibrary_IsDistribution");
static_assert(sizeof(AJBUtilityFunctionLibrary_IsDistribution) == 0x000001, "Wrong size on AJBUtilityFunctionLibrary_IsDistribution");
static_assert(offsetof(AJBUtilityFunctionLibrary_IsDistribution, ReturnValue) == 0x000000, "Member 'AJBUtilityFunctionLibrary_IsDistribution::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.IsEditor
// 0x0001 (0x0001 - 0x0000)
struct AJBUtilityFunctionLibrary_IsEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBUtilityFunctionLibrary_IsEditor) == 0x000001, "Wrong alignment on AJBUtilityFunctionLibrary_IsEditor");
static_assert(sizeof(AJBUtilityFunctionLibrary_IsEditor) == 0x000001, "Wrong size on AJBUtilityFunctionLibrary_IsEditor");
static_assert(offsetof(AJBUtilityFunctionLibrary_IsEditor, ReturnValue) == 0x000000, "Member 'AJBUtilityFunctionLibrary_IsEditor::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.IsEditorPreview
// 0x0010 (0x0010 - 0x0000)
struct AJBUtilityFunctionLibrary_IsEditorPreview final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBUtilityFunctionLibrary_IsEditorPreview) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_IsEditorPreview");
static_assert(sizeof(AJBUtilityFunctionLibrary_IsEditorPreview) == 0x000010, "Wrong size on AJBUtilityFunctionLibrary_IsEditorPreview");
static_assert(offsetof(AJBUtilityFunctionLibrary_IsEditorPreview, WorldContextObject) == 0x000000, "Member 'AJBUtilityFunctionLibrary_IsEditorPreview::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_IsEditorPreview, ReturnValue) == 0x000008, "Member 'AJBUtilityFunctionLibrary_IsEditorPreview::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.IsEnableGachaSchedule
// 0x0010 (0x0010 - 0x0000)
struct AJBUtilityFunctionLibrary_IsEnableGachaSchedule final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBUtilityFunctionLibrary_IsEnableGachaSchedule) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_IsEnableGachaSchedule");
static_assert(sizeof(AJBUtilityFunctionLibrary_IsEnableGachaSchedule) == 0x000010, "Wrong size on AJBUtilityFunctionLibrary_IsEnableGachaSchedule");
static_assert(offsetof(AJBUtilityFunctionLibrary_IsEnableGachaSchedule, WorldContextObject) == 0x000000, "Member 'AJBUtilityFunctionLibrary_IsEnableGachaSchedule::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_IsEnableGachaSchedule, ReturnValue) == 0x000008, "Member 'AJBUtilityFunctionLibrary_IsEnableGachaSchedule::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.IsShipping
// 0x0001 (0x0001 - 0x0000)
struct AJBUtilityFunctionLibrary_IsShipping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBUtilityFunctionLibrary_IsShipping) == 0x000001, "Wrong alignment on AJBUtilityFunctionLibrary_IsShipping");
static_assert(sizeof(AJBUtilityFunctionLibrary_IsShipping) == 0x000001, "Wrong size on AJBUtilityFunctionLibrary_IsShipping");
static_assert(offsetof(AJBUtilityFunctionLibrary_IsShipping, ReturnValue) == 0x000000, "Member 'AJBUtilityFunctionLibrary_IsShipping::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.IsStandalone
// 0x0001 (0x0001 - 0x0000)
struct AJBUtilityFunctionLibrary_IsStandalone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBUtilityFunctionLibrary_IsStandalone) == 0x000001, "Wrong alignment on AJBUtilityFunctionLibrary_IsStandalone");
static_assert(sizeof(AJBUtilityFunctionLibrary_IsStandalone) == 0x000001, "Wrong size on AJBUtilityFunctionLibrary_IsStandalone");
static_assert(offsetof(AJBUtilityFunctionLibrary_IsStandalone, ReturnValue) == 0x000000, "Member 'AJBUtilityFunctionLibrary_IsStandalone::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.IsTestBuild
// 0x0001 (0x0001 - 0x0000)
struct AJBUtilityFunctionLibrary_IsTestBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBUtilityFunctionLibrary_IsTestBuild) == 0x000001, "Wrong alignment on AJBUtilityFunctionLibrary_IsTestBuild");
static_assert(sizeof(AJBUtilityFunctionLibrary_IsTestBuild) == 0x000001, "Wrong size on AJBUtilityFunctionLibrary_IsTestBuild");
static_assert(offsetof(AJBUtilityFunctionLibrary_IsTestBuild, ReturnValue) == 0x000000, "Member 'AJBUtilityFunctionLibrary_IsTestBuild::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.LoadTexture2DFromDisk
// 0x0038 (0x0038 - 0x0000)
struct AJBUtilityFunctionLibrary_LoadTexture2DFromDisk final
{
public:
	class FString                                 FullFilePath;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAJBImageFormatType                           ImageFormat;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutValid;                                         // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OutWidth;                                          // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutHeight;                                         // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBUtilityFunctionLibrary_LoadTexture2DFromDisk) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_LoadTexture2DFromDisk");
static_assert(sizeof(AJBUtilityFunctionLibrary_LoadTexture2DFromDisk) == 0x000038, "Wrong size on AJBUtilityFunctionLibrary_LoadTexture2DFromDisk");
static_assert(offsetof(AJBUtilityFunctionLibrary_LoadTexture2DFromDisk, FullFilePath) == 0x000000, "Member 'AJBUtilityFunctionLibrary_LoadTexture2DFromDisk::FullFilePath' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_LoadTexture2DFromDisk, Filename) == 0x000010, "Member 'AJBUtilityFunctionLibrary_LoadTexture2DFromDisk::Filename' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_LoadTexture2DFromDisk, ImageFormat) == 0x000020, "Member 'AJBUtilityFunctionLibrary_LoadTexture2DFromDisk::ImageFormat' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_LoadTexture2DFromDisk, bOutValid) == 0x000021, "Member 'AJBUtilityFunctionLibrary_LoadTexture2DFromDisk::bOutValid' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_LoadTexture2DFromDisk, OutWidth) == 0x000024, "Member 'AJBUtilityFunctionLibrary_LoadTexture2DFromDisk::OutWidth' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_LoadTexture2DFromDisk, OutHeight) == 0x000028, "Member 'AJBUtilityFunctionLibrary_LoadTexture2DFromDisk::OutHeight' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_LoadTexture2DFromDisk, ReturnValue) == 0x000030, "Member 'AJBUtilityFunctionLibrary_LoadTexture2DFromDisk::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.MakeGameplayTagByName
// 0x0028 (0x0028 - 0x0000)
struct AJBUtilityFunctionLibrary_MakeGameplayTagByName final
{
public:
	class FString                                 TagName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ErrorIfNotFound;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           OutTag;                                            // 0x0018(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBUtilityFunctionLibrary_MakeGameplayTagByName) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_MakeGameplayTagByName");
static_assert(sizeof(AJBUtilityFunctionLibrary_MakeGameplayTagByName) == 0x000028, "Wrong size on AJBUtilityFunctionLibrary_MakeGameplayTagByName");
static_assert(offsetof(AJBUtilityFunctionLibrary_MakeGameplayTagByName, TagName) == 0x000000, "Member 'AJBUtilityFunctionLibrary_MakeGameplayTagByName::TagName' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_MakeGameplayTagByName, ErrorIfNotFound) == 0x000010, "Member 'AJBUtilityFunctionLibrary_MakeGameplayTagByName::ErrorIfNotFound' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_MakeGameplayTagByName, OutTag) == 0x000018, "Member 'AJBUtilityFunctionLibrary_MakeGameplayTagByName::OutTag' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_MakeGameplayTagByName, ReturnValue) == 0x000020, "Member 'AJBUtilityFunctionLibrary_MakeGameplayTagByName::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.NewObjectFromBlueprint
// 0x0018 (0x0018 - 0x0000)
struct AJBUtilityFunctionLibrary_NewObjectFromBlueprint final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 InClass;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBUtilityFunctionLibrary_NewObjectFromBlueprint) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_NewObjectFromBlueprint");
static_assert(sizeof(AJBUtilityFunctionLibrary_NewObjectFromBlueprint) == 0x000018, "Wrong size on AJBUtilityFunctionLibrary_NewObjectFromBlueprint");
static_assert(offsetof(AJBUtilityFunctionLibrary_NewObjectFromBlueprint, WorldContextObject) == 0x000000, "Member 'AJBUtilityFunctionLibrary_NewObjectFromBlueprint::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_NewObjectFromBlueprint, InClass) == 0x000008, "Member 'AJBUtilityFunctionLibrary_NewObjectFromBlueprint::InClass' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_NewObjectFromBlueprint, ReturnValue) == 0x000010, "Member 'AJBUtilityFunctionLibrary_NewObjectFromBlueprint::ReturnValue' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.ParseStringToDateTime
// 0x0018 (0x0018 - 0x0000)
struct AJBUtilityFunctionLibrary_ParseStringToDateTime final
{
public:
	struct FDateTime                              OutDateTime;                                       // 0x0000(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InDateTimeString;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBUtilityFunctionLibrary_ParseStringToDateTime) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_ParseStringToDateTime");
static_assert(sizeof(AJBUtilityFunctionLibrary_ParseStringToDateTime) == 0x000018, "Wrong size on AJBUtilityFunctionLibrary_ParseStringToDateTime");
static_assert(offsetof(AJBUtilityFunctionLibrary_ParseStringToDateTime, OutDateTime) == 0x000000, "Member 'AJBUtilityFunctionLibrary_ParseStringToDateTime::OutDateTime' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_ParseStringToDateTime, InDateTimeString) == 0x000008, "Member 'AJBUtilityFunctionLibrary_ParseStringToDateTime::InDateTimeString' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.ParseStringToScheduleDateTime
// 0x0018 (0x0018 - 0x0000)
struct AJBUtilityFunctionLibrary_ParseStringToScheduleDateTime final
{
public:
	struct FDateTime                              OutDateTime;                                       // 0x0000(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InDateTimeString;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBUtilityFunctionLibrary_ParseStringToScheduleDateTime) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_ParseStringToScheduleDateTime");
static_assert(sizeof(AJBUtilityFunctionLibrary_ParseStringToScheduleDateTime) == 0x000018, "Wrong size on AJBUtilityFunctionLibrary_ParseStringToScheduleDateTime");
static_assert(offsetof(AJBUtilityFunctionLibrary_ParseStringToScheduleDateTime, OutDateTime) == 0x000000, "Member 'AJBUtilityFunctionLibrary_ParseStringToScheduleDateTime::OutDateTime' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_ParseStringToScheduleDateTime, InDateTimeString) == 0x000008, "Member 'AJBUtilityFunctionLibrary_ParseStringToScheduleDateTime::InDateTimeString' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.Screenshot
// 0x0018 (0x0018 - 0x0000)
struct AJBUtilityFunctionLibrary_Screenshot final
{
public:
	class FString                                 InFilename;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInShowUI;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBUtilityFunctionLibrary_Screenshot) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_Screenshot");
static_assert(sizeof(AJBUtilityFunctionLibrary_Screenshot) == 0x000018, "Wrong size on AJBUtilityFunctionLibrary_Screenshot");
static_assert(offsetof(AJBUtilityFunctionLibrary_Screenshot, InFilename) == 0x000000, "Member 'AJBUtilityFunctionLibrary_Screenshot::InFilename' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_Screenshot, bInShowUI) == 0x000010, "Member 'AJBUtilityFunctionLibrary_Screenshot::bInShowUI' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.SetAJBArcadeGameCoinLock
// 0x0010 (0x0010 - 0x0000)
struct AJBUtilityFunctionLibrary_SetAJBArcadeGameCoinLock final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLock;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBUtilityFunctionLibrary_SetAJBArcadeGameCoinLock) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_SetAJBArcadeGameCoinLock");
static_assert(sizeof(AJBUtilityFunctionLibrary_SetAJBArcadeGameCoinLock) == 0x000010, "Wrong size on AJBUtilityFunctionLibrary_SetAJBArcadeGameCoinLock");
static_assert(offsetof(AJBUtilityFunctionLibrary_SetAJBArcadeGameCoinLock, WorldContextObject) == 0x000000, "Member 'AJBUtilityFunctionLibrary_SetAJBArcadeGameCoinLock::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_SetAJBArcadeGameCoinLock, bLock) == 0x000008, "Member 'AJBUtilityFunctionLibrary_SetAJBArcadeGameCoinLock::bLock' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.SetConnectionTimeout
// 0x0010 (0x0010 - 0x0000)
struct AJBUtilityFunctionLibrary_SetConnectionTimeout final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewTimeSec;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBUtilityFunctionLibrary_SetConnectionTimeout) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_SetConnectionTimeout");
static_assert(sizeof(AJBUtilityFunctionLibrary_SetConnectionTimeout) == 0x000010, "Wrong size on AJBUtilityFunctionLibrary_SetConnectionTimeout");
static_assert(offsetof(AJBUtilityFunctionLibrary_SetConnectionTimeout, WorldContextObject) == 0x000000, "Member 'AJBUtilityFunctionLibrary_SetConnectionTimeout::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_SetConnectionTimeout, NewTimeSec) == 0x000008, "Member 'AJBUtilityFunctionLibrary_SetConnectionTimeout::NewTimeSec' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.SetInitialConnectTimeout
// 0x0010 (0x0010 - 0x0000)
struct AJBUtilityFunctionLibrary_SetInitialConnectTimeout final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewTimeSec;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBUtilityFunctionLibrary_SetInitialConnectTimeout) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_SetInitialConnectTimeout");
static_assert(sizeof(AJBUtilityFunctionLibrary_SetInitialConnectTimeout) == 0x000010, "Wrong size on AJBUtilityFunctionLibrary_SetInitialConnectTimeout");
static_assert(offsetof(AJBUtilityFunctionLibrary_SetInitialConnectTimeout, WorldContextObject) == 0x000000, "Member 'AJBUtilityFunctionLibrary_SetInitialConnectTimeout::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_SetInitialConnectTimeout, NewTimeSec) == 0x000008, "Member 'AJBUtilityFunctionLibrary_SetInitialConnectTimeout::NewTimeSec' has a wrong offset!");

// Function AJB.AJBUtilityFunctionLibrary.TryGetOwnerOfClass
// 0x0018 (0x0018 - 0x0000)
struct AJBUtilityFunctionLibrary_TryGetOwnerOfClass final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 InClass;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBUtilityFunctionLibrary_TryGetOwnerOfClass) == 0x000008, "Wrong alignment on AJBUtilityFunctionLibrary_TryGetOwnerOfClass");
static_assert(sizeof(AJBUtilityFunctionLibrary_TryGetOwnerOfClass) == 0x000018, "Wrong size on AJBUtilityFunctionLibrary_TryGetOwnerOfClass");
static_assert(offsetof(AJBUtilityFunctionLibrary_TryGetOwnerOfClass, InActor) == 0x000000, "Member 'AJBUtilityFunctionLibrary_TryGetOwnerOfClass::InActor' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_TryGetOwnerOfClass, InClass) == 0x000008, "Member 'AJBUtilityFunctionLibrary_TryGetOwnerOfClass::InClass' has a wrong offset!");
static_assert(offsetof(AJBUtilityFunctionLibrary_TryGetOwnerOfClass, ReturnValue) == 0x000010, "Member 'AJBUtilityFunctionLibrary_TryGetOwnerOfClass::ReturnValue' has a wrong offset!");

// Function AJB.AJBVersion.GetBuildDate
// 0x0010 (0x0010 - 0x0000)
struct AJBVersion_GetBuildDate final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBVersion_GetBuildDate) == 0x000008, "Wrong alignment on AJBVersion_GetBuildDate");
static_assert(sizeof(AJBVersion_GetBuildDate) == 0x000010, "Wrong size on AJBVersion_GetBuildDate");
static_assert(offsetof(AJBVersion_GetBuildDate, ReturnValue) == 0x000000, "Member 'AJBVersion_GetBuildDate::ReturnValue' has a wrong offset!");

// Function AJB.AJBVersion.GetBuildName
// 0x0010 (0x0010 - 0x0000)
struct AJBVersion_GetBuildName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBVersion_GetBuildName) == 0x000008, "Wrong alignment on AJBVersion_GetBuildName");
static_assert(sizeof(AJBVersion_GetBuildName) == 0x000010, "Wrong size on AJBVersion_GetBuildName");
static_assert(offsetof(AJBVersion_GetBuildName, ReturnValue) == 0x000000, "Member 'AJBVersion_GetBuildName::ReturnValue' has a wrong offset!");

// Function AJB.AJBVersion.GetVersionNumber
// 0x0010 (0x0010 - 0x0000)
struct AJBVersion_GetVersionNumber final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBVersion_GetVersionNumber) == 0x000008, "Wrong alignment on AJBVersion_GetVersionNumber");
static_assert(sizeof(AJBVersion_GetVersionNumber) == 0x000010, "Wrong size on AJBVersion_GetVersionNumber");
static_assert(offsetof(AJBVersion_GetVersionNumber, ReturnValue) == 0x000000, "Member 'AJBVersion_GetVersionNumber::ReturnValue' has a wrong offset!");

// Function AJB.AJBVideoRecorder.FinalizeAviWriter
// 0x0001 (0x0001 - 0x0000)
struct AJBVideoRecorder_FinalizeAviWriter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBVideoRecorder_FinalizeAviWriter) == 0x000001, "Wrong alignment on AJBVideoRecorder_FinalizeAviWriter");
static_assert(sizeof(AJBVideoRecorder_FinalizeAviWriter) == 0x000001, "Wrong size on AJBVideoRecorder_FinalizeAviWriter");
static_assert(offsetof(AJBVideoRecorder_FinalizeAviWriter, ReturnValue) == 0x000000, "Member 'AJBVideoRecorder_FinalizeAviWriter::ReturnValue' has a wrong offset!");

// Function AJB.AJBVideoRecorder.GetProgress
// 0x0004 (0x0004 - 0x0000)
struct AJBVideoRecorder_GetProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBVideoRecorder_GetProgress) == 0x000004, "Wrong alignment on AJBVideoRecorder_GetProgress");
static_assert(sizeof(AJBVideoRecorder_GetProgress) == 0x000004, "Wrong size on AJBVideoRecorder_GetProgress");
static_assert(offsetof(AJBVideoRecorder_GetProgress, ReturnValue) == 0x000000, "Member 'AJBVideoRecorder_GetProgress::ReturnValue' has a wrong offset!");

// Function AJB.AJBVideoRecorder.GetThumbnailData
// 0x0020 (0x0020 - 0x0000)
struct AJBVideoRecorder_GetThumbnailData final
{
public:
	TArray<struct FColor>                         Color;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBVideoRecorder_GetThumbnailData) == 0x000008, "Wrong alignment on AJBVideoRecorder_GetThumbnailData");
static_assert(sizeof(AJBVideoRecorder_GetThumbnailData) == 0x000020, "Wrong size on AJBVideoRecorder_GetThumbnailData");
static_assert(offsetof(AJBVideoRecorder_GetThumbnailData, Color) == 0x000000, "Member 'AJBVideoRecorder_GetThumbnailData::Color' has a wrong offset!");
static_assert(offsetof(AJBVideoRecorder_GetThumbnailData, Width) == 0x000010, "Member 'AJBVideoRecorder_GetThumbnailData::Width' has a wrong offset!");
static_assert(offsetof(AJBVideoRecorder_GetThumbnailData, Height) == 0x000014, "Member 'AJBVideoRecorder_GetThumbnailData::Height' has a wrong offset!");
static_assert(offsetof(AJBVideoRecorder_GetThumbnailData, Result) == 0x000018, "Member 'AJBVideoRecorder_GetThumbnailData::Result' has a wrong offset!");

// Function AJB.AJBVideoRecorder.GetThumbnailTexture
// 0x0008 (0x0008 - 0x0000)
struct AJBVideoRecorder_GetThumbnailTexture final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBVideoRecorder_GetThumbnailTexture) == 0x000008, "Wrong alignment on AJBVideoRecorder_GetThumbnailTexture");
static_assert(sizeof(AJBVideoRecorder_GetThumbnailTexture) == 0x000008, "Wrong size on AJBVideoRecorder_GetThumbnailTexture");
static_assert(offsetof(AJBVideoRecorder_GetThumbnailTexture, ReturnValue) == 0x000000, "Member 'AJBVideoRecorder_GetThumbnailTexture::ReturnValue' has a wrong offset!");

// Function AJB.AJBVideoRecorder.StartCapture
// 0x0001 (0x0001 - 0x0000)
struct AJBVideoRecorder_StartCapture final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBVideoRecorder_StartCapture) == 0x000001, "Wrong alignment on AJBVideoRecorder_StartCapture");
static_assert(sizeof(AJBVideoRecorder_StartCapture) == 0x000001, "Wrong size on AJBVideoRecorder_StartCapture");
static_assert(offsetof(AJBVideoRecorder_StartCapture, ReturnValue) == 0x000000, "Member 'AJBVideoRecorder_StartCapture::ReturnValue' has a wrong offset!");

// Function AJB.AJBWindowWidget.CallClosedWindowEvent
// 0x0001 (0x0001 - 0x0000)
struct AJBWindowWidget_CallClosedWindowEvent final
{
public:
	bool                                          bChangedCollapsedWindow;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBWindowWidget_CallClosedWindowEvent) == 0x000001, "Wrong alignment on AJBWindowWidget_CallClosedWindowEvent");
static_assert(sizeof(AJBWindowWidget_CallClosedWindowEvent) == 0x000001, "Wrong size on AJBWindowWidget_CallClosedWindowEvent");
static_assert(offsetof(AJBWindowWidget_CallClosedWindowEvent, bChangedCollapsedWindow) == 0x000000, "Member 'AJBWindowWidget_CallClosedWindowEvent::bChangedCollapsedWindow' has a wrong offset!");

// Function AJB.AJBWindowWidget.CurveAnimationFinishDelegate
// 0x0020 (0x0020 - 0x0000)
struct AJBWindowWidget_CurveAnimationFinishDelegate final
{
public:
	TDelegate<void()>                             Delegate;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class UWidget*                                AnimWidget;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimSequence;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBWindowWidget_CurveAnimationFinishDelegate) == 0x000008, "Wrong alignment on AJBWindowWidget_CurveAnimationFinishDelegate");
static_assert(sizeof(AJBWindowWidget_CurveAnimationFinishDelegate) == 0x000020, "Wrong size on AJBWindowWidget_CurveAnimationFinishDelegate");
static_assert(offsetof(AJBWindowWidget_CurveAnimationFinishDelegate, Delegate) == 0x000000, "Member 'AJBWindowWidget_CurveAnimationFinishDelegate::Delegate' has a wrong offset!");
static_assert(offsetof(AJBWindowWidget_CurveAnimationFinishDelegate, AnimWidget) == 0x000010, "Member 'AJBWindowWidget_CurveAnimationFinishDelegate::AnimWidget' has a wrong offset!");
static_assert(offsetof(AJBWindowWidget_CurveAnimationFinishDelegate, AnimSequence) == 0x000018, "Member 'AJBWindowWidget_CurveAnimationFinishDelegate::AnimSequence' has a wrong offset!");

// Function AJB.AJBWindowWidget.IsPlayingCurveAnimation
// 0x0010 (0x0010 - 0x0000)
struct AJBWindowWidget_IsPlayingCurveAnimation final
{
public:
	class UWidget*                                AnimWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimSequence;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBWindowWidget_IsPlayingCurveAnimation) == 0x000008, "Wrong alignment on AJBWindowWidget_IsPlayingCurveAnimation");
static_assert(sizeof(AJBWindowWidget_IsPlayingCurveAnimation) == 0x000010, "Wrong size on AJBWindowWidget_IsPlayingCurveAnimation");
static_assert(offsetof(AJBWindowWidget_IsPlayingCurveAnimation, AnimWidget) == 0x000000, "Member 'AJBWindowWidget_IsPlayingCurveAnimation::AnimWidget' has a wrong offset!");
static_assert(offsetof(AJBWindowWidget_IsPlayingCurveAnimation, AnimSequence) == 0x000008, "Member 'AJBWindowWidget_IsPlayingCurveAnimation::AnimSequence' has a wrong offset!");
static_assert(offsetof(AJBWindowWidget_IsPlayingCurveAnimation, ReturnValue) == 0x00000C, "Member 'AJBWindowWidget_IsPlayingCurveAnimation::ReturnValue' has a wrong offset!");

// Function AJB.AJBWindowWidget.OverrideCreditDisplayType
// 0x0001 (0x0001 - 0x0000)
struct AJBWindowWidget_OverrideCreditDisplayType final
{
public:
	EAJBCreditDisplayType                         Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBWindowWidget_OverrideCreditDisplayType) == 0x000001, "Wrong alignment on AJBWindowWidget_OverrideCreditDisplayType");
static_assert(sizeof(AJBWindowWidget_OverrideCreditDisplayType) == 0x000001, "Wrong size on AJBWindowWidget_OverrideCreditDisplayType");
static_assert(offsetof(AJBWindowWidget_OverrideCreditDisplayType, Type) == 0x000000, "Member 'AJBWindowWidget_OverrideCreditDisplayType::Type' has a wrong offset!");

// Function AJB.AJBWindowWidget.OverrideErrorWindowFlag
// 0x0001 (0x0001 - 0x0000)
struct AJBWindowWidget_OverrideErrorWindowFlag final
{
public:
	bool                                          bNewFlag;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBWindowWidget_OverrideErrorWindowFlag) == 0x000001, "Wrong alignment on AJBWindowWidget_OverrideErrorWindowFlag");
static_assert(sizeof(AJBWindowWidget_OverrideErrorWindowFlag) == 0x000001, "Wrong size on AJBWindowWidget_OverrideErrorWindowFlag");
static_assert(offsetof(AJBWindowWidget_OverrideErrorWindowFlag, bNewFlag) == 0x000000, "Member 'AJBWindowWidget_OverrideErrorWindowFlag::bNewFlag' has a wrong offset!");

// Function AJB.AJBWindowWidget.PlayCurveAnimation
// 0x0018 (0x0018 - 0x0000)
struct AJBWindowWidget_PlayCurveAnimation final
{
public:
	class UWidget*                                AnimWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimSequence;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayingCheck;                                     // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUMGSequencePlayMode                          PlayMode;                                          // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoopToPlay;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBWindowWidget_PlayCurveAnimation) == 0x000008, "Wrong alignment on AJBWindowWidget_PlayCurveAnimation");
static_assert(sizeof(AJBWindowWidget_PlayCurveAnimation) == 0x000018, "Wrong size on AJBWindowWidget_PlayCurveAnimation");
static_assert(offsetof(AJBWindowWidget_PlayCurveAnimation, AnimWidget) == 0x000000, "Member 'AJBWindowWidget_PlayCurveAnimation::AnimWidget' has a wrong offset!");
static_assert(offsetof(AJBWindowWidget_PlayCurveAnimation, AnimSequence) == 0x000008, "Member 'AJBWindowWidget_PlayCurveAnimation::AnimSequence' has a wrong offset!");
static_assert(offsetof(AJBWindowWidget_PlayCurveAnimation, bPlayingCheck) == 0x00000C, "Member 'AJBWindowWidget_PlayCurveAnimation::bPlayingCheck' has a wrong offset!");
static_assert(offsetof(AJBWindowWidget_PlayCurveAnimation, PlayMode) == 0x00000D, "Member 'AJBWindowWidget_PlayCurveAnimation::PlayMode' has a wrong offset!");
static_assert(offsetof(AJBWindowWidget_PlayCurveAnimation, NumLoopToPlay) == 0x000010, "Member 'AJBWindowWidget_PlayCurveAnimation::NumLoopToPlay' has a wrong offset!");

// Function AJB.AJBWindowWidget.RegisterCurve_Angle
// 0x0018 (0x0018 - 0x0000)
struct AJBWindowWidget_RegisterCurve_Angle final
{
public:
	class UWidget*                                AnimWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            Curve;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimSequence;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBWindowWidget_RegisterCurve_Angle) == 0x000008, "Wrong alignment on AJBWindowWidget_RegisterCurve_Angle");
static_assert(sizeof(AJBWindowWidget_RegisterCurve_Angle) == 0x000018, "Wrong size on AJBWindowWidget_RegisterCurve_Angle");
static_assert(offsetof(AJBWindowWidget_RegisterCurve_Angle, AnimWidget) == 0x000000, "Member 'AJBWindowWidget_RegisterCurve_Angle::AnimWidget' has a wrong offset!");
static_assert(offsetof(AJBWindowWidget_RegisterCurve_Angle, Curve) == 0x000008, "Member 'AJBWindowWidget_RegisterCurve_Angle::Curve' has a wrong offset!");
static_assert(offsetof(AJBWindowWidget_RegisterCurve_Angle, AnimSequence) == 0x000010, "Member 'AJBWindowWidget_RegisterCurve_Angle::AnimSequence' has a wrong offset!");

// Function AJB.AJBWindowWidget.RegisterCurve_Scale
// 0x0018 (0x0018 - 0x0000)
struct AJBWindowWidget_RegisterCurve_Scale final
{
public:
	class UWidget*                                AnimWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveBase*                             Curve;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimSequence;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBWindowWidget_RegisterCurve_Scale) == 0x000008, "Wrong alignment on AJBWindowWidget_RegisterCurve_Scale");
static_assert(sizeof(AJBWindowWidget_RegisterCurve_Scale) == 0x000018, "Wrong size on AJBWindowWidget_RegisterCurve_Scale");
static_assert(offsetof(AJBWindowWidget_RegisterCurve_Scale, AnimWidget) == 0x000000, "Member 'AJBWindowWidget_RegisterCurve_Scale::AnimWidget' has a wrong offset!");
static_assert(offsetof(AJBWindowWidget_RegisterCurve_Scale, Curve) == 0x000008, "Member 'AJBWindowWidget_RegisterCurve_Scale::Curve' has a wrong offset!");
static_assert(offsetof(AJBWindowWidget_RegisterCurve_Scale, AnimSequence) == 0x000010, "Member 'AJBWindowWidget_RegisterCurve_Scale::AnimSequence' has a wrong offset!");

// Function AJB.AJBWindowWidget.RegisterCurve_Trans
// 0x0018 (0x0018 - 0x0000)
struct AJBWindowWidget_RegisterCurve_Trans final
{
public:
	class UWidget*                                AnimWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           CurveVector;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimSequence;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBWindowWidget_RegisterCurve_Trans) == 0x000008, "Wrong alignment on AJBWindowWidget_RegisterCurve_Trans");
static_assert(sizeof(AJBWindowWidget_RegisterCurve_Trans) == 0x000018, "Wrong size on AJBWindowWidget_RegisterCurve_Trans");
static_assert(offsetof(AJBWindowWidget_RegisterCurve_Trans, AnimWidget) == 0x000000, "Member 'AJBWindowWidget_RegisterCurve_Trans::AnimWidget' has a wrong offset!");
static_assert(offsetof(AJBWindowWidget_RegisterCurve_Trans, CurveVector) == 0x000008, "Member 'AJBWindowWidget_RegisterCurve_Trans::CurveVector' has a wrong offset!");
static_assert(offsetof(AJBWindowWidget_RegisterCurve_Trans, AnimSequence) == 0x000010, "Member 'AJBWindowWidget_RegisterCurve_Trans::AnimSequence' has a wrong offset!");

// Function AJB.AJBWindowWidget.RegisterCurve_TransX
// 0x0018 (0x0018 - 0x0000)
struct AJBWindowWidget_RegisterCurve_TransX final
{
public:
	class UWidget*                                AnimWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            Curve;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimSequence;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBWindowWidget_RegisterCurve_TransX) == 0x000008, "Wrong alignment on AJBWindowWidget_RegisterCurve_TransX");
static_assert(sizeof(AJBWindowWidget_RegisterCurve_TransX) == 0x000018, "Wrong size on AJBWindowWidget_RegisterCurve_TransX");
static_assert(offsetof(AJBWindowWidget_RegisterCurve_TransX, AnimWidget) == 0x000000, "Member 'AJBWindowWidget_RegisterCurve_TransX::AnimWidget' has a wrong offset!");
static_assert(offsetof(AJBWindowWidget_RegisterCurve_TransX, Curve) == 0x000008, "Member 'AJBWindowWidget_RegisterCurve_TransX::Curve' has a wrong offset!");
static_assert(offsetof(AJBWindowWidget_RegisterCurve_TransX, AnimSequence) == 0x000010, "Member 'AJBWindowWidget_RegisterCurve_TransX::AnimSequence' has a wrong offset!");

// Function AJB.AJBWindowWidget.RegisterCurve_TransY
// 0x0018 (0x0018 - 0x0000)
struct AJBWindowWidget_RegisterCurve_TransY final
{
public:
	class UWidget*                                AnimWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            Curve;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimSequence;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBWindowWidget_RegisterCurve_TransY) == 0x000008, "Wrong alignment on AJBWindowWidget_RegisterCurve_TransY");
static_assert(sizeof(AJBWindowWidget_RegisterCurve_TransY) == 0x000018, "Wrong size on AJBWindowWidget_RegisterCurve_TransY");
static_assert(offsetof(AJBWindowWidget_RegisterCurve_TransY, AnimWidget) == 0x000000, "Member 'AJBWindowWidget_RegisterCurve_TransY::AnimWidget' has a wrong offset!");
static_assert(offsetof(AJBWindowWidget_RegisterCurve_TransY, Curve) == 0x000008, "Member 'AJBWindowWidget_RegisterCurve_TransY::Curve' has a wrong offset!");
static_assert(offsetof(AJBWindowWidget_RegisterCurve_TransY, AnimSequence) == 0x000010, "Member 'AJBWindowWidget_RegisterCurve_TransY::AnimSequence' has a wrong offset!");

// Function AJB.AJBWindowWidget.StopCurveAnimation
// 0x0010 (0x0010 - 0x0000)
struct AJBWindowWidget_StopCurveAnimation final
{
public:
	class UWidget*                                AnimWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimSequence;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AJBWindowWidget_StopCurveAnimation) == 0x000008, "Wrong alignment on AJBWindowWidget_StopCurveAnimation");
static_assert(sizeof(AJBWindowWidget_StopCurveAnimation) == 0x000010, "Wrong size on AJBWindowWidget_StopCurveAnimation");
static_assert(offsetof(AJBWindowWidget_StopCurveAnimation, AnimWidget) == 0x000000, "Member 'AJBWindowWidget_StopCurveAnimation::AnimWidget' has a wrong offset!");
static_assert(offsetof(AJBWindowWidget_StopCurveAnimation, AnimSequence) == 0x000008, "Member 'AJBWindowWidget_StopCurveAnimation::AnimSequence' has a wrong offset!");

// Function AJB.AJBWinPlatformUtils.IsConnectTouchPanel
// 0x0001 (0x0001 - 0x0000)
struct AJBWinPlatformUtils_IsConnectTouchPanel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJBWinPlatformUtils_IsConnectTouchPanel) == 0x000001, "Wrong alignment on AJBWinPlatformUtils_IsConnectTouchPanel");
static_assert(sizeof(AJBWinPlatformUtils_IsConnectTouchPanel) == 0x000001, "Wrong size on AJBWinPlatformUtils_IsConnectTouchPanel");
static_assert(offsetof(AJBWinPlatformUtils_IsConnectTouchPanel, ReturnValue) == 0x000000, "Member 'AJBWinPlatformUtils_IsConnectTouchPanel::ReturnValue' has a wrong offset!");

// Function AJB.AJB_HighlightSpringArmComponent.SetTargetRotation
// 0x000C (0x000C - 0x0000)
struct AJB_HighlightSpringArmComponent_SetTargetRotation final
{
public:
	struct FRotator                               DesireRot;                                         // 0x0000(0x000C)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AJB_HighlightSpringArmComponent_SetTargetRotation) == 0x000004, "Wrong alignment on AJB_HighlightSpringArmComponent_SetTargetRotation");
static_assert(sizeof(AJB_HighlightSpringArmComponent_SetTargetRotation) == 0x00000C, "Wrong size on AJB_HighlightSpringArmComponent_SetTargetRotation");
static_assert(offsetof(AJB_HighlightSpringArmComponent_SetTargetRotation, DesireRot) == 0x000000, "Member 'AJB_HighlightSpringArmComponent_SetTargetRotation::DesireRot' has a wrong offset!");

// Function AJB.EventTagLocker.RequestLockWithTag
// 0x0008 (0x0008 - 0x0000)
struct EventTagLocker_RequestLockWithTag final
{
public:
	struct FGameplayTag                           EventTagIn;                                        // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventTagLocker_RequestLockWithTag) == 0x000008, "Wrong alignment on EventTagLocker_RequestLockWithTag");
static_assert(sizeof(EventTagLocker_RequestLockWithTag) == 0x000008, "Wrong size on EventTagLocker_RequestLockWithTag");
static_assert(offsetof(EventTagLocker_RequestLockWithTag, EventTagIn) == 0x000000, "Member 'EventTagLocker_RequestLockWithTag::EventTagIn' has a wrong offset!");

// Function AJB.EventTagLocker.SetHolder
// 0x0008 (0x0008 - 0x0000)
struct EventTagLocker_SetHolder final
{
public:
	class AEventTagLockHolder*                    HolderRefIn;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventTagLocker_SetHolder) == 0x000008, "Wrong alignment on EventTagLocker_SetHolder");
static_assert(sizeof(EventTagLocker_SetHolder) == 0x000008, "Wrong size on EventTagLocker_SetHolder");
static_assert(offsetof(EventTagLocker_SetHolder, HolderRefIn) == 0x000000, "Member 'EventTagLocker_SetHolder::HolderRefIn' has a wrong offset!");

// Function AJB.EventTagLocker.IsEventTagLocked
// 0x0001 (0x0001 - 0x0000)
struct EventTagLocker_IsEventTagLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventTagLocker_IsEventTagLocked) == 0x000001, "Wrong alignment on EventTagLocker_IsEventTagLocked");
static_assert(sizeof(EventTagLocker_IsEventTagLocked) == 0x000001, "Wrong size on EventTagLocker_IsEventTagLocked");
static_assert(offsetof(EventTagLocker_IsEventTagLocked, ReturnValue) == 0x000000, "Member 'EventTagLocker_IsEventTagLocked::ReturnValue' has a wrong offset!");

// Function AJB.EventTagLocker.IsLockRequesting
// 0x0001 (0x0001 - 0x0000)
struct EventTagLocker_IsLockRequesting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventTagLocker_IsLockRequesting) == 0x000001, "Wrong alignment on EventTagLocker_IsLockRequesting");
static_assert(sizeof(EventTagLocker_IsLockRequesting) == 0x000001, "Wrong size on EventTagLocker_IsLockRequesting");
static_assert(offsetof(EventTagLocker_IsLockRequesting, ReturnValue) == 0x000000, "Member 'EventTagLocker_IsLockRequesting::ReturnValue' has a wrong offset!");

// Function AJB.EventTagLocker.IsValid
// 0x0001 (0x0001 - 0x0000)
struct EventTagLocker_IsValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventTagLocker_IsValid) == 0x000001, "Wrong alignment on EventTagLocker_IsValid");
static_assert(sizeof(EventTagLocker_IsValid) == 0x000001, "Wrong size on EventTagLocker_IsValid");
static_assert(offsetof(EventTagLocker_IsValid, ReturnValue) == 0x000000, "Member 'EventTagLocker_IsValid::ReturnValue' has a wrong offset!");

// Function AJB.EventTagLockHolder.GetLockedEventTags
// 0x0020 (0x0020 - 0x0000)
struct EventTagLockHolder_GetLockedEventTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventTagLockHolder_GetLockedEventTags) == 0x000008, "Wrong alignment on EventTagLockHolder_GetLockedEventTags");
static_assert(sizeof(EventTagLockHolder_GetLockedEventTags) == 0x000020, "Wrong size on EventTagLockHolder_GetLockedEventTags");
static_assert(offsetof(EventTagLockHolder_GetLockedEventTags, ReturnValue) == 0x000000, "Member 'EventTagLockHolder_GetLockedEventTags::ReturnValue' has a wrong offset!");

// Function AJB.EventTagLockHolder.IsLocked
// 0x0010 (0x0010 - 0x0000)
struct EventTagLockHolder_IsLocked final
{
public:
	struct FGameplayTag                           EventTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExactMatch;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventTagLockHolder_IsLocked) == 0x000008, "Wrong alignment on EventTagLockHolder_IsLocked");
static_assert(sizeof(EventTagLockHolder_IsLocked) == 0x000010, "Wrong size on EventTagLockHolder_IsLocked");
static_assert(offsetof(EventTagLockHolder_IsLocked, EventTag) == 0x000000, "Member 'EventTagLockHolder_IsLocked::EventTag' has a wrong offset!");
static_assert(offsetof(EventTagLockHolder_IsLocked, bExactMatch) == 0x000008, "Member 'EventTagLockHolder_IsLocked::bExactMatch' has a wrong offset!");
static_assert(offsetof(EventTagLockHolder_IsLocked, ReturnValue) == 0x000009, "Member 'EventTagLockHolder_IsLocked::ReturnValue' has a wrong offset!");

// Function AJB.EventTagLockHolder.LockedCount
// 0x0010 (0x0010 - 0x0000)
struct EventTagLockHolder_LockedCount final
{
public:
	struct FGameplayTag                           EventTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExactMatch;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventTagLockHolder_LockedCount) == 0x000008, "Wrong alignment on EventTagLockHolder_LockedCount");
static_assert(sizeof(EventTagLockHolder_LockedCount) == 0x000010, "Wrong size on EventTagLockHolder_LockedCount");
static_assert(offsetof(EventTagLockHolder_LockedCount, EventTag) == 0x000000, "Member 'EventTagLockHolder_LockedCount::EventTag' has a wrong offset!");
static_assert(offsetof(EventTagLockHolder_LockedCount, bExactMatch) == 0x000008, "Member 'EventTagLockHolder_LockedCount::bExactMatch' has a wrong offset!");
static_assert(offsetof(EventTagLockHolder_LockedCount, ReturnValue) == 0x00000C, "Member 'EventTagLockHolder_LockedCount::ReturnValue' has a wrong offset!");

// Function AJB.FadeInActionProxy.FadeIn
// 0x0018 (0x0018 - 0x0000)
struct FadeInActionProxy_FadeIn final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideFadeTime;                                  // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFadeInActionProxy*                     ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadeInActionProxy_FadeIn) == 0x000008, "Wrong alignment on FadeInActionProxy_FadeIn");
static_assert(sizeof(FadeInActionProxy_FadeIn) == 0x000018, "Wrong size on FadeInActionProxy_FadeIn");
static_assert(offsetof(FadeInActionProxy_FadeIn, WorldContextObject) == 0x000000, "Member 'FadeInActionProxy_FadeIn::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FadeInActionProxy_FadeIn, OverrideFadeTime) == 0x000008, "Member 'FadeInActionProxy_FadeIn::OverrideFadeTime' has a wrong offset!");
static_assert(offsetof(FadeInActionProxy_FadeIn, ReturnValue) == 0x000010, "Member 'FadeInActionProxy_FadeIn::ReturnValue' has a wrong offset!");

// Function AJB.FadeInActionProxy.OnEndFade
// 0x0001 (0x0001 - 0x0000)
struct FadeInActionProxy_OnEndFade final
{
public:
	EAJBFadeType                                  Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadeInActionProxy_OnEndFade) == 0x000001, "Wrong alignment on FadeInActionProxy_OnEndFade");
static_assert(sizeof(FadeInActionProxy_OnEndFade) == 0x000001, "Wrong size on FadeInActionProxy_OnEndFade");
static_assert(offsetof(FadeInActionProxy_OnEndFade, Type) == 0x000000, "Member 'FadeInActionProxy_OnEndFade::Type' has a wrong offset!");

// Function AJB.FadeOutActionProxy.FadeOut
// 0x0018 (0x0018 - 0x0000)
struct FadeOutActionProxy_FadeOut final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideFadeTime;                                  // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFadeOutActionProxy*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadeOutActionProxy_FadeOut) == 0x000008, "Wrong alignment on FadeOutActionProxy_FadeOut");
static_assert(sizeof(FadeOutActionProxy_FadeOut) == 0x000018, "Wrong size on FadeOutActionProxy_FadeOut");
static_assert(offsetof(FadeOutActionProxy_FadeOut, WorldContextObject) == 0x000000, "Member 'FadeOutActionProxy_FadeOut::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FadeOutActionProxy_FadeOut, OverrideFadeTime) == 0x000008, "Member 'FadeOutActionProxy_FadeOut::OverrideFadeTime' has a wrong offset!");
static_assert(offsetof(FadeOutActionProxy_FadeOut, ReturnValue) == 0x000010, "Member 'FadeOutActionProxy_FadeOut::ReturnValue' has a wrong offset!");

// Function AJB.FadeOutActionProxy.OnEndFade
// 0x0001 (0x0001 - 0x0000)
struct FadeOutActionProxy_OnEndFade final
{
public:
	EAJBFadeType                                  Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadeOutActionProxy_OnEndFade) == 0x000001, "Wrong alignment on FadeOutActionProxy_OnEndFade");
static_assert(sizeof(FadeOutActionProxy_OnEndFade) == 0x000001, "Wrong size on FadeOutActionProxy_OnEndFade");
static_assert(offsetof(FadeOutActionProxy_OnEndFade, Type) == 0x000000, "Member 'FadeOutActionProxy_OnEndFade::Type' has a wrong offset!");

// Function AJB.VictoryShotCapture.GetColorBuffer
// 0x0018 (0x0018 - 0x0000)
struct VictoryShotCapture_GetColorBuffer final
{
public:
	int32                                         Width_0;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height_0;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FColor>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VictoryShotCapture_GetColorBuffer) == 0x000008, "Wrong alignment on VictoryShotCapture_GetColorBuffer");
static_assert(sizeof(VictoryShotCapture_GetColorBuffer) == 0x000018, "Wrong size on VictoryShotCapture_GetColorBuffer");
static_assert(offsetof(VictoryShotCapture_GetColorBuffer, Width_0) == 0x000000, "Member 'VictoryShotCapture_GetColorBuffer::Width_0' has a wrong offset!");
static_assert(offsetof(VictoryShotCapture_GetColorBuffer, Height_0) == 0x000004, "Member 'VictoryShotCapture_GetColorBuffer::Height_0' has a wrong offset!");
static_assert(offsetof(VictoryShotCapture_GetColorBuffer, ReturnValue) == 0x000008, "Member 'VictoryShotCapture_GetColorBuffer::ReturnValue' has a wrong offset!");

}

