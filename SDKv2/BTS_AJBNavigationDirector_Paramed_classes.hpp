#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTS_AJBNavigationDirector_Paramed

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTS_AJBNavigationDirector_Paramed.BTS_AJBNavigationDirector_Paramed_C
// 0x00E0 (0x0178 - 0x0098)
class UBTS_AJBNavigationDirector_Paramed_C final : public UBTService_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0098(0x0008)(Transient, DuplicateTransient)
	struct FBlackboardKeySelector                 RO_FocusingEnemyKey;                               // 0x00A0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly)
	struct FBlackboardKeySelector                 AttackingGionKey;                                  // 0x00C8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly)
	struct FBlackboardKeySelector                 MovingGionKey;                                     // 0x00F0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly)
	class AAIController*                          MyAIController;                                    // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_AJBInGameAIRecognition_C*           Recognition;                                       // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SafeAreaNaviTag;                                   // 0x0128(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AEventTagLocker*                        SafeAreaLocker;                                    // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameAIImaginaryCharacter_C*    ImaginarySelf;                                     // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AEventTagLocker*                        NaviContextLocker;                                 // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AEventTagLocker*                        NaviErrorLocker1;                                  // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AEventTagLocker*                        NaviErrorLocker2;                                  // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AEventTagLocker*                        NaviActionLocker;                                  // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AEventTagLocker*                        NaviTestLocker;                                    // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInExecution;                                      // 0x0168(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_169[0x3];                                      // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GionUpdateInterval;                                // 0x016C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceFromPlayerUpdateInterval;                  // 0x0170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BTS_AJBNavigationDirector_Paramed(int32 EntryPoint);
	void InvokeTimers();
	void OnErrorContextPushed(const struct FGameplayTag& Tag);
	void OnContextPushed(const struct FGameplayTag& Tag);
	void LockSafeAreaIfNeeded();
	void UpdateByTick(float DeltaSeconds);
	void OnExecutionFinish(class AAIController* OwnerController, class APawn* ControlledPawn, EBTNodeResult NodeResult);
	void OnExecutionStart(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void OnEventUnlocked(const struct FGameplayTag& EventTag);
	void OnEventLocked(const struct FGameplayTag& EventTag);
	void ReceiveActivationAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void UpdateDistanceFromPlayer();
	void InvokeDistanceFromPlayerTimer();
	void InvokeGionTimer();
	void UpdateGion();
	void UpdateNaviTag();
	class ABP_AJBAIGionSource_C* FindMovingGionToPayAttention();
	class ABP_AJBAIGionSource_C* FindAttackingGionToPayAttention();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTS_AJBNavigationDirector_Paramed_C">();
	}
	static class UBTS_AJBNavigationDirector_Paramed_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTS_AJBNavigationDirector_Paramed_C>();
	}
};
static_assert(alignof(UBTS_AJBNavigationDirector_Paramed_C) == 0x000008, "Wrong alignment on UBTS_AJBNavigationDirector_Paramed_C");
static_assert(sizeof(UBTS_AJBNavigationDirector_Paramed_C) == 0x000178, "Wrong size on UBTS_AJBNavigationDirector_Paramed_C");
static_assert(offsetof(UBTS_AJBNavigationDirector_Paramed_C, UberGraphFrame) == 0x000098, "Member 'UBTS_AJBNavigationDirector_Paramed_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNavigationDirector_Paramed_C, RO_FocusingEnemyKey) == 0x0000A0, "Member 'UBTS_AJBNavigationDirector_Paramed_C::RO_FocusingEnemyKey' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNavigationDirector_Paramed_C, AttackingGionKey) == 0x0000C8, "Member 'UBTS_AJBNavigationDirector_Paramed_C::AttackingGionKey' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNavigationDirector_Paramed_C, MovingGionKey) == 0x0000F0, "Member 'UBTS_AJBNavigationDirector_Paramed_C::MovingGionKey' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNavigationDirector_Paramed_C, MyAIController) == 0x000118, "Member 'UBTS_AJBNavigationDirector_Paramed_C::MyAIController' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNavigationDirector_Paramed_C, Recognition) == 0x000120, "Member 'UBTS_AJBNavigationDirector_Paramed_C::Recognition' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNavigationDirector_Paramed_C, SafeAreaNaviTag) == 0x000128, "Member 'UBTS_AJBNavigationDirector_Paramed_C::SafeAreaNaviTag' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNavigationDirector_Paramed_C, SafeAreaLocker) == 0x000130, "Member 'UBTS_AJBNavigationDirector_Paramed_C::SafeAreaLocker' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNavigationDirector_Paramed_C, ImaginarySelf) == 0x000138, "Member 'UBTS_AJBNavigationDirector_Paramed_C::ImaginarySelf' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNavigationDirector_Paramed_C, NaviContextLocker) == 0x000140, "Member 'UBTS_AJBNavigationDirector_Paramed_C::NaviContextLocker' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNavigationDirector_Paramed_C, NaviErrorLocker1) == 0x000148, "Member 'UBTS_AJBNavigationDirector_Paramed_C::NaviErrorLocker1' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNavigationDirector_Paramed_C, NaviErrorLocker2) == 0x000150, "Member 'UBTS_AJBNavigationDirector_Paramed_C::NaviErrorLocker2' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNavigationDirector_Paramed_C, NaviActionLocker) == 0x000158, "Member 'UBTS_AJBNavigationDirector_Paramed_C::NaviActionLocker' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNavigationDirector_Paramed_C, NaviTestLocker) == 0x000160, "Member 'UBTS_AJBNavigationDirector_Paramed_C::NaviTestLocker' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNavigationDirector_Paramed_C, bInExecution) == 0x000168, "Member 'UBTS_AJBNavigationDirector_Paramed_C::bInExecution' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNavigationDirector_Paramed_C, GionUpdateInterval) == 0x00016C, "Member 'UBTS_AJBNavigationDirector_Paramed_C::GionUpdateInterval' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNavigationDirector_Paramed_C, DistanceFromPlayerUpdateInterval) == 0x000170, "Member 'UBTS_AJBNavigationDirector_Paramed_C::DistanceFromPlayerUpdateInterval' has a wrong offset!");

}

