#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ScoreBoardManager

#include "Basic.hpp"

#include "BP_ScoreBoardManager_classes.hpp"
#include "BP_ScoreBoardManager_parameters.hpp"


namespace SDK
{

// Function BP_ScoreBoardManager.BP_ScoreBoardManager_C.OnUpdateScoreBoard__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_ScoreBoardManager_C::OnUpdateScoreBoard__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ScoreBoardManager_C", "OnUpdateScoreBoard__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ScoreBoardManager.BP_ScoreBoardManager_C.ExecuteUbergraph_BP_ScoreBoardManager
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ScoreBoardManager_C::ExecuteUbergraph_BP_ScoreBoardManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ScoreBoardManager_C", "ExecuteUbergraph_BP_ScoreBoardManager");

	Params::BP_ScoreBoardManager_C_ExecuteUbergraph_BP_ScoreBoardManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ScoreBoardManager.BP_ScoreBoardManager_C.OnBegin_Standby
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     PrevState                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ABP_ScoreBoardManager_C::OnBegin_Standby(const struct FGameplayTag& PrevState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ScoreBoardManager_C", "OnBegin_Standby");

	Params::BP_ScoreBoardManager_C_OnBegin_Standby Parms{};

	Parms.PrevState = std::move(PrevState);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ScoreBoardManager.BP_ScoreBoardManager_C.FlowBind
// (BlueprintCallable, BlueprintEvent)

void ABP_ScoreBoardManager_C::FlowBind()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ScoreBoardManager_C", "FlowBind");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ScoreBoardManager.BP_ScoreBoardManager_C.OnDeadCharacter
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DeadActor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ScoreBoardManager_C::OnDeadCharacter(const struct FGameplayTag& DamageType, class AActor* DeadActor, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ScoreBoardManager_C", "OnDeadCharacter");

	Params::BP_ScoreBoardManager_C_OnDeadCharacter Parms{};

	Parms.DamageType = std::move(DamageType);
	Parms.DeadActor = DeadActor;
	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ScoreBoardManager.BP_ScoreBoardManager_C.OnRecieveDamage
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bRemainHP                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDamageIsCut                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bNotUseCollision                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ScoreBoardManager_C::OnRecieveDamage(int32 Damage, const struct FGameplayTag& DamageType, class AActor* DamageCauser, bool bRemainHP, bool bDamageIsCut, bool bNotUseCollision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ScoreBoardManager_C", "OnRecieveDamage");

	Params::BP_ScoreBoardManager_C_OnRecieveDamage Parms{};

	Parms.Damage = Damage;
	Parms.DamageType = std::move(DamageType);
	Parms.DamageCauser = DamageCauser;
	Parms.bRemainHP = bRemainHP;
	Parms.bDamageIsCut = bDamageIsCut;
	Parms.bNotUseCollision = bNotUseCollision;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ScoreBoardManager.BP_ScoreBoardManager_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ScoreBoardManager_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ScoreBoardManager_C", "ReceiveTick");

	Params::BP_ScoreBoardManager_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ScoreBoardManager.BP_ScoreBoardManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_ScoreBoardManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ScoreBoardManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ScoreBoardManager.BP_ScoreBoardManager_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_ScoreBoardManager_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ScoreBoardManager_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ScoreBoardManager.BP_ScoreBoardManager_C.AddKnockDownCount
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   PlayerID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ScoreBoardManager_C::AddKnockDownCount(uint8 PlayerID, int32 Value, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ScoreBoardManager_C", "AddKnockDownCount");

	Params::BP_ScoreBoardManager_C_AddKnockDownCount Parms{};

	Parms.PlayerID = PlayerID;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function BP_ScoreBoardManager.BP_ScoreBoardManager_C.AddTotalDamage
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   PlayerID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ScoreBoardManager_C::AddTotalDamage(uint8 PlayerID, int32 Damage, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ScoreBoardManager_C", "AddTotalDamage");

	Params::BP_ScoreBoardManager_C_AddTotalDamage Parms{};

	Parms.PlayerID = PlayerID;
	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function BP_ScoreBoardManager.BP_ScoreBoardManager_C.OnRep_ScoreBoardPlayerInfo
// (BlueprintCallable, BlueprintEvent)

void ABP_ScoreBoardManager_C::OnRep_ScoreBoardPlayerInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ScoreBoardManager_C", "OnRep_ScoreBoardPlayerInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ScoreBoardManager.BP_ScoreBoardManager_C.ScoreDebugPrint
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_ScoreBoardManager_C::ScoreDebugPrint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ScoreBoardManager_C", "ScoreDebugPrint");

	UObject::ProcessEvent(Func, nullptr);
}

}

