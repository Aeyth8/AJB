#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBStoneHookJump

#include "Basic.hpp"

#include "BP_AJBStoneHookJump_classes.hpp"
#include "BP_AJBStoneHookJump_parameters.hpp"


namespace SDK
{

// Function BP_AJBStoneHookJump.BP_AJBStoneHookJump_C.ExecuteUbergraph_BP_AJBStoneHookJump
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBStoneHookJump_C::ExecuteUbergraph_BP_AJBStoneHookJump(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBStoneHookJump_C", "ExecuteUbergraph_BP_AJBStoneHookJump");

	Params::BP_AJBStoneHookJump_C_ExecuteUbergraph_BP_AJBStoneHookJump Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBStoneHookJump.BP_AJBStoneHookJump_C.OnSetViewTargetToNewSpectator_Event
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBStoneHookJump_C::OnSetViewTargetToNewSpectator_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBStoneHookJump_C", "OnSetViewTargetToNewSpectator_Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBStoneHookJump.BP_AJBStoneHookJump_C.ROS_ResetVelocity
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void UBP_AJBStoneHookJump_C::ROS_ResetVelocity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBStoneHookJump_C", "ROS_ResetVelocity");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBStoneHookJump.BP_AJBStoneHookJump_C.CheckPassiveContainer
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTagContainer            PassiveGameplayTagContainer                            (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_AJBStoneHookJump_C::CheckPassiveContainer(const struct FGameplayTagContainer& PassiveGameplayTagContainer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBStoneHookJump_C", "CheckPassiveContainer");

	Params::BP_AJBStoneHookJump_C_CheckPassiveContainer Parms{};

	Parms.PassiveGameplayTagContainer = std::move(PassiveGameplayTagContainer);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBStoneHookJump.BP_AJBStoneHookJump_C.OnPassiveAdded
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     AddCondition                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void UBP_AJBStoneHookJump_C::OnPassiveAdded(const struct FGameplayTag& AddCondition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBStoneHookJump_C", "OnPassiveAdded");

	Params::BP_AJBStoneHookJump_C_OnPassiveAdded Parms{};

	Parms.AddCondition = std::move(AddCondition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBStoneHookJump.BP_AJBStoneHookJump_C.CheckPassive
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     PassiveTag_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void UBP_AJBStoneHookJump_C::CheckPassive(const struct FGameplayTag& PassiveTag_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBStoneHookJump_C", "CheckPassive");

	Params::BP_AJBStoneHookJump_C_CheckPassive Parms{};

	Parms.PassiveTag_0 = std::move(PassiveTag_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBStoneHookJump.BP_AJBStoneHookJump_C.CheckJumpState
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBStoneHookJump_C::CheckJumpState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBStoneHookJump_C", "CheckJumpState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBStoneHookJump.BP_AJBStoneHookJump_C.ROS_ReLaunch
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          LastLaunchVelocity                                     (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void UBP_AJBStoneHookJump_C::ROS_ReLaunch(const struct FVector& LastLaunchVelocity, const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBStoneHookJump_C", "ROS_ReLaunch");

	Params::BP_AJBStoneHookJump_C_ROS_ReLaunch Parms{};

	Parms.LastLaunchVelocity = std::move(LastLaunchVelocity);
	Parms.Transform = std::move(Transform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBStoneHookJump.BP_AJBStoneHookJump_C.SetEnablePostProcess
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnable                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBStoneHookJump_C::SetEnablePostProcess(bool IsEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBStoneHookJump_C", "SetEnablePostProcess");

	Params::BP_AJBStoneHookJump_C_SetEnablePostProcess Parms{};

	Parms.IsEnable = IsEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBStoneHookJump.BP_AJBStoneHookJump_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_AJBStoneHookJump_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBStoneHookJump_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBStoneHookJump.BP_AJBStoneHookJump_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBStoneHookJump_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBStoneHookJump_C", "ReceiveTick");

	Params::BP_AJBStoneHookJump_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBStoneHookJump.BP_AJBStoneHookJump_C.OnActionInactivate
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bTriggeredByStand                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBStoneHookJump_C::OnActionInactivate(bool bTriggeredByStand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBStoneHookJump_C", "OnActionInactivate");

	Params::BP_AJBStoneHookJump_C_OnActionInactivate Parms{};

	Parms.bTriggeredByStand = bTriggeredByStand;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBStoneHookJump.BP_AJBStoneHookJump_C.OnActionActivate
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bTriggeredByStand                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBStoneHookJump_C::OnActionActivate(bool bTriggeredByStand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBStoneHookJump_C", "OnActionActivate");

	Params::BP_AJBStoneHookJump_C_OnActionActivate Parms{};

	Parms.bTriggeredByStand = bTriggeredByStand;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBStoneHookJump.BP_AJBStoneHookJump_C.NotifyTheWorld
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAJBInGameCharacter*              Operator                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EGeneralTiming                          Timing                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bOperatorIsEmpty                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBStoneHookJump_C::NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBStoneHookJump_C", "NotifyTheWorld");

	Params::BP_AJBStoneHookJump_C_NotifyTheWorld Parms{};

	Parms.Operator = Operator;
	Parms.Time = Time;
	Parms.Timing = Timing;
	Parms.bEnable = bEnable;
	Parms.bOperatorIsEmpty = bOperatorIsEmpty;

	UObject::ProcessEvent(Func, &Parms);
}

}

