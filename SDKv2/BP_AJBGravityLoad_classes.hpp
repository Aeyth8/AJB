#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBGravityLoad

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_AJBPassiveSkillBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBGravityLoad.BP_AJBGravityLoad_C
// 0x0030 (0x0220 - 0x01F0)
class UBP_AJBGravityLoad_C final : public UBP_AJBPassiveSkillBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBGravityLoad_C;                // 0x01F0(0x0008)(Transient, DuplicateTransient)
	float                                         CharacterMoveSpeedScale;                           // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StandMoveSpeedScale;                               // 0x01FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CharacterJumpSpeedScale;                           // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CloseRangeAttackRangeScale;                        // 0x0204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ProjectileGravityPower;                            // 0x0208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ProjectileGravitySpeedScale;                       // 0x020C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovementDistanceScale;                             // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StandMovementDistanceScale;                        // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StandLaunchVelocityScale;                          // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CharacterMoveSpeedScaleByStand;                    // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBGravityLoad(int32 EntryPoint);
	void PlaySE(class UObject* Causer);
	void ReceiveBeginPlay();
	void OnActionInactivate(bool bTriggeredByStand);
	void OnActionActivate(bool bTriggeredByStand);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBGravityLoad_C">();
	}
	static class UBP_AJBGravityLoad_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBGravityLoad_C>();
	}
};
static_assert(alignof(UBP_AJBGravityLoad_C) == 0x000008, "Wrong alignment on UBP_AJBGravityLoad_C");
static_assert(sizeof(UBP_AJBGravityLoad_C) == 0x000220, "Wrong size on UBP_AJBGravityLoad_C");
static_assert(offsetof(UBP_AJBGravityLoad_C, UberGraphFrame_BP_AJBGravityLoad_C) == 0x0001F0, "Member 'UBP_AJBGravityLoad_C::UberGraphFrame_BP_AJBGravityLoad_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBGravityLoad_C, CharacterMoveSpeedScale) == 0x0001F8, "Member 'UBP_AJBGravityLoad_C::CharacterMoveSpeedScale' has a wrong offset!");
static_assert(offsetof(UBP_AJBGravityLoad_C, StandMoveSpeedScale) == 0x0001FC, "Member 'UBP_AJBGravityLoad_C::StandMoveSpeedScale' has a wrong offset!");
static_assert(offsetof(UBP_AJBGravityLoad_C, CharacterJumpSpeedScale) == 0x000200, "Member 'UBP_AJBGravityLoad_C::CharacterJumpSpeedScale' has a wrong offset!");
static_assert(offsetof(UBP_AJBGravityLoad_C, CloseRangeAttackRangeScale) == 0x000204, "Member 'UBP_AJBGravityLoad_C::CloseRangeAttackRangeScale' has a wrong offset!");
static_assert(offsetof(UBP_AJBGravityLoad_C, ProjectileGravityPower) == 0x000208, "Member 'UBP_AJBGravityLoad_C::ProjectileGravityPower' has a wrong offset!");
static_assert(offsetof(UBP_AJBGravityLoad_C, ProjectileGravitySpeedScale) == 0x00020C, "Member 'UBP_AJBGravityLoad_C::ProjectileGravitySpeedScale' has a wrong offset!");
static_assert(offsetof(UBP_AJBGravityLoad_C, MovementDistanceScale) == 0x000210, "Member 'UBP_AJBGravityLoad_C::MovementDistanceScale' has a wrong offset!");
static_assert(offsetof(UBP_AJBGravityLoad_C, StandMovementDistanceScale) == 0x000214, "Member 'UBP_AJBGravityLoad_C::StandMovementDistanceScale' has a wrong offset!");
static_assert(offsetof(UBP_AJBGravityLoad_C, StandLaunchVelocityScale) == 0x000218, "Member 'UBP_AJBGravityLoad_C::StandLaunchVelocityScale' has a wrong offset!");
static_assert(offsetof(UBP_AJBGravityLoad_C, CharacterMoveSpeedScaleByStand) == 0x00021C, "Member 'UBP_AJBGravityLoad_C::CharacterMoveSpeedScaleByStand' has a wrong offset!");

}

