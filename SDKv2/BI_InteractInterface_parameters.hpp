#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BI_InteractInterface

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BI_InteractInterface.BI_InteractInterface_C.OnInteract
// 0x0008 (0x0008 - 0x0000)
struct BI_InteractInterface_C_OnInteract final
{
public:
	class AActor*                                 InteractActor;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BI_InteractInterface_C_OnInteract) == 0x000008, "Wrong alignment on BI_InteractInterface_C_OnInteract");
static_assert(sizeof(BI_InteractInterface_C_OnInteract) == 0x000008, "Wrong size on BI_InteractInterface_C_OnInteract");
static_assert(offsetof(BI_InteractInterface_C_OnInteract, InteractActor) == 0x000000, "Member 'BI_InteractInterface_C_OnInteract::InteractActor' has a wrong offset!");

// Function BI_InteractInterface.BI_InteractInterface_C.Interactable
// 0x0010 (0x0010 - 0x0000)
struct BI_InteractInterface_C_Interactable final
{
public:
	class ABP_AJBInGameCharacter_C*               Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceLength;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_InteractInterface_C_Interactable) == 0x000008, "Wrong alignment on BI_InteractInterface_C_Interactable");
static_assert(sizeof(BI_InteractInterface_C_Interactable) == 0x000010, "Wrong size on BI_InteractInterface_C_Interactable");
static_assert(offsetof(BI_InteractInterface_C_Interactable, Character) == 0x000000, "Member 'BI_InteractInterface_C_Interactable::Character' has a wrong offset!");
static_assert(offsetof(BI_InteractInterface_C_Interactable, TraceLength) == 0x000008, "Member 'BI_InteractInterface_C_Interactable::TraceLength' has a wrong offset!");
static_assert(offsetof(BI_InteractInterface_C_Interactable, ReturnValue) == 0x00000C, "Member 'BI_InteractInterface_C_Interactable::ReturnValue' has a wrong offset!");

// Function BI_InteractInterface.BI_InteractInterface_C.InteractInstantly
// 0x0010 (0x0010 - 0x0000)
struct BI_InteractInterface_C_InteractInstantly final
{
public:
	class ABP_AJBInGameCharacter_C*               Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_InteractInterface_C_InteractInstantly) == 0x000008, "Wrong alignment on BI_InteractInterface_C_InteractInstantly");
static_assert(sizeof(BI_InteractInterface_C_InteractInstantly) == 0x000010, "Wrong size on BI_InteractInterface_C_InteractInstantly");
static_assert(offsetof(BI_InteractInterface_C_InteractInstantly, Character) == 0x000000, "Member 'BI_InteractInterface_C_InteractInstantly::Character' has a wrong offset!");
static_assert(offsetof(BI_InteractInterface_C_InteractInstantly, ReturnValue) == 0x000008, "Member 'BI_InteractInterface_C_InteractInstantly::ReturnValue' has a wrong offset!");

// Function BI_InteractInterface.BI_InteractInterface_C.OnROSInteract
// 0x0010 (0x0010 - 0x0000)
struct BI_InteractInterface_C_OnROSInteract final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ServerIsInteractingPlayer;                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_InteractInterface_C_OnROSInteract) == 0x000008, "Wrong alignment on BI_InteractInterface_C_OnROSInteract");
static_assert(sizeof(BI_InteractInterface_C_OnROSInteract) == 0x000010, "Wrong size on BI_InteractInterface_C_OnROSInteract");
static_assert(offsetof(BI_InteractInterface_C_OnROSInteract, InteractingActor) == 0x000000, "Member 'BI_InteractInterface_C_OnROSInteract::InteractingActor' has a wrong offset!");
static_assert(offsetof(BI_InteractInterface_C_OnROSInteract, ServerIsInteractingPlayer) == 0x000008, "Member 'BI_InteractInterface_C_OnROSInteract::ServerIsInteractingPlayer' has a wrong offset!");

// Function BI_InteractInterface.BI_InteractInterface_C.OnLocalInteract
// 0x0010 (0x0010 - 0x0000)
struct BI_InteractInterface_C_OnLocalInteract final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_InteractInterface_C_OnLocalInteract) == 0x000008, "Wrong alignment on BI_InteractInterface_C_OnLocalInteract");
static_assert(sizeof(BI_InteractInterface_C_OnLocalInteract) == 0x000010, "Wrong size on BI_InteractInterface_C_OnLocalInteract");
static_assert(offsetof(BI_InteractInterface_C_OnLocalInteract, InteractingActor) == 0x000000, "Member 'BI_InteractInterface_C_OnLocalInteract::InteractingActor' has a wrong offset!");
static_assert(offsetof(BI_InteractInterface_C_OnLocalInteract, bSuccess) == 0x000008, "Member 'BI_InteractInterface_C_OnLocalInteract::bSuccess' has a wrong offset!");

// Function BI_InteractInterface.BI_InteractInterface_C.TryGetInteractableText
// 0x0028 (0x0028 - 0x0000)
struct BI_InteractInterface_C_TryGetInteractableText final
{
public:
	class ABP_AJBInGameCharacter_C*               OperatorCharacter;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   InteractMessage;                                   // 0x0010(0x0018)(Parm, OutParm)
};
static_assert(alignof(BI_InteractInterface_C_TryGetInteractableText) == 0x000008, "Wrong alignment on BI_InteractInterface_C_TryGetInteractableText");
static_assert(sizeof(BI_InteractInterface_C_TryGetInteractableText) == 0x000028, "Wrong size on BI_InteractInterface_C_TryGetInteractableText");
static_assert(offsetof(BI_InteractInterface_C_TryGetInteractableText, OperatorCharacter) == 0x000000, "Member 'BI_InteractInterface_C_TryGetInteractableText::OperatorCharacter' has a wrong offset!");
static_assert(offsetof(BI_InteractInterface_C_TryGetInteractableText, bSuccess) == 0x000008, "Member 'BI_InteractInterface_C_TryGetInteractableText::bSuccess' has a wrong offset!");
static_assert(offsetof(BI_InteractInterface_C_TryGetInteractableText, InteractMessage) == 0x000010, "Member 'BI_InteractInterface_C_TryGetInteractableText::InteractMessage' has a wrong offset!");

// Function BI_InteractInterface.BI_InteractInterface_C.CheckErrorCondition
// 0x0002 (0x0002 - 0x0000)
struct BI_InteractInterface_C_CheckErrorCondition final
{
public:
	bool                                          bErrorCondition;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         ErrorType;                                         // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BI_InteractInterface_C_CheckErrorCondition) == 0x000001, "Wrong alignment on BI_InteractInterface_C_CheckErrorCondition");
static_assert(sizeof(BI_InteractInterface_C_CheckErrorCondition) == 0x000002, "Wrong size on BI_InteractInterface_C_CheckErrorCondition");
static_assert(offsetof(BI_InteractInterface_C_CheckErrorCondition, bErrorCondition) == 0x000000, "Member 'BI_InteractInterface_C_CheckErrorCondition::bErrorCondition' has a wrong offset!");
static_assert(offsetof(BI_InteractInterface_C_CheckErrorCondition, ErrorType) == 0x000001, "Member 'BI_InteractInterface_C_CheckErrorCondition::ErrorType' has a wrong offset!");

// Function BI_InteractInterface.BI_InteractInterface_C.GetInteractState
// 0x0001 (0x0001 - 0x0000)
struct BI_InteractInterface_C_GetInteractState final
{
public:
	uint8                                         InteractState;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BI_InteractInterface_C_GetInteractState) == 0x000001, "Wrong alignment on BI_InteractInterface_C_GetInteractState");
static_assert(sizeof(BI_InteractInterface_C_GetInteractState) == 0x000001, "Wrong size on BI_InteractInterface_C_GetInteractState");
static_assert(offsetof(BI_InteractInterface_C_GetInteractState, InteractState) == 0x000000, "Member 'BI_InteractInterface_C_GetInteractState::InteractState' has a wrong offset!");

// Function BI_InteractInterface.BI_InteractInterface_C.GetInteractPriority
// 0x0004 (0x0004 - 0x0000)
struct BI_InteractInterface_C_GetInteractPriority final
{
public:
	int32                                         Priority;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BI_InteractInterface_C_GetInteractPriority) == 0x000004, "Wrong alignment on BI_InteractInterface_C_GetInteractPriority");
static_assert(sizeof(BI_InteractInterface_C_GetInteractPriority) == 0x000004, "Wrong size on BI_InteractInterface_C_GetInteractPriority");
static_assert(offsetof(BI_InteractInterface_C_GetInteractPriority, Priority) == 0x000000, "Member 'BI_InteractInterface_C_GetInteractPriority::Priority' has a wrong offset!");

// Function BI_InteractInterface.BI_InteractInterface_C.GetInteractBoundForCulling
// 0x0018 (0x0018 - 0x0000)
struct BI_InteractInterface_C_GetInteractBoundForCulling final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Center;                                            // 0x0008(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BI_InteractInterface_C_GetInteractBoundForCulling) == 0x000008, "Wrong alignment on BI_InteractInterface_C_GetInteractBoundForCulling");
static_assert(sizeof(BI_InteractInterface_C_GetInteractBoundForCulling) == 0x000018, "Wrong size on BI_InteractInterface_C_GetInteractBoundForCulling");
static_assert(offsetof(BI_InteractInterface_C_GetInteractBoundForCulling, InteractingActor) == 0x000000, "Member 'BI_InteractInterface_C_GetInteractBoundForCulling::InteractingActor' has a wrong offset!");
static_assert(offsetof(BI_InteractInterface_C_GetInteractBoundForCulling, Center) == 0x000008, "Member 'BI_InteractInterface_C_GetInteractBoundForCulling::Center' has a wrong offset!");
static_assert(offsetof(BI_InteractInterface_C_GetInteractBoundForCulling, Radius) == 0x000014, "Member 'BI_InteractInterface_C_GetInteractBoundForCulling::Radius' has a wrong offset!");

// Function BI_InteractInterface.BI_InteractInterface_C.IfNeedsExclusiveInteractStrictly
// 0x0001 (0x0001 - 0x0000)
struct BI_InteractInterface_C_IfNeedsExclusiveInteractStrictly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_InteractInterface_C_IfNeedsExclusiveInteractStrictly) == 0x000001, "Wrong alignment on BI_InteractInterface_C_IfNeedsExclusiveInteractStrictly");
static_assert(sizeof(BI_InteractInterface_C_IfNeedsExclusiveInteractStrictly) == 0x000001, "Wrong size on BI_InteractInterface_C_IfNeedsExclusiveInteractStrictly");
static_assert(offsetof(BI_InteractInterface_C_IfNeedsExclusiveInteractStrictly, ReturnValue) == 0x000000, "Member 'BI_InteractInterface_C_IfNeedsExclusiveInteractStrictly::ReturnValue' has a wrong offset!");

// Function BI_InteractInterface.BI_InteractInterface_C.IfBlockInteract
// 0x0010 (0x0010 - 0x0000)
struct BI_InteractInterface_C_IfBlockInteract final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_InteractInterface_C_IfBlockInteract) == 0x000008, "Wrong alignment on BI_InteractInterface_C_IfBlockInteract");
static_assert(sizeof(BI_InteractInterface_C_IfBlockInteract) == 0x000010, "Wrong size on BI_InteractInterface_C_IfBlockInteract");
static_assert(offsetof(BI_InteractInterface_C_IfBlockInteract, InteractingActor) == 0x000000, "Member 'BI_InteractInterface_C_IfBlockInteract::InteractingActor' has a wrong offset!");
static_assert(offsetof(BI_InteractInterface_C_IfBlockInteract, ReturnValue) == 0x000008, "Member 'BI_InteractInterface_C_IfBlockInteract::ReturnValue' has a wrong offset!");

// Function BI_InteractInterface.BI_InteractInterface_C.OnInteractionBlocked
// 0x0008 (0x0008 - 0x0000)
struct BI_InteractInterface_C_OnInteractionBlocked final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BI_InteractInterface_C_OnInteractionBlocked) == 0x000008, "Wrong alignment on BI_InteractInterface_C_OnInteractionBlocked");
static_assert(sizeof(BI_InteractInterface_C_OnInteractionBlocked) == 0x000008, "Wrong size on BI_InteractInterface_C_OnInteractionBlocked");
static_assert(offsetof(BI_InteractInterface_C_OnInteractionBlocked, InteractingActor) == 0x000000, "Member 'BI_InteractInterface_C_OnInteractionBlocked::InteractingActor' has a wrong offset!");

// Function BI_InteractInterface.BI_InteractInterface_C.ShouldPrioritizedThanPrepaidSkillCancel
// 0x0001 (0x0001 - 0x0000)
struct BI_InteractInterface_C_ShouldPrioritizedThanPrepaidSkillCancel final
{
public:
	bool                                          bShouldPriorirized;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_InteractInterface_C_ShouldPrioritizedThanPrepaidSkillCancel) == 0x000001, "Wrong alignment on BI_InteractInterface_C_ShouldPrioritizedThanPrepaidSkillCancel");
static_assert(sizeof(BI_InteractInterface_C_ShouldPrioritizedThanPrepaidSkillCancel) == 0x000001, "Wrong size on BI_InteractInterface_C_ShouldPrioritizedThanPrepaidSkillCancel");
static_assert(offsetof(BI_InteractInterface_C_ShouldPrioritizedThanPrepaidSkillCancel, bShouldPriorirized) == 0x000000, "Member 'BI_InteractInterface_C_ShouldPrioritizedThanPrepaidSkillCancel::bShouldPriorirized' has a wrong offset!");

}

