#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BI_AJBGameplayTagOwnerInterface

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function BI_AJBGameplayTagOwnerInterface.BI_AJBGameplayTagOwnerInterface_C.AddGameplayTag
// 0x0028 (0x0028 - 0x0000)
struct BI_AJBGameplayTagOwnerInterface_C_AddGameplayTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Operator;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Target;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CauserType;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         SerialNumber;                                      // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BI_AJBGameplayTagOwnerInterface_C_AddGameplayTag) == 0x000008, "Wrong alignment on BI_AJBGameplayTagOwnerInterface_C_AddGameplayTag");
static_assert(sizeof(BI_AJBGameplayTagOwnerInterface_C_AddGameplayTag) == 0x000028, "Wrong size on BI_AJBGameplayTagOwnerInterface_C_AddGameplayTag");
static_assert(offsetof(BI_AJBGameplayTagOwnerInterface_C_AddGameplayTag, Tag) == 0x000000, "Member 'BI_AJBGameplayTagOwnerInterface_C_AddGameplayTag::Tag' has a wrong offset!");
static_assert(offsetof(BI_AJBGameplayTagOwnerInterface_C_AddGameplayTag, Operator) == 0x000008, "Member 'BI_AJBGameplayTagOwnerInterface_C_AddGameplayTag::Operator' has a wrong offset!");
static_assert(offsetof(BI_AJBGameplayTagOwnerInterface_C_AddGameplayTag, Target) == 0x000010, "Member 'BI_AJBGameplayTagOwnerInterface_C_AddGameplayTag::Target' has a wrong offset!");
static_assert(offsetof(BI_AJBGameplayTagOwnerInterface_C_AddGameplayTag, CauserType) == 0x000018, "Member 'BI_AJBGameplayTagOwnerInterface_C_AddGameplayTag::CauserType' has a wrong offset!");
static_assert(offsetof(BI_AJBGameplayTagOwnerInterface_C_AddGameplayTag, SerialNumber) == 0x000020, "Member 'BI_AJBGameplayTagOwnerInterface_C_AddGameplayTag::SerialNumber' has a wrong offset!");

// Function BI_AJBGameplayTagOwnerInterface.BI_AJBGameplayTagOwnerInterface_C.RemoveGameplayTag
// 0x0008 (0x0008 - 0x0000)
struct BI_AJBGameplayTagOwnerInterface_C_RemoveGameplayTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BI_AJBGameplayTagOwnerInterface_C_RemoveGameplayTag) == 0x000008, "Wrong alignment on BI_AJBGameplayTagOwnerInterface_C_RemoveGameplayTag");
static_assert(sizeof(BI_AJBGameplayTagOwnerInterface_C_RemoveGameplayTag) == 0x000008, "Wrong size on BI_AJBGameplayTagOwnerInterface_C_RemoveGameplayTag");
static_assert(offsetof(BI_AJBGameplayTagOwnerInterface_C_RemoveGameplayTag, Tag) == 0x000000, "Member 'BI_AJBGameplayTagOwnerInterface_C_RemoveGameplayTag::Tag' has a wrong offset!");

// Function BI_AJBGameplayTagOwnerInterface.BI_AJBGameplayTagOwnerInterface_C.GetGameplayTags
// 0x0020 (0x0020 - 0x0000)
struct BI_AJBGameplayTagOwnerInterface_C_GetGameplayTags final
{
public:
	struct FGameplayTagContainer                  TagContainerCopy;                                  // 0x0000(0x0020)(Parm, OutParm)
};
static_assert(alignof(BI_AJBGameplayTagOwnerInterface_C_GetGameplayTags) == 0x000008, "Wrong alignment on BI_AJBGameplayTagOwnerInterface_C_GetGameplayTags");
static_assert(sizeof(BI_AJBGameplayTagOwnerInterface_C_GetGameplayTags) == 0x000020, "Wrong size on BI_AJBGameplayTagOwnerInterface_C_GetGameplayTags");
static_assert(offsetof(BI_AJBGameplayTagOwnerInterface_C_GetGameplayTags, TagContainerCopy) == 0x000000, "Member 'BI_AJBGameplayTagOwnerInterface_C_GetGameplayTags::TagContainerCopy' has a wrong offset!");

// Function BI_AJBGameplayTagOwnerInterface.BI_AJBGameplayTagOwnerInterface_C.AddGameplayTagWithFloat
// 0x0010 (0x0010 - 0x0000)
struct BI_AJBGameplayTagOwnerInterface_C_AddGameplayTagWithFloat final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	float                                         FloatValue;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BI_AJBGameplayTagOwnerInterface_C_AddGameplayTagWithFloat) == 0x000008, "Wrong alignment on BI_AJBGameplayTagOwnerInterface_C_AddGameplayTagWithFloat");
static_assert(sizeof(BI_AJBGameplayTagOwnerInterface_C_AddGameplayTagWithFloat) == 0x000010, "Wrong size on BI_AJBGameplayTagOwnerInterface_C_AddGameplayTagWithFloat");
static_assert(offsetof(BI_AJBGameplayTagOwnerInterface_C_AddGameplayTagWithFloat, Tag) == 0x000000, "Member 'BI_AJBGameplayTagOwnerInterface_C_AddGameplayTagWithFloat::Tag' has a wrong offset!");
static_assert(offsetof(BI_AJBGameplayTagOwnerInterface_C_AddGameplayTagWithFloat, FloatValue) == 0x000008, "Member 'BI_AJBGameplayTagOwnerInterface_C_AddGameplayTagWithFloat::FloatValue' has a wrong offset!");

}

