#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_AJBFindNearestWindow

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTT_AJBFindNearestWindow.BTT_AJBFindNearestWindow_C
// 0x00B0 (0x0150 - 0x00A0)
class UBTT_AJBFindNearestWindow_C final : public UBTTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(Transient, DuplicateTransient)
	struct FBlackboardKeySelector                 WindowActorKey;                                    // 0x00A8(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 PathToWindowKey;                                   // 0x00D0(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 DestinationKey;                                    // 0x00F8(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 LookForDirKey;                                     // 0x0120(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly)
	bool                                          bFromIndoor;                                       // 0x0148(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BTT_AJBFindNearestWindow(int32 EntryPoint);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	class AActor* FindNearestWindow(class UBP_AJBInGameAIRecognition_C* Recognition, const struct FBlackboardKeySelector& WindowObjectToIgnore, class UNavigationPath** PathToNearestActor1);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTT_AJBFindNearestWindow_C">();
	}
	static class UBTT_AJBFindNearestWindow_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTT_AJBFindNearestWindow_C>();
	}
};
static_assert(alignof(UBTT_AJBFindNearestWindow_C) == 0x000008, "Wrong alignment on UBTT_AJBFindNearestWindow_C");
static_assert(sizeof(UBTT_AJBFindNearestWindow_C) == 0x000150, "Wrong size on UBTT_AJBFindNearestWindow_C");
static_assert(offsetof(UBTT_AJBFindNearestWindow_C, UberGraphFrame) == 0x0000A0, "Member 'UBTT_AJBFindNearestWindow_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTT_AJBFindNearestWindow_C, WindowActorKey) == 0x0000A8, "Member 'UBTT_AJBFindNearestWindow_C::WindowActorKey' has a wrong offset!");
static_assert(offsetof(UBTT_AJBFindNearestWindow_C, PathToWindowKey) == 0x0000D0, "Member 'UBTT_AJBFindNearestWindow_C::PathToWindowKey' has a wrong offset!");
static_assert(offsetof(UBTT_AJBFindNearestWindow_C, DestinationKey) == 0x0000F8, "Member 'UBTT_AJBFindNearestWindow_C::DestinationKey' has a wrong offset!");
static_assert(offsetof(UBTT_AJBFindNearestWindow_C, LookForDirKey) == 0x000120, "Member 'UBTT_AJBFindNearestWindow_C::LookForDirKey' has a wrong offset!");
static_assert(offsetof(UBTT_AJBFindNearestWindow_C, bFromIndoor) == 0x000148, "Member 'UBTT_AJBFindNearestWindow_C::bFromIndoor' has a wrong offset!");

}

