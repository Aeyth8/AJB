#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBAutoHealing

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "AJB_structs.hpp"


namespace SDK::Params
{

// Function BP_AJBAutoHealing.BP_AJBAutoHealing_C.ExecuteUbergraph_BP_AJBAutoHealing
// 0x00E0 (0x00E0 - 0x0000)
struct BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue1;     // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckNecessaryHealing_bNecessary;         // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_EffectiveValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bIsFullHP;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bHealingJustStarted;            // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsServer_ReturnValue1;                    // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_CalcHealingMaxHP_MaxHP;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_CalcHealingMaxHP_MaxHP1;                  // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character1;     // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PossibleHealing_bPossibleHealing;         // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryToSpeakVoice_bWillBeSpoken;            // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryToSpeakVoice_bWillBeSpoken1;           // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bTriggeredByStand;                    // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4F[0x1];                                       // 0x004F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           CallFunc_RequestWwiseEventOnLocal_AkComponent;     // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Damage;                         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_CustomEvent_DamageType;                     // 0x0060(0x0008)(NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_DamageCauser;                   // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bRemainHP;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bDamageIsCut;                   // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bNotUseCollision;               // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_73[0x1];                                       // 0x0073(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(int32 Damage, const struct FGameplayTag& DamageType, class AActor* DamageCauser, bool bRemainHP, bool bDamageIsCut, bool bNotUseCollision)> K2Node_CreateDelegate_OutputDelegate;              // 0x0078(0x0010)(ZeroConstructor, NoDestructor)
	class AActor*                                 CallFunc_GetOwner_ReturnValue2;                    // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAutoHealingState                             K2Node_CustomEvent_NewState1;                      // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character2;     // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EAutoHealingState                             K2Node_CustomEvent_NewState;                       // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue3;                    // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBInGameCharacterBase*                K2Node_DynamicCast_AsAJBIn_Game_Character_Base;    // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue4;                    // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character3;     // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess4;                      // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerController_ReturnValue;           // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Heal_bSuccess;                            // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D3[0x1];                                       // 0x00D3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Heal_HealValue;                           // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFullHP_bFullHP;                         // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsServer_ReturnValue2;                    // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing) == 0x000008, "Wrong alignment on BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing");
static_assert(sizeof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing) == 0x0000E0, "Wrong size on BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, EntryPoint) == 0x000000, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, CallFunc_GreaterEqual_FloatFloat_ReturnValue1) == 0x000005, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::CallFunc_GreaterEqual_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, CallFunc_CheckNecessaryHealing_bNecessary) == 0x000006, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::CallFunc_CheckNecessaryHealing_bNecessary' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000010, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, K2Node_CustomEvent_EffectiveValue) == 0x00001C, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::K2Node_CustomEvent_EffectiveValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, K2Node_CustomEvent_bIsFullHP) == 0x000020, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::K2Node_CustomEvent_bIsFullHP' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, K2Node_CustomEvent_bHealingJustStarted) == 0x000021, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::K2Node_CustomEvent_bHealingJustStarted' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, CallFunc_GetValidValue_ReturnValue) == 0x000022, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, K2Node_SwitchEnum_CmpSuccess) == 0x000023, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, CallFunc_IsServer_ReturnValue) == 0x000024, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::CallFunc_IsServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, CallFunc_Not_PreBool_ReturnValue) == 0x000025, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, CallFunc_IsDedicatedServer_ReturnValue) == 0x000026, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, CallFunc_IsServer_ReturnValue1) == 0x000027, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::CallFunc_IsServer_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, CallFunc_CalcHealingMaxHP_MaxHP) == 0x000028, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::CallFunc_CalcHealingMaxHP_MaxHP' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, CallFunc_GetOwner_ReturnValue1) == 0x000030, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, CallFunc_CalcHealingMaxHP_MaxHP1) == 0x000038, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::CallFunc_CalcHealingMaxHP_MaxHP1' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, K2Node_DynamicCast_AsBP_AJBIn_Game_Character1) == 0x000040, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::K2Node_DynamicCast_AsBP_AJBIn_Game_Character1' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, K2Node_DynamicCast_bSuccess1) == 0x000048, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, CallFunc_PossibleHealing_bPossibleHealing) == 0x000049, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::CallFunc_PossibleHealing_bPossibleHealing' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, CallFunc_BooleanAND_ReturnValue) == 0x00004A, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, CallFunc_TryToSpeakVoice_bWillBeSpoken) == 0x00004B, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::CallFunc_TryToSpeakVoice_bWillBeSpoken' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, CallFunc_BooleanAND_ReturnValue1) == 0x00004C, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, CallFunc_TryToSpeakVoice_bWillBeSpoken1) == 0x00004D, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::CallFunc_TryToSpeakVoice_bWillBeSpoken1' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, K2Node_Event_bTriggeredByStand) == 0x00004E, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::K2Node_Event_bTriggeredByStand' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, CallFunc_RequestWwiseEventOnLocal_AkComponent) == 0x000050, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::CallFunc_RequestWwiseEventOnLocal_AkComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, K2Node_CustomEvent_Damage) == 0x000058, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::K2Node_CustomEvent_Damage' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, K2Node_CustomEvent_DamageType) == 0x000060, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::K2Node_CustomEvent_DamageType' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, K2Node_CustomEvent_DamageCauser) == 0x000068, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::K2Node_CustomEvent_DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, K2Node_CustomEvent_bRemainHP) == 0x000070, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::K2Node_CustomEvent_bRemainHP' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, K2Node_CustomEvent_bDamageIsCut) == 0x000071, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::K2Node_CustomEvent_bDamageIsCut' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, K2Node_CustomEvent_bNotUseCollision) == 0x000072, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::K2Node_CustomEvent_bNotUseCollision' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, K2Node_Event_DeltaSeconds) == 0x000074, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, K2Node_CreateDelegate_OutputDelegate) == 0x000078, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, CallFunc_GetOwner_ReturnValue2) == 0x000088, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::CallFunc_GetOwner_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, K2Node_CustomEvent_NewState1) == 0x000090, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::K2Node_CustomEvent_NewState1' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, K2Node_DynamicCast_AsBP_AJBIn_Game_Character2) == 0x000098, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::K2Node_DynamicCast_AsBP_AJBIn_Game_Character2' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, K2Node_DynamicCast_bSuccess2) == 0x0000A0, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, K2Node_CustomEvent_NewState) == 0x0000A1, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::K2Node_CustomEvent_NewState' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, CallFunc_GetOwner_ReturnValue3) == 0x0000A8, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::CallFunc_GetOwner_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, K2Node_DynamicCast_AsAJBIn_Game_Character_Base) == 0x0000B0, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::K2Node_DynamicCast_AsAJBIn_Game_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, K2Node_DynamicCast_bSuccess3) == 0x0000B8, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, CallFunc_GetOwner_ReturnValue4) == 0x0000C0, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::CallFunc_GetOwner_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, K2Node_DynamicCast_AsBP_AJBIn_Game_Character3) == 0x0000C8, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::K2Node_DynamicCast_AsBP_AJBIn_Game_Character3' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, K2Node_DynamicCast_bSuccess4) == 0x0000D0, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::K2Node_DynamicCast_bSuccess4' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, CallFunc_IsPlayerController_ReturnValue) == 0x0000D1, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::CallFunc_IsPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, CallFunc_Heal_bSuccess) == 0x0000D2, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::CallFunc_Heal_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, CallFunc_Heal_HealValue) == 0x0000D4, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::CallFunc_Heal_HealValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, CallFunc_IsFullHP_bFullHP) == 0x0000D8, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::CallFunc_IsFullHP_bFullHP' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing, CallFunc_IsServer_ReturnValue2) == 0x0000D9, "Member 'BP_AJBAutoHealing_C_ExecuteUbergraph_BP_AJBAutoHealing::CallFunc_IsServer_ReturnValue2' has a wrong offset!");

// Function BP_AJBAutoHealing.BP_AJBAutoHealing_C.MC_ChangeState
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBAutoHealing_C_MC_ChangeState final
{
public:
	EAutoHealingState                             NewState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBAutoHealing_C_MC_ChangeState) == 0x000001, "Wrong alignment on BP_AJBAutoHealing_C_MC_ChangeState");
static_assert(sizeof(BP_AJBAutoHealing_C_MC_ChangeState) == 0x000001, "Wrong size on BP_AJBAutoHealing_C_MC_ChangeState");
static_assert(offsetof(BP_AJBAutoHealing_C_MC_ChangeState, NewState) == 0x000000, "Member 'BP_AJBAutoHealing_C_MC_ChangeState::NewState' has a wrong offset!");

// Function BP_AJBAutoHealing.BP_AJBAutoHealing_C.ChangeState_Server
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBAutoHealing_C_ChangeState_Server final
{
public:
	EAutoHealingState                             NewState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBAutoHealing_C_ChangeState_Server) == 0x000001, "Wrong alignment on BP_AJBAutoHealing_C_ChangeState_Server");
static_assert(sizeof(BP_AJBAutoHealing_C_ChangeState_Server) == 0x000001, "Wrong size on BP_AJBAutoHealing_C_ChangeState_Server");
static_assert(offsetof(BP_AJBAutoHealing_C_ChangeState_Server, NewState) == 0x000000, "Member 'BP_AJBAutoHealing_C_ChangeState_Server::NewState' has a wrong offset!");

// Function BP_AJBAutoHealing.BP_AJBAutoHealing_C.OnReceiveDamage
// 0x0020 (0x0020 - 0x0000)
struct BP_AJBAutoHealing_C_OnReceiveDamage final
{
public:
	int32                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           DamageType;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DamageCauser;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRemainHP;                                         // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDamageIsCut;                                      // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bNotUseCollision;                                  // 0x001A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBAutoHealing_C_OnReceiveDamage) == 0x000008, "Wrong alignment on BP_AJBAutoHealing_C_OnReceiveDamage");
static_assert(sizeof(BP_AJBAutoHealing_C_OnReceiveDamage) == 0x000020, "Wrong size on BP_AJBAutoHealing_C_OnReceiveDamage");
static_assert(offsetof(BP_AJBAutoHealing_C_OnReceiveDamage, Damage) == 0x000000, "Member 'BP_AJBAutoHealing_C_OnReceiveDamage::Damage' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_OnReceiveDamage, DamageType) == 0x000008, "Member 'BP_AJBAutoHealing_C_OnReceiveDamage::DamageType' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_OnReceiveDamage, DamageCauser) == 0x000010, "Member 'BP_AJBAutoHealing_C_OnReceiveDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_OnReceiveDamage, bRemainHP) == 0x000018, "Member 'BP_AJBAutoHealing_C_OnReceiveDamage::bRemainHP' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_OnReceiveDamage, bDamageIsCut) == 0x000019, "Member 'BP_AJBAutoHealing_C_OnReceiveDamage::bDamageIsCut' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_OnReceiveDamage, bNotUseCollision) == 0x00001A, "Member 'BP_AJBAutoHealing_C_OnReceiveDamage::bNotUseCollision' has a wrong offset!");

// Function BP_AJBAutoHealing.BP_AJBAutoHealing_C.ROC_Heal
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBAutoHealing_C_ROC_Heal final
{
public:
	int32                                         EffectiveValue;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsFullHP;                                         // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bHealingJustStarted;                               // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBAutoHealing_C_ROC_Heal) == 0x000004, "Wrong alignment on BP_AJBAutoHealing_C_ROC_Heal");
static_assert(sizeof(BP_AJBAutoHealing_C_ROC_Heal) == 0x000008, "Wrong size on BP_AJBAutoHealing_C_ROC_Heal");
static_assert(offsetof(BP_AJBAutoHealing_C_ROC_Heal, EffectiveValue) == 0x000000, "Member 'BP_AJBAutoHealing_C_ROC_Heal::EffectiveValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ROC_Heal, bIsFullHP) == 0x000004, "Member 'BP_AJBAutoHealing_C_ROC_Heal::bIsFullHP' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_ROC_Heal, bHealingJustStarted) == 0x000005, "Member 'BP_AJBAutoHealing_C_ROC_Heal::bHealingJustStarted' has a wrong offset!");

// Function BP_AJBAutoHealing.BP_AJBAutoHealing_C.DebugPrint
// 0x0130 (0x0130 - 0x0000)
struct BP_AJBAutoHealing_C_DebugPrint final
{
public:
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue1;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckState_bMatch;                        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckState_bMatch1;                       // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckNecessaryHealing_bNecessary;         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0010(0x0040)(HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue1;         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0058(0x0010)(ZeroConstructor, ReferenceParm)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData1;             // 0x0068(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00A8(0x0018)()
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array1;                           // 0x00C0(0x0010)(ZeroConstructor, ReferenceParm)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue1;                      // 0x00E0(0x0018)()
	class FString                                 Temp_string_Variable;                              // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue1;           // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x011A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11B[0x5];                                      // 0x011B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Select_Default;                             // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBAutoHealing_C_DebugPrint) == 0x000008, "Wrong alignment on BP_AJBAutoHealing_C_DebugPrint");
static_assert(sizeof(BP_AJBAutoHealing_C_DebugPrint) == 0x000130, "Wrong size on BP_AJBAutoHealing_C_DebugPrint");
static_assert(offsetof(BP_AJBAutoHealing_C_DebugPrint, CallFunc_MakeLiteralByte_ReturnValue) == 0x000000, "Member 'BP_AJBAutoHealing_C_DebugPrint::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_DebugPrint, CallFunc_MakeLiteralByte_ReturnValue1) == 0x000001, "Member 'BP_AJBAutoHealing_C_DebugPrint::CallFunc_MakeLiteralByte_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_DebugPrint, CallFunc_CheckState_bMatch) == 0x000002, "Member 'BP_AJBAutoHealing_C_DebugPrint::CallFunc_CheckState_bMatch' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_DebugPrint, CallFunc_CheckState_bMatch1) == 0x000003, "Member 'BP_AJBAutoHealing_C_DebugPrint::CallFunc_CheckState_bMatch1' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_DebugPrint, CallFunc_CheckNecessaryHealing_bNecessary) == 0x000004, "Member 'BP_AJBAutoHealing_C_DebugPrint::CallFunc_CheckNecessaryHealing_bNecessary' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_DebugPrint, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_AJBAutoHealing_C_DebugPrint::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_DebugPrint, K2Node_MakeStruct_FormatArgumentData) == 0x000010, "Member 'BP_AJBAutoHealing_C_DebugPrint::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_DebugPrint, CallFunc_Subtract_FloatFloat_ReturnValue1) == 0x000050, "Member 'BP_AJBAutoHealing_C_DebugPrint::CallFunc_Subtract_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_DebugPrint, K2Node_MakeArray_Array) == 0x000058, "Member 'BP_AJBAutoHealing_C_DebugPrint::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_DebugPrint, K2Node_MakeStruct_FormatArgumentData1) == 0x000068, "Member 'BP_AJBAutoHealing_C_DebugPrint::K2Node_MakeStruct_FormatArgumentData1' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_DebugPrint, CallFunc_Format_ReturnValue) == 0x0000A8, "Member 'BP_AJBAutoHealing_C_DebugPrint::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_DebugPrint, K2Node_MakeArray_Array1) == 0x0000C0, "Member 'BP_AJBAutoHealing_C_DebugPrint::K2Node_MakeArray_Array1' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_DebugPrint, CallFunc_Conv_TextToString_ReturnValue) == 0x0000D0, "Member 'BP_AJBAutoHealing_C_DebugPrint::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_DebugPrint, CallFunc_Format_ReturnValue1) == 0x0000E0, "Member 'BP_AJBAutoHealing_C_DebugPrint::CallFunc_Format_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_DebugPrint, Temp_string_Variable) == 0x0000F8, "Member 'BP_AJBAutoHealing_C_DebugPrint::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_DebugPrint, CallFunc_Conv_TextToString_ReturnValue1) == 0x000108, "Member 'BP_AJBAutoHealing_C_DebugPrint::CallFunc_Conv_TextToString_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_DebugPrint, CallFunc_BooleanAND_ReturnValue) == 0x000118, "Member 'BP_AJBAutoHealing_C_DebugPrint::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_DebugPrint, CallFunc_BooleanAND_ReturnValue1) == 0x000119, "Member 'BP_AJBAutoHealing_C_DebugPrint::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_DebugPrint, Temp_bool_Variable) == 0x00011A, "Member 'BP_AJBAutoHealing_C_DebugPrint::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_DebugPrint, K2Node_Select_Default) == 0x000120, "Member 'BP_AJBAutoHealing_C_DebugPrint::K2Node_Select_Default' has a wrong offset!");

// Function BP_AJBAutoHealing.BP_AJBAutoHealing_C.CheckNecessaryHealing
// 0x0020 (0x0020 - 0x0000)
struct BP_AJBAutoHealing_C_CheckNecessaryHealing final
{
public:
	bool                                          bNecessary;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_CalcHealingMaxHP_MaxHP;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFullHP_bFullHP;                         // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBAutoHealing_C_CheckNecessaryHealing) == 0x000008, "Wrong alignment on BP_AJBAutoHealing_C_CheckNecessaryHealing");
static_assert(sizeof(BP_AJBAutoHealing_C_CheckNecessaryHealing) == 0x000020, "Wrong size on BP_AJBAutoHealing_C_CheckNecessaryHealing");
static_assert(offsetof(BP_AJBAutoHealing_C_CheckNecessaryHealing, bNecessary) == 0x000000, "Member 'BP_AJBAutoHealing_C_CheckNecessaryHealing::bNecessary' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_CheckNecessaryHealing, CallFunc_CalcHealingMaxHP_MaxHP) == 0x000004, "Member 'BP_AJBAutoHealing_C_CheckNecessaryHealing::CallFunc_CalcHealingMaxHP_MaxHP' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_CheckNecessaryHealing, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBAutoHealing_C_CheckNecessaryHealing::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_CheckNecessaryHealing, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000010, "Member 'BP_AJBAutoHealing_C_CheckNecessaryHealing::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_CheckNecessaryHealing, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AJBAutoHealing_C_CheckNecessaryHealing::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_CheckNecessaryHealing, CallFunc_IsFullHP_bFullHP) == 0x000019, "Member 'BP_AJBAutoHealing_C_CheckNecessaryHealing::CallFunc_IsFullHP_bFullHP' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_CheckNecessaryHealing, CallFunc_Not_PreBool_ReturnValue) == 0x00001A, "Member 'BP_AJBAutoHealing_C_CheckNecessaryHealing::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_AJBAutoHealing.BP_AJBAutoHealing_C.CalcHealingMaxHP
// 0x0028 (0x0028 - 0x0000)
struct BP_AJBAutoHealing_C_CalcHealingMaxHP final
{
public:
	int32                                         MaxHP;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue1;           // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBAutoHealing_C_CalcHealingMaxHP) == 0x000008, "Wrong alignment on BP_AJBAutoHealing_C_CalcHealingMaxHP");
static_assert(sizeof(BP_AJBAutoHealing_C_CalcHealingMaxHP) == 0x000028, "Wrong size on BP_AJBAutoHealing_C_CalcHealingMaxHP");
static_assert(offsetof(BP_AJBAutoHealing_C_CalcHealingMaxHP, MaxHP) == 0x000000, "Member 'BP_AJBAutoHealing_C_CalcHealingMaxHP::MaxHP' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_CalcHealingMaxHP, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBAutoHealing_C_CalcHealingMaxHP::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_CalcHealingMaxHP, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000010, "Member 'BP_AJBAutoHealing_C_CalcHealingMaxHP::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_CalcHealingMaxHP, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AJBAutoHealing_C_CalcHealingMaxHP::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_CalcHealingMaxHP, CallFunc_Multiply_IntFloat_ReturnValue) == 0x00001C, "Member 'BP_AJBAutoHealing_C_CalcHealingMaxHP::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_CalcHealingMaxHP, CallFunc_Multiply_IntFloat_ReturnValue1) == 0x000020, "Member 'BP_AJBAutoHealing_C_CalcHealingMaxHP::CallFunc_Multiply_IntFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_CalcHealingMaxHP, CallFunc_Round_ReturnValue) == 0x000024, "Member 'BP_AJBAutoHealing_C_CalcHealingMaxHP::CallFunc_Round_ReturnValue' has a wrong offset!");

// Function BP_AJBAutoHealing.BP_AJBAutoHealing_C.TryDestroyParticle
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBAutoHealing_C_TryDestroyParticle final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBAutoHealing_C_TryDestroyParticle) == 0x000001, "Wrong alignment on BP_AJBAutoHealing_C_TryDestroyParticle");
static_assert(sizeof(BP_AJBAutoHealing_C_TryDestroyParticle) == 0x000001, "Wrong size on BP_AJBAutoHealing_C_TryDestroyParticle");
static_assert(offsetof(BP_AJBAutoHealing_C_TryDestroyParticle, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_AJBAutoHealing_C_TryDestroyParticle::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_AJBAutoHealing.BP_AJBAutoHealing_C.TrySpawnParticle
// 0x0028 (0x0028 - 0x0000)
struct BP_AJBAutoHealing_C_TrySpawnParticle final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameParticleEffect_C*          CallFunc_RequestParticleEffectOnLocal_ParticleEffect; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBAutoHealing_C_TrySpawnParticle) == 0x000008, "Wrong alignment on BP_AJBAutoHealing_C_TrySpawnParticle");
static_assert(sizeof(BP_AJBAutoHealing_C_TrySpawnParticle) == 0x000028, "Wrong size on BP_AJBAutoHealing_C_TrySpawnParticle");
static_assert(offsetof(BP_AJBAutoHealing_C_TrySpawnParticle, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'BP_AJBAutoHealing_C_TrySpawnParticle::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_TrySpawnParticle, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000008, "Member 'BP_AJBAutoHealing_C_TrySpawnParticle::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_TrySpawnParticle, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_AJBAutoHealing_C_TrySpawnParticle::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_TrySpawnParticle, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'BP_AJBAutoHealing_C_TrySpawnParticle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_TrySpawnParticle, CallFunc_RequestParticleEffectOnLocal_ParticleEffect) == 0x000018, "Member 'BP_AJBAutoHealing_C_TrySpawnParticle::CallFunc_RequestParticleEffectOnLocal_ParticleEffect' has a wrong offset!");
static_assert(offsetof(BP_AJBAutoHealing_C_TrySpawnParticle, CallFunc_K2_AttachToComponent_ReturnValue) == 0x000020, "Member 'BP_AJBAutoHealing_C_TrySpawnParticle::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");

// Function BP_AJBAutoHealing.BP_AJBAutoHealing_C.PossibleHealing
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBAutoHealing_C_PossibleHealing final
{
public:
	bool                                          bPossibleHealing;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBAutoHealing_C_PossibleHealing) == 0x000001, "Wrong alignment on BP_AJBAutoHealing_C_PossibleHealing");
static_assert(sizeof(BP_AJBAutoHealing_C_PossibleHealing) == 0x000001, "Wrong size on BP_AJBAutoHealing_C_PossibleHealing");
static_assert(offsetof(BP_AJBAutoHealing_C_PossibleHealing, bPossibleHealing) == 0x000000, "Member 'BP_AJBAutoHealing_C_PossibleHealing::bPossibleHealing' has a wrong offset!");

// Function BP_AJBAutoHealing.BP_AJBAutoHealing_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBAutoHealing_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBAutoHealing_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_AJBAutoHealing_C_ReceiveTick");
static_assert(sizeof(BP_AJBAutoHealing_C_ReceiveTick) == 0x000004, "Wrong size on BP_AJBAutoHealing_C_ReceiveTick");
static_assert(offsetof(BP_AJBAutoHealing_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_AJBAutoHealing_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_AJBAutoHealing.BP_AJBAutoHealing_C.OnActionActivate
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBAutoHealing_C_OnActionActivate final
{
public:
	bool                                          bTriggeredByStand;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBAutoHealing_C_OnActionActivate) == 0x000001, "Wrong alignment on BP_AJBAutoHealing_C_OnActionActivate");
static_assert(sizeof(BP_AJBAutoHealing_C_OnActionActivate) == 0x000001, "Wrong size on BP_AJBAutoHealing_C_OnActionActivate");
static_assert(offsetof(BP_AJBAutoHealing_C_OnActionActivate, bTriggeredByStand) == 0x000000, "Member 'BP_AJBAutoHealing_C_OnActionActivate::bTriggeredByStand' has a wrong offset!");

}

