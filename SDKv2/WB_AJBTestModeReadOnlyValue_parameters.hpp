#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_AJBTestModeReadOnlyValue

#include "Basic.hpp"

#include "ST_TestModeText_structs.hpp"
#include "Slate_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function WB_AJBTestModeReadOnlyValue.WB_AJBTestModeReadOnlyValue_C.ExecuteUbergraph_WB_AJBTestModeReadOnlyValue
// 0x0090 (0x0090 - 0x0000)
struct WB_AJBTestModeReadOnlyValue_C_ExecuteUbergraph_WB_AJBTestModeReadOnlyValue final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextBlock*                             CallFunc_SpawnObject_ReturnValue;                  // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextBlock*                             CallFunc_SpawnObject_ReturnValue1;                 // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0018(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_AddChildToCanvas_ReturnValue;             // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_AddChildToCanvas_ReturnValue1;            // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0038(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor1;                     // 0x0060(0x0028)()
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue1;                // 0x0088(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_AJBTestModeReadOnlyValue_C_ExecuteUbergraph_WB_AJBTestModeReadOnlyValue) == 0x000008, "Wrong alignment on WB_AJBTestModeReadOnlyValue_C_ExecuteUbergraph_WB_AJBTestModeReadOnlyValue");
static_assert(sizeof(WB_AJBTestModeReadOnlyValue_C_ExecuteUbergraph_WB_AJBTestModeReadOnlyValue) == 0x000090, "Wrong size on WB_AJBTestModeReadOnlyValue_C_ExecuteUbergraph_WB_AJBTestModeReadOnlyValue");
static_assert(offsetof(WB_AJBTestModeReadOnlyValue_C_ExecuteUbergraph_WB_AJBTestModeReadOnlyValue, EntryPoint) == 0x000000, "Member 'WB_AJBTestModeReadOnlyValue_C_ExecuteUbergraph_WB_AJBTestModeReadOnlyValue::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_AJBTestModeReadOnlyValue_C_ExecuteUbergraph_WB_AJBTestModeReadOnlyValue, CallFunc_SpawnObject_ReturnValue) == 0x000008, "Member 'WB_AJBTestModeReadOnlyValue_C_ExecuteUbergraph_WB_AJBTestModeReadOnlyValue::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_AJBTestModeReadOnlyValue_C_ExecuteUbergraph_WB_AJBTestModeReadOnlyValue, CallFunc_SpawnObject_ReturnValue1) == 0x000010, "Member 'WB_AJBTestModeReadOnlyValue_C_ExecuteUbergraph_WB_AJBTestModeReadOnlyValue::CallFunc_SpawnObject_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_AJBTestModeReadOnlyValue_C_ExecuteUbergraph_WB_AJBTestModeReadOnlyValue, CallFunc_MakeVector2D_ReturnValue) == 0x000018, "Member 'WB_AJBTestModeReadOnlyValue_C_ExecuteUbergraph_WB_AJBTestModeReadOnlyValue::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_AJBTestModeReadOnlyValue_C_ExecuteUbergraph_WB_AJBTestModeReadOnlyValue, CallFunc_AddChildToCanvas_ReturnValue) == 0x000020, "Member 'WB_AJBTestModeReadOnlyValue_C_ExecuteUbergraph_WB_AJBTestModeReadOnlyValue::CallFunc_AddChildToCanvas_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_AJBTestModeReadOnlyValue_C_ExecuteUbergraph_WB_AJBTestModeReadOnlyValue, CallFunc_AddChildToCanvas_ReturnValue1) == 0x000028, "Member 'WB_AJBTestModeReadOnlyValue_C_ExecuteUbergraph_WB_AJBTestModeReadOnlyValue::CallFunc_AddChildToCanvas_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_AJBTestModeReadOnlyValue_C_ExecuteUbergraph_WB_AJBTestModeReadOnlyValue, K2Node_Event_IsDesignTime) == 0x000030, "Member 'WB_AJBTestModeReadOnlyValue_C_ExecuteUbergraph_WB_AJBTestModeReadOnlyValue::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WB_AJBTestModeReadOnlyValue_C_ExecuteUbergraph_WB_AJBTestModeReadOnlyValue, K2Node_MakeStruct_SlateColor) == 0x000038, "Member 'WB_AJBTestModeReadOnlyValue_C_ExecuteUbergraph_WB_AJBTestModeReadOnlyValue::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(WB_AJBTestModeReadOnlyValue_C_ExecuteUbergraph_WB_AJBTestModeReadOnlyValue, K2Node_MakeStruct_SlateColor1) == 0x000060, "Member 'WB_AJBTestModeReadOnlyValue_C_ExecuteUbergraph_WB_AJBTestModeReadOnlyValue::K2Node_MakeStruct_SlateColor1' has a wrong offset!");
static_assert(offsetof(WB_AJBTestModeReadOnlyValue_C_ExecuteUbergraph_WB_AJBTestModeReadOnlyValue, CallFunc_MakeVector2D_ReturnValue1) == 0x000088, "Member 'WB_AJBTestModeReadOnlyValue_C_ExecuteUbergraph_WB_AJBTestModeReadOnlyValue::CallFunc_MakeVector2D_ReturnValue1' has a wrong offset!");

// Function WB_AJBTestModeReadOnlyValue.WB_AJBTestModeReadOnlyValue_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WB_AJBTestModeReadOnlyValue_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_AJBTestModeReadOnlyValue_C_PreConstruct) == 0x000001, "Wrong alignment on WB_AJBTestModeReadOnlyValue_C_PreConstruct");
static_assert(sizeof(WB_AJBTestModeReadOnlyValue_C_PreConstruct) == 0x000001, "Wrong size on WB_AJBTestModeReadOnlyValue_C_PreConstruct");
static_assert(offsetof(WB_AJBTestModeReadOnlyValue_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WB_AJBTestModeReadOnlyValue_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WB_AJBTestModeReadOnlyValue.WB_AJBTestModeReadOnlyValue_C.SetTextLabel_ONOFF
// 0x0080 (0x0080 - 0x0000)
struct WB_AJBTestModeReadOnlyValue_C_SetTextLabel_ONOFF final
{
public:
	bool                                          bOn;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_TestModeText                       K2Node_MakeStruct_ST_TestModeText;                 // 0x0008(0x0028)(HasGetValueTypeHash)
	struct FST_TestModeText                       K2Node_MakeStruct_ST_TestModeText1;                // 0x0030(0x0028)(HasGetValueTypeHash)
	struct FST_TestModeText                       K2Node_Select_Default;                             // 0x0058(0x0028)(HasGetValueTypeHash)
};
static_assert(alignof(WB_AJBTestModeReadOnlyValue_C_SetTextLabel_ONOFF) == 0x000008, "Wrong alignment on WB_AJBTestModeReadOnlyValue_C_SetTextLabel_ONOFF");
static_assert(sizeof(WB_AJBTestModeReadOnlyValue_C_SetTextLabel_ONOFF) == 0x000080, "Wrong size on WB_AJBTestModeReadOnlyValue_C_SetTextLabel_ONOFF");
static_assert(offsetof(WB_AJBTestModeReadOnlyValue_C_SetTextLabel_ONOFF, bOn) == 0x000000, "Member 'WB_AJBTestModeReadOnlyValue_C_SetTextLabel_ONOFF::bOn' has a wrong offset!");
static_assert(offsetof(WB_AJBTestModeReadOnlyValue_C_SetTextLabel_ONOFF, Temp_bool_Variable) == 0x000001, "Member 'WB_AJBTestModeReadOnlyValue_C_SetTextLabel_ONOFF::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_AJBTestModeReadOnlyValue_C_SetTextLabel_ONOFF, K2Node_MakeStruct_ST_TestModeText) == 0x000008, "Member 'WB_AJBTestModeReadOnlyValue_C_SetTextLabel_ONOFF::K2Node_MakeStruct_ST_TestModeText' has a wrong offset!");
static_assert(offsetof(WB_AJBTestModeReadOnlyValue_C_SetTextLabel_ONOFF, K2Node_MakeStruct_ST_TestModeText1) == 0x000030, "Member 'WB_AJBTestModeReadOnlyValue_C_SetTextLabel_ONOFF::K2Node_MakeStruct_ST_TestModeText1' has a wrong offset!");
static_assert(offsetof(WB_AJBTestModeReadOnlyValue_C_SetTextLabel_ONOFF, K2Node_Select_Default) == 0x000058, "Member 'WB_AJBTestModeReadOnlyValue_C_SetTextLabel_ONOFF::K2Node_Select_Default' has a wrong offset!");

// Function WB_AJBTestModeReadOnlyValue.WB_AJBTestModeReadOnlyValue_C.SetInteger
// 0x0020 (0x0020 - 0x0000)
struct WB_AJBTestModeReadOnlyValue_C_SetInteger final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0008(0x0018)()
};
static_assert(alignof(WB_AJBTestModeReadOnlyValue_C_SetInteger) == 0x000008, "Wrong alignment on WB_AJBTestModeReadOnlyValue_C_SetInteger");
static_assert(sizeof(WB_AJBTestModeReadOnlyValue_C_SetInteger) == 0x000020, "Wrong size on WB_AJBTestModeReadOnlyValue_C_SetInteger");
static_assert(offsetof(WB_AJBTestModeReadOnlyValue_C_SetInteger, Value) == 0x000000, "Member 'WB_AJBTestModeReadOnlyValue_C_SetInteger::Value' has a wrong offset!");
static_assert(offsetof(WB_AJBTestModeReadOnlyValue_C_SetInteger, CallFunc_Conv_IntToText_ReturnValue) == 0x000008, "Member 'WB_AJBTestModeReadOnlyValue_C_SetInteger::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");

// Function WB_AJBTestModeReadOnlyValue.WB_AJBTestModeReadOnlyValue_C.SetValueText
// 0x0058 (0x0058 - 0x0000)
struct WB_AJBTestModeReadOnlyValue_C_SetValueText final
{
public:
	struct FST_TestModeText                       TextInfo;                                          // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	ETextJustify                                  InJustification;                                   // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0030(0x0028)()
};
static_assert(alignof(WB_AJBTestModeReadOnlyValue_C_SetValueText) == 0x000008, "Wrong alignment on WB_AJBTestModeReadOnlyValue_C_SetValueText");
static_assert(sizeof(WB_AJBTestModeReadOnlyValue_C_SetValueText) == 0x000058, "Wrong size on WB_AJBTestModeReadOnlyValue_C_SetValueText");
static_assert(offsetof(WB_AJBTestModeReadOnlyValue_C_SetValueText, TextInfo) == 0x000000, "Member 'WB_AJBTestModeReadOnlyValue_C_SetValueText::TextInfo' has a wrong offset!");
static_assert(offsetof(WB_AJBTestModeReadOnlyValue_C_SetValueText, InJustification) == 0x000028, "Member 'WB_AJBTestModeReadOnlyValue_C_SetValueText::InJustification' has a wrong offset!");
static_assert(offsetof(WB_AJBTestModeReadOnlyValue_C_SetValueText, K2Node_MakeStruct_SlateColor) == 0x000030, "Member 'WB_AJBTestModeReadOnlyValue_C_SetValueText::K2Node_MakeStruct_SlateColor' has a wrong offset!");

// Function WB_AJBTestModeReadOnlyValue.WB_AJBTestModeReadOnlyValue_C.SetLabelText
// 0x0050 (0x0050 - 0x0000)
struct WB_AJBTestModeReadOnlyValue_C_SetLabelText final
{
public:
	struct FST_TestModeText                       TextInfo;                                          // 0x0000(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0028(0x0028)()
};
static_assert(alignof(WB_AJBTestModeReadOnlyValue_C_SetLabelText) == 0x000008, "Wrong alignment on WB_AJBTestModeReadOnlyValue_C_SetLabelText");
static_assert(sizeof(WB_AJBTestModeReadOnlyValue_C_SetLabelText) == 0x000050, "Wrong size on WB_AJBTestModeReadOnlyValue_C_SetLabelText");
static_assert(offsetof(WB_AJBTestModeReadOnlyValue_C_SetLabelText, TextInfo) == 0x000000, "Member 'WB_AJBTestModeReadOnlyValue_C_SetLabelText::TextInfo' has a wrong offset!");
static_assert(offsetof(WB_AJBTestModeReadOnlyValue_C_SetLabelText, K2Node_MakeStruct_SlateColor) == 0x000028, "Member 'WB_AJBTestModeReadOnlyValue_C_SetLabelText::K2Node_MakeStruct_SlateColor' has a wrong offset!");

}

