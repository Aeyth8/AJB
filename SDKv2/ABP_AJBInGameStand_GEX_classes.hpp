#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_AJBInGameStand_GEX

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_AJBInGameStand_GEX.ABP_AJBInGameStand_GEX_C
// 0x0438 (0x0790 - 0x0358)
class UABP_AJBInGameStand_GEX_C final : public UAnimInstance
{
public:
	uint8                                         Pad_358[0x8];                                      // 0x0358(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0360(0x0008)(Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root_7A1D455144618E881F3B2F9C13CA2C6E; // 0x0368(0x0048)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_691F3D4A4FA805F248BEFFACE93CBCCB; // 0x03B0(0x0048)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_C55698564AFBD09F5D48C387A2820170; // 0x03F8(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_31C604974064140D22D79AB93A31BD1A; // 0x0440(0x00B0)()
	struct FAnimNode_Root                         AnimGraphNode_StateResult_E28069CF4C0EA030C39EB78B6A6D94B0; // 0x04F0(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_627DCD0C42D912A76B348882A0F2AB77; // 0x0538(0x00B0)()
	struct FAnimNode_Root                         AnimGraphNode_StateResult_636B23B44D99FB9A0D374E80853B9174; // 0x05E8(0x0048)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_B1DE9EEE4E71477DB213E3BAD813BCD1; // 0x0630(0x00E0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_D377B1F94F2D255605EBA88E152EDA18; // 0x0710(0x0070)()
	bool                                          IsOwnerMove;                                       // 0x0780(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_781[0x3];                                      // 0x0781(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OwnerMovementRate;                                 // 0x0784(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveRate;                                          // 0x0788(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ABP_AJBInGameStand_GEX(int32 EntryPoint);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_AJBInGameStand_GEX_AnimGraphNode_TransitionResult_C55698564AFBD09F5D48C387A2820170();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_AJBInGameStand_GEX_AnimGraphNode_TransitionResult_691F3D4A4FA805F248BEFFACE93CBCCB();
	void CanOwnerMove(bool* bCanMove);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_AJBInGameStand_GEX_C">();
	}
	static class UABP_AJBInGameStand_GEX_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_AJBInGameStand_GEX_C>();
	}
};
static_assert(alignof(UABP_AJBInGameStand_GEX_C) == 0x000008, "Wrong alignment on UABP_AJBInGameStand_GEX_C");
static_assert(sizeof(UABP_AJBInGameStand_GEX_C) == 0x000790, "Wrong size on UABP_AJBInGameStand_GEX_C");
static_assert(offsetof(UABP_AJBInGameStand_GEX_C, UberGraphFrame) == 0x000360, "Member 'UABP_AJBInGameStand_GEX_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_AJBInGameStand_GEX_C, AnimGraphNode_Root_7A1D455144618E881F3B2F9C13CA2C6E) == 0x000368, "Member 'UABP_AJBInGameStand_GEX_C::AnimGraphNode_Root_7A1D455144618E881F3B2F9C13CA2C6E' has a wrong offset!");
static_assert(offsetof(UABP_AJBInGameStand_GEX_C, AnimGraphNode_TransitionResult_691F3D4A4FA805F248BEFFACE93CBCCB) == 0x0003B0, "Member 'UABP_AJBInGameStand_GEX_C::AnimGraphNode_TransitionResult_691F3D4A4FA805F248BEFFACE93CBCCB' has a wrong offset!");
static_assert(offsetof(UABP_AJBInGameStand_GEX_C, AnimGraphNode_TransitionResult_C55698564AFBD09F5D48C387A2820170) == 0x0003F8, "Member 'UABP_AJBInGameStand_GEX_C::AnimGraphNode_TransitionResult_C55698564AFBD09F5D48C387A2820170' has a wrong offset!");
static_assert(offsetof(UABP_AJBInGameStand_GEX_C, AnimGraphNode_SequencePlayer_31C604974064140D22D79AB93A31BD1A) == 0x000440, "Member 'UABP_AJBInGameStand_GEX_C::AnimGraphNode_SequencePlayer_31C604974064140D22D79AB93A31BD1A' has a wrong offset!");
static_assert(offsetof(UABP_AJBInGameStand_GEX_C, AnimGraphNode_StateResult_E28069CF4C0EA030C39EB78B6A6D94B0) == 0x0004F0, "Member 'UABP_AJBInGameStand_GEX_C::AnimGraphNode_StateResult_E28069CF4C0EA030C39EB78B6A6D94B0' has a wrong offset!");
static_assert(offsetof(UABP_AJBInGameStand_GEX_C, AnimGraphNode_SequencePlayer_627DCD0C42D912A76B348882A0F2AB77) == 0x000538, "Member 'UABP_AJBInGameStand_GEX_C::AnimGraphNode_SequencePlayer_627DCD0C42D912A76B348882A0F2AB77' has a wrong offset!");
static_assert(offsetof(UABP_AJBInGameStand_GEX_C, AnimGraphNode_StateResult_636B23B44D99FB9A0D374E80853B9174) == 0x0005E8, "Member 'UABP_AJBInGameStand_GEX_C::AnimGraphNode_StateResult_636B23B44D99FB9A0D374E80853B9174' has a wrong offset!");
static_assert(offsetof(UABP_AJBInGameStand_GEX_C, AnimGraphNode_StateMachine_B1DE9EEE4E71477DB213E3BAD813BCD1) == 0x000630, "Member 'UABP_AJBInGameStand_GEX_C::AnimGraphNode_StateMachine_B1DE9EEE4E71477DB213E3BAD813BCD1' has a wrong offset!");
static_assert(offsetof(UABP_AJBInGameStand_GEX_C, AnimGraphNode_Slot_D377B1F94F2D255605EBA88E152EDA18) == 0x000710, "Member 'UABP_AJBInGameStand_GEX_C::AnimGraphNode_Slot_D377B1F94F2D255605EBA88E152EDA18' has a wrong offset!");
static_assert(offsetof(UABP_AJBInGameStand_GEX_C, IsOwnerMove) == 0x000780, "Member 'UABP_AJBInGameStand_GEX_C::IsOwnerMove' has a wrong offset!");
static_assert(offsetof(UABP_AJBInGameStand_GEX_C, OwnerMovementRate) == 0x000784, "Member 'UABP_AJBInGameStand_GEX_C::OwnerMovementRate' has a wrong offset!");
static_assert(offsetof(UABP_AJBInGameStand_GEX_C, MoveRate) == 0x000788, "Member 'UABP_AJBInGameStand_GEX_C::MoveRate' has a wrong offset!");

}

