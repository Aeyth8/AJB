#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBRage

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BP_AJBPassiveSkillBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBRage.BP_AJBRage_C
// 0x0018 (0x0208 - 0x01F0)
class UBP_AJBRage_C final : public UBP_AJBPassiveSkillBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBRage_C;                       // 0x01F0(0x0008)(Transient, DuplicateTransient)
	struct FGameplayTag                           EndParticleTag;                                    // 0x01F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         HealingMPSpeedScale;                               // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Defence___;                                        // 0x0204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBRage(int32 EntryPoint);
	void ActiveRageUI();
	void SpawnEndEffect();
	void ChangeRageStatus(bool bEnable);
	void OnContinuedParticleActivated();
	void ReceiveBeginPlay();
	void OnActionInactivate(bool bTriggeredByStand);
	void OnActionActivate(bool bTriggeredByStand);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBRage_C">();
	}
	static class UBP_AJBRage_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBRage_C>();
	}
};
static_assert(alignof(UBP_AJBRage_C) == 0x000008, "Wrong alignment on UBP_AJBRage_C");
static_assert(sizeof(UBP_AJBRage_C) == 0x000208, "Wrong size on UBP_AJBRage_C");
static_assert(offsetof(UBP_AJBRage_C, UberGraphFrame_BP_AJBRage_C) == 0x0001F0, "Member 'UBP_AJBRage_C::UberGraphFrame_BP_AJBRage_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBRage_C, EndParticleTag) == 0x0001F8, "Member 'UBP_AJBRage_C::EndParticleTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBRage_C, HealingMPSpeedScale) == 0x000200, "Member 'UBP_AJBRage_C::HealingMPSpeedScale' has a wrong offset!");
static_assert(offsetof(UBP_AJBRage_C, Defence___) == 0x000204, "Member 'UBP_AJBRage_C::Defence___' has a wrong offset!");

}

