#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DecalingDamageDetection

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "AJB_structs.hpp"


namespace SDK::Params
{

// Function BP_DecalingDamageDetection.BP_DecalingDamageDetection_C.OnDamageDetected__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_DecalingDamageDetection_C_OnDamageDetected__DelegateSignature final
{
public:
	class AActor*                                 DamgeCauser;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DecalingDamageDetection_C_OnDamageDetected__DelegateSignature) == 0x000008, "Wrong alignment on BP_DecalingDamageDetection_C_OnDamageDetected__DelegateSignature");
static_assert(sizeof(BP_DecalingDamageDetection_C_OnDamageDetected__DelegateSignature) == 0x000008, "Wrong size on BP_DecalingDamageDetection_C_OnDamageDetected__DelegateSignature");
static_assert(offsetof(BP_DecalingDamageDetection_C_OnDamageDetected__DelegateSignature, DamgeCauser) == 0x000000, "Member 'BP_DecalingDamageDetection_C_OnDamageDetected__DelegateSignature::DamgeCauser' has a wrong offset!");

// Function BP_DecalingDamageDetection.BP_DecalingDamageDetection_C.OnDamaged__DelegateSignature
// 0x0040 (0x0040 - 0x0000)
struct BP_DecalingDamageDetection_C_OnDamaged__DelegateSignature final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DamageForHPAP;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DamageForAAP;                                      // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CutDamage;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           DamageType;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         SerialNumber;                                      // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDamagePriority                               DamagePriority;                                    // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttackDistance;                                    // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DamageCauser;                                      // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bWithSeparetedStandAttack;                         // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HitEnemysSeparatedStand;                           // 0x0039(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bPenetrateAP;                                      // 0x003A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DecalingDamageDetection_C_OnDamaged__DelegateSignature) == 0x000008, "Wrong alignment on BP_DecalingDamageDetection_C_OnDamaged__DelegateSignature");
static_assert(sizeof(BP_DecalingDamageDetection_C_OnDamaged__DelegateSignature) == 0x000040, "Wrong size on BP_DecalingDamageDetection_C_OnDamaged__DelegateSignature");
static_assert(offsetof(BP_DecalingDamageDetection_C_OnDamaged__DelegateSignature, DamagedActor) == 0x000000, "Member 'BP_DecalingDamageDetection_C_OnDamaged__DelegateSignature::DamagedActor' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_OnDamaged__DelegateSignature, DamageForHPAP) == 0x000008, "Member 'BP_DecalingDamageDetection_C_OnDamaged__DelegateSignature::DamageForHPAP' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_OnDamaged__DelegateSignature, DamageForAAP) == 0x00000C, "Member 'BP_DecalingDamageDetection_C_OnDamaged__DelegateSignature::DamageForAAP' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_OnDamaged__DelegateSignature, CutDamage) == 0x000010, "Member 'BP_DecalingDamageDetection_C_OnDamaged__DelegateSignature::CutDamage' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_OnDamaged__DelegateSignature, DamageType) == 0x000018, "Member 'BP_DecalingDamageDetection_C_OnDamaged__DelegateSignature::DamageType' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_OnDamaged__DelegateSignature, SerialNumber) == 0x000020, "Member 'BP_DecalingDamageDetection_C_OnDamaged__DelegateSignature::SerialNumber' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_OnDamaged__DelegateSignature, DamagePriority) == 0x000024, "Member 'BP_DecalingDamageDetection_C_OnDamaged__DelegateSignature::DamagePriority' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_OnDamaged__DelegateSignature, AttackDistance) == 0x000028, "Member 'BP_DecalingDamageDetection_C_OnDamaged__DelegateSignature::AttackDistance' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_OnDamaged__DelegateSignature, DamageCauser) == 0x000030, "Member 'BP_DecalingDamageDetection_C_OnDamaged__DelegateSignature::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_OnDamaged__DelegateSignature, bWithSeparetedStandAttack) == 0x000038, "Member 'BP_DecalingDamageDetection_C_OnDamaged__DelegateSignature::bWithSeparetedStandAttack' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_OnDamaged__DelegateSignature, HitEnemysSeparatedStand) == 0x000039, "Member 'BP_DecalingDamageDetection_C_OnDamaged__DelegateSignature::HitEnemysSeparatedStand' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_OnDamaged__DelegateSignature, bPenetrateAP) == 0x00003A, "Member 'BP_DecalingDamageDetection_C_OnDamaged__DelegateSignature::bPenetrateAP' has a wrong offset!");

// Function BP_DecalingDamageDetection.BP_DecalingDamageDetection_C.ExecuteUbergraph_BP_DecalingDamageDetection
// 0x00E8 (0x00E8 - 0x0000)
struct BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_DamageCauser1;                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_HitLocation;                          // 0x0010(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bPenetrating;                         // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Event_FactorTag;                            // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_Event_OperatorCharacter1;                   // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_EffectTag1;                           // 0x0030(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_SETag1;                               // 0x0038(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bNoDamage;                            // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_Event_OperatorCharacter;                    // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_EffectTag;                            // 0x0050(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_SETag;                                // 0x0058(0x0008)(NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_Event_OperaatorCharacter;                   // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bNewFlag;                             // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Event_EffectTag2;                           // 0x0070(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_SETag2;                               // 0x0078(0x0008)(NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_DamagedActor;                         // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_DamageForHPAP;                        // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_DamageForAAP;                         // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_CutDamage;                            // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Event_DamageType;                           // 0x0098(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_SerialNumber;                         // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDamagePriority                               K2Node_Event_DamagePriority;                       // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_AttackDistance;                       // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_DamageCauser;                         // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_WithSeparatedStandAttack;             // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_HitEnemysSeparatedStand;              // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bPenetrateAP;                         // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bNotUseCollision;                     // 0x00BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x00C0(0x0020)()
	bool                                          CallFunc_MatchesAnyTags_ReturnValue;               // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection) == 0x000008, "Wrong alignment on BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection");
static_assert(sizeof(BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection) == 0x0000E8, "Wrong size on BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection");
static_assert(offsetof(BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection, EntryPoint) == 0x000000, "Member 'BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection, CallFunc_IsServer_ReturnValue) == 0x000004, "Member 'BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection::CallFunc_IsServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection, K2Node_Event_DamageCauser1) == 0x000008, "Member 'BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection::K2Node_Event_DamageCauser1' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection, K2Node_Event_HitLocation) == 0x000010, "Member 'BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection::K2Node_Event_HitLocation' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection, K2Node_Event_bPenetrating) == 0x00001C, "Member 'BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection::K2Node_Event_bPenetrating' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection, K2Node_Event_FactorTag) == 0x000020, "Member 'BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection::K2Node_Event_FactorTag' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection, K2Node_Event_OperatorCharacter1) == 0x000028, "Member 'BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection::K2Node_Event_OperatorCharacter1' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection, K2Node_Event_EffectTag1) == 0x000030, "Member 'BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection::K2Node_Event_EffectTag1' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection, K2Node_Event_SETag1) == 0x000038, "Member 'BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection::K2Node_Event_SETag1' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection, K2Node_Event_bNoDamage) == 0x000040, "Member 'BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection::K2Node_Event_bNoDamage' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection, K2Node_Event_OperatorCharacter) == 0x000048, "Member 'BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection::K2Node_Event_OperatorCharacter' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection, K2Node_Event_EffectTag) == 0x000050, "Member 'BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection::K2Node_Event_EffectTag' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection, K2Node_Event_SETag) == 0x000058, "Member 'BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection::K2Node_Event_SETag' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection, K2Node_Event_OperaatorCharacter) == 0x000060, "Member 'BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection::K2Node_Event_OperaatorCharacter' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection, K2Node_Event_bNewFlag) == 0x000068, "Member 'BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection::K2Node_Event_bNewFlag' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection, K2Node_Event_EffectTag2) == 0x000070, "Member 'BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection::K2Node_Event_EffectTag2' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection, K2Node_Event_SETag2) == 0x000078, "Member 'BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection::K2Node_Event_SETag2' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection, K2Node_Event_DamagedActor) == 0x000080, "Member 'BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection::K2Node_Event_DamagedActor' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection, K2Node_Event_DamageForHPAP) == 0x000088, "Member 'BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection::K2Node_Event_DamageForHPAP' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection, K2Node_Event_DamageForAAP) == 0x00008C, "Member 'BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection::K2Node_Event_DamageForAAP' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection, K2Node_Event_CutDamage) == 0x000090, "Member 'BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection::K2Node_Event_CutDamage' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection, K2Node_Event_DamageType) == 0x000098, "Member 'BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection::K2Node_Event_DamageType' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection, K2Node_Event_SerialNumber) == 0x0000A0, "Member 'BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection::K2Node_Event_SerialNumber' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection, K2Node_Event_DamagePriority) == 0x0000A4, "Member 'BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection::K2Node_Event_DamagePriority' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection, K2Node_Event_AttackDistance) == 0x0000A8, "Member 'BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection::K2Node_Event_AttackDistance' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection, K2Node_Event_DamageCauser) == 0x0000B0, "Member 'BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection::K2Node_Event_DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection, K2Node_Event_WithSeparatedStandAttack) == 0x0000B8, "Member 'BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection::K2Node_Event_WithSeparatedStandAttack' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection, K2Node_Event_HitEnemysSeparatedStand) == 0x0000B9, "Member 'BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection::K2Node_Event_HitEnemysSeparatedStand' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection, K2Node_Event_bPenetrateAP) == 0x0000BA, "Member 'BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection::K2Node_Event_bPenetrateAP' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection, K2Node_Event_bNotUseCollision) == 0x0000BB, "Member 'BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection::K2Node_Event_bNotUseCollision' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x0000C0, "Member 'BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection, CallFunc_MatchesAnyTags_ReturnValue) == 0x0000E0, "Member 'BP_DecalingDamageDetection_C_ExecuteUbergraph_BP_DecalingDamageDetection::CallFunc_MatchesAnyTags_ReturnValue' has a wrong offset!");

// Function BP_DecalingDamageDetection.BP_DecalingDamageDetection_C.AJBDamage
// 0x0040 (0x0040 - 0x0000)
struct BP_DecalingDamageDetection_C_AJBDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DamageForHPAP;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DamageForAAP;                                      // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CutDamage;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           DamageType;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         SerialNumber;                                      // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDamagePriority                               DamagePriority;                                    // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttackDistance;                                    // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DamageCauser;                                      // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WithSeparatedStandAttack;                          // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HitEnemysSeparatedStand;                           // 0x0039(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bPenetrateAP;                                      // 0x003A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bNotUseCollision;                                  // 0x003B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DecalingDamageDetection_C_AJBDamage) == 0x000008, "Wrong alignment on BP_DecalingDamageDetection_C_AJBDamage");
static_assert(sizeof(BP_DecalingDamageDetection_C_AJBDamage) == 0x000040, "Wrong size on BP_DecalingDamageDetection_C_AJBDamage");
static_assert(offsetof(BP_DecalingDamageDetection_C_AJBDamage, DamagedActor) == 0x000000, "Member 'BP_DecalingDamageDetection_C_AJBDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_AJBDamage, DamageForHPAP) == 0x000008, "Member 'BP_DecalingDamageDetection_C_AJBDamage::DamageForHPAP' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_AJBDamage, DamageForAAP) == 0x00000C, "Member 'BP_DecalingDamageDetection_C_AJBDamage::DamageForAAP' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_AJBDamage, CutDamage) == 0x000010, "Member 'BP_DecalingDamageDetection_C_AJBDamage::CutDamage' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_AJBDamage, DamageType) == 0x000018, "Member 'BP_DecalingDamageDetection_C_AJBDamage::DamageType' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_AJBDamage, SerialNumber) == 0x000020, "Member 'BP_DecalingDamageDetection_C_AJBDamage::SerialNumber' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_AJBDamage, DamagePriority) == 0x000024, "Member 'BP_DecalingDamageDetection_C_AJBDamage::DamagePriority' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_AJBDamage, AttackDistance) == 0x000028, "Member 'BP_DecalingDamageDetection_C_AJBDamage::AttackDistance' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_AJBDamage, DamageCauser) == 0x000030, "Member 'BP_DecalingDamageDetection_C_AJBDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_AJBDamage, WithSeparatedStandAttack) == 0x000038, "Member 'BP_DecalingDamageDetection_C_AJBDamage::WithSeparatedStandAttack' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_AJBDamage, HitEnemysSeparatedStand) == 0x000039, "Member 'BP_DecalingDamageDetection_C_AJBDamage::HitEnemysSeparatedStand' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_AJBDamage, bPenetrateAP) == 0x00003A, "Member 'BP_DecalingDamageDetection_C_AJBDamage::bPenetrateAP' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_AJBDamage, bNotUseCollision) == 0x00003B, "Member 'BP_DecalingDamageDetection_C_AJBDamage::bNotUseCollision' has a wrong offset!");

// Function BP_DecalingDamageDetection.BP_DecalingDamageDetection_C.OnAreaOut
// 0x0018 (0x0018 - 0x0000)
struct BP_DecalingDamageDetection_C_OnAreaOut final
{
public:
	class ABP_AJBInGameCharacter_C*               OperatorCharacter;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EffectTag;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SETag;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DecalingDamageDetection_C_OnAreaOut) == 0x000008, "Wrong alignment on BP_DecalingDamageDetection_C_OnAreaOut");
static_assert(sizeof(BP_DecalingDamageDetection_C_OnAreaOut) == 0x000018, "Wrong size on BP_DecalingDamageDetection_C_OnAreaOut");
static_assert(offsetof(BP_DecalingDamageDetection_C_OnAreaOut, OperatorCharacter) == 0x000000, "Member 'BP_DecalingDamageDetection_C_OnAreaOut::OperatorCharacter' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_OnAreaOut, EffectTag) == 0x000008, "Member 'BP_DecalingDamageDetection_C_OnAreaOut::EffectTag' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_OnAreaOut, SETag) == 0x000010, "Member 'BP_DecalingDamageDetection_C_OnAreaOut::SETag' has a wrong offset!");

// Function BP_DecalingDamageDetection.BP_DecalingDamageDetection_C.OnAreaIn
// 0x0020 (0x0020 - 0x0000)
struct BP_DecalingDamageDetection_C_OnAreaIn final
{
public:
	class ABP_AJBInGameCharacter_C*               OperatorCharacter;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EffectTag;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SETag;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          bNoDamage;                                         // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DecalingDamageDetection_C_OnAreaIn) == 0x000008, "Wrong alignment on BP_DecalingDamageDetection_C_OnAreaIn");
static_assert(sizeof(BP_DecalingDamageDetection_C_OnAreaIn) == 0x000020, "Wrong size on BP_DecalingDamageDetection_C_OnAreaIn");
static_assert(offsetof(BP_DecalingDamageDetection_C_OnAreaIn, OperatorCharacter) == 0x000000, "Member 'BP_DecalingDamageDetection_C_OnAreaIn::OperatorCharacter' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_OnAreaIn, EffectTag) == 0x000008, "Member 'BP_DecalingDamageDetection_C_OnAreaIn::EffectTag' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_OnAreaIn, SETag) == 0x000010, "Member 'BP_DecalingDamageDetection_C_OnAreaIn::SETag' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_OnAreaIn, bNoDamage) == 0x000018, "Member 'BP_DecalingDamageDetection_C_OnAreaIn::bNoDamage' has a wrong offset!");

// Function BP_DecalingDamageDetection.BP_DecalingDamageDetection_C.DamageOverlapped
// 0x0020 (0x0020 - 0x0000)
struct BP_DecalingDamageDetection_C_DamageOverlapped final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitLocation;                                       // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPenetrating_0;                                    // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           FactorTag;                                         // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DecalingDamageDetection_C_DamageOverlapped) == 0x000008, "Wrong alignment on BP_DecalingDamageDetection_C_DamageOverlapped");
static_assert(sizeof(BP_DecalingDamageDetection_C_DamageOverlapped) == 0x000020, "Wrong size on BP_DecalingDamageDetection_C_DamageOverlapped");
static_assert(offsetof(BP_DecalingDamageDetection_C_DamageOverlapped, DamageCauser) == 0x000000, "Member 'BP_DecalingDamageDetection_C_DamageOverlapped::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_DamageOverlapped, HitLocation) == 0x000008, "Member 'BP_DecalingDamageDetection_C_DamageOverlapped::HitLocation' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_DamageOverlapped, bPenetrating_0) == 0x000014, "Member 'BP_DecalingDamageDetection_C_DamageOverlapped::bPenetrating_0' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_DamageOverlapped, FactorTag) == 0x000018, "Member 'BP_DecalingDamageDetection_C_DamageOverlapped::FactorTag' has a wrong offset!");

// Function BP_DecalingDamageDetection.BP_DecalingDamageDetection_C.OnNoDamageChanged
// 0x0020 (0x0020 - 0x0000)
struct BP_DecalingDamageDetection_C_OnNoDamageChanged final
{
public:
	class ABP_AJBInGameCharacter_C*               OperaatorCharacter;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNewFlag;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           EffectTag;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SETag;                                             // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DecalingDamageDetection_C_OnNoDamageChanged) == 0x000008, "Wrong alignment on BP_DecalingDamageDetection_C_OnNoDamageChanged");
static_assert(sizeof(BP_DecalingDamageDetection_C_OnNoDamageChanged) == 0x000020, "Wrong size on BP_DecalingDamageDetection_C_OnNoDamageChanged");
static_assert(offsetof(BP_DecalingDamageDetection_C_OnNoDamageChanged, OperaatorCharacter) == 0x000000, "Member 'BP_DecalingDamageDetection_C_OnNoDamageChanged::OperaatorCharacter' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_OnNoDamageChanged, bNewFlag) == 0x000008, "Member 'BP_DecalingDamageDetection_C_OnNoDamageChanged::bNewFlag' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_OnNoDamageChanged, EffectTag) == 0x000010, "Member 'BP_DecalingDamageDetection_C_OnNoDamageChanged::EffectTag' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_OnNoDamageChanged, SETag) == 0x000018, "Member 'BP_DecalingDamageDetection_C_OnNoDamageChanged::SETag' has a wrong offset!");

// Function BP_DecalingDamageDetection.BP_DecalingDamageDetection_C.UserConstructionScript
// 0x0080 (0x0080 - 0x0000)
struct BP_DecalingDamageDetection_C_UserConstructionScript final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable1;                                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue1;             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue3;         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0034(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0040(0x0030)(IsPlainOldData, NoDestructor)
	class USphereComponent*                       CallFunc_AddComponent_ReturnValue;                 // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue1;            // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue2;                  // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DecalingDamageDetection_C_UserConstructionScript) == 0x000010, "Wrong alignment on BP_DecalingDamageDetection_C_UserConstructionScript");
static_assert(sizeof(BP_DecalingDamageDetection_C_UserConstructionScript) == 0x000080, "Wrong size on BP_DecalingDamageDetection_C_UserConstructionScript");
static_assert(offsetof(BP_DecalingDamageDetection_C_UserConstructionScript, Temp_int_Variable) == 0x000000, "Member 'BP_DecalingDamageDetection_C_UserConstructionScript::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_UserConstructionScript, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000004, "Member 'BP_DecalingDamageDetection_C_UserConstructionScript::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_UserConstructionScript, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000008, "Member 'BP_DecalingDamageDetection_C_UserConstructionScript::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_UserConstructionScript, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_DecalingDamageDetection_C_UserConstructionScript::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_UserConstructionScript, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_DecalingDamageDetection_C_UserConstructionScript::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_UserConstructionScript, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x000014, "Member 'BP_DecalingDamageDetection_C_UserConstructionScript::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_UserConstructionScript, Temp_int_Variable1) == 0x000018, "Member 'BP_DecalingDamageDetection_C_UserConstructionScript::Temp_int_Variable1' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_UserConstructionScript, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x00001C, "Member 'BP_DecalingDamageDetection_C_UserConstructionScript::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_UserConstructionScript, CallFunc_Add_IntInt_ReturnValue1) == 0x000020, "Member 'BP_DecalingDamageDetection_C_UserConstructionScript::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_UserConstructionScript, CallFunc_Conv_IntToFloat_ReturnValue1) == 0x000024, "Member 'BP_DecalingDamageDetection_C_UserConstructionScript::CallFunc_Conv_IntToFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_UserConstructionScript, CallFunc_Percent_IntInt_ReturnValue) == 0x000028, "Member 'BP_DecalingDamageDetection_C_UserConstructionScript::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_UserConstructionScript, CallFunc_Multiply_FloatFloat_ReturnValue3) == 0x00002C, "Member 'BP_DecalingDamageDetection_C_UserConstructionScript::CallFunc_Multiply_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_UserConstructionScript, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000030, "Member 'BP_DecalingDamageDetection_C_UserConstructionScript::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_UserConstructionScript, CallFunc_MakeVector_ReturnValue) == 0x000034, "Member 'BP_DecalingDamageDetection_C_UserConstructionScript::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_UserConstructionScript, CallFunc_MakeTransform_ReturnValue) == 0x000040, "Member 'BP_DecalingDamageDetection_C_UserConstructionScript::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_UserConstructionScript, CallFunc_AddComponent_ReturnValue) == 0x000070, "Member 'BP_DecalingDamageDetection_C_UserConstructionScript::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_UserConstructionScript, CallFunc_LessEqual_IntInt_ReturnValue1) == 0x000078, "Member 'BP_DecalingDamageDetection_C_UserConstructionScript::CallFunc_LessEqual_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_UserConstructionScript, CallFunc_Add_IntInt_ReturnValue2) == 0x00007C, "Member 'BP_DecalingDamageDetection_C_UserConstructionScript::CallFunc_Add_IntInt_ReturnValue2' has a wrong offset!");

// Function BP_DecalingDamageDetection.BP_DecalingDamageDetection_C.DeactivateDetection
// 0x0001 (0x0001 - 0x0000)
struct BP_DecalingDamageDetection_C_DeactivateDetection final
{
public:
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DecalingDamageDetection_C_DeactivateDetection) == 0x000001, "Wrong alignment on BP_DecalingDamageDetection_C_DeactivateDetection");
static_assert(sizeof(BP_DecalingDamageDetection_C_DeactivateDetection) == 0x000001, "Wrong size on BP_DecalingDamageDetection_C_DeactivateDetection");
static_assert(offsetof(BP_DecalingDamageDetection_C_DeactivateDetection, CallFunc_IsServer_ReturnValue) == 0x000000, "Member 'BP_DecalingDamageDetection_C_DeactivateDetection::CallFunc_IsServer_ReturnValue' has a wrong offset!");

// Function BP_DecalingDamageDetection.BP_DecalingDamageDetection_C.PenetratingDamage
// 0x0001 (0x0001 - 0x0000)
struct BP_DecalingDamageDetection_C_PenetratingDamage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DecalingDamageDetection_C_PenetratingDamage) == 0x000001, "Wrong alignment on BP_DecalingDamageDetection_C_PenetratingDamage");
static_assert(sizeof(BP_DecalingDamageDetection_C_PenetratingDamage) == 0x000001, "Wrong size on BP_DecalingDamageDetection_C_PenetratingDamage");
static_assert(offsetof(BP_DecalingDamageDetection_C_PenetratingDamage, ReturnValue) == 0x000000, "Member 'BP_DecalingDamageDetection_C_PenetratingDamage::ReturnValue' has a wrong offset!");

// Function BP_DecalingDamageDetection.BP_DecalingDamageDetection_C.ScatterCollisionsOnSurface
// 0x0250 (0x0250 - 0x0000)
struct BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface final
{
public:
	TArray<class USphereComponent*>               Temp_SphereCollisions;                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeLiteralFloat_ReturnValue;             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USphereComponent*>               CallFunc_GetComponentsByClass_ReturnValue;         // 0x0020(0x0010)(ZeroConstructor, ReferenceParm)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0034(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0040(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	class USphereComponent*                       CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0060(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue1;       // 0x006C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array1;                           // 0x0078(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0088(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue1;        // 0x0094(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00A0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue1;            // 0x00AC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x00B8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0142(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_143[0x1];                                      // 0x0143(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x014C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0158(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0164(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0170(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0190(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01A8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01B4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x01C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x01C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01C6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C7[0x1];                                      // 0x01C7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x01C8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface) == 0x000008, "Wrong alignment on BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface");
static_assert(sizeof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface) == 0x000250, "Wrong size on BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, Temp_SphereCollisions) == 0x000000, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::Temp_SphereCollisions' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, Temp_int_Array_Index_Variable) == 0x000014, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_MakeLiteralFloat_ReturnValue) == 0x00001C, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_MakeLiteralFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_GetComponentsByClass_ReturnValue) == 0x000020, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000030, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_GetActorForwardVector_ReturnValue) == 0x000034, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, K2Node_MakeArray_Array) == 0x000040, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_Array_Get_Item) == 0x000050, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_Less_IntInt_ReturnValue) == 0x00005C, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000060, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_GetActorForwardVector_ReturnValue1) == 0x00006C, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_GetActorForwardVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, K2Node_MakeArray_Array1) == 0x000078, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::K2Node_MakeArray_Array1' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000088, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_Multiply_VectorFloat_ReturnValue1) == 0x000094, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_Multiply_VectorFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_Add_VectorVector_ReturnValue) == 0x0000A0, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_Add_VectorVector_ReturnValue1) == 0x0000AC, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_Add_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_LineTraceSingleForObjects_OutHit) == 0x0000B8, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000140, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_BreakHitResult_bBlockingHit) == 0x000141, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_BreakHitResult_bInitialOverlap) == 0x000142, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_BreakHitResult_Time) == 0x000144, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_BreakHitResult_Distance) == 0x000148, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_BreakHitResult_Location) == 0x00014C, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_BreakHitResult_ImpactPoint) == 0x000158, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_BreakHitResult_Normal) == 0x000164, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_BreakHitResult_ImpactNormal) == 0x000170, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_BreakHitResult_PhysMat) == 0x000180, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_BreakHitResult_HitActor) == 0x000188, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_BreakHitResult_HitComponent) == 0x000190, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_BreakHitResult_HitBoneName) == 0x000198, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_BreakHitResult_HitItem) == 0x0001A0, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_BreakHitResult_FaceIndex) == 0x0001A4, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_BreakHitResult_TraceStart) == 0x0001A8, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_BreakHitResult_TraceEnd) == 0x0001B4, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_Dot_VectorVector_ReturnValue) == 0x0001C0, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x0001C4, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0001C5, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_Not_PreBool_ReturnValue) == 0x0001C6, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x0001C8, "Member 'BP_DecalingDamageDetection_C_ScatterCollisionsOnSurface::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");

// Function BP_DecalingDamageDetection.BP_DecalingDamageDetection_C.OwnHitParam
// 0x0018 (0x0018 - 0x0000)
struct BP_DecalingDamageDetection_C_OwnHitParam final
{
public:
	bool                                          bCharacter;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bLeftAP;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ParticleTagBlockedByAAP;                           // 0x0008(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SETagBlockedByAAP;                                 // 0x0010(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DecalingDamageDetection_C_OwnHitParam) == 0x000008, "Wrong alignment on BP_DecalingDamageDetection_C_OwnHitParam");
static_assert(sizeof(BP_DecalingDamageDetection_C_OwnHitParam) == 0x000018, "Wrong size on BP_DecalingDamageDetection_C_OwnHitParam");
static_assert(offsetof(BP_DecalingDamageDetection_C_OwnHitParam, bCharacter) == 0x000000, "Member 'BP_DecalingDamageDetection_C_OwnHitParam::bCharacter' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_OwnHitParam, bLeftAP) == 0x000001, "Member 'BP_DecalingDamageDetection_C_OwnHitParam::bLeftAP' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_OwnHitParam, ParticleTagBlockedByAAP) == 0x000008, "Member 'BP_DecalingDamageDetection_C_OwnHitParam::ParticleTagBlockedByAAP' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_OwnHitParam, SETagBlockedByAAP) == 0x000010, "Member 'BP_DecalingDamageDetection_C_OwnHitParam::SETagBlockedByAAP' has a wrong offset!");

// Function BP_DecalingDamageDetection.BP_DecalingDamageDetection_C.CheckTargetSelf
// 0x0010 (0x0010 - 0x0000)
struct BP_DecalingDamageDetection_C_CheckTargetSelf final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bForDamageOverlap;                                 // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIgnoreMovableStand;                               // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bTarget;                                           // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DecalingDamageDetection_C_CheckTargetSelf) == 0x000008, "Wrong alignment on BP_DecalingDamageDetection_C_CheckTargetSelf");
static_assert(sizeof(BP_DecalingDamageDetection_C_CheckTargetSelf) == 0x000010, "Wrong size on BP_DecalingDamageDetection_C_CheckTargetSelf");
static_assert(offsetof(BP_DecalingDamageDetection_C_CheckTargetSelf, DamageCauser) == 0x000000, "Member 'BP_DecalingDamageDetection_C_CheckTargetSelf::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_CheckTargetSelf, bForDamageOverlap) == 0x000008, "Member 'BP_DecalingDamageDetection_C_CheckTargetSelf::bForDamageOverlap' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_CheckTargetSelf, bIgnoreMovableStand) == 0x000009, "Member 'BP_DecalingDamageDetection_C_CheckTargetSelf::bIgnoreMovableStand' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_CheckTargetSelf, bTarget) == 0x00000A, "Member 'BP_DecalingDamageDetection_C_CheckTargetSelf::bTarget' has a wrong offset!");

// Function BP_DecalingDamageDetection.BP_DecalingDamageDetection_C.IfCheckDamageOverlap
// 0x0001 (0x0001 - 0x0000)
struct BP_DecalingDamageDetection_C_IfCheckDamageOverlap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DecalingDamageDetection_C_IfCheckDamageOverlap) == 0x000001, "Wrong alignment on BP_DecalingDamageDetection_C_IfCheckDamageOverlap");
static_assert(sizeof(BP_DecalingDamageDetection_C_IfCheckDamageOverlap) == 0x000001, "Wrong size on BP_DecalingDamageDetection_C_IfCheckDamageOverlap");
static_assert(offsetof(BP_DecalingDamageDetection_C_IfCheckDamageOverlap, ReturnValue) == 0x000000, "Member 'BP_DecalingDamageDetection_C_IfCheckDamageOverlap::ReturnValue' has a wrong offset!");

// Function BP_DecalingDamageDetection.BP_DecalingDamageDetection_C.CheckDisableDamage
// 0x0010 (0x0010 - 0x0000)
struct BP_DecalingDamageDetection_C_CheckDisableDamage final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisableDamage;                                    // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DecalingDamageDetection_C_CheckDisableDamage) == 0x000008, "Wrong alignment on BP_DecalingDamageDetection_C_CheckDisableDamage");
static_assert(sizeof(BP_DecalingDamageDetection_C_CheckDisableDamage) == 0x000010, "Wrong size on BP_DecalingDamageDetection_C_CheckDisableDamage");
static_assert(offsetof(BP_DecalingDamageDetection_C_CheckDisableDamage, DamageCauser) == 0x000000, "Member 'BP_DecalingDamageDetection_C_CheckDisableDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_CheckDisableDamage, bDisableDamage) == 0x000008, "Member 'BP_DecalingDamageDetection_C_CheckDisableDamage::bDisableDamage' has a wrong offset!");

// Function BP_DecalingDamageDetection.BP_DecalingDamageDetection_C.CheckDisablePassive
// 0x0018 (0x0018 - 0x0000)
struct BP_DecalingDamageDetection_C_CheckDisablePassive final
{
public:
	class AActor*                                 PassiveCauser;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           PassiveTag;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisablePassive;                                   // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DecalingDamageDetection_C_CheckDisablePassive) == 0x000008, "Wrong alignment on BP_DecalingDamageDetection_C_CheckDisablePassive");
static_assert(sizeof(BP_DecalingDamageDetection_C_CheckDisablePassive) == 0x000018, "Wrong size on BP_DecalingDamageDetection_C_CheckDisablePassive");
static_assert(offsetof(BP_DecalingDamageDetection_C_CheckDisablePassive, PassiveCauser) == 0x000000, "Member 'BP_DecalingDamageDetection_C_CheckDisablePassive::PassiveCauser' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_CheckDisablePassive, PassiveTag) == 0x000008, "Member 'BP_DecalingDamageDetection_C_CheckDisablePassive::PassiveTag' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_CheckDisablePassive, bDisablePassive) == 0x000010, "Member 'BP_DecalingDamageDetection_C_CheckDisablePassive::bDisablePassive' has a wrong offset!");

// Function BP_DecalingDamageDetection.BP_DecalingDamageDetection_C.CheckDisableAreaDamage
// 0x0001 (0x0001 - 0x0000)
struct BP_DecalingDamageDetection_C_CheckDisableAreaDamage final
{
public:
	bool                                          bDisableAreadamage;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DecalingDamageDetection_C_CheckDisableAreaDamage) == 0x000001, "Wrong alignment on BP_DecalingDamageDetection_C_CheckDisableAreaDamage");
static_assert(sizeof(BP_DecalingDamageDetection_C_CheckDisableAreaDamage) == 0x000001, "Wrong size on BP_DecalingDamageDetection_C_CheckDisableAreaDamage");
static_assert(offsetof(BP_DecalingDamageDetection_C_CheckDisableAreaDamage, bDisableAreadamage) == 0x000000, "Member 'BP_DecalingDamageDetection_C_CheckDisableAreaDamage::bDisableAreadamage' has a wrong offset!");

// Function BP_DecalingDamageDetection.BP_DecalingDamageDetection_C.CheckNoDamage
// 0x0010 (0x0010 - 0x0000)
struct BP_DecalingDamageDetection_C_CheckNoDamage final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNoDamage;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DecalingDamageDetection_C_CheckNoDamage) == 0x000008, "Wrong alignment on BP_DecalingDamageDetection_C_CheckNoDamage");
static_assert(sizeof(BP_DecalingDamageDetection_C_CheckNoDamage) == 0x000010, "Wrong size on BP_DecalingDamageDetection_C_CheckNoDamage");
static_assert(offsetof(BP_DecalingDamageDetection_C_CheckNoDamage, DamageCauser) == 0x000000, "Member 'BP_DecalingDamageDetection_C_CheckNoDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_CheckNoDamage, bNoDamage) == 0x000008, "Member 'BP_DecalingDamageDetection_C_CheckNoDamage::bNoDamage' has a wrong offset!");

// Function BP_DecalingDamageDetection.BP_DecalingDamageDetection_C.IsReactedByReticule
// 0x0001 (0x0001 - 0x0000)
struct BP_DecalingDamageDetection_C_IsReactedByReticule final
{
public:
	bool                                          bResult;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DecalingDamageDetection_C_IsReactedByReticule) == 0x000001, "Wrong alignment on BP_DecalingDamageDetection_C_IsReactedByReticule");
static_assert(sizeof(BP_DecalingDamageDetection_C_IsReactedByReticule) == 0x000001, "Wrong size on BP_DecalingDamageDetection_C_IsReactedByReticule");
static_assert(offsetof(BP_DecalingDamageDetection_C_IsReactedByReticule, bResult) == 0x000000, "Member 'BP_DecalingDamageDetection_C_IsReactedByReticule::bResult' has a wrong offset!");

// Function BP_DecalingDamageDetection.BP_DecalingDamageDetection_C.IgnoreTrace
// 0x0001 (0x0001 - 0x0000)
struct BP_DecalingDamageDetection_C_IgnoreTrace final
{
public:
	bool                                          bIgnore;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DecalingDamageDetection_C_IgnoreTrace) == 0x000001, "Wrong alignment on BP_DecalingDamageDetection_C_IgnoreTrace");
static_assert(sizeof(BP_DecalingDamageDetection_C_IgnoreTrace) == 0x000001, "Wrong size on BP_DecalingDamageDetection_C_IgnoreTrace");
static_assert(offsetof(BP_DecalingDamageDetection_C_IgnoreTrace, bIgnore) == 0x000000, "Member 'BP_DecalingDamageDetection_C_IgnoreTrace::bIgnore' has a wrong offset!");

// Function BP_DecalingDamageDetection.BP_DecalingDamageDetection_C.CheckDisableDirectDamage
// 0x0010 (0x0010 - 0x0000)
struct BP_DecalingDamageDetection_C_CheckDisableDirectDamage final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisableDirectDamage;                              // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DecalingDamageDetection_C_CheckDisableDirectDamage) == 0x000008, "Wrong alignment on BP_DecalingDamageDetection_C_CheckDisableDirectDamage");
static_assert(sizeof(BP_DecalingDamageDetection_C_CheckDisableDirectDamage) == 0x000010, "Wrong size on BP_DecalingDamageDetection_C_CheckDisableDirectDamage");
static_assert(offsetof(BP_DecalingDamageDetection_C_CheckDisableDirectDamage, DamageCauser) == 0x000000, "Member 'BP_DecalingDamageDetection_C_CheckDisableDirectDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_CheckDisableDirectDamage, bDisableDirectDamage) == 0x000008, "Member 'BP_DecalingDamageDetection_C_CheckDisableDirectDamage::bDisableDirectDamage' has a wrong offset!");

// Function BP_DecalingDamageDetection.BP_DecalingDamageDetection_C.CheckAreaIn
// 0x0040 (0x0040 - 0x0000)
struct BP_DecalingDamageDetection_C_CheckAreaIn final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         Radius;                                            // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Length;                                            // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PartitionNum;                                      // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCheckUnder;                                       // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ValidGroundOffsetZ;                                // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTarget;                                           // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0030(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HitCheck_ContinuedSphere_Sphere_bHit;     // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DecalingDamageDetection_C_CheckAreaIn) == 0x000004, "Wrong alignment on BP_DecalingDamageDetection_C_CheckAreaIn");
static_assert(sizeof(BP_DecalingDamageDetection_C_CheckAreaIn) == 0x000040, "Wrong size on BP_DecalingDamageDetection_C_CheckAreaIn");
static_assert(offsetof(BP_DecalingDamageDetection_C_CheckAreaIn, Location) == 0x000000, "Member 'BP_DecalingDamageDetection_C_CheckAreaIn::Location' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_CheckAreaIn, Rotation) == 0x00000C, "Member 'BP_DecalingDamageDetection_C_CheckAreaIn::Rotation' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_CheckAreaIn, Radius) == 0x000018, "Member 'BP_DecalingDamageDetection_C_CheckAreaIn::Radius' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_CheckAreaIn, Length) == 0x00001C, "Member 'BP_DecalingDamageDetection_C_CheckAreaIn::Length' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_CheckAreaIn, PartitionNum) == 0x000020, "Member 'BP_DecalingDamageDetection_C_CheckAreaIn::PartitionNum' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_CheckAreaIn, bCheckUnder) == 0x000024, "Member 'BP_DecalingDamageDetection_C_CheckAreaIn::bCheckUnder' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_CheckAreaIn, ValidGroundOffsetZ) == 0x000028, "Member 'BP_DecalingDamageDetection_C_CheckAreaIn::ValidGroundOffsetZ' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_CheckAreaIn, bTarget) == 0x00002C, "Member 'BP_DecalingDamageDetection_C_CheckAreaIn::bTarget' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_CheckAreaIn, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000030, "Member 'BP_DecalingDamageDetection_C_CheckAreaIn::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_CheckAreaIn, CallFunc_HitCheck_ContinuedSphere_Sphere_bHit) == 0x00003C, "Member 'BP_DecalingDamageDetection_C_CheckAreaIn::CallFunc_HitCheck_ContinuedSphere_Sphere_bHit' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_CheckAreaIn, CallFunc_BooleanAND_ReturnValue) == 0x00003D, "Member 'BP_DecalingDamageDetection_C_CheckAreaIn::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_DecalingDamageDetection.BP_DecalingDamageDetection_C.GetTargetLocation
// 0x0018 (0x0018 - 0x0000)
struct BP_DecalingDamageDetection_C_GetTargetLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x000C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DecalingDamageDetection_C_GetTargetLocation) == 0x000004, "Wrong alignment on BP_DecalingDamageDetection_C_GetTargetLocation");
static_assert(sizeof(BP_DecalingDamageDetection_C_GetTargetLocation) == 0x000018, "Wrong size on BP_DecalingDamageDetection_C_GetTargetLocation");
static_assert(offsetof(BP_DecalingDamageDetection_C_GetTargetLocation, Location) == 0x000000, "Member 'BP_DecalingDamageDetection_C_GetTargetLocation::Location' has a wrong offset!");
static_assert(offsetof(BP_DecalingDamageDetection_C_GetTargetLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00000C, "Member 'BP_DecalingDamageDetection_C_GetTargetLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

}

