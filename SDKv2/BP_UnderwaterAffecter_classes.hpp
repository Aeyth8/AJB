#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UnderwaterAffecter

#include "Basic.hpp"

#include "E_GionSpawnedSpace_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_UnderwaterAffecter.BP_UnderwaterAffecter_C
// 0x0168 (0x0258 - 0x00F0)
class UBP_UnderwaterAffecter_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00F0(0x0008)(Transient, DuplicateTransient)
	TArray<class ABP_UnderwaterAreaVolume_C*>     OverlapVolume;                                     // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	UMulticastDelegateProperty_                   OnBeginUnderwaterEvent;                            // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnEndUnderwaterEvent;                              // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FName                                   NoseSocket;                                        // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   FootSocketName;                                    // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SubmasionRate;                                     // 0x0138(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Oxygen;                                            // 0x013C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ApneaTime;                                         // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DecreaseOxygenApneaTimeThreshold;                  // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OxygenDepletingAmaountPerSecond;                   // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OxygenRecoverAmaountPerSecond;                     // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedDownSubmasionThreshold;                       // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedDownRate;                                     // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsDrowning;                                       // 0x0158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnBeginDrown;                                      // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnEndDrown;                                        // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FTimespan                              DamageIntervalFinishTime;                          // 0x0180(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnDrownDamage;                                     // 0x0188(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FTimespan                              DrownDamageInterval;                               // 0x0198(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         DrownBaseDamage;                                   // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSubmergedPelvis;                                 // 0x01A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A5[0x3];                                      // 0x01A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxWorldZLocationInCurrentFalling;                 // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InWaterEffectThreasholdHeight;                     // 0x01AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 DepthLevelThreashold;                              // 0x01B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         LastDepthLevel;                                    // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InWaterEffectThresholdSpeed;                       // 0x01C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedOfSubmergeMoment;                             // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovingEffectIntervalRemainTime;                    // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovingEffectInterval_D1;                           // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovingEffectInterval_D2;                           // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EffectSpawnPositionCorrectionFactor;               // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsEnableSpeedDown;                                // 0x01DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsEnableDrown;                                    // 0x01DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1DE[0x2];                                      // 0x01DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               MovingRippleEffect;                                // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCameraInWater;                                   // 0x01E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E9[0x7];                                      // 0x01E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           UnderWaterLoopSound;                               // 0x01F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNoseInWater;                                     // 0x01F8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F9[0x7];                                      // 0x01F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnChangeCameraStatus;                              // 0x0200(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UParticleSystemComponent*               DustLoopEffect;                                    // 0x0210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               NewVar_0;                                          // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               BreathingBubblesEffect;                            // 0x0220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActiveDustParticle;                              // 0x0228(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsActiveBreathBubblesParticle;                     // 0x0229(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22A[0x2];                                      // 0x022A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CharacterZSpeed;                                   // 0x022C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastCharacterLocation;                             // 0x0230(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_UnderwaterMaskingCylinder_C*        WaterMaskCylinder;                                 // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OffsetCameraStatusThreasholdForMask;               // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCameraInWaterForMask;                            // 0x024C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24D[0x3];                                      // 0x024D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LastViewTarget;                                    // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnBeginUnderwaterEvent__DelegateSignature();
	void OnEndUnderwaterEvent__DelegateSignature();
	void OnBeginDrown__DelegateSignature();
	void OnEndDrown__DelegateSignature();
	void OnDrownDamage__DelegateSignature();
	void OnChangeCameraStatus__DelegateSignature(bool IsCameraInWater_0);
	void ExecuteUbergraph_BP_UnderwaterAffecter(int32 EntryPoint);
	void OnEndKillCamera(const struct FGameplayTag& NextState);
	void UpdateStatusAfterResurrect(class AActor* Rescuer);
	void UpdateCheckCameraStatus_ForMaskCylinder();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ChangeMask(bool IsCameraInWater_0);
	void OnBeginResult(const struct FGameplayTag& PrevState);
	void UpdateCheckCameraStatus();
	void DisableDrown();
	void EnableDrown();
	void OnUpdateSubmasionRate();
	void DisableSpeedDown();
	void EnableSpeedDown();
	void CheckSubmergePelvis(float SubmasionRate_0);
	void OnPelvisInOut(bool IsSubmergedPelvis_0);
	void OnDamageDrown();
	void UpdateDrown(float DeltaTime);
	void MC_OnUpdateSubmasionRate();
	void RecoverOxygen(float DeltaTime);
	void ROS_OnUpdateSubmasionRate(float SubmasionRate_0, bool IsNoseInWater_0);
	void UpdateSubmersionRate();
	void OnEndUnderwater(const class ABP_UnderwaterAreaVolume_C*& Volume);
	void OnBeginUnderwater(const class ABP_UnderwaterAreaVolume_C*& Volume);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void MC_SpawnInOutWaterEffects();
	void ROS_SpawnInOutWaterEffects();
	void SpawnWaterSurfaceAttackSplashCore(const struct FVector& InputPin);
	void MC_SpawnWaterSurfaceAttackSplash(const struct FVector& Location);
	void ROS_SpawnWaterSurfaceAttackSplash(const struct FVector& Location);
	void SpawnWaterSurfaceAttackSplash(const struct FVector& Location);
	void SpawnInOutWaterEffects();
	void UpdateRippleEffect();
	void OnInWater();
	void SpawnMovingEffects();
	void GetOwnerInGameCharacter(class ABP_AJBInGameCharacter_C** InGameCharacter);
	void GetWaterSurfaceZ(float* Z);
	void GetOwnerSocketZ(class FName InSocketName, float* Z);
	void GetCurrentDepthLevel(int32* DeplthLevel);
	float GetMovingEffectInterval();
	void SetActiveRippleLoopEffect(bool bNewActive);
	void CheckOverlappingUnderwaterVolumes();
	void GetOwnerNosePointZ(float* Return_Value_Z);
	bool IsInWater();
	void GetCharacterWaterSurfacePosition(struct FVector* Position);
	void SetActiveDustLoopEffect(bool NewActive);
	void SetActiveBreathBubblesEffect(bool NewActive);
	bool IsDuringTeleportation();
	void TryGetUnderwaterMaskingCylinder(class ABP_UnderwaterMaskingCylinder_C** WaterMaskCylinder_0);
	void DestroyUnderwaterMaskingCylinder();
	void IsViewTargetOwner(bool* IsViewTarget);
	bool IsDuringStickyDive();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_UnderwaterAffecter_C">();
	}
	static class UBP_UnderwaterAffecter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_UnderwaterAffecter_C>();
	}
};
static_assert(alignof(UBP_UnderwaterAffecter_C) == 0x000008, "Wrong alignment on UBP_UnderwaterAffecter_C");
static_assert(sizeof(UBP_UnderwaterAffecter_C) == 0x000258, "Wrong size on UBP_UnderwaterAffecter_C");
static_assert(offsetof(UBP_UnderwaterAffecter_C, UberGraphFrame) == 0x0000F0, "Member 'UBP_UnderwaterAffecter_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, OverlapVolume) == 0x0000F8, "Member 'UBP_UnderwaterAffecter_C::OverlapVolume' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, OnBeginUnderwaterEvent) == 0x000108, "Member 'UBP_UnderwaterAffecter_C::OnBeginUnderwaterEvent' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, OnEndUnderwaterEvent) == 0x000118, "Member 'UBP_UnderwaterAffecter_C::OnEndUnderwaterEvent' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, NoseSocket) == 0x000128, "Member 'UBP_UnderwaterAffecter_C::NoseSocket' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, FootSocketName) == 0x000130, "Member 'UBP_UnderwaterAffecter_C::FootSocketName' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, SubmasionRate) == 0x000138, "Member 'UBP_UnderwaterAffecter_C::SubmasionRate' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, Oxygen) == 0x00013C, "Member 'UBP_UnderwaterAffecter_C::Oxygen' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, ApneaTime) == 0x000140, "Member 'UBP_UnderwaterAffecter_C::ApneaTime' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, DecreaseOxygenApneaTimeThreshold) == 0x000144, "Member 'UBP_UnderwaterAffecter_C::DecreaseOxygenApneaTimeThreshold' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, OxygenDepletingAmaountPerSecond) == 0x000148, "Member 'UBP_UnderwaterAffecter_C::OxygenDepletingAmaountPerSecond' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, OxygenRecoverAmaountPerSecond) == 0x00014C, "Member 'UBP_UnderwaterAffecter_C::OxygenRecoverAmaountPerSecond' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, SpeedDownSubmasionThreshold) == 0x000150, "Member 'UBP_UnderwaterAffecter_C::SpeedDownSubmasionThreshold' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, SpeedDownRate) == 0x000154, "Member 'UBP_UnderwaterAffecter_C::SpeedDownRate' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, bIsDrowning) == 0x000158, "Member 'UBP_UnderwaterAffecter_C::bIsDrowning' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, OnBeginDrown) == 0x000160, "Member 'UBP_UnderwaterAffecter_C::OnBeginDrown' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, OnEndDrown) == 0x000170, "Member 'UBP_UnderwaterAffecter_C::OnEndDrown' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, DamageIntervalFinishTime) == 0x000180, "Member 'UBP_UnderwaterAffecter_C::DamageIntervalFinishTime' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, OnDrownDamage) == 0x000188, "Member 'UBP_UnderwaterAffecter_C::OnDrownDamage' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, DrownDamageInterval) == 0x000198, "Member 'UBP_UnderwaterAffecter_C::DrownDamageInterval' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, DrownBaseDamage) == 0x0001A0, "Member 'UBP_UnderwaterAffecter_C::DrownBaseDamage' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, IsSubmergedPelvis) == 0x0001A4, "Member 'UBP_UnderwaterAffecter_C::IsSubmergedPelvis' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, MaxWorldZLocationInCurrentFalling) == 0x0001A8, "Member 'UBP_UnderwaterAffecter_C::MaxWorldZLocationInCurrentFalling' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, InWaterEffectThreasholdHeight) == 0x0001AC, "Member 'UBP_UnderwaterAffecter_C::InWaterEffectThreasholdHeight' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, DepthLevelThreashold) == 0x0001B0, "Member 'UBP_UnderwaterAffecter_C::DepthLevelThreashold' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, LastDepthLevel) == 0x0001C0, "Member 'UBP_UnderwaterAffecter_C::LastDepthLevel' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, InWaterEffectThresholdSpeed) == 0x0001C4, "Member 'UBP_UnderwaterAffecter_C::InWaterEffectThresholdSpeed' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, SpeedOfSubmergeMoment) == 0x0001C8, "Member 'UBP_UnderwaterAffecter_C::SpeedOfSubmergeMoment' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, MovingEffectIntervalRemainTime) == 0x0001CC, "Member 'UBP_UnderwaterAffecter_C::MovingEffectIntervalRemainTime' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, MovingEffectInterval_D1) == 0x0001D0, "Member 'UBP_UnderwaterAffecter_C::MovingEffectInterval_D1' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, MovingEffectInterval_D2) == 0x0001D4, "Member 'UBP_UnderwaterAffecter_C::MovingEffectInterval_D2' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, EffectSpawnPositionCorrectionFactor) == 0x0001D8, "Member 'UBP_UnderwaterAffecter_C::EffectSpawnPositionCorrectionFactor' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, bIsEnableSpeedDown) == 0x0001DC, "Member 'UBP_UnderwaterAffecter_C::bIsEnableSpeedDown' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, bIsEnableDrown) == 0x0001DD, "Member 'UBP_UnderwaterAffecter_C::bIsEnableDrown' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, MovingRippleEffect) == 0x0001E0, "Member 'UBP_UnderwaterAffecter_C::MovingRippleEffect' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, IsCameraInWater) == 0x0001E8, "Member 'UBP_UnderwaterAffecter_C::IsCameraInWater' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, UnderWaterLoopSound) == 0x0001F0, "Member 'UBP_UnderwaterAffecter_C::UnderWaterLoopSound' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, IsNoseInWater) == 0x0001F8, "Member 'UBP_UnderwaterAffecter_C::IsNoseInWater' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, OnChangeCameraStatus) == 0x000200, "Member 'UBP_UnderwaterAffecter_C::OnChangeCameraStatus' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, DustLoopEffect) == 0x000210, "Member 'UBP_UnderwaterAffecter_C::DustLoopEffect' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, NewVar_0) == 0x000218, "Member 'UBP_UnderwaterAffecter_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, BreathingBubblesEffect) == 0x000220, "Member 'UBP_UnderwaterAffecter_C::BreathingBubblesEffect' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, IsActiveDustParticle) == 0x000228, "Member 'UBP_UnderwaterAffecter_C::IsActiveDustParticle' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, IsActiveBreathBubblesParticle) == 0x000229, "Member 'UBP_UnderwaterAffecter_C::IsActiveBreathBubblesParticle' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, CharacterZSpeed) == 0x00022C, "Member 'UBP_UnderwaterAffecter_C::CharacterZSpeed' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, LastCharacterLocation) == 0x000230, "Member 'UBP_UnderwaterAffecter_C::LastCharacterLocation' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, WaterMaskCylinder) == 0x000240, "Member 'UBP_UnderwaterAffecter_C::WaterMaskCylinder' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, OffsetCameraStatusThreasholdForMask) == 0x000248, "Member 'UBP_UnderwaterAffecter_C::OffsetCameraStatusThreasholdForMask' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, IsCameraInWaterForMask) == 0x00024C, "Member 'UBP_UnderwaterAffecter_C::IsCameraInWaterForMask' has a wrong offset!");
static_assert(offsetof(UBP_UnderwaterAffecter_C, LastViewTarget) == 0x000250, "Member 'UBP_UnderwaterAffecter_C::LastViewTarget' has a wrong offset!");

}

