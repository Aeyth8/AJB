#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameAIDirector

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "AJB_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBInGameAIDirector.BP_AJBInGameAIDirector_C
// 0x00E0 (0x01D0 - 0x00F0)
class UBP_AJBInGameAIDirector_C final : public UAJBInGameAIDirectorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00F0(0x0008)(Transient, DuplicateTransient)
	class UBP_AJBInGameAIEnvironment_C*           AIEnvironment;                                     // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_AJBInGameAIController_C*>    AIControllers;                                     // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          bGameplayStarted;                                  // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBP_AJBAIMessenger_C*>           AIMessengerForDebugShow;                           // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         AILevel;                                           // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebugUpdateSomeCountOfNPCsStatusOnTick;           // 0x012C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugUseTestBT;                                   // 0x012D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12E[0x2];                                      // 0x012E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DefaultAILevel;                                    // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   NPCAvailableCharacterTags;                         // 0x0138(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class UBehaviorTree*                          DebugTestBT;                                       // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   DebugAISpawnedByStartPoint;                        // 0x0150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<struct FGameplayTag>                   LocationTestCharacterTags;                         // 0x0160(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FGameplayTag                           DebugCharacterTag;                                 // 0x0170(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnNPCSpawned;                                      // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<struct FGameplayTag>                   DebugNPCAvailableCharacterTags;                    // 0x0188(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	UMulticastDelegateProperty_                   OnSpecialNPCSpawned;                               // 0x0198(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         DebugOverride_NPCLv;                               // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           DebugOverride_CharacterTag;                        // 0x01B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBehaviorTree*                          DebugOverride_BehaviorTree;                        // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_AJBAIMessenger_C*                   AIMessengerForDebugEventReplaySHA;                 // 0x01C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DebugEventReplayTargetNextIndex;                   // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void DebugAISpawnedByStartPoint__DelegateSignature(class ABP_AJBInGameAIController_C* InGame_AI_Controller, class ABP_AJBDebugAIStartPoint_C* AI_StartPoint);
	void OnNPCSpawned__DelegateSignature(class ABP_AJBInGameCharacter_C* Character);
	void OnSpecialNPCSpawned__DelegateSignature(class ABP_AJBInGameCharacter_C* Character, const struct FGameplayTag& SpecialTag);
	void ExecuteUbergraph_BP_AJBInGameAIDirector(int32 EntryPoint);
	void AddSpecialNPC(const struct FGameplayTag& CharacterTag, const struct FTransform& Transform, uint8 AILevel_0, const struct FGameplayTag& SpecialTag, class AActor* ContextActor, int32 SerialNumber);
	void StartSHABehavior(class ABP_AJBInGameAIController_C* AIController, float Delay);
	void OnStartLastSurvivorScene();
	void SetupRelationships();
	void DebugRunNPC(class ABP_AJBInGameAIController_C* AI_Controller, class UBehaviorTree* BehaviorTreeAsset, class UBehaviorTree* SubTreeAsset);
	void DebugStartBehavior(class ABP_AJBInGameAIController_C* AI_Controller, class UBehaviorTree* BehaviorTreeAsset, class UBehaviorTree* SubTreeAsset);
	void AddPlayerCharacterInfo(class ABP_AJBInGameCharacter_C* InGameCharacter);
	void SetupEnvironment();
	void StartDefaultBehavior(class ABP_AJBInGameAIController_C* AI_Controller, float Delay);
	void AddBattleNPCFromDebug(const struct FGameplayTag& CharacterTag, const struct FTransform& Transform, uint8 AI_Level);
	void RunNPC(class ABP_AJBInGameAIController_C* AIController, float Delay, const struct FGameplayTag& SpecialTag);
	void RunAllNPCs();
	void StartGameplay();
	void AddBattleNPC(const struct FGameplayTag& CharacterTag, const struct FTransform& Transform, uint8 AILevel_0);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void DebugGetNavigationPathLocations(class APlayerController* PlayerControler, const struct FVector& Location);
	void DebugRequestEventReplaySHA(class APlayerController* ClientController);
	void DebugSetupEventReplayForSpecialNPC(class ABP_AJBInGameCharacter_C* Character, const struct FGameplayTag& SpecialTag);
	void DebugSendNavMeshPointAround(class APlayerController* PlayerController, const struct FVector& Location);
	void DebugRequestByGameplayTags(class APlayerController* PlayerController, const struct FGameplayTagContainer& Tags, const struct FVector& VectorIn);
	void DebugRequestAddNPCFromDebugArgs(const struct FVector& Location, const struct FRotator& Rotation, const struct FGameplayTagContainer& AddInfoTags, int32 AILevel_0);
	void DebugOnBeginPlay();
	void OnFinishedDelayForStartBehavior(class ABP_AJBInGameAIController_C* AI_Controller, class ABP_AJBDebugAIStartPoint_C* DebugAIStartPoint);
	void DebugRequestAddNPCFromDebugActor(class AActor* Actor);
	void DebugRequestNPCAllLog(class APlayerController* PlayerController, int32 NPCId);
	void DebugChangeDefaultAILevel(int32 AI_Level_As_Default);
	void DebugRequestHideDebugInfo(class APlayerController* PlayerController);
	void DebugRequestShowDebugInfo(class APlayerController* PlayerController);
	void DebugRequestRestartBehavior(int32 DebugMenuIndex);
	void DebugShowSingleNPCDebugInfo(class UBP_AJBAIMessenger_C* AI_Messenger, class ABP_AJBInGameAIController_C* AI_Controller, int32 Index_0);
	void OnSpawnForDebugShowNPCStatus(class ABP_AJBInGameAIController_C* AI_Controller, int32 Index_0);
	void OnDeadForDebugShowNPCStatus(class AAIController* AIController, const struct FGameplayTag& DamageType);
	void DebugUpdateSingleNPCStatus(class UBP_AJBAIMessenger_C* AIMessenger, int32 Index_0);
	void DebugUpdateNPCsStatus();
	void GetImplementedCharacterClasses(TArray<class UClass*>* ImplementedCharacterClasses);
	class AActor* FindNearestStartPoint(const struct FVector& Location);
	void SpawnBattleNPCCharacter(const struct FTransform& SpawnTransform, uint8 SpawnAILevel, const struct FGameplayTag& CharacterTag, class AActor* Owner, bool bRunNPC, class ABP_AJBInGameAIController_C** AIController, class ABP_AJBInGameCharacter_C** NPCCharacter);
	int32 GetCountOfAIControllers();
	int32 GetNPCIdFromPawn(class APawn* Pawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBInGameAIDirector_C">();
	}
	static class UBP_AJBInGameAIDirector_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBInGameAIDirector_C>();
	}
};
static_assert(alignof(UBP_AJBInGameAIDirector_C) == 0x000008, "Wrong alignment on UBP_AJBInGameAIDirector_C");
static_assert(sizeof(UBP_AJBInGameAIDirector_C) == 0x0001D0, "Wrong size on UBP_AJBInGameAIDirector_C");
static_assert(offsetof(UBP_AJBInGameAIDirector_C, UberGraphFrame) == 0x0000F0, "Member 'UBP_AJBInGameAIDirector_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_AJBInGameAIDirector_C, AIEnvironment) == 0x0000F8, "Member 'UBP_AJBInGameAIDirector_C::AIEnvironment' has a wrong offset!");
static_assert(offsetof(UBP_AJBInGameAIDirector_C, AIControllers) == 0x000100, "Member 'UBP_AJBInGameAIDirector_C::AIControllers' has a wrong offset!");
static_assert(offsetof(UBP_AJBInGameAIDirector_C, bGameplayStarted) == 0x000110, "Member 'UBP_AJBInGameAIDirector_C::bGameplayStarted' has a wrong offset!");
static_assert(offsetof(UBP_AJBInGameAIDirector_C, AIMessengerForDebugShow) == 0x000118, "Member 'UBP_AJBInGameAIDirector_C::AIMessengerForDebugShow' has a wrong offset!");
static_assert(offsetof(UBP_AJBInGameAIDirector_C, AILevel) == 0x000128, "Member 'UBP_AJBInGameAIDirector_C::AILevel' has a wrong offset!");
static_assert(offsetof(UBP_AJBInGameAIDirector_C, bDebugUpdateSomeCountOfNPCsStatusOnTick) == 0x00012C, "Member 'UBP_AJBInGameAIDirector_C::bDebugUpdateSomeCountOfNPCsStatusOnTick' has a wrong offset!");
static_assert(offsetof(UBP_AJBInGameAIDirector_C, bDebugUseTestBT) == 0x00012D, "Member 'UBP_AJBInGameAIDirector_C::bDebugUseTestBT' has a wrong offset!");
static_assert(offsetof(UBP_AJBInGameAIDirector_C, DefaultAILevel) == 0x000130, "Member 'UBP_AJBInGameAIDirector_C::DefaultAILevel' has a wrong offset!");
static_assert(offsetof(UBP_AJBInGameAIDirector_C, NPCAvailableCharacterTags) == 0x000138, "Member 'UBP_AJBInGameAIDirector_C::NPCAvailableCharacterTags' has a wrong offset!");
static_assert(offsetof(UBP_AJBInGameAIDirector_C, DebugTestBT) == 0x000148, "Member 'UBP_AJBInGameAIDirector_C::DebugTestBT' has a wrong offset!");
static_assert(offsetof(UBP_AJBInGameAIDirector_C, DebugAISpawnedByStartPoint) == 0x000150, "Member 'UBP_AJBInGameAIDirector_C::DebugAISpawnedByStartPoint' has a wrong offset!");
static_assert(offsetof(UBP_AJBInGameAIDirector_C, LocationTestCharacterTags) == 0x000160, "Member 'UBP_AJBInGameAIDirector_C::LocationTestCharacterTags' has a wrong offset!");
static_assert(offsetof(UBP_AJBInGameAIDirector_C, DebugCharacterTag) == 0x000170, "Member 'UBP_AJBInGameAIDirector_C::DebugCharacterTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBInGameAIDirector_C, OnNPCSpawned) == 0x000178, "Member 'UBP_AJBInGameAIDirector_C::OnNPCSpawned' has a wrong offset!");
static_assert(offsetof(UBP_AJBInGameAIDirector_C, DebugNPCAvailableCharacterTags) == 0x000188, "Member 'UBP_AJBInGameAIDirector_C::DebugNPCAvailableCharacterTags' has a wrong offset!");
static_assert(offsetof(UBP_AJBInGameAIDirector_C, OnSpecialNPCSpawned) == 0x000198, "Member 'UBP_AJBInGameAIDirector_C::OnSpecialNPCSpawned' has a wrong offset!");
static_assert(offsetof(UBP_AJBInGameAIDirector_C, DebugOverride_NPCLv) == 0x0001A8, "Member 'UBP_AJBInGameAIDirector_C::DebugOverride_NPCLv' has a wrong offset!");
static_assert(offsetof(UBP_AJBInGameAIDirector_C, DebugOverride_CharacterTag) == 0x0001B0, "Member 'UBP_AJBInGameAIDirector_C::DebugOverride_CharacterTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBInGameAIDirector_C, DebugOverride_BehaviorTree) == 0x0001B8, "Member 'UBP_AJBInGameAIDirector_C::DebugOverride_BehaviorTree' has a wrong offset!");
static_assert(offsetof(UBP_AJBInGameAIDirector_C, AIMessengerForDebugEventReplaySHA) == 0x0001C0, "Member 'UBP_AJBInGameAIDirector_C::AIMessengerForDebugEventReplaySHA' has a wrong offset!");
static_assert(offsetof(UBP_AJBInGameAIDirector_C, DebugEventReplayTargetNextIndex) == 0x0001C8, "Member 'UBP_AJBInGameAIDirector_C::DebugEventReplayTargetNextIndex' has a wrong offset!");

}

