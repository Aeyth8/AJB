#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_TestModeMenuItemValue

#include "Basic.hpp"

#include "Slate_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WB_TestModeMenuItemValue.WB_TestModeMenuItemValue_C.OnChangeValue__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WB_TestModeMenuItemValue_C_OnChangeValue__DelegateSignature final
{
public:
	class UWB_TestModeMenuItemValue_C*            ChangeMenuItem;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_TestModeMenuItemValue_C_OnChangeValue__DelegateSignature) == 0x000008, "Wrong alignment on WB_TestModeMenuItemValue_C_OnChangeValue__DelegateSignature");
static_assert(sizeof(WB_TestModeMenuItemValue_C_OnChangeValue__DelegateSignature) == 0x000008, "Wrong size on WB_TestModeMenuItemValue_C_OnChangeValue__DelegateSignature");
static_assert(offsetof(WB_TestModeMenuItemValue_C_OnChangeValue__DelegateSignature, ChangeMenuItem) == 0x000000, "Member 'WB_TestModeMenuItemValue_C_OnChangeValue__DelegateSignature::ChangeMenuItem' has a wrong offset!");

// Function WB_TestModeMenuItemValue.WB_TestModeMenuItemValue_C.ExecuteUbergraph_WB_TestModeMenuItemValue
// 0x0040 (0x0040 - 0x0000)
struct WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextBlock*                             CallFunc_CreateText_ValueText;                     // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUINavigationRule                             Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETextJustify                                  Temp_byte_Variable1;                               // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETextJustify                                  Temp_byte_Variable2;                               // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0018(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetValueText_OutText;                     // 0x0020(0x0018)()
	EUINavigationRule                             Temp_byte_Variable3;                               // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable1;                               // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EUINavigationRule                             K2Node_Select_Default;                             // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ValueUp_IsMax;                            // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ValueDown_ReturnValue;                    // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETextJustify                                  K2Node_Select1_Default;                            // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue) == 0x000008, "Wrong alignment on WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue");
static_assert(sizeof(WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue) == 0x000040, "Wrong size on WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue");
static_assert(offsetof(WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue, EntryPoint) == 0x000000, "Member 'WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue, CallFunc_CreateText_ValueText) == 0x000008, "Member 'WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue::CallFunc_CreateText_ValueText' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue, Temp_byte_Variable) == 0x000010, "Member 'WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue, Temp_bool_Variable) == 0x000011, "Member 'WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue, Temp_byte_Variable1) == 0x000012, "Member 'WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue, Temp_byte_Variable2) == 0x000013, "Member 'WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue, CallFunc_Not_PreBool_ReturnValue) == 0x000014, "Member 'WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue, CallFunc_MakeVector2D_ReturnValue) == 0x000018, "Member 'WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue, CallFunc_GetValueText_OutText) == 0x000020, "Member 'WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue::CallFunc_GetValueText_OutText' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue, Temp_byte_Variable3) == 0x000038, "Member 'WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue::Temp_byte_Variable3' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue, Temp_bool_Variable1) == 0x000039, "Member 'WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue, K2Node_Select_Default) == 0x00003A, "Member 'WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue, K2Node_Event_IsDesignTime) == 0x00003B, "Member 'WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue, CallFunc_ValueUp_IsMax) == 0x00003C, "Member 'WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue::CallFunc_ValueUp_IsMax' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue, CallFunc_ValueDown_ReturnValue) == 0x00003D, "Member 'WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue::CallFunc_ValueDown_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue, K2Node_Select1_Default) == 0x00003E, "Member 'WB_TestModeMenuItemValue_C_ExecuteUbergraph_WB_TestModeMenuItemValue::K2Node_Select1_Default' has a wrong offset!");

// Function WB_TestModeMenuItemValue.WB_TestModeMenuItemValue_C.GetValueText
// 0x0030 (0x0030 - 0x0000)
struct WB_TestModeMenuItemValue_C_GetValueText final
{
public:
	class FText                                   OutText;                                           // 0x0000(0x0018)(Parm, OutParm)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0018(0x0018)()
};
static_assert(alignof(WB_TestModeMenuItemValue_C_GetValueText) == 0x000008, "Wrong alignment on WB_TestModeMenuItemValue_C_GetValueText");
static_assert(sizeof(WB_TestModeMenuItemValue_C_GetValueText) == 0x000030, "Wrong size on WB_TestModeMenuItemValue_C_GetValueText");
static_assert(offsetof(WB_TestModeMenuItemValue_C_GetValueText, OutText) == 0x000000, "Member 'WB_TestModeMenuItemValue_C_GetValueText::OutText' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_GetValueText, CallFunc_Conv_IntToText_ReturnValue) == 0x000018, "Member 'WB_TestModeMenuItemValue_C_GetValueText::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");

// Function WB_TestModeMenuItemValue.WB_TestModeMenuItemValue_C.IsDefaultValue
// 0x0002 (0x0002 - 0x0000)
struct WB_TestModeMenuItemValue_C_IsDefaultValue final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TestModeMenuItemValue_C_IsDefaultValue) == 0x000001, "Wrong alignment on WB_TestModeMenuItemValue_C_IsDefaultValue");
static_assert(sizeof(WB_TestModeMenuItemValue_C_IsDefaultValue) == 0x000002, "Wrong size on WB_TestModeMenuItemValue_C_IsDefaultValue");
static_assert(offsetof(WB_TestModeMenuItemValue_C_IsDefaultValue, ReturnValue) == 0x000000, "Member 'WB_TestModeMenuItemValue_C_IsDefaultValue::ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_IsDefaultValue, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000001, "Member 'WB_TestModeMenuItemValue_C_IsDefaultValue::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function WB_TestModeMenuItemValue.WB_TestModeMenuItemValue_C.ValueUp
// 0x0001 (0x0001 - 0x0000)
struct WB_TestModeMenuItemValue_C_ValueUp final
{
public:
	bool                                          IsMax;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TestModeMenuItemValue_C_ValueUp) == 0x000001, "Wrong alignment on WB_TestModeMenuItemValue_C_ValueUp");
static_assert(sizeof(WB_TestModeMenuItemValue_C_ValueUp) == 0x000001, "Wrong size on WB_TestModeMenuItemValue_C_ValueUp");
static_assert(offsetof(WB_TestModeMenuItemValue_C_ValueUp, IsMax) == 0x000000, "Member 'WB_TestModeMenuItemValue_C_ValueUp::IsMax' has a wrong offset!");

// Function WB_TestModeMenuItemValue.WB_TestModeMenuItemValue_C.ValueDown
// 0x0001 (0x0001 - 0x0000)
struct WB_TestModeMenuItemValue_C_ValueDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TestModeMenuItemValue_C_ValueDown) == 0x000001, "Wrong alignment on WB_TestModeMenuItemValue_C_ValueDown");
static_assert(sizeof(WB_TestModeMenuItemValue_C_ValueDown) == 0x000001, "Wrong size on WB_TestModeMenuItemValue_C_ValueDown");
static_assert(offsetof(WB_TestModeMenuItemValue_C_ValueDown, ReturnValue) == 0x000000, "Member 'WB_TestModeMenuItemValue_C_ValueDown::ReturnValue' has a wrong offset!");

// Function WB_TestModeMenuItemValue.WB_TestModeMenuItemValue_C.UpdateValueText
// 0x0028 (0x0028 - 0x0000)
struct WB_TestModeMenuItemValue_C_UpdateValueText final
{
public:
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable1;                               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetValueText_OutText;                     // 0x0008(0x0018)()
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_TestModeMenuItemValue_C_UpdateValueText) == 0x000008, "Wrong alignment on WB_TestModeMenuItemValue_C_UpdateValueText");
static_assert(sizeof(WB_TestModeMenuItemValue_C_UpdateValueText) == 0x000028, "Wrong size on WB_TestModeMenuItemValue_C_UpdateValueText");
static_assert(offsetof(WB_TestModeMenuItemValue_C_UpdateValueText, Temp_byte_Variable) == 0x000000, "Member 'WB_TestModeMenuItemValue_C_UpdateValueText::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_UpdateValueText, Temp_byte_Variable1) == 0x000001, "Member 'WB_TestModeMenuItemValue_C_UpdateValueText::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_UpdateValueText, Temp_bool_Variable) == 0x000002, "Member 'WB_TestModeMenuItemValue_C_UpdateValueText::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_UpdateValueText, CallFunc_GetValueText_OutText) == 0x000008, "Member 'WB_TestModeMenuItemValue_C_UpdateValueText::CallFunc_GetValueText_OutText' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_UpdateValueText, K2Node_Select_Default) == 0x000020, "Member 'WB_TestModeMenuItemValue_C_UpdateValueText::K2Node_Select_Default' has a wrong offset!");

// Function WB_TestModeMenuItemValue.WB_TestModeMenuItemValue_C.SetSelectValue
// 0x0004 (0x0004 - 0x0000)
struct WB_TestModeMenuItemValue_C_SetSelectValue final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_TestModeMenuItemValue_C_SetSelectValue) == 0x000004, "Wrong alignment on WB_TestModeMenuItemValue_C_SetSelectValue");
static_assert(sizeof(WB_TestModeMenuItemValue_C_SetSelectValue) == 0x000004, "Wrong size on WB_TestModeMenuItemValue_C_SetSelectValue");
static_assert(offsetof(WB_TestModeMenuItemValue_C_SetSelectValue, Value) == 0x000000, "Member 'WB_TestModeMenuItemValue_C_SetSelectValue::Value' has a wrong offset!");

// Function WB_TestModeMenuItemValue.WB_TestModeMenuItemValue_C.BlinkTextBlock
// 0x0130 (0x0130 - 0x0000)
struct WB_TestModeMenuItemValue_C_BlinkTextBlock final
{
public:
	class UTextBlock*                             TargetTextBlock;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x000C(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable1;                             // 0x001C(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable1;                               // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable2;                             // 0x0030(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable3;                             // 0x0040(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable2;                               // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable3;                               // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable4;                             // 0x0054(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable5;                             // 0x0064(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDefaultValue_ReturnValue;               // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDefaultValue_ReturnValue1;              // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_76[0x2];                                       // 0x0076(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0078(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0088(0x0028)()
	struct FLinearColor                           K2Node_Select1_Default;                            // 0x00B0(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor1;                     // 0x00C0(0x0028)()
	struct FLinearColor                           K2Node_Select2_Default;                            // 0x00E8(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select3_Default;                            // 0x00F8(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor2;                     // 0x0108(0x0028)()
};
static_assert(alignof(WB_TestModeMenuItemValue_C_BlinkTextBlock) == 0x000008, "Wrong alignment on WB_TestModeMenuItemValue_C_BlinkTextBlock");
static_assert(sizeof(WB_TestModeMenuItemValue_C_BlinkTextBlock) == 0x000130, "Wrong size on WB_TestModeMenuItemValue_C_BlinkTextBlock");
static_assert(offsetof(WB_TestModeMenuItemValue_C_BlinkTextBlock, TargetTextBlock) == 0x000000, "Member 'WB_TestModeMenuItemValue_C_BlinkTextBlock::TargetTextBlock' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_BlinkTextBlock, Temp_bool_Variable) == 0x000008, "Member 'WB_TestModeMenuItemValue_C_BlinkTextBlock::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_BlinkTextBlock, Temp_struct_Variable) == 0x00000C, "Member 'WB_TestModeMenuItemValue_C_BlinkTextBlock::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_BlinkTextBlock, Temp_struct_Variable1) == 0x00001C, "Member 'WB_TestModeMenuItemValue_C_BlinkTextBlock::Temp_struct_Variable1' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_BlinkTextBlock, Temp_bool_Variable1) == 0x00002C, "Member 'WB_TestModeMenuItemValue_C_BlinkTextBlock::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_BlinkTextBlock, Temp_struct_Variable2) == 0x000030, "Member 'WB_TestModeMenuItemValue_C_BlinkTextBlock::Temp_struct_Variable2' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_BlinkTextBlock, Temp_struct_Variable3) == 0x000040, "Member 'WB_TestModeMenuItemValue_C_BlinkTextBlock::Temp_struct_Variable3' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_BlinkTextBlock, Temp_bool_Variable2) == 0x000050, "Member 'WB_TestModeMenuItemValue_C_BlinkTextBlock::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_BlinkTextBlock, Temp_bool_Variable3) == 0x000051, "Member 'WB_TestModeMenuItemValue_C_BlinkTextBlock::Temp_bool_Variable3' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_BlinkTextBlock, Temp_struct_Variable4) == 0x000054, "Member 'WB_TestModeMenuItemValue_C_BlinkTextBlock::Temp_struct_Variable4' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_BlinkTextBlock, Temp_struct_Variable5) == 0x000064, "Member 'WB_TestModeMenuItemValue_C_BlinkTextBlock::Temp_struct_Variable5' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_BlinkTextBlock, CallFunc_IsDefaultValue_ReturnValue) == 0x000074, "Member 'WB_TestModeMenuItemValue_C_BlinkTextBlock::CallFunc_IsDefaultValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_BlinkTextBlock, CallFunc_IsDefaultValue_ReturnValue1) == 0x000075, "Member 'WB_TestModeMenuItemValue_C_BlinkTextBlock::CallFunc_IsDefaultValue_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_BlinkTextBlock, K2Node_Select_Default) == 0x000078, "Member 'WB_TestModeMenuItemValue_C_BlinkTextBlock::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_BlinkTextBlock, K2Node_MakeStruct_SlateColor) == 0x000088, "Member 'WB_TestModeMenuItemValue_C_BlinkTextBlock::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_BlinkTextBlock, K2Node_Select1_Default) == 0x0000B0, "Member 'WB_TestModeMenuItemValue_C_BlinkTextBlock::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_BlinkTextBlock, K2Node_MakeStruct_SlateColor1) == 0x0000C0, "Member 'WB_TestModeMenuItemValue_C_BlinkTextBlock::K2Node_MakeStruct_SlateColor1' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_BlinkTextBlock, K2Node_Select2_Default) == 0x0000E8, "Member 'WB_TestModeMenuItemValue_C_BlinkTextBlock::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_BlinkTextBlock, K2Node_Select3_Default) == 0x0000F8, "Member 'WB_TestModeMenuItemValue_C_BlinkTextBlock::K2Node_Select3_Default' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_BlinkTextBlock, K2Node_MakeStruct_SlateColor2) == 0x000108, "Member 'WB_TestModeMenuItemValue_C_BlinkTextBlock::K2Node_MakeStruct_SlateColor2' has a wrong offset!");

// Function WB_TestModeMenuItemValue.WB_TestModeMenuItemValue_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WB_TestModeMenuItemValue_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TestModeMenuItemValue_C_PreConstruct) == 0x000001, "Wrong alignment on WB_TestModeMenuItemValue_C_PreConstruct");
static_assert(sizeof(WB_TestModeMenuItemValue_C_PreConstruct) == 0x000001, "Wrong size on WB_TestModeMenuItemValue_C_PreConstruct");
static_assert(offsetof(WB_TestModeMenuItemValue_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WB_TestModeMenuItemValue_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WB_TestModeMenuItemValue.WB_TestModeMenuItemValue_C.CreateText
// 0x0048 (0x0048 - 0x0000)
struct WB_TestModeMenuItemValue_C_CreateText final
{
public:
	class UTextBlock*                             ValueText_0;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextBlock*                             ReturenText;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextBlock*                             CallFunc_SpawnObject_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0018(0x0028)()
	class UCanvasPanelSlot*                       CallFunc_AddChildToCanvas_ReturnValue;             // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_TestModeMenuItemValue_C_CreateText) == 0x000008, "Wrong alignment on WB_TestModeMenuItemValue_C_CreateText");
static_assert(sizeof(WB_TestModeMenuItemValue_C_CreateText) == 0x000048, "Wrong size on WB_TestModeMenuItemValue_C_CreateText");
static_assert(offsetof(WB_TestModeMenuItemValue_C_CreateText, ValueText_0) == 0x000000, "Member 'WB_TestModeMenuItemValue_C_CreateText::ValueText_0' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_CreateText, ReturenText) == 0x000008, "Member 'WB_TestModeMenuItemValue_C_CreateText::ReturenText' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_CreateText, CallFunc_SpawnObject_ReturnValue) == 0x000010, "Member 'WB_TestModeMenuItemValue_C_CreateText::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_CreateText, K2Node_MakeStruct_SlateColor) == 0x000018, "Member 'WB_TestModeMenuItemValue_C_CreateText::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_CreateText, CallFunc_AddChildToCanvas_ReturnValue) == 0x000040, "Member 'WB_TestModeMenuItemValue_C_CreateText::CallFunc_AddChildToCanvas_ReturnValue' has a wrong offset!");

// Function WB_TestModeMenuItemValue.WB_TestModeMenuItemValue_C.IsLock
// 0x0002 (0x0002 - 0x0000)
struct WB_TestModeMenuItemValue_C_IsLock final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLock_result;                            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TestModeMenuItemValue_C_IsLock) == 0x000001, "Wrong alignment on WB_TestModeMenuItemValue_C_IsLock");
static_assert(sizeof(WB_TestModeMenuItemValue_C_IsLock) == 0x000002, "Wrong size on WB_TestModeMenuItemValue_C_IsLock");
static_assert(offsetof(WB_TestModeMenuItemValue_C_IsLock, Result) == 0x000000, "Member 'WB_TestModeMenuItemValue_C_IsLock::Result' has a wrong offset!");
static_assert(offsetof(WB_TestModeMenuItemValue_C_IsLock, CallFunc_IsLock_result) == 0x000001, "Member 'WB_TestModeMenuItemValue_C_IsLock::CallFunc_IsLock_result' has a wrong offset!");

}

