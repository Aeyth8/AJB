#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BI_BlockingRushOperatorInterface

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BI_BlockingRushOperatorInterface.BI_BlockingRushOperatorInterface_C.CheckBlockingValid
// 0x0010 (0x0010 - 0x0000)
struct BI_BlockingRushOperatorInterface_C_CheckBlockingValid final
{
public:
	class AActor*                                 DamageActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBlockingValid;                                    // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_BlockingRushOperatorInterface_C_CheckBlockingValid) == 0x000008, "Wrong alignment on BI_BlockingRushOperatorInterface_C_CheckBlockingValid");
static_assert(sizeof(BI_BlockingRushOperatorInterface_C_CheckBlockingValid) == 0x000010, "Wrong size on BI_BlockingRushOperatorInterface_C_CheckBlockingValid");
static_assert(offsetof(BI_BlockingRushOperatorInterface_C_CheckBlockingValid, DamageActor) == 0x000000, "Member 'BI_BlockingRushOperatorInterface_C_CheckBlockingValid::DamageActor' has a wrong offset!");
static_assert(offsetof(BI_BlockingRushOperatorInterface_C_CheckBlockingValid, bBlockingValid) == 0x000008, "Member 'BI_BlockingRushOperatorInterface_C_CheckBlockingValid::bBlockingValid' has a wrong offset!");

// Function BI_BlockingRushOperatorInterface.BI_BlockingRushOperatorInterface_C.OnBlocking
// 0x0020 (0x0020 - 0x0000)
struct BI_BlockingRushOperatorInterface_C_OnBlocking final
{
public:
	struct FVector                                BlockingLocation;                                  // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Reflect;                                           // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIsPairAttack;                                     // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bImpulseDamage;                                    // 0x000E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DamageOwner;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSeparateStandAttack;                              // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_BlockingRushOperatorInterface_C_OnBlocking) == 0x000008, "Wrong alignment on BI_BlockingRushOperatorInterface_C_OnBlocking");
static_assert(sizeof(BI_BlockingRushOperatorInterface_C_OnBlocking) == 0x000020, "Wrong size on BI_BlockingRushOperatorInterface_C_OnBlocking");
static_assert(offsetof(BI_BlockingRushOperatorInterface_C_OnBlocking, BlockingLocation) == 0x000000, "Member 'BI_BlockingRushOperatorInterface_C_OnBlocking::BlockingLocation' has a wrong offset!");
static_assert(offsetof(BI_BlockingRushOperatorInterface_C_OnBlocking, Reflect) == 0x00000C, "Member 'BI_BlockingRushOperatorInterface_C_OnBlocking::Reflect' has a wrong offset!");
static_assert(offsetof(BI_BlockingRushOperatorInterface_C_OnBlocking, bIsPairAttack) == 0x00000D, "Member 'BI_BlockingRushOperatorInterface_C_OnBlocking::bIsPairAttack' has a wrong offset!");
static_assert(offsetof(BI_BlockingRushOperatorInterface_C_OnBlocking, bImpulseDamage) == 0x00000E, "Member 'BI_BlockingRushOperatorInterface_C_OnBlocking::bImpulseDamage' has a wrong offset!");
static_assert(offsetof(BI_BlockingRushOperatorInterface_C_OnBlocking, DamageOwner) == 0x000010, "Member 'BI_BlockingRushOperatorInterface_C_OnBlocking::DamageOwner' has a wrong offset!");
static_assert(offsetof(BI_BlockingRushOperatorInterface_C_OnBlocking, bSeparateStandAttack) == 0x000018, "Member 'BI_BlockingRushOperatorInterface_C_OnBlocking::bSeparateStandAttack' has a wrong offset!");

// Function BI_BlockingRushOperatorInterface.BI_BlockingRushOperatorInterface_C.CheckBlockingComponent
// 0x0010 (0x0010 - 0x0000)
struct BI_BlockingRushOperatorInterface_C_CheckBlockingComponent final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBlockingComponent;                                // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_BlockingRushOperatorInterface_C_CheckBlockingComponent) == 0x000008, "Wrong alignment on BI_BlockingRushOperatorInterface_C_CheckBlockingComponent");
static_assert(sizeof(BI_BlockingRushOperatorInterface_C_CheckBlockingComponent) == 0x000010, "Wrong size on BI_BlockingRushOperatorInterface_C_CheckBlockingComponent");
static_assert(offsetof(BI_BlockingRushOperatorInterface_C_CheckBlockingComponent, Component) == 0x000000, "Member 'BI_BlockingRushOperatorInterface_C_CheckBlockingComponent::Component' has a wrong offset!");
static_assert(offsetof(BI_BlockingRushOperatorInterface_C_CheckBlockingComponent, bBlockingComponent) == 0x000008, "Member 'BI_BlockingRushOperatorInterface_C_CheckBlockingComponent::bBlockingComponent' has a wrong offset!");

// Function BI_BlockingRushOperatorInterface.BI_BlockingRushOperatorInterface_C.IgnoreGivePassive
// 0x0010 (0x0010 - 0x0000)
struct BI_BlockingRushOperatorInterface_C_IgnoreGivePassive final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIgnore;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_BlockingRushOperatorInterface_C_IgnoreGivePassive) == 0x000008, "Wrong alignment on BI_BlockingRushOperatorInterface_C_IgnoreGivePassive");
static_assert(sizeof(BI_BlockingRushOperatorInterface_C_IgnoreGivePassive) == 0x000010, "Wrong size on BI_BlockingRushOperatorInterface_C_IgnoreGivePassive");
static_assert(offsetof(BI_BlockingRushOperatorInterface_C_IgnoreGivePassive, Component) == 0x000000, "Member 'BI_BlockingRushOperatorInterface_C_IgnoreGivePassive::Component' has a wrong offset!");
static_assert(offsetof(BI_BlockingRushOperatorInterface_C_IgnoreGivePassive, bIgnore) == 0x000008, "Member 'BI_BlockingRushOperatorInterface_C_IgnoreGivePassive::bIgnore' has a wrong offset!");

// Function BI_BlockingRushOperatorInterface.BI_BlockingRushOperatorInterface_C.BlockPenetrate
// 0x0010 (0x0010 - 0x0000)
struct BI_BlockingRushOperatorInterface_C_BlockPenetrate final
{
public:
	class AActor*                                 CauserActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBlock;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_BlockingRushOperatorInterface_C_BlockPenetrate) == 0x000008, "Wrong alignment on BI_BlockingRushOperatorInterface_C_BlockPenetrate");
static_assert(sizeof(BI_BlockingRushOperatorInterface_C_BlockPenetrate) == 0x000010, "Wrong size on BI_BlockingRushOperatorInterface_C_BlockPenetrate");
static_assert(offsetof(BI_BlockingRushOperatorInterface_C_BlockPenetrate, CauserActor) == 0x000000, "Member 'BI_BlockingRushOperatorInterface_C_BlockPenetrate::CauserActor' has a wrong offset!");
static_assert(offsetof(BI_BlockingRushOperatorInterface_C_BlockPenetrate, bBlock) == 0x000008, "Member 'BI_BlockingRushOperatorInterface_C_BlockPenetrate::bBlock' has a wrong offset!");

}

