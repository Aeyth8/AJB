#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameProjectile_Straight

#include "Basic.hpp"

#include "BP_AJBInGameProjectile_Straight_classes.hpp"
#include "BP_AJBInGameProjectile_Straight_parameters.hpp"


namespace SDK
{

// Function BP_AJBInGameProjectile_Straight.BP_AJBInGameProjectile_Straight_C.ExecuteUbergraph_BP_AJBInGameProjectile_Straight
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameProjectile_Straight_C::ExecuteUbergraph_BP_AJBInGameProjectile_Straight(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameProjectile_Straight_C", "ExecuteUbergraph_BP_AJBInGameProjectile_Straight");

	Params::BP_AJBInGameProjectile_Straight_C_ExecuteUbergraph_BP_AJBInGameProjectile_Straight Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameProjectile_Straight.BP_AJBInGameProjectile_Straight_C.PlayHitSECharacter
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           HitActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitLocation_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bHeadShot                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EPhysicalSurface                        SurfaceType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CuttingRate                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bBlockedByAAP                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FGameplayTag                     SETagBlockedByAAP                                      (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameProjectile_Straight_C::PlayHitSECharacter(class AActor* HitActor, const struct FVector& HitLocation_0, bool bHeadShot, EPhysicalSurface SurfaceType, float CuttingRate, bool bBlockedByAAP, const struct FGameplayTag& SETagBlockedByAAP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameProjectile_Straight_C", "PlayHitSECharacter");

	Params::BP_AJBInGameProjectile_Straight_C_PlayHitSECharacter Parms{};

	Parms.HitActor = HitActor;
	Parms.HitLocation_0 = std::move(HitLocation_0);
	Parms.bHeadShot = bHeadShot;
	Parms.SurfaceType = SurfaceType;
	Parms.CuttingRate = CuttingRate;
	Parms.bBlockedByAAP = bBlockedByAAP;
	Parms.SETagBlockedByAAP = std::move(SETagBlockedByAAP);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameProjectile_Straight.BP_AJBInGameProjectile_Straight_C.PlayHitSENonCharacter
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           HitActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitLocation_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bHeadShot                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EPhysicalSurface                        SurfaceType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CuttingRate                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameProjectile_Straight_C::PlayHitSENonCharacter(class AActor* HitActor, const struct FVector& HitLocation_0, bool bHeadShot, EPhysicalSurface SurfaceType, float CuttingRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameProjectile_Straight_C", "PlayHitSENonCharacter");

	Params::BP_AJBInGameProjectile_Straight_C_PlayHitSENonCharacter Parms{};

	Parms.HitActor = HitActor;
	Parms.HitLocation_0 = std::move(HitLocation_0);
	Parms.bHeadShot = bHeadShot;
	Parms.SurfaceType = SurfaceType;
	Parms.CuttingRate = CuttingRate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameProjectile_Straight.BP_AJBInGameProjectile_Straight_C.DelayedDestroy
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DelaySec                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameProjectile_Straight_C::DelayedDestroy(float DelaySec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameProjectile_Straight_C", "DelayedDestroy");

	Params::BP_AJBInGameProjectile_Straight_C_DelayedDestroy Parms{};

	Parms.DelaySec = DelaySec;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameProjectile_Straight.BP_AJBInGameProjectile_Straight_C.MC_OnBlocking
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           BlockedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitLocation_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bReflect                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bSeparateStandAttack                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameProjectile_Straight_C::MC_OnBlocking(class AActor* BlockedActor, const struct FVector& HitLocation_0, bool bReflect, bool bSeparateStandAttack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameProjectile_Straight_C", "MC_OnBlocking");

	Params::BP_AJBInGameProjectile_Straight_C_MC_OnBlocking Parms{};

	Parms.BlockedActor = BlockedActor;
	Parms.HitLocation_0 = std::move(HitLocation_0);
	Parms.bReflect = bReflect;
	Parms.bSeparateStandAttack = bSeparateStandAttack;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameProjectile_Straight.BP_AJBInGameProjectile_Straight_C.ROC_CallOnSkillBlockedLocal
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bAvoidSkill                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameProjectile_Straight_C::ROC_CallOnSkillBlockedLocal(bool bAvoidSkill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameProjectile_Straight_C", "ROC_CallOnSkillBlockedLocal");

	Params::BP_AJBInGameProjectile_Straight_C_ROC_CallOnSkillBlockedLocal Parms{};

	Parms.bAvoidSkill = bAvoidSkill;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameProjectile_Straight.BP_AJBInGameProjectile_Straight_C.Blocking
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           BlockedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitLocation_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitNormal_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CuttingProjectile___                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CuttingOther___                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bInvincible                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bReflectProjectile                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         ReflectRotation                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    bAvoidSkill                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bSeparateStandAttack                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FGameplayTag                     ReflectSkillTag_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameProjectile_Straight_C::Blocking(class AActor* BlockedActor, class AActor* OtherActor, const struct FVector& HitLocation_0, const struct FVector& HitNormal_0, int32 CuttingProjectile___, int32 CuttingOther___, bool bInvincible, bool bReflectProjectile, const struct FRotator& ReflectRotation, bool bAvoidSkill, bool bSeparateStandAttack, const struct FGameplayTag& ReflectSkillTag_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameProjectile_Straight_C", "Blocking");

	Params::BP_AJBInGameProjectile_Straight_C_Blocking Parms{};

	Parms.BlockedActor = BlockedActor;
	Parms.OtherActor = OtherActor;
	Parms.HitLocation_0 = std::move(HitLocation_0);
	Parms.HitNormal_0 = std::move(HitNormal_0);
	Parms.CuttingProjectile___ = CuttingProjectile___;
	Parms.CuttingOther___ = CuttingOther___;
	Parms.bInvincible = bInvincible;
	Parms.bReflectProjectile = bReflectProjectile;
	Parms.ReflectRotation = std::move(ReflectRotation);
	Parms.bAvoidSkill = bAvoidSkill;
	Parms.bSeparateStandAttack = bSeparateStandAttack;
	Parms.ReflectSkillTag_0 = std::move(ReflectSkillTag_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameProjectile_Straight.BP_AJBInGameProjectile_Straight_C.SetSpeed
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   NewSpeed                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameProjectile_Straight_C::SetSpeed(float NewSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameProjectile_Straight_C", "SetSpeed");

	Params::BP_AJBInGameProjectile_Straight_C_SetSpeed Parms{};

	Parms.NewSpeed = NewSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameProjectile_Straight.BP_AJBInGameProjectile_Straight_C.GetScaledSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Speed_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameProjectile_Straight_C::GetScaledSpeed(float* Speed_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameProjectile_Straight_C", "GetScaledSpeed");

	Params::BP_AJBInGameProjectile_Straight_C_GetScaledSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Speed_0 != nullptr)
		*Speed_0 = Parms.Speed_0;
}


// Function BP_AJBInGameProjectile_Straight.BP_AJBInGameProjectile_Straight_C.CheckGravityLoadAffected
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bAffected                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameProjectile_Straight_C::CheckGravityLoadAffected(bool* bAffected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameProjectile_Straight_C", "CheckGravityLoadAffected");

	Params::BP_AJBInGameProjectile_Straight_C_CheckGravityLoadAffected Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bAffected != nullptr)
		*bAffected = Parms.bAffected;
}


// Function BP_AJBInGameProjectile_Straight.BP_AJBInGameProjectile_Straight_C.AddGravityScale
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameProjectile_Straight_C::AddGravityScale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameProjectile_Straight_C", "AddGravityScale");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameProjectile_Straight.BP_AJBInGameProjectile_Straight_C.CheckIgnoreBlocking
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIgnore                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameProjectile_Straight_C::CheckIgnoreBlocking(class AActor* TargetActor, bool* bIgnore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameProjectile_Straight_C", "CheckIgnoreBlocking");

	Params::BP_AJBInGameProjectile_Straight_C_CheckIgnoreBlocking Parms{};

	Parms.TargetActor = TargetActor;

	UObject::ProcessEvent(Func, &Parms);

	if (bIgnore != nullptr)
		*bIgnore = Parms.bIgnore;
}


// Function BP_AJBInGameProjectile_Straight.BP_AJBInGameProjectile_Straight_C.CheckPassiveOnly
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsPassiveOnly                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameProjectile_Straight_C::CheckPassiveOnly(bool* bIsPassiveOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameProjectile_Straight_C", "CheckPassiveOnly");

	Params::BP_AJBInGameProjectile_Straight_C_CheckPassiveOnly Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bIsPassiveOnly != nullptr)
		*bIsPassiveOnly = Parms.bIsPassiveOnly;
}


// Function BP_AJBInGameProjectile_Straight.BP_AJBInGameProjectile_Straight_C.OnMC_ProjectileHit
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           HitActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitLocation_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bHeadShot                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EPhysicalSurface                        SurfaceType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDisableDamage                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   CuttingRate                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bBlockedByAAP                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bReflect                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameProjectile_Straight_C::OnMC_ProjectileHit(class AActor* HitActor, const struct FVector& HitLocation_0, bool bHeadShot, EPhysicalSurface SurfaceType, bool bDisableDamage, float CuttingRate, bool bBlockedByAAP, bool bReflect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameProjectile_Straight_C", "OnMC_ProjectileHit");

	Params::BP_AJBInGameProjectile_Straight_C_OnMC_ProjectileHit Parms{};

	Parms.HitActor = HitActor;
	Parms.HitLocation_0 = std::move(HitLocation_0);
	Parms.bHeadShot = bHeadShot;
	Parms.SurfaceType = SurfaceType;
	Parms.bDisableDamage = bDisableDamage;
	Parms.CuttingRate = CuttingRate;
	Parms.bBlockedByAAP = bBlockedByAAP;
	Parms.bReflect = bReflect;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameProjectile_Straight.BP_AJBInGameProjectile_Straight_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_AJBInGameProjectile_Straight_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameProjectile_Straight_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameProjectile_Straight.BP_AJBInGameProjectile_Straight_C.OnROS_ProjectileHit
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           HitActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitLocation_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitNormal_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bHeadShot                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bPenetrate_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bFirstHit                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   CuttingRate                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDisableDamage                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bReflect                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         ReflectRotation                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    bBlocking                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FGameplayTag                     ReflectSkillTag_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameProjectile_Straight_C::OnROS_ProjectileHit(class AActor* HitActor, const struct FVector& HitLocation_0, const struct FVector& HitNormal_0, bool bHeadShot, bool bPenetrate_0, bool bFirstHit, float CuttingRate, bool bDisableDamage, bool bReflect, const struct FRotator& ReflectRotation, bool bBlocking, const struct FGameplayTag& ReflectSkillTag_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameProjectile_Straight_C", "OnROS_ProjectileHit");

	Params::BP_AJBInGameProjectile_Straight_C_OnROS_ProjectileHit Parms{};

	Parms.HitActor = HitActor;
	Parms.HitLocation_0 = std::move(HitLocation_0);
	Parms.HitNormal_0 = std::move(HitNormal_0);
	Parms.bHeadShot = bHeadShot;
	Parms.bPenetrate_0 = bPenetrate_0;
	Parms.bFirstHit = bFirstHit;
	Parms.CuttingRate = CuttingRate;
	Parms.bDisableDamage = bDisableDamage;
	Parms.bReflect = bReflect;
	Parms.ReflectRotation = std::move(ReflectRotation);
	Parms.bBlocking = bBlocking;
	Parms.ReflectSkillTag_0 = std::move(ReflectSkillTag_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameProjectile_Straight.BP_AJBInGameProjectile_Straight_C.OnProjectileHit
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    FromSweep                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    bHeadShot                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bPenetrate_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bFirstHit                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameProjectile_Straight_C::OnProjectileHit(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool FromSweep, const struct FHitResult& SweepResult, bool bHeadShot, bool bPenetrate_0, bool bFirstHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameProjectile_Straight_C", "OnProjectileHit");

	Params::BP_AJBInGameProjectile_Straight_C_OnProjectileHit Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.FromSweep = FromSweep;
	Parms.SweepResult = std::move(SweepResult);
	Parms.bHeadShot = bHeadShot;
	Parms.bPenetrate_0 = bPenetrate_0;
	Parms.bFirstHit = bFirstHit;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameProjectile_Straight.BP_AJBInGameProjectile_Straight_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameProjectile_Straight_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameProjectile_Straight_C", "ReceiveTick");

	Params::BP_AJBInGameProjectile_Straight_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameProjectile_Straight.BP_AJBInGameProjectile_Straight_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameProjectile_Straight_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameProjectile_Straight_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameProjectile_Straight.BP_AJBInGameProjectile_Straight_C.PlayHitSE
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           HitActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitLocation_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bHeadShot                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EPhysicalSurface                        SurfaceType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CuttingRate                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bBlockedByAAP                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameProjectile_Straight_C::PlayHitSE(class AActor* HitActor, const struct FVector& HitLocation_0, bool bHeadShot, EPhysicalSurface SurfaceType, float CuttingRate, bool bBlockedByAAP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameProjectile_Straight_C", "PlayHitSE");

	Params::BP_AJBInGameProjectile_Straight_C_PlayHitSE Parms{};

	Parms.HitActor = HitActor;
	Parms.HitLocation_0 = std::move(HitLocation_0);
	Parms.bHeadShot = bHeadShot;
	Parms.SurfaceType = SurfaceType;
	Parms.CuttingRate = CuttingRate;
	Parms.bBlockedByAAP = bBlockedByAAP;

	UObject::ProcessEvent(Func, &Parms);
}

}

