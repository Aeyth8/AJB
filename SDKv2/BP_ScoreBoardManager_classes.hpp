#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ScoreBoardManager

#include "Basic.hpp"

#include "ST_ScoreBoardPlayerInfo_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ScoreBoardManager.BP_ScoreBoardManager_C
// 0x0038 (0x0360 - 0x0328)
class ABP_ScoreBoardManager_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(Transient, DuplicateTransient)
	class UBP_GameFlowStateManager_C*             BP_GameFlowStateManager;                           // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FST_ScoreBoardPlayerInfo>       Rep_ScoreBoardPlayerInfo;                          // 0x0340(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance)
	UMulticastDelegateProperty_                   OnUpdateScoreBoard;                                // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void OnUpdateScoreBoard__DelegateSignature();
	void ExecuteUbergraph_BP_ScoreBoardManager(int32 EntryPoint);
	void OnBegin_Standby(const struct FGameplayTag& PrevState);
	void FlowBind();
	void OnDeadCharacter(const struct FGameplayTag& DamageType, class AActor* DeadActor, class AActor* DamageCauser);
	void OnRecieveDamage(int32 Damage, const struct FGameplayTag& DamageType, class AActor* DamageCauser, bool bRemainHP, bool bDamageIsCut, bool bNotUseCollision);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void AddKnockDownCount(uint8 PlayerID, int32 Value, bool* bSuccess);
	void AddTotalDamage(uint8 PlayerID, int32 Damage, bool* bSuccess);
	void OnRep_ScoreBoardPlayerInfo();
	void ScoreDebugPrint();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ScoreBoardManager_C">();
	}
	static class ABP_ScoreBoardManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ScoreBoardManager_C>();
	}
};
static_assert(alignof(ABP_ScoreBoardManager_C) == 0x000008, "Wrong alignment on ABP_ScoreBoardManager_C");
static_assert(sizeof(ABP_ScoreBoardManager_C) == 0x000360, "Wrong size on ABP_ScoreBoardManager_C");
static_assert(offsetof(ABP_ScoreBoardManager_C, UberGraphFrame) == 0x000328, "Member 'ABP_ScoreBoardManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ScoreBoardManager_C, BP_GameFlowStateManager) == 0x000330, "Member 'ABP_ScoreBoardManager_C::BP_GameFlowStateManager' has a wrong offset!");
static_assert(offsetof(ABP_ScoreBoardManager_C, DefaultSceneRoot) == 0x000338, "Member 'ABP_ScoreBoardManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_ScoreBoardManager_C, Rep_ScoreBoardPlayerInfo) == 0x000340, "Member 'ABP_ScoreBoardManager_C::Rep_ScoreBoardPlayerInfo' has a wrong offset!");
static_assert(offsetof(ABP_ScoreBoardManager_C, OnUpdateScoreBoard) == 0x000350, "Member 'ABP_ScoreBoardManager_C::OnUpdateScoreBoard' has a wrong offset!");

}

