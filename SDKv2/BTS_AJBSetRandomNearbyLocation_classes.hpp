#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTS_AJBSetRandomNearbyLocation

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTS_AJBSetRandomNearbyLocation.BTS_AJBSetRandomNearbyLocation_C
// 0x0070 (0x0108 - 0x0098)
class UBTS_AJBSetRandomNearbyLocation_C final : public UBTService_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0098(0x0008)(Transient, DuplicateTransient)
	struct FBlackboardKeySelector                 DestinationKey;                                    // 0x00A0(0x0028)(Edit, BlueprintVisible)
	float                                         ProbabilityToChooseOppositeDirection;              // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LineTraceDistanceMin;                              // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LineTraceDistanceMax;                              // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlackboardKeySelector                 IfArrivedKey;                                      // 0x00D8(0x0028)(Edit, BlueprintVisible)
	bool                                          bDebugDraw;                                        // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BTS_AJBSetRandomNearbyLocation(int32 EntryPoint);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	struct FVector GetRandomNearbyLocation(class AAIController* AI_Controller);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTS_AJBSetRandomNearbyLocation_C">();
	}
	static class UBTS_AJBSetRandomNearbyLocation_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTS_AJBSetRandomNearbyLocation_C>();
	}
};
static_assert(alignof(UBTS_AJBSetRandomNearbyLocation_C) == 0x000008, "Wrong alignment on UBTS_AJBSetRandomNearbyLocation_C");
static_assert(sizeof(UBTS_AJBSetRandomNearbyLocation_C) == 0x000108, "Wrong size on UBTS_AJBSetRandomNearbyLocation_C");
static_assert(offsetof(UBTS_AJBSetRandomNearbyLocation_C, UberGraphFrame) == 0x000098, "Member 'UBTS_AJBSetRandomNearbyLocation_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTS_AJBSetRandomNearbyLocation_C, DestinationKey) == 0x0000A0, "Member 'UBTS_AJBSetRandomNearbyLocation_C::DestinationKey' has a wrong offset!");
static_assert(offsetof(UBTS_AJBSetRandomNearbyLocation_C, ProbabilityToChooseOppositeDirection) == 0x0000C8, "Member 'UBTS_AJBSetRandomNearbyLocation_C::ProbabilityToChooseOppositeDirection' has a wrong offset!");
static_assert(offsetof(UBTS_AJBSetRandomNearbyLocation_C, LineTraceDistanceMin) == 0x0000CC, "Member 'UBTS_AJBSetRandomNearbyLocation_C::LineTraceDistanceMin' has a wrong offset!");
static_assert(offsetof(UBTS_AJBSetRandomNearbyLocation_C, LineTraceDistanceMax) == 0x0000D0, "Member 'UBTS_AJBSetRandomNearbyLocation_C::LineTraceDistanceMax' has a wrong offset!");
static_assert(offsetof(UBTS_AJBSetRandomNearbyLocation_C, IfArrivedKey) == 0x0000D8, "Member 'UBTS_AJBSetRandomNearbyLocation_C::IfArrivedKey' has a wrong offset!");
static_assert(offsetof(UBTS_AJBSetRandomNearbyLocation_C, bDebugDraw) == 0x000100, "Member 'UBTS_AJBSetRandomNearbyLocation_C::bDebugDraw' has a wrong offset!");

}

