#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBPassiveSkillBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BP_AJBActionBase_classes.hpp"
#include "AJB_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBPassiveSkillBase.BP_AJBPassiveSkillBase_C
// 0x00E0 (0x01F0 - 0x0110)
class UBP_AJBPassiveSkillBase_C : public UBP_AJBActionBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBPassiveSkillBase_C;           // 0x0110(0x0008)(Transient, DuplicateTransient)
	bool                                          bIsOriginal;                                       // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActiveTime;                                        // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rep_LeftActiveTime;                                // 0x0120(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNegative;                                         // 0x0124(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           PassiveTag;                                        // 0x0128(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ParticleTag;                                       // 0x0130(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          ParticleEffectOnCharacter;                         // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          ParticleEffectOnMovableStand;                      // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ParticleDarkPlaceTag;                              // 0x0148(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SETag;                                             // 0x0150(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           SEOnActivated;                                     // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CauserObject;                                      // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               CauserCharacter;                                   // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_AJBPassiveSkillWidget_C*            PassiveWidget;                                     // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldUpdateLeftActiveTime_Server_;               // 0x0178(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 UsePassiveWidgetClass;                             // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SETag_Inactivate;                                  // 0x0188(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldUpdateLeftActiveTimeOnMessageText;          // 0x0190(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShouldUpdatePhaseOnMessageText;                   // 0x0191(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCustomPlaySE;                                     // 0x0192(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_193[0x5];                                      // 0x0193(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, bool>               ShouldUpdateLeftActiveTimeMap_Server;              // 0x0198(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          bDebugPrintShouldUpdateMap;                        // 0x01E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCustomActiveContinuedParticle;                    // 0x01E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bTryRemoveOnCauserDead;                            // 0x01EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bTryRemoveOnCauserStandProhibition;                // 0x01EB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bTryRemoveOnCauserCritical;                        // 0x01EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_AJBPassiveSkillBase(int32 EntryPoint);
	void ROS_ExtendActiveTime(float AdditionalTime);
	void ExtendActiveTime_Local(float AdditionalTime);
	void MC_SetShouldUpdateLectActiveTime(bool bShouldUpdateLeftActiveTime);
	void PlayInactiveSE();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ROS_SetShouldUpdateLeftActiveTime(const struct FGameplayTag& FactorTag, bool bShouldUpdateActiveTime);
	void OnContinuedParticleInactivated();
	void OnContinuedParticleActivated();
	void InactiveContinuedParticle();
	void ActiveContinuedParticle(bool bActiveForOwner, bool bActiveForMovableStand);
	void OnMC_ActivePassive(class UObject* Causer, const struct FGameplayTag& CauserType, int32 SerialNumber);
	void MC_ActivePassive_(class UObject* Causer, const struct FGameplayTag& CauserType, int32 SerialNumber);
	void OnPossessTargetChanged(class AAJBInGameCharacterBase* SeparateFrom, class AAJBInGameCharacterBase* SeparateTo);
	void UnboundCharacterPossessTiming();
	void BindCharacterPossessTiming();
	void StopSE(class UObject* Causer);
	void PlaySE(class UObject* Causer);
	void UpdateLeftTime(class UObject* Causer);
	void ActivePassive(class UObject* Causer, bool bTriggeredByStand, const struct FGameplayTag& CauserType, int32 SerialNumber);
	void NotifyChangeFXVisibility(const struct FST_FXVisibilityInfo& PrevFXVisibility, const struct FST_FXVisibilityInfo& FXVisibility);
	void InactiveWidget();
	void ActiveWidget();
	void TryRegisterPassiveWidget();
	void ShouldUpdateLeftActiveTime(bool* bShould);
	void GetCurrentPossessedCharacter(class AAJBInGameCharacterBase** CharacterBase);
	void ChangeParticleVisibility(bool bNewVisibility);
	void OnRegisterPassiveWidget(class UWB_AJBPassiveSkillWidget_C* NewPassiveWidget);
	void OnUnregisterPassiveWidget();
	void TryDestroyParticles();
	void OnTimeup();
	void GetParticleTag(struct FGameplayTag* ParticleTag_0);
	void CheckShouldUpdateLeftActiveTime(const struct FGameplayTag& NewFactorTag, bool NewParam, bool* bShouldUpdateLeftActiveTime);
	void DebugPrintShouldUpdateMap();
	void GetCurrentPhase(int32* Phase);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void OnActionInactivate(bool bTriggeredByStand);
	void OnActionActivate(bool bTriggeredByStand);
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBPassiveSkillBase_C">();
	}
	static class UBP_AJBPassiveSkillBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBPassiveSkillBase_C>();
	}
};
static_assert(alignof(UBP_AJBPassiveSkillBase_C) == 0x000008, "Wrong alignment on UBP_AJBPassiveSkillBase_C");
static_assert(sizeof(UBP_AJBPassiveSkillBase_C) == 0x0001F0, "Wrong size on UBP_AJBPassiveSkillBase_C");
static_assert(offsetof(UBP_AJBPassiveSkillBase_C, UberGraphFrame_BP_AJBPassiveSkillBase_C) == 0x000110, "Member 'UBP_AJBPassiveSkillBase_C::UberGraphFrame_BP_AJBPassiveSkillBase_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBPassiveSkillBase_C, bIsOriginal) == 0x000118, "Member 'UBP_AJBPassiveSkillBase_C::bIsOriginal' has a wrong offset!");
static_assert(offsetof(UBP_AJBPassiveSkillBase_C, ActiveTime) == 0x00011C, "Member 'UBP_AJBPassiveSkillBase_C::ActiveTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBPassiveSkillBase_C, Rep_LeftActiveTime) == 0x000120, "Member 'UBP_AJBPassiveSkillBase_C::Rep_LeftActiveTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBPassiveSkillBase_C, bNegative) == 0x000124, "Member 'UBP_AJBPassiveSkillBase_C::bNegative' has a wrong offset!");
static_assert(offsetof(UBP_AJBPassiveSkillBase_C, PassiveTag) == 0x000128, "Member 'UBP_AJBPassiveSkillBase_C::PassiveTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBPassiveSkillBase_C, ParticleTag) == 0x000130, "Member 'UBP_AJBPassiveSkillBase_C::ParticleTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBPassiveSkillBase_C, ParticleEffectOnCharacter) == 0x000138, "Member 'UBP_AJBPassiveSkillBase_C::ParticleEffectOnCharacter' has a wrong offset!");
static_assert(offsetof(UBP_AJBPassiveSkillBase_C, ParticleEffectOnMovableStand) == 0x000140, "Member 'UBP_AJBPassiveSkillBase_C::ParticleEffectOnMovableStand' has a wrong offset!");
static_assert(offsetof(UBP_AJBPassiveSkillBase_C, ParticleDarkPlaceTag) == 0x000148, "Member 'UBP_AJBPassiveSkillBase_C::ParticleDarkPlaceTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBPassiveSkillBase_C, SETag) == 0x000150, "Member 'UBP_AJBPassiveSkillBase_C::SETag' has a wrong offset!");
static_assert(offsetof(UBP_AJBPassiveSkillBase_C, SEOnActivated) == 0x000158, "Member 'UBP_AJBPassiveSkillBase_C::SEOnActivated' has a wrong offset!");
static_assert(offsetof(UBP_AJBPassiveSkillBase_C, CauserObject) == 0x000160, "Member 'UBP_AJBPassiveSkillBase_C::CauserObject' has a wrong offset!");
static_assert(offsetof(UBP_AJBPassiveSkillBase_C, CauserCharacter) == 0x000168, "Member 'UBP_AJBPassiveSkillBase_C::CauserCharacter' has a wrong offset!");
static_assert(offsetof(UBP_AJBPassiveSkillBase_C, PassiveWidget) == 0x000170, "Member 'UBP_AJBPassiveSkillBase_C::PassiveWidget' has a wrong offset!");
static_assert(offsetof(UBP_AJBPassiveSkillBase_C, bShouldUpdateLeftActiveTime_Server_) == 0x000178, "Member 'UBP_AJBPassiveSkillBase_C::bShouldUpdateLeftActiveTime_Server_' has a wrong offset!");
static_assert(offsetof(UBP_AJBPassiveSkillBase_C, UsePassiveWidgetClass) == 0x000180, "Member 'UBP_AJBPassiveSkillBase_C::UsePassiveWidgetClass' has a wrong offset!");
static_assert(offsetof(UBP_AJBPassiveSkillBase_C, SETag_Inactivate) == 0x000188, "Member 'UBP_AJBPassiveSkillBase_C::SETag_Inactivate' has a wrong offset!");
static_assert(offsetof(UBP_AJBPassiveSkillBase_C, bShouldUpdateLeftActiveTimeOnMessageText) == 0x000190, "Member 'UBP_AJBPassiveSkillBase_C::bShouldUpdateLeftActiveTimeOnMessageText' has a wrong offset!");
static_assert(offsetof(UBP_AJBPassiveSkillBase_C, bShouldUpdatePhaseOnMessageText) == 0x000191, "Member 'UBP_AJBPassiveSkillBase_C::bShouldUpdatePhaseOnMessageText' has a wrong offset!");
static_assert(offsetof(UBP_AJBPassiveSkillBase_C, bCustomPlaySE) == 0x000192, "Member 'UBP_AJBPassiveSkillBase_C::bCustomPlaySE' has a wrong offset!");
static_assert(offsetof(UBP_AJBPassiveSkillBase_C, ShouldUpdateLeftActiveTimeMap_Server) == 0x000198, "Member 'UBP_AJBPassiveSkillBase_C::ShouldUpdateLeftActiveTimeMap_Server' has a wrong offset!");
static_assert(offsetof(UBP_AJBPassiveSkillBase_C, bDebugPrintShouldUpdateMap) == 0x0001E8, "Member 'UBP_AJBPassiveSkillBase_C::bDebugPrintShouldUpdateMap' has a wrong offset!");
static_assert(offsetof(UBP_AJBPassiveSkillBase_C, bCustomActiveContinuedParticle) == 0x0001E9, "Member 'UBP_AJBPassiveSkillBase_C::bCustomActiveContinuedParticle' has a wrong offset!");
static_assert(offsetof(UBP_AJBPassiveSkillBase_C, bTryRemoveOnCauserDead) == 0x0001EA, "Member 'UBP_AJBPassiveSkillBase_C::bTryRemoveOnCauserDead' has a wrong offset!");
static_assert(offsetof(UBP_AJBPassiveSkillBase_C, bTryRemoveOnCauserStandProhibition) == 0x0001EB, "Member 'UBP_AJBPassiveSkillBase_C::bTryRemoveOnCauserStandProhibition' has a wrong offset!");
static_assert(offsetof(UBP_AJBPassiveSkillBase_C, bTryRemoveOnCauserCritical) == 0x0001EC, "Member 'UBP_AJBPassiveSkillBase_C::bTryRemoveOnCauserCritical' has a wrong offset!");

}

