#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_LandmarkableMap

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.ExecuteUbergraph_WB_LandmarkableMap
// 0x04E0 (0x04E0 - 0x0000)
struct WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_ElapsedTime_Variable;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable; // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_CustomEvent_MyGeometry1;                    // 0x0024(0x0038)(IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          K2Node_CustomEvent_MouseEvent1;                    // 0x0060(0x0070)(ConstParm)
	struct FGeometry                              K2Node_CustomEvent_MyGeometry;                     // 0x00D0(0x0038)(IsPlainOldData, NoDestructor)
	struct FPointerEvent                          K2Node_CustomEvent_MouseEvent;                     // 0x0108(0x0070)(ConstParm)
	struct FVector2D                              CallFunc_CalcStickPosition_StickPosition;          // 0x0178(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_CalcStickPosition_NormalizedStickPosition; // 0x0180(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CalcStickPosition_bIsValid;               // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_CalcStickPosition_StickPosition1;         // 0x018C(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_CalcStickPosition_NormalizedStickPosition1; // 0x0194(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CalcStickPosition_bIsValid1;              // 0x019C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryRemoveLandmark_Removed;                // 0x019D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19E[0x2];                                      // 0x019E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x01A0(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue1;        // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue2;        // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_CustomEvent_InPosition;                     // 0x01E4(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_InScale;                        // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_ClampPosition_ReturnValue;                // 0x01F0(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ClampScale_ReturnValue;                   // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Vector2DInterpTo_ReturnValue;             // 0x01FC(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_CustomEvent_TargetPosition;                 // 0x0208(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_ScrollScaleTarget;              // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_ClampPosition_ReturnValue1;               // 0x0214(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ClampScale_ReturnValue1;                  // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcMapScale_ReturnValue;                 // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetDesiredSize_ReturnValue;               // 0x0224(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x022C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22D[0x3];                                      // 0x022D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x0238(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_CustomEvent_NormalizedPosition3;            // 0x0240(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_IconAngle1;                     // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_LandmarkableMap_C*                  K2Node_CustomEvent_MapWidget3;                     // 0x0250(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue;    // 0x025C(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable1;                                // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26C[0x4];                                      // 0x026C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_BuildString_Vector2d_ReturnValue;         // 0x0270(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_CustomEvent_NormalizedPosition2;            // 0x0280(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_IconAngle;                      // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28C[0x4];                                      // 0x028C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_LandmarkableMap_C*                  K2Node_CustomEvent_MapWidget2;                     // 0x0290(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bVisibleIcon;                   // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_299[0x3];                                      // 0x0299(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_PairHP;                         // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue1;   // 0x02A0(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_CustomEvent_NormalizedPosition1;            // 0x02AC(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B4[0x4];                                      // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_LandmarkableMap_C*                  K2Node_CustomEvent_MapWidget1;                     // 0x02B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_CustomEvent_SignalPinType1;                 // 0x02C0(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_FromMap;                        // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_GameplayTag_ReturnValue;       // 0x02C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2CA[0x2];                                      // 0x02CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Subtract_Vector2DFloat_ReturnValue;       // 0x02CC(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_CustomEvent_NormalizedPosition;             // 0x02D4(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DC[0x4];                                      // 0x02DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_LandmarkableMap_C*                  K2Node_CustomEvent_MapWidget;                      // 0x02E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_CustomEvent_SignalPinType;                  // 0x02E8(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue2;   // 0x02F0(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_GameplayTag_ReturnValue1;      // 0x02F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F9[0x3];                                      // 0x02F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Subtract_Vector2DFloat_ReturnValue1;      // 0x02FC(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue3;   // 0x0304(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0310(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBUIMapManager_C*                  CallFunc_FinishSpawningActor_ReturnValue;          // 0x0348(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_Vector2DVector2D_ReturnValue;    // 0x0350(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_Vector2DVector2D_ReturnValue1;   // 0x0351(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bEnableBlink;                   // 0x0352(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_353[0x1];                                      // 0x0353(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Divide_Vector2DVector2D_ReturnValue;      // 0x0354(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue1;      // 0x035C(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0364(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0368(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x036C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bIsVisible;                     // 0x036D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable1;                               // 0x036E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable1;                // 0x036F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable2;                               // 0x0370(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable3;                               // 0x0371(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_372[0x2];                                      // 0x0372(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue1;           // 0x0374(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_LandmarkBase_C*                     K2Node_Select_Default;                             // 0x0378(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0380(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_381[0x7];                                      // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_LandmarkBase_C*                     K2Node_Select1_Default;                            // 0x0388(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScalarParameterValue_ReturnValue;      // 0x0390(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetVectorParameterValue_ReturnValue;      // 0x0394(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_R;                             // 0x03A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_G;                             // 0x03A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_B;                             // 0x03AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_A;                             // 0x03B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Divide_Vector2DVector2D_ReturnValue1;     // 0x03B4(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x03BC(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X1;                         // 0x03C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y1;                         // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcMapScale_ReturnValue1;                // 0x03CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBInGameHUD_bIsValid;                 // 0x03D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D1[0x7];                                      // 0x03D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameHUD*                          CallFunc_GetAJBInGameHUD_ReturnValue;              // 0x03D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBI_AJBInGameHUD_C>    K2Node_DynamicCast_AsBI_AJBIn_Game_HUD;            // 0x03E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x03F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F1[0x7];                                      // 0x03F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBUIMapManager_C*                  CallFunc_GetUIMapManager_Manager;                  // 0x03F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct FVector2D& NormalizedPosition, class UWB_LandmarkableMap_C* MapWidget, const struct FGameplayTag& SignalTypeTag)> K2Node_CreateDelegate_OutputDelegate;              // 0x0400(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0410(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_411[0x7];                                      // 0x0411(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FVector2D& NormalizedPosition, class UWB_LandmarkableMap_C* MapWidget, const struct FGameplayTag& SignalTypeTag, bool FromMap)> K2Node_CreateDelegate_OutputDelegate1;             // 0x0418(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate2;             // 0x0428(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0438(0x0008)(NoDestructor)
	TDelegate<void(const struct FVector2D& NormalizedPosition, float IconAngle, class UWB_LandmarkableMap_C* MapWidget, bool bVisibleIcon, int32 PairHP)> K2Node_CreateDelegate_OutputDelegate3;             // 0x0440(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(const struct FVector2D& NormalizedPosition, float IconAngle, class UWB_LandmarkableMap_C* MapWidget)> K2Node_CreateDelegate_OutputDelegate4;             // 0x0450(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         Temp_int_Variable2;                                // 0x0460(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue2;                  // 0x0464(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_LandmarkBase_C*                     CallFunc_Array_Get_Item;                           // 0x0468(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0470(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_471[0x3];                                      // 0x0471(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0474(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_AJBUIMapManager_C*>          CallFunc_GetAllActorsOfClass_OutActors;            // 0x0478(0x0010)(ZeroConstructor, ReferenceParm)
	class ABP_AJBUIMapManager_C*                  CallFunc_Array_Get_Item1;                          // 0x0488(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select2_Default;                            // 0x0490(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0494(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x0498(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x049C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x04A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A1[0x3];                                      // 0x04A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select3_Default;                            // 0x04A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_LandmarkBase_C*                     CallFunc_Array_Get_Item2;                          // 0x04A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue2;                // 0x04B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue1;                 // 0x04B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable1;                      // 0x04B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B6[0x2];                                      // 0x04B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetChildrenCount_ReturnValue;             // 0x04B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BC[0x4];                                      // 0x04BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_GetChildAt_ReturnValue;                   // 0x04C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x04C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CC[0x4];                                      // 0x04CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_LandmarkBase_C*                     K2Node_DynamicCast_AsWB_Landmark_Base;             // 0x04D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x04D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x04D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4DA[0x2];                                      // 0x04DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x04DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap) == 0x000010, "Wrong alignment on WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap");
static_assert(sizeof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap) == 0x0004E0, "Wrong size on WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, EntryPoint) == 0x000000, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, Temp_bool_Variable) == 0x000004, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000008, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, Temp_float_ElapsedTime_Variable) == 0x00000C, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::Temp_float_ElapsedTime_Variable' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, Temp_bool_IsClosed_Variable) == 0x000010, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_Add_FloatFloat_ReturnValue) == 0x000014, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, Temp_bool_Has_Been_Initd_Variable) == 0x000018, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable) == 0x000019, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, Temp_int_Variable) == 0x00001C, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_CustomEvent_MyGeometry1) == 0x000024, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_CustomEvent_MyGeometry1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_CustomEvent_MouseEvent1) == 0x000060, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_CustomEvent_MouseEvent1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_CustomEvent_MyGeometry) == 0x0000D0, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_CustomEvent_MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_CustomEvent_MouseEvent) == 0x000108, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_CustomEvent_MouseEvent' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_CalcStickPosition_StickPosition) == 0x000178, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_CalcStickPosition_StickPosition' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_CalcStickPosition_NormalizedStickPosition) == 0x000180, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_CalcStickPosition_NormalizedStickPosition' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_CalcStickPosition_bIsValid) == 0x000188, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_CalcStickPosition_bIsValid' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_CalcStickPosition_StickPosition1) == 0x00018C, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_CalcStickPosition_StickPosition1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_CalcStickPosition_NormalizedStickPosition1) == 0x000194, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_CalcStickPosition_NormalizedStickPosition1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_CalcStickPosition_bIsValid1) == 0x00019C, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_CalcStickPosition_bIsValid1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_TryRemoveLandmark_Removed) == 0x00019D, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_TryRemoveLandmark_Removed' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_Event_MyGeometry) == 0x0001A0, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_Event_InDeltaTime) == 0x0001D8, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_GetWorldDeltaSeconds_ReturnValue1) == 0x0001DC, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_GetWorldDeltaSeconds_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_GetWorldDeltaSeconds_ReturnValue2) == 0x0001E0, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_GetWorldDeltaSeconds_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_CustomEvent_InPosition) == 0x0001E4, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_CustomEvent_InPosition' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_CustomEvent_InScale) == 0x0001EC, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_CustomEvent_InScale' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_ClampPosition_ReturnValue) == 0x0001F0, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_ClampPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_ClampScale_ReturnValue) == 0x0001F8, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_ClampScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_Vector2DInterpTo_ReturnValue) == 0x0001FC, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_Vector2DInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_FInterpTo_ReturnValue) == 0x000204, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_CustomEvent_TargetPosition) == 0x000208, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_CustomEvent_TargetPosition' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_CustomEvent_ScrollScaleTarget) == 0x000210, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_CustomEvent_ScrollScaleTarget' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_ClampPosition_ReturnValue1) == 0x000214, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_ClampPosition_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_ClampScale_ReturnValue1) == 0x00021C, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_ClampScale_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_CalcMapScale_ReturnValue) == 0x000220, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_CalcMapScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_GetDesiredSize_ReturnValue) == 0x000224, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_GetDesiredSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_Event_IsDesignTime) == 0x00022C, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_Array_Length_ReturnValue) == 0x000230, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000234, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x000238, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_CustomEvent_NormalizedPosition3) == 0x000240, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_CustomEvent_NormalizedPosition3' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_CustomEvent_IconAngle1) == 0x000248, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_CustomEvent_IconAngle1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_CustomEvent_MapWidget3) == 0x000250, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_CustomEvent_MapWidget3' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000258, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_Multiply_Vector2DVector2D_ReturnValue) == 0x00025C, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_Multiply_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, Temp_int_Variable1) == 0x000264, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::Temp_int_Variable1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_Add_IntInt_ReturnValue1) == 0x000268, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_BuildString_Vector2d_ReturnValue) == 0x000270, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_BuildString_Vector2d_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_CustomEvent_NormalizedPosition2) == 0x000280, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_CustomEvent_NormalizedPosition2' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_CustomEvent_IconAngle) == 0x000288, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_CustomEvent_IconAngle' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_CustomEvent_MapWidget2) == 0x000290, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_CustomEvent_MapWidget2' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_CustomEvent_bVisibleIcon) == 0x000298, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_CustomEvent_bVisibleIcon' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_CustomEvent_PairHP) == 0x00029C, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_CustomEvent_PairHP' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_Multiply_Vector2DVector2D_ReturnValue1) == 0x0002A0, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_Multiply_Vector2DVector2D_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x0002A8, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_CustomEvent_NormalizedPosition1) == 0x0002AC, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_CustomEvent_NormalizedPosition1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_CustomEvent_MapWidget1) == 0x0002B8, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_CustomEvent_MapWidget1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_CustomEvent_SignalPinType1) == 0x0002C0, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_CustomEvent_SignalPinType1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_CustomEvent_FromMap) == 0x0002C8, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_CustomEvent_FromMap' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_EqualEqual_GameplayTag_ReturnValue) == 0x0002C9, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_EqualEqual_GameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_Subtract_Vector2DFloat_ReturnValue) == 0x0002CC, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_Subtract_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_CustomEvent_NormalizedPosition) == 0x0002D4, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_CustomEvent_NormalizedPosition' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_CustomEvent_MapWidget) == 0x0002E0, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_CustomEvent_MapWidget' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_CustomEvent_SignalPinType) == 0x0002E8, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_CustomEvent_SignalPinType' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_Multiply_Vector2DVector2D_ReturnValue2) == 0x0002F0, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_Multiply_Vector2DVector2D_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_EqualEqual_GameplayTag_ReturnValue1) == 0x0002F8, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_EqualEqual_GameplayTag_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_Subtract_Vector2DFloat_ReturnValue1) == 0x0002FC, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_Subtract_Vector2DFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_Multiply_Vector2DVector2D_ReturnValue3) == 0x000304, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_Multiply_Vector2DVector2D_ReturnValue3' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_MakeTransform_ReturnValue) == 0x000310, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000340, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_FinishSpawningActor_ReturnValue) == 0x000348, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_NotEqual_Vector2DVector2D_ReturnValue) == 0x000350, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_NotEqual_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_NotEqual_Vector2DVector2D_ReturnValue1) == 0x000351, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_NotEqual_Vector2DVector2D_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_CustomEvent_bEnableBlink) == 0x000352, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_CustomEvent_bEnableBlink' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_Divide_Vector2DVector2D_ReturnValue) == 0x000354, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_Divide_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_Multiply_Vector2DFloat_ReturnValue1) == 0x00035C, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_Multiply_Vector2DFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_BreakVector2D_X) == 0x000364, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_BreakVector2D_Y) == 0x000368, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_IsValid_ReturnValue) == 0x00036C, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_CustomEvent_bIsVisible) == 0x00036D, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_CustomEvent_bIsVisible' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, Temp_bool_Variable1) == 0x00036E, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, Temp_bool_Has_Been_Initd_Variable1) == 0x00036F, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::Temp_bool_Has_Been_Initd_Variable1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, Temp_bool_Variable2) == 0x000370, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, Temp_bool_Variable3) == 0x000371, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::Temp_bool_Variable3' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_Divide_FloatFloat_ReturnValue1) == 0x000374, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_Divide_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_Select_Default) == 0x000378, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000380, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_Select1_Default) == 0x000388, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_GetScalarParameterValue_ReturnValue) == 0x000390, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_GetScalarParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_GetVectorParameterValue_ReturnValue) == 0x000394, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_GetVectorParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_BreakColor_R) == 0x0003A4, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_BreakColor_R' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_BreakColor_G) == 0x0003A8, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_BreakColor_G' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_BreakColor_B) == 0x0003AC, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_BreakColor_B' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_BreakColor_A) == 0x0003B0, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_BreakColor_A' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_Divide_Vector2DVector2D_ReturnValue1) == 0x0003B4, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_Divide_Vector2DVector2D_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_MakeVector2D_ReturnValue) == 0x0003BC, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_BreakVector2D_X1) == 0x0003C4, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_BreakVector2D_X1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_BreakVector2D_Y1) == 0x0003C8, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_BreakVector2D_Y1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_CalcMapScale_ReturnValue1) == 0x0003CC, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_CalcMapScale_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_GetAJBInGameHUD_bIsValid) == 0x0003D0, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_GetAJBInGameHUD_bIsValid' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_GetAJBInGameHUD_ReturnValue) == 0x0003D8, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_GetAJBInGameHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_DynamicCast_AsBI_AJBIn_Game_HUD) == 0x0003E0, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_DynamicCast_AsBI_AJBIn_Game_HUD' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_DynamicCast_bSuccess) == 0x0003F0, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_GetUIMapManager_Manager) == 0x0003F8, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_GetUIMapManager_Manager' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_CreateDelegate_OutputDelegate) == 0x000400, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_IsValid_ReturnValue1) == 0x000410, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_CreateDelegate_OutputDelegate1) == 0x000418, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_CreateDelegate_OutputDelegate2) == 0x000428, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_CreateDelegate_OutputDelegate2' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000438, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_CreateDelegate_OutputDelegate3) == 0x000440, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_CreateDelegate_OutputDelegate3' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_CreateDelegate_OutputDelegate4) == 0x000450, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_CreateDelegate_OutputDelegate4' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, Temp_int_Variable2) == 0x000460, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::Temp_int_Variable2' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_Add_IntInt_ReturnValue2) == 0x000464, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_Add_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_Array_Get_Item) == 0x000468, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_Less_IntInt_ReturnValue) == 0x000470, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, Temp_float_Variable) == 0x000474, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_GetAllActorsOfClass_OutActors) == 0x000478, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_Array_Get_Item1) == 0x000488, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_Select2_Default) == 0x000490, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_GetFloatValue_ReturnValue) == 0x000494, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_Array_Length_ReturnValue1) == 0x000498, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00049C, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_Greater_IntInt_ReturnValue) == 0x0004A0, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_Select3_Default) == 0x0004A4, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_Select3_Default' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_Array_Get_Item2) == 0x0004A8, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_Array_Get_Item2' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_Array_Length_ReturnValue2) == 0x0004B0, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_Array_Length_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_Less_IntInt_ReturnValue1) == 0x0004B4, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_Less_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, Temp_bool_IsClosed_Variable1) == 0x0004B5, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::Temp_bool_IsClosed_Variable1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_GetChildrenCount_ReturnValue) == 0x0004B8, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_GetChildrenCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_GetChildAt_ReturnValue) == 0x0004C0, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_GetChildAt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_Subtract_IntInt_ReturnValue) == 0x0004C8, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_DynamicCast_AsWB_Landmark_Base) == 0x0004D0, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_DynamicCast_AsWB_Landmark_Base' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, K2Node_DynamicCast_bSuccess1) == 0x0004D8, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0004D9, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap, CallFunc_Array_Add_ReturnValue) == 0x0004DC, "Member 'WB_LandmarkableMap_C_ExecuteUbergraph_WB_LandmarkableMap::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.SetAdvancedSafeAreaVisibility
// 0x0001 (0x0001 - 0x0000)
struct WB_LandmarkableMap_C_SetAdvancedSafeAreaVisibility final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_SetAdvancedSafeAreaVisibility) == 0x000001, "Wrong alignment on WB_LandmarkableMap_C_SetAdvancedSafeAreaVisibility");
static_assert(sizeof(WB_LandmarkableMap_C_SetAdvancedSafeAreaVisibility) == 0x000001, "Wrong size on WB_LandmarkableMap_C_SetAdvancedSafeAreaVisibility");
static_assert(offsetof(WB_LandmarkableMap_C_SetAdvancedSafeAreaVisibility, bIsVisible) == 0x000000, "Member 'WB_LandmarkableMap_C_SetAdvancedSafeAreaVisibility::bIsVisible' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.SetIconBink
// 0x0001 (0x0001 - 0x0000)
struct WB_LandmarkableMap_C_SetIconBink final
{
public:
	bool                                          bEnableBlink;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_SetIconBink) == 0x000001, "Wrong alignment on WB_LandmarkableMap_C_SetIconBink");
static_assert(sizeof(WB_LandmarkableMap_C_SetIconBink) == 0x000001, "Wrong size on WB_LandmarkableMap_C_SetIconBink");
static_assert(offsetof(WB_LandmarkableMap_C_SetIconBink, bEnableBlink) == 0x000000, "Member 'WB_LandmarkableMap_C_SetIconBink::bEnableBlink' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.OnStickedPairMarker
// 0x0018 (0x0018 - 0x0000)
struct WB_LandmarkableMap_C_OnStickedPairMarker final
{
public:
	struct FVector2D                              NormalizedPosition;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_LandmarkableMap_C*                  MapWidget;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SignalPinType;                                     // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_LandmarkableMap_C_OnStickedPairMarker) == 0x000008, "Wrong alignment on WB_LandmarkableMap_C_OnStickedPairMarker");
static_assert(sizeof(WB_LandmarkableMap_C_OnStickedPairMarker) == 0x000018, "Wrong size on WB_LandmarkableMap_C_OnStickedPairMarker");
static_assert(offsetof(WB_LandmarkableMap_C_OnStickedPairMarker, NormalizedPosition) == 0x000000, "Member 'WB_LandmarkableMap_C_OnStickedPairMarker::NormalizedPosition' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_OnStickedPairMarker, MapWidget) == 0x000008, "Member 'WB_LandmarkableMap_C_OnStickedPairMarker::MapWidget' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_OnStickedPairMarker, SignalPinType) == 0x000010, "Member 'WB_LandmarkableMap_C_OnStickedPairMarker::SignalPinType' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.OnStickedPlayerMarker
// 0x0020 (0x0020 - 0x0000)
struct WB_LandmarkableMap_C_OnStickedPlayerMarker final
{
public:
	struct FVector2D                              NormalizedPosition;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_LandmarkableMap_C*                  MapWidget;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SignalPinType;                                     // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          FromMap;                                           // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_OnStickedPlayerMarker) == 0x000008, "Wrong alignment on WB_LandmarkableMap_C_OnStickedPlayerMarker");
static_assert(sizeof(WB_LandmarkableMap_C_OnStickedPlayerMarker) == 0x000020, "Wrong size on WB_LandmarkableMap_C_OnStickedPlayerMarker");
static_assert(offsetof(WB_LandmarkableMap_C_OnStickedPlayerMarker, NormalizedPosition) == 0x000000, "Member 'WB_LandmarkableMap_C_OnStickedPlayerMarker::NormalizedPosition' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_OnStickedPlayerMarker, MapWidget) == 0x000008, "Member 'WB_LandmarkableMap_C_OnStickedPlayerMarker::MapWidget' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_OnStickedPlayerMarker, SignalPinType) == 0x000010, "Member 'WB_LandmarkableMap_C_OnStickedPlayerMarker::SignalPinType' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_OnStickedPlayerMarker, FromMap) == 0x000018, "Member 'WB_LandmarkableMap_C_OnStickedPlayerMarker::FromMap' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.OnChangedPairIcon
// 0x0020 (0x0020 - 0x0000)
struct WB_LandmarkableMap_C_OnChangedPairIcon final
{
public:
	struct FVector2D                              NormalizedPosition;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IconAngle;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_LandmarkableMap_C*                  MapWidget;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bVisibleIcon;                                      // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PairHP;                                            // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_LandmarkableMap_C_OnChangedPairIcon) == 0x000008, "Wrong alignment on WB_LandmarkableMap_C_OnChangedPairIcon");
static_assert(sizeof(WB_LandmarkableMap_C_OnChangedPairIcon) == 0x000020, "Wrong size on WB_LandmarkableMap_C_OnChangedPairIcon");
static_assert(offsetof(WB_LandmarkableMap_C_OnChangedPairIcon, NormalizedPosition) == 0x000000, "Member 'WB_LandmarkableMap_C_OnChangedPairIcon::NormalizedPosition' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_OnChangedPairIcon, IconAngle) == 0x000008, "Member 'WB_LandmarkableMap_C_OnChangedPairIcon::IconAngle' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_OnChangedPairIcon, MapWidget) == 0x000010, "Member 'WB_LandmarkableMap_C_OnChangedPairIcon::MapWidget' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_OnChangedPairIcon, bVisibleIcon) == 0x000018, "Member 'WB_LandmarkableMap_C_OnChangedPairIcon::bVisibleIcon' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_OnChangedPairIcon, PairHP) == 0x00001C, "Member 'WB_LandmarkableMap_C_OnChangedPairIcon::PairHP' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.OnChangedPlayerIcon
// 0x0018 (0x0018 - 0x0000)
struct WB_LandmarkableMap_C_OnChangedPlayerIcon final
{
public:
	struct FVector2D                              NormalizedPosition;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IconAngle;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_LandmarkableMap_C*                  MapWidget;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_LandmarkableMap_C_OnChangedPlayerIcon) == 0x000008, "Wrong alignment on WB_LandmarkableMap_C_OnChangedPlayerIcon");
static_assert(sizeof(WB_LandmarkableMap_C_OnChangedPlayerIcon) == 0x000018, "Wrong size on WB_LandmarkableMap_C_OnChangedPlayerIcon");
static_assert(offsetof(WB_LandmarkableMap_C_OnChangedPlayerIcon, NormalizedPosition) == 0x000000, "Member 'WB_LandmarkableMap_C_OnChangedPlayerIcon::NormalizedPosition' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_OnChangedPlayerIcon, IconAngle) == 0x000008, "Member 'WB_LandmarkableMap_C_OnChangedPlayerIcon::IconAngle' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_OnChangedPlayerIcon, MapWidget) == 0x000010, "Member 'WB_LandmarkableMap_C_OnChangedPlayerIcon::MapWidget' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WB_LandmarkableMap_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_PreConstruct) == 0x000001, "Wrong alignment on WB_LandmarkableMap_C_PreConstruct");
static_assert(sizeof(WB_LandmarkableMap_C_PreConstruct) == 0x000001, "Wrong size on WB_LandmarkableMap_C_PreConstruct");
static_assert(offsetof(WB_LandmarkableMap_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WB_LandmarkableMap_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.SetTargetScale
// 0x0004 (0x0004 - 0x0000)
struct WB_LandmarkableMap_C_SetTargetScale final
{
public:
	float                                         ScrollScaleTarget;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_LandmarkableMap_C_SetTargetScale) == 0x000004, "Wrong alignment on WB_LandmarkableMap_C_SetTargetScale");
static_assert(sizeof(WB_LandmarkableMap_C_SetTargetScale) == 0x000004, "Wrong size on WB_LandmarkableMap_C_SetTargetScale");
static_assert(offsetof(WB_LandmarkableMap_C_SetTargetScale, ScrollScaleTarget) == 0x000000, "Member 'WB_LandmarkableMap_C_SetTargetScale::ScrollScaleTarget' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.SetTargetPosition
// 0x0008 (0x0008 - 0x0000)
struct WB_LandmarkableMap_C_SetTargetPosition final
{
public:
	struct FVector2D                              TargetPosition_0;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_LandmarkableMap_C_SetTargetPosition) == 0x000004, "Wrong alignment on WB_LandmarkableMap_C_SetTargetPosition");
static_assert(sizeof(WB_LandmarkableMap_C_SetTargetPosition) == 0x000008, "Wrong size on WB_LandmarkableMap_C_SetTargetPosition");
static_assert(offsetof(WB_LandmarkableMap_C_SetTargetPosition, TargetPosition_0) == 0x000000, "Member 'WB_LandmarkableMap_C_SetTargetPosition::TargetPosition_0' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.SetScale
// 0x0004 (0x0004 - 0x0000)
struct WB_LandmarkableMap_C_SetScale final
{
public:
	float                                         InScale;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_LandmarkableMap_C_SetScale) == 0x000004, "Wrong alignment on WB_LandmarkableMap_C_SetScale");
static_assert(sizeof(WB_LandmarkableMap_C_SetScale) == 0x000004, "Wrong size on WB_LandmarkableMap_C_SetScale");
static_assert(offsetof(WB_LandmarkableMap_C_SetScale, InScale) == 0x000000, "Member 'WB_LandmarkableMap_C_SetScale::InScale' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.SetPosition
// 0x0008 (0x0008 - 0x0000)
struct WB_LandmarkableMap_C_SetPosition final
{
public:
	struct FVector2D                              InPosition;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_LandmarkableMap_C_SetPosition) == 0x000004, "Wrong alignment on WB_LandmarkableMap_C_SetPosition");
static_assert(sizeof(WB_LandmarkableMap_C_SetPosition) == 0x000008, "Wrong size on WB_LandmarkableMap_C_SetPosition");
static_assert(offsetof(WB_LandmarkableMap_C_SetPosition, InPosition) == 0x000000, "Member 'WB_LandmarkableMap_C_SetPosition::InPosition' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.Tick
// 0x003C (0x003C - 0x0000)
struct WB_LandmarkableMap_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_LandmarkableMap_C_Tick) == 0x000004, "Wrong alignment on WB_LandmarkableMap_C_Tick");
static_assert(sizeof(WB_LandmarkableMap_C_Tick) == 0x00003C, "Wrong size on WB_LandmarkableMap_C_Tick");
static_assert(offsetof(WB_LandmarkableMap_C_Tick, MyGeometry) == 0x000000, "Member 'WB_LandmarkableMap_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_Tick, InDeltaTime) == 0x000038, "Member 'WB_LandmarkableMap_C_Tick::InDeltaTime' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.StickCautionPin
// 0x00A8 (0x00A8 - 0x0000)
struct WB_LandmarkableMap_C_StickCautionPin final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WB_LandmarkableMap_C_StickCautionPin) == 0x000008, "Wrong alignment on WB_LandmarkableMap_C_StickCautionPin");
static_assert(sizeof(WB_LandmarkableMap_C_StickCautionPin) == 0x0000A8, "Wrong size on WB_LandmarkableMap_C_StickCautionPin");
static_assert(offsetof(WB_LandmarkableMap_C_StickCautionPin, MyGeometry) == 0x000000, "Member 'WB_LandmarkableMap_C_StickCautionPin::MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_StickCautionPin, MouseEvent) == 0x000038, "Member 'WB_LandmarkableMap_C_StickCautionPin::MouseEvent' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.ReserveInstructionPin
// 0x00A8 (0x00A8 - 0x0000)
struct WB_LandmarkableMap_C_ReserveInstructionPin final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WB_LandmarkableMap_C_ReserveInstructionPin) == 0x000008, "Wrong alignment on WB_LandmarkableMap_C_ReserveInstructionPin");
static_assert(sizeof(WB_LandmarkableMap_C_ReserveInstructionPin) == 0x0000A8, "Wrong size on WB_LandmarkableMap_C_ReserveInstructionPin");
static_assert(offsetof(WB_LandmarkableMap_C_ReserveInstructionPin, MyGeometry) == 0x000000, "Member 'WB_LandmarkableMap_C_ReserveInstructionPin::MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ReserveInstructionPin, MouseEvent) == 0x000038, "Member 'WB_LandmarkableMap_C_ReserveInstructionPin::MouseEvent' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.UpdateLimiter
// 0x0128 (0x0128 - 0x0000)
struct WB_LandmarkableMap_C_UpdateLimiter final
{
public:
	float                                         ScaleLimiterLocal;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PositionLimiterLocal;                              // 0x0004(0x0008)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              BrushSizeLocal;                                    // 0x000C(0x0008)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              CallFunc_GetCachedGeometry_ReturnValue;            // 0x001C(0x0038)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetLocalSize_ReturnValue;                 // 0x0054(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_LandmarkBase_C*                     CallFunc_Array_Get_Item;                           // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_CalcMapScale_ReturnValue;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              CallFunc_GetCachedGeometry_ReturnValue1;           // 0x0078(0x0038)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetLocalSize_ReturnValue1;                // 0x00B0(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Divide_Vector2DVector2D_ReturnValue;      // 0x00B8(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              CallFunc_GetCachedGeometry_ReturnValue2;           // 0x00C0(0x0038)(ConstParm, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector2D_X;                          // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetLocalSize_ReturnValue2;                // 0x0100(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x010C(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x0114(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue;         // 0x011C(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_Vector2DVector2D_ReturnValue;    // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_UpdateLimiter) == 0x000008, "Wrong alignment on WB_LandmarkableMap_C_UpdateLimiter");
static_assert(sizeof(WB_LandmarkableMap_C_UpdateLimiter) == 0x000128, "Wrong size on WB_LandmarkableMap_C_UpdateLimiter");
static_assert(offsetof(WB_LandmarkableMap_C_UpdateLimiter, ScaleLimiterLocal) == 0x000000, "Member 'WB_LandmarkableMap_C_UpdateLimiter::ScaleLimiterLocal' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_UpdateLimiter, PositionLimiterLocal) == 0x000004, "Member 'WB_LandmarkableMap_C_UpdateLimiter::PositionLimiterLocal' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_UpdateLimiter, BrushSizeLocal) == 0x00000C, "Member 'WB_LandmarkableMap_C_UpdateLimiter::BrushSizeLocal' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_UpdateLimiter, Temp_int_Variable) == 0x000014, "Member 'WB_LandmarkableMap_C_UpdateLimiter::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_UpdateLimiter, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'WB_LandmarkableMap_C_UpdateLimiter::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_UpdateLimiter, CallFunc_GetCachedGeometry_ReturnValue) == 0x00001C, "Member 'WB_LandmarkableMap_C_UpdateLimiter::CallFunc_GetCachedGeometry_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_UpdateLimiter, CallFunc_GetLocalSize_ReturnValue) == 0x000054, "Member 'WB_LandmarkableMap_C_UpdateLimiter::CallFunc_GetLocalSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_UpdateLimiter, CallFunc_Array_Get_Item) == 0x000060, "Member 'WB_LandmarkableMap_C_UpdateLimiter::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_UpdateLimiter, CallFunc_Array_Length_ReturnValue) == 0x000068, "Member 'WB_LandmarkableMap_C_UpdateLimiter::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_UpdateLimiter, CallFunc_Less_IntInt_ReturnValue) == 0x00006C, "Member 'WB_LandmarkableMap_C_UpdateLimiter::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_UpdateLimiter, CallFunc_CalcMapScale_ReturnValue) == 0x000070, "Member 'WB_LandmarkableMap_C_UpdateLimiter::CallFunc_CalcMapScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_UpdateLimiter, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000074, "Member 'WB_LandmarkableMap_C_UpdateLimiter::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_UpdateLimiter, CallFunc_GetCachedGeometry_ReturnValue1) == 0x000078, "Member 'WB_LandmarkableMap_C_UpdateLimiter::CallFunc_GetCachedGeometry_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_UpdateLimiter, CallFunc_GetLocalSize_ReturnValue1) == 0x0000B0, "Member 'WB_LandmarkableMap_C_UpdateLimiter::CallFunc_GetLocalSize_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_UpdateLimiter, CallFunc_Divide_Vector2DVector2D_ReturnValue) == 0x0000B8, "Member 'WB_LandmarkableMap_C_UpdateLimiter::CallFunc_Divide_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_UpdateLimiter, CallFunc_GetCachedGeometry_ReturnValue2) == 0x0000C0, "Member 'WB_LandmarkableMap_C_UpdateLimiter::CallFunc_GetCachedGeometry_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_UpdateLimiter, CallFunc_BreakVector2D_X) == 0x0000F8, "Member 'WB_LandmarkableMap_C_UpdateLimiter::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_UpdateLimiter, CallFunc_BreakVector2D_Y) == 0x0000FC, "Member 'WB_LandmarkableMap_C_UpdateLimiter::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_UpdateLimiter, CallFunc_GetLocalSize_ReturnValue2) == 0x000100, "Member 'WB_LandmarkableMap_C_UpdateLimiter::CallFunc_GetLocalSize_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_UpdateLimiter, CallFunc_FMin_ReturnValue) == 0x000108, "Member 'WB_LandmarkableMap_C_UpdateLimiter::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_UpdateLimiter, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x00010C, "Member 'WB_LandmarkableMap_C_UpdateLimiter::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_UpdateLimiter, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x000114, "Member 'WB_LandmarkableMap_C_UpdateLimiter::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_UpdateLimiter, CallFunc_Divide_Vector2DFloat_ReturnValue) == 0x00011C, "Member 'WB_LandmarkableMap_C_UpdateLimiter::CallFunc_Divide_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_UpdateLimiter, CallFunc_NotEqual_Vector2DVector2D_ReturnValue) == 0x000124, "Member 'WB_LandmarkableMap_C_UpdateLimiter::CallFunc_NotEqual_Vector2DVector2D_ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.On_Border_Inputer_MouseButtonDown
// 0x0230 (0x0230 - 0x0000)
struct WB_LandmarkableMap_C_On_Border_Inputer_MouseButtonDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FVector2D                              NormalizedStickPositionLocal;                      // 0x0160(0x0008)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              StickPositionLocal;                                // 0x0168(0x0008)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanStickNewPin_ReturnValue;               // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0178(0x00B8)()
};
static_assert(alignof(WB_LandmarkableMap_C_On_Border_Inputer_MouseButtonDown) == 0x000008, "Wrong alignment on WB_LandmarkableMap_C_On_Border_Inputer_MouseButtonDown");
static_assert(sizeof(WB_LandmarkableMap_C_On_Border_Inputer_MouseButtonDown) == 0x000230, "Wrong size on WB_LandmarkableMap_C_On_Border_Inputer_MouseButtonDown");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseButtonDown, MyGeometry) == 0x000000, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseButtonDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseButtonDown, MouseEvent) == 0x000038, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseButtonDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseButtonDown, ReturnValue) == 0x0000A8, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseButtonDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseButtonDown, NormalizedStickPositionLocal) == 0x000160, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseButtonDown::NormalizedStickPositionLocal' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseButtonDown, StickPositionLocal) == 0x000168, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseButtonDown::StickPositionLocal' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseButtonDown, CallFunc_CanStickNewPin_ReturnValue) == 0x000170, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseButtonDown::CallFunc_CanStickNewPin_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseButtonDown, CallFunc_Handled_ReturnValue) == 0x000178, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseButtonDown::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.On_Border_Inputer_MouseMove
// 0x0280 (0x0280 - 0x0000)
struct WB_LandmarkableMap_C_On_Border_Inputer_MouseMove final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	bool                                          CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue; // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue1; // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0162(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue2; // 0x0163(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x0164(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0165(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue3; // 0x0166(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x0167(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue3;                  // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_169[0x3];                                      // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_PointerEvent_GetLastScreenSpacePosition_ReturnValue; // 0x016C(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue; // 0x0174(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x017C(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_PointerEvent_GetLastScreenSpacePosition_ReturnValue1; // 0x018C(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue1; // 0x0198(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue1;   // 0x01A4(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x01AC(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue1;      // 0x01B4(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x01BC(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x01C8(0x00B8)()
};
static_assert(alignof(WB_LandmarkableMap_C_On_Border_Inputer_MouseMove) == 0x000008, "Wrong alignment on WB_LandmarkableMap_C_On_Border_Inputer_MouseMove");
static_assert(sizeof(WB_LandmarkableMap_C_On_Border_Inputer_MouseMove) == 0x000280, "Wrong size on WB_LandmarkableMap_C_On_Border_Inputer_MouseMove");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseMove, MyGeometry) == 0x000000, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseMove::MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseMove, MouseEvent) == 0x000038, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseMove::MouseEvent' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseMove, ReturnValue) == 0x0000A8, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseMove::ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseMove, CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue) == 0x000160, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseMove::CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseMove, CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue1) == 0x000161, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseMove::CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseMove, CallFunc_BooleanAND_ReturnValue) == 0x000162, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseMove::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseMove, CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue2) == 0x000163, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseMove::CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseMove, CallFunc_BooleanAND_ReturnValue1) == 0x000164, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseMove::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseMove, CallFunc_Not_PreBool_ReturnValue) == 0x000165, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseMove::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseMove, CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue3) == 0x000166, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseMove::CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue3' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseMove, CallFunc_BooleanAND_ReturnValue2) == 0x000167, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseMove::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseMove, CallFunc_BooleanAND_ReturnValue3) == 0x000168, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseMove::CallFunc_BooleanAND_ReturnValue3' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseMove, CallFunc_PointerEvent_GetLastScreenSpacePosition_ReturnValue) == 0x00016C, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseMove::CallFunc_PointerEvent_GetLastScreenSpacePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseMove, CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue) == 0x000174, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseMove::CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseMove, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x00017C, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseMove::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseMove, CallFunc_BreakVector2D_X) == 0x000184, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseMove::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseMove, CallFunc_BreakVector2D_Y) == 0x000188, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseMove::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseMove, CallFunc_PointerEvent_GetLastScreenSpacePosition_ReturnValue1) == 0x00018C, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseMove::CallFunc_PointerEvent_GetLastScreenSpacePosition_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseMove, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000194, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseMove::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseMove, CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue1) == 0x000198, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseMove::CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseMove, CallFunc_Add_FloatFloat_ReturnValue) == 0x0001A0, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseMove::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseMove, CallFunc_Subtract_Vector2DVector2D_ReturnValue1) == 0x0001A4, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseMove::CallFunc_Subtract_Vector2DVector2D_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseMove, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x0001AC, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseMove::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseMove, CallFunc_Multiply_Vector2DFloat_ReturnValue1) == 0x0001B4, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseMove::CallFunc_Multiply_Vector2DFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseMove, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x0001BC, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseMove::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseMove, CallFunc_Handled_ReturnValue) == 0x0001C8, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseMove::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.SetupLandmarkMapMaterial
// 0x0058 (0x0058 - 0x0000)
struct WB_LandmarkableMap_C_SetupLandmarkMapMaterial final
{
public:
	class UMaterialInterface*                     OverrideMaterial;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              CallFunc_GetStageMapTexture_Map_Texture;           // 0x0008(0x0028)(HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_DynamicCast_AsTexture_2D;                   // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_LandmarkableMap_C_SetupLandmarkMapMaterial) == 0x000008, "Wrong alignment on WB_LandmarkableMap_C_SetupLandmarkMapMaterial");
static_assert(sizeof(WB_LandmarkableMap_C_SetupLandmarkMapMaterial) == 0x000058, "Wrong size on WB_LandmarkableMap_C_SetupLandmarkMapMaterial");
static_assert(offsetof(WB_LandmarkableMap_C_SetupLandmarkMapMaterial, OverrideMaterial) == 0x000000, "Member 'WB_LandmarkableMap_C_SetupLandmarkMapMaterial::OverrideMaterial' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_SetupLandmarkMapMaterial, CallFunc_GetStageMapTexture_Map_Texture) == 0x000008, "Member 'WB_LandmarkableMap_C_SetupLandmarkMapMaterial::CallFunc_GetStageMapTexture_Map_Texture' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_SetupLandmarkMapMaterial, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'WB_LandmarkableMap_C_SetupLandmarkMapMaterial::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_SetupLandmarkMapMaterial, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x000038, "Member 'WB_LandmarkableMap_C_SetupLandmarkMapMaterial::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_SetupLandmarkMapMaterial, K2Node_DynamicCast_AsTexture_2D) == 0x000040, "Member 'WB_LandmarkableMap_C_SetupLandmarkMapMaterial::K2Node_DynamicCast_AsTexture_2D' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_SetupLandmarkMapMaterial, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'WB_LandmarkableMap_C_SetupLandmarkMapMaterial::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_SetupLandmarkMapMaterial, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x00004C, "Member 'WB_LandmarkableMap_C_SetupLandmarkMapMaterial::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_SetupLandmarkMapMaterial, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000050, "Member 'WB_LandmarkableMap_C_SetupLandmarkMapMaterial::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.CalcMapScale
// 0x001C (0x001C - 0x0000)
struct WB_LandmarkableMap_C_CalcMapScale final
{
public:
	float                                         Scale_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetStageMaxSize_MaxSize;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_LandmarkableMap_C_CalcMapScale) == 0x000004, "Wrong alignment on WB_LandmarkableMap_C_CalcMapScale");
static_assert(sizeof(WB_LandmarkableMap_C_CalcMapScale) == 0x00001C, "Wrong size on WB_LandmarkableMap_C_CalcMapScale");
static_assert(offsetof(WB_LandmarkableMap_C_CalcMapScale, Scale_0) == 0x000000, "Member 'WB_LandmarkableMap_C_CalcMapScale::Scale_0' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_CalcMapScale, ReturnValue) == 0x000004, "Member 'WB_LandmarkableMap_C_CalcMapScale::ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_CalcMapScale, Temp_bool_Variable) == 0x000008, "Member 'WB_LandmarkableMap_C_CalcMapScale::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_CalcMapScale, CallFunc_GetStageMaxSize_MaxSize) == 0x00000C, "Member 'WB_LandmarkableMap_C_CalcMapScale::CallFunc_GetStageMaxSize_MaxSize' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_CalcMapScale, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000010, "Member 'WB_LandmarkableMap_C_CalcMapScale::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_CalcMapScale, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'WB_LandmarkableMap_C_CalcMapScale::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_CalcMapScale, K2Node_Select_Default) == 0x000018, "Member 'WB_LandmarkableMap_C_CalcMapScale::K2Node_Select_Default' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.GetPositionFromNormalizePosition
// 0x0024 (0x0024 - 0x0000)
struct WB_LandmarkableMap_C_GetPositionFromNormalizePosition final
{
public:
	struct FVector2D                              Position_0;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetStageMaxSize_MaxSize;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DFloat_ReturnValue;       // 0x0014(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x001C(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_LandmarkableMap_C_GetPositionFromNormalizePosition) == 0x000004, "Wrong alignment on WB_LandmarkableMap_C_GetPositionFromNormalizePosition");
static_assert(sizeof(WB_LandmarkableMap_C_GetPositionFromNormalizePosition) == 0x000024, "Wrong size on WB_LandmarkableMap_C_GetPositionFromNormalizePosition");
static_assert(offsetof(WB_LandmarkableMap_C_GetPositionFromNormalizePosition, Position_0) == 0x000000, "Member 'WB_LandmarkableMap_C_GetPositionFromNormalizePosition::Position_0' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_GetPositionFromNormalizePosition, ReturnValue) == 0x000008, "Member 'WB_LandmarkableMap_C_GetPositionFromNormalizePosition::ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_GetPositionFromNormalizePosition, CallFunc_GetStageMaxSize_MaxSize) == 0x000010, "Member 'WB_LandmarkableMap_C_GetPositionFromNormalizePosition::CallFunc_GetStageMaxSize_MaxSize' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_GetPositionFromNormalizePosition, CallFunc_Subtract_Vector2DFloat_ReturnValue) == 0x000014, "Member 'WB_LandmarkableMap_C_GetPositionFromNormalizePosition::CallFunc_Subtract_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_GetPositionFromNormalizePosition, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x00001C, "Member 'WB_LandmarkableMap_C_GetPositionFromNormalizePosition::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.On_Border_Inputer_MouseDoubleClick
// 0x0220 (0x0220 - 0x0000)
struct WB_LandmarkableMap_C_On_Border_Inputer_MouseDoubleClick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	bool                                          CallFunc_CanStickNewPin_ReturnValue;               // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0168(0x00B8)()
};
static_assert(alignof(WB_LandmarkableMap_C_On_Border_Inputer_MouseDoubleClick) == 0x000008, "Wrong alignment on WB_LandmarkableMap_C_On_Border_Inputer_MouseDoubleClick");
static_assert(sizeof(WB_LandmarkableMap_C_On_Border_Inputer_MouseDoubleClick) == 0x000220, "Wrong size on WB_LandmarkableMap_C_On_Border_Inputer_MouseDoubleClick");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseDoubleClick, MyGeometry) == 0x000000, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseDoubleClick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseDoubleClick, MouseEvent) == 0x000038, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseDoubleClick::MouseEvent' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseDoubleClick, ReturnValue) == 0x0000A8, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseDoubleClick::ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseDoubleClick, CallFunc_CanStickNewPin_ReturnValue) == 0x000160, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseDoubleClick::CallFunc_CanStickNewPin_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_On_Border_Inputer_MouseDoubleClick, CallFunc_Handled_ReturnValue) == 0x000168, "Member 'WB_LandmarkableMap_C_On_Border_Inputer_MouseDoubleClick::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.CalcStickPosition
// 0x0120 (0x0120 - 0x0000)
struct WB_LandmarkableMap_C_CalcStickPosition final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FVector2D                              StickPosition;                                     // 0x00A8(0x0008)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              NormalizedStickPosition;                           // 0x00B0(0x0008)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsValid;                                          // 0x00B8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              NormalizedStickPositionLocal;                      // 0x00BC(0x0008)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              StickPositionLocal;                                // 0x00C4(0x0008)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue; // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue1; // 0x00CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00CE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00CF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue; // 0x00D0(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Divide_Vector2DVector2D_ReturnValue;      // 0x00D8(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_AbsoluteToLocal_ReturnValue;              // 0x00E0(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DFloat_ReturnValue;            // 0x00E8(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsForLocationTest_ReturnValue;            // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue;         // 0x00F4(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue1;                 // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x0100(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x0108(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue1;   // 0x0114(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_CalcStickPosition) == 0x000008, "Wrong alignment on WB_LandmarkableMap_C_CalcStickPosition");
static_assert(sizeof(WB_LandmarkableMap_C_CalcStickPosition) == 0x000120, "Wrong size on WB_LandmarkableMap_C_CalcStickPosition");
static_assert(offsetof(WB_LandmarkableMap_C_CalcStickPosition, MyGeometry) == 0x000000, "Member 'WB_LandmarkableMap_C_CalcStickPosition::MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_CalcStickPosition, MouseEvent) == 0x000038, "Member 'WB_LandmarkableMap_C_CalcStickPosition::MouseEvent' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_CalcStickPosition, StickPosition) == 0x0000A8, "Member 'WB_LandmarkableMap_C_CalcStickPosition::StickPosition' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_CalcStickPosition, NormalizedStickPosition) == 0x0000B0, "Member 'WB_LandmarkableMap_C_CalcStickPosition::NormalizedStickPosition' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_CalcStickPosition, bIsValid) == 0x0000B8, "Member 'WB_LandmarkableMap_C_CalcStickPosition::bIsValid' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_CalcStickPosition, NormalizedStickPositionLocal) == 0x0000BC, "Member 'WB_LandmarkableMap_C_CalcStickPosition::NormalizedStickPositionLocal' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_CalcStickPosition, StickPositionLocal) == 0x0000C4, "Member 'WB_LandmarkableMap_C_CalcStickPosition::StickPositionLocal' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_CalcStickPosition, CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue) == 0x0000CC, "Member 'WB_LandmarkableMap_C_CalcStickPosition::CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_CalcStickPosition, CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue1) == 0x0000CD, "Member 'WB_LandmarkableMap_C_CalcStickPosition::CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_CalcStickPosition, CallFunc_Not_PreBool_ReturnValue) == 0x0000CE, "Member 'WB_LandmarkableMap_C_CalcStickPosition::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_CalcStickPosition, CallFunc_BooleanAND_ReturnValue) == 0x0000CF, "Member 'WB_LandmarkableMap_C_CalcStickPosition::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_CalcStickPosition, CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue) == 0x0000D0, "Member 'WB_LandmarkableMap_C_CalcStickPosition::CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_CalcStickPosition, CallFunc_Divide_Vector2DVector2D_ReturnValue) == 0x0000D8, "Member 'WB_LandmarkableMap_C_CalcStickPosition::CallFunc_Divide_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_CalcStickPosition, CallFunc_AbsoluteToLocal_ReturnValue) == 0x0000E0, "Member 'WB_LandmarkableMap_C_CalcStickPosition::CallFunc_AbsoluteToLocal_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_CalcStickPosition, CallFunc_Add_Vector2DFloat_ReturnValue) == 0x0000E8, "Member 'WB_LandmarkableMap_C_CalcStickPosition::CallFunc_Add_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_CalcStickPosition, CallFunc_IsForLocationTest_ReturnValue) == 0x0000F0, "Member 'WB_LandmarkableMap_C_CalcStickPosition::CallFunc_IsForLocationTest_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_CalcStickPosition, CallFunc_Divide_Vector2DFloat_ReturnValue) == 0x0000F4, "Member 'WB_LandmarkableMap_C_CalcStickPosition::CallFunc_Divide_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_CalcStickPosition, CallFunc_Not_PreBool_ReturnValue1) == 0x0000FC, "Member 'WB_LandmarkableMap_C_CalcStickPosition::CallFunc_Not_PreBool_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_CalcStickPosition, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x000100, "Member 'WB_LandmarkableMap_C_CalcStickPosition::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_CalcStickPosition, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x000108, "Member 'WB_LandmarkableMap_C_CalcStickPosition::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_CalcStickPosition, CallFunc_BooleanAND_ReturnValue1) == 0x000110, "Member 'WB_LandmarkableMap_C_CalcStickPosition::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_CalcStickPosition, CallFunc_Subtract_Vector2DVector2D_ReturnValue1) == 0x000114, "Member 'WB_LandmarkableMap_C_CalcStickPosition::CallFunc_Subtract_Vector2DVector2D_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_CalcStickPosition, CallFunc_BooleanAND_ReturnValue2) == 0x00011C, "Member 'WB_LandmarkableMap_C_CalcStickPosition::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.StickNewPin
// 0x0028 (0x0028 - 0x0000)
struct WB_LandmarkableMap_C_StickNewPin final
{
public:
	struct FVector2D                              StickPosition;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              NormalizedPosition;                                // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SignalTypeTag;                                     // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_Vector2dToString_ReturnValue;        // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_LandmarkableMap_C_StickNewPin) == 0x000008, "Wrong alignment on WB_LandmarkableMap_C_StickNewPin");
static_assert(sizeof(WB_LandmarkableMap_C_StickNewPin) == 0x000028, "Wrong size on WB_LandmarkableMap_C_StickNewPin");
static_assert(offsetof(WB_LandmarkableMap_C_StickNewPin, StickPosition) == 0x000000, "Member 'WB_LandmarkableMap_C_StickNewPin::StickPosition' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_StickNewPin, NormalizedPosition) == 0x000008, "Member 'WB_LandmarkableMap_C_StickNewPin::NormalizedPosition' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_StickNewPin, SignalTypeTag) == 0x000010, "Member 'WB_LandmarkableMap_C_StickNewPin::SignalTypeTag' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_StickNewPin, CallFunc_Conv_Vector2dToString_ReturnValue) == 0x000018, "Member 'WB_LandmarkableMap_C_StickNewPin::CallFunc_Conv_Vector2dToString_ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.TryRemoveLandmark
// 0x000C (0x000C - 0x0000)
struct WB_LandmarkableMap_C_TryRemoveLandmark final
{
public:
	struct FVector2D                              TouchPosition;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Removed;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsTouchMarker_IsTouch;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsTouchMarker_IsTouch1;                   // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_TryRemoveLandmark) == 0x000004, "Wrong alignment on WB_LandmarkableMap_C_TryRemoveLandmark");
static_assert(sizeof(WB_LandmarkableMap_C_TryRemoveLandmark) == 0x00000C, "Wrong size on WB_LandmarkableMap_C_TryRemoveLandmark");
static_assert(offsetof(WB_LandmarkableMap_C_TryRemoveLandmark, TouchPosition) == 0x000000, "Member 'WB_LandmarkableMap_C_TryRemoveLandmark::TouchPosition' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_TryRemoveLandmark, Removed) == 0x000008, "Member 'WB_LandmarkableMap_C_TryRemoveLandmark::Removed' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_TryRemoveLandmark, CallFunc_IsTouchMarker_IsTouch) == 0x000009, "Member 'WB_LandmarkableMap_C_TryRemoveLandmark::CallFunc_IsTouchMarker_IsTouch' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_TryRemoveLandmark, CallFunc_IsTouchMarker_IsTouch1) == 0x00000A, "Member 'WB_LandmarkableMap_C_TryRemoveLandmark::CallFunc_IsTouchMarker_IsTouch1' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.OnInputTurnRate
// 0x0008 (0x0008 - 0x0000)
struct WB_LandmarkableMap_C_OnInputTurnRate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_OnInputTurnRate) == 0x000004, "Wrong alignment on WB_LandmarkableMap_C_OnInputTurnRate");
static_assert(sizeof(WB_LandmarkableMap_C_OnInputTurnRate) == 0x000008, "Wrong size on WB_LandmarkableMap_C_OnInputTurnRate");
static_assert(offsetof(WB_LandmarkableMap_C_OnInputTurnRate, Value) == 0x000000, "Member 'WB_LandmarkableMap_C_OnInputTurnRate::Value' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_OnInputTurnRate, ReturnValue) == 0x000004, "Member 'WB_LandmarkableMap_C_OnInputTurnRate::ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.OnInputReleasedUp
// 0x0001 (0x0001 - 0x0000)
struct WB_LandmarkableMap_C_OnInputReleasedUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_OnInputReleasedUp) == 0x000001, "Wrong alignment on WB_LandmarkableMap_C_OnInputReleasedUp");
static_assert(sizeof(WB_LandmarkableMap_C_OnInputReleasedUp) == 0x000001, "Wrong size on WB_LandmarkableMap_C_OnInputReleasedUp");
static_assert(offsetof(WB_LandmarkableMap_C_OnInputReleasedUp, ReturnValue) == 0x000000, "Member 'WB_LandmarkableMap_C_OnInputReleasedUp::ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.OnInputReleasedTouch
// 0x0001 (0x0001 - 0x0000)
struct WB_LandmarkableMap_C_OnInputReleasedTouch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_OnInputReleasedTouch) == 0x000001, "Wrong alignment on WB_LandmarkableMap_C_OnInputReleasedTouch");
static_assert(sizeof(WB_LandmarkableMap_C_OnInputReleasedTouch) == 0x000001, "Wrong size on WB_LandmarkableMap_C_OnInputReleasedTouch");
static_assert(offsetof(WB_LandmarkableMap_C_OnInputReleasedTouch, ReturnValue) == 0x000000, "Member 'WB_LandmarkableMap_C_OnInputReleasedTouch::ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.OnInputReleasedRight
// 0x0001 (0x0001 - 0x0000)
struct WB_LandmarkableMap_C_OnInputReleasedRight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_OnInputReleasedRight) == 0x000001, "Wrong alignment on WB_LandmarkableMap_C_OnInputReleasedRight");
static_assert(sizeof(WB_LandmarkableMap_C_OnInputReleasedRight) == 0x000001, "Wrong size on WB_LandmarkableMap_C_OnInputReleasedRight");
static_assert(offsetof(WB_LandmarkableMap_C_OnInputReleasedRight, ReturnValue) == 0x000000, "Member 'WB_LandmarkableMap_C_OnInputReleasedRight::ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.OnInputReleasedLeft
// 0x0001 (0x0001 - 0x0000)
struct WB_LandmarkableMap_C_OnInputReleasedLeft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_OnInputReleasedLeft) == 0x000001, "Wrong alignment on WB_LandmarkableMap_C_OnInputReleasedLeft");
static_assert(sizeof(WB_LandmarkableMap_C_OnInputReleasedLeft) == 0x000001, "Wrong size on WB_LandmarkableMap_C_OnInputReleasedLeft");
static_assert(offsetof(WB_LandmarkableMap_C_OnInputReleasedLeft, ReturnValue) == 0x000000, "Member 'WB_LandmarkableMap_C_OnInputReleasedLeft::ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.OnInputReleasedDown
// 0x0001 (0x0001 - 0x0000)
struct WB_LandmarkableMap_C_OnInputReleasedDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_OnInputReleasedDown) == 0x000001, "Wrong alignment on WB_LandmarkableMap_C_OnInputReleasedDown");
static_assert(sizeof(WB_LandmarkableMap_C_OnInputReleasedDown) == 0x000001, "Wrong size on WB_LandmarkableMap_C_OnInputReleasedDown");
static_assert(offsetof(WB_LandmarkableMap_C_OnInputReleasedDown, ReturnValue) == 0x000000, "Member 'WB_LandmarkableMap_C_OnInputReleasedDown::ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.OnInputReleasedDecide
// 0x0001 (0x0001 - 0x0000)
struct WB_LandmarkableMap_C_OnInputReleasedDecide final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_OnInputReleasedDecide) == 0x000001, "Wrong alignment on WB_LandmarkableMap_C_OnInputReleasedDecide");
static_assert(sizeof(WB_LandmarkableMap_C_OnInputReleasedDecide) == 0x000001, "Wrong size on WB_LandmarkableMap_C_OnInputReleasedDecide");
static_assert(offsetof(WB_LandmarkableMap_C_OnInputReleasedDecide, ReturnValue) == 0x000000, "Member 'WB_LandmarkableMap_C_OnInputReleasedDecide::ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.OnInputReleasedCancel
// 0x0001 (0x0001 - 0x0000)
struct WB_LandmarkableMap_C_OnInputReleasedCancel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_OnInputReleasedCancel) == 0x000001, "Wrong alignment on WB_LandmarkableMap_C_OnInputReleasedCancel");
static_assert(sizeof(WB_LandmarkableMap_C_OnInputReleasedCancel) == 0x000001, "Wrong size on WB_LandmarkableMap_C_OnInputReleasedCancel");
static_assert(offsetof(WB_LandmarkableMap_C_OnInputReleasedCancel, ReturnValue) == 0x000000, "Member 'WB_LandmarkableMap_C_OnInputReleasedCancel::ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.OnInputPressedUp
// 0x0001 (0x0001 - 0x0000)
struct WB_LandmarkableMap_C_OnInputPressedUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_OnInputPressedUp) == 0x000001, "Wrong alignment on WB_LandmarkableMap_C_OnInputPressedUp");
static_assert(sizeof(WB_LandmarkableMap_C_OnInputPressedUp) == 0x000001, "Wrong size on WB_LandmarkableMap_C_OnInputPressedUp");
static_assert(offsetof(WB_LandmarkableMap_C_OnInputPressedUp, ReturnValue) == 0x000000, "Member 'WB_LandmarkableMap_C_OnInputPressedUp::ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.OnInputPressedTouch
// 0x000C (0x000C - 0x0000)
struct WB_LandmarkableMap_C_OnInputPressedTouch final
{
public:
	float                                         LocationX;                                         // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LocationY;                                         // 0x0004(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_OnInputPressedTouch) == 0x000004, "Wrong alignment on WB_LandmarkableMap_C_OnInputPressedTouch");
static_assert(sizeof(WB_LandmarkableMap_C_OnInputPressedTouch) == 0x00000C, "Wrong size on WB_LandmarkableMap_C_OnInputPressedTouch");
static_assert(offsetof(WB_LandmarkableMap_C_OnInputPressedTouch, LocationX) == 0x000000, "Member 'WB_LandmarkableMap_C_OnInputPressedTouch::LocationX' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_OnInputPressedTouch, LocationY) == 0x000004, "Member 'WB_LandmarkableMap_C_OnInputPressedTouch::LocationY' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_OnInputPressedTouch, ReturnValue) == 0x000008, "Member 'WB_LandmarkableMap_C_OnInputPressedTouch::ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.OnInputPressedRight
// 0x0001 (0x0001 - 0x0000)
struct WB_LandmarkableMap_C_OnInputPressedRight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_OnInputPressedRight) == 0x000001, "Wrong alignment on WB_LandmarkableMap_C_OnInputPressedRight");
static_assert(sizeof(WB_LandmarkableMap_C_OnInputPressedRight) == 0x000001, "Wrong size on WB_LandmarkableMap_C_OnInputPressedRight");
static_assert(offsetof(WB_LandmarkableMap_C_OnInputPressedRight, ReturnValue) == 0x000000, "Member 'WB_LandmarkableMap_C_OnInputPressedRight::ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.OnInputPressedLeft
// 0x0001 (0x0001 - 0x0000)
struct WB_LandmarkableMap_C_OnInputPressedLeft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_OnInputPressedLeft) == 0x000001, "Wrong alignment on WB_LandmarkableMap_C_OnInputPressedLeft");
static_assert(sizeof(WB_LandmarkableMap_C_OnInputPressedLeft) == 0x000001, "Wrong size on WB_LandmarkableMap_C_OnInputPressedLeft");
static_assert(offsetof(WB_LandmarkableMap_C_OnInputPressedLeft, ReturnValue) == 0x000000, "Member 'WB_LandmarkableMap_C_OnInputPressedLeft::ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.OnInputPressedDown
// 0x0001 (0x0001 - 0x0000)
struct WB_LandmarkableMap_C_OnInputPressedDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_OnInputPressedDown) == 0x000001, "Wrong alignment on WB_LandmarkableMap_C_OnInputPressedDown");
static_assert(sizeof(WB_LandmarkableMap_C_OnInputPressedDown) == 0x000001, "Wrong size on WB_LandmarkableMap_C_OnInputPressedDown");
static_assert(offsetof(WB_LandmarkableMap_C_OnInputPressedDown, ReturnValue) == 0x000000, "Member 'WB_LandmarkableMap_C_OnInputPressedDown::ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.OnInputPressedDecide
// 0x0001 (0x0001 - 0x0000)
struct WB_LandmarkableMap_C_OnInputPressedDecide final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_OnInputPressedDecide) == 0x000001, "Wrong alignment on WB_LandmarkableMap_C_OnInputPressedDecide");
static_assert(sizeof(WB_LandmarkableMap_C_OnInputPressedDecide) == 0x000001, "Wrong size on WB_LandmarkableMap_C_OnInputPressedDecide");
static_assert(offsetof(WB_LandmarkableMap_C_OnInputPressedDecide, ReturnValue) == 0x000000, "Member 'WB_LandmarkableMap_C_OnInputPressedDecide::ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.OnInputPressedCancel
// 0x0001 (0x0001 - 0x0000)
struct WB_LandmarkableMap_C_OnInputPressedCancel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_OnInputPressedCancel) == 0x000001, "Wrong alignment on WB_LandmarkableMap_C_OnInputPressedCancel");
static_assert(sizeof(WB_LandmarkableMap_C_OnInputPressedCancel) == 0x000001, "Wrong size on WB_LandmarkableMap_C_OnInputPressedCancel");
static_assert(offsetof(WB_LandmarkableMap_C_OnInputPressedCancel, ReturnValue) == 0x000000, "Member 'WB_LandmarkableMap_C_OnInputPressedCancel::ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.OnInputMoveRight
// 0x0008 (0x0008 - 0x0000)
struct WB_LandmarkableMap_C_OnInputMoveRight final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_OnInputMoveRight) == 0x000004, "Wrong alignment on WB_LandmarkableMap_C_OnInputMoveRight");
static_assert(sizeof(WB_LandmarkableMap_C_OnInputMoveRight) == 0x000008, "Wrong size on WB_LandmarkableMap_C_OnInputMoveRight");
static_assert(offsetof(WB_LandmarkableMap_C_OnInputMoveRight, Value) == 0x000000, "Member 'WB_LandmarkableMap_C_OnInputMoveRight::Value' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_OnInputMoveRight, ReturnValue) == 0x000004, "Member 'WB_LandmarkableMap_C_OnInputMoveRight::ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.OnInputMoveForward
// 0x0008 (0x0008 - 0x0000)
struct WB_LandmarkableMap_C_OnInputMoveForward final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_OnInputMoveForward) == 0x000004, "Wrong alignment on WB_LandmarkableMap_C_OnInputMoveForward");
static_assert(sizeof(WB_LandmarkableMap_C_OnInputMoveForward) == 0x000008, "Wrong size on WB_LandmarkableMap_C_OnInputMoveForward");
static_assert(offsetof(WB_LandmarkableMap_C_OnInputMoveForward, Value) == 0x000000, "Member 'WB_LandmarkableMap_C_OnInputMoveForward::Value' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_OnInputMoveForward, ReturnValue) == 0x000004, "Member 'WB_LandmarkableMap_C_OnInputMoveForward::ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.OnInputLookupRate
// 0x0008 (0x0008 - 0x0000)
struct WB_LandmarkableMap_C_OnInputLookupRate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_OnInputLookupRate) == 0x000004, "Wrong alignment on WB_LandmarkableMap_C_OnInputLookupRate");
static_assert(sizeof(WB_LandmarkableMap_C_OnInputLookupRate) == 0x000008, "Wrong size on WB_LandmarkableMap_C_OnInputLookupRate");
static_assert(offsetof(WB_LandmarkableMap_C_OnInputLookupRate, Value) == 0x000000, "Member 'WB_LandmarkableMap_C_OnInputLookupRate::Value' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_OnInputLookupRate, ReturnValue) == 0x000004, "Member 'WB_LandmarkableMap_C_OnInputLookupRate::ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.IsModeless
// 0x0001 (0x0001 - 0x0000)
struct WB_LandmarkableMap_C_IsModeless final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_IsModeless) == 0x000001, "Wrong alignment on WB_LandmarkableMap_C_IsModeless");
static_assert(sizeof(WB_LandmarkableMap_C_IsModeless) == 0x000001, "Wrong size on WB_LandmarkableMap_C_IsModeless");
static_assert(offsetof(WB_LandmarkableMap_C_IsModeless, ReturnValue) == 0x000000, "Member 'WB_LandmarkableMap_C_IsModeless::ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.OnInputReleasedR2
// 0x0001 (0x0001 - 0x0000)
struct WB_LandmarkableMap_C_OnInputReleasedR2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_OnInputReleasedR2) == 0x000001, "Wrong alignment on WB_LandmarkableMap_C_OnInputReleasedR2");
static_assert(sizeof(WB_LandmarkableMap_C_OnInputReleasedR2) == 0x000001, "Wrong size on WB_LandmarkableMap_C_OnInputReleasedR2");
static_assert(offsetof(WB_LandmarkableMap_C_OnInputReleasedR2, ReturnValue) == 0x000000, "Member 'WB_LandmarkableMap_C_OnInputReleasedR2::ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.OnInputReleasedR1
// 0x0001 (0x0001 - 0x0000)
struct WB_LandmarkableMap_C_OnInputReleasedR1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_OnInputReleasedR1) == 0x000001, "Wrong alignment on WB_LandmarkableMap_C_OnInputReleasedR1");
static_assert(sizeof(WB_LandmarkableMap_C_OnInputReleasedR1) == 0x000001, "Wrong size on WB_LandmarkableMap_C_OnInputReleasedR1");
static_assert(offsetof(WB_LandmarkableMap_C_OnInputReleasedR1, ReturnValue) == 0x000000, "Member 'WB_LandmarkableMap_C_OnInputReleasedR1::ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.OnInputReleasedL2
// 0x0001 (0x0001 - 0x0000)
struct WB_LandmarkableMap_C_OnInputReleasedL2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_OnInputReleasedL2) == 0x000001, "Wrong alignment on WB_LandmarkableMap_C_OnInputReleasedL2");
static_assert(sizeof(WB_LandmarkableMap_C_OnInputReleasedL2) == 0x000001, "Wrong size on WB_LandmarkableMap_C_OnInputReleasedL2");
static_assert(offsetof(WB_LandmarkableMap_C_OnInputReleasedL2, ReturnValue) == 0x000000, "Member 'WB_LandmarkableMap_C_OnInputReleasedL2::ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.OnInputReleasedL1
// 0x0001 (0x0001 - 0x0000)
struct WB_LandmarkableMap_C_OnInputReleasedL1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_OnInputReleasedL1) == 0x000001, "Wrong alignment on WB_LandmarkableMap_C_OnInputReleasedL1");
static_assert(sizeof(WB_LandmarkableMap_C_OnInputReleasedL1) == 0x000001, "Wrong size on WB_LandmarkableMap_C_OnInputReleasedL1");
static_assert(offsetof(WB_LandmarkableMap_C_OnInputReleasedL1, ReturnValue) == 0x000000, "Member 'WB_LandmarkableMap_C_OnInputReleasedL1::ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.OnInputPressedR2
// 0x0001 (0x0001 - 0x0000)
struct WB_LandmarkableMap_C_OnInputPressedR2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_OnInputPressedR2) == 0x000001, "Wrong alignment on WB_LandmarkableMap_C_OnInputPressedR2");
static_assert(sizeof(WB_LandmarkableMap_C_OnInputPressedR2) == 0x000001, "Wrong size on WB_LandmarkableMap_C_OnInputPressedR2");
static_assert(offsetof(WB_LandmarkableMap_C_OnInputPressedR2, ReturnValue) == 0x000000, "Member 'WB_LandmarkableMap_C_OnInputPressedR2::ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.OnInputPressedR1
// 0x0001 (0x0001 - 0x0000)
struct WB_LandmarkableMap_C_OnInputPressedR1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_OnInputPressedR1) == 0x000001, "Wrong alignment on WB_LandmarkableMap_C_OnInputPressedR1");
static_assert(sizeof(WB_LandmarkableMap_C_OnInputPressedR1) == 0x000001, "Wrong size on WB_LandmarkableMap_C_OnInputPressedR1");
static_assert(offsetof(WB_LandmarkableMap_C_OnInputPressedR1, ReturnValue) == 0x000000, "Member 'WB_LandmarkableMap_C_OnInputPressedR1::ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.OnInputPressedL2
// 0x0001 (0x0001 - 0x0000)
struct WB_LandmarkableMap_C_OnInputPressedL2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_OnInputPressedL2) == 0x000001, "Wrong alignment on WB_LandmarkableMap_C_OnInputPressedL2");
static_assert(sizeof(WB_LandmarkableMap_C_OnInputPressedL2) == 0x000001, "Wrong size on WB_LandmarkableMap_C_OnInputPressedL2");
static_assert(offsetof(WB_LandmarkableMap_C_OnInputPressedL2, ReturnValue) == 0x000000, "Member 'WB_LandmarkableMap_C_OnInputPressedL2::ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.OnInputPressedL1
// 0x0001 (0x0001 - 0x0000)
struct WB_LandmarkableMap_C_OnInputPressedL1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_OnInputPressedL1) == 0x000001, "Wrong alignment on WB_LandmarkableMap_C_OnInputPressedL1");
static_assert(sizeof(WB_LandmarkableMap_C_OnInputPressedL1) == 0x000001, "Wrong size on WB_LandmarkableMap_C_OnInputPressedL1");
static_assert(offsetof(WB_LandmarkableMap_C_OnInputPressedL1, ReturnValue) == 0x000000, "Member 'WB_LandmarkableMap_C_OnInputPressedL1::ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.OnInputReleasedL3
// 0x0001 (0x0001 - 0x0000)
struct WB_LandmarkableMap_C_OnInputReleasedL3 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_OnInputReleasedL3) == 0x000001, "Wrong alignment on WB_LandmarkableMap_C_OnInputReleasedL3");
static_assert(sizeof(WB_LandmarkableMap_C_OnInputReleasedL3) == 0x000001, "Wrong size on WB_LandmarkableMap_C_OnInputReleasedL3");
static_assert(offsetof(WB_LandmarkableMap_C_OnInputReleasedL3, ReturnValue) == 0x000000, "Member 'WB_LandmarkableMap_C_OnInputReleasedL3::ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.OnInputPressedL3
// 0x0001 (0x0001 - 0x0000)
struct WB_LandmarkableMap_C_OnInputPressedL3 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LandmarkableMap_C_OnInputPressedL3) == 0x000001, "Wrong alignment on WB_LandmarkableMap_C_OnInputPressedL3");
static_assert(sizeof(WB_LandmarkableMap_C_OnInputPressedL3) == 0x000001, "Wrong size on WB_LandmarkableMap_C_OnInputPressedL3");
static_assert(offsetof(WB_LandmarkableMap_C_OnInputPressedL3, ReturnValue) == 0x000000, "Member 'WB_LandmarkableMap_C_OnInputPressedL3::ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.ClampPosition
// 0x0040 (0x0040 - 0x0000)
struct WB_LandmarkableMap_C_ClampPosition final
{
public:
	struct FVector2D                              InVec;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x0018(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X1;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y1;                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X2;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y2;                         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue1;                      // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0038(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_LandmarkableMap_C_ClampPosition) == 0x000004, "Wrong alignment on WB_LandmarkableMap_C_ClampPosition");
static_assert(sizeof(WB_LandmarkableMap_C_ClampPosition) == 0x000040, "Wrong size on WB_LandmarkableMap_C_ClampPosition");
static_assert(offsetof(WB_LandmarkableMap_C_ClampPosition, InVec) == 0x000000, "Member 'WB_LandmarkableMap_C_ClampPosition::InVec' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ClampPosition, ReturnValue) == 0x000008, "Member 'WB_LandmarkableMap_C_ClampPosition::ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ClampPosition, CallFunc_BreakVector2D_X) == 0x000010, "Member 'WB_LandmarkableMap_C_ClampPosition::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ClampPosition, CallFunc_BreakVector2D_Y) == 0x000014, "Member 'WB_LandmarkableMap_C_ClampPosition::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ClampPosition, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x000018, "Member 'WB_LandmarkableMap_C_ClampPosition::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ClampPosition, CallFunc_BreakVector2D_X1) == 0x000020, "Member 'WB_LandmarkableMap_C_ClampPosition::CallFunc_BreakVector2D_X1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ClampPosition, CallFunc_BreakVector2D_Y1) == 0x000024, "Member 'WB_LandmarkableMap_C_ClampPosition::CallFunc_BreakVector2D_Y1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ClampPosition, CallFunc_BreakVector2D_X2) == 0x000028, "Member 'WB_LandmarkableMap_C_ClampPosition::CallFunc_BreakVector2D_X2' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ClampPosition, CallFunc_BreakVector2D_Y2) == 0x00002C, "Member 'WB_LandmarkableMap_C_ClampPosition::CallFunc_BreakVector2D_Y2' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ClampPosition, CallFunc_FClamp_ReturnValue) == 0x000030, "Member 'WB_LandmarkableMap_C_ClampPosition::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ClampPosition, CallFunc_FClamp_ReturnValue1) == 0x000034, "Member 'WB_LandmarkableMap_C_ClampPosition::CallFunc_FClamp_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ClampPosition, CallFunc_MakeVector2D_ReturnValue) == 0x000038, "Member 'WB_LandmarkableMap_C_ClampPosition::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.ClampScale
// 0x000C (0x000C - 0x0000)
struct WB_LandmarkableMap_C_ClampScale final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_LandmarkableMap_C_ClampScale) == 0x000004, "Wrong alignment on WB_LandmarkableMap_C_ClampScale");
static_assert(sizeof(WB_LandmarkableMap_C_ClampScale) == 0x00000C, "Wrong size on WB_LandmarkableMap_C_ClampScale");
static_assert(offsetof(WB_LandmarkableMap_C_ClampScale, Value) == 0x000000, "Member 'WB_LandmarkableMap_C_ClampScale::Value' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ClampScale, ReturnValue) == 0x000004, "Member 'WB_LandmarkableMap_C_ClampScale::ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_ClampScale, CallFunc_FClamp_ReturnValue) == 0x000008, "Member 'WB_LandmarkableMap_C_ClampScale::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function WB_LandmarkableMap.WB_LandmarkableMap_C.GetCompassWaypoint
// 0x0064 (0x0064 - 0x0000)
struct WB_LandmarkableMap_C_GetCompassWaypoint final
{
public:
	struct FVector2D                              TargetNormalizedInnerPosition;                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Subtract_Vector2DFloat_ReturnValue;       // 0x0010(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0018(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue;    // 0x0020(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue1;                // 0x0028(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x0030(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Normal2D_ReturnValue;                     // 0x0038(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DotProduct2D_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CrossProduct2D_ReturnValue;               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAcos_ReturnValue;                      // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DotProduct2D_ReturnValue1;                // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAcos_ReturnValue1;                     // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_LandmarkableMap_C_GetCompassWaypoint) == 0x000004, "Wrong alignment on WB_LandmarkableMap_C_GetCompassWaypoint");
static_assert(sizeof(WB_LandmarkableMap_C_GetCompassWaypoint) == 0x000064, "Wrong size on WB_LandmarkableMap_C_GetCompassWaypoint");
static_assert(offsetof(WB_LandmarkableMap_C_GetCompassWaypoint, TargetNormalizedInnerPosition) == 0x000000, "Member 'WB_LandmarkableMap_C_GetCompassWaypoint::TargetNormalizedInnerPosition' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_GetCompassWaypoint, ReturnValue) == 0x000008, "Member 'WB_LandmarkableMap_C_GetCompassWaypoint::ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_GetCompassWaypoint, Temp_bool_Variable) == 0x00000C, "Member 'WB_LandmarkableMap_C_GetCompassWaypoint::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_GetCompassWaypoint, CallFunc_Subtract_Vector2DFloat_ReturnValue) == 0x000010, "Member 'WB_LandmarkableMap_C_GetCompassWaypoint::CallFunc_Subtract_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_GetCompassWaypoint, CallFunc_MakeVector2D_ReturnValue) == 0x000018, "Member 'WB_LandmarkableMap_C_GetCompassWaypoint::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_GetCompassWaypoint, CallFunc_Multiply_Vector2DVector2D_ReturnValue) == 0x000020, "Member 'WB_LandmarkableMap_C_GetCompassWaypoint::CallFunc_Multiply_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_GetCompassWaypoint, CallFunc_MakeVector2D_ReturnValue1) == 0x000028, "Member 'WB_LandmarkableMap_C_GetCompassWaypoint::CallFunc_MakeVector2D_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_GetCompassWaypoint, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x000030, "Member 'WB_LandmarkableMap_C_GetCompassWaypoint::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_GetCompassWaypoint, CallFunc_Normal2D_ReturnValue) == 0x000038, "Member 'WB_LandmarkableMap_C_GetCompassWaypoint::CallFunc_Normal2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_GetCompassWaypoint, CallFunc_DotProduct2D_ReturnValue) == 0x000040, "Member 'WB_LandmarkableMap_C_GetCompassWaypoint::CallFunc_DotProduct2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_GetCompassWaypoint, CallFunc_CrossProduct2D_ReturnValue) == 0x000044, "Member 'WB_LandmarkableMap_C_GetCompassWaypoint::CallFunc_CrossProduct2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_GetCompassWaypoint, CallFunc_DegAcos_ReturnValue) == 0x000048, "Member 'WB_LandmarkableMap_C_GetCompassWaypoint::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_GetCompassWaypoint, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00004C, "Member 'WB_LandmarkableMap_C_GetCompassWaypoint::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_GetCompassWaypoint, CallFunc_Add_FloatFloat_ReturnValue) == 0x000050, "Member 'WB_LandmarkableMap_C_GetCompassWaypoint::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_GetCompassWaypoint, CallFunc_DotProduct2D_ReturnValue1) == 0x000054, "Member 'WB_LandmarkableMap_C_GetCompassWaypoint::CallFunc_DotProduct2D_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_GetCompassWaypoint, CallFunc_DegAcos_ReturnValue1) == 0x000058, "Member 'WB_LandmarkableMap_C_GetCompassWaypoint::CallFunc_DegAcos_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_GetCompassWaypoint, K2Node_Select_Default) == 0x00005C, "Member 'WB_LandmarkableMap_C_GetCompassWaypoint::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WB_LandmarkableMap_C_GetCompassWaypoint, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000060, "Member 'WB_LandmarkableMap_C_GetCompassWaypoint::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

}

