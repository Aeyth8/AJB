#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_AJBSignalPinIcon_Instruction

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function WB_AJBSignalPinIcon_Instruction.WB_AJBSignalPinIcon_Instruction_C.ExecuteUbergraph_WB_AJBSignalPinIcon_Instruction
// 0x0060 (0x0060 - 0x0000)
struct WB_AJBSignalPinIcon_Instruction_C_ExecuteUbergraph_WB_AJBSignalPinIcon_Instruction final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0008(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable1;                             // 0x0018(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_SignalTypeTag;                        // 0x0028(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_BlurOffset;                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Event_Size;                                 // 0x0034(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsPair;                              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x004C(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_AJBSignalPinIcon_Instruction_C_ExecuteUbergraph_WB_AJBSignalPinIcon_Instruction) == 0x000008, "Wrong alignment on WB_AJBSignalPinIcon_Instruction_C_ExecuteUbergraph_WB_AJBSignalPinIcon_Instruction");
static_assert(sizeof(WB_AJBSignalPinIcon_Instruction_C_ExecuteUbergraph_WB_AJBSignalPinIcon_Instruction) == 0x000060, "Wrong size on WB_AJBSignalPinIcon_Instruction_C_ExecuteUbergraph_WB_AJBSignalPinIcon_Instruction");
static_assert(offsetof(WB_AJBSignalPinIcon_Instruction_C_ExecuteUbergraph_WB_AJBSignalPinIcon_Instruction, EntryPoint) == 0x000000, "Member 'WB_AJBSignalPinIcon_Instruction_C_ExecuteUbergraph_WB_AJBSignalPinIcon_Instruction::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_AJBSignalPinIcon_Instruction_C_ExecuteUbergraph_WB_AJBSignalPinIcon_Instruction, Temp_bool_Variable) == 0x000004, "Member 'WB_AJBSignalPinIcon_Instruction_C_ExecuteUbergraph_WB_AJBSignalPinIcon_Instruction::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_AJBSignalPinIcon_Instruction_C_ExecuteUbergraph_WB_AJBSignalPinIcon_Instruction, Temp_struct_Variable) == 0x000008, "Member 'WB_AJBSignalPinIcon_Instruction_C_ExecuteUbergraph_WB_AJBSignalPinIcon_Instruction::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WB_AJBSignalPinIcon_Instruction_C_ExecuteUbergraph_WB_AJBSignalPinIcon_Instruction, Temp_struct_Variable1) == 0x000018, "Member 'WB_AJBSignalPinIcon_Instruction_C_ExecuteUbergraph_WB_AJBSignalPinIcon_Instruction::Temp_struct_Variable1' has a wrong offset!");
static_assert(offsetof(WB_AJBSignalPinIcon_Instruction_C_ExecuteUbergraph_WB_AJBSignalPinIcon_Instruction, K2Node_Event_SignalTypeTag) == 0x000028, "Member 'WB_AJBSignalPinIcon_Instruction_C_ExecuteUbergraph_WB_AJBSignalPinIcon_Instruction::K2Node_Event_SignalTypeTag' has a wrong offset!");
static_assert(offsetof(WB_AJBSignalPinIcon_Instruction_C_ExecuteUbergraph_WB_AJBSignalPinIcon_Instruction, K2Node_Event_BlurOffset) == 0x000030, "Member 'WB_AJBSignalPinIcon_Instruction_C_ExecuteUbergraph_WB_AJBSignalPinIcon_Instruction::K2Node_Event_BlurOffset' has a wrong offset!");
static_assert(offsetof(WB_AJBSignalPinIcon_Instruction_C_ExecuteUbergraph_WB_AJBSignalPinIcon_Instruction, K2Node_Event_Size) == 0x000034, "Member 'WB_AJBSignalPinIcon_Instruction_C_ExecuteUbergraph_WB_AJBSignalPinIcon_Instruction::K2Node_Event_Size' has a wrong offset!");
static_assert(offsetof(WB_AJBSignalPinIcon_Instruction_C_ExecuteUbergraph_WB_AJBSignalPinIcon_Instruction, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000040, "Member 'WB_AJBSignalPinIcon_Instruction_C_ExecuteUbergraph_WB_AJBSignalPinIcon_Instruction::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_AJBSignalPinIcon_Instruction_C_ExecuteUbergraph_WB_AJBSignalPinIcon_Instruction, K2Node_Event_bIsPair) == 0x000048, "Member 'WB_AJBSignalPinIcon_Instruction_C_ExecuteUbergraph_WB_AJBSignalPinIcon_Instruction::K2Node_Event_bIsPair' has a wrong offset!");
static_assert(offsetof(WB_AJBSignalPinIcon_Instruction_C_ExecuteUbergraph_WB_AJBSignalPinIcon_Instruction, K2Node_Select_Default) == 0x00004C, "Member 'WB_AJBSignalPinIcon_Instruction_C_ExecuteUbergraph_WB_AJBSignalPinIcon_Instruction::K2Node_Select_Default' has a wrong offset!");

// Function WB_AJBSignalPinIcon_Instruction.WB_AJBSignalPinIcon_Instruction_C.SetIsPair
// 0x0001 (0x0001 - 0x0000)
struct WB_AJBSignalPinIcon_Instruction_C_SetIsPair final
{
public:
	bool                                          bIsPair;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_AJBSignalPinIcon_Instruction_C_SetIsPair) == 0x000001, "Wrong alignment on WB_AJBSignalPinIcon_Instruction_C_SetIsPair");
static_assert(sizeof(WB_AJBSignalPinIcon_Instruction_C_SetIsPair) == 0x000001, "Wrong size on WB_AJBSignalPinIcon_Instruction_C_SetIsPair");
static_assert(offsetof(WB_AJBSignalPinIcon_Instruction_C_SetIsPair, bIsPair) == 0x000000, "Member 'WB_AJBSignalPinIcon_Instruction_C_SetIsPair::bIsPair' has a wrong offset!");

// Function WB_AJBSignalPinIcon_Instruction.WB_AJBSignalPinIcon_Instruction_C.UpdateSize
// 0x0008 (0x0008 - 0x0000)
struct WB_AJBSignalPinIcon_Instruction_C_UpdateSize final
{
public:
	struct FVector2D                              Size;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_AJBSignalPinIcon_Instruction_C_UpdateSize) == 0x000004, "Wrong alignment on WB_AJBSignalPinIcon_Instruction_C_UpdateSize");
static_assert(sizeof(WB_AJBSignalPinIcon_Instruction_C_UpdateSize) == 0x000008, "Wrong size on WB_AJBSignalPinIcon_Instruction_C_UpdateSize");
static_assert(offsetof(WB_AJBSignalPinIcon_Instruction_C_UpdateSize, Size) == 0x000000, "Member 'WB_AJBSignalPinIcon_Instruction_C_UpdateSize::Size' has a wrong offset!");

// Function WB_AJBSignalPinIcon_Instruction.WB_AJBSignalPinIcon_Instruction_C.UpdateBlurOffset
// 0x0004 (0x0004 - 0x0000)
struct WB_AJBSignalPinIcon_Instruction_C_UpdateBlurOffset final
{
public:
	float                                         BlurOffset;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_AJBSignalPinIcon_Instruction_C_UpdateBlurOffset) == 0x000004, "Wrong alignment on WB_AJBSignalPinIcon_Instruction_C_UpdateBlurOffset");
static_assert(sizeof(WB_AJBSignalPinIcon_Instruction_C_UpdateBlurOffset) == 0x000004, "Wrong size on WB_AJBSignalPinIcon_Instruction_C_UpdateBlurOffset");
static_assert(offsetof(WB_AJBSignalPinIcon_Instruction_C_UpdateBlurOffset, BlurOffset) == 0x000000, "Member 'WB_AJBSignalPinIcon_Instruction_C_UpdateBlurOffset::BlurOffset' has a wrong offset!");

// Function WB_AJBSignalPinIcon_Instruction.WB_AJBSignalPinIcon_Instruction_C.SetSignalType
// 0x0008 (0x0008 - 0x0000)
struct WB_AJBSignalPinIcon_Instruction_C_SetSignalType final
{
public:
	struct FGameplayTag                           SignalTypeTag;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_AJBSignalPinIcon_Instruction_C_SetSignalType) == 0x000008, "Wrong alignment on WB_AJBSignalPinIcon_Instruction_C_SetSignalType");
static_assert(sizeof(WB_AJBSignalPinIcon_Instruction_C_SetSignalType) == 0x000008, "Wrong size on WB_AJBSignalPinIcon_Instruction_C_SetSignalType");
static_assert(offsetof(WB_AJBSignalPinIcon_Instruction_C_SetSignalType, SignalTypeTag) == 0x000000, "Member 'WB_AJBSignalPinIcon_Instruction_C_SetSignalType::SignalTypeTag' has a wrong offset!");

// Function WB_AJBSignalPinIcon_Instruction.WB_AJBSignalPinIcon_Instruction_C.PlayVanishAnimation
// 0x0008 (0x0008 - 0x0000)
struct WB_AJBSignalPinIcon_Instruction_C_PlayVanishAnimation final
{
public:
	bool                                          bIsTimeUp;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimationLength;                                   // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_AJBSignalPinIcon_Instruction_C_PlayVanishAnimation) == 0x000004, "Wrong alignment on WB_AJBSignalPinIcon_Instruction_C_PlayVanishAnimation");
static_assert(sizeof(WB_AJBSignalPinIcon_Instruction_C_PlayVanishAnimation) == 0x000008, "Wrong size on WB_AJBSignalPinIcon_Instruction_C_PlayVanishAnimation");
static_assert(offsetof(WB_AJBSignalPinIcon_Instruction_C_PlayVanishAnimation, bIsTimeUp) == 0x000000, "Member 'WB_AJBSignalPinIcon_Instruction_C_PlayVanishAnimation::bIsTimeUp' has a wrong offset!");
static_assert(offsetof(WB_AJBSignalPinIcon_Instruction_C_PlayVanishAnimation, AnimationLength) == 0x000004, "Member 'WB_AJBSignalPinIcon_Instruction_C_PlayVanishAnimation::AnimationLength' has a wrong offset!");

}

