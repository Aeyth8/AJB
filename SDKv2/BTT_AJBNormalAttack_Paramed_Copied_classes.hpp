#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_AJBNormalAttack_Paramed_Copied

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "Engine_structs.hpp"
#include "AJB_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTT_AJBNormalAttack_Paramed_Copied.BTT_AJBNormalAttack_Paramed_Copied_C
// 0x00C0 (0x0160 - 0x00A0)
class UBTT_AJBNormalAttack_Paramed_Copied_C final : public UBTTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(Transient, DuplicateTransient)
	struct FBlackboardKeySelector                 RO_EnemyFocusingOn;                                // 0x00A8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly)
	struct FBlackboardKeySelector                 AttackRangeKey;                                    // 0x00D0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly)
	bool                                          bSucceeded;                                        // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AttackCountParam;                                  // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TriggerIntervalParam;                              // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HoldIntervalParam;                                 // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HoldTimeParamBase;                                 // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HoldTimeParamDeviation;                            // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackTimeParamBase;                               // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackTimeParamDeviation;                          // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AttackTimeTriggerBase;                             // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AttackTimeTriggerDeviation;                        // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameAIImaginaryCharacter_C*    ImaginaryCharacterEnemy;                           // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AttackTimeHoldBase;                                // 0x0130(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AttackTimeHoldDeviation;                           // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackTimeCurrent;                                 // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReleaseTimeParamBase;                              // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AttackTimeReleaseBase;                             // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReleaseIntervalParam;                              // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReleaseTimeParamDeviation;                         // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AttackTimeReleaseDiviation;                        // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BTT_AJBNormalAttack_Paramed_Copied(int32 EntryPoint);
	void ResetAttackGate();
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void ReceiveAbortAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTT_AJBNormalAttack_Paramed_Copied_C">();
	}
	static class UBTT_AJBNormalAttack_Paramed_Copied_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTT_AJBNormalAttack_Paramed_Copied_C>();
	}
};
static_assert(alignof(UBTT_AJBNormalAttack_Paramed_Copied_C) == 0x000008, "Wrong alignment on UBTT_AJBNormalAttack_Paramed_Copied_C");
static_assert(sizeof(UBTT_AJBNormalAttack_Paramed_Copied_C) == 0x000160, "Wrong size on UBTT_AJBNormalAttack_Paramed_Copied_C");
static_assert(offsetof(UBTT_AJBNormalAttack_Paramed_Copied_C, UberGraphFrame) == 0x0000A0, "Member 'UBTT_AJBNormalAttack_Paramed_Copied_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTT_AJBNormalAttack_Paramed_Copied_C, RO_EnemyFocusingOn) == 0x0000A8, "Member 'UBTT_AJBNormalAttack_Paramed_Copied_C::RO_EnemyFocusingOn' has a wrong offset!");
static_assert(offsetof(UBTT_AJBNormalAttack_Paramed_Copied_C, AttackRangeKey) == 0x0000D0, "Member 'UBTT_AJBNormalAttack_Paramed_Copied_C::AttackRangeKey' has a wrong offset!");
static_assert(offsetof(UBTT_AJBNormalAttack_Paramed_Copied_C, bSucceeded) == 0x0000F8, "Member 'UBTT_AJBNormalAttack_Paramed_Copied_C::bSucceeded' has a wrong offset!");
static_assert(offsetof(UBTT_AJBNormalAttack_Paramed_Copied_C, AttackCountParam) == 0x0000FC, "Member 'UBTT_AJBNormalAttack_Paramed_Copied_C::AttackCountParam' has a wrong offset!");
static_assert(offsetof(UBTT_AJBNormalAttack_Paramed_Copied_C, TriggerIntervalParam) == 0x000100, "Member 'UBTT_AJBNormalAttack_Paramed_Copied_C::TriggerIntervalParam' has a wrong offset!");
static_assert(offsetof(UBTT_AJBNormalAttack_Paramed_Copied_C, HoldIntervalParam) == 0x000104, "Member 'UBTT_AJBNormalAttack_Paramed_Copied_C::HoldIntervalParam' has a wrong offset!");
static_assert(offsetof(UBTT_AJBNormalAttack_Paramed_Copied_C, HoldTimeParamBase) == 0x000108, "Member 'UBTT_AJBNormalAttack_Paramed_Copied_C::HoldTimeParamBase' has a wrong offset!");
static_assert(offsetof(UBTT_AJBNormalAttack_Paramed_Copied_C, HoldTimeParamDeviation) == 0x00010C, "Member 'UBTT_AJBNormalAttack_Paramed_Copied_C::HoldTimeParamDeviation' has a wrong offset!");
static_assert(offsetof(UBTT_AJBNormalAttack_Paramed_Copied_C, AttackTimeParamBase) == 0x000110, "Member 'UBTT_AJBNormalAttack_Paramed_Copied_C::AttackTimeParamBase' has a wrong offset!");
static_assert(offsetof(UBTT_AJBNormalAttack_Paramed_Copied_C, AttackTimeParamDeviation) == 0x000114, "Member 'UBTT_AJBNormalAttack_Paramed_Copied_C::AttackTimeParamDeviation' has a wrong offset!");
static_assert(offsetof(UBTT_AJBNormalAttack_Paramed_Copied_C, AttackTimeTriggerBase) == 0x000118, "Member 'UBTT_AJBNormalAttack_Paramed_Copied_C::AttackTimeTriggerBase' has a wrong offset!");
static_assert(offsetof(UBTT_AJBNormalAttack_Paramed_Copied_C, AttackTimeTriggerDeviation) == 0x000120, "Member 'UBTT_AJBNormalAttack_Paramed_Copied_C::AttackTimeTriggerDeviation' has a wrong offset!");
static_assert(offsetof(UBTT_AJBNormalAttack_Paramed_Copied_C, ImaginaryCharacterEnemy) == 0x000128, "Member 'UBTT_AJBNormalAttack_Paramed_Copied_C::ImaginaryCharacterEnemy' has a wrong offset!");
static_assert(offsetof(UBTT_AJBNormalAttack_Paramed_Copied_C, AttackTimeHoldBase) == 0x000130, "Member 'UBTT_AJBNormalAttack_Paramed_Copied_C::AttackTimeHoldBase' has a wrong offset!");
static_assert(offsetof(UBTT_AJBNormalAttack_Paramed_Copied_C, AttackTimeHoldDeviation) == 0x000138, "Member 'UBTT_AJBNormalAttack_Paramed_Copied_C::AttackTimeHoldDeviation' has a wrong offset!");
static_assert(offsetof(UBTT_AJBNormalAttack_Paramed_Copied_C, AttackTimeCurrent) == 0x000140, "Member 'UBTT_AJBNormalAttack_Paramed_Copied_C::AttackTimeCurrent' has a wrong offset!");
static_assert(offsetof(UBTT_AJBNormalAttack_Paramed_Copied_C, ReleaseTimeParamBase) == 0x000144, "Member 'UBTT_AJBNormalAttack_Paramed_Copied_C::ReleaseTimeParamBase' has a wrong offset!");
static_assert(offsetof(UBTT_AJBNormalAttack_Paramed_Copied_C, AttackTimeReleaseBase) == 0x000148, "Member 'UBTT_AJBNormalAttack_Paramed_Copied_C::AttackTimeReleaseBase' has a wrong offset!");
static_assert(offsetof(UBTT_AJBNormalAttack_Paramed_Copied_C, ReleaseIntervalParam) == 0x000150, "Member 'UBTT_AJBNormalAttack_Paramed_Copied_C::ReleaseIntervalParam' has a wrong offset!");
static_assert(offsetof(UBTT_AJBNormalAttack_Paramed_Copied_C, ReleaseTimeParamDeviation) == 0x000154, "Member 'UBTT_AJBNormalAttack_Paramed_Copied_C::ReleaseTimeParamDeviation' has a wrong offset!");
static_assert(offsetof(UBTT_AJBNormalAttack_Paramed_Copied_C, AttackTimeReleaseDiviation) == 0x000158, "Member 'UBTT_AJBNormalAttack_Paramed_Copied_C::AttackTimeReleaseDiviation' has a wrong offset!");

}

