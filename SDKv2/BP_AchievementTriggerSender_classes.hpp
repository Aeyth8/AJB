#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AchievementTriggerSender

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AchievementTriggerSender.BP_AchievementTriggerSender_C
// 0x0010 (0x0100 - 0x00F0)
class UBP_AchievementTriggerSender_C : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00F0(0x0008)(Transient, DuplicateTransient)
	bool                                          bShouldDisplayDebugString;                         // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIgnore;                                           // 0x00F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_AchievementTriggerSender(int32 EntryPoint);
	void BindOwnerActorEvents();
	void OnOpenTheGame();
	void ReceiveBeginPlay();
	void PrintAchievementValue(const struct FGameplayTag& Key, const class FString& ResultValueString, const class FString& ReceiveValueString, bool bIsSet, bool bShouldPrintDebugText);
	void ShouldDisplayDebugString(bool* bResult);
	void SetValueAsByte(const struct FGameplayTag& Key, const uint8 Value, bool bUpdateEvenIfNotInGameplay, bool bShouldPrintDebugText);
	void SetValueAsFloat(const struct FGameplayTag& Key, const float Value, bool bUpdateEvenIfNotInGameplay, bool bShouldPrintDebugText);
	void SetValueAsInt(const struct FGameplayTag& Key, const int32 Value, bool bUpdateEvenIfNotInGameplay, bool bShouldPrintDebugText);
	void AddValueAsByte(const struct FGameplayTag& Key, const uint8 Value, bool bUpdateEvenIfNotInGameplay, bool bShouldPrintDebugText);
	void AddValueAsFloat(const struct FGameplayTag& Key, const float Value, bool bUpdateEvenIfNotInGameplay, bool bShouldPrintDebugText);
	void AddValueAsInt(const struct FGameplayTag& Key, const int32 Value, bool bUpdateEvenIfNotInGameplay, bool bShouldPrintDebugText);
	void SetValueAsString(const struct FGameplayTag& Key, const class FString& Value, bool bUpdateEvenIfNotInGameplay, bool bShouldPrintDebugText);
	void AddValueAsIntArrayElem(const struct FGameplayTag& Key, const int32 Value, int32 Index_0, bool bUpdateEvenIfNotInGameplay, bool bShouldPrintDebugText);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AchievementTriggerSender_C">();
	}
	static class UBP_AchievementTriggerSender_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AchievementTriggerSender_C>();
	}
};
static_assert(alignof(UBP_AchievementTriggerSender_C) == 0x000008, "Wrong alignment on UBP_AchievementTriggerSender_C");
static_assert(sizeof(UBP_AchievementTriggerSender_C) == 0x000100, "Wrong size on UBP_AchievementTriggerSender_C");
static_assert(offsetof(UBP_AchievementTriggerSender_C, UberGraphFrame) == 0x0000F0, "Member 'UBP_AchievementTriggerSender_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_AchievementTriggerSender_C, bShouldDisplayDebugString) == 0x0000F8, "Member 'UBP_AchievementTriggerSender_C::bShouldDisplayDebugString' has a wrong offset!");
static_assert(offsetof(UBP_AchievementTriggerSender_C, bIgnore) == 0x0000F9, "Member 'UBP_AchievementTriggerSender_C::bIgnore' has a wrong offset!");

}

