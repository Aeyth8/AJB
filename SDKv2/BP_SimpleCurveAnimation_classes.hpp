#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SimpleCurveAnimation

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SimpleCurveAnimation.BP_SimpleCurveAnimation_C
// 0x0068 (0x02A0 - 0x0238)
class UBP_SimpleCurveAnimation_C final : public USceneComponent
{
public:
	uint8                                         Pad_238[0x8];                                      // 0x0238(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0240(0x0008)(Transient, DuplicateTransient)
	float                                         AnimTime;                                          // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            AnimCurve;                                         // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LerpToRelativeLocation;                            // 0x0258(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LerpToRelativeRotation;                            // 0x0264(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         AnimRate;                                          // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsMirror;                                         // 0x0274(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_275[0x3];                                      // 0x0275(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ReversCurve;                                       // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnStartAnim;                                       // 0x0280(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnFinishAnim;                                      // 0x0290(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void OnStartAnim__DelegateSignature(class UBP_SimpleCurveAnimation_C* AnimComponent, bool bReverse);
	void OnFinishAnim__DelegateSignature(class UBP_SimpleCurveAnimation_C* AnimComponent);
	void ExecuteUbergraph_BP_SimpleCurveAnimation(int32 EntryPoint);
	void ReversAnim();
	void PlayAnim();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UpdateAnimation(float DeltaSecond);
	class UCurveFloat* GetUseAnimCurve();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SimpleCurveAnimation_C">();
	}
	static class UBP_SimpleCurveAnimation_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_SimpleCurveAnimation_C>();
	}
};
static_assert(alignof(UBP_SimpleCurveAnimation_C) == 0x000008, "Wrong alignment on UBP_SimpleCurveAnimation_C");
static_assert(sizeof(UBP_SimpleCurveAnimation_C) == 0x0002A0, "Wrong size on UBP_SimpleCurveAnimation_C");
static_assert(offsetof(UBP_SimpleCurveAnimation_C, UberGraphFrame) == 0x000240, "Member 'UBP_SimpleCurveAnimation_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_SimpleCurveAnimation_C, AnimTime) == 0x000248, "Member 'UBP_SimpleCurveAnimation_C::AnimTime' has a wrong offset!");
static_assert(offsetof(UBP_SimpleCurveAnimation_C, AnimCurve) == 0x000250, "Member 'UBP_SimpleCurveAnimation_C::AnimCurve' has a wrong offset!");
static_assert(offsetof(UBP_SimpleCurveAnimation_C, LerpToRelativeLocation) == 0x000258, "Member 'UBP_SimpleCurveAnimation_C::LerpToRelativeLocation' has a wrong offset!");
static_assert(offsetof(UBP_SimpleCurveAnimation_C, LerpToRelativeRotation) == 0x000264, "Member 'UBP_SimpleCurveAnimation_C::LerpToRelativeRotation' has a wrong offset!");
static_assert(offsetof(UBP_SimpleCurveAnimation_C, AnimRate) == 0x000270, "Member 'UBP_SimpleCurveAnimation_C::AnimRate' has a wrong offset!");
static_assert(offsetof(UBP_SimpleCurveAnimation_C, bIsMirror) == 0x000274, "Member 'UBP_SimpleCurveAnimation_C::bIsMirror' has a wrong offset!");
static_assert(offsetof(UBP_SimpleCurveAnimation_C, ReversCurve) == 0x000278, "Member 'UBP_SimpleCurveAnimation_C::ReversCurve' has a wrong offset!");
static_assert(offsetof(UBP_SimpleCurveAnimation_C, OnStartAnim) == 0x000280, "Member 'UBP_SimpleCurveAnimation_C::OnStartAnim' has a wrong offset!");
static_assert(offsetof(UBP_SimpleCurveAnimation_C, OnFinishAnim) == 0x000290, "Member 'UBP_SimpleCurveAnimation_C::OnFinishAnim' has a wrong offset!");

}

