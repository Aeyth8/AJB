#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_Emote_Select

#include "Basic.hpp"

#include "AJB_structs.hpp"
#include "AJB_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_Emote_Select.WB_Emote_Select_C
// 0x0138 (0x03F8 - 0x02C0)
class UWB_Emote_Select_C final : public UAJBWindowWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(Transient, DuplicateTransient)
	class UWidgetAnimation*                       Anim_FocusLeft;                                    // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_FocusBottom;                                  // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_FocusRight;                                   // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_FocusTop;                                     // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              AJBImage_bottom;                                   // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              AJBImage_Center;                                   // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              AJBImage_left;                                     // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              AJBImage_right;                                    // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              AJBImage_top;                                      // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_EmoteTextLabel_C*                   WB_EmoteTextLabel_Bottom;                          // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_EmoteTextLabel_C*                   WB_EmoteTextLabel_Left;                            // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_EmoteTextLabel_C*                   WB_EmoteTextLabel_Right;                           // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_EmoteTextLabel_C*                   WB_EmoteTextLabel_Top;                             // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        WidgetSwitcher_SelectAngle;                        // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetAnimation*                       CurrentAnimation;                                  // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              NextStickTranslation;                              // 0x0340(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StickSpeed;                                        // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnSelectedEmoteIndex;                              // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ABP_PreLoadEmoteHelper_C*               DebugPreloadEmoteHelper;                           // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UAJBImage*>                      IconImages4;                                       // 0x0368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UWB_EmoteTextLabel_C*>           EmoteTexts4;                                       // 0x0378(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UAnimMontage*>                   AnimMontages4;                                     // 0x0388(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<bool>                                  ExistEmotes4;                                      // 0x0398(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UWidgetAnimation*>               AnimFocus5;                                        // 0x03A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FVector2D>                      NextTranslation5;                                  // 0x03B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                         InputLookupRate;                                   // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputTurnRate;                                     // 0x03CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAJBInputMode                                 PreInputMode;                                      // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUnitTestMode;                                     // 0x03D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D2[0x2];                                      // 0x03D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UnitTestCharacterID;                               // 0x03D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FEmoteData>                     UnitTestEmoteDataList;                             // 0x03D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UMaterialInstanceDynamic*>       DMI_IconImages;                                    // 0x03E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)

public:
	void OnSelectedEmoteIndex__DelegateSignature(int32 EmoteIndex);
	void ExecuteUbergraph_WB_Emote_Select(int32 EntryPoint);
	void FocusDirection(int32 Index_0);
	void Construct();
	void SetDebugPreloadEmoteHelper(int32 CharacterID, const TArray<int32>& LoadEmoteIds);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void OnClosingWindow();
	void OnOpeningWindow();
	void SetupIcon();
	void SetupIconFromIndexInternal(int32 Index_0, const int32 CharacterID, TArray<struct FEmoteData>& Array);
	bool OnInputTurnRate(float Value);
	bool OnInputReleasedUp();
	bool OnInputReleasedTouch();
	bool OnInputReleasedRight();
	bool OnInputReleasedLeft();
	bool OnInputReleasedDown();
	bool OnInputReleasedDecide();
	bool OnInputReleasedCancel();
	bool OnInputPressedUp();
	bool OnInputPressedTouch(const float LocationX, const float LocationY);
	bool OnInputPressedRight();
	bool OnInputPressedLeft();
	bool OnInputPressedDown();
	bool OnInputPressedDecide();
	bool OnInputPressedCancel();
	bool OnInputMoveRight(float Value);
	bool OnInputMoveForward(float Value);
	bool OnInputLookupRate(float Value);
	bool IsModeless();
	bool OnInputReleasedR2();
	bool OnInputReleasedR1();
	bool OnInputReleasedL2();
	bool OnInputReleasedL1();
	bool OnInputPressedR2();
	bool OnInputPressedR1();
	bool OnInputPressedL2();
	bool OnInputPressedL1();
	bool OnInputReleasedL3();
	bool OnInputPressedL3();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_Emote_Select_C">();
	}
	static class UWB_Emote_Select_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_Emote_Select_C>();
	}
};
static_assert(alignof(UWB_Emote_Select_C) == 0x000008, "Wrong alignment on UWB_Emote_Select_C");
static_assert(sizeof(UWB_Emote_Select_C) == 0x0003F8, "Wrong size on UWB_Emote_Select_C");
static_assert(offsetof(UWB_Emote_Select_C, UberGraphFrame) == 0x0002C0, "Member 'UWB_Emote_Select_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_Emote_Select_C, Anim_FocusLeft) == 0x0002C8, "Member 'UWB_Emote_Select_C::Anim_FocusLeft' has a wrong offset!");
static_assert(offsetof(UWB_Emote_Select_C, Anim_FocusBottom) == 0x0002D0, "Member 'UWB_Emote_Select_C::Anim_FocusBottom' has a wrong offset!");
static_assert(offsetof(UWB_Emote_Select_C, Anim_FocusRight) == 0x0002D8, "Member 'UWB_Emote_Select_C::Anim_FocusRight' has a wrong offset!");
static_assert(offsetof(UWB_Emote_Select_C, Anim_FocusTop) == 0x0002E0, "Member 'UWB_Emote_Select_C::Anim_FocusTop' has a wrong offset!");
static_assert(offsetof(UWB_Emote_Select_C, AJBImage_bottom) == 0x0002E8, "Member 'UWB_Emote_Select_C::AJBImage_bottom' has a wrong offset!");
static_assert(offsetof(UWB_Emote_Select_C, AJBImage_Center) == 0x0002F0, "Member 'UWB_Emote_Select_C::AJBImage_Center' has a wrong offset!");
static_assert(offsetof(UWB_Emote_Select_C, AJBImage_left) == 0x0002F8, "Member 'UWB_Emote_Select_C::AJBImage_left' has a wrong offset!");
static_assert(offsetof(UWB_Emote_Select_C, AJBImage_right) == 0x000300, "Member 'UWB_Emote_Select_C::AJBImage_right' has a wrong offset!");
static_assert(offsetof(UWB_Emote_Select_C, AJBImage_top) == 0x000308, "Member 'UWB_Emote_Select_C::AJBImage_top' has a wrong offset!");
static_assert(offsetof(UWB_Emote_Select_C, WB_EmoteTextLabel_Bottom) == 0x000310, "Member 'UWB_Emote_Select_C::WB_EmoteTextLabel_Bottom' has a wrong offset!");
static_assert(offsetof(UWB_Emote_Select_C, WB_EmoteTextLabel_Left) == 0x000318, "Member 'UWB_Emote_Select_C::WB_EmoteTextLabel_Left' has a wrong offset!");
static_assert(offsetof(UWB_Emote_Select_C, WB_EmoteTextLabel_Right) == 0x000320, "Member 'UWB_Emote_Select_C::WB_EmoteTextLabel_Right' has a wrong offset!");
static_assert(offsetof(UWB_Emote_Select_C, WB_EmoteTextLabel_Top) == 0x000328, "Member 'UWB_Emote_Select_C::WB_EmoteTextLabel_Top' has a wrong offset!");
static_assert(offsetof(UWB_Emote_Select_C, WidgetSwitcher_SelectAngle) == 0x000330, "Member 'UWB_Emote_Select_C::WidgetSwitcher_SelectAngle' has a wrong offset!");
static_assert(offsetof(UWB_Emote_Select_C, CurrentAnimation) == 0x000338, "Member 'UWB_Emote_Select_C::CurrentAnimation' has a wrong offset!");
static_assert(offsetof(UWB_Emote_Select_C, NextStickTranslation) == 0x000340, "Member 'UWB_Emote_Select_C::NextStickTranslation' has a wrong offset!");
static_assert(offsetof(UWB_Emote_Select_C, StickSpeed) == 0x000348, "Member 'UWB_Emote_Select_C::StickSpeed' has a wrong offset!");
static_assert(offsetof(UWB_Emote_Select_C, OnSelectedEmoteIndex) == 0x000350, "Member 'UWB_Emote_Select_C::OnSelectedEmoteIndex' has a wrong offset!");
static_assert(offsetof(UWB_Emote_Select_C, DebugPreloadEmoteHelper) == 0x000360, "Member 'UWB_Emote_Select_C::DebugPreloadEmoteHelper' has a wrong offset!");
static_assert(offsetof(UWB_Emote_Select_C, IconImages4) == 0x000368, "Member 'UWB_Emote_Select_C::IconImages4' has a wrong offset!");
static_assert(offsetof(UWB_Emote_Select_C, EmoteTexts4) == 0x000378, "Member 'UWB_Emote_Select_C::EmoteTexts4' has a wrong offset!");
static_assert(offsetof(UWB_Emote_Select_C, AnimMontages4) == 0x000388, "Member 'UWB_Emote_Select_C::AnimMontages4' has a wrong offset!");
static_assert(offsetof(UWB_Emote_Select_C, ExistEmotes4) == 0x000398, "Member 'UWB_Emote_Select_C::ExistEmotes4' has a wrong offset!");
static_assert(offsetof(UWB_Emote_Select_C, AnimFocus5) == 0x0003A8, "Member 'UWB_Emote_Select_C::AnimFocus5' has a wrong offset!");
static_assert(offsetof(UWB_Emote_Select_C, NextTranslation5) == 0x0003B8, "Member 'UWB_Emote_Select_C::NextTranslation5' has a wrong offset!");
static_assert(offsetof(UWB_Emote_Select_C, InputLookupRate) == 0x0003C8, "Member 'UWB_Emote_Select_C::InputLookupRate' has a wrong offset!");
static_assert(offsetof(UWB_Emote_Select_C, InputTurnRate) == 0x0003CC, "Member 'UWB_Emote_Select_C::InputTurnRate' has a wrong offset!");
static_assert(offsetof(UWB_Emote_Select_C, PreInputMode) == 0x0003D0, "Member 'UWB_Emote_Select_C::PreInputMode' has a wrong offset!");
static_assert(offsetof(UWB_Emote_Select_C, bUnitTestMode) == 0x0003D1, "Member 'UWB_Emote_Select_C::bUnitTestMode' has a wrong offset!");
static_assert(offsetof(UWB_Emote_Select_C, UnitTestCharacterID) == 0x0003D4, "Member 'UWB_Emote_Select_C::UnitTestCharacterID' has a wrong offset!");
static_assert(offsetof(UWB_Emote_Select_C, UnitTestEmoteDataList) == 0x0003D8, "Member 'UWB_Emote_Select_C::UnitTestEmoteDataList' has a wrong offset!");
static_assert(offsetof(UWB_Emote_Select_C, DMI_IconImages) == 0x0003E8, "Member 'UWB_Emote_Select_C::DMI_IconImages' has a wrong offset!");

}

