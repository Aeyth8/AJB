#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBZipper_InteractableBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AJB_structs.hpp"


namespace SDK::Params
{

// Function BP_AJBZipper_InteractableBase.BP_AJBZipper_InteractableBase_C.ExecuteUbergraph_BP_AJBZipper_InteractableBase
// 0x0068 (0x0068 - 0x0000)
struct BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsServer_ReturnValue1;                    // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_InteractActor;                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_InteractingActor1;                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_ServerIsInteractingPlayer;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_InteractingActor;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBInGameCharacter*                    K2Node_Event_Operator;                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Time;                                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGeneralTiming                                K2Node_Event_Timing;                               // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bEnable;                              // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bOperatorIsEmpty;                     // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 K2Node_CustomEvent_DestroyingActor;                // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AActor* DestroyingActor)> K2Node_CreateDelegate_OutputDelegate;              // 0x0040(0x0010)(ZeroConstructor, NoDestructor)
	struct FVector                                CallFunc_GetLocationOfInjection_ReturnValue;       // 0x0050(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable1;                              // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase) == 0x000008, "Wrong alignment on BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase");
static_assert(sizeof(BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase) == 0x000068, "Wrong size on BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase, EntryPoint) == 0x000000, "Member 'BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase, Temp_bool_Variable) == 0x000004, "Member 'BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase, CallFunc_IsServer_ReturnValue) == 0x000005, "Member 'BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase::CallFunc_IsServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase, CallFunc_IsServer_ReturnValue1) == 0x000006, "Member 'BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase::CallFunc_IsServer_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase, K2Node_Event_InteractActor) == 0x000008, "Member 'BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase::K2Node_Event_InteractActor' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase, K2Node_Event_InteractingActor1) == 0x000010, "Member 'BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase::K2Node_Event_InteractingActor1' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase, K2Node_Event_ServerIsInteractingPlayer) == 0x000018, "Member 'BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase::K2Node_Event_ServerIsInteractingPlayer' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase, K2Node_Event_InteractingActor) == 0x000020, "Member 'BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase::K2Node_Event_InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase, K2Node_Event_Operator) == 0x000028, "Member 'BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase::K2Node_Event_Operator' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase, K2Node_Event_Time) == 0x000030, "Member 'BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase::K2Node_Event_Time' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase, K2Node_Event_Timing) == 0x000034, "Member 'BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase::K2Node_Event_Timing' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase, K2Node_Event_bEnable) == 0x000035, "Member 'BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase::K2Node_Event_bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase, K2Node_Event_bOperatorIsEmpty) == 0x000036, "Member 'BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase::K2Node_Event_bOperatorIsEmpty' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase, CallFunc_Not_PreBool_ReturnValue) == 0x000037, "Member 'BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase, K2Node_CustomEvent_DestroyingActor) == 0x000038, "Member 'BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase::K2Node_CustomEvent_DestroyingActor' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase, K2Node_CreateDelegate_OutputDelegate) == 0x000040, "Member 'BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase, CallFunc_GetLocationOfInjection_ReturnValue) == 0x000050, "Member 'BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase::CallFunc_GetLocationOfInjection_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase, Temp_float_Variable) == 0x00005C, "Member 'BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase, Temp_float_Variable1) == 0x000060, "Member 'BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase::Temp_float_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase, K2Node_Select_Default) == 0x000064, "Member 'BP_AJBZipper_InteractableBase_C_ExecuteUbergraph_BP_AJBZipper_InteractableBase::K2Node_Select_Default' has a wrong offset!");

// Function BP_AJBZipper_InteractableBase.BP_AJBZipper_InteractableBase_C.OnLifeTimeElapsed
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBZipper_InteractableBase_C_OnLifeTimeElapsed final
{
public:
	class AActor*                                 DestroyingActor;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBZipper_InteractableBase_C_OnLifeTimeElapsed) == 0x000008, "Wrong alignment on BP_AJBZipper_InteractableBase_C_OnLifeTimeElapsed");
static_assert(sizeof(BP_AJBZipper_InteractableBase_C_OnLifeTimeElapsed) == 0x000008, "Wrong size on BP_AJBZipper_InteractableBase_C_OnLifeTimeElapsed");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_OnLifeTimeElapsed, DestroyingActor) == 0x000000, "Member 'BP_AJBZipper_InteractableBase_C_OnLifeTimeElapsed::DestroyingActor' has a wrong offset!");

// Function BP_AJBZipper_InteractableBase.BP_AJBZipper_InteractableBase_C.NotifyTheWorld
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBZipper_InteractableBase_C_NotifyTheWorld final
{
public:
	class AAJBInGameCharacter*                    Operator;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGeneralTiming                                Timing;                                            // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnable;                                           // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bOperatorIsEmpty;                                  // 0x000E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBZipper_InteractableBase_C_NotifyTheWorld) == 0x000008, "Wrong alignment on BP_AJBZipper_InteractableBase_C_NotifyTheWorld");
static_assert(sizeof(BP_AJBZipper_InteractableBase_C_NotifyTheWorld) == 0x000010, "Wrong size on BP_AJBZipper_InteractableBase_C_NotifyTheWorld");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_NotifyTheWorld, Operator) == 0x000000, "Member 'BP_AJBZipper_InteractableBase_C_NotifyTheWorld::Operator' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_NotifyTheWorld, Time) == 0x000008, "Member 'BP_AJBZipper_InteractableBase_C_NotifyTheWorld::Time' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_NotifyTheWorld, Timing) == 0x00000C, "Member 'BP_AJBZipper_InteractableBase_C_NotifyTheWorld::Timing' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_NotifyTheWorld, bEnable) == 0x00000D, "Member 'BP_AJBZipper_InteractableBase_C_NotifyTheWorld::bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_NotifyTheWorld, bOperatorIsEmpty) == 0x00000E, "Member 'BP_AJBZipper_InteractableBase_C_NotifyTheWorld::bOperatorIsEmpty' has a wrong offset!");

// Function BP_AJBZipper_InteractableBase.BP_AJBZipper_InteractableBase_C.OnInteractionBlocked
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBZipper_InteractableBase_C_OnInteractionBlocked final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBZipper_InteractableBase_C_OnInteractionBlocked) == 0x000008, "Wrong alignment on BP_AJBZipper_InteractableBase_C_OnInteractionBlocked");
static_assert(sizeof(BP_AJBZipper_InteractableBase_C_OnInteractionBlocked) == 0x000008, "Wrong size on BP_AJBZipper_InteractableBase_C_OnInteractionBlocked");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_OnInteractionBlocked, InteractingActor) == 0x000000, "Member 'BP_AJBZipper_InteractableBase_C_OnInteractionBlocked::InteractingActor' has a wrong offset!");

// Function BP_AJBZipper_InteractableBase.BP_AJBZipper_InteractableBase_C.OnROSInteract
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBZipper_InteractableBase_C_OnROSInteract final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ServerIsInteractingPlayer;                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBZipper_InteractableBase_C_OnROSInteract) == 0x000008, "Wrong alignment on BP_AJBZipper_InteractableBase_C_OnROSInteract");
static_assert(sizeof(BP_AJBZipper_InteractableBase_C_OnROSInteract) == 0x000010, "Wrong size on BP_AJBZipper_InteractableBase_C_OnROSInteract");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_OnROSInteract, InteractingActor) == 0x000000, "Member 'BP_AJBZipper_InteractableBase_C_OnROSInteract::InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_OnROSInteract, ServerIsInteractingPlayer) == 0x000008, "Member 'BP_AJBZipper_InteractableBase_C_OnROSInteract::ServerIsInteractingPlayer' has a wrong offset!");

// Function BP_AJBZipper_InteractableBase.BP_AJBZipper_InteractableBase_C.OnInteract
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBZipper_InteractableBase_C_OnInteract final
{
public:
	class AActor*                                 InteractActor;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBZipper_InteractableBase_C_OnInteract) == 0x000008, "Wrong alignment on BP_AJBZipper_InteractableBase_C_OnInteract");
static_assert(sizeof(BP_AJBZipper_InteractableBase_C_OnInteract) == 0x000008, "Wrong size on BP_AJBZipper_InteractableBase_C_OnInteract");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_OnInteract, InteractActor) == 0x000000, "Member 'BP_AJBZipper_InteractableBase_C_OnInteract::InteractActor' has a wrong offset!");

// Function BP_AJBZipper_InteractableBase.BP_AJBZipper_InteractableBase_C.GetLocationOfInjection
// 0x0048 (0x0048 - 0x0000)
struct BP_AJBZipper_InteractableBase_C_GetLocationOfInjection final
{
public:
	class UStaticMeshComponent*                   Mesh;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0014(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0020(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x002C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0038(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBZipper_InteractableBase_C_GetLocationOfInjection) == 0x000008, "Wrong alignment on BP_AJBZipper_InteractableBase_C_GetLocationOfInjection");
static_assert(sizeof(BP_AJBZipper_InteractableBase_C_GetLocationOfInjection) == 0x000048, "Wrong size on BP_AJBZipper_InteractableBase_C_GetLocationOfInjection");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_GetLocationOfInjection, Mesh) == 0x000000, "Member 'BP_AJBZipper_InteractableBase_C_GetLocationOfInjection::Mesh' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_GetLocationOfInjection, ReturnValue) == 0x000008, "Member 'BP_AJBZipper_InteractableBase_C_GetLocationOfInjection::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_GetLocationOfInjection, CallFunc_GetForwardVector_ReturnValue) == 0x000014, "Member 'BP_AJBZipper_InteractableBase_C_GetLocationOfInjection::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_GetLocationOfInjection, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000020, "Member 'BP_AJBZipper_InteractableBase_C_GetLocationOfInjection::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_GetLocationOfInjection, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00002C, "Member 'BP_AJBZipper_InteractableBase_C_GetLocationOfInjection::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_GetLocationOfInjection, CallFunc_Add_VectorVector_ReturnValue) == 0x000038, "Member 'BP_AJBZipper_InteractableBase_C_GetLocationOfInjection::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function BP_AJBZipper_InteractableBase.BP_AJBZipper_InteractableBase_C.Interactable
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBZipper_InteractableBase_C_Interactable final
{
public:
	class ABP_AJBInGameCharacter_C*               Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceLength;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBZipper_InteractableBase_C_Interactable) == 0x000008, "Wrong alignment on BP_AJBZipper_InteractableBase_C_Interactable");
static_assert(sizeof(BP_AJBZipper_InteractableBase_C_Interactable) == 0x000010, "Wrong size on BP_AJBZipper_InteractableBase_C_Interactable");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_Interactable, Character) == 0x000000, "Member 'BP_AJBZipper_InteractableBase_C_Interactable::Character' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_Interactable, TraceLength) == 0x000008, "Member 'BP_AJBZipper_InteractableBase_C_Interactable::TraceLength' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_Interactable, ReturnValue) == 0x00000C, "Member 'BP_AJBZipper_InteractableBase_C_Interactable::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_Interactable, CallFunc_Not_PreBool_ReturnValue) == 0x00000D, "Member 'BP_AJBZipper_InteractableBase_C_Interactable::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_Interactable, CallFunc_BooleanAND_ReturnValue) == 0x00000E, "Member 'BP_AJBZipper_InteractableBase_C_Interactable::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_AJBZipper_InteractableBase.BP_AJBZipper_InteractableBase_C.InteractInstantly
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBZipper_InteractableBase_C_InteractInstantly final
{
public:
	class ABP_AJBInGameCharacter_C*               Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBZipper_InteractableBase_C_InteractInstantly) == 0x000008, "Wrong alignment on BP_AJBZipper_InteractableBase_C_InteractInstantly");
static_assert(sizeof(BP_AJBZipper_InteractableBase_C_InteractInstantly) == 0x000010, "Wrong size on BP_AJBZipper_InteractableBase_C_InteractInstantly");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_InteractInstantly, Character) == 0x000000, "Member 'BP_AJBZipper_InteractableBase_C_InteractInstantly::Character' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_InteractInstantly, ReturnValue) == 0x000008, "Member 'BP_AJBZipper_InteractableBase_C_InteractInstantly::ReturnValue' has a wrong offset!");

// Function BP_AJBZipper_InteractableBase.BP_AJBZipper_InteractableBase_C.TryGetInteractableText
// 0x0028 (0x0028 - 0x0000)
struct BP_AJBZipper_InteractableBase_C_TryGetInteractableText final
{
public:
	class ABP_AJBInGameCharacter_C*               OperatorCharacter;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   InteractMessage;                                   // 0x0010(0x0018)(Parm, OutParm)
};
static_assert(alignof(BP_AJBZipper_InteractableBase_C_TryGetInteractableText) == 0x000008, "Wrong alignment on BP_AJBZipper_InteractableBase_C_TryGetInteractableText");
static_assert(sizeof(BP_AJBZipper_InteractableBase_C_TryGetInteractableText) == 0x000028, "Wrong size on BP_AJBZipper_InteractableBase_C_TryGetInteractableText");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_TryGetInteractableText, OperatorCharacter) == 0x000000, "Member 'BP_AJBZipper_InteractableBase_C_TryGetInteractableText::OperatorCharacter' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_TryGetInteractableText, bSuccess) == 0x000008, "Member 'BP_AJBZipper_InteractableBase_C_TryGetInteractableText::bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_TryGetInteractableText, InteractMessage) == 0x000010, "Member 'BP_AJBZipper_InteractableBase_C_TryGetInteractableText::InteractMessage' has a wrong offset!");

// Function BP_AJBZipper_InteractableBase.BP_AJBZipper_InteractableBase_C.CheckErrorCondition
// 0x0002 (0x0002 - 0x0000)
struct BP_AJBZipper_InteractableBase_C_CheckErrorCondition final
{
public:
	bool                                          bErrorCondition;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         ErrorType;                                         // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBZipper_InteractableBase_C_CheckErrorCondition) == 0x000001, "Wrong alignment on BP_AJBZipper_InteractableBase_C_CheckErrorCondition");
static_assert(sizeof(BP_AJBZipper_InteractableBase_C_CheckErrorCondition) == 0x000002, "Wrong size on BP_AJBZipper_InteractableBase_C_CheckErrorCondition");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_CheckErrorCondition, bErrorCondition) == 0x000000, "Member 'BP_AJBZipper_InteractableBase_C_CheckErrorCondition::bErrorCondition' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_CheckErrorCondition, ErrorType) == 0x000001, "Member 'BP_AJBZipper_InteractableBase_C_CheckErrorCondition::ErrorType' has a wrong offset!");

// Function BP_AJBZipper_InteractableBase.BP_AJBZipper_InteractableBase_C.OnLocalInteract
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBZipper_InteractableBase_C_OnLocalInteract final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBZipper_InteractableBase_C_OnLocalInteract) == 0x000008, "Wrong alignment on BP_AJBZipper_InteractableBase_C_OnLocalInteract");
static_assert(sizeof(BP_AJBZipper_InteractableBase_C_OnLocalInteract) == 0x000010, "Wrong size on BP_AJBZipper_InteractableBase_C_OnLocalInteract");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_OnLocalInteract, InteractingActor) == 0x000000, "Member 'BP_AJBZipper_InteractableBase_C_OnLocalInteract::InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_OnLocalInteract, bSuccess) == 0x000008, "Member 'BP_AJBZipper_InteractableBase_C_OnLocalInteract::bSuccess' has a wrong offset!");

// Function BP_AJBZipper_InteractableBase.BP_AJBZipper_InteractableBase_C.GetInteractState
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBZipper_InteractableBase_C_GetInteractState final
{
public:
	uint8                                         InteractState;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBZipper_InteractableBase_C_GetInteractState) == 0x000001, "Wrong alignment on BP_AJBZipper_InteractableBase_C_GetInteractState");
static_assert(sizeof(BP_AJBZipper_InteractableBase_C_GetInteractState) == 0x000001, "Wrong size on BP_AJBZipper_InteractableBase_C_GetInteractState");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_GetInteractState, InteractState) == 0x000000, "Member 'BP_AJBZipper_InteractableBase_C_GetInteractState::InteractState' has a wrong offset!");

// Function BP_AJBZipper_InteractableBase.BP_AJBZipper_InteractableBase_C.GetInteractPriority
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBZipper_InteractableBase_C_GetInteractPriority final
{
public:
	int32                                         Priority;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBZipper_InteractableBase_C_GetInteractPriority) == 0x000004, "Wrong alignment on BP_AJBZipper_InteractableBase_C_GetInteractPriority");
static_assert(sizeof(BP_AJBZipper_InteractableBase_C_GetInteractPriority) == 0x000004, "Wrong size on BP_AJBZipper_InteractableBase_C_GetInteractPriority");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_GetInteractPriority, Priority) == 0x000000, "Member 'BP_AJBZipper_InteractableBase_C_GetInteractPriority::Priority' has a wrong offset!");

// Function BP_AJBZipper_InteractableBase.BP_AJBZipper_InteractableBase_C.GetInteractBoundForCulling
// 0x0038 (0x0038 - 0x0000)
struct BP_AJBZipper_InteractableBase_C_GetInteractBoundForCulling final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Center;                                            // 0x0008(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_Origin;                // 0x0018(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_BoxExtent;             // 0x0024(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetComponentBounds_SphereRadius;          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBZipper_InteractableBase_C_GetInteractBoundForCulling) == 0x000008, "Wrong alignment on BP_AJBZipper_InteractableBase_C_GetInteractBoundForCulling");
static_assert(sizeof(BP_AJBZipper_InteractableBase_C_GetInteractBoundForCulling) == 0x000038, "Wrong size on BP_AJBZipper_InteractableBase_C_GetInteractBoundForCulling");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_GetInteractBoundForCulling, InteractingActor) == 0x000000, "Member 'BP_AJBZipper_InteractableBase_C_GetInteractBoundForCulling::InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_GetInteractBoundForCulling, Center) == 0x000008, "Member 'BP_AJBZipper_InteractableBase_C_GetInteractBoundForCulling::Center' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_GetInteractBoundForCulling, Radius) == 0x000014, "Member 'BP_AJBZipper_InteractableBase_C_GetInteractBoundForCulling::Radius' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_GetInteractBoundForCulling, CallFunc_GetComponentBounds_Origin) == 0x000018, "Member 'BP_AJBZipper_InteractableBase_C_GetInteractBoundForCulling::CallFunc_GetComponentBounds_Origin' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_GetInteractBoundForCulling, CallFunc_GetComponentBounds_BoxExtent) == 0x000024, "Member 'BP_AJBZipper_InteractableBase_C_GetInteractBoundForCulling::CallFunc_GetComponentBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_GetInteractBoundForCulling, CallFunc_GetComponentBounds_SphereRadius) == 0x000030, "Member 'BP_AJBZipper_InteractableBase_C_GetInteractBoundForCulling::CallFunc_GetComponentBounds_SphereRadius' has a wrong offset!");

// Function BP_AJBZipper_InteractableBase.BP_AJBZipper_InteractableBase_C.IfNeedsExclusiveInteractStrictly
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBZipper_InteractableBase_C_IfNeedsExclusiveInteractStrictly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBZipper_InteractableBase_C_IfNeedsExclusiveInteractStrictly) == 0x000001, "Wrong alignment on BP_AJBZipper_InteractableBase_C_IfNeedsExclusiveInteractStrictly");
static_assert(sizeof(BP_AJBZipper_InteractableBase_C_IfNeedsExclusiveInteractStrictly) == 0x000001, "Wrong size on BP_AJBZipper_InteractableBase_C_IfNeedsExclusiveInteractStrictly");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_IfNeedsExclusiveInteractStrictly, ReturnValue) == 0x000000, "Member 'BP_AJBZipper_InteractableBase_C_IfNeedsExclusiveInteractStrictly::ReturnValue' has a wrong offset!");

// Function BP_AJBZipper_InteractableBase.BP_AJBZipper_InteractableBase_C.IfBlockInteract
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBZipper_InteractableBase_C_IfBlockInteract final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBZipper_InteractableBase_C_IfBlockInteract) == 0x000008, "Wrong alignment on BP_AJBZipper_InteractableBase_C_IfBlockInteract");
static_assert(sizeof(BP_AJBZipper_InteractableBase_C_IfBlockInteract) == 0x000010, "Wrong size on BP_AJBZipper_InteractableBase_C_IfBlockInteract");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_IfBlockInteract, InteractingActor) == 0x000000, "Member 'BP_AJBZipper_InteractableBase_C_IfBlockInteract::InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_IfBlockInteract, ReturnValue) == 0x000008, "Member 'BP_AJBZipper_InteractableBase_C_IfBlockInteract::ReturnValue' has a wrong offset!");

// Function BP_AJBZipper_InteractableBase.BP_AJBZipper_InteractableBase_C.ShouldPrioritizedThanPrepaidSkillCancel
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBZipper_InteractableBase_C_ShouldPrioritizedThanPrepaidSkillCancel final
{
public:
	bool                                          bShouldPriorirized;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBZipper_InteractableBase_C_ShouldPrioritizedThanPrepaidSkillCancel) == 0x000001, "Wrong alignment on BP_AJBZipper_InteractableBase_C_ShouldPrioritizedThanPrepaidSkillCancel");
static_assert(sizeof(BP_AJBZipper_InteractableBase_C_ShouldPrioritizedThanPrepaidSkillCancel) == 0x000001, "Wrong size on BP_AJBZipper_InteractableBase_C_ShouldPrioritizedThanPrepaidSkillCancel");
static_assert(offsetof(BP_AJBZipper_InteractableBase_C_ShouldPrioritizedThanPrepaidSkillCancel, bShouldPriorirized) == 0x000000, "Member 'BP_AJBZipper_InteractableBase_C_ShouldPrioritizedThanPrepaidSkillCancel::bShouldPriorirized' has a wrong offset!");

}

