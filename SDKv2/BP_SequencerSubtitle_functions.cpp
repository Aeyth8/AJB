#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SequencerSubtitle

#include "Basic.hpp"

#include "BP_SequencerSubtitle_classes.hpp"
#include "BP_SequencerSubtitle_parameters.hpp"


namespace SDK
{

// Function BP_SequencerSubtitle.BP_SequencerSubtitle_C.ExecuteUbergraph_BP_SequencerSubtitle
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SequencerSubtitle_C::ExecuteUbergraph_BP_SequencerSubtitle(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SequencerSubtitle_C", "ExecuteUbergraph_BP_SequencerSubtitle");

	Params::BP_SequencerSubtitle_C_ExecuteUbergraph_BP_SequencerSubtitle Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SequencerSubtitle.BP_SequencerSubtitle_C.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SequencerSubtitle_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SequencerSubtitle_C", "ReceiveEndPlay");

	Params::BP_SequencerSubtitle_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SequencerSubtitle.BP_SequencerSubtitle_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_SequencerSubtitle_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SequencerSubtitle_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SequencerSubtitle.BP_SequencerSubtitle_C.SkipTrack
// (BlueprintCallable, BlueprintEvent)

void ABP_SequencerSubtitle_C::SkipTrack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SequencerSubtitle_C", "SkipTrack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SequencerSubtitle.BP_SequencerSubtitle_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_SequencerSubtitle_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SequencerSubtitle_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SequencerSubtitle.BP_SequencerSubtitle_C.Parse
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FString                           Source                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           ParsedTxt                                              (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void ABP_SequencerSubtitle_C::Parse(const class FString& Source, class FString* ParsedTxt) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SequencerSubtitle_C", "Parse");

	Params::BP_SequencerSubtitle_C_Parse Parms{};

	Parms.Source = std::move(Source);

	UObject::ProcessEvent(Func, &Parms);

	if (ParsedTxt != nullptr)
		*ParsedTxt = std::move(Parms.ParsedTxt);
}

}

