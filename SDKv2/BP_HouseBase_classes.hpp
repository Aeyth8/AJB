#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HouseBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HouseBase.BP_HouseBase_C
// 0x0048 (0x0370 - 0x0328)
class ABP_HouseBase_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(Transient, DuplicateTransient)
	class USceneComponent*                        SharedRoot;                                        // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstance*>              Materials_Roof;                                    // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UMaterialInstance*>              Materials_OutsideWall;                             // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	class UMaterialInstance*                      TempMT_OutsideWall;                                // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      TempMT_Roof;                                       // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          RandomSeed;                                        // 0x0368(0x0008)(Edit, BlueprintVisible, NoDestructor)

public:
	void ExecuteUbergraph_BP_HouseBase(int32 EntryPoint);
	void ChangeColor();
	void ChangeColor_Seed(int32 NewSeed);
	void CloseAllDoor();
	void Multicast_CloseAllDoor();
	void RunOnServer_CloseAllDoor();
	void RunOnServer_SpawnEnhancementItem();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HouseBase_C">();
	}
	static class ABP_HouseBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HouseBase_C>();
	}
};
static_assert(alignof(ABP_HouseBase_C) == 0x000008, "Wrong alignment on ABP_HouseBase_C");
static_assert(sizeof(ABP_HouseBase_C) == 0x000370, "Wrong size on ABP_HouseBase_C");
static_assert(offsetof(ABP_HouseBase_C, UberGraphFrame) == 0x000328, "Member 'ABP_HouseBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_HouseBase_C, SharedRoot) == 0x000330, "Member 'ABP_HouseBase_C::SharedRoot' has a wrong offset!");
static_assert(offsetof(ABP_HouseBase_C, Materials_Roof) == 0x000338, "Member 'ABP_HouseBase_C::Materials_Roof' has a wrong offset!");
static_assert(offsetof(ABP_HouseBase_C, Materials_OutsideWall) == 0x000348, "Member 'ABP_HouseBase_C::Materials_OutsideWall' has a wrong offset!");
static_assert(offsetof(ABP_HouseBase_C, TempMT_OutsideWall) == 0x000358, "Member 'ABP_HouseBase_C::TempMT_OutsideWall' has a wrong offset!");
static_assert(offsetof(ABP_HouseBase_C, TempMT_Roof) == 0x000360, "Member 'ABP_HouseBase_C::TempMT_Roof' has a wrong offset!");
static_assert(offsetof(ABP_HouseBase_C, RandomSeed) == 0x000368, "Member 'ABP_HouseBase_C::RandomSeed' has a wrong offset!");

}

