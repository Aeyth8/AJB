#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_LimitedAchievement_ProgressBar

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AJB_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_LimitedAchievement_ProgressBar.WB_LimitedAchievement_ProgressBar_C
// 0x00B8 (0x02C0 - 0x0208)
class UWB_LimitedAchievement_ProgressBar_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0208(0x0008)(Transient, DuplicateTransient)
	class UWidgetAnimation*                       Anim_ProgressComplete;                             // 0x0210(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpacer*                                BarAnimDummy;                                      // 0x0218(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          CompleteText;                                      // 0x0220(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          CurrentAndMaxExp;                                  // 0x0228(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ExpBar;                                            // 0x0230(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          GameScore;                                         // 0x0238(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          Name_0;                                            // 0x0240(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          RewardName;                                        // 0x0248(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FAJBAchievementInfo                    Info;                                              // 0x0250(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance)
	UMulticastDelegateProperty_                   OnFinishedAnimDispatcher;                          // 0x0288(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         CurrentValue;                                      // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetValue;                                       // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentTime;                                       // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSetup;                                            // 0x02A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bStartAnimation;                                   // 0x02A5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCompAnimation;                                    // 0x02A6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A7[0x1];                                      // 0x02A7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BarAnimationTime;                                  // 0x02A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AC[0x4];                                      // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           LastCreateAkComponent;                             // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPlayCompAnimation;                                // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void OnFinishedAnimDispatcher__DelegateSignature();
	void ExecuteUbergraph_WB_LimitedAchievement_ProgressBar(int32 EntryPoint);
	void UpdateStopCountupSE();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UpdatePlayCountupSE();
	void OnForceFinishAnimation();
	void SetupDisplay(const struct FAJBAchievementInfo& TargetInfo);
	void UpdateCurrentValue(int32 Value);
	void UpdateBar(float Value);
	void PlayCompAnim();
	void StartPlayBarAnimation();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_LimitedAchievement_ProgressBar_C">();
	}
	static class UWB_LimitedAchievement_ProgressBar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_LimitedAchievement_ProgressBar_C>();
	}
};
static_assert(alignof(UWB_LimitedAchievement_ProgressBar_C) == 0x000008, "Wrong alignment on UWB_LimitedAchievement_ProgressBar_C");
static_assert(sizeof(UWB_LimitedAchievement_ProgressBar_C) == 0x0002C0, "Wrong size on UWB_LimitedAchievement_ProgressBar_C");
static_assert(offsetof(UWB_LimitedAchievement_ProgressBar_C, UberGraphFrame) == 0x000208, "Member 'UWB_LimitedAchievement_ProgressBar_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_LimitedAchievement_ProgressBar_C, Anim_ProgressComplete) == 0x000210, "Member 'UWB_LimitedAchievement_ProgressBar_C::Anim_ProgressComplete' has a wrong offset!");
static_assert(offsetof(UWB_LimitedAchievement_ProgressBar_C, BarAnimDummy) == 0x000218, "Member 'UWB_LimitedAchievement_ProgressBar_C::BarAnimDummy' has a wrong offset!");
static_assert(offsetof(UWB_LimitedAchievement_ProgressBar_C, CompleteText) == 0x000220, "Member 'UWB_LimitedAchievement_ProgressBar_C::CompleteText' has a wrong offset!");
static_assert(offsetof(UWB_LimitedAchievement_ProgressBar_C, CurrentAndMaxExp) == 0x000228, "Member 'UWB_LimitedAchievement_ProgressBar_C::CurrentAndMaxExp' has a wrong offset!");
static_assert(offsetof(UWB_LimitedAchievement_ProgressBar_C, ExpBar) == 0x000230, "Member 'UWB_LimitedAchievement_ProgressBar_C::ExpBar' has a wrong offset!");
static_assert(offsetof(UWB_LimitedAchievement_ProgressBar_C, GameScore) == 0x000238, "Member 'UWB_LimitedAchievement_ProgressBar_C::GameScore' has a wrong offset!");
static_assert(offsetof(UWB_LimitedAchievement_ProgressBar_C, Name_0) == 0x000240, "Member 'UWB_LimitedAchievement_ProgressBar_C::Name_0' has a wrong offset!");
static_assert(offsetof(UWB_LimitedAchievement_ProgressBar_C, RewardName) == 0x000248, "Member 'UWB_LimitedAchievement_ProgressBar_C::RewardName' has a wrong offset!");
static_assert(offsetof(UWB_LimitedAchievement_ProgressBar_C, Info) == 0x000250, "Member 'UWB_LimitedAchievement_ProgressBar_C::Info' has a wrong offset!");
static_assert(offsetof(UWB_LimitedAchievement_ProgressBar_C, OnFinishedAnimDispatcher) == 0x000288, "Member 'UWB_LimitedAchievement_ProgressBar_C::OnFinishedAnimDispatcher' has a wrong offset!");
static_assert(offsetof(UWB_LimitedAchievement_ProgressBar_C, CurrentValue) == 0x000298, "Member 'UWB_LimitedAchievement_ProgressBar_C::CurrentValue' has a wrong offset!");
static_assert(offsetof(UWB_LimitedAchievement_ProgressBar_C, TargetValue) == 0x00029C, "Member 'UWB_LimitedAchievement_ProgressBar_C::TargetValue' has a wrong offset!");
static_assert(offsetof(UWB_LimitedAchievement_ProgressBar_C, CurrentTime) == 0x0002A0, "Member 'UWB_LimitedAchievement_ProgressBar_C::CurrentTime' has a wrong offset!");
static_assert(offsetof(UWB_LimitedAchievement_ProgressBar_C, bSetup) == 0x0002A4, "Member 'UWB_LimitedAchievement_ProgressBar_C::bSetup' has a wrong offset!");
static_assert(offsetof(UWB_LimitedAchievement_ProgressBar_C, bStartAnimation) == 0x0002A5, "Member 'UWB_LimitedAchievement_ProgressBar_C::bStartAnimation' has a wrong offset!");
static_assert(offsetof(UWB_LimitedAchievement_ProgressBar_C, bCompAnimation) == 0x0002A6, "Member 'UWB_LimitedAchievement_ProgressBar_C::bCompAnimation' has a wrong offset!");
static_assert(offsetof(UWB_LimitedAchievement_ProgressBar_C, BarAnimationTime) == 0x0002A8, "Member 'UWB_LimitedAchievement_ProgressBar_C::BarAnimationTime' has a wrong offset!");
static_assert(offsetof(UWB_LimitedAchievement_ProgressBar_C, LastCreateAkComponent) == 0x0002B0, "Member 'UWB_LimitedAchievement_ProgressBar_C::LastCreateAkComponent' has a wrong offset!");
static_assert(offsetof(UWB_LimitedAchievement_ProgressBar_C, bPlayCompAnimation) == 0x0002B8, "Member 'UWB_LimitedAchievement_ProgressBar_C::bPlayCompAnimation' has a wrong offset!");

}

