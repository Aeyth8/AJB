#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_ModeSelectButtonBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AJB_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_ModeSelectButtonBase.WB_ModeSelectButtonBase_C
// 0x0060 (0x0300 - 0x02A0)
class UWB_ModeSelectButtonBase_C : public UAJBButtonWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(Transient, DuplicateTransient)
	class UMaterialInstanceDynamic*               DMI_Aura;                                          // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DMI_RetainerEffect;                                // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAuraActivating;                                   // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B9[0x3];                                      // 0x02B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AuraValue;                                         // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AuraInterpSpeed;                                   // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableSelect;                                     // 0x02C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bForceDisableSelect;                               // 0x02C5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C6[0x2];                                      // 0x02C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DefaultNeedPP;                                     // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NeedPP;                                            // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNoNeedPPOnCompetitionMode;                        // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D1[0x3];                                      // 0x02D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EnableSelectRecheckIntervalSec;                    // 0x02D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   UnselectReason;                                    // 0x02D8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly)
	class USoundBase*                             UnselectWarningSound;                              // 0x02F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDecidedButton;                                    // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEnableCreateFocusLineEffect;                      // 0x02F9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bPreviousEnableSelect;                             // 0x02FA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsPlayConfirmSE;                                  // 0x02FB(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_WB_ModeSelectButtonBase(int32 EntryPoint);
	void ForceUpdateEnableSelect();
	void HidePPDisplay();
	void BeginUpdateAura();
	void Construct();
	void OnDecidedButtonEvent(class UAJBButtonWidget* OwnerWidget, class UAJBButton* TargetButton);
	void ResetPressAndReleaseAnimation();
	void SetNeedPP(int32 NeedPP_0);
	void OnClosingParentWindow();
	void OnOpeningParentWindow();
	void PreConstruct(bool IsDesignTime);
	void SetEnableSelect(bool bSelectable);
	void OnButtonReleasedAnimation();
	void OnButtonPressedAnimation();
	class FString LeftPadCh(const class FString& SourceString, int32 ChCount, const class FString& PadCh);
	void TryGetNextMatchableDateText(const struct FDateTime& Date, const struct FDateTime& EndDate, const struct FMatchScheduleTimeInfo& StartTime, const struct FMatchScheduleTimeInfo& EndTime, bool* bSuccess, class FText* Result);
	void IsEnableSelect(bool* bEnable);
	void IsButtonDecisioning(bool* IsDecisioning);
	void IsBonusUpPeriod(bool* bBonusUp);

	void GetAuraImage(class UImage** AuraImage) const;
	void IsHavingNeedPP(bool* HaveNeedPP) const;
	void ASCNumChr2JISNumChr(const class FString& ASCNum, class FString* JISNum) const;
	void ASCNumStr2JISNumStr(const class FString& ASCNum, class FString* JISNum) const;
	void GetRetainerEffectMaterial(class UMaterialInstanceDynamic** EffectMaterial) const;
	void GetButtonCenterPosition(struct FVector2D* ScreenPosition) const;
	bool IsPressableVisibility() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_ModeSelectButtonBase_C">();
	}
	static class UWB_ModeSelectButtonBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_ModeSelectButtonBase_C>();
	}
};
static_assert(alignof(UWB_ModeSelectButtonBase_C) == 0x000008, "Wrong alignment on UWB_ModeSelectButtonBase_C");
static_assert(sizeof(UWB_ModeSelectButtonBase_C) == 0x000300, "Wrong size on UWB_ModeSelectButtonBase_C");
static_assert(offsetof(UWB_ModeSelectButtonBase_C, UberGraphFrame) == 0x0002A0, "Member 'UWB_ModeSelectButtonBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_ModeSelectButtonBase_C, DMI_Aura) == 0x0002A8, "Member 'UWB_ModeSelectButtonBase_C::DMI_Aura' has a wrong offset!");
static_assert(offsetof(UWB_ModeSelectButtonBase_C, DMI_RetainerEffect) == 0x0002B0, "Member 'UWB_ModeSelectButtonBase_C::DMI_RetainerEffect' has a wrong offset!");
static_assert(offsetof(UWB_ModeSelectButtonBase_C, bAuraActivating) == 0x0002B8, "Member 'UWB_ModeSelectButtonBase_C::bAuraActivating' has a wrong offset!");
static_assert(offsetof(UWB_ModeSelectButtonBase_C, AuraValue) == 0x0002BC, "Member 'UWB_ModeSelectButtonBase_C::AuraValue' has a wrong offset!");
static_assert(offsetof(UWB_ModeSelectButtonBase_C, AuraInterpSpeed) == 0x0002C0, "Member 'UWB_ModeSelectButtonBase_C::AuraInterpSpeed' has a wrong offset!");
static_assert(offsetof(UWB_ModeSelectButtonBase_C, bEnableSelect) == 0x0002C4, "Member 'UWB_ModeSelectButtonBase_C::bEnableSelect' has a wrong offset!");
static_assert(offsetof(UWB_ModeSelectButtonBase_C, bForceDisableSelect) == 0x0002C5, "Member 'UWB_ModeSelectButtonBase_C::bForceDisableSelect' has a wrong offset!");
static_assert(offsetof(UWB_ModeSelectButtonBase_C, DefaultNeedPP) == 0x0002C8, "Member 'UWB_ModeSelectButtonBase_C::DefaultNeedPP' has a wrong offset!");
static_assert(offsetof(UWB_ModeSelectButtonBase_C, NeedPP) == 0x0002CC, "Member 'UWB_ModeSelectButtonBase_C::NeedPP' has a wrong offset!");
static_assert(offsetof(UWB_ModeSelectButtonBase_C, bNoNeedPPOnCompetitionMode) == 0x0002D0, "Member 'UWB_ModeSelectButtonBase_C::bNoNeedPPOnCompetitionMode' has a wrong offset!");
static_assert(offsetof(UWB_ModeSelectButtonBase_C, EnableSelectRecheckIntervalSec) == 0x0002D4, "Member 'UWB_ModeSelectButtonBase_C::EnableSelectRecheckIntervalSec' has a wrong offset!");
static_assert(offsetof(UWB_ModeSelectButtonBase_C, UnselectReason) == 0x0002D8, "Member 'UWB_ModeSelectButtonBase_C::UnselectReason' has a wrong offset!");
static_assert(offsetof(UWB_ModeSelectButtonBase_C, UnselectWarningSound) == 0x0002F0, "Member 'UWB_ModeSelectButtonBase_C::UnselectWarningSound' has a wrong offset!");
static_assert(offsetof(UWB_ModeSelectButtonBase_C, bDecidedButton) == 0x0002F8, "Member 'UWB_ModeSelectButtonBase_C::bDecidedButton' has a wrong offset!");
static_assert(offsetof(UWB_ModeSelectButtonBase_C, bEnableCreateFocusLineEffect) == 0x0002F9, "Member 'UWB_ModeSelectButtonBase_C::bEnableCreateFocusLineEffect' has a wrong offset!");
static_assert(offsetof(UWB_ModeSelectButtonBase_C, bPreviousEnableSelect) == 0x0002FA, "Member 'UWB_ModeSelectButtonBase_C::bPreviousEnableSelect' has a wrong offset!");
static_assert(offsetof(UWB_ModeSelectButtonBase_C, bIsPlayConfirmSE) == 0x0002FB, "Member 'UWB_ModeSelectButtonBase_C::bIsPlayConfirmSE' has a wrong offset!");

}

