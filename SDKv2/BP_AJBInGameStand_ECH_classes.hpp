#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameStand_ECH

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AJB_structs.hpp"
#include "BP_AJBInGameStand_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBInGameStand_ECH.BP_AJBInGameStand_ECH_C
// 0x0088 (0x0558 - 0x04D0)
class ABP_AJBInGameStand_ECH_C final : public ABP_AJBInGameStand_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBInGameStand_ECH_C;            // 0x04D0(0x0008)(Transient, DuplicateTransient)
	class UParticleSystemComponent*               Tail_a_09;                                         // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Tail_a_01;                                         // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               R_UpperArm;                                        // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               L_UpperArm;                                        // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Spine;                                             // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Head;                                              // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       ThreeFreeze_Attack;                                // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ShotPoint;                                         // 0x0510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       MiddleRange_Attack;                                // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_LaunchPart_C*                       Rep_LaunchPart;                                    // 0x0520(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangedNewOperation;                               // 0x0528(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EECHState                                     ACT;                                               // 0x0529(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52A[0x6];                                      // 0x052A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          ACT1Mesh;                                          // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          ACT2Mesh;                                          // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          ACT3Mesh;                                          // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             ACT1Materials;                                     // 0x0548(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_AJBInGameStand_ECH(int32 EntryPoint);
	void ChangeAct_Local(EECHState ACT_0);
	void MC_Change(EECHState ACT_0);
	void ROS_Change(EECHState ACT_0);
	void ChangeAct(EECHState NewACT, bool bForce);
	void OnReady();
	void OnReturn();
	void OnLaunch();
	void OnCompleted_AE5112D74E9B95EC4A8998BF9C53585E(class FName NotifyName);
	void OnBlendOut_AE5112D74E9B95EC4A8998BF9C53585E(class FName NotifyName);
	void OnInterrupted_AE5112D74E9B95EC4A8998BF9C53585E(class FName NotifyName);
	void OnNotifyBegin_AE5112D74E9B95EC4A8998BF9C53585E(class FName NotifyName);
	void OnNotifyEnd_AE5112D74E9B95EC4A8998BF9C53585E(class FName NotifyName);
	void OnCompleted_E707BD7D424D88E2F60E5E8E708E45E5(class FName NotifyName);
	void OnBlendOut_E707BD7D424D88E2F60E5E8E708E45E5(class FName NotifyName);
	void OnInterrupted_E707BD7D424D88E2F60E5E8E708E45E5(class FName NotifyName);
	void OnNotifyBegin_E707BD7D424D88E2F60E5E8E708E45E5(class FName NotifyName);
	void OnNotifyEnd_E707BD7D424D88E2F60E5E8E708E45E5(class FName NotifyName);
	void SetActMeshAndMaterial(EECHState ACT_0);
	void GetLaunchedActorHomeLocation(int32 CloseRangeSkillNo, struct FVector* Location);
	void GetCloseRangeLaunchedActor(int32 CloseRangeSkillNo, class AActor** LaunchedActor);
	void GetAttackRange(int32 CloseRangeSkillNo, float* AttackRange);
	void GetAttackCollisionRadius(int32 CloseRangeSkillNo, float* Radius);
	void GetAttackLocation(const struct FVector& TargetLocation, struct FVector* Location);
	void GetStandAttackOffset(int32 CloseRangeSkillNo, struct FVector* StandAttackOffset);
	void ShouldShowNGPoint(bool* bResult);
	void GetShutTraceRadius(float* Radius);
	void GetShotLocation(bool bConsiderCharacterCapsuleRadius, const struct FGameplayTag& SkillTag, TArray<struct FVector>* Locations);
	void CheckLocallyControlled(bool* bLocallyControlled);
	void GetDummyShotLocation(struct FVector* Location);
	void CleanUp(bool bShouldDestroy);
	void PlayAppearMontage();
	void StandSetup();
	void GetDamageActorTargetLocation(struct FVector* Location);
	void UserConstructionScript();
	void SpawnAccompanyEmitter(EStandAccompanyTransition AccompanyTransition);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBInGameStand_ECH_C">();
	}
	static class ABP_AJBInGameStand_ECH_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBInGameStand_ECH_C>();
	}
};
static_assert(alignof(ABP_AJBInGameStand_ECH_C) == 0x000008, "Wrong alignment on ABP_AJBInGameStand_ECH_C");
static_assert(sizeof(ABP_AJBInGameStand_ECH_C) == 0x000558, "Wrong size on ABP_AJBInGameStand_ECH_C");
static_assert(offsetof(ABP_AJBInGameStand_ECH_C, UberGraphFrame_BP_AJBInGameStand_ECH_C) == 0x0004D0, "Member 'ABP_AJBInGameStand_ECH_C::UberGraphFrame_BP_AJBInGameStand_ECH_C' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_ECH_C, Tail_a_09) == 0x0004D8, "Member 'ABP_AJBInGameStand_ECH_C::Tail_a_09' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_ECH_C, Tail_a_01) == 0x0004E0, "Member 'ABP_AJBInGameStand_ECH_C::Tail_a_01' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_ECH_C, R_UpperArm) == 0x0004E8, "Member 'ABP_AJBInGameStand_ECH_C::R_UpperArm' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_ECH_C, L_UpperArm) == 0x0004F0, "Member 'ABP_AJBInGameStand_ECH_C::L_UpperArm' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_ECH_C, Spine) == 0x0004F8, "Member 'ABP_AJBInGameStand_ECH_C::Spine' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_ECH_C, Head) == 0x000500, "Member 'ABP_AJBInGameStand_ECH_C::Head' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_ECH_C, ThreeFreeze_Attack) == 0x000508, "Member 'ABP_AJBInGameStand_ECH_C::ThreeFreeze_Attack' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_ECH_C, ShotPoint) == 0x000510, "Member 'ABP_AJBInGameStand_ECH_C::ShotPoint' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_ECH_C, MiddleRange_Attack) == 0x000518, "Member 'ABP_AJBInGameStand_ECH_C::MiddleRange_Attack' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_ECH_C, Rep_LaunchPart) == 0x000520, "Member 'ABP_AJBInGameStand_ECH_C::Rep_LaunchPart' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_ECH_C, ChangedNewOperation) == 0x000528, "Member 'ABP_AJBInGameStand_ECH_C::ChangedNewOperation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_ECH_C, ACT) == 0x000529, "Member 'ABP_AJBInGameStand_ECH_C::ACT' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_ECH_C, ACT1Mesh) == 0x000530, "Member 'ABP_AJBInGameStand_ECH_C::ACT1Mesh' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_ECH_C, ACT2Mesh) == 0x000538, "Member 'ABP_AJBInGameStand_ECH_C::ACT2Mesh' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_ECH_C, ACT3Mesh) == 0x000540, "Member 'ABP_AJBInGameStand_ECH_C::ACT3Mesh' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_ECH_C, ACT1Materials) == 0x000548, "Member 'ABP_AJBInGameStand_ECH_C::ACT1Materials' has a wrong offset!");

}

