#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBDamageImpulseBase

#include "Basic.hpp"

#include "BP_AJBDamageImpulseBase_classes.hpp"
#include "BP_AJBDamageImpulseBase_parameters.hpp"


namespace SDK
{

// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.ExecuteUbergraph_BP_AJBDamageImpulseBase
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBDamageImpulseBase_C::ExecuteUbergraph_BP_AJBDamageImpulseBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "ExecuteUbergraph_BP_AJBDamageImpulseBase");

	Params::BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBDamageImpulseBase_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "ReceiveEndPlay");

	Params::BP_AJBDamageImpulseBase_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.Cancel_Server
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBDamageImpulseBase_C::Cancel_Server()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "Cancel_Server");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.ROC_AttackResult
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   KillNum                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBDamageImpulseBase_C::ROC_AttackResult(int32 KillNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "ROC_AttackResult");

	Params::BP_AJBDamageImpulseBase_C_ROC_AttackResult Parms{};

	Parms.KillNum = KillNum;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.MC_AttackHit
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_AJBDamageImpulseBase_C::MC_AttackHit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "MC_AttackHit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.MC_SpawnInvisibleParticle
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBDamageImpulseBase_C::MC_SpawnInvisibleParticle(class AActor* TargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "MC_SpawnInvisibleParticle");

	Params::BP_AJBDamageImpulseBase_C_MC_SpawnInvisibleParticle Parms{};

	Parms.TargetActor = TargetActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.DamageProcess
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBDamageImpulseBase_C::DamageProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "DamageProcess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBDamageImpulseBase_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "ReceiveTick");

	Params::BP_AJBDamageImpulseBase_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_AJBDamageImpulseBase_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.OnBeginState_Active_All
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBDamageImpulseBase_C::OnBeginState_Active_All()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "OnBeginState_Active_All");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.MC_OnBeginState_Ready
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_AJBDamageImpulseBase_C::MC_OnBeginState_Ready()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "MC_OnBeginState_Ready");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.MC_OnBeginState_Active
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_AJBDamageImpulseBase_C::MC_OnBeginState_Active()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "MC_OnBeginState_Active");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.TickState_Active
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBDamageImpulseBase_C::TickState_Active(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "TickState_Active");

	Params::BP_AJBDamageImpulseBase_C_TickState_Active Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.OnStateEnd
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBDamageImpulseBase_C::OnStateEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "OnStateEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.StateTick
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBDamageImpulseBase_C::StateTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "StateTick");

	Params::BP_AJBDamageImpulseBase_C_StateTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.TickState_Clearing
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBDamageImpulseBase_C::TickState_Clearing(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "TickState_Clearing");

	Params::BP_AJBDamageImpulseBase_C_TickState_Clearing Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.TickState_Ready
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBDamageImpulseBase_C::TickState_Ready(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "TickState_Ready");

	Params::BP_AJBDamageImpulseBase_C_TickState_Ready Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.OnBeginState_Clearing
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBDamageImpulseBase_C::OnBeginState_Clearing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "OnBeginState_Clearing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.OnBeginState_Active
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBDamageImpulseBase_C::OnBeginState_Active()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "OnBeginState_Active");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.OnBeginState_Ready
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBDamageImpulseBase_C::OnBeginState_Ready()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "OnBeginState_Ready");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.NotifyTheWorld
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAJBInGameCharacter*              Operator                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EGeneralTiming                          Timing                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bOperatorIsEmpty                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBDamageImpulseBase_C::NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "NotifyTheWorld");

	Params::BP_AJBDamageImpulseBase_C_NotifyTheWorld Parms{};

	Parms.Operator = Operator;
	Parms.Time = Time;
	Parms.Timing = Timing;
	Parms.bEnable = bEnable;
	Parms.bOperatorIsEmpty = bOperatorIsEmpty;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBDamageImpulseBase_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.GetAttackDistance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           DamagedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AttackDistance                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBDamageImpulseBase_C::GetAttackDistance(class AActor* DamagedActor, float* AttackDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "GetAttackDistance");

	Params::BP_AJBDamageImpulseBase_C_GetAttackDistance Parms{};

	Parms.DamagedActor = DamagedActor;

	UObject::ProcessEvent(Func, &Parms);

	if (AttackDistance != nullptr)
		*AttackDistance = Parms.AttackDistance;
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.ChangeState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EDamageImpulseState                     NewState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBDamageImpulseBase_C::ChangeState(EDamageImpulseState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "ChangeState");

	Params::BP_AJBDamageImpulseBase_C_ChangeState Parms{};

	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.CalcDamage
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamagedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Damage                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBDamageImpulseBase_C::CalcDamage(class AActor* DamagedActor, int32* Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "CalcDamage");

	Params::BP_AJBDamageImpulseBase_C_CalcDamage Parms{};

	Parms.DamagedActor = DamagedActor;

	UObject::ProcessEvent(Func, &Parms);

	if (Damage != nullptr)
		*Damage = Parms.Damage;
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.CheckInRange
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamagedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bInRange                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBDamageImpulseBase_C::CheckInRange(class AActor* DamagedActor, bool* bInRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "CheckInRange");

	Params::BP_AJBDamageImpulseBase_C_CheckInRange Parms{};

	Parms.DamagedActor = DamagedActor;

	UObject::ProcessEvent(Func, &Parms);

	if (bInRange != nullptr)
		*bInRange = Parms.bInRange;
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.EnableDamageOverlap
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBDamageImpulseBase_C::EnableDamageOverlap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "EnableDamageOverlap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.DamageProcessCore
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamagedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bNoDamage                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bRemainHP                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBDamageImpulseBase_C::DamageProcessCore(class AActor* DamagedActor, class AActor* DamageCauser, bool bNoDamage, bool* bRemainHP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "DamageProcessCore");

	Params::BP_AJBDamageImpulseBase_C_DamageProcessCore Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.DamageCauser = DamageCauser;
	Parms.bNoDamage = bNoDamage;

	UObject::ProcessEvent(Func, &Parms);

	if (bRemainHP != nullptr)
		*bRemainHP = Parms.bRemainHP;
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.ShouldAddDamage
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamagedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bShouldAddDamage                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBDamageImpulseBase_C::ShouldAddDamage(class AActor* DamagedActor, class AActor* DamageCauser, bool* bShouldAddDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "ShouldAddDamage");

	Params::BP_AJBDamageImpulseBase_C_ShouldAddDamage Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);

	if (bShouldAddDamage != nullptr)
		*bShouldAddDamage = Parms.bShouldAddDamage;
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.ShouldAddPassive
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamagedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bShouldAddPassive                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBDamageImpulseBase_C::ShouldAddPassive(class AActor* DamagedActor, class AActor* DamageCauser, bool* bShouldAddPassive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "ShouldAddPassive");

	Params::BP_AJBDamageImpulseBase_C_ShouldAddPassive Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);

	if (bShouldAddPassive != nullptr)
		*bShouldAddPassive = Parms.bShouldAddPassive;
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.TryToSpeakAttackResultVoice
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   KillNum                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBDamageImpulseBase_C::TryToSpeakAttackResultVoice(int32 KillNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "TryToSpeakAttackResultVoice");

	Params::BP_AJBDamageImpulseBase_C_TryToSpeakAttackResultVoice Parms{};

	Parms.KillNum = KillNum;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.RequestImpulseGion
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_AJBDamageImpulseBase_C::RequestImpulseGion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "RequestImpulseGion");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.TryDestroyReadyParticle
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBDamageImpulseBase_C::TryDestroyReadyParticle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "TryDestroyReadyParticle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.SettingCollisionSize
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_AJBDamageImpulseBase_C::SettingCollisionSize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "SettingCollisionSize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.GetCollisionComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UPrimitiveComponent*              CollisionComponent                                     (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBDamageImpulseBase_C::GetCollisionComponent(class UPrimitiveComponent** CollisionComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "GetCollisionComponent");

	Params::BP_AJBDamageImpulseBase_C_GetCollisionComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CollisionComponent != nullptr)
		*CollisionComponent = Parms.CollisionComponent;
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.CheckDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamagedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bNoDamage                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBDamageImpulseBase_C::CheckDamage(class AActor* DamagedActor, class AActor* DamageCauser, bool* bNoDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "CheckDamage");

	Params::BP_AJBDamageImpulseBase_C_CheckDamage Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);

	if (bNoDamage != nullptr)
		*bNoDamage = Parms.bNoDamage;
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.RequestActiveParticle
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_AJBDamageImpulseBase_C::RequestActiveParticle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "RequestActiveParticle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.GetPoliticPassiveTagOnDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           DamagedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     PassiveTagOnDamage_0                                   (Parm, OutParm, NoDestructor, HasGetValueTypeHash)

void ABP_AJBDamageImpulseBase_C::GetPoliticPassiveTagOnDamage(class AActor* DamagedActor, struct FGameplayTag* PassiveTagOnDamage_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "GetPoliticPassiveTagOnDamage");

	Params::BP_AJBDamageImpulseBase_C_GetPoliticPassiveTagOnDamage Parms{};

	Parms.DamagedActor = DamagedActor;

	UObject::ProcessEvent(Func, &Parms);

	if (PassiveTagOnDamage_0 != nullptr)
		*PassiveTagOnDamage_0 = std::move(Parms.PassiveTagOnDamage_0);
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.ShouldDamageOverlap
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamagedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bShouldOverlap                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBDamageImpulseBase_C::ShouldDamageOverlap(class AActor* DamagedActor, class AActor* DamageCauser, bool* bShouldOverlap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "ShouldDamageOverlap");

	Params::BP_AJBDamageImpulseBase_C_ShouldDamageOverlap Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);

	if (bShouldOverlap != nullptr)
		*bShouldOverlap = Parms.bShouldOverlap;
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.GetCauserOwnerCharacterBP
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_AJBInGameCharacter_C*         CharacterBP                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBDamageImpulseBase_C::GetCauserOwnerCharacterBP(class ABP_AJBInGameCharacter_C** CharacterBP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "GetCauserOwnerCharacterBP");

	Params::BP_AJBDamageImpulseBase_C_GetCauserOwnerCharacterBP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CharacterBP != nullptr)
		*CharacterBP = Parms.CharacterBP;
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.GetPassiveSkillTag
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     PassiveSkillTag                                        (Parm, OutParm, NoDestructor, HasGetValueTypeHash)

void ABP_AJBDamageImpulseBase_C::GetPassiveSkillTag(struct FGameplayTag* PassiveSkillTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "GetPassiveSkillTag");

	Params::BP_AJBDamageImpulseBase_C_GetPassiveSkillTag Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PassiveSkillTag != nullptr)
		*PassiveSkillTag = std::move(Parms.PassiveSkillTag);
}


// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.GetDuration
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Duration                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBDamageImpulseBase_C::GetDuration(float* Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageImpulseBase_C", "GetDuration");

	Params::BP_AJBDamageImpulseBase_C_GetDuration Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Duration != nullptr)
		*Duration = Parms.Duration;
}

}

