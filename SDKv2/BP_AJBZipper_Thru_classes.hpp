#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBZipper_Thru

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_AJBZipper_InteractableBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBZipper_Thru.BP_AJBZipper_Thru_C
// 0x0068 (0x0430 - 0x03C8)
class ABP_AJBZipper_Thru_C final : public ABP_AJBZipper_InteractableBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBZipper_Thru_C;                // 0x03C8(0x0008)(Transient, DuplicateTransient)
	class UStaticMeshComponent*                   SM_ZipperPlane_2;                                  // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_ZipperPlane_1;                                  // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        Decal1;                                            // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        EmitterSpawnPoint_Origin;                          // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        EmitterSpawnPoint_Counterpart;                     // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          InteractTriggerCounterpart;                        // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMeshCounterpart;                             // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          bRep_Interacted;                                   // 0x0408(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDisplayDebugInfo;                                 // 0x0409(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_40A[0x2];                                      // 0x040A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Rep_SecondLocation;                                // 0x040C(0x000C)(Edit, BlueprintVisible, Net, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                Rep_LocationOfInjectionCounterpart;                // 0x0418(0x000C)(Edit, BlueprintVisible, Net, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                Rep_LocationOfInjectionOrigin;                     // 0x0424(0x000C)(Edit, BlueprintVisible, Net, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBZipper_Thru(int32 EntryPoint);
	void OnInteractionBlocked(class AActor* InteractingActor);
	void OnROSInteract(class AActor* InteractingActor, bool ServerIsInteractingPlayer);
	void MC_CloseAndDestroy();
	void ServerNotifyOnExit(bool bOriginToCounterpart);
	void ServerNotifyOnEnter(bool bOriginToCounterpart);
	void MC_ShowExitEffect(bool bOriginToCounterpart);
	void MC_ShowEnterEffect(bool bOriginToCounterpart);
	void FitInteractTriggers();
	bool Interactable(class ABP_AJBInGameCharacter_C* Character, float TraceLength);
	void TryGetInteractableText(class ABP_AJBInGameCharacter_C* OperatorCharacter, bool* bSuccess, class FText* InteractMessage);
	bool IfEnteringOriginToCounterpart(class AActor* Actor);
	void AdjustLocationOfInjection(bool bAdjustOrigin, int32 TrialNum, float InInteractionBuffer, bool* bFound, struct FVector* Location);
	void OnLocalInteract(class AActor* InteractingActor, bool* bSuccess);
	bool IfNeedsExclusiveInteractStrictly();
	void GetInteractBoundForCulling(class AActor* InteractingActor, struct FVector* Center, float* Radius);
	bool IfBlockInteract(class AActor* InteractingActor);
	void ReceiveBeginPlay();
	void ShouldPrioritizedThanPrepaidSkillCancel(bool* bShouldPriorirized);
	struct FVector NormalOfEntrance(bool bOriginToCounterpart);
	struct FVector LocationExitTo(bool bOriginToCounterpart);
	struct FVector LocationExitFrom(bool bOriginToCounterpart);
	struct FVector LocationEnterTo(bool bOriginToCounterpart);
	struct FVector LocationEnterFrom(class ABP_AJBInGameCharacter_C* Character, bool bOriginToCounterpart);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBZipper_Thru_C">();
	}
	static class ABP_AJBZipper_Thru_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBZipper_Thru_C>();
	}
};
static_assert(alignof(ABP_AJBZipper_Thru_C) == 0x000008, "Wrong alignment on ABP_AJBZipper_Thru_C");
static_assert(sizeof(ABP_AJBZipper_Thru_C) == 0x000430, "Wrong size on ABP_AJBZipper_Thru_C");
static_assert(offsetof(ABP_AJBZipper_Thru_C, UberGraphFrame_BP_AJBZipper_Thru_C) == 0x0003C8, "Member 'ABP_AJBZipper_Thru_C::UberGraphFrame_BP_AJBZipper_Thru_C' has a wrong offset!");
static_assert(offsetof(ABP_AJBZipper_Thru_C, SM_ZipperPlane_2) == 0x0003D0, "Member 'ABP_AJBZipper_Thru_C::SM_ZipperPlane_2' has a wrong offset!");
static_assert(offsetof(ABP_AJBZipper_Thru_C, SM_ZipperPlane_1) == 0x0003D8, "Member 'ABP_AJBZipper_Thru_C::SM_ZipperPlane_1' has a wrong offset!");
static_assert(offsetof(ABP_AJBZipper_Thru_C, Decal1) == 0x0003E0, "Member 'ABP_AJBZipper_Thru_C::Decal1' has a wrong offset!");
static_assert(offsetof(ABP_AJBZipper_Thru_C, EmitterSpawnPoint_Origin) == 0x0003E8, "Member 'ABP_AJBZipper_Thru_C::EmitterSpawnPoint_Origin' has a wrong offset!");
static_assert(offsetof(ABP_AJBZipper_Thru_C, EmitterSpawnPoint_Counterpart) == 0x0003F0, "Member 'ABP_AJBZipper_Thru_C::EmitterSpawnPoint_Counterpart' has a wrong offset!");
static_assert(offsetof(ABP_AJBZipper_Thru_C, InteractTriggerCounterpart) == 0x0003F8, "Member 'ABP_AJBZipper_Thru_C::InteractTriggerCounterpart' has a wrong offset!");
static_assert(offsetof(ABP_AJBZipper_Thru_C, StaticMeshCounterpart) == 0x000400, "Member 'ABP_AJBZipper_Thru_C::StaticMeshCounterpart' has a wrong offset!");
static_assert(offsetof(ABP_AJBZipper_Thru_C, bRep_Interacted) == 0x000408, "Member 'ABP_AJBZipper_Thru_C::bRep_Interacted' has a wrong offset!");
static_assert(offsetof(ABP_AJBZipper_Thru_C, bDisplayDebugInfo) == 0x000409, "Member 'ABP_AJBZipper_Thru_C::bDisplayDebugInfo' has a wrong offset!");
static_assert(offsetof(ABP_AJBZipper_Thru_C, Rep_SecondLocation) == 0x00040C, "Member 'ABP_AJBZipper_Thru_C::Rep_SecondLocation' has a wrong offset!");
static_assert(offsetof(ABP_AJBZipper_Thru_C, Rep_LocationOfInjectionCounterpart) == 0x000418, "Member 'ABP_AJBZipper_Thru_C::Rep_LocationOfInjectionCounterpart' has a wrong offset!");
static_assert(offsetof(ABP_AJBZipper_Thru_C, Rep_LocationOfInjectionOrigin) == 0x000424, "Member 'ABP_AJBZipper_Thru_C::Rep_LocationOfInjectionOrigin' has a wrong offset!");

}

