#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BI_AdditionalAP

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function BI_AdditionalAP.BI_AdditionalAP_C.GetValue
// 0x0004 (0x0004 - 0x0000)
struct BI_AdditionalAP_C_GetValue final
{
public:
	int32                                         AAPValue;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BI_AdditionalAP_C_GetValue) == 0x000004, "Wrong alignment on BI_AdditionalAP_C_GetValue");
static_assert(sizeof(BI_AdditionalAP_C_GetValue) == 0x000004, "Wrong size on BI_AdditionalAP_C_GetValue");
static_assert(offsetof(BI_AdditionalAP_C_GetValue, AAPValue) == 0x000000, "Member 'BI_AdditionalAP_C_GetValue::AAPValue' has a wrong offset!");

// Function BI_AdditionalAP.BI_AdditionalAP_C.Consume
// 0x0010 (0x0010 - 0x0000)
struct BI_AdditionalAP_C_Consume final
{
public:
	int32                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LeftDamage;                                        // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BeforeValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AfterValue;                                        // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BI_AdditionalAP_C_Consume) == 0x000004, "Wrong alignment on BI_AdditionalAP_C_Consume");
static_assert(sizeof(BI_AdditionalAP_C_Consume) == 0x000010, "Wrong size on BI_AdditionalAP_C_Consume");
static_assert(offsetof(BI_AdditionalAP_C_Consume, Damage) == 0x000000, "Member 'BI_AdditionalAP_C_Consume::Damage' has a wrong offset!");
static_assert(offsetof(BI_AdditionalAP_C_Consume, LeftDamage) == 0x000004, "Member 'BI_AdditionalAP_C_Consume::LeftDamage' has a wrong offset!");
static_assert(offsetof(BI_AdditionalAP_C_Consume, BeforeValue) == 0x000008, "Member 'BI_AdditionalAP_C_Consume::BeforeValue' has a wrong offset!");
static_assert(offsetof(BI_AdditionalAP_C_Consume, AfterValue) == 0x00000C, "Member 'BI_AdditionalAP_C_Consume::AfterValue' has a wrong offset!");

// Function BI_AdditionalAP.BI_AdditionalAP_C.GetValueMax
// 0x0004 (0x0004 - 0x0000)
struct BI_AdditionalAP_C_GetValueMax final
{
public:
	int32                                         AAPValueMax;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BI_AdditionalAP_C_GetValueMax) == 0x000004, "Wrong alignment on BI_AdditionalAP_C_GetValueMax");
static_assert(sizeof(BI_AdditionalAP_C_GetValueMax) == 0x000004, "Wrong size on BI_AdditionalAP_C_GetValueMax");
static_assert(offsetof(BI_AdditionalAP_C_GetValueMax, AAPValueMax) == 0x000000, "Member 'BI_AdditionalAP_C_GetValueMax::AAPValueMax' has a wrong offset!");

// Function BI_AdditionalAP.BI_AdditionalAP_C.OnConsumed
// 0x0008 (0x0008 - 0x0000)
struct BI_AdditionalAP_C_OnConsumed final
{
public:
	int32                                         BeforeValue;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AfterValue;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BI_AdditionalAP_C_OnConsumed) == 0x000004, "Wrong alignment on BI_AdditionalAP_C_OnConsumed");
static_assert(sizeof(BI_AdditionalAP_C_OnConsumed) == 0x000008, "Wrong size on BI_AdditionalAP_C_OnConsumed");
static_assert(offsetof(BI_AdditionalAP_C_OnConsumed, BeforeValue) == 0x000000, "Member 'BI_AdditionalAP_C_OnConsumed::BeforeValue' has a wrong offset!");
static_assert(offsetof(BI_AdditionalAP_C_OnConsumed, AfterValue) == 0x000004, "Member 'BI_AdditionalAP_C_OnConsumed::AfterValue' has a wrong offset!");

// Function BI_AdditionalAP.BI_AdditionalAP_C.GetParticleTagBlocked
// 0x0008 (0x0008 - 0x0000)
struct BI_AdditionalAP_C_GetParticleTagBlocked final
{
public:
	struct FGameplayTag                           ParticleTag;                                       // 0x0000(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BI_AdditionalAP_C_GetParticleTagBlocked) == 0x000008, "Wrong alignment on BI_AdditionalAP_C_GetParticleTagBlocked");
static_assert(sizeof(BI_AdditionalAP_C_GetParticleTagBlocked) == 0x000008, "Wrong size on BI_AdditionalAP_C_GetParticleTagBlocked");
static_assert(offsetof(BI_AdditionalAP_C_GetParticleTagBlocked, ParticleTag) == 0x000000, "Member 'BI_AdditionalAP_C_GetParticleTagBlocked::ParticleTag' has a wrong offset!");

// Function BI_AdditionalAP.BI_AdditionalAP_C.AddValue
// 0x0010 (0x0010 - 0x0000)
struct BI_AdditionalAP_C_AddValue final
{
public:
	int32                                         Point;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Causer;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BI_AdditionalAP_C_AddValue) == 0x000008, "Wrong alignment on BI_AdditionalAP_C_AddValue");
static_assert(sizeof(BI_AdditionalAP_C_AddValue) == 0x000010, "Wrong size on BI_AdditionalAP_C_AddValue");
static_assert(offsetof(BI_AdditionalAP_C_AddValue, Point) == 0x000000, "Member 'BI_AdditionalAP_C_AddValue::Point' has a wrong offset!");
static_assert(offsetof(BI_AdditionalAP_C_AddValue, Causer) == 0x000008, "Member 'BI_AdditionalAP_C_AddValue::Causer' has a wrong offset!");

// Function BI_AdditionalAP.BI_AdditionalAP_C.GetSETagBlocked
// 0x0008 (0x0008 - 0x0000)
struct BI_AdditionalAP_C_GetSETagBlocked final
{
public:
	struct FGameplayTag                           SETag;                                             // 0x0000(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BI_AdditionalAP_C_GetSETagBlocked) == 0x000008, "Wrong alignment on BI_AdditionalAP_C_GetSETagBlocked");
static_assert(sizeof(BI_AdditionalAP_C_GetSETagBlocked) == 0x000008, "Wrong size on BI_AdditionalAP_C_GetSETagBlocked");
static_assert(offsetof(BI_AdditionalAP_C_GetSETagBlocked, SETag) == 0x000000, "Member 'BI_AdditionalAP_C_GetSETagBlocked::SETag' has a wrong offset!");

// Function BI_AdditionalAP.BI_AdditionalAP_C.ConsumeSimulated
// 0x0010 (0x0010 - 0x0000)
struct BI_AdditionalAP_C_ConsumeSimulated final
{
public:
	int32                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LeftDamage;                                        // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BeforeValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AfterValue;                                        // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BI_AdditionalAP_C_ConsumeSimulated) == 0x000004, "Wrong alignment on BI_AdditionalAP_C_ConsumeSimulated");
static_assert(sizeof(BI_AdditionalAP_C_ConsumeSimulated) == 0x000010, "Wrong size on BI_AdditionalAP_C_ConsumeSimulated");
static_assert(offsetof(BI_AdditionalAP_C_ConsumeSimulated, Damage) == 0x000000, "Member 'BI_AdditionalAP_C_ConsumeSimulated::Damage' has a wrong offset!");
static_assert(offsetof(BI_AdditionalAP_C_ConsumeSimulated, LeftDamage) == 0x000004, "Member 'BI_AdditionalAP_C_ConsumeSimulated::LeftDamage' has a wrong offset!");
static_assert(offsetof(BI_AdditionalAP_C_ConsumeSimulated, BeforeValue) == 0x000008, "Member 'BI_AdditionalAP_C_ConsumeSimulated::BeforeValue' has a wrong offset!");
static_assert(offsetof(BI_AdditionalAP_C_ConsumeSimulated, AfterValue) == 0x00000C, "Member 'BI_AdditionalAP_C_ConsumeSimulated::AfterValue' has a wrong offset!");

// Function BI_AdditionalAP.BI_AdditionalAP_C.ChangeParticleVisibility
// 0x0001 (0x0001 - 0x0000)
struct BI_AdditionalAP_C_ChangeParticleVisibility final
{
public:
	bool                                          NewVisibility;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_AdditionalAP_C_ChangeParticleVisibility) == 0x000001, "Wrong alignment on BI_AdditionalAP_C_ChangeParticleVisibility");
static_assert(sizeof(BI_AdditionalAP_C_ChangeParticleVisibility) == 0x000001, "Wrong size on BI_AdditionalAP_C_ChangeParticleVisibility");
static_assert(offsetof(BI_AdditionalAP_C_ChangeParticleVisibility, NewVisibility) == 0x000000, "Member 'BI_AdditionalAP_C_ChangeParticleVisibility::NewVisibility' has a wrong offset!");

}

