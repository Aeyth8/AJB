#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameMiniMapMaterialController

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBInGameMiniMapMaterialController.BP_AJBInGameMiniMapMaterialController_C
// 0x0078 (0x03A0 - 0x0328)
class ABP_AJBInGameMiniMapMaterialController_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(Transient, DuplicateTransient)
	class UTextRenderComponent*                   TextRender1;                                       // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TextRender;                                        // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               SceneCaptureComponent2D;                           // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          CaptureRangePreviewBox;                            // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         CaptureWidth;                                      // 0x0360(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MapScale;                                          // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBUIMapManager_C*                  CachedMapManager;                                  // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CurrentPlayerIconPosition;                         // 0x0370(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentPlayerIconAngle;                            // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CurrentPairIconPosition;                           // 0x037C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentPairIconAngle;                              // 0x0384(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsExistPair;                                      // 0x0388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bSetPairIcon;                                      // 0x0389(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_38A[0x6];                                      // 0x038A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGamePlayerController*             CachedInGamePlayerController;                      // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 RenderTargetTexture;                               // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBInGameMiniMapMaterialController(int32 EntryPoint);
	void SetInvisiblePairIcon();
	void SetPairIconInfo(const struct FVector2D& NormalizedPosition, float IconAngle, int32 PairHP);
	void SetPlayerIconInfo(const struct FVector2D& NormalizedPosition, float IconAngle);
	void CaptureMap();
	void OpenTickGate();
	void OnConstructSetupCapture();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	struct FLinearColor LocationToMaterialUVPositionCenter(const struct FVector& Location);
	struct FLinearColor LocationToMiniMapRelativePosition(const struct FVector& TargetLocation, const struct FVector& PlayerLocation);
	float RadiusToMaterialUVRadius(float A);
	struct FLinearColor LocationToMaterialUVPosition(const struct FVector& Location);
	void CalcRelativeTransfrom(const struct FVector& InLocation, struct FVector* Location);
	void GetTargetActor(class AActor** TargetActor);
	struct FTransform GetCharacterTransformforMapCenter(class AActor* TargetActor);
	void GetUIMapManager(class ABP_AJBUIMapManager_C** UIMapManager);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBInGameMiniMapMaterialController_C">();
	}
	static class ABP_AJBInGameMiniMapMaterialController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBInGameMiniMapMaterialController_C>();
	}
};
static_assert(alignof(ABP_AJBInGameMiniMapMaterialController_C) == 0x000008, "Wrong alignment on ABP_AJBInGameMiniMapMaterialController_C");
static_assert(sizeof(ABP_AJBInGameMiniMapMaterialController_C) == 0x0003A0, "Wrong size on ABP_AJBInGameMiniMapMaterialController_C");
static_assert(offsetof(ABP_AJBInGameMiniMapMaterialController_C, UberGraphFrame) == 0x000328, "Member 'ABP_AJBInGameMiniMapMaterialController_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMiniMapMaterialController_C, TextRender1) == 0x000330, "Member 'ABP_AJBInGameMiniMapMaterialController_C::TextRender1' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMiniMapMaterialController_C, TextRender) == 0x000338, "Member 'ABP_AJBInGameMiniMapMaterialController_C::TextRender' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMiniMapMaterialController_C, StaticMesh) == 0x000340, "Member 'ABP_AJBInGameMiniMapMaterialController_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMiniMapMaterialController_C, SceneCaptureComponent2D) == 0x000348, "Member 'ABP_AJBInGameMiniMapMaterialController_C::SceneCaptureComponent2D' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMiniMapMaterialController_C, CaptureRangePreviewBox) == 0x000350, "Member 'ABP_AJBInGameMiniMapMaterialController_C::CaptureRangePreviewBox' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMiniMapMaterialController_C, DefaultSceneRoot) == 0x000358, "Member 'ABP_AJBInGameMiniMapMaterialController_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMiniMapMaterialController_C, CaptureWidth) == 0x000360, "Member 'ABP_AJBInGameMiniMapMaterialController_C::CaptureWidth' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMiniMapMaterialController_C, MapScale) == 0x000364, "Member 'ABP_AJBInGameMiniMapMaterialController_C::MapScale' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMiniMapMaterialController_C, CachedMapManager) == 0x000368, "Member 'ABP_AJBInGameMiniMapMaterialController_C::CachedMapManager' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMiniMapMaterialController_C, CurrentPlayerIconPosition) == 0x000370, "Member 'ABP_AJBInGameMiniMapMaterialController_C::CurrentPlayerIconPosition' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMiniMapMaterialController_C, CurrentPlayerIconAngle) == 0x000378, "Member 'ABP_AJBInGameMiniMapMaterialController_C::CurrentPlayerIconAngle' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMiniMapMaterialController_C, CurrentPairIconPosition) == 0x00037C, "Member 'ABP_AJBInGameMiniMapMaterialController_C::CurrentPairIconPosition' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMiniMapMaterialController_C, CurrentPairIconAngle) == 0x000384, "Member 'ABP_AJBInGameMiniMapMaterialController_C::CurrentPairIconAngle' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMiniMapMaterialController_C, bIsExistPair) == 0x000388, "Member 'ABP_AJBInGameMiniMapMaterialController_C::bIsExistPair' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMiniMapMaterialController_C, bSetPairIcon) == 0x000389, "Member 'ABP_AJBInGameMiniMapMaterialController_C::bSetPairIcon' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMiniMapMaterialController_C, CachedInGamePlayerController) == 0x000390, "Member 'ABP_AJBInGameMiniMapMaterialController_C::CachedInGamePlayerController' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMiniMapMaterialController_C, RenderTargetTexture) == 0x000398, "Member 'ABP_AJBInGameMiniMapMaterialController_C::RenderTargetTexture' has a wrong offset!");

}

