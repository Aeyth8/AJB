#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_LimitedAchievement

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AJB_structs.hpp"
#include "AJB_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_LimitedAchievement.WB_LimitedAchievement_C
// 0x00B8 (0x0378 - 0x02C0)
class UWB_LimitedAchievement_C final : public UAJBWindowWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(Transient, DuplicateTransient)
	class UWidgetAnimation*                       Anim_Appear;                                       // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBRetainerBox*                        AJBRetainerBox_0;                                  // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBRetainerBox*                        AJBRetainerBox_1;                                  // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          Period;                                            // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_CommonButton_C*                     WB_CommonButton;                                   // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_LimitedAchievement_ProgressBar_C*   WB_LimitedAchievement_ProgressBar1;                // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_LimitedAchievement_ProgressBar_C*   WB_LimitedAchievement_ProgressBar2;                // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_LimitedAchievement_ProgressBar_C*   WB_LimitedAchievement_ProgressBar3;                // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_LimitedAchievement_txt_C*           WB_LimitedAchievement_txt;                         // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FAJBLimitedAchievements                LimitedAchievement;                                // 0x0310(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, ExposeOnSpawn)
	TArray<class UWB_LimitedAchievement_ProgressBar_C*> BarWidgets;                                        // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         FinishedBarAnimCount;                              // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_354[0x4];                                      // 0x0354(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           StartBarAnimTimerHandle;                           // 0x0358(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          bForceCloseWindow;                                 // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_361[0x7];                                      // 0x0361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           FinisehdCloseWindowTimerHandle;                    // 0x0368(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class UAkComponent*                           LastCreateAkComponent;                             // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WB_LimitedAchievement(int32 EntryPoint);
	void BndEvt__WB_CommonButton_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature(class UAJBButtonWidget* OwnerWidget, class UAJBButton* TargetButton);
	void OnAnimFinisehdCloseWindow();
	void OnStartBarAnimation();
	void OnTouchButton();
	void CustomEvent();
	void CustomEvent_0();
	void BndEvt__WB_LimitedAchievement_ProgressBar3_K2Node_ComponentBoundEvent_4_OnFinishedAnimDispatcher__DelegateSignature();
	void BndEvt__WB_LimitedAchievement_ProgressBar2_K2Node_ComponentBoundEvent_3_OnFinishedAnimDispatcher__DelegateSignature();
	void BndEvt__WB_LimitedAchievement_ProgressBar1_K2Node_ComponentBoundEvent_2_OnFinishedAnimDispatcher__DelegateSignature();
	void Construct();
	void OnClosingWindow();
	void OnOpeningWindow();
	void CanBeDisplayed(bool* bCan);
	class FText ConvertDisplayDateText(class FString& Date);
	bool OnInputTurnRate(float Value);
	bool OnInputReleasedUp();
	bool OnInputReleasedTouch();
	bool OnInputReleasedRight();
	bool OnInputReleasedR2();
	bool OnInputReleasedR1();
	bool OnInputReleasedLeft();
	bool OnInputReleasedL3();
	bool OnInputReleasedL2();
	bool OnInputReleasedL1();
	bool OnInputReleasedDown();
	bool OnInputReleasedDecide();
	bool OnInputReleasedCancel();
	bool OnInputPressedUp();
	bool OnInputPressedTouch(const float LocationX, const float LocationY);
	bool OnInputPressedRight();
	bool OnInputPressedR2();
	bool OnInputPressedR1();
	bool OnInputPressedLeft();
	bool OnInputPressedL3();
	bool OnInputPressedL2();
	bool OnInputPressedL1();
	bool OnInputPressedDown();
	bool OnInputPressedDecide();
	bool OnInputPressedCancel();
	bool OnInputMoveRight(float Value);
	bool OnInputMoveForward(float Value);
	bool OnInputLookupRate(float Value);
	bool IsModeless();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_LimitedAchievement_C">();
	}
	static class UWB_LimitedAchievement_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_LimitedAchievement_C>();
	}
};
static_assert(alignof(UWB_LimitedAchievement_C) == 0x000008, "Wrong alignment on UWB_LimitedAchievement_C");
static_assert(sizeof(UWB_LimitedAchievement_C) == 0x000378, "Wrong size on UWB_LimitedAchievement_C");
static_assert(offsetof(UWB_LimitedAchievement_C, UberGraphFrame) == 0x0002C0, "Member 'UWB_LimitedAchievement_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_LimitedAchievement_C, Anim_Appear) == 0x0002C8, "Member 'UWB_LimitedAchievement_C::Anim_Appear' has a wrong offset!");
static_assert(offsetof(UWB_LimitedAchievement_C, AJBRetainerBox_0) == 0x0002D0, "Member 'UWB_LimitedAchievement_C::AJBRetainerBox_0' has a wrong offset!");
static_assert(offsetof(UWB_LimitedAchievement_C, AJBRetainerBox_1) == 0x0002D8, "Member 'UWB_LimitedAchievement_C::AJBRetainerBox_1' has a wrong offset!");
static_assert(offsetof(UWB_LimitedAchievement_C, Period) == 0x0002E0, "Member 'UWB_LimitedAchievement_C::Period' has a wrong offset!");
static_assert(offsetof(UWB_LimitedAchievement_C, WB_CommonButton) == 0x0002E8, "Member 'UWB_LimitedAchievement_C::WB_CommonButton' has a wrong offset!");
static_assert(offsetof(UWB_LimitedAchievement_C, WB_LimitedAchievement_ProgressBar1) == 0x0002F0, "Member 'UWB_LimitedAchievement_C::WB_LimitedAchievement_ProgressBar1' has a wrong offset!");
static_assert(offsetof(UWB_LimitedAchievement_C, WB_LimitedAchievement_ProgressBar2) == 0x0002F8, "Member 'UWB_LimitedAchievement_C::WB_LimitedAchievement_ProgressBar2' has a wrong offset!");
static_assert(offsetof(UWB_LimitedAchievement_C, WB_LimitedAchievement_ProgressBar3) == 0x000300, "Member 'UWB_LimitedAchievement_C::WB_LimitedAchievement_ProgressBar3' has a wrong offset!");
static_assert(offsetof(UWB_LimitedAchievement_C, WB_LimitedAchievement_txt) == 0x000308, "Member 'UWB_LimitedAchievement_C::WB_LimitedAchievement_txt' has a wrong offset!");
static_assert(offsetof(UWB_LimitedAchievement_C, LimitedAchievement) == 0x000310, "Member 'UWB_LimitedAchievement_C::LimitedAchievement' has a wrong offset!");
static_assert(offsetof(UWB_LimitedAchievement_C, BarWidgets) == 0x000340, "Member 'UWB_LimitedAchievement_C::BarWidgets' has a wrong offset!");
static_assert(offsetof(UWB_LimitedAchievement_C, FinishedBarAnimCount) == 0x000350, "Member 'UWB_LimitedAchievement_C::FinishedBarAnimCount' has a wrong offset!");
static_assert(offsetof(UWB_LimitedAchievement_C, StartBarAnimTimerHandle) == 0x000358, "Member 'UWB_LimitedAchievement_C::StartBarAnimTimerHandle' has a wrong offset!");
static_assert(offsetof(UWB_LimitedAchievement_C, bForceCloseWindow) == 0x000360, "Member 'UWB_LimitedAchievement_C::bForceCloseWindow' has a wrong offset!");
static_assert(offsetof(UWB_LimitedAchievement_C, FinisehdCloseWindowTimerHandle) == 0x000368, "Member 'UWB_LimitedAchievement_C::FinisehdCloseWindowTimerHandle' has a wrong offset!");
static_assert(offsetof(UWB_LimitedAchievement_C, LastCreateAkComponent) == 0x000370, "Member 'UWB_LimitedAchievement_C::LastCreateAkComponent' has a wrong offset!");

}

