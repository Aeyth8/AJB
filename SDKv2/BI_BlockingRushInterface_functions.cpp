#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BI_BlockingRushInterface

#include "Basic.hpp"

#include "BI_BlockingRushInterface_classes.hpp"
#include "BI_BlockingRushInterface_parameters.hpp"


namespace SDK
{

// Function BI_BlockingRushInterface.BI_BlockingRushInterface_C.Blocking
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           BlockedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitNormal                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CuttingProjectile___                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CuttingOther___                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bInvincible                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bReflectProjectile                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         ReflectRotation                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    bAvoidSkill                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bSeparateStandAttack                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FGameplayTag                     ReflectSkillTag                                        (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void IBI_BlockingRushInterface_C::Blocking(class AActor* BlockedActor, class AActor* OtherActor, const struct FVector& HitLocation, const struct FVector& HitNormal, int32 CuttingProjectile___, int32 CuttingOther___, bool bInvincible, bool bReflectProjectile, const struct FRotator& ReflectRotation, bool bAvoidSkill, bool bSeparateStandAttack, const struct FGameplayTag& ReflectSkillTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_BlockingRushInterface_C", "Blocking");

	Params::BI_BlockingRushInterface_C_Blocking Parms{};

	Parms.BlockedActor = BlockedActor;
	Parms.OtherActor = OtherActor;
	Parms.HitLocation = std::move(HitLocation);
	Parms.HitNormal = std::move(HitNormal);
	Parms.CuttingProjectile___ = CuttingProjectile___;
	Parms.CuttingOther___ = CuttingOther___;
	Parms.bInvincible = bInvincible;
	Parms.bReflectProjectile = bReflectProjectile;
	Parms.ReflectRotation = std::move(ReflectRotation);
	Parms.bAvoidSkill = bAvoidSkill;
	Parms.bSeparateStandAttack = bSeparateStandAttack;
	Parms.ReflectSkillTag = std::move(ReflectSkillTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BI_BlockingRushInterface.BI_BlockingRushInterface_C.CheckIgnoreBlocking
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIgnore                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBI_BlockingRushInterface_C::CheckIgnoreBlocking(class AActor* TargetActor, bool* bIgnore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_BlockingRushInterface_C", "CheckIgnoreBlocking");

	Params::BI_BlockingRushInterface_C_CheckIgnoreBlocking Parms{};

	Parms.TargetActor = TargetActor;

	UObject::ProcessEvent(Func, &Parms);

	if (bIgnore != nullptr)
		*bIgnore = Parms.bIgnore;
}


// Function BI_BlockingRushInterface.BI_BlockingRushInterface_C.CheckPassiveOnly
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsPassiveOnly                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBI_BlockingRushInterface_C::CheckPassiveOnly(bool* bIsPassiveOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_BlockingRushInterface_C", "CheckPassiveOnly");

	Params::BI_BlockingRushInterface_C_CheckPassiveOnly Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bIsPassiveOnly != nullptr)
		*bIsPassiveOnly = Parms.bIsPassiveOnly;
}

}

