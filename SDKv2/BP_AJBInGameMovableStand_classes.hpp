#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameMovableStand

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "E_StencilDigit_structs.hpp"
#include "ST_CustomSkinMaterials_structs.hpp"
#include "ST_ContinuedDamageKeepInfo_structs.hpp"
#include "AJB_structs.hpp"
#include "AJB_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C
// 0x0780 (0x0F20 - 0x07A0)
class ABP_AJBInGameMovableStand_C : public AAJBInGameMovableStand
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x07A0(0x0008)(Transient, DuplicateTransient)
	class UCameraComponent*                       Camera;                                            // 0x07A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAJBSpringArmComponent*                 AJBSpringArm;                                      // 0x07B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PS_DefeatedEffect;                                 // 0x07B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        PassiveSkillParticleRoot;                          // 0x07C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DisappearPoint;                                    // 0x07C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        AppearPoint;                                       // 0x07D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x07D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         AppearUpdate_NewTrack_0_F062B762408976680B9D3DA33F26C6DB; // 0x07E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            AppearUpdate__Direction_F062B762408976680B9D3DA33F26C6DB; // 0x07E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7E5[0x3];                                      // 0x07E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     AppearUpdate;                                      // 0x07E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CuttingRate___;                                    // 0x07F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ListenServerRotation;                              // 0x07F4(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	UMulticastDelegateProperty_                   OnMovementCompleted;                               // 0x0800(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FGameplayTag                           AppearParticleTag;                                 // 0x0810(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           DisappearParticleTag;                              // 0x0818(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         AppearTime;                                        // 0x0820(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_824[0x4];                                      // 0x0824(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       DMI_StandMesh;                                     // 0x0828(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FVector                                RelativeMeshLocationCache;                         // 0x0838(0x000C)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveSpeedScale;                                    // 0x0844(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<struct FGameplayTag, struct FST_ContinuedDamageKeepInfo> ContinuedDamageMap;                                // 0x0848(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FGameplayTagContainer                  Rep_GameplayTagContainer;                          // 0x0898(0x0020)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TMap<struct FGameplayTag, float>              StatusChangeTagFloatMap;                           // 0x08B8(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          bDuringTheWorld;                                   // 0x0908(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_909[0x3];                                      // 0x0909(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Cache_SceneLocation;                               // 0x090C(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultTargetArmLength;                            // 0x0918(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91C[0x4];                                      // 0x091C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   DefaultPostProcessSettings;                        // 0x0920(0x0520)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	struct FVector                                DefaultSpringArmLocation;                          // 0x0E40(0x000C)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnValue;                                         // 0x0E4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LookUpValue;                                       // 0x0E50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraInputRate;                                   // 0x0E54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECameraInputMode                              CameraInputMode;                                   // 0x0E58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E59[0x3];                                      // 0x0E59(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraInputDeadRate;                               // 0x0E5C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraInputSecondRate;                             // 0x0E60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnedRotationMinPerSecond;                        // 0x0E64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnedRotationMaxPerSecond;                        // 0x0E68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LookupRotationMinPerSecond;                        // 0x0E6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LookupRotationMaxPerSecond;                        // 0x0E70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovementDistanceLimit_cm_;                         // 0x0E74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveRightValue;                                    // 0x0E78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveForwardValue;                                  // 0x0E7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LimitBeginLeaveRate;                               // 0x0E80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebugShowDistanceLimit;                           // 0x0E84(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bArrivedMoveDistanceLimit;                         // 0x0E85(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E86[0x2];                                      // 0x0E86(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveDistanceLimitRate;                             // 0x0E88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TotalWorldLocation;                                // 0x0E8C(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxFlySpeed;                                       // 0x0E98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9C[0x4];                                      // 0x0E9C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_CustomSkinMaterials>        StandMaterials;                                    // 0x0EA0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UCurveFloat*                            CV_CameraInputDualZoneFirst;                       // 0x0EB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            CV_CameraInputDualZoneSecond;                      // 0x0EB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             InMacro_CacheSkinMaterials;                        // 0x0EC0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FST_CustomSkinMaterials>        InMacro_SkinMaterials;                             // 0x0ED0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         SkinItelateIndex;                                  // 0x0EE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUpturn;                                           // 0x0EE4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDownturn;                                         // 0x0EE5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EE6[0x2];                                      // 0x0EE6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultUpturnSpeed;                                // 0x0EE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultDownturnSpeed;                              // 0x0EEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UpturnSpeed;                                       // 0x0EF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DownturnSpeed;                                     // 0x0EF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UpDownSpeedScale;                                  // 0x0EF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RightLeftSpeedScale;                               // 0x0EFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSpeedDefault;                                   // 0x0F00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSpeedOnAccel;                                   // 0x0F04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSpeedOnDeaccel;                                 // 0x0F08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F0C[0x4];                                      // 0x0F0C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           AM_SpecialBreakDown;                               // 0x0F10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlendOutTimeSpecialBreakDown;                      // 0x0F18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultBrakingDecelerationFlying;                  // 0x0F1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnMovementCompleted__DelegateSignature();
	void ExecuteUbergraph_BP_AJBInGameMovableStand(int32 EntryPoint);
	void StopSpecialBreakDownAnimation();
	void PlaySpecialBreakDownAnimation();
	void TryToChangeSkin();
	void OnRep_MatchingPlayerIndex();
	void ChangeRelatedMeshStencilValueByDigit(E_StencilDigit DigitToChange, bool bFlag, bool bAlsoChangeRelatedActors);
	void OnAccompany();
	void CleanUp(bool bShouldDestroy);
	void OnPlayerControllerDestroyed();
	void MovableStandSetup();
	void FollowCharacterWhenUnpossessed_OnServer();
	void ReceiveTheWorld(float Time, bool bEnable, bool bOperatorIsEmpty);
	void ForwardTransparence();
	void OnRep_AppearanceTransition();
	void OnDisappear();
	void OnAppear();
	void BackwardTransparence();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void OnReleasedCrouch();
	void OnPressedCrouch();
	void OnReleasedJump();
	void OnPressedJump();
	void OnPressedShoot();
	void UpdateMoveInput();
	void MoveForward(float Value);
	void UpdateCameraInput();
	void OnPressedInteract();
	void MoveRight(float Value);
	void LookupRate(float Value);
	void TurnRate(float Value);
	void OnNotSpectated_Local();
	void OnSpectated_Local();
	void RemoveGameplayTag(const struct FGameplayTag& Tag);
	void AddGameplayTagWithFloat(const struct FGameplayTag& Tag, float FloatValue);
	void AddGameplayTag(const struct FGameplayTag& Tag, class UObject* Operator, class UObject* Target, const struct FGameplayTag& CauserType, int32 SerialNumber);
	void OnAreaOut(class ABP_AJBInGameCharacter_C* OperatorCharacter, const struct FGameplayTag& EffectTag, const struct FGameplayTag& SETag);
	void OnAreaIn(class ABP_AJBInGameCharacter_C* OperatorCharacter, const struct FGameplayTag& EffectTag, const struct FGameplayTag& SETag, bool bNoDamage);
	void MC_AJBDamage(const struct FGameplayTag& DamageType, bool bRemainHP, class AActor* DamageCauser);
	void AJBDamage(class AActor* DamagedActor, int32 DamageForHPAP, int32 DamageForAAP, int32 CutDamage, const struct FGameplayTag& DamageType, int32 SerialNumber, EDamagePriority DamagePriority, float AttackDistance, class AActor* DamageCauser, bool WithSeparatedStandAttack, bool HitEnemysSeparatedStand, bool bPenetrateAP, bool bNotUseCollision);
	void OnAreaDamageDisabled();
	void OnPassiveDisabled();
	void OnDamageDisabled();
	void DamageOverlapped(class AActor* DamageCauser, const struct FVector& HitLocation, bool bPenetrating, const struct FGameplayTag& FactorTag);
	void OnNoDamageChanged(class ABP_AJBInGameCharacter_C* OperaatorCharacter, bool bNewFlag, const struct FGameplayTag& EffectTag, const struct FGameplayTag& SETag);
	void OnLoaded_94E15C0B498789D9D5B32685F1CFF920(class UObject* Loaded);
	void OnLoaded_194708B14BCBDFECB467A4BD5AD390D3(class UObject* Loaded);
	void AppearUpdate__UpdateFunc();
	void AppearUpdate__FinishedFunc();
	void UserConstructionScript();
	void SystemEnable(bool bEnable, bool bApplyStandVisibility);
	void CalcCutDamage(int32 SrcDamage, int32* CutDamage);
	void UpdateCameraParam();
	void ChangeAuraEnable(bool bEnable);
	void SpawnAppearEffect(bool bEnable);
	void UpdateTransparence(float CurrentRate);
	void Appearance();
	void ChangeEnableCollision(bool bEnable);
	void GetCollisionProfileName(class FName* ProfileName);
	void SetPassiveSkillParticleVisibility(bool bNewVisibility);
	void ChangeStatus(bool bShouldAddNewTag, const struct FGameplayTag& NewTag, float NewFloatValue);
	void DamageAffecterAreaIn(class ABP_AJBInGameCharacter_C* OperatorCharacter, const struct FGameplayTag& EffectTag, const struct FGameplayTag& SETag);
	void DamageAffecterAreaOut(class ABP_AJBInGameCharacter_C* OperatorCharacter, const struct FGameplayTag& EffectTag, const struct FGameplayTag& SETag);
	void CalcCurrentRotationValue(float* TurnedRotation, float* LookupRotation);
	void UpdateMovementForwardInput(float Value, struct FVector* WorldDirection, float* ScaleValue);
	void UpdateMovementRightInput(float Value, struct FVector* WorldDirection, float* ScaleValue);
	void FilteringMovementDistanceLimit(const struct FVector& InputWorldDirection, float InputScale, struct FVector* OutputWorldDirection, float* OutputScale);
	void SetSkeletalMeshWithSkin(class USkeletalMesh* NewMesh, bool bReintPose);
	void UpdateMovementUpInput(struct FVector* WorldDirection);
	void ApplyMovableStandParameter();
	void SetupMaterials(TArray<struct FST_CustomSkinMaterials>& StandMaterial);
	void UpdateMaterials();
	void OnBeforeInteract();
	void AddControllerInputs();
	void ChangeStandMovementMode(bool bEnable);
	void GetStandInfoForChangingSkin(class FString* StandName, uint8* SkinID);
	void CalcInputScaleUp(float* InputScale);
	void CalcInputScaleDown(float* InputScale);
	void CheckMoveZAxis(bool* bMove);
	void ResetMoveZAxis();
	void CheckChangeableSpeed(bool* bChangeable);
	void OwnHitParam(bool* bCharacter, bool* bLeftAP, struct FGameplayTag* ParticleTagBlockedByAAP, struct FGameplayTag* SETagBlockedByAAP);
	void CheckTargetSelf(class AActor* DamageCauser, bool bForDamageOverlap, bool bIgnoreMovableStand, bool* bTarget);
	bool IfCheckDamageOverlap();
	void CheckDisableDamage(class AActor* DamageCauser, bool* bDisableDamage);
	void CheckDisablePassive(class AActor* PassiveCauser, const struct FGameplayTag& PassiveTag, bool* bDisablePassive);
	void CheckDisableAreaDamage(bool* bDisableAreadamage);
	void CheckNoDamage(class AActor* DamageCauser, bool* bNoDamage);
	void IsReactedByReticule(bool* bResult);
	void IgnoreTrace(bool* bIgnore);
	void CheckDisableDirectDamage(class AActor* DamageCauser, bool* bDisableDirectDamage);
	void CheckAreaIn(const struct FVector& Location, const struct FRotator& Rotation, float Radius, float Length, int32 PartitionNum, bool bCheckUnder, float ValidGroundOffsetZ, bool* bTarget);
	void GetGameplayTags(struct FGameplayTagContainer* TagContainerCopy);
	void GetPrimitivesToChangeStencil(E_StencilDigit StencilDigit, TArray<class UPrimitiveComponent*>* PrimitiveComponents);
	void GetTargetLocation(struct FVector* Location);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBInGameMovableStand_C">();
	}
	static class ABP_AJBInGameMovableStand_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBInGameMovableStand_C>();
	}
};
static_assert(alignof(ABP_AJBInGameMovableStand_C) == 0x000010, "Wrong alignment on ABP_AJBInGameMovableStand_C");
static_assert(sizeof(ABP_AJBInGameMovableStand_C) == 0x000F20, "Wrong size on ABP_AJBInGameMovableStand_C");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, UberGraphFrame) == 0x0007A0, "Member 'ABP_AJBInGameMovableStand_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, Camera) == 0x0007A8, "Member 'ABP_AJBInGameMovableStand_C::Camera' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, AJBSpringArm) == 0x0007B0, "Member 'ABP_AJBInGameMovableStand_C::AJBSpringArm' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, PS_DefeatedEffect) == 0x0007B8, "Member 'ABP_AJBInGameMovableStand_C::PS_DefeatedEffect' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, PassiveSkillParticleRoot) == 0x0007C0, "Member 'ABP_AJBInGameMovableStand_C::PassiveSkillParticleRoot' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, DisappearPoint) == 0x0007C8, "Member 'ABP_AJBInGameMovableStand_C::DisappearPoint' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, AppearPoint) == 0x0007D0, "Member 'ABP_AJBInGameMovableStand_C::AppearPoint' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, Scene) == 0x0007D8, "Member 'ABP_AJBInGameMovableStand_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, AppearUpdate_NewTrack_0_F062B762408976680B9D3DA33F26C6DB) == 0x0007E0, "Member 'ABP_AJBInGameMovableStand_C::AppearUpdate_NewTrack_0_F062B762408976680B9D3DA33F26C6DB' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, AppearUpdate__Direction_F062B762408976680B9D3DA33F26C6DB) == 0x0007E4, "Member 'ABP_AJBInGameMovableStand_C::AppearUpdate__Direction_F062B762408976680B9D3DA33F26C6DB' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, AppearUpdate) == 0x0007E8, "Member 'ABP_AJBInGameMovableStand_C::AppearUpdate' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, CuttingRate___) == 0x0007F0, "Member 'ABP_AJBInGameMovableStand_C::CuttingRate___' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, ListenServerRotation) == 0x0007F4, "Member 'ABP_AJBInGameMovableStand_C::ListenServerRotation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, OnMovementCompleted) == 0x000800, "Member 'ABP_AJBInGameMovableStand_C::OnMovementCompleted' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, AppearParticleTag) == 0x000810, "Member 'ABP_AJBInGameMovableStand_C::AppearParticleTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, DisappearParticleTag) == 0x000818, "Member 'ABP_AJBInGameMovableStand_C::DisappearParticleTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, AppearTime) == 0x000820, "Member 'ABP_AJBInGameMovableStand_C::AppearTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, DMI_StandMesh) == 0x000828, "Member 'ABP_AJBInGameMovableStand_C::DMI_StandMesh' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, RelativeMeshLocationCache) == 0x000838, "Member 'ABP_AJBInGameMovableStand_C::RelativeMeshLocationCache' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, MoveSpeedScale) == 0x000844, "Member 'ABP_AJBInGameMovableStand_C::MoveSpeedScale' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, ContinuedDamageMap) == 0x000848, "Member 'ABP_AJBInGameMovableStand_C::ContinuedDamageMap' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, Rep_GameplayTagContainer) == 0x000898, "Member 'ABP_AJBInGameMovableStand_C::Rep_GameplayTagContainer' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, StatusChangeTagFloatMap) == 0x0008B8, "Member 'ABP_AJBInGameMovableStand_C::StatusChangeTagFloatMap' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, bDuringTheWorld) == 0x000908, "Member 'ABP_AJBInGameMovableStand_C::bDuringTheWorld' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, Cache_SceneLocation) == 0x00090C, "Member 'ABP_AJBInGameMovableStand_C::Cache_SceneLocation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, DefaultTargetArmLength) == 0x000918, "Member 'ABP_AJBInGameMovableStand_C::DefaultTargetArmLength' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, DefaultPostProcessSettings) == 0x000920, "Member 'ABP_AJBInGameMovableStand_C::DefaultPostProcessSettings' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, DefaultSpringArmLocation) == 0x000E40, "Member 'ABP_AJBInGameMovableStand_C::DefaultSpringArmLocation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, TurnValue) == 0x000E4C, "Member 'ABP_AJBInGameMovableStand_C::TurnValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, LookUpValue) == 0x000E50, "Member 'ABP_AJBInGameMovableStand_C::LookUpValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, CameraInputRate) == 0x000E54, "Member 'ABP_AJBInGameMovableStand_C::CameraInputRate' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, CameraInputMode) == 0x000E58, "Member 'ABP_AJBInGameMovableStand_C::CameraInputMode' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, CameraInputDeadRate) == 0x000E5C, "Member 'ABP_AJBInGameMovableStand_C::CameraInputDeadRate' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, CameraInputSecondRate) == 0x000E60, "Member 'ABP_AJBInGameMovableStand_C::CameraInputSecondRate' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, TurnedRotationMinPerSecond) == 0x000E64, "Member 'ABP_AJBInGameMovableStand_C::TurnedRotationMinPerSecond' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, TurnedRotationMaxPerSecond) == 0x000E68, "Member 'ABP_AJBInGameMovableStand_C::TurnedRotationMaxPerSecond' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, LookupRotationMinPerSecond) == 0x000E6C, "Member 'ABP_AJBInGameMovableStand_C::LookupRotationMinPerSecond' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, LookupRotationMaxPerSecond) == 0x000E70, "Member 'ABP_AJBInGameMovableStand_C::LookupRotationMaxPerSecond' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, MovementDistanceLimit_cm_) == 0x000E74, "Member 'ABP_AJBInGameMovableStand_C::MovementDistanceLimit_cm_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, MoveRightValue) == 0x000E78, "Member 'ABP_AJBInGameMovableStand_C::MoveRightValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, MoveForwardValue) == 0x000E7C, "Member 'ABP_AJBInGameMovableStand_C::MoveForwardValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, LimitBeginLeaveRate) == 0x000E80, "Member 'ABP_AJBInGameMovableStand_C::LimitBeginLeaveRate' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, bDebugShowDistanceLimit) == 0x000E84, "Member 'ABP_AJBInGameMovableStand_C::bDebugShowDistanceLimit' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, bArrivedMoveDistanceLimit) == 0x000E85, "Member 'ABP_AJBInGameMovableStand_C::bArrivedMoveDistanceLimit' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, MoveDistanceLimitRate) == 0x000E88, "Member 'ABP_AJBInGameMovableStand_C::MoveDistanceLimitRate' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, TotalWorldLocation) == 0x000E8C, "Member 'ABP_AJBInGameMovableStand_C::TotalWorldLocation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, MaxFlySpeed) == 0x000E98, "Member 'ABP_AJBInGameMovableStand_C::MaxFlySpeed' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, StandMaterials) == 0x000EA0, "Member 'ABP_AJBInGameMovableStand_C::StandMaterials' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, CV_CameraInputDualZoneFirst) == 0x000EB0, "Member 'ABP_AJBInGameMovableStand_C::CV_CameraInputDualZoneFirst' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, CV_CameraInputDualZoneSecond) == 0x000EB8, "Member 'ABP_AJBInGameMovableStand_C::CV_CameraInputDualZoneSecond' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, InMacro_CacheSkinMaterials) == 0x000EC0, "Member 'ABP_AJBInGameMovableStand_C::InMacro_CacheSkinMaterials' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, InMacro_SkinMaterials) == 0x000ED0, "Member 'ABP_AJBInGameMovableStand_C::InMacro_SkinMaterials' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, SkinItelateIndex) == 0x000EE0, "Member 'ABP_AJBInGameMovableStand_C::SkinItelateIndex' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, bUpturn) == 0x000EE4, "Member 'ABP_AJBInGameMovableStand_C::bUpturn' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, bDownturn) == 0x000EE5, "Member 'ABP_AJBInGameMovableStand_C::bDownturn' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, DefaultUpturnSpeed) == 0x000EE8, "Member 'ABP_AJBInGameMovableStand_C::DefaultUpturnSpeed' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, DefaultDownturnSpeed) == 0x000EEC, "Member 'ABP_AJBInGameMovableStand_C::DefaultDownturnSpeed' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, UpturnSpeed) == 0x000EF0, "Member 'ABP_AJBInGameMovableStand_C::UpturnSpeed' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, DownturnSpeed) == 0x000EF4, "Member 'ABP_AJBInGameMovableStand_C::DownturnSpeed' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, UpDownSpeedScale) == 0x000EF8, "Member 'ABP_AJBInGameMovableStand_C::UpDownSpeedScale' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, RightLeftSpeedScale) == 0x000EFC, "Member 'ABP_AJBInGameMovableStand_C::RightLeftSpeedScale' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, MaxSpeedDefault) == 0x000F00, "Member 'ABP_AJBInGameMovableStand_C::MaxSpeedDefault' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, MaxSpeedOnAccel) == 0x000F04, "Member 'ABP_AJBInGameMovableStand_C::MaxSpeedOnAccel' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, MaxSpeedOnDeaccel) == 0x000F08, "Member 'ABP_AJBInGameMovableStand_C::MaxSpeedOnDeaccel' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, AM_SpecialBreakDown) == 0x000F10, "Member 'ABP_AJBInGameMovableStand_C::AM_SpecialBreakDown' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, BlendOutTimeSpecialBreakDown) == 0x000F18, "Member 'ABP_AJBInGameMovableStand_C::BlendOutTimeSpecialBreakDown' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_C, DefaultBrakingDecelerationFlying) == 0x000F1C, "Member 'ABP_AJBInGameMovableStand_C::DefaultBrakingDecelerationFlying' has a wrong offset!");

}

