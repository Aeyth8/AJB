#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_PassiveMessage

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_PassiveMessage.WB_PassiveMessage_C
// 0x00A0 (0x02A8 - 0x0208)
class UWB_PassiveMessage_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0208(0x0008)(Transient, DuplicateTransient)
	class UWidgetAnimation*                       Anim_Start;                                        // 0x0210(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_Switching;                                    // 0x0218(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              BG;                                                // 0x0220(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          PassiveText;                                       // 0x0228(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FTimerHandle                           SwitchingTimer;                                    // 0x0230(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	int32                                         MessageIndex;                                      // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   MessageTags;                                       // 0x0240(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TMap<struct FGameplayTag, class FText>        MessageList;                                       // 0x0250(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         PassiveDisplayTime;                                // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WB_PassiveMessage(int32 EntryPoint);
	void TryUpdatePhase(const struct FGameplayTag& PassiveTag, int32 IntegerValue);
	void TryUpdateLeftTime(const struct FGameplayTag& PassiveTag, float FloatValue);
	void UnbindFinishedAnimation();
	void ResetPassive();
	void OnStartSwitchingCountDownTimer();
	void UpdatePassiveTextByInteger(int32 IntegerValue);
	void OnFinishedPassiveEndAnim();
	void OnFinishedAnim();
	void OnSwitching();
	void RemoveMessage(const struct FGameplayTag& Key);
	void AddMessage(const struct FGameplayTag& Key, const class FText& Value);
	void UpdateTextMaterial(const struct FGameplayTag& CurrentPassiveTag);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_PassiveMessage_C">();
	}
	static class UWB_PassiveMessage_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_PassiveMessage_C>();
	}
};
static_assert(alignof(UWB_PassiveMessage_C) == 0x000008, "Wrong alignment on UWB_PassiveMessage_C");
static_assert(sizeof(UWB_PassiveMessage_C) == 0x0002A8, "Wrong size on UWB_PassiveMessage_C");
static_assert(offsetof(UWB_PassiveMessage_C, UberGraphFrame) == 0x000208, "Member 'UWB_PassiveMessage_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_PassiveMessage_C, Anim_Start) == 0x000210, "Member 'UWB_PassiveMessage_C::Anim_Start' has a wrong offset!");
static_assert(offsetof(UWB_PassiveMessage_C, Anim_Switching) == 0x000218, "Member 'UWB_PassiveMessage_C::Anim_Switching' has a wrong offset!");
static_assert(offsetof(UWB_PassiveMessage_C, BG) == 0x000220, "Member 'UWB_PassiveMessage_C::BG' has a wrong offset!");
static_assert(offsetof(UWB_PassiveMessage_C, PassiveText) == 0x000228, "Member 'UWB_PassiveMessage_C::PassiveText' has a wrong offset!");
static_assert(offsetof(UWB_PassiveMessage_C, SwitchingTimer) == 0x000230, "Member 'UWB_PassiveMessage_C::SwitchingTimer' has a wrong offset!");
static_assert(offsetof(UWB_PassiveMessage_C, MessageIndex) == 0x000238, "Member 'UWB_PassiveMessage_C::MessageIndex' has a wrong offset!");
static_assert(offsetof(UWB_PassiveMessage_C, MessageTags) == 0x000240, "Member 'UWB_PassiveMessage_C::MessageTags' has a wrong offset!");
static_assert(offsetof(UWB_PassiveMessage_C, MessageList) == 0x000250, "Member 'UWB_PassiveMessage_C::MessageList' has a wrong offset!");
static_assert(offsetof(UWB_PassiveMessage_C, PassiveDisplayTime) == 0x0002A0, "Member 'UWB_PassiveMessage_C::PassiveDisplayTime' has a wrong offset!");

}

