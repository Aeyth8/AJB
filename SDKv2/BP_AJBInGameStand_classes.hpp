#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameStand

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "AJB_structs.hpp"
#include "AJB_classes.hpp"
#include "E_StencilDigit_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBInGameStand.BP_AJBInGameStand_C
// 0x01A0 (0x04D0 - 0x0330)
class ABP_AJBInGameStand_C : public AAJBInGameStand
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0330(0x0008)(Transient, DuplicateTransient)
	class UParticleSystemComponent*               PS_DefeatedEffect;                                 // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        AppearPoint;                                       // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DisappearPoint;                                    // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAJBInGameMovementComponent*            AJBInGameMovement;                                 // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      CapsuleCollision;                                  // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RotateInterpSpeed;                                 // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         YawToPlayer_deg_;                                  // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceToPlayer_cm_;                              // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OffsetZToPlayer_cm_;                               // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       DMI_StandMesh;                                     // 0x0378(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         CurrentTime;                                       // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AccompanyTime;                                     // 0x038C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMovableAction;                                   // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsRotatableAction;                                 // 0x0391(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_392[0x2];                                      // 0x0392(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultSpeed;                                      // 0x0394(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultYawToPlayer_deg_;                           // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultDistanceToPlayer_cm_;                       // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultOffsetZToPlayer_cm_;                        // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultMeshInterpSpeed;                            // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           AuraColor;                                         // 0x03A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           AppearParticleTag;                                 // 0x03B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           DisappearParticleTag;                              // 0x03C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       DMI_Aura;                                          // 0x03C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          bShowTransitionChangeByMC;                         // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D9[0x7];                                      // 0x03D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           SEOnAccompany;                                     // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTransitionBySeparate;                             // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShowTransitionChangeByRepNotify;                  // 0x03E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3EA[0x6];                                      // 0x03EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UParticleSystemComponent*>       PS_Aura;                                           // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class USkeletalMeshComponent*>         Attachments;                                       // 0x0400(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          bStandLocationRootBoneRelativeYaw;                 // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_411[0x7];                                      // 0x0411(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             SkeletalMeshMaterialsCacheA;                       // 0x0418(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FTimerHandle                           TimerHandleUpdateAuraParameter;                    // 0x0428(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FVector                                InitialMeshRelativeLocation;                       // 0x0430(0x000C)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PrevMeshLocation;                                  // 0x043C(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MeshMoveInterpSpeed;                               // 0x0448(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44C[0x4];                                      // 0x044C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           SETag_StandOperation;                              // 0x0450(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  StatusGameplayTagContainer;                        // 0x0458(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FGameplayTag, float>              StatusChangeTagFloatMap;                           // 0x0478(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          bAuraVisibility;                                   // 0x04C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDisableUpdateMeshLocation;                        // 0x04C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_AJBInGameStand(int32 EntryPoint);
	void TryToChangeSkin();
	void OnRep_MatchingPlayerIndex();
	void CleanUp(bool bShouldDestroy);
	void ChangeSkin(const class FString& StandName, uint8 SkinID);
	void PlayAppearMontage();
	void OnTransitionChanged(EStandAccompanyTransition PrevTransition, EStandAccompanyTransition NextTransition, bool bBySeparate);
	void ReceiveTheWorld(float Time, bool bEnable);
	void StandSetup();
	void OnRep_AccompanyTransition();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void RemoveGameplayTag(const struct FGameplayTag& Tag);
	void AddGameplayTagWithFloat(const struct FGameplayTag& Tag, float FloatValue);
	void AddGameplayTag(const struct FGameplayTag& Tag, class UObject* Operator, class UObject* Target, const struct FGameplayTag& CauserType, int32 SerialNumber);
	void OnLoaded_41AA3E1A4827BE19D3BF5B91704CF05F(class UObject* Loaded);
	void OnLoaded_E20DA2574FB49B31E9DEF5A90663527D(class UObject* Loaded);
	void OnLoaded_E20DA2574FB49B31E9DEF5A94242ACE2(class UObject* Loaded);
	void OnLoaded_41AA3E1A4827BE19D3BF5B9104A325BF(class UObject* Loaded);
	void UserConstructionScript();
	void UpdateTransform(float DeltaSeconds);
	void UpdateAccompany(float DeltaSeconds);
	void GetTransitionRate(float* Rate);
	void GetFixedLocation(struct FVector* Location);
	void StopMontage(float InBlendOutTime, const class UAnimMontage* Montage);
	void CheckSeparation(bool bIncludeTransition, bool* IsSeparate);
	void InitializeStatus();
	float GetDefaultMaxSpeed();
	void SetMoveSpeedScale(float Scale);
	void ChangeOffset(float YawToPlayer_deg__0, float DistanceToPlayer_cm__0, float OffsetZToPlayer_cm__0);
	void InitializeOffset();
	void ChangeAuraEnable(bool bEnable);
	void SpawnAccompanyEmitter(EStandAccompanyTransition AccompanyTransition);
	void SetMeshInterpSpeed(float InterpSpeed);
	void ResetMeshInterpSpeed();
	void UpdateTransformOnSeparation();
	void UpdateTransformOnNotSeparation(float DeltaSeconds);
	void PlaySE(EStandAccompanyTransition PrevTransition, EStandAccompanyTransition NextTransition, bool bAsSeparate);
	void TryDisableTick();
	void ChangeStandMeshVisibility(bool bEnable);
	void SetValueDissolveAlpha(float Value);
	void SetSkeletalMeshWithSkin(class USkeletalMesh* NewMesh, bool bReintPose);
	void ApplyStandParameter();
	void GetFixedRelativeLocation(struct FVector* RelativeLocation);
	void EnableStandLocationRootBoneRelativeYaw(bool bEnable);
	void ChangeToTransformMesh(class USkeletalMesh* TransformMesh);
	void ChangeToDefaultMesh(class USkeletalMesh* DefaultMesh);
	void UpdateAuraParameter();
	void AttachSkeletalMesh(float NewInterpSpeed);
	void DetachSkeletalMesh();
	void GetFixedMeshLocation(struct FVector* Location);
	void GetStandInfoForChangingSkin(class FString* StandName, uint8* SkinID);
	void GetOffsetConsiderAttachedMesh(struct FVector* Offset);
	void ChangeStatus(bool bShouldAddNewTag, const struct FGameplayTag& NewTag, float NewFloatValue);
	void CheckVisibilityByStandTransition(bool* bVisibility);
	void GetPrimitivesToChangeStencil(E_StencilDigit StencilDigit, TArray<class UPrimitiveComponent*>* PrimitiveComponents);
	void GetGameplayTags(struct FGameplayTagContainer* TagContainerCopy);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBInGameStand_C">();
	}
	static class ABP_AJBInGameStand_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBInGameStand_C>();
	}
};
static_assert(alignof(ABP_AJBInGameStand_C) == 0x000008, "Wrong alignment on ABP_AJBInGameStand_C");
static_assert(sizeof(ABP_AJBInGameStand_C) == 0x0004D0, "Wrong size on ABP_AJBInGameStand_C");
static_assert(offsetof(ABP_AJBInGameStand_C, UberGraphFrame) == 0x000330, "Member 'ABP_AJBInGameStand_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, PS_DefeatedEffect) == 0x000338, "Member 'ABP_AJBInGameStand_C::PS_DefeatedEffect' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, AppearPoint) == 0x000340, "Member 'ABP_AJBInGameStand_C::AppearPoint' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, DisappearPoint) == 0x000348, "Member 'ABP_AJBInGameStand_C::DisappearPoint' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, AJBInGameMovement) == 0x000350, "Member 'ABP_AJBInGameStand_C::AJBInGameMovement' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, CapsuleCollision) == 0x000358, "Member 'ABP_AJBInGameStand_C::CapsuleCollision' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, SkeletalMesh) == 0x000360, "Member 'ABP_AJBInGameStand_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, RotateInterpSpeed) == 0x000368, "Member 'ABP_AJBInGameStand_C::RotateInterpSpeed' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, YawToPlayer_deg_) == 0x00036C, "Member 'ABP_AJBInGameStand_C::YawToPlayer_deg_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, DistanceToPlayer_cm_) == 0x000370, "Member 'ABP_AJBInGameStand_C::DistanceToPlayer_cm_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, OffsetZToPlayer_cm_) == 0x000374, "Member 'ABP_AJBInGameStand_C::OffsetZToPlayer_cm_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, DMI_StandMesh) == 0x000378, "Member 'ABP_AJBInGameStand_C::DMI_StandMesh' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, CurrentTime) == 0x000388, "Member 'ABP_AJBInGameStand_C::CurrentTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, AccompanyTime) == 0x00038C, "Member 'ABP_AJBInGameStand_C::AccompanyTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, IsMovableAction) == 0x000390, "Member 'ABP_AJBInGameStand_C::IsMovableAction' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, IsRotatableAction) == 0x000391, "Member 'ABP_AJBInGameStand_C::IsRotatableAction' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, DefaultSpeed) == 0x000394, "Member 'ABP_AJBInGameStand_C::DefaultSpeed' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, DefaultYawToPlayer_deg_) == 0x000398, "Member 'ABP_AJBInGameStand_C::DefaultYawToPlayer_deg_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, DefaultDistanceToPlayer_cm_) == 0x00039C, "Member 'ABP_AJBInGameStand_C::DefaultDistanceToPlayer_cm_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, DefaultOffsetZToPlayer_cm_) == 0x0003A0, "Member 'ABP_AJBInGameStand_C::DefaultOffsetZToPlayer_cm_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, DefaultMeshInterpSpeed) == 0x0003A4, "Member 'ABP_AJBInGameStand_C::DefaultMeshInterpSpeed' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, AuraColor) == 0x0003A8, "Member 'ABP_AJBInGameStand_C::AuraColor' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, AppearParticleTag) == 0x0003B8, "Member 'ABP_AJBInGameStand_C::AppearParticleTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, DisappearParticleTag) == 0x0003C0, "Member 'ABP_AJBInGameStand_C::DisappearParticleTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, DMI_Aura) == 0x0003C8, "Member 'ABP_AJBInGameStand_C::DMI_Aura' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, bShowTransitionChangeByMC) == 0x0003D8, "Member 'ABP_AJBInGameStand_C::bShowTransitionChangeByMC' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, SEOnAccompany) == 0x0003E0, "Member 'ABP_AJBInGameStand_C::SEOnAccompany' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, bTransitionBySeparate) == 0x0003E8, "Member 'ABP_AJBInGameStand_C::bTransitionBySeparate' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, bShowTransitionChangeByRepNotify) == 0x0003E9, "Member 'ABP_AJBInGameStand_C::bShowTransitionChangeByRepNotify' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, PS_Aura) == 0x0003F0, "Member 'ABP_AJBInGameStand_C::PS_Aura' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, Attachments) == 0x000400, "Member 'ABP_AJBInGameStand_C::Attachments' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, bStandLocationRootBoneRelativeYaw) == 0x000410, "Member 'ABP_AJBInGameStand_C::bStandLocationRootBoneRelativeYaw' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, SkeletalMeshMaterialsCacheA) == 0x000418, "Member 'ABP_AJBInGameStand_C::SkeletalMeshMaterialsCacheA' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, TimerHandleUpdateAuraParameter) == 0x000428, "Member 'ABP_AJBInGameStand_C::TimerHandleUpdateAuraParameter' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, InitialMeshRelativeLocation) == 0x000430, "Member 'ABP_AJBInGameStand_C::InitialMeshRelativeLocation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, PrevMeshLocation) == 0x00043C, "Member 'ABP_AJBInGameStand_C::PrevMeshLocation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, MeshMoveInterpSpeed) == 0x000448, "Member 'ABP_AJBInGameStand_C::MeshMoveInterpSpeed' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, SETag_StandOperation) == 0x000450, "Member 'ABP_AJBInGameStand_C::SETag_StandOperation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, StatusGameplayTagContainer) == 0x000458, "Member 'ABP_AJBInGameStand_C::StatusGameplayTagContainer' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, StatusChangeTagFloatMap) == 0x000478, "Member 'ABP_AJBInGameStand_C::StatusChangeTagFloatMap' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, bAuraVisibility) == 0x0004C8, "Member 'ABP_AJBInGameStand_C::bAuraVisibility' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_C, bDisableUpdateMeshLocation) == 0x0004C9, "Member 'ABP_AJBInGameStand_C::bDisableUpdateMeshLocation' has a wrong offset!");

}

