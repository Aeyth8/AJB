#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SimpleCurveAnimation

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_SimpleCurveAnimation.BP_SimpleCurveAnimation_C.OnStartAnim__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BP_SimpleCurveAnimation_C_OnStartAnim__DelegateSignature final
{
public:
	class UBP_SimpleCurveAnimation_C*             AnimComponent;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bReverse;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_SimpleCurveAnimation_C_OnStartAnim__DelegateSignature) == 0x000008, "Wrong alignment on BP_SimpleCurveAnimation_C_OnStartAnim__DelegateSignature");
static_assert(sizeof(BP_SimpleCurveAnimation_C_OnStartAnim__DelegateSignature) == 0x000010, "Wrong size on BP_SimpleCurveAnimation_C_OnStartAnim__DelegateSignature");
static_assert(offsetof(BP_SimpleCurveAnimation_C_OnStartAnim__DelegateSignature, AnimComponent) == 0x000000, "Member 'BP_SimpleCurveAnimation_C_OnStartAnim__DelegateSignature::AnimComponent' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_OnStartAnim__DelegateSignature, bReverse) == 0x000008, "Member 'BP_SimpleCurveAnimation_C_OnStartAnim__DelegateSignature::bReverse' has a wrong offset!");

// Function BP_SimpleCurveAnimation.BP_SimpleCurveAnimation_C.OnFinishAnim__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_SimpleCurveAnimation_C_OnFinishAnim__DelegateSignature final
{
public:
	class UBP_SimpleCurveAnimation_C*             AnimComponent;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SimpleCurveAnimation_C_OnFinishAnim__DelegateSignature) == 0x000008, "Wrong alignment on BP_SimpleCurveAnimation_C_OnFinishAnim__DelegateSignature");
static_assert(sizeof(BP_SimpleCurveAnimation_C_OnFinishAnim__DelegateSignature) == 0x000008, "Wrong size on BP_SimpleCurveAnimation_C_OnFinishAnim__DelegateSignature");
static_assert(offsetof(BP_SimpleCurveAnimation_C_OnFinishAnim__DelegateSignature, AnimComponent) == 0x000000, "Member 'BP_SimpleCurveAnimation_C_OnFinishAnim__DelegateSignature::AnimComponent' has a wrong offset!");

// Function BP_SimpleCurveAnimation.BP_SimpleCurveAnimation_C.ExecuteUbergraph_BP_SimpleCurveAnimation
// 0x0028 (0x0028 - 0x0000)
struct BP_SimpleCurveAnimation_C_ExecuteUbergraph_BP_SimpleCurveAnimation final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CallFunc_GetUseAnimCurve_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MinTime;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MaxTime;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SimpleCurveAnimation_C_ExecuteUbergraph_BP_SimpleCurveAnimation) == 0x000008, "Wrong alignment on BP_SimpleCurveAnimation_C_ExecuteUbergraph_BP_SimpleCurveAnimation");
static_assert(sizeof(BP_SimpleCurveAnimation_C_ExecuteUbergraph_BP_SimpleCurveAnimation) == 0x000028, "Wrong size on BP_SimpleCurveAnimation_C_ExecuteUbergraph_BP_SimpleCurveAnimation");
static_assert(offsetof(BP_SimpleCurveAnimation_C_ExecuteUbergraph_BP_SimpleCurveAnimation, EntryPoint) == 0x000000, "Member 'BP_SimpleCurveAnimation_C_ExecuteUbergraph_BP_SimpleCurveAnimation::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_ExecuteUbergraph_BP_SimpleCurveAnimation, Temp_bool_Variable) == 0x000004, "Member 'BP_SimpleCurveAnimation_C_ExecuteUbergraph_BP_SimpleCurveAnimation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_ExecuteUbergraph_BP_SimpleCurveAnimation, K2Node_Event_DeltaSeconds) == 0x000008, "Member 'BP_SimpleCurveAnimation_C_ExecuteUbergraph_BP_SimpleCurveAnimation::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_ExecuteUbergraph_BP_SimpleCurveAnimation, CallFunc_IsDedicatedServer_ReturnValue) == 0x00000C, "Member 'BP_SimpleCurveAnimation_C_ExecuteUbergraph_BP_SimpleCurveAnimation::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_ExecuteUbergraph_BP_SimpleCurveAnimation, CallFunc_GetUseAnimCurve_ReturnValue) == 0x000010, "Member 'BP_SimpleCurveAnimation_C_ExecuteUbergraph_BP_SimpleCurveAnimation::CallFunc_GetUseAnimCurve_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_ExecuteUbergraph_BP_SimpleCurveAnimation, CallFunc_GetTimeRange_MinTime) == 0x000018, "Member 'BP_SimpleCurveAnimation_C_ExecuteUbergraph_BP_SimpleCurveAnimation::CallFunc_GetTimeRange_MinTime' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_ExecuteUbergraph_BP_SimpleCurveAnimation, CallFunc_GetTimeRange_MaxTime) == 0x00001C, "Member 'BP_SimpleCurveAnimation_C_ExecuteUbergraph_BP_SimpleCurveAnimation::CallFunc_GetTimeRange_MaxTime' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_ExecuteUbergraph_BP_SimpleCurveAnimation, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_SimpleCurveAnimation_C_ExecuteUbergraph_BP_SimpleCurveAnimation::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_ExecuteUbergraph_BP_SimpleCurveAnimation, K2Node_Select_Default) == 0x000024, "Member 'BP_SimpleCurveAnimation_C_ExecuteUbergraph_BP_SimpleCurveAnimation::K2Node_Select_Default' has a wrong offset!");

// Function BP_SimpleCurveAnimation.BP_SimpleCurveAnimation_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_SimpleCurveAnimation_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SimpleCurveAnimation_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_SimpleCurveAnimation_C_ReceiveTick");
static_assert(sizeof(BP_SimpleCurveAnimation_C_ReceiveTick) == 0x000004, "Wrong size on BP_SimpleCurveAnimation_C_ReceiveTick");
static_assert(offsetof(BP_SimpleCurveAnimation_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_SimpleCurveAnimation_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_SimpleCurveAnimation.BP_SimpleCurveAnimation_C.UpdateAnimation
// 0x0160 (0x0160 - 0x0000)
struct BP_SimpleCurveAnimation_C_UpdateAnimation final
{
public:
	float                                         DeltaSecond;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               AnimRotation;                                      // 0x0004(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FVector                                AnimLocation;                                      // 0x0010(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurveFloatValue;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            UseAnimCurve;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable1;                               // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MinTime;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MaxTime;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue1;          // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CallFunc_GetUseAnimCurve_ReturnValue;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USceneComponent*>                CallFunc_GetChildrenComponents_Children;           // 0x0048(0x0010)(ZeroConstructor, ReferenceParm)
	class USceneComponent*                        CallFunc_Array_Get_Item;                           // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeLocationAndRotation_SweepHitResult; // 0x0068(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MinTime1;                    // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MaxTime1;                    // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Multiply_RotatorFloat_ReturnValue;        // 0x0104(0x000C)(IsPlainOldData, NoDestructor)
	struct FRotator                               K2Node_Select_Default;                             // 0x0110(0x000C)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X;                            // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RLerp_ReturnValue;                        // 0x0128(0x000C)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0138(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select1_Default;                            // 0x0144(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x0154(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SimpleCurveAnimation_C_UpdateAnimation) == 0x000008, "Wrong alignment on BP_SimpleCurveAnimation_C_UpdateAnimation");
static_assert(sizeof(BP_SimpleCurveAnimation_C_UpdateAnimation) == 0x000160, "Wrong size on BP_SimpleCurveAnimation_C_UpdateAnimation");
static_assert(offsetof(BP_SimpleCurveAnimation_C_UpdateAnimation, DeltaSecond) == 0x000000, "Member 'BP_SimpleCurveAnimation_C_UpdateAnimation::DeltaSecond' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_UpdateAnimation, AnimRotation) == 0x000004, "Member 'BP_SimpleCurveAnimation_C_UpdateAnimation::AnimRotation' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_UpdateAnimation, AnimLocation) == 0x000010, "Member 'BP_SimpleCurveAnimation_C_UpdateAnimation::AnimLocation' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_UpdateAnimation, CurveFloatValue) == 0x00001C, "Member 'BP_SimpleCurveAnimation_C_UpdateAnimation::CurveFloatValue' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_UpdateAnimation, UseAnimCurve) == 0x000020, "Member 'BP_SimpleCurveAnimation_C_UpdateAnimation::UseAnimCurve' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_UpdateAnimation, Temp_bool_Variable) == 0x000028, "Member 'BP_SimpleCurveAnimation_C_UpdateAnimation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_UpdateAnimation, Temp_bool_Variable1) == 0x000029, "Member 'BP_SimpleCurveAnimation_C_UpdateAnimation::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_UpdateAnimation, Temp_int_Variable) == 0x00002C, "Member 'BP_SimpleCurveAnimation_C_UpdateAnimation::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_UpdateAnimation, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'BP_SimpleCurveAnimation_C_UpdateAnimation::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_UpdateAnimation, CallFunc_GetTimeRange_MinTime) == 0x000034, "Member 'BP_SimpleCurveAnimation_C_UpdateAnimation::CallFunc_GetTimeRange_MinTime' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_UpdateAnimation, CallFunc_GetTimeRange_MaxTime) == 0x000038, "Member 'BP_SimpleCurveAnimation_C_UpdateAnimation::CallFunc_GetTimeRange_MaxTime' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_UpdateAnimation, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00003C, "Member 'BP_SimpleCurveAnimation_C_UpdateAnimation::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_UpdateAnimation, CallFunc_Greater_FloatFloat_ReturnValue1) == 0x00003D, "Member 'BP_SimpleCurveAnimation_C_UpdateAnimation::CallFunc_Greater_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_UpdateAnimation, CallFunc_GetUseAnimCurve_ReturnValue) == 0x000040, "Member 'BP_SimpleCurveAnimation_C_UpdateAnimation::CallFunc_GetUseAnimCurve_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_UpdateAnimation, CallFunc_GetChildrenComponents_Children) == 0x000048, "Member 'BP_SimpleCurveAnimation_C_UpdateAnimation::CallFunc_GetChildrenComponents_Children' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_UpdateAnimation, CallFunc_Array_Get_Item) == 0x000058, "Member 'BP_SimpleCurveAnimation_C_UpdateAnimation::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_UpdateAnimation, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'BP_SimpleCurveAnimation_C_UpdateAnimation::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_UpdateAnimation, CallFunc_Less_IntInt_ReturnValue) == 0x000064, "Member 'BP_SimpleCurveAnimation_C_UpdateAnimation::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_UpdateAnimation, CallFunc_K2_SetRelativeLocationAndRotation_SweepHitResult) == 0x000068, "Member 'BP_SimpleCurveAnimation_C_UpdateAnimation::CallFunc_K2_SetRelativeLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_UpdateAnimation, CallFunc_GetFloatValue_ReturnValue) == 0x0000F0, "Member 'BP_SimpleCurveAnimation_C_UpdateAnimation::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_UpdateAnimation, CallFunc_GetTimeRange_MinTime1) == 0x0000F4, "Member 'BP_SimpleCurveAnimation_C_UpdateAnimation::CallFunc_GetTimeRange_MinTime1' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_UpdateAnimation, CallFunc_GetTimeRange_MaxTime1) == 0x0000F8, "Member 'BP_SimpleCurveAnimation_C_UpdateAnimation::CallFunc_GetTimeRange_MaxTime1' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_UpdateAnimation, CallFunc_Less_FloatFloat_ReturnValue) == 0x0000FC, "Member 'BP_SimpleCurveAnimation_C_UpdateAnimation::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_UpdateAnimation, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000100, "Member 'BP_SimpleCurveAnimation_C_UpdateAnimation::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_UpdateAnimation, CallFunc_Multiply_RotatorFloat_ReturnValue) == 0x000104, "Member 'BP_SimpleCurveAnimation_C_UpdateAnimation::CallFunc_Multiply_RotatorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_UpdateAnimation, K2Node_Select_Default) == 0x000110, "Member 'BP_SimpleCurveAnimation_C_UpdateAnimation::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_UpdateAnimation, CallFunc_BreakVector_X) == 0x00011C, "Member 'BP_SimpleCurveAnimation_C_UpdateAnimation::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_UpdateAnimation, CallFunc_BreakVector_Y) == 0x000120, "Member 'BP_SimpleCurveAnimation_C_UpdateAnimation::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_UpdateAnimation, CallFunc_BreakVector_Z) == 0x000124, "Member 'BP_SimpleCurveAnimation_C_UpdateAnimation::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_UpdateAnimation, CallFunc_RLerp_ReturnValue) == 0x000128, "Member 'BP_SimpleCurveAnimation_C_UpdateAnimation::CallFunc_RLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_UpdateAnimation, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x000134, "Member 'BP_SimpleCurveAnimation_C_UpdateAnimation::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_UpdateAnimation, CallFunc_MakeVector_ReturnValue) == 0x000138, "Member 'BP_SimpleCurveAnimation_C_UpdateAnimation::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_UpdateAnimation, K2Node_Select1_Default) == 0x000144, "Member 'BP_SimpleCurveAnimation_C_UpdateAnimation::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_UpdateAnimation, CallFunc_Add_FloatFloat_ReturnValue) == 0x000150, "Member 'BP_SimpleCurveAnimation_C_UpdateAnimation::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_UpdateAnimation, CallFunc_VLerp_ReturnValue) == 0x000154, "Member 'BP_SimpleCurveAnimation_C_UpdateAnimation::CallFunc_VLerp_ReturnValue' has a wrong offset!");

// Function BP_SimpleCurveAnimation.BP_SimpleCurveAnimation_C.GetUseAnimCurve
// 0x0018 (0x0018 - 0x0000)
struct BP_SimpleCurveAnimation_C_GetUseAnimCurve final
{
public:
	class UCurveFloat*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            K2Node_Select_Default;                             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SimpleCurveAnimation_C_GetUseAnimCurve) == 0x000008, "Wrong alignment on BP_SimpleCurveAnimation_C_GetUseAnimCurve");
static_assert(sizeof(BP_SimpleCurveAnimation_C_GetUseAnimCurve) == 0x000018, "Wrong size on BP_SimpleCurveAnimation_C_GetUseAnimCurve");
static_assert(offsetof(BP_SimpleCurveAnimation_C_GetUseAnimCurve, ReturnValue) == 0x000000, "Member 'BP_SimpleCurveAnimation_C_GetUseAnimCurve::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_GetUseAnimCurve, Temp_bool_Variable) == 0x000008, "Member 'BP_SimpleCurveAnimation_C_GetUseAnimCurve::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_GetUseAnimCurve, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000009, "Member 'BP_SimpleCurveAnimation_C_GetUseAnimCurve::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_GetUseAnimCurve, CallFunc_IsValid_ReturnValue) == 0x00000A, "Member 'BP_SimpleCurveAnimation_C_GetUseAnimCurve::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_GetUseAnimCurve, CallFunc_Not_PreBool_ReturnValue) == 0x00000B, "Member 'BP_SimpleCurveAnimation_C_GetUseAnimCurve::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_GetUseAnimCurve, CallFunc_BooleanOR_ReturnValue) == 0x00000C, "Member 'BP_SimpleCurveAnimation_C_GetUseAnimCurve::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SimpleCurveAnimation_C_GetUseAnimCurve, K2Node_Select_Default) == 0x000010, "Member 'BP_SimpleCurveAnimation_C_GetUseAnimCurve::K2Node_Select_Default' has a wrong offset!");

}

