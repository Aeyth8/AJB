#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameStand

#include "Basic.hpp"

#include "BP_AJBInGameStand_classes.hpp"
#include "BP_AJBInGameStand_parameters.hpp"


namespace SDK
{

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.ExecuteUbergraph_BP_AJBInGameStand
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameStand_C::ExecuteUbergraph_BP_AJBInGameStand(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "ExecuteUbergraph_BP_AJBInGameStand");

	Params::BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.TryToChangeSkin
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameStand_C::TryToChangeSkin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "TryToChangeSkin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.OnRep_MatchingPlayerIndex
// (Event, Public, BlueprintEvent)

void ABP_AJBInGameStand_C::OnRep_MatchingPlayerIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "OnRep_MatchingPlayerIndex");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.CleanUp
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bShouldDestroy                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameStand_C::CleanUp(bool bShouldDestroy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "CleanUp");

	Params::BP_AJBInGameStand_C_CleanUp Parms{};

	Parms.bShouldDestroy = bShouldDestroy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.ChangeSkin
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           StandName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// uint8                                   SkinID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameStand_C::ChangeSkin(const class FString& StandName, uint8 SkinID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "ChangeSkin");

	Params::BP_AJBInGameStand_C_ChangeSkin Parms{};

	Parms.StandName = std::move(StandName);
	Parms.SkinID = SkinID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.PlayAppearMontage
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameStand_C::PlayAppearMontage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "PlayAppearMontage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.OnTransitionChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// EStandAccompanyTransition               PrevTransition                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EStandAccompanyTransition               NextTransition                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bBySeparate                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameStand_C::OnTransitionChanged(EStandAccompanyTransition PrevTransition, EStandAccompanyTransition NextTransition, bool bBySeparate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "OnTransitionChanged");

	Params::BP_AJBInGameStand_C_OnTransitionChanged Parms{};

	Parms.PrevTransition = PrevTransition;
	Parms.NextTransition = NextTransition;
	Parms.bBySeparate = bBySeparate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.ReceiveTheWorld
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameStand_C::ReceiveTheWorld(float Time, bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "ReceiveTheWorld");

	Params::BP_AJBInGameStand_C_ReceiveTheWorld Parms{};

	Parms.Time = Time;
	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.StandSetup
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameStand_C::StandSetup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "StandSetup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.OnRep_AccompanyTransition
// (Event, Public, BlueprintEvent)

void ABP_AJBInGameStand_C::OnRep_AccompanyTransition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "OnRep_AccompanyTransition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_AJBInGameStand_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameStand_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "ReceiveTick");

	Params::BP_AJBInGameStand_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.RemoveGameplayTag
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     Tag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameStand_C::RemoveGameplayTag(const struct FGameplayTag& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "RemoveGameplayTag");

	Params::BP_AJBInGameStand_C_RemoveGameplayTag Parms{};

	Parms.Tag = std::move(Tag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.AddGameplayTagWithFloat
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     Tag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// float                                   FloatValue                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameStand_C::AddGameplayTagWithFloat(const struct FGameplayTag& Tag, float FloatValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "AddGameplayTagWithFloat");

	Params::BP_AJBInGameStand_C_AddGameplayTagWithFloat Parms{};

	Parms.Tag = std::move(Tag);
	Parms.FloatValue = FloatValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.AddGameplayTag
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     Tag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class UObject*                          Operator                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     CauserType                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   SerialNumber                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameStand_C::AddGameplayTag(const struct FGameplayTag& Tag, class UObject* Operator, class UObject* Target, const struct FGameplayTag& CauserType, int32 SerialNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "AddGameplayTag");

	Params::BP_AJBInGameStand_C_AddGameplayTag Parms{};

	Parms.Tag = std::move(Tag);
	Parms.Operator = Operator;
	Parms.Target = Target;
	Parms.CauserType = std::move(CauserType);
	Parms.SerialNumber = SerialNumber;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.OnLoaded_41AA3E1A4827BE19D3BF5B91704CF05F
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameStand_C::OnLoaded_41AA3E1A4827BE19D3BF5B91704CF05F(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "OnLoaded_41AA3E1A4827BE19D3BF5B91704CF05F");

	Params::BP_AJBInGameStand_C_OnLoaded_41AA3E1A4827BE19D3BF5B91704CF05F Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.OnLoaded_E20DA2574FB49B31E9DEF5A90663527D
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameStand_C::OnLoaded_E20DA2574FB49B31E9DEF5A90663527D(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "OnLoaded_E20DA2574FB49B31E9DEF5A90663527D");

	Params::BP_AJBInGameStand_C_OnLoaded_E20DA2574FB49B31E9DEF5A90663527D Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.OnLoaded_E20DA2574FB49B31E9DEF5A94242ACE2
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameStand_C::OnLoaded_E20DA2574FB49B31E9DEF5A94242ACE2(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "OnLoaded_E20DA2574FB49B31E9DEF5A94242ACE2");

	Params::BP_AJBInGameStand_C_OnLoaded_E20DA2574FB49B31E9DEF5A94242ACE2 Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.OnLoaded_41AA3E1A4827BE19D3BF5B9104A325BF
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameStand_C::OnLoaded_41AA3E1A4827BE19D3BF5B9104A325BF(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "OnLoaded_41AA3E1A4827BE19D3BF5B9104A325BF");

	Params::BP_AJBInGameStand_C_OnLoaded_41AA3E1A4827BE19D3BF5B9104A325BF Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameStand_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.UpdateTransform
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameStand_C::UpdateTransform(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "UpdateTransform");

	Params::BP_AJBInGameStand_C_UpdateTransform Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.UpdateAccompany
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameStand_C::UpdateAccompany(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "UpdateAccompany");

	Params::BP_AJBInGameStand_C_UpdateAccompany Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.GetTransitionRate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Rate                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameStand_C::GetTransitionRate(float* Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "GetTransitionRate");

	Params::BP_AJBInGameStand_C_GetTransitionRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Rate != nullptr)
		*Rate = Parms.Rate;
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.GetFixedLocation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Location                                               (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameStand_C::GetFixedLocation(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "GetFixedLocation");

	Params::BP_AJBInGameStand_C_GetFixedLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.StopMontage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InBlendOutTime                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     Montage                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameStand_C::StopMontage(float InBlendOutTime, const class UAnimMontage* Montage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "StopMontage");

	Params::BP_AJBInGameStand_C_StopMontage Parms{};

	Parms.InBlendOutTime = InBlendOutTime;
	Parms.Montage = Montage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.CheckSeparation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bIncludeTransition                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsSeparate                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameStand_C::CheckSeparation(bool bIncludeTransition, bool* IsSeparate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "CheckSeparation");

	Params::BP_AJBInGameStand_C_CheckSeparation Parms{};

	Parms.bIncludeTransition = bIncludeTransition;

	UObject::ProcessEvent(Func, &Parms);

	if (IsSeparate != nullptr)
		*IsSeparate = Parms.IsSeparate;
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.InitializeStatus
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameStand_C::InitializeStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "InitializeStatus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.GetDefaultMaxSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ABP_AJBInGameStand_C::GetDefaultMaxSpeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "GetDefaultMaxSpeed");

	Params::BP_AJBInGameStand_C_GetDefaultMaxSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.SetMoveSpeedScale
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameStand_C::SetMoveSpeedScale(float Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "SetMoveSpeedScale");

	Params::BP_AJBInGameStand_C_SetMoveSpeedScale Parms{};

	Parms.Scale = Scale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.ChangeOffset
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   YawToPlayer_deg__0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DistanceToPlayer_cm__0                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OffsetZToPlayer_cm__0                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameStand_C::ChangeOffset(float YawToPlayer_deg__0, float DistanceToPlayer_cm__0, float OffsetZToPlayer_cm__0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "ChangeOffset");

	Params::BP_AJBInGameStand_C_ChangeOffset Parms{};

	Parms.YawToPlayer_deg__0 = YawToPlayer_deg__0;
	Parms.DistanceToPlayer_cm__0 = DistanceToPlayer_cm__0;
	Parms.OffsetZToPlayer_cm__0 = OffsetZToPlayer_cm__0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.InitializeOffset
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameStand_C::InitializeOffset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "InitializeOffset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.ChangeAuraEnable
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameStand_C::ChangeAuraEnable(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "ChangeAuraEnable");

	Params::BP_AJBInGameStand_C_ChangeAuraEnable Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.SpawnAccompanyEmitter
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EStandAccompanyTransition               AccompanyTransition                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameStand_C::SpawnAccompanyEmitter(EStandAccompanyTransition AccompanyTransition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "SpawnAccompanyEmitter");

	Params::BP_AJBInGameStand_C_SpawnAccompanyEmitter Parms{};

	Parms.AccompanyTransition = AccompanyTransition;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.SetMeshInterpSpeed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InterpSpeed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameStand_C::SetMeshInterpSpeed(float InterpSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "SetMeshInterpSpeed");

	Params::BP_AJBInGameStand_C_SetMeshInterpSpeed Parms{};

	Parms.InterpSpeed = InterpSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.ResetMeshInterpSpeed
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameStand_C::ResetMeshInterpSpeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "ResetMeshInterpSpeed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.UpdateTransformOnSeparation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameStand_C::UpdateTransformOnSeparation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "UpdateTransformOnSeparation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.UpdateTransformOnNotSeparation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameStand_C::UpdateTransformOnNotSeparation(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "UpdateTransformOnNotSeparation");

	Params::BP_AJBInGameStand_C_UpdateTransformOnNotSeparation Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.PlaySE
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EStandAccompanyTransition               PrevTransition                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EStandAccompanyTransition               NextTransition                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bAsSeparate                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameStand_C::PlaySE(EStandAccompanyTransition PrevTransition, EStandAccompanyTransition NextTransition, bool bAsSeparate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "PlaySE");

	Params::BP_AJBInGameStand_C_PlaySE Parms{};

	Parms.PrevTransition = PrevTransition;
	Parms.NextTransition = NextTransition;
	Parms.bAsSeparate = bAsSeparate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.TryDisableTick
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameStand_C::TryDisableTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "TryDisableTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.ChangeStandMeshVisibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameStand_C::ChangeStandMeshVisibility(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "ChangeStandMeshVisibility");

	Params::BP_AJBInGameStand_C_ChangeStandMeshVisibility Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.SetValueDissolveAlpha
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameStand_C::SetValueDissolveAlpha(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "SetValueDissolveAlpha");

	Params::BP_AJBInGameStand_C_SetValueDissolveAlpha Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.SetSkeletalMeshWithSkin
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMesh*                    NewMesh                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bReintPose                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameStand_C::SetSkeletalMeshWithSkin(class USkeletalMesh* NewMesh, bool bReintPose)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "SetSkeletalMeshWithSkin");

	Params::BP_AJBInGameStand_C_SetSkeletalMeshWithSkin Parms{};

	Parms.NewMesh = NewMesh;
	Parms.bReintPose = bReintPose;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.ApplyStandParameter
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameStand_C::ApplyStandParameter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "ApplyStandParameter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.GetFixedRelativeLocation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          RelativeLocation                                       (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameStand_C::GetFixedRelativeLocation(struct FVector* RelativeLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "GetFixedRelativeLocation");

	Params::BP_AJBInGameStand_C_GetFixedRelativeLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RelativeLocation != nullptr)
		*RelativeLocation = std::move(Parms.RelativeLocation);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.EnableStandLocationRootBoneRelativeYaw
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameStand_C::EnableStandLocationRootBoneRelativeYaw(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "EnableStandLocationRootBoneRelativeYaw");

	Params::BP_AJBInGameStand_C_EnableStandLocationRootBoneRelativeYaw Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.ChangeToTransformMesh
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMesh*                    TransformMesh                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameStand_C::ChangeToTransformMesh(class USkeletalMesh* TransformMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "ChangeToTransformMesh");

	Params::BP_AJBInGameStand_C_ChangeToTransformMesh Parms{};

	Parms.TransformMesh = TransformMesh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.ChangeToDefaultMesh
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMesh*                    DefaultMesh                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameStand_C::ChangeToDefaultMesh(class USkeletalMesh* DefaultMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "ChangeToDefaultMesh");

	Params::BP_AJBInGameStand_C_ChangeToDefaultMesh Parms{};

	Parms.DefaultMesh = DefaultMesh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.UpdateAuraParameter
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameStand_C::UpdateAuraParameter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "UpdateAuraParameter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.AttachSkeletalMesh
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   NewInterpSpeed                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameStand_C::AttachSkeletalMesh(float NewInterpSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "AttachSkeletalMesh");

	Params::BP_AJBInGameStand_C_AttachSkeletalMesh Parms{};

	Parms.NewInterpSpeed = NewInterpSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.DetachSkeletalMesh
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameStand_C::DetachSkeletalMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "DetachSkeletalMesh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.GetFixedMeshLocation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Location                                               (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameStand_C::GetFixedMeshLocation(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "GetFixedMeshLocation");

	Params::BP_AJBInGameStand_C_GetFixedMeshLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.GetStandInfoForChangingSkin
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           StandName                                              (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// uint8                                   SkinID                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameStand_C::GetStandInfoForChangingSkin(class FString* StandName, uint8* SkinID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "GetStandInfoForChangingSkin");

	Params::BP_AJBInGameStand_C_GetStandInfoForChangingSkin Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (StandName != nullptr)
		*StandName = std::move(Parms.StandName);

	if (SkinID != nullptr)
		*SkinID = Parms.SkinID;
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.GetOffsetConsiderAttachedMesh
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Offset                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameStand_C::GetOffsetConsiderAttachedMesh(struct FVector* Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "GetOffsetConsiderAttachedMesh");

	Params::BP_AJBInGameStand_C_GetOffsetConsiderAttachedMesh Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Offset != nullptr)
		*Offset = std::move(Parms.Offset);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.ChangeStatus
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bShouldAddNewTag                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FGameplayTag                     NewTag                                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// float                                   NewFloatValue                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameStand_C::ChangeStatus(bool bShouldAddNewTag, const struct FGameplayTag& NewTag, float NewFloatValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "ChangeStatus");

	Params::BP_AJBInGameStand_C_ChangeStatus Parms{};

	Parms.bShouldAddNewTag = bShouldAddNewTag;
	Parms.NewTag = std::move(NewTag);
	Parms.NewFloatValue = NewFloatValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.CheckVisibilityByStandTransition
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bVisibility                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameStand_C::CheckVisibilityByStandTransition(bool* bVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "CheckVisibilityByStandTransition");

	Params::BP_AJBInGameStand_C_CheckVisibilityByStandTransition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bVisibility != nullptr)
		*bVisibility = Parms.bVisibility;
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.GetPrimitivesToChangeStencil
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_StencilDigit                          StencilDigit                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UPrimitiveComponent*>      PrimitiveComponents                                    (Parm, OutParm, ZeroConstructor)

void ABP_AJBInGameStand_C::GetPrimitivesToChangeStencil(E_StencilDigit StencilDigit, TArray<class UPrimitiveComponent*>* PrimitiveComponents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "GetPrimitivesToChangeStencil");

	Params::BP_AJBInGameStand_C_GetPrimitivesToChangeStencil Parms{};

	Parms.StencilDigit = StencilDigit;

	UObject::ProcessEvent(Func, &Parms);

	if (PrimitiveComponents != nullptr)
		*PrimitiveComponents = std::move(Parms.PrimitiveComponents);
}


// Function BP_AJBInGameStand.BP_AJBInGameStand_C.GetGameplayTags
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTagContainer            TagContainerCopy                                       (Parm, OutParm)

void ABP_AJBInGameStand_C::GetGameplayTags(struct FGameplayTagContainer* TagContainerCopy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameStand_C", "GetGameplayTags");

	Params::BP_AJBInGameStand_C_GetGameplayTags Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TagContainerCopy != nullptr)
		*TagContainerCopy = std::move(Parms.TagContainerCopy);
}

}

