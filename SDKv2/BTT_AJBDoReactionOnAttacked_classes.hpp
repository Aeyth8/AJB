#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_AJBDoReactionOnAttacked

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTT_AJBDoReactionOnAttacked.BTT_AJBDoReactionOnAttacked_C
// 0x0070 (0x0110 - 0x00A0)
class UBTT_AJBDoReactionOnAttacked_C final : public UBTTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(Transient, DuplicateTransient)
	struct FBlackboardKeySelector                 DestinationKey;                                    // 0x00A8(0x0028)(Edit, BlueprintVisible)
	struct FVector                                DirectionToEnemyXY;                                // 0x00D0(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlackboardKeySelector                 RO_AttackingGionKey;                               // 0x00E0(0x0028)(Edit, BlueprintVisible)
	float                                         ProbabilityToJumpIfMove;                           // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BTT_AJBDoReactionOnAttacked(int32 EntryPoint);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	TArray<struct FVector> FindReachableLocations(class AAIController* AI_Controller, float Distance, const struct FVector& DirectionToEnemyXY_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTT_AJBDoReactionOnAttacked_C">();
	}
	static class UBTT_AJBDoReactionOnAttacked_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTT_AJBDoReactionOnAttacked_C>();
	}
};
static_assert(alignof(UBTT_AJBDoReactionOnAttacked_C) == 0x000008, "Wrong alignment on UBTT_AJBDoReactionOnAttacked_C");
static_assert(sizeof(UBTT_AJBDoReactionOnAttacked_C) == 0x000110, "Wrong size on UBTT_AJBDoReactionOnAttacked_C");
static_assert(offsetof(UBTT_AJBDoReactionOnAttacked_C, UberGraphFrame) == 0x0000A0, "Member 'UBTT_AJBDoReactionOnAttacked_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTT_AJBDoReactionOnAttacked_C, DestinationKey) == 0x0000A8, "Member 'UBTT_AJBDoReactionOnAttacked_C::DestinationKey' has a wrong offset!");
static_assert(offsetof(UBTT_AJBDoReactionOnAttacked_C, DirectionToEnemyXY) == 0x0000D0, "Member 'UBTT_AJBDoReactionOnAttacked_C::DirectionToEnemyXY' has a wrong offset!");
static_assert(offsetof(UBTT_AJBDoReactionOnAttacked_C, RO_AttackingGionKey) == 0x0000E0, "Member 'UBTT_AJBDoReactionOnAttacked_C::RO_AttackingGionKey' has a wrong offset!");
static_assert(offsetof(UBTT_AJBDoReactionOnAttacked_C, ProbabilityToJumpIfMove) == 0x000108, "Member 'UBTT_AJBDoReactionOnAttacked_C::ProbabilityToJumpIfMove' has a wrong offset!");

}

