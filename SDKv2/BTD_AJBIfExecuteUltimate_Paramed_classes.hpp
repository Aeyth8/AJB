#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTD_AJBIfExecuteUltimate_Paramed

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTD_AJBIfExecuteUltimate_Paramed.BTD_AJBIfExecuteUltimate_Paramed_C
// 0x0048 (0x00E8 - 0x00A0)
class UBTD_AJBIfExecuteUltimate_Paramed_C final : public UBTDecorator_BlueprintBase
{
public:
	class FName                                   ProbabilityForExecute;                             // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ProbabilityForExecuteOnCriticalSituation;          // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   HPRatioForCritical;                                // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SafeAreaRadiusForCritical;                         // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBlackboardKeySelector                 RO_FocusingEnemyKey;                               // 0x00C0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly)

public:
	bool PerformConditionCheckAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTD_AJBIfExecuteUltimate_Paramed_C">();
	}
	static class UBTD_AJBIfExecuteUltimate_Paramed_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTD_AJBIfExecuteUltimate_Paramed_C>();
	}
};
static_assert(alignof(UBTD_AJBIfExecuteUltimate_Paramed_C) == 0x000008, "Wrong alignment on UBTD_AJBIfExecuteUltimate_Paramed_C");
static_assert(sizeof(UBTD_AJBIfExecuteUltimate_Paramed_C) == 0x0000E8, "Wrong size on UBTD_AJBIfExecuteUltimate_Paramed_C");
static_assert(offsetof(UBTD_AJBIfExecuteUltimate_Paramed_C, ProbabilityForExecute) == 0x0000A0, "Member 'UBTD_AJBIfExecuteUltimate_Paramed_C::ProbabilityForExecute' has a wrong offset!");
static_assert(offsetof(UBTD_AJBIfExecuteUltimate_Paramed_C, ProbabilityForExecuteOnCriticalSituation) == 0x0000A8, "Member 'UBTD_AJBIfExecuteUltimate_Paramed_C::ProbabilityForExecuteOnCriticalSituation' has a wrong offset!");
static_assert(offsetof(UBTD_AJBIfExecuteUltimate_Paramed_C, HPRatioForCritical) == 0x0000B0, "Member 'UBTD_AJBIfExecuteUltimate_Paramed_C::HPRatioForCritical' has a wrong offset!");
static_assert(offsetof(UBTD_AJBIfExecuteUltimate_Paramed_C, SafeAreaRadiusForCritical) == 0x0000B8, "Member 'UBTD_AJBIfExecuteUltimate_Paramed_C::SafeAreaRadiusForCritical' has a wrong offset!");
static_assert(offsetof(UBTD_AJBIfExecuteUltimate_Paramed_C, RO_FocusingEnemyKey) == 0x0000C0, "Member 'UBTD_AJBIfExecuteUltimate_Paramed_C::RO_FocusingEnemyKey' has a wrong offset!");

}

