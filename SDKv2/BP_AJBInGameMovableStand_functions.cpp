#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameMovableStand

#include "Basic.hpp"

#include "BP_AJBInGameMovableStand_classes.hpp"
#include "BP_AJBInGameMovableStand_parameters.hpp"


namespace SDK
{

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.OnMovementCompleted__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::OnMovementCompleted__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "OnMovementCompleted__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.ExecuteUbergraph_BP_AJBInGameMovableStand
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_C::ExecuteUbergraph_BP_AJBInGameMovableStand(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "ExecuteUbergraph_BP_AJBInGameMovableStand");

	Params::BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.StopSpecialBreakDownAnimation
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::StopSpecialBreakDownAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "StopSpecialBreakDownAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.PlaySpecialBreakDownAnimation
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::PlaySpecialBreakDownAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "PlaySpecialBreakDownAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.TryToChangeSkin
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::TryToChangeSkin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "TryToChangeSkin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.OnRep_MatchingPlayerIndex
// (Event, Public, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::OnRep_MatchingPlayerIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "OnRep_MatchingPlayerIndex");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.ChangeRelatedMeshStencilValueByDigit
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// E_StencilDigit                          DigitToChange                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFlag                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bAlsoChangeRelatedActors                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_C::ChangeRelatedMeshStencilValueByDigit(E_StencilDigit DigitToChange, bool bFlag, bool bAlsoChangeRelatedActors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "ChangeRelatedMeshStencilValueByDigit");

	Params::BP_AJBInGameMovableStand_C_ChangeRelatedMeshStencilValueByDigit Parms{};

	Parms.DigitToChange = DigitToChange;
	Parms.bFlag = bFlag;
	Parms.bAlsoChangeRelatedActors = bAlsoChangeRelatedActors;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.OnAccompany
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::OnAccompany()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "OnAccompany");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.CleanUp
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bShouldDestroy                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_C::CleanUp(bool bShouldDestroy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "CleanUp");

	Params::BP_AJBInGameMovableStand_C_CleanUp Parms{};

	Parms.bShouldDestroy = bShouldDestroy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.OnPlayerControllerDestroyed
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::OnPlayerControllerDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "OnPlayerControllerDestroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.MovableStandSetup
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::MovableStandSetup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "MovableStandSetup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.FollowCharacterWhenUnpossessed_OnServer
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::FollowCharacterWhenUnpossessed_OnServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "FollowCharacterWhenUnpossessed_OnServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.ReceiveTheWorld
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bOperatorIsEmpty                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_C::ReceiveTheWorld(float Time, bool bEnable, bool bOperatorIsEmpty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "ReceiveTheWorld");

	Params::BP_AJBInGameMovableStand_C_ReceiveTheWorld Parms{};

	Parms.Time = Time;
	Parms.bEnable = bEnable;
	Parms.bOperatorIsEmpty = bOperatorIsEmpty;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.ForwardTransparence
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::ForwardTransparence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "ForwardTransparence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.OnRep_AppearanceTransition
// (Event, Public, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::OnRep_AppearanceTransition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "OnRep_AppearanceTransition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.OnDisappear
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::OnDisappear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "OnDisappear");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.OnAppear
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::OnAppear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "OnAppear");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.BackwardTransparence
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::BackwardTransparence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "BackwardTransparence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "ReceiveTick");

	Params::BP_AJBInGameMovableStand_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.OnReleasedCrouch
// (Event, Public, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::OnReleasedCrouch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "OnReleasedCrouch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.OnPressedCrouch
// (Event, Public, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::OnPressedCrouch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "OnPressedCrouch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.OnReleasedJump
// (Event, Public, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::OnReleasedJump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "OnReleasedJump");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.OnPressedJump
// (Event, Public, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::OnPressedJump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "OnPressedJump");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.OnPressedShoot
// (Event, Public, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::OnPressedShoot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "OnPressedShoot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.UpdateMoveInput
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::UpdateMoveInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "UpdateMoveInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.MoveForward
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_C::MoveForward(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "MoveForward");

	Params::BP_AJBInGameMovableStand_C_MoveForward Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.UpdateCameraInput
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::UpdateCameraInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "UpdateCameraInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.OnPressedInteract
// (Event, Public, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::OnPressedInteract()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "OnPressedInteract");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.MoveRight
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_C::MoveRight(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "MoveRight");

	Params::BP_AJBInGameMovableStand_C_MoveRight Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.LookupRate
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_C::LookupRate(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "LookupRate");

	Params::BP_AJBInGameMovableStand_C_LookupRate Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.TurnRate
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_C::TurnRate(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "TurnRate");

	Params::BP_AJBInGameMovableStand_C_TurnRate Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.OnNotSpectated_Local
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::OnNotSpectated_Local()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "OnNotSpectated_Local");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.OnSpectated_Local
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::OnSpectated_Local()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "OnSpectated_Local");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.RemoveGameplayTag
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     Tag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_C::RemoveGameplayTag(const struct FGameplayTag& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "RemoveGameplayTag");

	Params::BP_AJBInGameMovableStand_C_RemoveGameplayTag Parms{};

	Parms.Tag = std::move(Tag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.AddGameplayTagWithFloat
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     Tag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// float                                   FloatValue                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_C::AddGameplayTagWithFloat(const struct FGameplayTag& Tag, float FloatValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "AddGameplayTagWithFloat");

	Params::BP_AJBInGameMovableStand_C_AddGameplayTagWithFloat Parms{};

	Parms.Tag = std::move(Tag);
	Parms.FloatValue = FloatValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.AddGameplayTag
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     Tag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class UObject*                          Operator                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     CauserType                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   SerialNumber                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_C::AddGameplayTag(const struct FGameplayTag& Tag, class UObject* Operator, class UObject* Target, const struct FGameplayTag& CauserType, int32 SerialNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "AddGameplayTag");

	Params::BP_AJBInGameMovableStand_C_AddGameplayTag Parms{};

	Parms.Tag = std::move(Tag);
	Parms.Operator = Operator;
	Parms.Target = Target;
	Parms.CauserType = std::move(CauserType);
	Parms.SerialNumber = SerialNumber;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.OnAreaOut
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_AJBInGameCharacter_C*         OperatorCharacter                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     EffectTag                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     SETag                                                  (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_C::OnAreaOut(class ABP_AJBInGameCharacter_C* OperatorCharacter, const struct FGameplayTag& EffectTag, const struct FGameplayTag& SETag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "OnAreaOut");

	Params::BP_AJBInGameMovableStand_C_OnAreaOut Parms{};

	Parms.OperatorCharacter = OperatorCharacter;
	Parms.EffectTag = std::move(EffectTag);
	Parms.SETag = std::move(SETag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.OnAreaIn
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_AJBInGameCharacter_C*         OperatorCharacter                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     EffectTag                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     SETag                                                  (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    bNoDamage                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_C::OnAreaIn(class ABP_AJBInGameCharacter_C* OperatorCharacter, const struct FGameplayTag& EffectTag, const struct FGameplayTag& SETag, bool bNoDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "OnAreaIn");

	Params::BP_AJBInGameMovableStand_C_OnAreaIn Parms{};

	Parms.OperatorCharacter = OperatorCharacter;
	Parms.EffectTag = std::move(EffectTag);
	Parms.SETag = std::move(SETag);
	Parms.bNoDamage = bNoDamage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.MC_AJBDamage
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    bRemainHP                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_C::MC_AJBDamage(const struct FGameplayTag& DamageType, bool bRemainHP, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "MC_AJBDamage");

	Params::BP_AJBInGameMovableStand_C_MC_AJBDamage Parms{};

	Parms.DamageType = std::move(DamageType);
	Parms.bRemainHP = bRemainHP;
	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.AJBDamage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamagedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DamageForHPAP                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DamageForAAP                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CutDamage                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   SerialNumber                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EDamagePriority                         DamagePriority                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AttackDistance                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WithSeparatedStandAttack                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HitEnemysSeparatedStand                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bPenetrateAP                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bNotUseCollision                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_C::AJBDamage(class AActor* DamagedActor, int32 DamageForHPAP, int32 DamageForAAP, int32 CutDamage, const struct FGameplayTag& DamageType, int32 SerialNumber, EDamagePriority DamagePriority, float AttackDistance, class AActor* DamageCauser, bool WithSeparatedStandAttack, bool HitEnemysSeparatedStand, bool bPenetrateAP, bool bNotUseCollision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "AJBDamage");

	Params::BP_AJBInGameMovableStand_C_AJBDamage Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.DamageForHPAP = DamageForHPAP;
	Parms.DamageForAAP = DamageForAAP;
	Parms.CutDamage = CutDamage;
	Parms.DamageType = std::move(DamageType);
	Parms.SerialNumber = SerialNumber;
	Parms.DamagePriority = DamagePriority;
	Parms.AttackDistance = AttackDistance;
	Parms.DamageCauser = DamageCauser;
	Parms.WithSeparatedStandAttack = WithSeparatedStandAttack;
	Parms.HitEnemysSeparatedStand = HitEnemysSeparatedStand;
	Parms.bPenetrateAP = bPenetrateAP;
	Parms.bNotUseCollision = bNotUseCollision;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.OnAreaDamageDisabled
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::OnAreaDamageDisabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "OnAreaDamageDisabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.OnPassiveDisabled
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::OnPassiveDisabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "OnPassiveDisabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.OnDamageDisabled
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::OnDamageDisabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "OnDamageDisabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.DamageOverlapped
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bPenetrating                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FGameplayTag                     FactorTag                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_C::DamageOverlapped(class AActor* DamageCauser, const struct FVector& HitLocation, bool bPenetrating, const struct FGameplayTag& FactorTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "DamageOverlapped");

	Params::BP_AJBInGameMovableStand_C_DamageOverlapped Parms{};

	Parms.DamageCauser = DamageCauser;
	Parms.HitLocation = std::move(HitLocation);
	Parms.bPenetrating = bPenetrating;
	Parms.FactorTag = std::move(FactorTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.OnNoDamageChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_AJBInGameCharacter_C*         OperaatorCharacter                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bNewFlag                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FGameplayTag                     EffectTag                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     SETag                                                  (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_C::OnNoDamageChanged(class ABP_AJBInGameCharacter_C* OperaatorCharacter, bool bNewFlag, const struct FGameplayTag& EffectTag, const struct FGameplayTag& SETag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "OnNoDamageChanged");

	Params::BP_AJBInGameMovableStand_C_OnNoDamageChanged Parms{};

	Parms.OperaatorCharacter = OperaatorCharacter;
	Parms.bNewFlag = bNewFlag;
	Parms.EffectTag = std::move(EffectTag);
	Parms.SETag = std::move(SETag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.OnLoaded_94E15C0B498789D9D5B32685F1CFF920
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_C::OnLoaded_94E15C0B498789D9D5B32685F1CFF920(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "OnLoaded_94E15C0B498789D9D5B32685F1CFF920");

	Params::BP_AJBInGameMovableStand_C_OnLoaded_94E15C0B498789D9D5B32685F1CFF920 Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.OnLoaded_194708B14BCBDFECB467A4BD5AD390D3
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_C::OnLoaded_194708B14BCBDFECB467A4BD5AD390D3(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "OnLoaded_194708B14BCBDFECB467A4BD5AD390D3");

	Params::BP_AJBInGameMovableStand_C_OnLoaded_194708B14BCBDFECB467A4BD5AD390D3 Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.AppearUpdate__UpdateFunc
// (BlueprintEvent)

void ABP_AJBInGameMovableStand_C::AppearUpdate__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "AppearUpdate__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.AppearUpdate__FinishedFunc
// (BlueprintEvent)

void ABP_AJBInGameMovableStand_C::AppearUpdate__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "AppearUpdate__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.SystemEnable
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bApplyStandVisibility                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_C::SystemEnable(bool bEnable, bool bApplyStandVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "SystemEnable");

	Params::BP_AJBInGameMovableStand_C_SystemEnable Parms{};

	Parms.bEnable = bEnable;
	Parms.bApplyStandVisibility = bApplyStandVisibility;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.CalcCutDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   SrcDamage                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CutDamage                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_C::CalcCutDamage(int32 SrcDamage, int32* CutDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "CalcCutDamage");

	Params::BP_AJBInGameMovableStand_C_CalcCutDamage Parms{};

	Parms.SrcDamage = SrcDamage;

	UObject::ProcessEvent(Func, &Parms);

	if (CutDamage != nullptr)
		*CutDamage = Parms.CutDamage;
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.UpdateCameraParam
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::UpdateCameraParam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "UpdateCameraParam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.ChangeAuraEnable
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_C::ChangeAuraEnable(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "ChangeAuraEnable");

	Params::BP_AJBInGameMovableStand_C_ChangeAuraEnable Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.SpawnAppearEffect
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_C::SpawnAppearEffect(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "SpawnAppearEffect");

	Params::BP_AJBInGameMovableStand_C_SpawnAppearEffect Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.UpdateTransparence
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CurrentRate                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_C::UpdateTransparence(float CurrentRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "UpdateTransparence");

	Params::BP_AJBInGameMovableStand_C_UpdateTransparence Parms{};

	Parms.CurrentRate = CurrentRate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.Appearance
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::Appearance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "Appearance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.ChangeEnableCollision
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_C::ChangeEnableCollision(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "ChangeEnableCollision");

	Params::BP_AJBInGameMovableStand_C_ChangeEnableCollision Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.GetCollisionProfileName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             ProfileName                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_C::GetCollisionProfileName(class FName* ProfileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "GetCollisionProfileName");

	Params::BP_AJBInGameMovableStand_C_GetCollisionProfileName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ProfileName != nullptr)
		*ProfileName = Parms.ProfileName;
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.SetPassiveSkillParticleVisibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNewVisibility                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_C::SetPassiveSkillParticleVisibility(bool bNewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "SetPassiveSkillParticleVisibility");

	Params::BP_AJBInGameMovableStand_C_SetPassiveSkillParticleVisibility Parms{};

	Parms.bNewVisibility = bNewVisibility;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.ChangeStatus
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bShouldAddNewTag                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FGameplayTag                     NewTag                                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// float                                   NewFloatValue                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_C::ChangeStatus(bool bShouldAddNewTag, const struct FGameplayTag& NewTag, float NewFloatValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "ChangeStatus");

	Params::BP_AJBInGameMovableStand_C_ChangeStatus Parms{};

	Parms.bShouldAddNewTag = bShouldAddNewTag;
	Parms.NewTag = std::move(NewTag);
	Parms.NewFloatValue = NewFloatValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.DamageAffecterAreaIn
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_AJBInGameCharacter_C*         OperatorCharacter                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     EffectTag                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     SETag                                                  (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_C::DamageAffecterAreaIn(class ABP_AJBInGameCharacter_C* OperatorCharacter, const struct FGameplayTag& EffectTag, const struct FGameplayTag& SETag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "DamageAffecterAreaIn");

	Params::BP_AJBInGameMovableStand_C_DamageAffecterAreaIn Parms{};

	Parms.OperatorCharacter = OperatorCharacter;
	Parms.EffectTag = std::move(EffectTag);
	Parms.SETag = std::move(SETag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.DamageAffecterAreaOut
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_AJBInGameCharacter_C*         OperatorCharacter                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     EffectTag                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     SETag                                                  (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_C::DamageAffecterAreaOut(class ABP_AJBInGameCharacter_C* OperatorCharacter, const struct FGameplayTag& EffectTag, const struct FGameplayTag& SETag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "DamageAffecterAreaOut");

	Params::BP_AJBInGameMovableStand_C_DamageAffecterAreaOut Parms{};

	Parms.OperatorCharacter = OperatorCharacter;
	Parms.EffectTag = std::move(EffectTag);
	Parms.SETag = std::move(SETag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.CalcCurrentRotationValue
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   TurnedRotation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LookupRotation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_C::CalcCurrentRotationValue(float* TurnedRotation, float* LookupRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "CalcCurrentRotationValue");

	Params::BP_AJBInGameMovableStand_C_CalcCurrentRotationValue Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TurnedRotation != nullptr)
		*TurnedRotation = Parms.TurnedRotation;

	if (LookupRotation != nullptr)
		*LookupRotation = Parms.LookupRotation;
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.UpdateMovementForwardInput
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          WorldDirection                                         (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ScaleValue                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_C::UpdateMovementForwardInput(float Value, struct FVector* WorldDirection, float* ScaleValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "UpdateMovementForwardInput");

	Params::BP_AJBInGameMovableStand_C_UpdateMovementForwardInput Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);

	if (WorldDirection != nullptr)
		*WorldDirection = std::move(Parms.WorldDirection);

	if (ScaleValue != nullptr)
		*ScaleValue = Parms.ScaleValue;
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.UpdateMovementRightInput
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          WorldDirection                                         (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ScaleValue                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_C::UpdateMovementRightInput(float Value, struct FVector* WorldDirection, float* ScaleValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "UpdateMovementRightInput");

	Params::BP_AJBInGameMovableStand_C_UpdateMovementRightInput Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);

	if (WorldDirection != nullptr)
		*WorldDirection = std::move(Parms.WorldDirection);

	if (ScaleValue != nullptr)
		*ScaleValue = Parms.ScaleValue;
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.FilteringMovementDistanceLimit
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          InputWorldDirection                                    (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InputScale                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OutputWorldDirection                                   (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OutputScale                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_C::FilteringMovementDistanceLimit(const struct FVector& InputWorldDirection, float InputScale, struct FVector* OutputWorldDirection, float* OutputScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "FilteringMovementDistanceLimit");

	Params::BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit Parms{};

	Parms.InputWorldDirection = std::move(InputWorldDirection);
	Parms.InputScale = InputScale;

	UObject::ProcessEvent(Func, &Parms);

	if (OutputWorldDirection != nullptr)
		*OutputWorldDirection = std::move(Parms.OutputWorldDirection);

	if (OutputScale != nullptr)
		*OutputScale = Parms.OutputScale;
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.SetSkeletalMeshWithSkin
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMesh*                    NewMesh                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bReintPose                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_C::SetSkeletalMeshWithSkin(class USkeletalMesh* NewMesh, bool bReintPose)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "SetSkeletalMeshWithSkin");

	Params::BP_AJBInGameMovableStand_C_SetSkeletalMeshWithSkin Parms{};

	Parms.NewMesh = NewMesh;
	Parms.bReintPose = bReintPose;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.UpdateMovementUpInput
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          WorldDirection                                         (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_C::UpdateMovementUpInput(struct FVector* WorldDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "UpdateMovementUpInput");

	Params::BP_AJBInGameMovableStand_C_UpdateMovementUpInput Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WorldDirection != nullptr)
		*WorldDirection = std::move(Parms.WorldDirection);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.ApplyMovableStandParameter
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::ApplyMovableStandParameter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "ApplyMovableStandParameter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.SetupMaterials
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FST_CustomSkinMaterials>  StandMaterial                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)

void ABP_AJBInGameMovableStand_C::SetupMaterials(TArray<struct FST_CustomSkinMaterials>& StandMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "SetupMaterials");

	Params::BP_AJBInGameMovableStand_C_SetupMaterials Parms{};

	Parms.StandMaterial = std::move(StandMaterial);

	UObject::ProcessEvent(Func, &Parms);

	StandMaterial = std::move(Parms.StandMaterial);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.UpdateMaterials
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::UpdateMaterials()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "UpdateMaterials");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.OnBeforeInteract
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::OnBeforeInteract()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "OnBeforeInteract");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.AddControllerInputs
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::AddControllerInputs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "AddControllerInputs");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.ChangeStandMovementMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_C::ChangeStandMovementMode(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "ChangeStandMovementMode");

	Params::BP_AJBInGameMovableStand_C_ChangeStandMovementMode Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.GetStandInfoForChangingSkin
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           StandName                                              (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// uint8                                   SkinID                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_C::GetStandInfoForChangingSkin(class FString* StandName, uint8* SkinID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "GetStandInfoForChangingSkin");

	Params::BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (StandName != nullptr)
		*StandName = std::move(Parms.StandName);

	if (SkinID != nullptr)
		*SkinID = Parms.SkinID;
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.CalcInputScaleUp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InputScale                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_C::CalcInputScaleUp(float* InputScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "CalcInputScaleUp");

	Params::BP_AJBInGameMovableStand_C_CalcInputScaleUp Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InputScale != nullptr)
		*InputScale = Parms.InputScale;
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.CalcInputScaleDown
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InputScale                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_C::CalcInputScaleDown(float* InputScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "CalcInputScaleDown");

	Params::BP_AJBInGameMovableStand_C_CalcInputScaleDown Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InputScale != nullptr)
		*InputScale = Parms.InputScale;
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.CheckMoveZAxis
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bMove                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_C::CheckMoveZAxis(bool* bMove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "CheckMoveZAxis");

	Params::BP_AJBInGameMovableStand_C_CheckMoveZAxis Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bMove != nullptr)
		*bMove = Parms.bMove;
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.ResetMoveZAxis
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_C::ResetMoveZAxis()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "ResetMoveZAxis");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.CheckChangeableSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bChangeable                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_C::CheckChangeableSpeed(bool* bChangeable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "CheckChangeableSpeed");

	Params::BP_AJBInGameMovableStand_C_CheckChangeableSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bChangeable != nullptr)
		*bChangeable = Parms.bChangeable;
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.OwnHitParam
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bCharacter                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bLeftAP                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FGameplayTag                     ParticleTagBlockedByAAP                                (Parm, OutParm, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     SETagBlockedByAAP                                      (Parm, OutParm, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_C::OwnHitParam(bool* bCharacter, bool* bLeftAP, struct FGameplayTag* ParticleTagBlockedByAAP, struct FGameplayTag* SETagBlockedByAAP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "OwnHitParam");

	Params::BP_AJBInGameMovableStand_C_OwnHitParam Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bCharacter != nullptr)
		*bCharacter = Parms.bCharacter;

	if (bLeftAP != nullptr)
		*bLeftAP = Parms.bLeftAP;

	if (ParticleTagBlockedByAAP != nullptr)
		*ParticleTagBlockedByAAP = std::move(Parms.ParticleTagBlockedByAAP);

	if (SETagBlockedByAAP != nullptr)
		*SETagBlockedByAAP = std::move(Parms.SETagBlockedByAAP);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.CheckTargetSelf
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bForDamageOverlap                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bIgnoreMovableStand                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bTarget                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_C::CheckTargetSelf(class AActor* DamageCauser, bool bForDamageOverlap, bool bIgnoreMovableStand, bool* bTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "CheckTargetSelf");

	Params::BP_AJBInGameMovableStand_C_CheckTargetSelf Parms{};

	Parms.DamageCauser = DamageCauser;
	Parms.bForDamageOverlap = bForDamageOverlap;
	Parms.bIgnoreMovableStand = bIgnoreMovableStand;

	UObject::ProcessEvent(Func, &Parms);

	if (bTarget != nullptr)
		*bTarget = Parms.bTarget;
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.IfCheckDamageOverlap
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_AJBInGameMovableStand_C::IfCheckDamageOverlap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "IfCheckDamageOverlap");

	Params::BP_AJBInGameMovableStand_C_IfCheckDamageOverlap Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.CheckDisableDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDisableDamage                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_C::CheckDisableDamage(class AActor* DamageCauser, bool* bDisableDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "CheckDisableDamage");

	Params::BP_AJBInGameMovableStand_C_CheckDisableDamage Parms{};

	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);

	if (bDisableDamage != nullptr)
		*bDisableDamage = Parms.bDisableDamage;
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.CheckDisablePassive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           PassiveCauser                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     PassiveTag                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    bDisablePassive                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_C::CheckDisablePassive(class AActor* PassiveCauser, const struct FGameplayTag& PassiveTag, bool* bDisablePassive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "CheckDisablePassive");

	Params::BP_AJBInGameMovableStand_C_CheckDisablePassive Parms{};

	Parms.PassiveCauser = PassiveCauser;
	Parms.PassiveTag = std::move(PassiveTag);

	UObject::ProcessEvent(Func, &Parms);

	if (bDisablePassive != nullptr)
		*bDisablePassive = Parms.bDisablePassive;
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.CheckDisableAreaDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDisableAreadamage                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_C::CheckDisableAreaDamage(bool* bDisableAreadamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "CheckDisableAreaDamage");

	Params::BP_AJBInGameMovableStand_C_CheckDisableAreaDamage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDisableAreadamage != nullptr)
		*bDisableAreadamage = Parms.bDisableAreadamage;
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.CheckNoDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bNoDamage                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_C::CheckNoDamage(class AActor* DamageCauser, bool* bNoDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "CheckNoDamage");

	Params::BP_AJBInGameMovableStand_C_CheckNoDamage Parms{};

	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);

	if (bNoDamage != nullptr)
		*bNoDamage = Parms.bNoDamage;
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.IsReactedByReticule
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bResult                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_C::IsReactedByReticule(bool* bResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "IsReactedByReticule");

	Params::BP_AJBInGameMovableStand_C_IsReactedByReticule Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bResult != nullptr)
		*bResult = Parms.bResult;
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.IgnoreTrace
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIgnore                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_C::IgnoreTrace(bool* bIgnore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "IgnoreTrace");

	Params::BP_AJBInGameMovableStand_C_IgnoreTrace Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bIgnore != nullptr)
		*bIgnore = Parms.bIgnore;
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.CheckDisableDirectDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDisableDirectDamage                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_C::CheckDisableDirectDamage(class AActor* DamageCauser, bool* bDisableDirectDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "CheckDisableDirectDamage");

	Params::BP_AJBInGameMovableStand_C_CheckDisableDirectDamage Parms{};

	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);

	if (bDisableDirectDamage != nullptr)
		*bDisableDirectDamage = Parms.bDisableDirectDamage;
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.CheckAreaIn
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Length                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PartitionNum                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bCheckUnder                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   ValidGroundOffsetZ                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bTarget                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_C::CheckAreaIn(const struct FVector& Location, const struct FRotator& Rotation, float Radius, float Length, int32 PartitionNum, bool bCheckUnder, float ValidGroundOffsetZ, bool* bTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "CheckAreaIn");

	Params::BP_AJBInGameMovableStand_C_CheckAreaIn Parms{};

	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.Radius = Radius;
	Parms.Length = Length;
	Parms.PartitionNum = PartitionNum;
	Parms.bCheckUnder = bCheckUnder;
	Parms.ValidGroundOffsetZ = ValidGroundOffsetZ;

	UObject::ProcessEvent(Func, &Parms);

	if (bTarget != nullptr)
		*bTarget = Parms.bTarget;
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.GetGameplayTags
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTagContainer            TagContainerCopy                                       (Parm, OutParm)

void ABP_AJBInGameMovableStand_C::GetGameplayTags(struct FGameplayTagContainer* TagContainerCopy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "GetGameplayTags");

	Params::BP_AJBInGameMovableStand_C_GetGameplayTags Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TagContainerCopy != nullptr)
		*TagContainerCopy = std::move(Parms.TagContainerCopy);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.GetPrimitivesToChangeStencil
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_StencilDigit                          StencilDigit                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UPrimitiveComponent*>      PrimitiveComponents                                    (Parm, OutParm, ZeroConstructor)

void ABP_AJBInGameMovableStand_C::GetPrimitivesToChangeStencil(E_StencilDigit StencilDigit, TArray<class UPrimitiveComponent*>* PrimitiveComponents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "GetPrimitivesToChangeStencil");

	Params::BP_AJBInGameMovableStand_C_GetPrimitivesToChangeStencil Parms{};

	Parms.StencilDigit = StencilDigit;

	UObject::ProcessEvent(Func, &Parms);

	if (PrimitiveComponents != nullptr)
		*PrimitiveComponents = std::move(Parms.PrimitiveComponents);
}


// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.GetTargetLocation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_C::GetTargetLocation(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_C", "GetTargetLocation");

	Params::BP_AJBInGameMovableStand_C_GetTargetLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}

}

