#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBAIDebugComponent

#include "Basic.hpp"

#include "ST_AIDebugEventLog_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBAIDebugComponent.BP_AJBAIDebugComponent_C
// 0x00D0 (0x01C0 - 0x00F0)
class UBP_AJBAIDebugComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00F0(0x0008)(Transient, DuplicateTransient)
	class FString                                 StatusCaption;                                     // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 StatusString;                                      // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 NodeStatusForMovement;                             // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 NodeStatusForAction;                               // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 NodeStatusForLastError;                            // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bDebugShowStatuses;                                // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBInGameAIInputProxy_C*            InputComponent;                                    // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_AJBInGameAIRecognition_C*           Recognition;                                       // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebugDrawCurrentTask;                             // 0x0160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBDebugAIStartPoint_C*             DebugAIStartPoint;                                 // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FST_AIDebugEventLog>            EventLogs;                                         // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class AAJBInGameGameState*                    InGameGameState;                                   // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRequestingMonitor;                                // 0x0188(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBInGameAIEnvironment_C*           Environment;                                       // 0x0190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MonitoringRequestCounter;                          // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPrintAtRequestedMonitoring;                       // 0x019C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19D[0x3];                                      // 0x019D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBAIMessenger_C*                   EventReplaySendingTarget;                          // 0x01A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EventReplayTargetIndex;                            // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              SpawnedGameTime;                                   // 0x01B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  Pawn;                                              // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBAIDebugComponent(int32 EntryPoint);
	void OnPawnDestroy(class AActor* DestroyedActor);
	void OnNPCCharacterDead(const struct FGameplayTag& DamageType, class AActor* DeadActor, class AActor* DamageCauser);
	void ChangeBehaviorToIdle();
	void SetupWithDebugAIStartPoint(class ABP_AJBDebugAIStartPoint_C* DebugAIStartPoint_0);
	void UpdateStatusLabel();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void SetupLogging();
	void OnDeadLogging(class AAIController* AIController, const struct FGameplayTag& DamageType);
	void OnEventUnlockedLogging(const struct FGameplayTag& EventTag);
	void OnEventLockedLogging(const struct FGameplayTag& EventTag);
	void OnErrorContextPushedLogging(const struct FGameplayTag& Tag);
	void OnContextPushedLogging(const struct FGameplayTag& Tag);
	void LogDumpLast30SecLogs();
	void LogDumpAllLogs();
	void LogEventLock(const struct FGameplayTag& EventTag, bool bLocked);
	void LogEventContextPush(const struct FGameplayTag& EventTag);
	void OnDeadMonitoring(class AAIController* AIController, const struct FGameplayTag& DamageType);
	void OnEventUnlockedMonitoring(const struct FGameplayTag& EventTag);
	void OnEventLockedMonitoring(const struct FGameplayTag& EventTag);
	void SetupMonitoring();
	void CancelMonitor(const struct FGameplayTag& Tag);
	void RequestMonitor(const struct FGameplayTag& Tag);
	void OnEventReplayPathPushed(const struct FGameplayTag& Tag, class UNavigationPath* NavigationPath);
	void OnDeadAtRecognition(class AAIController* AIController, const struct FGameplayTag& DamageType);
	void OnEventReplayPushed(const struct FGameplayTag& Tag, const struct FVector& V1, const struct FVector& V2);
	void SendEventReplayTransLoop();
	void NotifyDestroyToEventReplay();
	void SetupEventReplay(int32 ReplayTargetIndex, class UBP_AJBAIMessenger_C* EventReplaySendingTarget_0);
	class FString GetStatusCaption();
	class FString GetUpdatedStatusLabel();
	class FString GetStatusLabel();
	class FString GetEventLogsAsString(const struct FTimespan& ElapsedTimeGetLogFrom);
	void DumpLogs(bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration);
	class FString GetAllLogsAsString();
	class FString GetLogsLast30SecAsString();
	class UWB_AJBDebugAIMonitor_C* GetDebugAIMonitor();
	bool IfDebugDrawCurrentTask();
	bool HasStatusCaption();
	struct FTimespan GetElapsedTimeFromSpawn();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBAIDebugComponent_C">();
	}
	static class UBP_AJBAIDebugComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBAIDebugComponent_C>();
	}
};
static_assert(alignof(UBP_AJBAIDebugComponent_C) == 0x000008, "Wrong alignment on UBP_AJBAIDebugComponent_C");
static_assert(sizeof(UBP_AJBAIDebugComponent_C) == 0x0001C0, "Wrong size on UBP_AJBAIDebugComponent_C");
static_assert(offsetof(UBP_AJBAIDebugComponent_C, UberGraphFrame) == 0x0000F0, "Member 'UBP_AJBAIDebugComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_AJBAIDebugComponent_C, StatusCaption) == 0x0000F8, "Member 'UBP_AJBAIDebugComponent_C::StatusCaption' has a wrong offset!");
static_assert(offsetof(UBP_AJBAIDebugComponent_C, StatusString) == 0x000108, "Member 'UBP_AJBAIDebugComponent_C::StatusString' has a wrong offset!");
static_assert(offsetof(UBP_AJBAIDebugComponent_C, NodeStatusForMovement) == 0x000118, "Member 'UBP_AJBAIDebugComponent_C::NodeStatusForMovement' has a wrong offset!");
static_assert(offsetof(UBP_AJBAIDebugComponent_C, NodeStatusForAction) == 0x000128, "Member 'UBP_AJBAIDebugComponent_C::NodeStatusForAction' has a wrong offset!");
static_assert(offsetof(UBP_AJBAIDebugComponent_C, NodeStatusForLastError) == 0x000138, "Member 'UBP_AJBAIDebugComponent_C::NodeStatusForLastError' has a wrong offset!");
static_assert(offsetof(UBP_AJBAIDebugComponent_C, bDebugShowStatuses) == 0x000148, "Member 'UBP_AJBAIDebugComponent_C::bDebugShowStatuses' has a wrong offset!");
static_assert(offsetof(UBP_AJBAIDebugComponent_C, InputComponent) == 0x000150, "Member 'UBP_AJBAIDebugComponent_C::InputComponent' has a wrong offset!");
static_assert(offsetof(UBP_AJBAIDebugComponent_C, Recognition) == 0x000158, "Member 'UBP_AJBAIDebugComponent_C::Recognition' has a wrong offset!");
static_assert(offsetof(UBP_AJBAIDebugComponent_C, bDebugDrawCurrentTask) == 0x000160, "Member 'UBP_AJBAIDebugComponent_C::bDebugDrawCurrentTask' has a wrong offset!");
static_assert(offsetof(UBP_AJBAIDebugComponent_C, DebugAIStartPoint) == 0x000168, "Member 'UBP_AJBAIDebugComponent_C::DebugAIStartPoint' has a wrong offset!");
static_assert(offsetof(UBP_AJBAIDebugComponent_C, EventLogs) == 0x000170, "Member 'UBP_AJBAIDebugComponent_C::EventLogs' has a wrong offset!");
static_assert(offsetof(UBP_AJBAIDebugComponent_C, InGameGameState) == 0x000180, "Member 'UBP_AJBAIDebugComponent_C::InGameGameState' has a wrong offset!");
static_assert(offsetof(UBP_AJBAIDebugComponent_C, bRequestingMonitor) == 0x000188, "Member 'UBP_AJBAIDebugComponent_C::bRequestingMonitor' has a wrong offset!");
static_assert(offsetof(UBP_AJBAIDebugComponent_C, Environment) == 0x000190, "Member 'UBP_AJBAIDebugComponent_C::Environment' has a wrong offset!");
static_assert(offsetof(UBP_AJBAIDebugComponent_C, MonitoringRequestCounter) == 0x000198, "Member 'UBP_AJBAIDebugComponent_C::MonitoringRequestCounter' has a wrong offset!");
static_assert(offsetof(UBP_AJBAIDebugComponent_C, bPrintAtRequestedMonitoring) == 0x00019C, "Member 'UBP_AJBAIDebugComponent_C::bPrintAtRequestedMonitoring' has a wrong offset!");
static_assert(offsetof(UBP_AJBAIDebugComponent_C, EventReplaySendingTarget) == 0x0001A0, "Member 'UBP_AJBAIDebugComponent_C::EventReplaySendingTarget' has a wrong offset!");
static_assert(offsetof(UBP_AJBAIDebugComponent_C, EventReplayTargetIndex) == 0x0001A8, "Member 'UBP_AJBAIDebugComponent_C::EventReplayTargetIndex' has a wrong offset!");
static_assert(offsetof(UBP_AJBAIDebugComponent_C, SpawnedGameTime) == 0x0001B0, "Member 'UBP_AJBAIDebugComponent_C::SpawnedGameTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBAIDebugComponent_C, Pawn) == 0x0001B8, "Member 'UBP_AJBAIDebugComponent_C::Pawn' has a wrong offset!");

}

