#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_LimitedAchievement

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function WB_LimitedAchievement.WB_LimitedAchievement_C.ExecuteUbergraph_WB_LimitedAchievement
// 0x01D0 (0x01D0 - 0x0000)
struct WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           CallFunc_RequestWwiseEventOnLocal_AkComponent;     // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable1;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanBeDisplayed_bCan;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_ConvertDisplayDateText_ReturnValue;       // 0x0028(0x0018)()
	class FText                                   CallFunc_ConvertDisplayDateText_ReturnValue1;      // 0x0040(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0058(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData1;             // 0x0098(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00D8(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00E8(0x0018)()
	TArray<class UWB_LimitedAchievement_ProgressBar_C*> K2Node_MakeArray_Array1;                           // 0x0100(0x0010)(ZeroConstructor, ReferenceParm)
	class UWB_LimitedAchievement_ProgressBar_C*   CallFunc_Array_Get_Item;                           // 0x0110(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0120(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate1;             // 0x0130(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0140(0x0008)(NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue1;         // 0x0148(0x0008)(NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_159[0x3];                                      // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable1;                   // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue2;                  // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate2;             // 0x0168(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate3;             // 0x0178(0x0010)(ZeroConstructor, NoDestructor)
	class UWB_LimitedAchievement_ProgressBar_C*   CallFunc_Array_Get_Item1;                          // 0x0188(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_LimitedAchievement_ProgressBar_C*   CallFunc_Array_Get_Item2;                          // 0x0190(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue1;          // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanBeDisplayed_bCan1;                     // 0x0199(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19A[0x6];                                      // 0x019A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_LimitedAchievement_ProgressBar_C*   CallFunc_Array_Get_Item3;                          // 0x01A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue2;                // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue1;                 // 0x01AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1AD[0x3];                                      // 0x01AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue3;                // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B5[0x3];                                      // 0x01B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBButtonWidget*                       K2Node_ComponentBoundEvent_OwnerWidget;            // 0x01B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAJBButton*                             K2Node_ComponentBoundEvent_TargetButton;           // 0x01C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           CallFunc_RequestWwiseEventOnLocal_AkComponent1;    // 0x01C8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement) == 0x000008, "Wrong alignment on WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement");
static_assert(sizeof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement) == 0x0001D0, "Wrong size on WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, EntryPoint) == 0x000000, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, CallFunc_RequestWwiseEventOnLocal_AkComponent) == 0x000008, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::CallFunc_RequestWwiseEventOnLocal_AkComponent' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, Temp_int_Variable) == 0x000010, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, Temp_int_Array_Index_Variable) == 0x000014, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, Temp_int_Array_Index_Variable1) == 0x000020, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::Temp_int_Array_Index_Variable1' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, CallFunc_CanBeDisplayed_bCan) == 0x000024, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::CallFunc_CanBeDisplayed_bCan' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, CallFunc_ConvertDisplayDateText_ReturnValue) == 0x000028, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::CallFunc_ConvertDisplayDateText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, CallFunc_ConvertDisplayDateText_ReturnValue1) == 0x000040, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::CallFunc_ConvertDisplayDateText_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, K2Node_MakeStruct_FormatArgumentData) == 0x000058, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, K2Node_MakeStruct_FormatArgumentData1) == 0x000098, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::K2Node_MakeStruct_FormatArgumentData1' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, K2Node_MakeArray_Array) == 0x0000D8, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, CallFunc_Format_ReturnValue) == 0x0000E8, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, K2Node_MakeArray_Array1) == 0x000100, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::K2Node_MakeArray_Array1' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, CallFunc_Array_Get_Item) == 0x000110, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000118, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, CallFunc_Array_Length_ReturnValue) == 0x00011C, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, K2Node_CreateDelegate_OutputDelegate) == 0x000120, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, K2Node_CreateDelegate_OutputDelegate1) == 0x000130, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000140, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, CallFunc_K2_SetTimerDelegate_ReturnValue1) == 0x000148, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::CallFunc_K2_SetTimerDelegate_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, CallFunc_Add_IntInt_ReturnValue1) == 0x000150, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, CallFunc_Array_Length_ReturnValue1) == 0x000154, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000158, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, Temp_int_Loop_Counter_Variable1) == 0x00015C, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::Temp_int_Loop_Counter_Variable1' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, CallFunc_Less_IntInt_ReturnValue) == 0x000160, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, CallFunc_Add_IntInt_ReturnValue2) == 0x000164, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::CallFunc_Add_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, K2Node_CreateDelegate_OutputDelegate2) == 0x000168, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::K2Node_CreateDelegate_OutputDelegate2' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, K2Node_CreateDelegate_OutputDelegate3) == 0x000178, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::K2Node_CreateDelegate_OutputDelegate3' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, CallFunc_Array_Get_Item1) == 0x000188, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, CallFunc_Array_Get_Item2) == 0x000190, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::CallFunc_Array_Get_Item2' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, CallFunc_Array_IsValidIndex_ReturnValue1) == 0x000198, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::CallFunc_Array_IsValidIndex_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, CallFunc_CanBeDisplayed_bCan1) == 0x000199, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::CallFunc_CanBeDisplayed_bCan1' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, CallFunc_Array_Get_Item3) == 0x0001A0, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::CallFunc_Array_Get_Item3' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, CallFunc_Array_Length_ReturnValue2) == 0x0001A8, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::CallFunc_Array_Length_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, CallFunc_Less_IntInt_ReturnValue1) == 0x0001AC, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::CallFunc_Less_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, CallFunc_Array_Length_ReturnValue3) == 0x0001B0, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::CallFunc_Array_Length_ReturnValue3' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, CallFunc_Not_PreBool_ReturnValue) == 0x0001B4, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, K2Node_ComponentBoundEvent_OwnerWidget) == 0x0001B8, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::K2Node_ComponentBoundEvent_OwnerWidget' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, K2Node_ComponentBoundEvent_TargetButton) == 0x0001C0, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::K2Node_ComponentBoundEvent_TargetButton' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement, CallFunc_RequestWwiseEventOnLocal_AkComponent1) == 0x0001C8, "Member 'WB_LimitedAchievement_C_ExecuteUbergraph_WB_LimitedAchievement::CallFunc_RequestWwiseEventOnLocal_AkComponent1' has a wrong offset!");

// Function WB_LimitedAchievement.WB_LimitedAchievement_C.BndEvt__WB_CommonButton_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct WB_LimitedAchievement_C_BndEvt__WB_CommonButton_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature final
{
public:
	class UAJBButtonWidget*                       OwnerWidget;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAJBButton*                             TargetButton;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_LimitedAchievement_C_BndEvt__WB_CommonButton_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature) == 0x000008, "Wrong alignment on WB_LimitedAchievement_C_BndEvt__WB_CommonButton_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature");
static_assert(sizeof(WB_LimitedAchievement_C_BndEvt__WB_CommonButton_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature) == 0x000010, "Wrong size on WB_LimitedAchievement_C_BndEvt__WB_CommonButton_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature");
static_assert(offsetof(WB_LimitedAchievement_C_BndEvt__WB_CommonButton_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature, OwnerWidget) == 0x000000, "Member 'WB_LimitedAchievement_C_BndEvt__WB_CommonButton_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature::OwnerWidget' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_BndEvt__WB_CommonButton_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature, TargetButton) == 0x000008, "Member 'WB_LimitedAchievement_C_BndEvt__WB_CommonButton_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature::TargetButton' has a wrong offset!");

// Function WB_LimitedAchievement.WB_LimitedAchievement_C.CanBeDisplayed
// 0x0018 (0x0018 - 0x0000)
struct WB_LimitedAchievement_C_CanBeDisplayed final
{
public:
	bool                                          bCan;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Len_ReturnValue;                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue1;             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Len_ReturnValue1;                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue2;             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LimitedAchievement_C_CanBeDisplayed) == 0x000004, "Wrong alignment on WB_LimitedAchievement_C_CanBeDisplayed");
static_assert(sizeof(WB_LimitedAchievement_C_CanBeDisplayed) == 0x000018, "Wrong size on WB_LimitedAchievement_C_CanBeDisplayed");
static_assert(offsetof(WB_LimitedAchievement_C_CanBeDisplayed, bCan) == 0x000000, "Member 'WB_LimitedAchievement_C_CanBeDisplayed::bCan' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_CanBeDisplayed, CallFunc_Len_ReturnValue) == 0x000004, "Member 'WB_LimitedAchievement_C_CanBeDisplayed::CallFunc_Len_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_CanBeDisplayed, CallFunc_Array_Length_ReturnValue) == 0x000008, "Member 'WB_LimitedAchievement_C_CanBeDisplayed::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_CanBeDisplayed, CallFunc_NotEqual_IntInt_ReturnValue) == 0x00000C, "Member 'WB_LimitedAchievement_C_CanBeDisplayed::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_CanBeDisplayed, CallFunc_NotEqual_IntInt_ReturnValue1) == 0x00000D, "Member 'WB_LimitedAchievement_C_CanBeDisplayed::CallFunc_NotEqual_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_CanBeDisplayed, CallFunc_Len_ReturnValue1) == 0x000010, "Member 'WB_LimitedAchievement_C_CanBeDisplayed::CallFunc_Len_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_CanBeDisplayed, CallFunc_NotEqual_IntInt_ReturnValue2) == 0x000014, "Member 'WB_LimitedAchievement_C_CanBeDisplayed::CallFunc_NotEqual_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_CanBeDisplayed, CallFunc_BooleanAND_ReturnValue) == 0x000015, "Member 'WB_LimitedAchievement_C_CanBeDisplayed::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_CanBeDisplayed, CallFunc_BooleanAND_ReturnValue1) == 0x000016, "Member 'WB_LimitedAchievement_C_CanBeDisplayed::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");

// Function WB_LimitedAchievement.WB_LimitedAchievement_C.ConvertDisplayDateText
// 0x0248 (0x0248 - 0x0000)
struct WB_LimitedAchievement_C_ConvertDisplayDateText final
{
public:
	class FString                                 Date;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm)
	TArray<class FString>                         LTimeString;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<class FString>                         LDateString;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<class FString>                         LDateAndTime;                                      // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	class FText                                   LResult;                                           // 0x0058(0x0018)(Edit, BlueprintVisible)
	int32                                         CallFunc_Len_ReturnValue;                          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         CallFunc_ParseIntoArray_ReturnValue;               // 0x0080(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue1;           // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue2;                // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue2;           // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x00A0(0x0018)()
	class FText                                   CallFunc_Conv_StringToText_ReturnValue1;           // 0x00B8(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x00D0(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData1;             // 0x0110(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue2;           // 0x0150(0x0018)()
	class FText                                   CallFunc_Conv_StringToText_ReturnValue3;           // 0x0168(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData2;             // 0x0180(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData3;             // 0x01C0(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0200(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0210(0x0018)()
	TArray<class FString>                         CallFunc_ParseIntoArray_ReturnValue1;              // 0x0228(0x0010)(ZeroConstructor, ReferenceParm)
	TArray<class FString>                         CallFunc_ParseIntoArray_ReturnValue2;              // 0x0238(0x0010)(ZeroConstructor, ReferenceParm)
};
static_assert(alignof(WB_LimitedAchievement_C_ConvertDisplayDateText) == 0x000008, "Wrong alignment on WB_LimitedAchievement_C_ConvertDisplayDateText");
static_assert(sizeof(WB_LimitedAchievement_C_ConvertDisplayDateText) == 0x000248, "Wrong size on WB_LimitedAchievement_C_ConvertDisplayDateText");
static_assert(offsetof(WB_LimitedAchievement_C_ConvertDisplayDateText, Date) == 0x000000, "Member 'WB_LimitedAchievement_C_ConvertDisplayDateText::Date' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ConvertDisplayDateText, ReturnValue) == 0x000010, "Member 'WB_LimitedAchievement_C_ConvertDisplayDateText::ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ConvertDisplayDateText, LTimeString) == 0x000028, "Member 'WB_LimitedAchievement_C_ConvertDisplayDateText::LTimeString' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ConvertDisplayDateText, LDateString) == 0x000038, "Member 'WB_LimitedAchievement_C_ConvertDisplayDateText::LDateString' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ConvertDisplayDateText, LDateAndTime) == 0x000048, "Member 'WB_LimitedAchievement_C_ConvertDisplayDateText::LDateAndTime' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ConvertDisplayDateText, LResult) == 0x000058, "Member 'WB_LimitedAchievement_C_ConvertDisplayDateText::LResult' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ConvertDisplayDateText, CallFunc_Len_ReturnValue) == 0x000070, "Member 'WB_LimitedAchievement_C_ConvertDisplayDateText::CallFunc_Len_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ConvertDisplayDateText, CallFunc_Array_Length_ReturnValue) == 0x000074, "Member 'WB_LimitedAchievement_C_ConvertDisplayDateText::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ConvertDisplayDateText, CallFunc_Greater_IntInt_ReturnValue) == 0x000078, "Member 'WB_LimitedAchievement_C_ConvertDisplayDateText::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ConvertDisplayDateText, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000079, "Member 'WB_LimitedAchievement_C_ConvertDisplayDateText::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ConvertDisplayDateText, CallFunc_ParseIntoArray_ReturnValue) == 0x000080, "Member 'WB_LimitedAchievement_C_ConvertDisplayDateText::CallFunc_ParseIntoArray_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ConvertDisplayDateText, CallFunc_Array_Length_ReturnValue1) == 0x000090, "Member 'WB_LimitedAchievement_C_ConvertDisplayDateText::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ConvertDisplayDateText, CallFunc_EqualEqual_IntInt_ReturnValue1) == 0x000094, "Member 'WB_LimitedAchievement_C_ConvertDisplayDateText::CallFunc_EqualEqual_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ConvertDisplayDateText, CallFunc_Array_Length_ReturnValue2) == 0x000098, "Member 'WB_LimitedAchievement_C_ConvertDisplayDateText::CallFunc_Array_Length_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ConvertDisplayDateText, CallFunc_EqualEqual_IntInt_ReturnValue2) == 0x00009C, "Member 'WB_LimitedAchievement_C_ConvertDisplayDateText::CallFunc_EqualEqual_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ConvertDisplayDateText, CallFunc_Conv_StringToText_ReturnValue) == 0x0000A0, "Member 'WB_LimitedAchievement_C_ConvertDisplayDateText::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ConvertDisplayDateText, CallFunc_Conv_StringToText_ReturnValue1) == 0x0000B8, "Member 'WB_LimitedAchievement_C_ConvertDisplayDateText::CallFunc_Conv_StringToText_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ConvertDisplayDateText, K2Node_MakeStruct_FormatArgumentData) == 0x0000D0, "Member 'WB_LimitedAchievement_C_ConvertDisplayDateText::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ConvertDisplayDateText, K2Node_MakeStruct_FormatArgumentData1) == 0x000110, "Member 'WB_LimitedAchievement_C_ConvertDisplayDateText::K2Node_MakeStruct_FormatArgumentData1' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ConvertDisplayDateText, CallFunc_Conv_StringToText_ReturnValue2) == 0x000150, "Member 'WB_LimitedAchievement_C_ConvertDisplayDateText::CallFunc_Conv_StringToText_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ConvertDisplayDateText, CallFunc_Conv_StringToText_ReturnValue3) == 0x000168, "Member 'WB_LimitedAchievement_C_ConvertDisplayDateText::CallFunc_Conv_StringToText_ReturnValue3' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ConvertDisplayDateText, K2Node_MakeStruct_FormatArgumentData2) == 0x000180, "Member 'WB_LimitedAchievement_C_ConvertDisplayDateText::K2Node_MakeStruct_FormatArgumentData2' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ConvertDisplayDateText, K2Node_MakeStruct_FormatArgumentData3) == 0x0001C0, "Member 'WB_LimitedAchievement_C_ConvertDisplayDateText::K2Node_MakeStruct_FormatArgumentData3' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ConvertDisplayDateText, K2Node_MakeArray_Array) == 0x000200, "Member 'WB_LimitedAchievement_C_ConvertDisplayDateText::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ConvertDisplayDateText, CallFunc_Format_ReturnValue) == 0x000210, "Member 'WB_LimitedAchievement_C_ConvertDisplayDateText::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ConvertDisplayDateText, CallFunc_ParseIntoArray_ReturnValue1) == 0x000228, "Member 'WB_LimitedAchievement_C_ConvertDisplayDateText::CallFunc_ParseIntoArray_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_ConvertDisplayDateText, CallFunc_ParseIntoArray_ReturnValue2) == 0x000238, "Member 'WB_LimitedAchievement_C_ConvertDisplayDateText::CallFunc_ParseIntoArray_ReturnValue2' has a wrong offset!");

// Function WB_LimitedAchievement.WB_LimitedAchievement_C.OnInputTurnRate
// 0x0008 (0x0008 - 0x0000)
struct WB_LimitedAchievement_C_OnInputTurnRate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LimitedAchievement_C_OnInputTurnRate) == 0x000004, "Wrong alignment on WB_LimitedAchievement_C_OnInputTurnRate");
static_assert(sizeof(WB_LimitedAchievement_C_OnInputTurnRate) == 0x000008, "Wrong size on WB_LimitedAchievement_C_OnInputTurnRate");
static_assert(offsetof(WB_LimitedAchievement_C_OnInputTurnRate, Value) == 0x000000, "Member 'WB_LimitedAchievement_C_OnInputTurnRate::Value' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_OnInputTurnRate, ReturnValue) == 0x000004, "Member 'WB_LimitedAchievement_C_OnInputTurnRate::ReturnValue' has a wrong offset!");

// Function WB_LimitedAchievement.WB_LimitedAchievement_C.OnInputReleasedUp
// 0x0001 (0x0001 - 0x0000)
struct WB_LimitedAchievement_C_OnInputReleasedUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LimitedAchievement_C_OnInputReleasedUp) == 0x000001, "Wrong alignment on WB_LimitedAchievement_C_OnInputReleasedUp");
static_assert(sizeof(WB_LimitedAchievement_C_OnInputReleasedUp) == 0x000001, "Wrong size on WB_LimitedAchievement_C_OnInputReleasedUp");
static_assert(offsetof(WB_LimitedAchievement_C_OnInputReleasedUp, ReturnValue) == 0x000000, "Member 'WB_LimitedAchievement_C_OnInputReleasedUp::ReturnValue' has a wrong offset!");

// Function WB_LimitedAchievement.WB_LimitedAchievement_C.OnInputReleasedTouch
// 0x0001 (0x0001 - 0x0000)
struct WB_LimitedAchievement_C_OnInputReleasedTouch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LimitedAchievement_C_OnInputReleasedTouch) == 0x000001, "Wrong alignment on WB_LimitedAchievement_C_OnInputReleasedTouch");
static_assert(sizeof(WB_LimitedAchievement_C_OnInputReleasedTouch) == 0x000001, "Wrong size on WB_LimitedAchievement_C_OnInputReleasedTouch");
static_assert(offsetof(WB_LimitedAchievement_C_OnInputReleasedTouch, ReturnValue) == 0x000000, "Member 'WB_LimitedAchievement_C_OnInputReleasedTouch::ReturnValue' has a wrong offset!");

// Function WB_LimitedAchievement.WB_LimitedAchievement_C.OnInputReleasedRight
// 0x0001 (0x0001 - 0x0000)
struct WB_LimitedAchievement_C_OnInputReleasedRight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LimitedAchievement_C_OnInputReleasedRight) == 0x000001, "Wrong alignment on WB_LimitedAchievement_C_OnInputReleasedRight");
static_assert(sizeof(WB_LimitedAchievement_C_OnInputReleasedRight) == 0x000001, "Wrong size on WB_LimitedAchievement_C_OnInputReleasedRight");
static_assert(offsetof(WB_LimitedAchievement_C_OnInputReleasedRight, ReturnValue) == 0x000000, "Member 'WB_LimitedAchievement_C_OnInputReleasedRight::ReturnValue' has a wrong offset!");

// Function WB_LimitedAchievement.WB_LimitedAchievement_C.OnInputReleasedR2
// 0x0001 (0x0001 - 0x0000)
struct WB_LimitedAchievement_C_OnInputReleasedR2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LimitedAchievement_C_OnInputReleasedR2) == 0x000001, "Wrong alignment on WB_LimitedAchievement_C_OnInputReleasedR2");
static_assert(sizeof(WB_LimitedAchievement_C_OnInputReleasedR2) == 0x000001, "Wrong size on WB_LimitedAchievement_C_OnInputReleasedR2");
static_assert(offsetof(WB_LimitedAchievement_C_OnInputReleasedR2, ReturnValue) == 0x000000, "Member 'WB_LimitedAchievement_C_OnInputReleasedR2::ReturnValue' has a wrong offset!");

// Function WB_LimitedAchievement.WB_LimitedAchievement_C.OnInputReleasedR1
// 0x0001 (0x0001 - 0x0000)
struct WB_LimitedAchievement_C_OnInputReleasedR1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LimitedAchievement_C_OnInputReleasedR1) == 0x000001, "Wrong alignment on WB_LimitedAchievement_C_OnInputReleasedR1");
static_assert(sizeof(WB_LimitedAchievement_C_OnInputReleasedR1) == 0x000001, "Wrong size on WB_LimitedAchievement_C_OnInputReleasedR1");
static_assert(offsetof(WB_LimitedAchievement_C_OnInputReleasedR1, ReturnValue) == 0x000000, "Member 'WB_LimitedAchievement_C_OnInputReleasedR1::ReturnValue' has a wrong offset!");

// Function WB_LimitedAchievement.WB_LimitedAchievement_C.OnInputReleasedLeft
// 0x0001 (0x0001 - 0x0000)
struct WB_LimitedAchievement_C_OnInputReleasedLeft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LimitedAchievement_C_OnInputReleasedLeft) == 0x000001, "Wrong alignment on WB_LimitedAchievement_C_OnInputReleasedLeft");
static_assert(sizeof(WB_LimitedAchievement_C_OnInputReleasedLeft) == 0x000001, "Wrong size on WB_LimitedAchievement_C_OnInputReleasedLeft");
static_assert(offsetof(WB_LimitedAchievement_C_OnInputReleasedLeft, ReturnValue) == 0x000000, "Member 'WB_LimitedAchievement_C_OnInputReleasedLeft::ReturnValue' has a wrong offset!");

// Function WB_LimitedAchievement.WB_LimitedAchievement_C.OnInputReleasedL3
// 0x0001 (0x0001 - 0x0000)
struct WB_LimitedAchievement_C_OnInputReleasedL3 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LimitedAchievement_C_OnInputReleasedL3) == 0x000001, "Wrong alignment on WB_LimitedAchievement_C_OnInputReleasedL3");
static_assert(sizeof(WB_LimitedAchievement_C_OnInputReleasedL3) == 0x000001, "Wrong size on WB_LimitedAchievement_C_OnInputReleasedL3");
static_assert(offsetof(WB_LimitedAchievement_C_OnInputReleasedL3, ReturnValue) == 0x000000, "Member 'WB_LimitedAchievement_C_OnInputReleasedL3::ReturnValue' has a wrong offset!");

// Function WB_LimitedAchievement.WB_LimitedAchievement_C.OnInputReleasedL2
// 0x0001 (0x0001 - 0x0000)
struct WB_LimitedAchievement_C_OnInputReleasedL2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LimitedAchievement_C_OnInputReleasedL2) == 0x000001, "Wrong alignment on WB_LimitedAchievement_C_OnInputReleasedL2");
static_assert(sizeof(WB_LimitedAchievement_C_OnInputReleasedL2) == 0x000001, "Wrong size on WB_LimitedAchievement_C_OnInputReleasedL2");
static_assert(offsetof(WB_LimitedAchievement_C_OnInputReleasedL2, ReturnValue) == 0x000000, "Member 'WB_LimitedAchievement_C_OnInputReleasedL2::ReturnValue' has a wrong offset!");

// Function WB_LimitedAchievement.WB_LimitedAchievement_C.OnInputReleasedL1
// 0x0001 (0x0001 - 0x0000)
struct WB_LimitedAchievement_C_OnInputReleasedL1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LimitedAchievement_C_OnInputReleasedL1) == 0x000001, "Wrong alignment on WB_LimitedAchievement_C_OnInputReleasedL1");
static_assert(sizeof(WB_LimitedAchievement_C_OnInputReleasedL1) == 0x000001, "Wrong size on WB_LimitedAchievement_C_OnInputReleasedL1");
static_assert(offsetof(WB_LimitedAchievement_C_OnInputReleasedL1, ReturnValue) == 0x000000, "Member 'WB_LimitedAchievement_C_OnInputReleasedL1::ReturnValue' has a wrong offset!");

// Function WB_LimitedAchievement.WB_LimitedAchievement_C.OnInputReleasedDown
// 0x0001 (0x0001 - 0x0000)
struct WB_LimitedAchievement_C_OnInputReleasedDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LimitedAchievement_C_OnInputReleasedDown) == 0x000001, "Wrong alignment on WB_LimitedAchievement_C_OnInputReleasedDown");
static_assert(sizeof(WB_LimitedAchievement_C_OnInputReleasedDown) == 0x000001, "Wrong size on WB_LimitedAchievement_C_OnInputReleasedDown");
static_assert(offsetof(WB_LimitedAchievement_C_OnInputReleasedDown, ReturnValue) == 0x000000, "Member 'WB_LimitedAchievement_C_OnInputReleasedDown::ReturnValue' has a wrong offset!");

// Function WB_LimitedAchievement.WB_LimitedAchievement_C.OnInputReleasedDecide
// 0x0001 (0x0001 - 0x0000)
struct WB_LimitedAchievement_C_OnInputReleasedDecide final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LimitedAchievement_C_OnInputReleasedDecide) == 0x000001, "Wrong alignment on WB_LimitedAchievement_C_OnInputReleasedDecide");
static_assert(sizeof(WB_LimitedAchievement_C_OnInputReleasedDecide) == 0x000001, "Wrong size on WB_LimitedAchievement_C_OnInputReleasedDecide");
static_assert(offsetof(WB_LimitedAchievement_C_OnInputReleasedDecide, ReturnValue) == 0x000000, "Member 'WB_LimitedAchievement_C_OnInputReleasedDecide::ReturnValue' has a wrong offset!");

// Function WB_LimitedAchievement.WB_LimitedAchievement_C.OnInputReleasedCancel
// 0x0001 (0x0001 - 0x0000)
struct WB_LimitedAchievement_C_OnInputReleasedCancel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LimitedAchievement_C_OnInputReleasedCancel) == 0x000001, "Wrong alignment on WB_LimitedAchievement_C_OnInputReleasedCancel");
static_assert(sizeof(WB_LimitedAchievement_C_OnInputReleasedCancel) == 0x000001, "Wrong size on WB_LimitedAchievement_C_OnInputReleasedCancel");
static_assert(offsetof(WB_LimitedAchievement_C_OnInputReleasedCancel, ReturnValue) == 0x000000, "Member 'WB_LimitedAchievement_C_OnInputReleasedCancel::ReturnValue' has a wrong offset!");

// Function WB_LimitedAchievement.WB_LimitedAchievement_C.OnInputPressedUp
// 0x0001 (0x0001 - 0x0000)
struct WB_LimitedAchievement_C_OnInputPressedUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LimitedAchievement_C_OnInputPressedUp) == 0x000001, "Wrong alignment on WB_LimitedAchievement_C_OnInputPressedUp");
static_assert(sizeof(WB_LimitedAchievement_C_OnInputPressedUp) == 0x000001, "Wrong size on WB_LimitedAchievement_C_OnInputPressedUp");
static_assert(offsetof(WB_LimitedAchievement_C_OnInputPressedUp, ReturnValue) == 0x000000, "Member 'WB_LimitedAchievement_C_OnInputPressedUp::ReturnValue' has a wrong offset!");

// Function WB_LimitedAchievement.WB_LimitedAchievement_C.OnInputPressedTouch
// 0x000C (0x000C - 0x0000)
struct WB_LimitedAchievement_C_OnInputPressedTouch final
{
public:
	float                                         LocationX;                                         // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LocationY;                                         // 0x0004(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LimitedAchievement_C_OnInputPressedTouch) == 0x000004, "Wrong alignment on WB_LimitedAchievement_C_OnInputPressedTouch");
static_assert(sizeof(WB_LimitedAchievement_C_OnInputPressedTouch) == 0x00000C, "Wrong size on WB_LimitedAchievement_C_OnInputPressedTouch");
static_assert(offsetof(WB_LimitedAchievement_C_OnInputPressedTouch, LocationX) == 0x000000, "Member 'WB_LimitedAchievement_C_OnInputPressedTouch::LocationX' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_OnInputPressedTouch, LocationY) == 0x000004, "Member 'WB_LimitedAchievement_C_OnInputPressedTouch::LocationY' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_OnInputPressedTouch, ReturnValue) == 0x000008, "Member 'WB_LimitedAchievement_C_OnInputPressedTouch::ReturnValue' has a wrong offset!");

// Function WB_LimitedAchievement.WB_LimitedAchievement_C.OnInputPressedRight
// 0x0001 (0x0001 - 0x0000)
struct WB_LimitedAchievement_C_OnInputPressedRight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LimitedAchievement_C_OnInputPressedRight) == 0x000001, "Wrong alignment on WB_LimitedAchievement_C_OnInputPressedRight");
static_assert(sizeof(WB_LimitedAchievement_C_OnInputPressedRight) == 0x000001, "Wrong size on WB_LimitedAchievement_C_OnInputPressedRight");
static_assert(offsetof(WB_LimitedAchievement_C_OnInputPressedRight, ReturnValue) == 0x000000, "Member 'WB_LimitedAchievement_C_OnInputPressedRight::ReturnValue' has a wrong offset!");

// Function WB_LimitedAchievement.WB_LimitedAchievement_C.OnInputPressedR2
// 0x0001 (0x0001 - 0x0000)
struct WB_LimitedAchievement_C_OnInputPressedR2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LimitedAchievement_C_OnInputPressedR2) == 0x000001, "Wrong alignment on WB_LimitedAchievement_C_OnInputPressedR2");
static_assert(sizeof(WB_LimitedAchievement_C_OnInputPressedR2) == 0x000001, "Wrong size on WB_LimitedAchievement_C_OnInputPressedR2");
static_assert(offsetof(WB_LimitedAchievement_C_OnInputPressedR2, ReturnValue) == 0x000000, "Member 'WB_LimitedAchievement_C_OnInputPressedR2::ReturnValue' has a wrong offset!");

// Function WB_LimitedAchievement.WB_LimitedAchievement_C.OnInputPressedR1
// 0x0001 (0x0001 - 0x0000)
struct WB_LimitedAchievement_C_OnInputPressedR1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LimitedAchievement_C_OnInputPressedR1) == 0x000001, "Wrong alignment on WB_LimitedAchievement_C_OnInputPressedR1");
static_assert(sizeof(WB_LimitedAchievement_C_OnInputPressedR1) == 0x000001, "Wrong size on WB_LimitedAchievement_C_OnInputPressedR1");
static_assert(offsetof(WB_LimitedAchievement_C_OnInputPressedR1, ReturnValue) == 0x000000, "Member 'WB_LimitedAchievement_C_OnInputPressedR1::ReturnValue' has a wrong offset!");

// Function WB_LimitedAchievement.WB_LimitedAchievement_C.OnInputPressedLeft
// 0x0001 (0x0001 - 0x0000)
struct WB_LimitedAchievement_C_OnInputPressedLeft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LimitedAchievement_C_OnInputPressedLeft) == 0x000001, "Wrong alignment on WB_LimitedAchievement_C_OnInputPressedLeft");
static_assert(sizeof(WB_LimitedAchievement_C_OnInputPressedLeft) == 0x000001, "Wrong size on WB_LimitedAchievement_C_OnInputPressedLeft");
static_assert(offsetof(WB_LimitedAchievement_C_OnInputPressedLeft, ReturnValue) == 0x000000, "Member 'WB_LimitedAchievement_C_OnInputPressedLeft::ReturnValue' has a wrong offset!");

// Function WB_LimitedAchievement.WB_LimitedAchievement_C.OnInputPressedL3
// 0x0001 (0x0001 - 0x0000)
struct WB_LimitedAchievement_C_OnInputPressedL3 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LimitedAchievement_C_OnInputPressedL3) == 0x000001, "Wrong alignment on WB_LimitedAchievement_C_OnInputPressedL3");
static_assert(sizeof(WB_LimitedAchievement_C_OnInputPressedL3) == 0x000001, "Wrong size on WB_LimitedAchievement_C_OnInputPressedL3");
static_assert(offsetof(WB_LimitedAchievement_C_OnInputPressedL3, ReturnValue) == 0x000000, "Member 'WB_LimitedAchievement_C_OnInputPressedL3::ReturnValue' has a wrong offset!");

// Function WB_LimitedAchievement.WB_LimitedAchievement_C.OnInputPressedL2
// 0x0001 (0x0001 - 0x0000)
struct WB_LimitedAchievement_C_OnInputPressedL2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LimitedAchievement_C_OnInputPressedL2) == 0x000001, "Wrong alignment on WB_LimitedAchievement_C_OnInputPressedL2");
static_assert(sizeof(WB_LimitedAchievement_C_OnInputPressedL2) == 0x000001, "Wrong size on WB_LimitedAchievement_C_OnInputPressedL2");
static_assert(offsetof(WB_LimitedAchievement_C_OnInputPressedL2, ReturnValue) == 0x000000, "Member 'WB_LimitedAchievement_C_OnInputPressedL2::ReturnValue' has a wrong offset!");

// Function WB_LimitedAchievement.WB_LimitedAchievement_C.OnInputPressedL1
// 0x0001 (0x0001 - 0x0000)
struct WB_LimitedAchievement_C_OnInputPressedL1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LimitedAchievement_C_OnInputPressedL1) == 0x000001, "Wrong alignment on WB_LimitedAchievement_C_OnInputPressedL1");
static_assert(sizeof(WB_LimitedAchievement_C_OnInputPressedL1) == 0x000001, "Wrong size on WB_LimitedAchievement_C_OnInputPressedL1");
static_assert(offsetof(WB_LimitedAchievement_C_OnInputPressedL1, ReturnValue) == 0x000000, "Member 'WB_LimitedAchievement_C_OnInputPressedL1::ReturnValue' has a wrong offset!");

// Function WB_LimitedAchievement.WB_LimitedAchievement_C.OnInputPressedDown
// 0x0001 (0x0001 - 0x0000)
struct WB_LimitedAchievement_C_OnInputPressedDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LimitedAchievement_C_OnInputPressedDown) == 0x000001, "Wrong alignment on WB_LimitedAchievement_C_OnInputPressedDown");
static_assert(sizeof(WB_LimitedAchievement_C_OnInputPressedDown) == 0x000001, "Wrong size on WB_LimitedAchievement_C_OnInputPressedDown");
static_assert(offsetof(WB_LimitedAchievement_C_OnInputPressedDown, ReturnValue) == 0x000000, "Member 'WB_LimitedAchievement_C_OnInputPressedDown::ReturnValue' has a wrong offset!");

// Function WB_LimitedAchievement.WB_LimitedAchievement_C.OnInputPressedDecide
// 0x0001 (0x0001 - 0x0000)
struct WB_LimitedAchievement_C_OnInputPressedDecide final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LimitedAchievement_C_OnInputPressedDecide) == 0x000001, "Wrong alignment on WB_LimitedAchievement_C_OnInputPressedDecide");
static_assert(sizeof(WB_LimitedAchievement_C_OnInputPressedDecide) == 0x000001, "Wrong size on WB_LimitedAchievement_C_OnInputPressedDecide");
static_assert(offsetof(WB_LimitedAchievement_C_OnInputPressedDecide, ReturnValue) == 0x000000, "Member 'WB_LimitedAchievement_C_OnInputPressedDecide::ReturnValue' has a wrong offset!");

// Function WB_LimitedAchievement.WB_LimitedAchievement_C.OnInputPressedCancel
// 0x0001 (0x0001 - 0x0000)
struct WB_LimitedAchievement_C_OnInputPressedCancel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LimitedAchievement_C_OnInputPressedCancel) == 0x000001, "Wrong alignment on WB_LimitedAchievement_C_OnInputPressedCancel");
static_assert(sizeof(WB_LimitedAchievement_C_OnInputPressedCancel) == 0x000001, "Wrong size on WB_LimitedAchievement_C_OnInputPressedCancel");
static_assert(offsetof(WB_LimitedAchievement_C_OnInputPressedCancel, ReturnValue) == 0x000000, "Member 'WB_LimitedAchievement_C_OnInputPressedCancel::ReturnValue' has a wrong offset!");

// Function WB_LimitedAchievement.WB_LimitedAchievement_C.OnInputMoveRight
// 0x0008 (0x0008 - 0x0000)
struct WB_LimitedAchievement_C_OnInputMoveRight final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LimitedAchievement_C_OnInputMoveRight) == 0x000004, "Wrong alignment on WB_LimitedAchievement_C_OnInputMoveRight");
static_assert(sizeof(WB_LimitedAchievement_C_OnInputMoveRight) == 0x000008, "Wrong size on WB_LimitedAchievement_C_OnInputMoveRight");
static_assert(offsetof(WB_LimitedAchievement_C_OnInputMoveRight, Value) == 0x000000, "Member 'WB_LimitedAchievement_C_OnInputMoveRight::Value' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_OnInputMoveRight, ReturnValue) == 0x000004, "Member 'WB_LimitedAchievement_C_OnInputMoveRight::ReturnValue' has a wrong offset!");

// Function WB_LimitedAchievement.WB_LimitedAchievement_C.OnInputMoveForward
// 0x0008 (0x0008 - 0x0000)
struct WB_LimitedAchievement_C_OnInputMoveForward final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LimitedAchievement_C_OnInputMoveForward) == 0x000004, "Wrong alignment on WB_LimitedAchievement_C_OnInputMoveForward");
static_assert(sizeof(WB_LimitedAchievement_C_OnInputMoveForward) == 0x000008, "Wrong size on WB_LimitedAchievement_C_OnInputMoveForward");
static_assert(offsetof(WB_LimitedAchievement_C_OnInputMoveForward, Value) == 0x000000, "Member 'WB_LimitedAchievement_C_OnInputMoveForward::Value' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_OnInputMoveForward, ReturnValue) == 0x000004, "Member 'WB_LimitedAchievement_C_OnInputMoveForward::ReturnValue' has a wrong offset!");

// Function WB_LimitedAchievement.WB_LimitedAchievement_C.OnInputLookupRate
// 0x0008 (0x0008 - 0x0000)
struct WB_LimitedAchievement_C_OnInputLookupRate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LimitedAchievement_C_OnInputLookupRate) == 0x000004, "Wrong alignment on WB_LimitedAchievement_C_OnInputLookupRate");
static_assert(sizeof(WB_LimitedAchievement_C_OnInputLookupRate) == 0x000008, "Wrong size on WB_LimitedAchievement_C_OnInputLookupRate");
static_assert(offsetof(WB_LimitedAchievement_C_OnInputLookupRate, Value) == 0x000000, "Member 'WB_LimitedAchievement_C_OnInputLookupRate::Value' has a wrong offset!");
static_assert(offsetof(WB_LimitedAchievement_C_OnInputLookupRate, ReturnValue) == 0x000004, "Member 'WB_LimitedAchievement_C_OnInputLookupRate::ReturnValue' has a wrong offset!");

// Function WB_LimitedAchievement.WB_LimitedAchievement_C.IsModeless
// 0x0001 (0x0001 - 0x0000)
struct WB_LimitedAchievement_C_IsModeless final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_LimitedAchievement_C_IsModeless) == 0x000001, "Wrong alignment on WB_LimitedAchievement_C_IsModeless");
static_assert(sizeof(WB_LimitedAchievement_C_IsModeless) == 0x000001, "Wrong size on WB_LimitedAchievement_C_IsModeless");
static_assert(offsetof(WB_LimitedAchievement_C_IsModeless, ReturnValue) == 0x000000, "Member 'WB_LimitedAchievement_C_IsModeless::ReturnValue' has a wrong offset!");

}

