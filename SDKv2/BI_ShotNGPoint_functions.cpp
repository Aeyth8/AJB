#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BI_ShotNGPoint

#include "Basic.hpp"

#include "BI_ShotNGPoint_classes.hpp"
#include "BI_ShotNGPoint_parameters.hpp"


namespace SDK
{

// Function BI_ShotNGPoint.BI_ShotNGPoint_C.CheckLocallyControlled
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bLocallyControlled                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBI_ShotNGPoint_C::CheckLocallyControlled(bool* bLocallyControlled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_ShotNGPoint_C", "CheckLocallyControlled");

	Params::BI_ShotNGPoint_C_CheckLocallyControlled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bLocallyControlled != nullptr)
		*bLocallyControlled = Parms.bLocallyControlled;
}


// Function BI_ShotNGPoint.BI_ShotNGPoint_C.GetShotLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bConsiderCharacterCapsuleRadius                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FGameplayTag                     SkillTag                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>                  Locations                                              (Parm, OutParm, ZeroConstructor)

void IBI_ShotNGPoint_C::GetShotLocation(bool bConsiderCharacterCapsuleRadius, const struct FGameplayTag& SkillTag, TArray<struct FVector>* Locations)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_ShotNGPoint_C", "GetShotLocation");

	Params::BI_ShotNGPoint_C_GetShotLocation Parms{};

	Parms.bConsiderCharacterCapsuleRadius = bConsiderCharacterCapsuleRadius;
	Parms.SkillTag = std::move(SkillTag);

	UObject::ProcessEvent(Func, &Parms);

	if (Locations != nullptr)
		*Locations = std::move(Parms.Locations);
}


// Function BI_ShotNGPoint.BI_ShotNGPoint_C.GetShutTraceRadius
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Radius                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_ShotNGPoint_C::GetShutTraceRadius(float* Radius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_ShotNGPoint_C", "GetShutTraceRadius");

	Params::BI_ShotNGPoint_C_GetShutTraceRadius Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Radius != nullptr)
		*Radius = Parms.Radius;
}


// Function BI_ShotNGPoint.BI_ShotNGPoint_C.ShouldShowNGPoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bResult                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBI_ShotNGPoint_C::ShouldShowNGPoint(bool* bResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_ShotNGPoint_C", "ShouldShowNGPoint");

	Params::BI_ShotNGPoint_C_ShouldShowNGPoint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bResult != nullptr)
		*bResult = Parms.bResult;
}


// Function BI_ShotNGPoint.BI_ShotNGPoint_C.GetDummyShotLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_ShotNGPoint_C::GetDummyShotLocation(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_ShotNGPoint_C", "GetDummyShotLocation");

	Params::BI_ShotNGPoint_C_GetDummyShotLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}

}

