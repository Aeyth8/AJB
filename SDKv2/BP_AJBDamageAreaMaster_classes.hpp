#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBDamageAreaMaster

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBDamageAreaMaster.BP_AJBDamageAreaMaster_C
// 0x0028 (0x0118 - 0x00F0)
class UBP_AJBDamageAreaMaster_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00F0(0x0008)(Transient, DuplicateTransient)
	class UBP_AJBDamageAreaContext_C*             ContextRef;                                        // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsRestarting;                                     // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBParamFile*                          DamageAreaIntervalParam;                           // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebugAdvanceCalculation;                          // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_AJBDamageAreaMaster(int32 EntryPoint);
	void SetupNoReduction();
	void Vanish();
	void StopDamageAreaTick();
	void StartDamageAreaTick();
	void ToggleDebugPauseDamageArea(bool IsPause);
	void Restart();
	void CompleteInterval();
	void CloseIntervalTickInternal();
	void OpenIntervalTickInternal();
	void SetupInterval();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	struct FST_DamageAreaInterval GetInterval(int32 IntervalIndex);
	void InitializeDamageAreaIntervalParam();
	void AdvanceCalculationTargetLocation();
	void AdvanceCalculationTargetLocationCore(struct FVector& CurrentLocation, struct FVector& CurrentLocationDiff, float& CurrentRadius, float NextRadius);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBDamageAreaMaster_C">();
	}
	static class UBP_AJBDamageAreaMaster_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBDamageAreaMaster_C>();
	}
};
static_assert(alignof(UBP_AJBDamageAreaMaster_C) == 0x000008, "Wrong alignment on UBP_AJBDamageAreaMaster_C");
static_assert(sizeof(UBP_AJBDamageAreaMaster_C) == 0x000118, "Wrong size on UBP_AJBDamageAreaMaster_C");
static_assert(offsetof(UBP_AJBDamageAreaMaster_C, UberGraphFrame) == 0x0000F0, "Member 'UBP_AJBDamageAreaMaster_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_AJBDamageAreaMaster_C, ContextRef) == 0x0000F8, "Member 'UBP_AJBDamageAreaMaster_C::ContextRef' has a wrong offset!");
static_assert(offsetof(UBP_AJBDamageAreaMaster_C, bIsRestarting) == 0x000100, "Member 'UBP_AJBDamageAreaMaster_C::bIsRestarting' has a wrong offset!");
static_assert(offsetof(UBP_AJBDamageAreaMaster_C, DamageAreaIntervalParam) == 0x000108, "Member 'UBP_AJBDamageAreaMaster_C::DamageAreaIntervalParam' has a wrong offset!");
static_assert(offsetof(UBP_AJBDamageAreaMaster_C, bDebugAdvanceCalculation) == 0x000110, "Member 'UBP_AJBDamageAreaMaster_C::bDebugAdvanceCalculation' has a wrong offset!");

}

