#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBDamageAffecterBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "ST_DamageAffecterInfo_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "AJB_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBDamageAffecterBase.BP_AJBDamageAffecterBase_C
// 0x0100 (0x0428 - 0x0328)
class ABP_AJBDamageAffecterBase_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Length;                                            // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PartitionNum;                                      // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         PrevAreaInActors;                                  // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AActor*>                         CurrentAreaInActors;                               // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<struct FST_DamageAffecterInfo>         AreaInfoList;                                      // 0x0368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         DamageInterval_s_;                                 // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AffecterDamage;                                    // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShowSphere;                                       // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_381[0x7];                                      // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           RangeAttackTag;                                    // 0x0388(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TargetAddedEffectTag;                              // 0x0390(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SkillTag;                                          // 0x0398(0x0008)(Edit, BlueprintVisible, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FGameplayTag                           DamageLoopSETag;                                   // 0x03A0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          ParticleEffect;                                    // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableTheWorld;                                   // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B1[0x3];                                      // 0x03B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SerialNumber;                                      // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bLaunchFromSeparatedStand;                         // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_3B9[0x3];                                      // 0x03B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PastTimePrevTick;                                  // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentTime;                                       // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ActiveTime;                                        // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bUseOwnerTransform;                                // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAsProjectile;                                     // 0x03C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUseMultipleLocations;                             // 0x03CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3CB[0x5];                                      // 0x03CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        MultipleLocations;                                 // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<float>                                 CurrentTimes;                                      // 0x03E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          bValidMultipleLocations;                           // 0x03F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F1[0x7];                                      // 0x03F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_AJBInGameCharacter_C*>       KillCharacterList;                                 // 0x03F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	UMulticastDelegateProperty_                   OnNotifyResultServer;                              // 0x0408(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bIgnoreMovableStand;                               // 0x0418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCheckUnder;                                       // 0x0419(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41A[0x2];                                      // 0x041A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ValidGroundOffsetZ;                                // 0x041C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bConsiderTimeStopRangeAttackParticle;              // 0x0420(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void OnNotifyResultServer__DelegateSignature(int32 KillNum);
	void ExecuteUbergraph_BP_AJBDamageAffecterBase(int32 EntryPoint);
	void CancelAffecter();
	void OnTheWorldChanged_Server(bool bEnable);
	void MC_TheWorldAleady(bool bEnable);
	void MC_OnNoDamageChanged(class UObject* TargetActor, class ABP_AJBInGameCharacter_C* OperaatorCharacter, bool bNewFlag);
	void ReceiveDestroyed();
	void MC_AreaOut(class AActor* TargetActor, class ABP_AJBInGameCharacter_C* OperatorCharacter);
	void MC_AreaIn(class AActor* TargetActor, class ABP_AJBInGameCharacter_C* OperatorCharacter, bool bNoDamage);
	void AreaInterval(class AActor* Actor);
	void CheckDamageInterval();
	void AreaContinue(class AActor* Actor);
	void AreaOut(class AActor* Actor);
	void AreaIn(class AActor* Actor);
	void UpdateInfo();
	void UpdateActors();
	void AreaTick();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void OnTheWorldChanged(bool bEnableTheWorld_0);
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);
	void UserConstructionScript();
	void GetScaledRadius(float* Radius_0);
	void GetActorsOnlyAfterExists(TArray<class AActor*>& BeforeActors, TArray<class AActor*>& AfterActors, TArray<class AActor*>* ActorList);
	void ForceResetAreaInfo();
	void DrawDebugSphere();
	void GetPartitionLocation(int32 Index_0, struct FVector* Location);
	void CalcAttackDistance(class AActor* DamagedActor, float* AttackDistance);
	void CheckTimeLimit(bool* bTimeLimit);
	void UpdateCurrentTime(float DeltaSeconds);
	void ShouldEnableInitialTheWorld_Server(bool* Should);
	void GetLocationAsCheckArea(TArray<struct FVector>* Location);
	void GetRotationAsCheckArea(struct FRotator* Rotation);
	void GetPoliticDamage(int32* Damage);
	void AddToMultipleLocations(const struct FVector& NewLocation);
	void RemoveFromMultipleLocations(int32 RemovedIndex);
	void UpdateMultipleLocationsValid();
	void CheckAreaInEvenOne(class AActor* Target, TArray<struct FVector>& Locations, const struct FRotator& Rotation, float Radius_0, float Length_0, int32 PartitionNum_0, bool* bTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBDamageAffecterBase_C">();
	}
	static class ABP_AJBDamageAffecterBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBDamageAffecterBase_C>();
	}
};
static_assert(alignof(ABP_AJBDamageAffecterBase_C) == 0x000008, "Wrong alignment on ABP_AJBDamageAffecterBase_C");
static_assert(sizeof(ABP_AJBDamageAffecterBase_C) == 0x000428, "Wrong size on ABP_AJBDamageAffecterBase_C");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, UberGraphFrame) == 0x000328, "Member 'ABP_AJBDamageAffecterBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, DefaultSceneRoot) == 0x000330, "Member 'ABP_AJBDamageAffecterBase_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, Radius) == 0x000338, "Member 'ABP_AJBDamageAffecterBase_C::Radius' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, Length) == 0x00033C, "Member 'ABP_AJBDamageAffecterBase_C::Length' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, PartitionNum) == 0x000340, "Member 'ABP_AJBDamageAffecterBase_C::PartitionNum' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, Scale) == 0x000344, "Member 'ABP_AJBDamageAffecterBase_C::Scale' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, PrevAreaInActors) == 0x000348, "Member 'ABP_AJBDamageAffecterBase_C::PrevAreaInActors' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, CurrentAreaInActors) == 0x000358, "Member 'ABP_AJBDamageAffecterBase_C::CurrentAreaInActors' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, AreaInfoList) == 0x000368, "Member 'ABP_AJBDamageAffecterBase_C::AreaInfoList' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, DamageInterval_s_) == 0x000378, "Member 'ABP_AJBDamageAffecterBase_C::DamageInterval_s_' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, AffecterDamage) == 0x00037C, "Member 'ABP_AJBDamageAffecterBase_C::AffecterDamage' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bShowSphere) == 0x000380, "Member 'ABP_AJBDamageAffecterBase_C::bShowSphere' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, RangeAttackTag) == 0x000388, "Member 'ABP_AJBDamageAffecterBase_C::RangeAttackTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, TargetAddedEffectTag) == 0x000390, "Member 'ABP_AJBDamageAffecterBase_C::TargetAddedEffectTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, SkillTag) == 0x000398, "Member 'ABP_AJBDamageAffecterBase_C::SkillTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, DamageLoopSETag) == 0x0003A0, "Member 'ABP_AJBDamageAffecterBase_C::DamageLoopSETag' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, ParticleEffect) == 0x0003A8, "Member 'ABP_AJBDamageAffecterBase_C::ParticleEffect' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bEnableTheWorld) == 0x0003B0, "Member 'ABP_AJBDamageAffecterBase_C::bEnableTheWorld' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, SerialNumber) == 0x0003B4, "Member 'ABP_AJBDamageAffecterBase_C::SerialNumber' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bLaunchFromSeparatedStand) == 0x0003B8, "Member 'ABP_AJBDamageAffecterBase_C::bLaunchFromSeparatedStand' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, PastTimePrevTick) == 0x0003BC, "Member 'ABP_AJBDamageAffecterBase_C::PastTimePrevTick' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, CurrentTime) == 0x0003C0, "Member 'ABP_AJBDamageAffecterBase_C::CurrentTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, ActiveTime) == 0x0003C4, "Member 'ABP_AJBDamageAffecterBase_C::ActiveTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bUseOwnerTransform) == 0x0003C8, "Member 'ABP_AJBDamageAffecterBase_C::bUseOwnerTransform' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bAsProjectile) == 0x0003C9, "Member 'ABP_AJBDamageAffecterBase_C::bAsProjectile' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bUseMultipleLocations) == 0x0003CA, "Member 'ABP_AJBDamageAffecterBase_C::bUseMultipleLocations' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, MultipleLocations) == 0x0003D0, "Member 'ABP_AJBDamageAffecterBase_C::MultipleLocations' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, CurrentTimes) == 0x0003E0, "Member 'ABP_AJBDamageAffecterBase_C::CurrentTimes' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bValidMultipleLocations) == 0x0003F0, "Member 'ABP_AJBDamageAffecterBase_C::bValidMultipleLocations' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, KillCharacterList) == 0x0003F8, "Member 'ABP_AJBDamageAffecterBase_C::KillCharacterList' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, OnNotifyResultServer) == 0x000408, "Member 'ABP_AJBDamageAffecterBase_C::OnNotifyResultServer' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bIgnoreMovableStand) == 0x000418, "Member 'ABP_AJBDamageAffecterBase_C::bIgnoreMovableStand' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bCheckUnder) == 0x000419, "Member 'ABP_AJBDamageAffecterBase_C::bCheckUnder' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, ValidGroundOffsetZ) == 0x00041C, "Member 'ABP_AJBDamageAffecterBase_C::ValidGroundOffsetZ' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bConsiderTimeStopRangeAttackParticle) == 0x000420, "Member 'ABP_AJBDamageAffecterBase_C::bConsiderTimeStopRangeAttackParticle' has a wrong offset!");

}

