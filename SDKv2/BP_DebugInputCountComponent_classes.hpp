#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DebugInputCountComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_StickInputDirection_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DebugInputCountComponent.BP_DebugInputCountComponent_C
// 0x0038 (0x0128 - 0x00F0)
class UBP_DebugInputCountComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00F0(0x0008)(Transient, DuplicateTransient)
	class AAJBInGamePlayerController*             OwnerPlayerController;                             // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_StickInputDirection                         StickInputDirection_L;                             // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_StickInputDirection                         StickInputDirection_R;                             // 0x0101(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_102[0x2];                                      // 0x0102(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InputThreshold;                                    // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_StickInputDirection                         BeforeStickInputDirection_L;                       // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_StickInputDirection                         BeforeStickInputDirection_R;                       // 0x0109(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10A[0x2];                                      // 0x010A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StickTiltingCount_L;                               // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StickTiltingCount_R;                               // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MarginDegree;                                      // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bL3IsPressing;                                     // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bR3IsPressing;                                     // 0x0119(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11A[0x2];                                      // 0x011A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PressCount_L3;                                     // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PressCount_R3;                                     // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_DebugInputCountComponent(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void DirectionIsChanged(E_StickInputDirection BeforeDirection, float InputX, float InputY, float InputThresholdForNeutral, float MarginDegreeForDetectingChanging, bool* bIsChanged, E_StickInputDirection* NewDirection);
	E_StickInputDirection DegreeToDirection(float Degree);
	void DirectionToString(E_StickInputDirection Direction, class FString* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DebugInputCountComponent_C">();
	}
	static class UBP_DebugInputCountComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_DebugInputCountComponent_C>();
	}
};
static_assert(alignof(UBP_DebugInputCountComponent_C) == 0x000008, "Wrong alignment on UBP_DebugInputCountComponent_C");
static_assert(sizeof(UBP_DebugInputCountComponent_C) == 0x000128, "Wrong size on UBP_DebugInputCountComponent_C");
static_assert(offsetof(UBP_DebugInputCountComponent_C, UberGraphFrame) == 0x0000F0, "Member 'UBP_DebugInputCountComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_DebugInputCountComponent_C, OwnerPlayerController) == 0x0000F8, "Member 'UBP_DebugInputCountComponent_C::OwnerPlayerController' has a wrong offset!");
static_assert(offsetof(UBP_DebugInputCountComponent_C, StickInputDirection_L) == 0x000100, "Member 'UBP_DebugInputCountComponent_C::StickInputDirection_L' has a wrong offset!");
static_assert(offsetof(UBP_DebugInputCountComponent_C, StickInputDirection_R) == 0x000101, "Member 'UBP_DebugInputCountComponent_C::StickInputDirection_R' has a wrong offset!");
static_assert(offsetof(UBP_DebugInputCountComponent_C, InputThreshold) == 0x000104, "Member 'UBP_DebugInputCountComponent_C::InputThreshold' has a wrong offset!");
static_assert(offsetof(UBP_DebugInputCountComponent_C, BeforeStickInputDirection_L) == 0x000108, "Member 'UBP_DebugInputCountComponent_C::BeforeStickInputDirection_L' has a wrong offset!");
static_assert(offsetof(UBP_DebugInputCountComponent_C, BeforeStickInputDirection_R) == 0x000109, "Member 'UBP_DebugInputCountComponent_C::BeforeStickInputDirection_R' has a wrong offset!");
static_assert(offsetof(UBP_DebugInputCountComponent_C, StickTiltingCount_L) == 0x00010C, "Member 'UBP_DebugInputCountComponent_C::StickTiltingCount_L' has a wrong offset!");
static_assert(offsetof(UBP_DebugInputCountComponent_C, StickTiltingCount_R) == 0x000110, "Member 'UBP_DebugInputCountComponent_C::StickTiltingCount_R' has a wrong offset!");
static_assert(offsetof(UBP_DebugInputCountComponent_C, MarginDegree) == 0x000114, "Member 'UBP_DebugInputCountComponent_C::MarginDegree' has a wrong offset!");
static_assert(offsetof(UBP_DebugInputCountComponent_C, bL3IsPressing) == 0x000118, "Member 'UBP_DebugInputCountComponent_C::bL3IsPressing' has a wrong offset!");
static_assert(offsetof(UBP_DebugInputCountComponent_C, bR3IsPressing) == 0x000119, "Member 'UBP_DebugInputCountComponent_C::bR3IsPressing' has a wrong offset!");
static_assert(offsetof(UBP_DebugInputCountComponent_C, PressCount_L3) == 0x00011C, "Member 'UBP_DebugInputCountComponent_C::PressCount_L3' has a wrong offset!");
static_assert(offsetof(UBP_DebugInputCountComponent_C, PressCount_R3) == 0x000120, "Member 'UBP_DebugInputCountComponent_C::PressCount_R3' has a wrong offset!");

}

