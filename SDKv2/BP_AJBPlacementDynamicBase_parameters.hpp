#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBPlacementDynamicBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "AJB_structs.hpp"


namespace SDK::Params
{

// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.ExecuteUbergraph_BP_AJBPlacementDynamicBase
// 0x01D0 (0x01D0 - 0x0000)
struct BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGameplayTagValid_ReturnValue;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsGameplayTagValid_ReturnValue1;          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bBeBroken;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bOtherCharacter;                // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bBeBroken1;                     // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bOtherCharacter1;               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character1;     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_DamagedActor;                         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_DamageForHPAP;                        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_DamageForAAP;                         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_CutDamage;                            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Event_DamageType;                           // 0x0050(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_SerialNumber;                         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDamagePriority                               K2Node_Event_DamagePriority;                       // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_AttackDistance;                       // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_DamageCauser;                         // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_WithSeparatedStandAttack;             // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_HitEnemysSeparatedStand;              // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bPenetrateAP;                         // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bNotUseCollision;                     // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPair_bPairCharacter;                    // 0x0076(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0077(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_ConsumeDamage_EffectiveDamage;            // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_EffectiveValue;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue2;                    // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character2;     // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryToSpeakVoice_bWillBeSpoken;            // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryToSpeakVoice_bWillBeSpoken1;           // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9B[0x5];                                       // 0x009B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue;          // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x00A8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGameplayTagValid_ReturnValue2;          // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue3;                     // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x00B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B7[0x1];                                       // 0x00B7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacter*                    K2Node_Event_Operator;                             // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Time;                                 // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGeneralTiming                                K2Node_Event_Timing;                               // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bEnable;                              // 0x00C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bOperatorIsEmpty;                     // 0x00C6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C7[0x1];                                       // 0x00C7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameParticleEffect_C*          CallFunc_RequestParticleEffectOnLocal_ParticleEffect; // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGameplayTagValid_ReturnValue3;          // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_DamageCauser1;                        // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_HitLocation;                          // 0x00E0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bPenetrating;                         // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Event_FactorTag;                            // 0x00F0(0x0008)(NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue1;         // 0x00F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue1;     // 0x0104(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable1;                              // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGameplayTagValid_ReturnValue4;          // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x0115(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_116[0x2];                                      // 0x0116(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue3;                    // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character3;     // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12A[0x2];                                      // 0x012A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue4;                    // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue1;           // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character4;     // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess4;                      // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue;     // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsServer_ReturnValue1;                    // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsGameplayTagValid_ReturnValue5;          // 0x014B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue4;                     // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14D[0x3];                                      // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue2;         // 0x0150(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue2;           // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_159[0x3];                                      // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue2;     // 0x015C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          CallFunc_RequestParticleEffectOnLocal_ParticleEffect1; // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue3;         // 0x0170(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue3;     // 0x0178(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue4;         // 0x0188(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0190(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue4;     // 0x019C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          CallFunc_RequestParticleEffectOnLocal_ParticleEffect2; // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x01B0(0x0010)(ZeroConstructor, NoDestructor)
	class UAkComponent*                           CallFunc_RequestGion_AkComponent__LocalOnly_;      // 0x01C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RequestGion_bFullfilDisplayCond_LocalOnly_; // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase) == 0x000008, "Wrong alignment on BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase");
static_assert(sizeof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase) == 0x0001D0, "Wrong size on BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, EntryPoint) == 0x000000, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_IsGameplayTagValid_ReturnValue) == 0x000004, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_IsGameplayTagValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_IsGameplayTagValid_ReturnValue1) == 0x000005, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_IsGameplayTagValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000010, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_CustomEvent_bBeBroken) == 0x000019, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_CustomEvent_bBeBroken' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_CustomEvent_bOtherCharacter) == 0x00001A, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_CustomEvent_bOtherCharacter' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_CustomEvent_bBeBroken1) == 0x00001B, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_CustomEvent_bBeBroken1' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_CustomEvent_bOtherCharacter1) == 0x00001C, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_CustomEvent_bOtherCharacter1' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_GetOwner_ReturnValue1) == 0x000020, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_DynamicCast_AsBP_AJBIn_Game_Character1) == 0x000028, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_DynamicCast_AsBP_AJBIn_Game_Character1' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_DynamicCast_bSuccess1) == 0x000030, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000031, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_Event_DamagedActor) == 0x000038, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_Event_DamagedActor' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_Event_DamageForHPAP) == 0x000040, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_Event_DamageForHPAP' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_Event_DamageForAAP) == 0x000044, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_Event_DamageForAAP' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_Event_CutDamage) == 0x000048, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_Event_CutDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_Event_DamageType) == 0x000050, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_Event_DamageType' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_Event_SerialNumber) == 0x000058, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_Event_SerialNumber' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_Event_DamagePriority) == 0x00005C, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_Event_DamagePriority' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_Event_AttackDistance) == 0x000060, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_Event_AttackDistance' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_Event_DamageCauser) == 0x000068, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_Event_DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_Event_WithSeparatedStandAttack) == 0x000070, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_Event_WithSeparatedStandAttack' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_Event_HitEnemysSeparatedStand) == 0x000071, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_Event_HitEnemysSeparatedStand' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_Event_bPenetrateAP) == 0x000072, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_Event_bPenetrateAP' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_Event_bNotUseCollision) == 0x000073, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_Event_bNotUseCollision' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000074, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_IsValid_ReturnValue) == 0x000075, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_IsPair_bPairCharacter) == 0x000076, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_IsPair_bPairCharacter' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_BooleanOR_ReturnValue) == 0x000077, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000078, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_Not_PreBool_ReturnValue) == 0x000079, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_ConsumeDamage_EffectiveDamage) == 0x00007C, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_ConsumeDamage_EffectiveDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_IsValid_ReturnValue1) == 0x000080, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_IsValid_ReturnValue2) == 0x000081, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_CustomEvent_EffectiveValue) == 0x000084, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_CustomEvent_EffectiveValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_GetOwner_ReturnValue2) == 0x000088, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_GetOwner_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_DynamicCast_AsBP_AJBIn_Game_Character2) == 0x000090, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_DynamicCast_AsBP_AJBIn_Game_Character2' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_DynamicCast_bSuccess2) == 0x000098, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_TryToSpeakVoice_bWillBeSpoken) == 0x000099, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_TryToSpeakVoice_bWillBeSpoken' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_TryToSpeakVoice_bWillBeSpoken1) == 0x00009A, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_TryToSpeakVoice_bWillBeSpoken1' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_K2_GetRootComponent_ReturnValue) == 0x0000A0, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_K2_GetRootComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x0000A8, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_IsGameplayTagValid_ReturnValue2) == 0x0000B4, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_IsGameplayTagValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_IsValid_ReturnValue3) == 0x0000B5, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_IsValid_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_IsDedicatedServer_ReturnValue) == 0x0000B6, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_Event_Operator) == 0x0000B8, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_Event_Operator' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_Event_Time) == 0x0000C0, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_Event_Time' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_Event_Timing) == 0x0000C4, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_Event_Timing' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_Event_bEnable) == 0x0000C5, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_Event_bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_Event_bOperatorIsEmpty) == 0x0000C6, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_Event_bOperatorIsEmpty' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_RequestParticleEffectOnLocal_ParticleEffect) == 0x0000C8, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_RequestParticleEffectOnLocal_ParticleEffect' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_IsGameplayTagValid_ReturnValue3) == 0x0000D0, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_IsGameplayTagValid_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_Event_DamageCauser1) == 0x0000D8, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_Event_DamageCauser1' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_Event_HitLocation) == 0x0000E0, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_Event_HitLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_Event_bPenetrating) == 0x0000EC, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_Event_bPenetrating' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_Event_FactorTag) == 0x0000F0, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_Event_FactorTag' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_K2_GetRootComponent_ReturnValue1) == 0x0000F8, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_K2_GetRootComponent_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, Temp_float_Variable) == 0x000100, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_K2_GetComponentLocation_ReturnValue1) == 0x000104, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_K2_GetComponentLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, Temp_float_Variable1) == 0x000110, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::Temp_float_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_IsGameplayTagValid_ReturnValue4) == 0x000114, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_IsGameplayTagValid_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_IsServer_ReturnValue) == 0x000115, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_IsServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_GetOwner_ReturnValue3) == 0x000118, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_GetOwner_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_DynamicCast_AsBP_AJBIn_Game_Character3) == 0x000120, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_DynamicCast_AsBP_AJBIn_Game_Character3' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_DynamicCast_bSuccess3) == 0x000128, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, Temp_bool_Variable) == 0x000129, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_Select_Default) == 0x00012C, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_GetOwner_ReturnValue4) == 0x000130, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_GetOwner_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_IsDedicatedServer_ReturnValue1) == 0x000138, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_IsDedicatedServer_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_DynamicCast_AsBP_AJBIn_Game_Character4) == 0x000140, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_DynamicCast_AsBP_AJBIn_Game_Character4' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_DynamicCast_bSuccess4) == 0x000148, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_DynamicCast_bSuccess4' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_HasLocalSharedController_ReturnValue) == 0x000149, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_HasLocalSharedController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_IsServer_ReturnValue1) == 0x00014A, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_IsServer_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_IsGameplayTagValid_ReturnValue5) == 0x00014B, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_IsGameplayTagValid_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_IsValid_ReturnValue4) == 0x00014C, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_IsValid_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_K2_GetRootComponent_ReturnValue2) == 0x000150, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_K2_GetRootComponent_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_IsDedicatedServer_ReturnValue2) == 0x000158, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_IsDedicatedServer_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_K2_GetComponentLocation_ReturnValue2) == 0x00015C, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_K2_GetComponentLocation_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_RequestParticleEffectOnLocal_ParticleEffect1) == 0x000168, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_RequestParticleEffectOnLocal_ParticleEffect1' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_K2_GetRootComponent_ReturnValue3) == 0x000170, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_K2_GetRootComponent_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_K2_GetComponentLocation_ReturnValue3) == 0x000178, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_K2_GetComponentLocation_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_K2_GetRootComponent_ReturnValue4) == 0x000188, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_K2_GetRootComponent_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000190, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_K2_GetComponentLocation_ReturnValue4) == 0x00019C, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_K2_GetComponentLocation_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_RequestParticleEffectOnLocal_ParticleEffect2) == 0x0001A8, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_RequestParticleEffectOnLocal_ParticleEffect2' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, K2Node_CreateDelegate_OutputDelegate) == 0x0001B0, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_RequestGion_AkComponent__LocalOnly_) == 0x0001C0, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_RequestGion_AkComponent__LocalOnly_' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase, CallFunc_RequestGion_bFullfilDisplayCond_LocalOnly_) == 0x0001C8, "Member 'BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase::CallFunc_RequestGion_bFullfilDisplayCond_LocalOnly_' has a wrong offset!");

// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.ROC_NotifyDamage
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBPlacementDynamicBase_C_ROC_NotifyDamage final
{
public:
	int32                                         EffectiveValue;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPlacementDynamicBase_C_ROC_NotifyDamage) == 0x000004, "Wrong alignment on BP_AJBPlacementDynamicBase_C_ROC_NotifyDamage");
static_assert(sizeof(BP_AJBPlacementDynamicBase_C_ROC_NotifyDamage) == 0x000004, "Wrong size on BP_AJBPlacementDynamicBase_C_ROC_NotifyDamage");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ROC_NotifyDamage, EffectiveValue) == 0x000000, "Member 'BP_AJBPlacementDynamicBase_C_ROC_NotifyDamage::EffectiveValue' has a wrong offset!");

// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.BeginStateClearing_Dynamic
// 0x0002 (0x0002 - 0x0000)
struct BP_AJBPlacementDynamicBase_C_BeginStateClearing_Dynamic final
{
public:
	bool                                          bBeBroken;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bOtherCharacter;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPlacementDynamicBase_C_BeginStateClearing_Dynamic) == 0x000001, "Wrong alignment on BP_AJBPlacementDynamicBase_C_BeginStateClearing_Dynamic");
static_assert(sizeof(BP_AJBPlacementDynamicBase_C_BeginStateClearing_Dynamic) == 0x000002, "Wrong size on BP_AJBPlacementDynamicBase_C_BeginStateClearing_Dynamic");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_BeginStateClearing_Dynamic, bBeBroken) == 0x000000, "Member 'BP_AJBPlacementDynamicBase_C_BeginStateClearing_Dynamic::bBeBroken' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_BeginStateClearing_Dynamic, bOtherCharacter) == 0x000001, "Member 'BP_AJBPlacementDynamicBase_C_BeginStateClearing_Dynamic::bOtherCharacter' has a wrong offset!");

// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.ROC_OnDamage
// 0x0002 (0x0002 - 0x0000)
struct BP_AJBPlacementDynamicBase_C_ROC_OnDamage final
{
public:
	bool                                          bBeBroken;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bOtherCharacter;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPlacementDynamicBase_C_ROC_OnDamage) == 0x000001, "Wrong alignment on BP_AJBPlacementDynamicBase_C_ROC_OnDamage");
static_assert(sizeof(BP_AJBPlacementDynamicBase_C_ROC_OnDamage) == 0x000002, "Wrong size on BP_AJBPlacementDynamicBase_C_ROC_OnDamage");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ROC_OnDamage, bBeBroken) == 0x000000, "Member 'BP_AJBPlacementDynamicBase_C_ROC_OnDamage::bBeBroken' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ROC_OnDamage, bOtherCharacter) == 0x000001, "Member 'BP_AJBPlacementDynamicBase_C_ROC_OnDamage::bOtherCharacter' has a wrong offset!");

// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.AJBDamage
// 0x0040 (0x0040 - 0x0000)
struct BP_AJBPlacementDynamicBase_C_AJBDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DamageForHPAP;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DamageForAAP;                                      // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CutDamage;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           DamageType;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         SerialNumber_0;                                    // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDamagePriority                               DamagePriority;                                    // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttackDistance;                                    // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DamageCauser;                                      // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WithSeparatedStandAttack;                          // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HitEnemysSeparatedStand;                           // 0x0039(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bPenetrateAP;                                      // 0x003A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bNotUseCollision;                                  // 0x003B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPlacementDynamicBase_C_AJBDamage) == 0x000008, "Wrong alignment on BP_AJBPlacementDynamicBase_C_AJBDamage");
static_assert(sizeof(BP_AJBPlacementDynamicBase_C_AJBDamage) == 0x000040, "Wrong size on BP_AJBPlacementDynamicBase_C_AJBDamage");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_AJBDamage, DamagedActor) == 0x000000, "Member 'BP_AJBPlacementDynamicBase_C_AJBDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_AJBDamage, DamageForHPAP) == 0x000008, "Member 'BP_AJBPlacementDynamicBase_C_AJBDamage::DamageForHPAP' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_AJBDamage, DamageForAAP) == 0x00000C, "Member 'BP_AJBPlacementDynamicBase_C_AJBDamage::DamageForAAP' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_AJBDamage, CutDamage) == 0x000010, "Member 'BP_AJBPlacementDynamicBase_C_AJBDamage::CutDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_AJBDamage, DamageType) == 0x000018, "Member 'BP_AJBPlacementDynamicBase_C_AJBDamage::DamageType' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_AJBDamage, SerialNumber_0) == 0x000020, "Member 'BP_AJBPlacementDynamicBase_C_AJBDamage::SerialNumber_0' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_AJBDamage, DamagePriority) == 0x000024, "Member 'BP_AJBPlacementDynamicBase_C_AJBDamage::DamagePriority' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_AJBDamage, AttackDistance) == 0x000028, "Member 'BP_AJBPlacementDynamicBase_C_AJBDamage::AttackDistance' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_AJBDamage, DamageCauser) == 0x000030, "Member 'BP_AJBPlacementDynamicBase_C_AJBDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_AJBDamage, WithSeparatedStandAttack) == 0x000038, "Member 'BP_AJBPlacementDynamicBase_C_AJBDamage::WithSeparatedStandAttack' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_AJBDamage, HitEnemysSeparatedStand) == 0x000039, "Member 'BP_AJBPlacementDynamicBase_C_AJBDamage::HitEnemysSeparatedStand' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_AJBDamage, bPenetrateAP) == 0x00003A, "Member 'BP_AJBPlacementDynamicBase_C_AJBDamage::bPenetrateAP' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_AJBDamage, bNotUseCollision) == 0x00003B, "Member 'BP_AJBPlacementDynamicBase_C_AJBDamage::bNotUseCollision' has a wrong offset!");

// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.DamageOverlapped
// 0x0020 (0x0020 - 0x0000)
struct BP_AJBPlacementDynamicBase_C_DamageOverlapped final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitLocation;                                       // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPenetrating;                                      // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           FactorTag;                                         // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPlacementDynamicBase_C_DamageOverlapped) == 0x000008, "Wrong alignment on BP_AJBPlacementDynamicBase_C_DamageOverlapped");
static_assert(sizeof(BP_AJBPlacementDynamicBase_C_DamageOverlapped) == 0x000020, "Wrong size on BP_AJBPlacementDynamicBase_C_DamageOverlapped");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_DamageOverlapped, DamageCauser) == 0x000000, "Member 'BP_AJBPlacementDynamicBase_C_DamageOverlapped::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_DamageOverlapped, HitLocation) == 0x000008, "Member 'BP_AJBPlacementDynamicBase_C_DamageOverlapped::HitLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_DamageOverlapped, bPenetrating) == 0x000014, "Member 'BP_AJBPlacementDynamicBase_C_DamageOverlapped::bPenetrating' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_DamageOverlapped, FactorTag) == 0x000018, "Member 'BP_AJBPlacementDynamicBase_C_DamageOverlapped::FactorTag' has a wrong offset!");

// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.ConsumeDamage
// 0x0018 (0x0018 - 0x0000)
struct BP_AJBPlacementDynamicBase_C_ConsumeDamage final
{
public:
	int32                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EffectiveDamage;                                   // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_BeforeHP;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue1;             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPlacementDynamicBase_C_ConsumeDamage) == 0x000004, "Wrong alignment on BP_AJBPlacementDynamicBase_C_ConsumeDamage");
static_assert(sizeof(BP_AJBPlacementDynamicBase_C_ConsumeDamage) == 0x000018, "Wrong size on BP_AJBPlacementDynamicBase_C_ConsumeDamage");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ConsumeDamage, Damage) == 0x000000, "Member 'BP_AJBPlacementDynamicBase_C_ConsumeDamage::Damage' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ConsumeDamage, EffectiveDamage) == 0x000004, "Member 'BP_AJBPlacementDynamicBase_C_ConsumeDamage::EffectiveDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ConsumeDamage, Temp_BeforeHP) == 0x000008, "Member 'BP_AJBPlacementDynamicBase_C_ConsumeDamage::Temp_BeforeHP' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ConsumeDamage, CallFunc_Subtract_IntInt_ReturnValue) == 0x00000C, "Member 'BP_AJBPlacementDynamicBase_C_ConsumeDamage::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ConsumeDamage, CallFunc_Subtract_IntInt_ReturnValue1) == 0x000010, "Member 'BP_AJBPlacementDynamicBase_C_ConsumeDamage::CallFunc_Subtract_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_ConsumeDamage, CallFunc_Max_ReturnValue) == 0x000014, "Member 'BP_AJBPlacementDynamicBase_C_ConsumeDamage::CallFunc_Max_ReturnValue' has a wrong offset!");

// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.CheckDisableAreaDamage
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBPlacementDynamicBase_C_CheckDisableAreaDamage final
{
public:
	bool                                          bDisableAreadamage;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPlacementDynamicBase_C_CheckDisableAreaDamage) == 0x000001, "Wrong alignment on BP_AJBPlacementDynamicBase_C_CheckDisableAreaDamage");
static_assert(sizeof(BP_AJBPlacementDynamicBase_C_CheckDisableAreaDamage) == 0x000001, "Wrong size on BP_AJBPlacementDynamicBase_C_CheckDisableAreaDamage");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_CheckDisableAreaDamage, bDisableAreadamage) == 0x000000, "Member 'BP_AJBPlacementDynamicBase_C_CheckDisableAreaDamage::bDisableAreadamage' has a wrong offset!");

// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.CheckDisablePassive
// 0x0018 (0x0018 - 0x0000)
struct BP_AJBPlacementDynamicBase_C_CheckDisablePassive final
{
public:
	class AActor*                                 PassiveCauser;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           PassiveTag;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisablePassive;                                   // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPlacementDynamicBase_C_CheckDisablePassive) == 0x000008, "Wrong alignment on BP_AJBPlacementDynamicBase_C_CheckDisablePassive");
static_assert(sizeof(BP_AJBPlacementDynamicBase_C_CheckDisablePassive) == 0x000018, "Wrong size on BP_AJBPlacementDynamicBase_C_CheckDisablePassive");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_CheckDisablePassive, PassiveCauser) == 0x000000, "Member 'BP_AJBPlacementDynamicBase_C_CheckDisablePassive::PassiveCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_CheckDisablePassive, PassiveTag) == 0x000008, "Member 'BP_AJBPlacementDynamicBase_C_CheckDisablePassive::PassiveTag' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_CheckDisablePassive, bDisablePassive) == 0x000010, "Member 'BP_AJBPlacementDynamicBase_C_CheckDisablePassive::bDisablePassive' has a wrong offset!");

// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.CheckDisableDamage
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBPlacementDynamicBase_C_CheckDisableDamage final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisableDamage;                                    // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPlacementDynamicBase_C_CheckDisableDamage) == 0x000008, "Wrong alignment on BP_AJBPlacementDynamicBase_C_CheckDisableDamage");
static_assert(sizeof(BP_AJBPlacementDynamicBase_C_CheckDisableDamage) == 0x000010, "Wrong size on BP_AJBPlacementDynamicBase_C_CheckDisableDamage");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_CheckDisableDamage, DamageCauser) == 0x000000, "Member 'BP_AJBPlacementDynamicBase_C_CheckDisableDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_CheckDisableDamage, bDisableDamage) == 0x000008, "Member 'BP_AJBPlacementDynamicBase_C_CheckDisableDamage::bDisableDamage' has a wrong offset!");

// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.IfCheckDamageOverlap
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBPlacementDynamicBase_C_IfCheckDamageOverlap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPlacementDynamicBase_C_IfCheckDamageOverlap) == 0x000001, "Wrong alignment on BP_AJBPlacementDynamicBase_C_IfCheckDamageOverlap");
static_assert(sizeof(BP_AJBPlacementDynamicBase_C_IfCheckDamageOverlap) == 0x000001, "Wrong size on BP_AJBPlacementDynamicBase_C_IfCheckDamageOverlap");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_IfCheckDamageOverlap, ReturnValue) == 0x000000, "Member 'BP_AJBPlacementDynamicBase_C_IfCheckDamageOverlap::ReturnValue' has a wrong offset!");

// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.OwnHitParam
// 0x0018 (0x0018 - 0x0000)
struct BP_AJBPlacementDynamicBase_C_OwnHitParam final
{
public:
	bool                                          bCharacter;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bLeftAP;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ParticleTagBlockedByAAP;                           // 0x0008(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SETagBlockedByAAP;                                 // 0x0010(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPlacementDynamicBase_C_OwnHitParam) == 0x000008, "Wrong alignment on BP_AJBPlacementDynamicBase_C_OwnHitParam");
static_assert(sizeof(BP_AJBPlacementDynamicBase_C_OwnHitParam) == 0x000018, "Wrong size on BP_AJBPlacementDynamicBase_C_OwnHitParam");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_OwnHitParam, bCharacter) == 0x000000, "Member 'BP_AJBPlacementDynamicBase_C_OwnHitParam::bCharacter' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_OwnHitParam, bLeftAP) == 0x000001, "Member 'BP_AJBPlacementDynamicBase_C_OwnHitParam::bLeftAP' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_OwnHitParam, ParticleTagBlockedByAAP) == 0x000008, "Member 'BP_AJBPlacementDynamicBase_C_OwnHitParam::ParticleTagBlockedByAAP' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_OwnHitParam, SETagBlockedByAAP) == 0x000010, "Member 'BP_AJBPlacementDynamicBase_C_OwnHitParam::SETagBlockedByAAP' has a wrong offset!");

// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.CheckTargetSelf
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBPlacementDynamicBase_C_CheckTargetSelf final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bForDamageOverlap;                                 // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIgnoreMovableStand;                               // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bTarget;                                           // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPlacementDynamicBase_C_CheckTargetSelf) == 0x000008, "Wrong alignment on BP_AJBPlacementDynamicBase_C_CheckTargetSelf");
static_assert(sizeof(BP_AJBPlacementDynamicBase_C_CheckTargetSelf) == 0x000010, "Wrong size on BP_AJBPlacementDynamicBase_C_CheckTargetSelf");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_CheckTargetSelf, DamageCauser) == 0x000000, "Member 'BP_AJBPlacementDynamicBase_C_CheckTargetSelf::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_CheckTargetSelf, bForDamageOverlap) == 0x000008, "Member 'BP_AJBPlacementDynamicBase_C_CheckTargetSelf::bForDamageOverlap' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_CheckTargetSelf, bIgnoreMovableStand) == 0x000009, "Member 'BP_AJBPlacementDynamicBase_C_CheckTargetSelf::bIgnoreMovableStand' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_CheckTargetSelf, bTarget) == 0x00000A, "Member 'BP_AJBPlacementDynamicBase_C_CheckTargetSelf::bTarget' has a wrong offset!");

// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.CheckNoDamage
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBPlacementDynamicBase_C_CheckNoDamage final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNoDamage;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPlacementDynamicBase_C_CheckNoDamage) == 0x000008, "Wrong alignment on BP_AJBPlacementDynamicBase_C_CheckNoDamage");
static_assert(sizeof(BP_AJBPlacementDynamicBase_C_CheckNoDamage) == 0x000010, "Wrong size on BP_AJBPlacementDynamicBase_C_CheckNoDamage");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_CheckNoDamage, DamageCauser) == 0x000000, "Member 'BP_AJBPlacementDynamicBase_C_CheckNoDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_CheckNoDamage, bNoDamage) == 0x000008, "Member 'BP_AJBPlacementDynamicBase_C_CheckNoDamage::bNoDamage' has a wrong offset!");

// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.IsReactedByReticule
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBPlacementDynamicBase_C_IsReactedByReticule final
{
public:
	bool                                          bResult;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPlacementDynamicBase_C_IsReactedByReticule) == 0x000001, "Wrong alignment on BP_AJBPlacementDynamicBase_C_IsReactedByReticule");
static_assert(sizeof(BP_AJBPlacementDynamicBase_C_IsReactedByReticule) == 0x000001, "Wrong size on BP_AJBPlacementDynamicBase_C_IsReactedByReticule");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_IsReactedByReticule, bResult) == 0x000000, "Member 'BP_AJBPlacementDynamicBase_C_IsReactedByReticule::bResult' has a wrong offset!");

// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.IgnoreTrace
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBPlacementDynamicBase_C_IgnoreTrace final
{
public:
	bool                                          bIgnore;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPlacementDynamicBase_C_IgnoreTrace) == 0x000001, "Wrong alignment on BP_AJBPlacementDynamicBase_C_IgnoreTrace");
static_assert(sizeof(BP_AJBPlacementDynamicBase_C_IgnoreTrace) == 0x000001, "Wrong size on BP_AJBPlacementDynamicBase_C_IgnoreTrace");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_IgnoreTrace, bIgnore) == 0x000000, "Member 'BP_AJBPlacementDynamicBase_C_IgnoreTrace::bIgnore' has a wrong offset!");

// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.CheckDisableDirectDamage
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBPlacementDynamicBase_C_CheckDisableDirectDamage final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisableDirectDamage;                              // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPlacementDynamicBase_C_CheckDisableDirectDamage) == 0x000008, "Wrong alignment on BP_AJBPlacementDynamicBase_C_CheckDisableDirectDamage");
static_assert(sizeof(BP_AJBPlacementDynamicBase_C_CheckDisableDirectDamage) == 0x000010, "Wrong size on BP_AJBPlacementDynamicBase_C_CheckDisableDirectDamage");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_CheckDisableDirectDamage, DamageCauser) == 0x000000, "Member 'BP_AJBPlacementDynamicBase_C_CheckDisableDirectDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_CheckDisableDirectDamage, bDisableDirectDamage) == 0x000008, "Member 'BP_AJBPlacementDynamicBase_C_CheckDisableDirectDamage::bDisableDirectDamage' has a wrong offset!");

// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.GetTargetLocation
// 0x0018 (0x0018 - 0x0000)
struct BP_AJBPlacementDynamicBase_C_GetTargetLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x000C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPlacementDynamicBase_C_GetTargetLocation) == 0x000004, "Wrong alignment on BP_AJBPlacementDynamicBase_C_GetTargetLocation");
static_assert(sizeof(BP_AJBPlacementDynamicBase_C_GetTargetLocation) == 0x000018, "Wrong size on BP_AJBPlacementDynamicBase_C_GetTargetLocation");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_GetTargetLocation, Location) == 0x000000, "Member 'BP_AJBPlacementDynamicBase_C_GetTargetLocation::Location' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_GetTargetLocation, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00000C, "Member 'BP_AJBPlacementDynamicBase_C_GetTargetLocation::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");

// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.NotifyTheWorld
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBPlacementDynamicBase_C_NotifyTheWorld final
{
public:
	class AAJBInGameCharacter*                    Operator;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGeneralTiming                                Timing;                                            // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnable;                                           // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bOperatorIsEmpty;                                  // 0x000E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPlacementDynamicBase_C_NotifyTheWorld) == 0x000008, "Wrong alignment on BP_AJBPlacementDynamicBase_C_NotifyTheWorld");
static_assert(sizeof(BP_AJBPlacementDynamicBase_C_NotifyTheWorld) == 0x000010, "Wrong size on BP_AJBPlacementDynamicBase_C_NotifyTheWorld");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_NotifyTheWorld, Operator) == 0x000000, "Member 'BP_AJBPlacementDynamicBase_C_NotifyTheWorld::Operator' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_NotifyTheWorld, Time) == 0x000008, "Member 'BP_AJBPlacementDynamicBase_C_NotifyTheWorld::Time' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_NotifyTheWorld, Timing) == 0x00000C, "Member 'BP_AJBPlacementDynamicBase_C_NotifyTheWorld::Timing' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_NotifyTheWorld, bEnable) == 0x00000D, "Member 'BP_AJBPlacementDynamicBase_C_NotifyTheWorld::bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBPlacementDynamicBase_C_NotifyTheWorld, bOperatorIsEmpty) == 0x00000E, "Member 'BP_AJBPlacementDynamicBase_C_NotifyTheWorld::bOperatorIsEmpty' has a wrong offset!");

}

