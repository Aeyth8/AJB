#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBAIWaySpotFinder

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBAIWaySpotFinder.BP_AJBAIWaySpotFinder_C
// 0x0070 (0x0398 - 0x0328)
class ABP_AJBAIWaySpotFinder_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         LineTraceStartingLocationZ;                        // 0x0338(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LineTraceFinishingLocaitonZ;                       // 0x033C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SphereTestRadius;                                  // 0x0340(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_344[0x4];                                      // 0x0344(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBAIEnvironmentBlock*                 EnvironmentBlock;                                  // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class ANavMeshBoundsVolume*                   NavMeshVolume;                                     // 0x0350(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<struct FVector>                        WaySpots;                                          // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FVector>                        NotSoOpenWaySpots;                                 // 0x0368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         WaySpotCountThresh;                                // 0x0378(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37C[0x4];                                      // 0x037C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnFinished;                                        // 0x0380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         WaySpotShrinkThresh;                               // 0x0390(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnFinished__DelegateSignature();
	void ExecuteUbergraph_BP_AJBAIWaySpotFinder(int32 EntryPoint);
	void SetWaySpotsAsTemporalResult();
	void DebugDrawWaySpots(const struct FLinearColor& LineColor, float Duration);
	void SetWaySpotsAsFinalResult();
	void TestLocation(const struct FVector& Location);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	TArray<struct FVector> GetTriangleVerticesForLineTrace(const struct FVector& Location, float DistanceToTriangleVertex);
	bool TestLocationByLineTrace(const struct FVector& TestLocation, struct FVector* Location, struct FVector* Normal);
	bool TestLocationByLandingLocationOverelap(const struct FVector& TestLocation, const struct FVector& HitNormal, bool* bHitLineTrace, struct FVector* ModifiedLocation);
	bool TestLocationByPathToStartPoint(const struct FVector& TestLocation);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBAIWaySpotFinder_C">();
	}
	static class ABP_AJBAIWaySpotFinder_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBAIWaySpotFinder_C>();
	}
};
static_assert(alignof(ABP_AJBAIWaySpotFinder_C) == 0x000008, "Wrong alignment on ABP_AJBAIWaySpotFinder_C");
static_assert(sizeof(ABP_AJBAIWaySpotFinder_C) == 0x000398, "Wrong size on ABP_AJBAIWaySpotFinder_C");
static_assert(offsetof(ABP_AJBAIWaySpotFinder_C, UberGraphFrame) == 0x000328, "Member 'ABP_AJBAIWaySpotFinder_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AJBAIWaySpotFinder_C, DefaultSceneRoot) == 0x000330, "Member 'ABP_AJBAIWaySpotFinder_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_AJBAIWaySpotFinder_C, LineTraceStartingLocationZ) == 0x000338, "Member 'ABP_AJBAIWaySpotFinder_C::LineTraceStartingLocationZ' has a wrong offset!");
static_assert(offsetof(ABP_AJBAIWaySpotFinder_C, LineTraceFinishingLocaitonZ) == 0x00033C, "Member 'ABP_AJBAIWaySpotFinder_C::LineTraceFinishingLocaitonZ' has a wrong offset!");
static_assert(offsetof(ABP_AJBAIWaySpotFinder_C, SphereTestRadius) == 0x000340, "Member 'ABP_AJBAIWaySpotFinder_C::SphereTestRadius' has a wrong offset!");
static_assert(offsetof(ABP_AJBAIWaySpotFinder_C, EnvironmentBlock) == 0x000348, "Member 'ABP_AJBAIWaySpotFinder_C::EnvironmentBlock' has a wrong offset!");
static_assert(offsetof(ABP_AJBAIWaySpotFinder_C, NavMeshVolume) == 0x000350, "Member 'ABP_AJBAIWaySpotFinder_C::NavMeshVolume' has a wrong offset!");
static_assert(offsetof(ABP_AJBAIWaySpotFinder_C, WaySpots) == 0x000358, "Member 'ABP_AJBAIWaySpotFinder_C::WaySpots' has a wrong offset!");
static_assert(offsetof(ABP_AJBAIWaySpotFinder_C, NotSoOpenWaySpots) == 0x000368, "Member 'ABP_AJBAIWaySpotFinder_C::NotSoOpenWaySpots' has a wrong offset!");
static_assert(offsetof(ABP_AJBAIWaySpotFinder_C, WaySpotCountThresh) == 0x000378, "Member 'ABP_AJBAIWaySpotFinder_C::WaySpotCountThresh' has a wrong offset!");
static_assert(offsetof(ABP_AJBAIWaySpotFinder_C, OnFinished) == 0x000380, "Member 'ABP_AJBAIWaySpotFinder_C::OnFinished' has a wrong offset!");
static_assert(offsetof(ABP_AJBAIWaySpotFinder_C, WaySpotShrinkThresh) == 0x000390, "Member 'ABP_AJBAIWaySpotFinder_C::WaySpotShrinkThresh' has a wrong offset!");

}

