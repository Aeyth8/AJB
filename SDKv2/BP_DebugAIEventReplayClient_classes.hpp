#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DebugAIEventReplayClient

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ST_DebugAIEventReplay_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DebugAIEventReplayClient.BP_DebugAIEventReplayClient_C
// 0x0098 (0x03C0 - 0x0328)
class ABP_DebugAIEventReplayClient_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FST_DebugAIEventReplay>         EventReplayData;                                   // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         SingleEventDrawDuration;                           // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastDrawnLocation;                                 // 0x034C(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LastDrawnRotation;                                 // 0x0358(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         SingleEventDrawDuration_Debug;                     // 0x0364(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           LastMovementTag;                                   // 0x0368(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<struct FGameplayTag, struct FLinearColor> ColorByMovementTag;                                // 0x0370(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_DebugAIEventReplayClient(int32 EntryPoint);
	void StartReplayEvent(int32 TargetIndex, int32 InitialArrayIndex);
	void DumpImmediate(const struct FGameplayTag& Tag, const struct FVector& VectorIn);
	void DumpPathPoints(const struct FGameplayTag& Tag, const struct FVector& PathPoint);
	void ReplayNextEvent();
	void ReplayAIEventReplayWithIndex(int32 TargetIndex);
	void DumpAIEventReplayLastIndex();
	void OnDestroy(int32 TargetIndex);
	void DumpAIEventReplayWithIndex(int32 TargetIndex);
	void DumpAllEventReplay();
	void AddEventReplay(int32 Index_0, float ElapsedTime, const struct FGameplayTag& Tag, const struct FVector& V1, const struct FVector& V2);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DebugAIEventReplayClient_C">();
	}
	static class ABP_DebugAIEventReplayClient_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DebugAIEventReplayClient_C>();
	}
};
static_assert(alignof(ABP_DebugAIEventReplayClient_C) == 0x000008, "Wrong alignment on ABP_DebugAIEventReplayClient_C");
static_assert(sizeof(ABP_DebugAIEventReplayClient_C) == 0x0003C0, "Wrong size on ABP_DebugAIEventReplayClient_C");
static_assert(offsetof(ABP_DebugAIEventReplayClient_C, UberGraphFrame) == 0x000328, "Member 'ABP_DebugAIEventReplayClient_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DebugAIEventReplayClient_C, DefaultSceneRoot) == 0x000330, "Member 'ABP_DebugAIEventReplayClient_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_DebugAIEventReplayClient_C, EventReplayData) == 0x000338, "Member 'ABP_DebugAIEventReplayClient_C::EventReplayData' has a wrong offset!");
static_assert(offsetof(ABP_DebugAIEventReplayClient_C, SingleEventDrawDuration) == 0x000348, "Member 'ABP_DebugAIEventReplayClient_C::SingleEventDrawDuration' has a wrong offset!");
static_assert(offsetof(ABP_DebugAIEventReplayClient_C, LastDrawnLocation) == 0x00034C, "Member 'ABP_DebugAIEventReplayClient_C::LastDrawnLocation' has a wrong offset!");
static_assert(offsetof(ABP_DebugAIEventReplayClient_C, LastDrawnRotation) == 0x000358, "Member 'ABP_DebugAIEventReplayClient_C::LastDrawnRotation' has a wrong offset!");
static_assert(offsetof(ABP_DebugAIEventReplayClient_C, SingleEventDrawDuration_Debug) == 0x000364, "Member 'ABP_DebugAIEventReplayClient_C::SingleEventDrawDuration_Debug' has a wrong offset!");
static_assert(offsetof(ABP_DebugAIEventReplayClient_C, LastMovementTag) == 0x000368, "Member 'ABP_DebugAIEventReplayClient_C::LastMovementTag' has a wrong offset!");
static_assert(offsetof(ABP_DebugAIEventReplayClient_C, ColorByMovementTag) == 0x000370, "Member 'ABP_DebugAIEventReplayClient_C::ColorByMovementTag' has a wrong offset!");

}

