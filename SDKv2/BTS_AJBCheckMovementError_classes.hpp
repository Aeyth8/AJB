#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTS_AJBCheckMovementError

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTS_AJBCheckMovementError.BTS_AJBCheckMovementError_C
// 0x00D8 (0x0170 - 0x0098)
class UBTS_AJBCheckMovementError_C final : public UBTService_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0098(0x0008)(Transient, DuplicateTransient)
	struct FVector                                LastLocation;                                      // 0x00A0(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlackboardKeySelector                 IsStoppingKey;                                     // 0x00B0(0x0028)(Edit, BlueprintVisible)
	int32                                         ContinuingStoppingCount;                           // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebugAbortIfStopping;                             // 0x00DC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlackboardKeySelector                 RO_InputDestinationKey;                            // 0x00E0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly)
	struct FBlackboardKeySelector                 RO_FinalDestinationKey;                            // 0x0108(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly)
	struct FVector                                LastInputDestination;                              // 0x0130(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastFinalDestination;                              // 0x013C(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AEventTagLocker*                        StoppingWarningLocker;                             // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AEventTagLocker*                        StoppingErrorLocker;                               // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_AJBInGameAIRecognition_C*           Recognition;                                       // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentLocation;                                   // 0x0160(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BTS_AJBCheckMovementError(int32 EntryPoint);
	void ReceiveActivationAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTS_AJBCheckMovementError_C">();
	}
	static class UBTS_AJBCheckMovementError_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTS_AJBCheckMovementError_C>();
	}
};
static_assert(alignof(UBTS_AJBCheckMovementError_C) == 0x000008, "Wrong alignment on UBTS_AJBCheckMovementError_C");
static_assert(sizeof(UBTS_AJBCheckMovementError_C) == 0x000170, "Wrong size on UBTS_AJBCheckMovementError_C");
static_assert(offsetof(UBTS_AJBCheckMovementError_C, UberGraphFrame) == 0x000098, "Member 'UBTS_AJBCheckMovementError_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTS_AJBCheckMovementError_C, LastLocation) == 0x0000A0, "Member 'UBTS_AJBCheckMovementError_C::LastLocation' has a wrong offset!");
static_assert(offsetof(UBTS_AJBCheckMovementError_C, IsStoppingKey) == 0x0000B0, "Member 'UBTS_AJBCheckMovementError_C::IsStoppingKey' has a wrong offset!");
static_assert(offsetof(UBTS_AJBCheckMovementError_C, ContinuingStoppingCount) == 0x0000D8, "Member 'UBTS_AJBCheckMovementError_C::ContinuingStoppingCount' has a wrong offset!");
static_assert(offsetof(UBTS_AJBCheckMovementError_C, bDebugAbortIfStopping) == 0x0000DC, "Member 'UBTS_AJBCheckMovementError_C::bDebugAbortIfStopping' has a wrong offset!");
static_assert(offsetof(UBTS_AJBCheckMovementError_C, RO_InputDestinationKey) == 0x0000E0, "Member 'UBTS_AJBCheckMovementError_C::RO_InputDestinationKey' has a wrong offset!");
static_assert(offsetof(UBTS_AJBCheckMovementError_C, RO_FinalDestinationKey) == 0x000108, "Member 'UBTS_AJBCheckMovementError_C::RO_FinalDestinationKey' has a wrong offset!");
static_assert(offsetof(UBTS_AJBCheckMovementError_C, LastInputDestination) == 0x000130, "Member 'UBTS_AJBCheckMovementError_C::LastInputDestination' has a wrong offset!");
static_assert(offsetof(UBTS_AJBCheckMovementError_C, LastFinalDestination) == 0x00013C, "Member 'UBTS_AJBCheckMovementError_C::LastFinalDestination' has a wrong offset!");
static_assert(offsetof(UBTS_AJBCheckMovementError_C, StoppingWarningLocker) == 0x000148, "Member 'UBTS_AJBCheckMovementError_C::StoppingWarningLocker' has a wrong offset!");
static_assert(offsetof(UBTS_AJBCheckMovementError_C, StoppingErrorLocker) == 0x000150, "Member 'UBTS_AJBCheckMovementError_C::StoppingErrorLocker' has a wrong offset!");
static_assert(offsetof(UBTS_AJBCheckMovementError_C, Recognition) == 0x000158, "Member 'UBTS_AJBCheckMovementError_C::Recognition' has a wrong offset!");
static_assert(offsetof(UBTS_AJBCheckMovementError_C, CurrentLocation) == 0x000160, "Member 'UBTS_AJBCheckMovementError_C::CurrentLocation' has a wrong offset!");

}

