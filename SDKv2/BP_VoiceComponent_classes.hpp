#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VoiceComponent

#include "Basic.hpp"

#include "ST_FinishVoiceInfo_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AJB_structs.hpp"
#include "E_VoiceCommandType_structs.hpp"
#include "AkAudio_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "E_VoiceProcessType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_VoiceComponent.BP_VoiceComponent_C
// 0x0158 (0x0248 - 0x00F0)
class UBP_VoiceComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00F0(0x0008)(Transient, DuplicateTransient)
	class UDataTable*                             VoiceDataTable;                                    // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 OwnerCharacterShortName;                           // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class UAkComponent*                           AkVoice;                                           // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         KillCount;                                         // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         KillVoiceThreshold;                                // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InitialPlayerCount;                                // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HPThreshold;                                       // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bMatchHasStarted;                                  // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWwiseVoiceEventInfo>           VoiceQueue;                                        // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FST_FinishVoiceInfo>            FinishVoiceInfoList;                               // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class FString                                 MarkerPrefixForReservedBreak;                      // 0x0150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	struct FGameplayTag                           VoiceEventTagForReservedBreak;                     // 0x0160(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bHasReservedVoice;                                 // 0x0168(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShouldDisplayDebugString;                         // 0x0169(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16A[0x2];                                      // 0x016A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxQueueNum;                                       // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PairKillDistanceThreshold;                         // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWwiseVoiceEventInfo                   LastPlayingVoiceEventInfo;                         // 0x0178(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         SameVoicePlayingDuration;                          // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SameVoicePlayingThresholdTimeSec;                  // 0x019C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, struct FGameplayTag>        LandmarkInfoList;                                  // 0x01A0(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class FName>                           CheckedLandmarkTagList;                            // 0x01F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class FString                                 CharacterShortName;                                // 0x0200(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UPrimitiveComponent*>            OverlapVolumes;                                    // 0x0210(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class FName>                           OverlappedHouseTags;                               // 0x0220(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          bPlayEmoteVoiceOnAllClientEnv;                     // 0x0230(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_231[0x7];                                      // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           SpecialKillVoiceTag;                               // 0x0238(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           VoiceTagLastSurvivor;                              // 0x0240(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_VoiceComponent(int32 EntryPoint);
	void OnSpawnSignalPin_Event(const struct FGameplayTag& SignalPinType);
	void OnEmote(int32 VoiceIndex);
	void CheckIsInLandmark();
	void SetupLandmarkWatcher();
	void OnPlayRadioChat(int32 ActionLogIndex, const struct FGameplayTag& VoiceTag);
	void SpeakLastSurvivorVoice();
	void ResetDamageAreaOutVoice();
	void OnStartDamageAreaReduction();
	void ResetDamageAreaDamageVoice();
	void OnDamageAreaOut();
	void OnCharacterPairKill();
	void OnCharacterPairDie();
	void OnCharacterRescueSuccess();
	void OnCharacterRevive(class AActor* Rescuer);
	void OnDown(int32 DownedMachingPlayerIndex);
	void OnDie(bool bWillRessurect, bool bIsLastDefeated, bool bDiedOfKillZ);
	void OnCritical();
	void OnCharacterKill(const struct FGameplayTag& SkillTag, int32 SerialNumber, float AttackDistance, uint8 KilledCharacterId, bool bWithSeparatedStandAttack, bool bHitEnemysSeparatedStand, bool bFirstBlood, int32 UltimateSkillSerialNumberIfInEffect, float ElapsedTime, int32 DeadPlayerID, bool bIsLastDefeated, bool bPlayerKill, bool bSpecialKill);
	void ReceiveTick(float DeltaSeconds);
	void ROC_OnCharacterHidingPropDamaged();
	void OnCharacterHidingPropDamaged_OnServer();
	void ROC_OnCharacterHideIntoZipper();
	void OnCharacterHideIntoZipper_OnServer();
	void OnCharacterEmote(int32 VoiceIndex);
	void OnCharacterRessurect();
	void ROC_OnCharacterPassThruEnter();
	void OnCharacterPassThruEnter_OnServer(bool bOriginToCounterpart);
	void OnCharacterSkillGrownup(const struct FGameplayTag& GameplayTag, float Value);
	void OnGameStateChangeLivingPlayerCount(int32 Count, float LivingPlayerRate, int32 PairCount);
	void BindGameStateDispatcher();
	void OnHUDOpenTheGame();
	void BindHUDDispatcher();
	void OnCharacterPassiveAdded(const struct FGameplayTag& AddCondition);
	void OnCharacterGiveDamage(int32 Damage, const struct FGameplayTag& DamageType, class AActor* DamageReceiver, bool bRemainHP, bool bDamageIsCut, int32 SerialNumber, bool DamageReceiverIsPlayer, bool bWithSeparatedStandAttack, bool bEnemysSeparateStand);
	void OnCharacterReceiveDamage(int32 Damage, const struct FGameplayTag& DamageType, class AActor* DamageCauser, bool bRemainHP, bool bDamageIsCutByStatus, bool bDamageIsCutByAAP);
	void OnCharacterGetItem(const struct FGameplayTag& ItemTag);
	void OnCharacterJump();
	void BindCharacterDispatcher();
	void ReceiveBeginPlay();
	void OnServer_SpeakFromRemote_Core(class ABP_AJBInGameCharacter_C* CharacterBPToSpeak, class ABP_AJBInGameCharacter_C* CharacterBPForComm, const struct FGameplayTag& VoiceTag, E_VoiceCommandType VoiceCommandType, bool bAlsoSpeakOnPairEnv);
	void SpeakFromRemote(const struct FGameplayTag& VoiceTag, E_VoiceCommandType VoiceCommandType);
	void ROS_SpeakFromRemote(const struct FGameplayTag& VoiceTag, E_VoiceCommandType VoiceCommandType, bool bAlsoSpeakOnPairEnv);
	void OnWwiseEventCallback(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo);
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);
	void TryToSpeak(const struct FGameplayTag& VoiceTag, E_VoiceProcessType VoiceProcessType, bool bSpeakEvenIfNotAlive, bool bSpeakEvenIfDuringTheWorld, bool bSpeakEvenIfNotLocalEnv, bool bAlsoSpeakOnPairEnv, bool bIgnoreIfDuringTheWorld, bool bSpeakIfTheSameEventIsNotQueued, bool* bWillBeSpoken);
	void GetCharacterShortName(bool* Result, class FString* ShortName);
	void GetVoiceEventInfo(const struct FGameplayTag& VoiceTagWithoutCharacterShortName, bool* bResult, struct FWwiseVoiceEventInfo* VoiceEventInfo);
	void TryToSpeakFromQueue();
	void GetCurrentSpokenVoiceEventInfo(struct FWwiseVoiceEventInfo* VoiceEventInfo);
	void PostEvent(const struct FGameplayTag& VoiceTag);
	void TryToSpeakFinishVoice();
	void ReserveBreak(const struct FGameplayTag& VoiceEventTagToStop);
	void RemoveBreakReservation();
	void CheckPostedAkEventExistence(int32 PostAkEventReturnValue, const class FString& WwiseEvent, bool* bExist);
	void ShouldSpeakVoiceFromRemote(bool* bResult);
	bool VoiceEventIsStopEvent(const struct FWwiseVoiceEventInfo& VoiceEvent);
	void TryToSpeakDamageVoice(const struct FGameplayTag& VoiceTag, bool bCausedByDamageArea);
	void TryToSpeakEmoteVoicePoliticClientEnv(int32 VoiceIndex);
	void GetSignalVoiceTag(const struct FGameplayTag& SignalPinType, struct FGameplayTag* VoiceTag);
	void CheckQueuedVoiceTag(const struct FGameplayTag& VoiceTag, bool* bQueued, int32* QueuedNum);
	void CheckQueuedVoiceEvent(const class FString& EventName, bool bExactMatch, bool* bQueued);
	void DequeueVoiceEvent(const class FString& EventName, bool bExactMatch);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_VoiceComponent_C">();
	}
	static class UBP_VoiceComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_VoiceComponent_C>();
	}
};
static_assert(alignof(UBP_VoiceComponent_C) == 0x000008, "Wrong alignment on UBP_VoiceComponent_C");
static_assert(sizeof(UBP_VoiceComponent_C) == 0x000248, "Wrong size on UBP_VoiceComponent_C");
static_assert(offsetof(UBP_VoiceComponent_C, UberGraphFrame) == 0x0000F0, "Member 'UBP_VoiceComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_VoiceComponent_C, VoiceDataTable) == 0x0000F8, "Member 'UBP_VoiceComponent_C::VoiceDataTable' has a wrong offset!");
static_assert(offsetof(UBP_VoiceComponent_C, OwnerCharacterShortName) == 0x000100, "Member 'UBP_VoiceComponent_C::OwnerCharacterShortName' has a wrong offset!");
static_assert(offsetof(UBP_VoiceComponent_C, AkVoice) == 0x000110, "Member 'UBP_VoiceComponent_C::AkVoice' has a wrong offset!");
static_assert(offsetof(UBP_VoiceComponent_C, KillCount) == 0x000118, "Member 'UBP_VoiceComponent_C::KillCount' has a wrong offset!");
static_assert(offsetof(UBP_VoiceComponent_C, KillVoiceThreshold) == 0x00011C, "Member 'UBP_VoiceComponent_C::KillVoiceThreshold' has a wrong offset!");
static_assert(offsetof(UBP_VoiceComponent_C, InitialPlayerCount) == 0x000120, "Member 'UBP_VoiceComponent_C::InitialPlayerCount' has a wrong offset!");
static_assert(offsetof(UBP_VoiceComponent_C, HPThreshold) == 0x000124, "Member 'UBP_VoiceComponent_C::HPThreshold' has a wrong offset!");
static_assert(offsetof(UBP_VoiceComponent_C, bMatchHasStarted) == 0x000128, "Member 'UBP_VoiceComponent_C::bMatchHasStarted' has a wrong offset!");
static_assert(offsetof(UBP_VoiceComponent_C, VoiceQueue) == 0x000130, "Member 'UBP_VoiceComponent_C::VoiceQueue' has a wrong offset!");
static_assert(offsetof(UBP_VoiceComponent_C, FinishVoiceInfoList) == 0x000140, "Member 'UBP_VoiceComponent_C::FinishVoiceInfoList' has a wrong offset!");
static_assert(offsetof(UBP_VoiceComponent_C, MarkerPrefixForReservedBreak) == 0x000150, "Member 'UBP_VoiceComponent_C::MarkerPrefixForReservedBreak' has a wrong offset!");
static_assert(offsetof(UBP_VoiceComponent_C, VoiceEventTagForReservedBreak) == 0x000160, "Member 'UBP_VoiceComponent_C::VoiceEventTagForReservedBreak' has a wrong offset!");
static_assert(offsetof(UBP_VoiceComponent_C, bHasReservedVoice) == 0x000168, "Member 'UBP_VoiceComponent_C::bHasReservedVoice' has a wrong offset!");
static_assert(offsetof(UBP_VoiceComponent_C, bShouldDisplayDebugString) == 0x000169, "Member 'UBP_VoiceComponent_C::bShouldDisplayDebugString' has a wrong offset!");
static_assert(offsetof(UBP_VoiceComponent_C, MaxQueueNum) == 0x00016C, "Member 'UBP_VoiceComponent_C::MaxQueueNum' has a wrong offset!");
static_assert(offsetof(UBP_VoiceComponent_C, PairKillDistanceThreshold) == 0x000170, "Member 'UBP_VoiceComponent_C::PairKillDistanceThreshold' has a wrong offset!");
static_assert(offsetof(UBP_VoiceComponent_C, LastPlayingVoiceEventInfo) == 0x000178, "Member 'UBP_VoiceComponent_C::LastPlayingVoiceEventInfo' has a wrong offset!");
static_assert(offsetof(UBP_VoiceComponent_C, SameVoicePlayingDuration) == 0x000198, "Member 'UBP_VoiceComponent_C::SameVoicePlayingDuration' has a wrong offset!");
static_assert(offsetof(UBP_VoiceComponent_C, SameVoicePlayingThresholdTimeSec) == 0x00019C, "Member 'UBP_VoiceComponent_C::SameVoicePlayingThresholdTimeSec' has a wrong offset!");
static_assert(offsetof(UBP_VoiceComponent_C, LandmarkInfoList) == 0x0001A0, "Member 'UBP_VoiceComponent_C::LandmarkInfoList' has a wrong offset!");
static_assert(offsetof(UBP_VoiceComponent_C, CheckedLandmarkTagList) == 0x0001F0, "Member 'UBP_VoiceComponent_C::CheckedLandmarkTagList' has a wrong offset!");
static_assert(offsetof(UBP_VoiceComponent_C, CharacterShortName) == 0x000200, "Member 'UBP_VoiceComponent_C::CharacterShortName' has a wrong offset!");
static_assert(offsetof(UBP_VoiceComponent_C, OverlapVolumes) == 0x000210, "Member 'UBP_VoiceComponent_C::OverlapVolumes' has a wrong offset!");
static_assert(offsetof(UBP_VoiceComponent_C, OverlappedHouseTags) == 0x000220, "Member 'UBP_VoiceComponent_C::OverlappedHouseTags' has a wrong offset!");
static_assert(offsetof(UBP_VoiceComponent_C, bPlayEmoteVoiceOnAllClientEnv) == 0x000230, "Member 'UBP_VoiceComponent_C::bPlayEmoteVoiceOnAllClientEnv' has a wrong offset!");
static_assert(offsetof(UBP_VoiceComponent_C, SpecialKillVoiceTag) == 0x000238, "Member 'UBP_VoiceComponent_C::SpecialKillVoiceTag' has a wrong offset!");
static_assert(offsetof(UBP_VoiceComponent_C, VoiceTagLastSurvivor) == 0x000240, "Member 'UBP_VoiceComponent_C::VoiceTagLastSurvivor' has a wrong offset!");

}

