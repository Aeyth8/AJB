#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_ModeSelectButtonBase

#include "Basic.hpp"

#include "WB_ModeSelectButtonBase_classes.hpp"
#include "WB_ModeSelectButtonBase_parameters.hpp"


namespace SDK
{

// Function WB_ModeSelectButtonBase.WB_ModeSelectButtonBase_C.ExecuteUbergraph_WB_ModeSelectButtonBase
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_ModeSelectButtonBase_C::ExecuteUbergraph_WB_ModeSelectButtonBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ModeSelectButtonBase_C", "ExecuteUbergraph_WB_ModeSelectButtonBase");

	Params::WB_ModeSelectButtonBase_C_ExecuteUbergraph_WB_ModeSelectButtonBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_ModeSelectButtonBase.WB_ModeSelectButtonBase_C.ForceUpdateEnableSelect
// (BlueprintCallable, BlueprintEvent)

void UWB_ModeSelectButtonBase_C::ForceUpdateEnableSelect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ModeSelectButtonBase_C", "ForceUpdateEnableSelect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_ModeSelectButtonBase.WB_ModeSelectButtonBase_C.HidePPDisplay
// (BlueprintCallable, BlueprintEvent)

void UWB_ModeSelectButtonBase_C::HidePPDisplay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ModeSelectButtonBase_C", "HidePPDisplay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_ModeSelectButtonBase.WB_ModeSelectButtonBase_C.BeginUpdateAura
// (BlueprintCallable, BlueprintEvent)

void UWB_ModeSelectButtonBase_C::BeginUpdateAura()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ModeSelectButtonBase_C", "BeginUpdateAura");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_ModeSelectButtonBase.WB_ModeSelectButtonBase_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWB_ModeSelectButtonBase_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ModeSelectButtonBase_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_ModeSelectButtonBase.WB_ModeSelectButtonBase_C.OnDecidedButtonEvent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAJBButtonWidget*                 OwnerWidget                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAJBButton*                       TargetButton                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_ModeSelectButtonBase_C::OnDecidedButtonEvent(class UAJBButtonWidget* OwnerWidget, class UAJBButton* TargetButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ModeSelectButtonBase_C", "OnDecidedButtonEvent");

	Params::WB_ModeSelectButtonBase_C_OnDecidedButtonEvent Parms{};

	Parms.OwnerWidget = OwnerWidget;
	Parms.TargetButton = TargetButton;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_ModeSelectButtonBase.WB_ModeSelectButtonBase_C.ResetPressAndReleaseAnimation
// (BlueprintCallable, BlueprintEvent)

void UWB_ModeSelectButtonBase_C::ResetPressAndReleaseAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ModeSelectButtonBase_C", "ResetPressAndReleaseAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_ModeSelectButtonBase.WB_ModeSelectButtonBase_C.SetNeedPP
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NeedPP_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_ModeSelectButtonBase_C::SetNeedPP(int32 NeedPP_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ModeSelectButtonBase_C", "SetNeedPP");

	Params::WB_ModeSelectButtonBase_C_SetNeedPP Parms{};

	Parms.NeedPP_0 = NeedPP_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_ModeSelectButtonBase.WB_ModeSelectButtonBase_C.OnClosingParentWindow
// (BlueprintCallable, BlueprintEvent)

void UWB_ModeSelectButtonBase_C::OnClosingParentWindow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ModeSelectButtonBase_C", "OnClosingParentWindow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_ModeSelectButtonBase.WB_ModeSelectButtonBase_C.OnOpeningParentWindow
// (BlueprintCallable, BlueprintEvent)

void UWB_ModeSelectButtonBase_C::OnOpeningParentWindow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ModeSelectButtonBase_C", "OnOpeningParentWindow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_ModeSelectButtonBase.WB_ModeSelectButtonBase_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_ModeSelectButtonBase_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ModeSelectButtonBase_C", "PreConstruct");

	Params::WB_ModeSelectButtonBase_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_ModeSelectButtonBase.WB_ModeSelectButtonBase_C.SetEnableSelect
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSelectable                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_ModeSelectButtonBase_C::SetEnableSelect(bool bSelectable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ModeSelectButtonBase_C", "SetEnableSelect");

	Params::WB_ModeSelectButtonBase_C_SetEnableSelect Parms{};

	Parms.bSelectable = bSelectable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_ModeSelectButtonBase.WB_ModeSelectButtonBase_C.OnButtonReleasedAnimation
// (Event, Public, BlueprintEvent)

void UWB_ModeSelectButtonBase_C::OnButtonReleasedAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ModeSelectButtonBase_C", "OnButtonReleasedAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_ModeSelectButtonBase.WB_ModeSelectButtonBase_C.OnButtonPressedAnimation
// (Event, Public, BlueprintEvent)

void UWB_ModeSelectButtonBase_C::OnButtonPressedAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ModeSelectButtonBase_C", "OnButtonPressedAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_ModeSelectButtonBase.WB_ModeSelectButtonBase_C.LeftPadCh
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SourceString                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   ChCount                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           PadCh                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UWB_ModeSelectButtonBase_C::LeftPadCh(const class FString& SourceString, int32 ChCount, const class FString& PadCh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ModeSelectButtonBase_C", "LeftPadCh");

	Params::WB_ModeSelectButtonBase_C_LeftPadCh Parms{};

	Parms.SourceString = std::move(SourceString);
	Parms.ChCount = ChCount;
	Parms.PadCh = std::move(PadCh);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WB_ModeSelectButtonBase.WB_ModeSelectButtonBase_C.TryGetNextMatchableDateText
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FDateTime                        Date                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FDateTime                        EndDate                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FMatchScheduleTimeInfo           StartTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FMatchScheduleTimeInfo           EndTime                                                (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FText                             Result                                                 (Parm, OutParm)

void UWB_ModeSelectButtonBase_C::TryGetNextMatchableDateText(const struct FDateTime& Date, const struct FDateTime& EndDate, const struct FMatchScheduleTimeInfo& StartTime, const struct FMatchScheduleTimeInfo& EndTime, bool* bSuccess, class FText* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ModeSelectButtonBase_C", "TryGetNextMatchableDateText");

	Params::WB_ModeSelectButtonBase_C_TryGetNextMatchableDateText Parms{};

	Parms.Date = std::move(Date);
	Parms.EndDate = std::move(EndDate);
	Parms.StartTime = std::move(StartTime);
	Parms.EndTime = std::move(EndTime);

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function WB_ModeSelectButtonBase.WB_ModeSelectButtonBase_C.IsEnableSelect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bEnable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_ModeSelectButtonBase_C::IsEnableSelect(bool* bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ModeSelectButtonBase_C", "IsEnableSelect");

	Params::WB_ModeSelectButtonBase_C_IsEnableSelect Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnable != nullptr)
		*bEnable = Parms.bEnable;
}


// Function WB_ModeSelectButtonBase.WB_ModeSelectButtonBase_C.IsButtonDecisioning
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsDecisioning                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_ModeSelectButtonBase_C::IsButtonDecisioning(bool* IsDecisioning)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ModeSelectButtonBase_C", "IsButtonDecisioning");

	Params::WB_ModeSelectButtonBase_C_IsButtonDecisioning Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsDecisioning != nullptr)
		*IsDecisioning = Parms.IsDecisioning;
}


// Function WB_ModeSelectButtonBase.WB_ModeSelectButtonBase_C.IsBonusUpPeriod
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBonusUp                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_ModeSelectButtonBase_C::IsBonusUpPeriod(bool* bBonusUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ModeSelectButtonBase_C", "IsBonusUpPeriod");

	Params::WB_ModeSelectButtonBase_C_IsBonusUpPeriod Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bBonusUp != nullptr)
		*bBonusUp = Parms.bBonusUp;
}


// Function WB_ModeSelectButtonBase.WB_ModeSelectButtonBase_C.GetAuraImage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UImage*                           AuraImage                                              (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_ModeSelectButtonBase_C::GetAuraImage(class UImage** AuraImage) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ModeSelectButtonBase_C", "GetAuraImage");

	Params::WB_ModeSelectButtonBase_C_GetAuraImage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AuraImage != nullptr)
		*AuraImage = Parms.AuraImage;
}


// Function WB_ModeSelectButtonBase.WB_ModeSelectButtonBase_C.IsHavingNeedPP
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    HaveNeedPP                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_ModeSelectButtonBase_C::IsHavingNeedPP(bool* HaveNeedPP) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ModeSelectButtonBase_C", "IsHavingNeedPP");

	Params::WB_ModeSelectButtonBase_C_IsHavingNeedPP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HaveNeedPP != nullptr)
		*HaveNeedPP = Parms.HaveNeedPP;
}


// Function WB_ModeSelectButtonBase.WB_ModeSelectButtonBase_C.ASCNumChr2JISNumChr
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FString                           ASCNum                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           JISNum                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UWB_ModeSelectButtonBase_C::ASCNumChr2JISNumChr(const class FString& ASCNum, class FString* JISNum) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ModeSelectButtonBase_C", "ASCNumChr2JISNumChr");

	Params::WB_ModeSelectButtonBase_C_ASCNumChr2JISNumChr Parms{};

	Parms.ASCNum = std::move(ASCNum);

	UObject::ProcessEvent(Func, &Parms);

	if (JISNum != nullptr)
		*JISNum = std::move(Parms.JISNum);
}


// Function WB_ModeSelectButtonBase.WB_ModeSelectButtonBase_C.ASCNumStr2JISNumStr
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class FString                           ASCNum                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           JISNum                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UWB_ModeSelectButtonBase_C::ASCNumStr2JISNumStr(const class FString& ASCNum, class FString* JISNum) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ModeSelectButtonBase_C", "ASCNumStr2JISNumStr");

	Params::WB_ModeSelectButtonBase_C_ASCNumStr2JISNumStr Parms{};

	Parms.ASCNum = std::move(ASCNum);

	UObject::ProcessEvent(Func, &Parms);

	if (JISNum != nullptr)
		*JISNum = std::move(Parms.JISNum);
}


// Function WB_ModeSelectButtonBase.WB_ModeSelectButtonBase_C.GetRetainerEffectMaterial
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UMaterialInstanceDynamic*         EffectMaterial                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_ModeSelectButtonBase_C::GetRetainerEffectMaterial(class UMaterialInstanceDynamic** EffectMaterial) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ModeSelectButtonBase_C", "GetRetainerEffectMaterial");

	Params::WB_ModeSelectButtonBase_C_GetRetainerEffectMaterial Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (EffectMaterial != nullptr)
		*EffectMaterial = Parms.EffectMaterial;
}


// Function WB_ModeSelectButtonBase.WB_ModeSelectButtonBase_C.GetButtonCenterPosition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ScreenPosition                                         (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_ModeSelectButtonBase_C::GetButtonCenterPosition(struct FVector2D* ScreenPosition) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ModeSelectButtonBase_C", "GetButtonCenterPosition");

	Params::WB_ModeSelectButtonBase_C_GetButtonCenterPosition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ScreenPosition != nullptr)
		*ScreenPosition = std::move(Parms.ScreenPosition);
}


// Function WB_ModeSelectButtonBase.WB_ModeSelectButtonBase_C.IsPressableVisibility
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UWB_ModeSelectButtonBase_C::IsPressableVisibility() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ModeSelectButtonBase_C", "IsPressableVisibility");

	Params::WB_ModeSelectButtonBase_C_IsPressableVisibility Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

