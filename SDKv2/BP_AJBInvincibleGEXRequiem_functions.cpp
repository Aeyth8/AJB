#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInvincibleGEXRequiem

#include "Basic.hpp"

#include "BP_AJBInvincibleGEXRequiem_classes.hpp"
#include "BP_AJBInvincibleGEXRequiem_parameters.hpp"


namespace SDK
{

// Function BP_AJBInvincibleGEXRequiem.BP_AJBInvincibleGEXRequiem_C.ExecuteUbergraph_BP_AJBInvincibleGEXRequiem
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBInvincibleGEXRequiem_C::ExecuteUbergraph_BP_AJBInvincibleGEXRequiem(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInvincibleGEXRequiem_C", "ExecuteUbergraph_BP_AJBInvincibleGEXRequiem");

	Params::BP_AJBInvincibleGEXRequiem_C_ExecuteUbergraph_BP_AJBInvincibleGEXRequiem Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInvincibleGEXRequiem.BP_AJBInvincibleGEXRequiem_C.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBInvincibleGEXRequiem_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInvincibleGEXRequiem_C", "ReceiveEndPlay");

	Params::BP_AJBInvincibleGEXRequiem_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInvincibleGEXRequiem.BP_AJBInvincibleGEXRequiem_C.SetCollisionEnabled
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBInvincibleGEXRequiem_C::SetCollisionEnabled(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInvincibleGEXRequiem_C", "SetCollisionEnabled");

	Params::BP_AJBInvincibleGEXRequiem_C_SetCollisionEnabled Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInvincibleGEXRequiem.BP_AJBInvincibleGEXRequiem_C.OnBlocking
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bImpulseDamage                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBInvincibleGEXRequiem_C::OnBlocking(const struct FVector& HitLocation, bool bImpulseDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInvincibleGEXRequiem_C", "OnBlocking");

	Params::BP_AJBInvincibleGEXRequiem_C_OnBlocking Parms{};

	Parms.HitLocation = std::move(HitLocation);
	Parms.bImpulseDamage = bImpulseDamage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInvincibleGEXRequiem.BP_AJBInvincibleGEXRequiem_C.BeginOverlap_BlockCollision
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void UBP_AJBInvincibleGEXRequiem_C::BeginOverlap_BlockCollision(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInvincibleGEXRequiem_C", "BeginOverlap_BlockCollision");

	Params::BP_AJBInvincibleGEXRequiem_C_BeginOverlap_BlockCollision Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInvincibleGEXRequiem.BP_AJBInvincibleGEXRequiem_C.OnBeginOverlap_BlockCollision
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    FromSweep                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void UBP_AJBInvincibleGEXRequiem_C::OnBeginOverlap_BlockCollision(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool FromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInvincibleGEXRequiem_C", "OnBeginOverlap_BlockCollision");

	Params::BP_AJBInvincibleGEXRequiem_C_OnBeginOverlap_BlockCollision Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.FromSweep = FromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInvincibleGEXRequiem.BP_AJBInvincibleGEXRequiem_C.ChangeInvincibleStatus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBInvincibleGEXRequiem_C::ChangeInvincibleStatus(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInvincibleGEXRequiem_C", "ChangeInvincibleStatus");

	Params::BP_AJBInvincibleGEXRequiem_C_ChangeInvincibleStatus Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInvincibleGEXRequiem.BP_AJBInvincibleGEXRequiem_C.OnContinuedParticleInactivated
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBInvincibleGEXRequiem_C::OnContinuedParticleInactivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInvincibleGEXRequiem_C", "OnContinuedParticleInactivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInvincibleGEXRequiem.BP_AJBInvincibleGEXRequiem_C.OnContinuedParticleActivated
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBInvincibleGEXRequiem_C::OnContinuedParticleActivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInvincibleGEXRequiem_C", "OnContinuedParticleActivated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInvincibleGEXRequiem.BP_AJBInvincibleGEXRequiem_C.SpawnEndParticle
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_AJBInvincibleGEXRequiem_C::SpawnEndParticle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInvincibleGEXRequiem_C", "SpawnEndParticle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInvincibleGEXRequiem.BP_AJBInvincibleGEXRequiem_C.TryDestroyParticleOnGEX
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_AJBInvincibleGEXRequiem_C::TryDestroyParticleOnGEX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInvincibleGEXRequiem_C", "TryDestroyParticleOnGEX");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInvincibleGEXRequiem.BP_AJBInvincibleGEXRequiem_C.GetCauserOwnerCharacterBP
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_AJBInGameCharacter_C*         CharacterBP                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBInvincibleGEXRequiem_C::GetCauserOwnerCharacterBP(class ABP_AJBInGameCharacter_C** CharacterBP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInvincibleGEXRequiem_C", "GetCauserOwnerCharacterBP");

	Params::BP_AJBInvincibleGEXRequiem_C_GetCauserOwnerCharacterBP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CharacterBP != nullptr)
		*CharacterBP = Parms.CharacterBP;
}


// Function BP_AJBInvincibleGEXRequiem.BP_AJBInvincibleGEXRequiem_C.GetPassiveSkillTag
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     PassiveSkillTag                                        (Parm, OutParm, NoDestructor, HasGetValueTypeHash)

void UBP_AJBInvincibleGEXRequiem_C::GetPassiveSkillTag(struct FGameplayTag* PassiveSkillTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInvincibleGEXRequiem_C", "GetPassiveSkillTag");

	Params::BP_AJBInvincibleGEXRequiem_C_GetPassiveSkillTag Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PassiveSkillTag != nullptr)
		*PassiveSkillTag = std::move(Parms.PassiveSkillTag);
}


// Function BP_AJBInvincibleGEXRequiem.BP_AJBInvincibleGEXRequiem_C.GetDuration
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Duration                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBInvincibleGEXRequiem_C::GetDuration(float* Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInvincibleGEXRequiem_C", "GetDuration");

	Params::BP_AJBInvincibleGEXRequiem_C_GetDuration Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Duration != nullptr)
		*Duration = Parms.Duration;
}


// Function BP_AJBInvincibleGEXRequiem.BP_AJBInvincibleGEXRequiem_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_AJBInvincibleGEXRequiem_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInvincibleGEXRequiem_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInvincibleGEXRequiem.BP_AJBInvincibleGEXRequiem_C.OnActionInactivate
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bTriggeredByStand                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBInvincibleGEXRequiem_C::OnActionInactivate(bool bTriggeredByStand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInvincibleGEXRequiem_C", "OnActionInactivate");

	Params::BP_AJBInvincibleGEXRequiem_C_OnActionInactivate Parms{};

	Parms.bTriggeredByStand = bTriggeredByStand;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInvincibleGEXRequiem.BP_AJBInvincibleGEXRequiem_C.OnActionActivate
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bTriggeredByStand                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBInvincibleGEXRequiem_C::OnActionActivate(bool bTriggeredByStand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInvincibleGEXRequiem_C", "OnActionActivate");

	Params::BP_AJBInvincibleGEXRequiem_C_OnActionActivate Parms{};

	Parms.bTriggeredByStand = bTriggeredByStand;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInvincibleGEXRequiem.BP_AJBInvincibleGEXRequiem_C.NotifyTheWorld
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAJBInGameCharacter*              Operator                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EGeneralTiming                          Timing                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bOperatorIsEmpty                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBInvincibleGEXRequiem_C::NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInvincibleGEXRequiem_C", "NotifyTheWorld");

	Params::BP_AJBInvincibleGEXRequiem_C_NotifyTheWorld Parms{};

	Parms.Operator = Operator;
	Parms.Time = Time;
	Parms.Timing = Timing;
	Parms.bEnable = bEnable;
	Parms.bOperatorIsEmpty = bOperatorIsEmpty;

	UObject::ProcessEvent(Func, &Parms);
}

}

