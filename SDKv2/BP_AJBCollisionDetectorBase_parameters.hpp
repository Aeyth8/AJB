#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBCollisionDetectorBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_AJBCollisionDetectorBase.BP_AJBCollisionDetectorBase_C.ExecuteUbergraph_BP_AJBCollisionDetectorBase
// 0x01B0 (0x01B0 - 0x0000)
struct BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0xB];                                       // 0x0015(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0020(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x0058(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_CollisionDetectReceiver_C> K2Node_DynamicCast_AsBI_Collision_Detect_Receiver; // 0x00E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoesImplementInterface_ReturnValue;       // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FB[0x5];                                       // 0x00FB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0100(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0110(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0120(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          K2Node_Event_bEnable;                              // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckPossibleOverlapDistance_bPossible;   // 0x01A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionEnabled                             Temp_byte_Variable;                                // 0x01AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             Temp_byte_Variable1;                               // 0x01AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             K2Node_Select_Default;                             // 0x01AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase) == 0x000010, "Wrong alignment on BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase");
static_assert(sizeof(BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase) == 0x0001B0, "Wrong size on BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase, EntryPoint) == 0x000000, "Member 'BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase, Temp_bool_Variable) == 0x000004, "Member 'BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase, K2Node_Event_DeltaSeconds) == 0x000010, "Member 'BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase, CallFunc_IsValid_ReturnValue) == 0x000014, "Member 'BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase, CallFunc_GetTransform_ReturnValue) == 0x000020, "Member 'BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase, CallFunc_GetOwner_ReturnValue1) == 0x000050, "Member 'BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x000058, "Member 'BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase, CallFunc_K2_SetActorTransform_ReturnValue) == 0x0000E0, "Member 'BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase, K2Node_DynamicCast_AsBI_Collision_Detect_Receiver) == 0x0000E8, "Member 'BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase::K2Node_DynamicCast_AsBI_Collision_Detect_Receiver' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase, K2Node_DynamicCast_bSuccess) == 0x0000F8, "Member 'BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase, CallFunc_DoesImplementInterface_ReturnValue) == 0x0000F9, "Member 'BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase::CallFunc_DoesImplementInterface_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase, CallFunc_IsValid_ReturnValue1) == 0x0000FA, "Member 'BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000100, "Member 'BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase, K2Node_ComponentBoundEvent_OtherActor) == 0x000108, "Member 'BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase, K2Node_ComponentBoundEvent_OtherComp) == 0x000110, "Member 'BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000118, "Member 'BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase, K2Node_ComponentBoundEvent_bFromSweep) == 0x00011C, "Member 'BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase, K2Node_ComponentBoundEvent_SweepResult) == 0x000120, "Member 'BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase, K2Node_Event_bEnable) == 0x0001A8, "Member 'BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase::K2Node_Event_bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase, CallFunc_CheckPossibleOverlapDistance_bPossible) == 0x0001A9, "Member 'BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase::CallFunc_CheckPossibleOverlapDistance_bPossible' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase, Temp_byte_Variable) == 0x0001AA, "Member 'BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase, Temp_byte_Variable1) == 0x0001AB, "Member 'BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase, K2Node_Select_Default) == 0x0001AC, "Member 'BP_AJBCollisionDetectorBase_C_ExecuteUbergraph_BP_AJBCollisionDetectorBase::K2Node_Select_Default' has a wrong offset!");

// Function BP_AJBCollisionDetectorBase.BP_AJBCollisionDetectorBase_C.ChangeEnable
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBCollisionDetectorBase_C_ChangeEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBCollisionDetectorBase_C_ChangeEnable) == 0x000001, "Wrong alignment on BP_AJBCollisionDetectorBase_C_ChangeEnable");
static_assert(sizeof(BP_AJBCollisionDetectorBase_C_ChangeEnable) == 0x000001, "Wrong size on BP_AJBCollisionDetectorBase_C_ChangeEnable");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_ChangeEnable, bEnable) == 0x000000, "Member 'BP_AJBCollisionDetectorBase_C_ChangeEnable::bEnable' has a wrong offset!");

// Function BP_AJBCollisionDetectorBase.BP_AJBCollisionDetectorBase_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBCollisionDetectorBase_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBCollisionDetectorBase_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_AJBCollisionDetectorBase_C_ReceiveTick");
static_assert(sizeof(BP_AJBCollisionDetectorBase_C_ReceiveTick) == 0x000004, "Wrong size on BP_AJBCollisionDetectorBase_C_ReceiveTick");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_AJBCollisionDetectorBase_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_AJBCollisionDetectorBase.BP_AJBCollisionDetectorBase_C.BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct BP_AJBCollisionDetectorBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_AJBCollisionDetectorBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_AJBCollisionDetectorBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_AJBCollisionDetectorBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on BP_AJBCollisionDetectorBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_AJBCollisionDetectorBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_AJBCollisionDetectorBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_AJBCollisionDetectorBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_AJBCollisionDetectorBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_AJBCollisionDetectorBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_AJBCollisionDetectorBase_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_AJBCollisionDetectorBase.BP_AJBCollisionDetectorBase_C.CheckPossibleOverlapDistance
// 0x0003 (0x0003 - 0x0000)
struct BP_AJBCollisionDetectorBase_C_CheckPossibleOverlapDistance final
{
public:
	bool                                          bPossible;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBCollisionDetectorBase_C_CheckPossibleOverlapDistance) == 0x000001, "Wrong alignment on BP_AJBCollisionDetectorBase_C_CheckPossibleOverlapDistance");
static_assert(sizeof(BP_AJBCollisionDetectorBase_C_CheckPossibleOverlapDistance) == 0x000003, "Wrong size on BP_AJBCollisionDetectorBase_C_CheckPossibleOverlapDistance");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_CheckPossibleOverlapDistance, bPossible) == 0x000000, "Member 'BP_AJBCollisionDetectorBase_C_CheckPossibleOverlapDistance::bPossible' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_CheckPossibleOverlapDistance, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000001, "Member 'BP_AJBCollisionDetectorBase_C_CheckPossibleOverlapDistance::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_CheckPossibleOverlapDistance, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000002, "Member 'BP_AJBCollisionDetectorBase_C_CheckPossibleOverlapDistance::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_AJBCollisionDetectorBase.BP_AJBCollisionDetectorBase_C.SetLeftOverlapDistance
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBCollisionDetectorBase_C_SetLeftOverlapDistance final
{
public:
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBCollisionDetectorBase_C_SetLeftOverlapDistance) == 0x000001, "Wrong alignment on BP_AJBCollisionDetectorBase_C_SetLeftOverlapDistance");
static_assert(sizeof(BP_AJBCollisionDetectorBase_C_SetLeftOverlapDistance) == 0x000001, "Wrong size on BP_AJBCollisionDetectorBase_C_SetLeftOverlapDistance");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_SetLeftOverlapDistance, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000000, "Member 'BP_AJBCollisionDetectorBase_C_SetLeftOverlapDistance::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_AJBCollisionDetectorBase.BP_AJBCollisionDetectorBase_C.UpdateLeftOverlapDistance
// 0x002C (0x002C - 0x0000)
struct BP_AJBCollisionDetectorBase_C_UpdateLeftOverlapDistance final
{
public:
	float                                         TempPreLeftOverlapDistance;                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0004(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0014(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBCollisionDetectorBase_C_UpdateLeftOverlapDistance) == 0x000004, "Wrong alignment on BP_AJBCollisionDetectorBase_C_UpdateLeftOverlapDistance");
static_assert(sizeof(BP_AJBCollisionDetectorBase_C_UpdateLeftOverlapDistance) == 0x00002C, "Wrong size on BP_AJBCollisionDetectorBase_C_UpdateLeftOverlapDistance");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_UpdateLeftOverlapDistance, TempPreLeftOverlapDistance) == 0x000000, "Member 'BP_AJBCollisionDetectorBase_C_UpdateLeftOverlapDistance::TempPreLeftOverlapDistance' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_UpdateLeftOverlapDistance, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000004, "Member 'BP_AJBCollisionDetectorBase_C_UpdateLeftOverlapDistance::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_UpdateLeftOverlapDistance, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_AJBCollisionDetectorBase_C_UpdateLeftOverlapDistance::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_UpdateLeftOverlapDistance, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000014, "Member 'BP_AJBCollisionDetectorBase_C_UpdateLeftOverlapDistance::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_UpdateLeftOverlapDistance, CallFunc_VSize_ReturnValue) == 0x000020, "Member 'BP_AJBCollisionDetectorBase_C_UpdateLeftOverlapDistance::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_UpdateLeftOverlapDistance, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000024, "Member 'BP_AJBCollisionDetectorBase_C_UpdateLeftOverlapDistance::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_UpdateLeftOverlapDistance, CallFunc_FMax_ReturnValue) == 0x000028, "Member 'BP_AJBCollisionDetectorBase_C_UpdateLeftOverlapDistance::CallFunc_FMax_ReturnValue' has a wrong offset!");

// Function BP_AJBCollisionDetectorBase.BP_AJBCollisionDetectorBase_C.UpdatePreLocation
// 0x000C (0x000C - 0x0000)
struct BP_AJBCollisionDetectorBase_C_UpdatePreLocation final
{
public:
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0000(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBCollisionDetectorBase_C_UpdatePreLocation) == 0x000004, "Wrong alignment on BP_AJBCollisionDetectorBase_C_UpdatePreLocation");
static_assert(sizeof(BP_AJBCollisionDetectorBase_C_UpdatePreLocation) == 0x00000C, "Wrong size on BP_AJBCollisionDetectorBase_C_UpdatePreLocation");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_UpdatePreLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000000, "Member 'BP_AJBCollisionDetectorBase_C_UpdatePreLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

// Function BP_AJBCollisionDetectorBase.BP_AJBCollisionDetectorBase_C.ResetLeftOverlapDistance
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBCollisionDetectorBase_C_ResetLeftOverlapDistance final
{
public:
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBCollisionDetectorBase_C_ResetLeftOverlapDistance) == 0x000001, "Wrong alignment on BP_AJBCollisionDetectorBase_C_ResetLeftOverlapDistance");
static_assert(sizeof(BP_AJBCollisionDetectorBase_C_ResetLeftOverlapDistance) == 0x000001, "Wrong size on BP_AJBCollisionDetectorBase_C_ResetLeftOverlapDistance");
static_assert(offsetof(BP_AJBCollisionDetectorBase_C_ResetLeftOverlapDistance, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000000, "Member 'BP_AJBCollisionDetectorBase_C_ResetLeftOverlapDistance::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");

}

