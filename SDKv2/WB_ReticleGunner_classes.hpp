#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_ReticleGunner

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "WB_ReticleBase_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_ReticleGunner.WB_ReticleGunner_C
// 0x00F0 (0x0360 - 0x0270)
class UWB_ReticleGunner_C final : public UWB_ReticleBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_WB_ReticleGunner_C;                 // 0x0270(0x0008)(Transient, DuplicateTransient)
	class UWidgetAnimation*                       HitAnim;                                           // 0x0278(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Canvas_HITRoot;                                    // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_85;                                          // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Circle0;                                       // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Circle1;                                       // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Circle2;                                       // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Circle3;                                       // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Dot;                                           // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Hit0;                                          // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Hit1;                                          // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Hit2;                                          // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Hit3;                                          // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Line0;                                         // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Line1;                                         // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Line2;                                         // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Img_Line3;                                         // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TArray<class UImage*>                         Lines;                                             // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         MinSpreadLine;                                     // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSpreadLine;                                     // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LineY;                                             // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UImage*>                         Circles;                                           // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         DefaultCircleOpacity;                              // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitDisplayTime;                                    // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ElapsedTime;                                       // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHit;                                              // 0x0334(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_335[0x3];                                      // 0x0335(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UImage*>                         Hits;                                              // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         MinSpreadCircle;                                   // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSpreadCircle;                                   // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleCircle;                                       // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitY;                                              // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinSpreadHit;                                      // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSpreadHit;                                      // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WB_ReticleGunner(int32 EntryPoint);
	void Construct();
	void OnHit(bool bHeadShot, bool bFInishBlow);
	void Update(float DeltaSeconds, class AAJBInGameCharacter* MyCharacter);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_ReticleGunner_C">();
	}
	static class UWB_ReticleGunner_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_ReticleGunner_C>();
	}
};
static_assert(alignof(UWB_ReticleGunner_C) == 0x000008, "Wrong alignment on UWB_ReticleGunner_C");
static_assert(sizeof(UWB_ReticleGunner_C) == 0x000360, "Wrong size on UWB_ReticleGunner_C");
static_assert(offsetof(UWB_ReticleGunner_C, UberGraphFrame_WB_ReticleGunner_C) == 0x000270, "Member 'UWB_ReticleGunner_C::UberGraphFrame_WB_ReticleGunner_C' has a wrong offset!");
static_assert(offsetof(UWB_ReticleGunner_C, HitAnim) == 0x000278, "Member 'UWB_ReticleGunner_C::HitAnim' has a wrong offset!");
static_assert(offsetof(UWB_ReticleGunner_C, Canvas_HITRoot) == 0x000280, "Member 'UWB_ReticleGunner_C::Canvas_HITRoot' has a wrong offset!");
static_assert(offsetof(UWB_ReticleGunner_C, Image_85) == 0x000288, "Member 'UWB_ReticleGunner_C::Image_85' has a wrong offset!");
static_assert(offsetof(UWB_ReticleGunner_C, Img_Circle0) == 0x000290, "Member 'UWB_ReticleGunner_C::Img_Circle0' has a wrong offset!");
static_assert(offsetof(UWB_ReticleGunner_C, Img_Circle1) == 0x000298, "Member 'UWB_ReticleGunner_C::Img_Circle1' has a wrong offset!");
static_assert(offsetof(UWB_ReticleGunner_C, Img_Circle2) == 0x0002A0, "Member 'UWB_ReticleGunner_C::Img_Circle2' has a wrong offset!");
static_assert(offsetof(UWB_ReticleGunner_C, Img_Circle3) == 0x0002A8, "Member 'UWB_ReticleGunner_C::Img_Circle3' has a wrong offset!");
static_assert(offsetof(UWB_ReticleGunner_C, Img_Dot) == 0x0002B0, "Member 'UWB_ReticleGunner_C::Img_Dot' has a wrong offset!");
static_assert(offsetof(UWB_ReticleGunner_C, Img_Hit0) == 0x0002B8, "Member 'UWB_ReticleGunner_C::Img_Hit0' has a wrong offset!");
static_assert(offsetof(UWB_ReticleGunner_C, Img_Hit1) == 0x0002C0, "Member 'UWB_ReticleGunner_C::Img_Hit1' has a wrong offset!");
static_assert(offsetof(UWB_ReticleGunner_C, Img_Hit2) == 0x0002C8, "Member 'UWB_ReticleGunner_C::Img_Hit2' has a wrong offset!");
static_assert(offsetof(UWB_ReticleGunner_C, Img_Hit3) == 0x0002D0, "Member 'UWB_ReticleGunner_C::Img_Hit3' has a wrong offset!");
static_assert(offsetof(UWB_ReticleGunner_C, Img_Line0) == 0x0002D8, "Member 'UWB_ReticleGunner_C::Img_Line0' has a wrong offset!");
static_assert(offsetof(UWB_ReticleGunner_C, Img_Line1) == 0x0002E0, "Member 'UWB_ReticleGunner_C::Img_Line1' has a wrong offset!");
static_assert(offsetof(UWB_ReticleGunner_C, Img_Line2) == 0x0002E8, "Member 'UWB_ReticleGunner_C::Img_Line2' has a wrong offset!");
static_assert(offsetof(UWB_ReticleGunner_C, Img_Line3) == 0x0002F0, "Member 'UWB_ReticleGunner_C::Img_Line3' has a wrong offset!");
static_assert(offsetof(UWB_ReticleGunner_C, Lines) == 0x0002F8, "Member 'UWB_ReticleGunner_C::Lines' has a wrong offset!");
static_assert(offsetof(UWB_ReticleGunner_C, MinSpreadLine) == 0x000308, "Member 'UWB_ReticleGunner_C::MinSpreadLine' has a wrong offset!");
static_assert(offsetof(UWB_ReticleGunner_C, MaxSpreadLine) == 0x00030C, "Member 'UWB_ReticleGunner_C::MaxSpreadLine' has a wrong offset!");
static_assert(offsetof(UWB_ReticleGunner_C, LineY) == 0x000310, "Member 'UWB_ReticleGunner_C::LineY' has a wrong offset!");
static_assert(offsetof(UWB_ReticleGunner_C, Circles) == 0x000318, "Member 'UWB_ReticleGunner_C::Circles' has a wrong offset!");
static_assert(offsetof(UWB_ReticleGunner_C, DefaultCircleOpacity) == 0x000328, "Member 'UWB_ReticleGunner_C::DefaultCircleOpacity' has a wrong offset!");
static_assert(offsetof(UWB_ReticleGunner_C, HitDisplayTime) == 0x00032C, "Member 'UWB_ReticleGunner_C::HitDisplayTime' has a wrong offset!");
static_assert(offsetof(UWB_ReticleGunner_C, ElapsedTime) == 0x000330, "Member 'UWB_ReticleGunner_C::ElapsedTime' has a wrong offset!");
static_assert(offsetof(UWB_ReticleGunner_C, bHit) == 0x000334, "Member 'UWB_ReticleGunner_C::bHit' has a wrong offset!");
static_assert(offsetof(UWB_ReticleGunner_C, Hits) == 0x000338, "Member 'UWB_ReticleGunner_C::Hits' has a wrong offset!");
static_assert(offsetof(UWB_ReticleGunner_C, MinSpreadCircle) == 0x000348, "Member 'UWB_ReticleGunner_C::MinSpreadCircle' has a wrong offset!");
static_assert(offsetof(UWB_ReticleGunner_C, MaxSpreadCircle) == 0x00034C, "Member 'UWB_ReticleGunner_C::MaxSpreadCircle' has a wrong offset!");
static_assert(offsetof(UWB_ReticleGunner_C, ScaleCircle) == 0x000350, "Member 'UWB_ReticleGunner_C::ScaleCircle' has a wrong offset!");
static_assert(offsetof(UWB_ReticleGunner_C, HitY) == 0x000354, "Member 'UWB_ReticleGunner_C::HitY' has a wrong offset!");
static_assert(offsetof(UWB_ReticleGunner_C, MinSpreadHit) == 0x000358, "Member 'UWB_ReticleGunner_C::MinSpreadHit' has a wrong offset!");
static_assert(offsetof(UWB_ReticleGunner_C, MaxSpreadHit) == 0x00035C, "Member 'UWB_ReticleGunner_C::MaxSpreadHit' has a wrong offset!");

}

