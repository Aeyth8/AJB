#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTD_AJBTimeLimit

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTD_AJBTimeLimit.BTD_AJBTimeLimit_C
// 0x0028 (0x00C8 - 0x00A0)
class UBTD_AJBTimeLimit_C final : public UBTDecorator_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(Transient, DuplicateTransient)
	struct FTimespan                              GameTimeAtStart;                                   // 0x00A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBBattleGameState_C*               GameState;                                         // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeLimitUntilFailure;                             // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFailed;                                           // 0x00BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeLimitUntilFailureDeviation;                    // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeLimitCurrent;                                  // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BTD_AJBTimeLimit(int32 EntryPoint);
	void ReceiveExecutionFinishAI(class AAIController* OwnerController, class APawn* ControlledPawn, EBTNodeResult NodeResult);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void ReceiveExecutionStartAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	bool PerformConditionCheckAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTD_AJBTimeLimit_C">();
	}
	static class UBTD_AJBTimeLimit_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTD_AJBTimeLimit_C>();
	}
};
static_assert(alignof(UBTD_AJBTimeLimit_C) == 0x000008, "Wrong alignment on UBTD_AJBTimeLimit_C");
static_assert(sizeof(UBTD_AJBTimeLimit_C) == 0x0000C8, "Wrong size on UBTD_AJBTimeLimit_C");
static_assert(offsetof(UBTD_AJBTimeLimit_C, UberGraphFrame) == 0x0000A0, "Member 'UBTD_AJBTimeLimit_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTD_AJBTimeLimit_C, GameTimeAtStart) == 0x0000A8, "Member 'UBTD_AJBTimeLimit_C::GameTimeAtStart' has a wrong offset!");
static_assert(offsetof(UBTD_AJBTimeLimit_C, GameState) == 0x0000B0, "Member 'UBTD_AJBTimeLimit_C::GameState' has a wrong offset!");
static_assert(offsetof(UBTD_AJBTimeLimit_C, TimeLimitUntilFailure) == 0x0000B8, "Member 'UBTD_AJBTimeLimit_C::TimeLimitUntilFailure' has a wrong offset!");
static_assert(offsetof(UBTD_AJBTimeLimit_C, bFailed) == 0x0000BC, "Member 'UBTD_AJBTimeLimit_C::bFailed' has a wrong offset!");
static_assert(offsetof(UBTD_AJBTimeLimit_C, TimeLimitUntilFailureDeviation) == 0x0000C0, "Member 'UBTD_AJBTimeLimit_C::TimeLimitUntilFailureDeviation' has a wrong offset!");
static_assert(offsetof(UBTD_AJBTimeLimit_C, TimeLimitCurrent) == 0x0000C4, "Member 'UBTD_AJBTimeLimit_C::TimeLimitCurrent' has a wrong offset!");

}

