#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_AJBDebugDetectFrequentExecution

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTT_AJBDebugDetectFrequentExecution.BTT_AJBDebugDetectFrequentExecution_C
// 0x0028 (0x00C8 - 0x00A0)
class UBTT_AJBDebugDetectFrequentExecution_C final : public UBTTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(Transient, DuplicateTransient)
	float                                         LastExecutionTime;                                 // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CountToDetect;                                     // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeLimitToCountUpFromLastExecution;               // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeLimitToCleanUpFromLastExecution;               // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CountOfFailure;                                    // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentTimeDiff;                                   // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAsSuccessIfDetected;                              // 0x00C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BTT_AJBDebugDetectFrequentExecution(int32 EntryPoint);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTT_AJBDebugDetectFrequentExecution_C">();
	}
	static class UBTT_AJBDebugDetectFrequentExecution_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTT_AJBDebugDetectFrequentExecution_C>();
	}
};
static_assert(alignof(UBTT_AJBDebugDetectFrequentExecution_C) == 0x000008, "Wrong alignment on UBTT_AJBDebugDetectFrequentExecution_C");
static_assert(sizeof(UBTT_AJBDebugDetectFrequentExecution_C) == 0x0000C8, "Wrong size on UBTT_AJBDebugDetectFrequentExecution_C");
static_assert(offsetof(UBTT_AJBDebugDetectFrequentExecution_C, UberGraphFrame) == 0x0000A0, "Member 'UBTT_AJBDebugDetectFrequentExecution_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTT_AJBDebugDetectFrequentExecution_C, LastExecutionTime) == 0x0000A8, "Member 'UBTT_AJBDebugDetectFrequentExecution_C::LastExecutionTime' has a wrong offset!");
static_assert(offsetof(UBTT_AJBDebugDetectFrequentExecution_C, CountToDetect) == 0x0000AC, "Member 'UBTT_AJBDebugDetectFrequentExecution_C::CountToDetect' has a wrong offset!");
static_assert(offsetof(UBTT_AJBDebugDetectFrequentExecution_C, TimeLimitToCountUpFromLastExecution) == 0x0000B0, "Member 'UBTT_AJBDebugDetectFrequentExecution_C::TimeLimitToCountUpFromLastExecution' has a wrong offset!");
static_assert(offsetof(UBTT_AJBDebugDetectFrequentExecution_C, TimeLimitToCleanUpFromLastExecution) == 0x0000B4, "Member 'UBTT_AJBDebugDetectFrequentExecution_C::TimeLimitToCleanUpFromLastExecution' has a wrong offset!");
static_assert(offsetof(UBTT_AJBDebugDetectFrequentExecution_C, CountOfFailure) == 0x0000B8, "Member 'UBTT_AJBDebugDetectFrequentExecution_C::CountOfFailure' has a wrong offset!");
static_assert(offsetof(UBTT_AJBDebugDetectFrequentExecution_C, CurrentTimeDiff) == 0x0000BC, "Member 'UBTT_AJBDebugDetectFrequentExecution_C::CurrentTimeDiff' has a wrong offset!");
static_assert(offsetof(UBTT_AJBDebugDetectFrequentExecution_C, bAsSuccessIfDetected) == 0x0000C0, "Member 'UBTT_AJBDebugDetectFrequentExecution_C::bAsSuccessIfDetected' has a wrong offset!");

}

