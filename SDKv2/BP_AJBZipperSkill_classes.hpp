#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBZipperSkill

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_AJBSkillBase_classes.hpp"
#include "AJB_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBZipperSkill.BP_AJBZipperSkill_C
// 0x0058 (0x0230 - 0x01D8)
class UBP_AJBZipperSkill_C final : public UBP_AJBSkillBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBZipperSkill_C;                // 0x01D8(0x0008)(Transient, DuplicateTransient)
	bool                                          bPossibleHide;                                     // 0x01E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E1[0x3];                                      // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SphereRadius;                                      // 0x01E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceDistance;                                     // 0x01E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxGapWidth;                                       // 0x01EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceStartDistanceFromCamera;                      // 0x01F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F4[0x4];                                      // 0x01F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBZipper_InteractableBase_C*       Rep_SpawnedZipper;                                 // 0x01F8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSettingComplete;                                  // 0x0200(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_201[0x7];                                      // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBZipper_Preview_C*                PreviewZipper;                                     // 0x0208(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReserveAction;                                     // 0x0210(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_211[0x7];                                      // 0x0211(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBZipper_Hide_C*                   Rep_SpawnedHidingZipper;                           // 0x0218(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LifeTimeThru;                                      // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LifeTimeHide;                                      // 0x0224(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HideZipperContinuedConsumptionMP;                  // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBZipperSkill(int32 EntryPoint);
	void ROC_OnSpawnedZipperHide();
	void MC_DestroyPreviewZipperCosmeticOnly();
	void ROS_DestroyPreviewZipperCosmeticOnly();
	void DestroyPreviewZipperCosmeticOnly();
	void SpawnPreviewZipperCosmeticOnly();
	void MC_SpawnPreviewZipperCosmeticOnly();
	void ROS_SpawnPreviewZipperCosmeticOnly();
	void RegisterSpawnedZipper(class ABP_AJBZipper_InteractableBase_C* Zipper);
	void OnZipperDestroyed(class AActor* DestroyedActor);
	void ROS_SpawnZipper(bool PossibleHide_0);
	void SpawnZipper();
	void MC_BeginState_Action();
	void ROS_BeginState_Action();
	void OnBeginState_Action();
	void TickState_Ready();
	void BeginState_Ready();
	void TickState_Action();
	void TickState(float DeltaSeconds);
	void StateEnd();
	void BeginState_Action();
	void OnCompleted_7B45FB9D406D5826C78546BC08D19AF4(class FName NotifyName);
	void OnBlendOut_7B45FB9D406D5826C78546BC08D19AF4(class FName NotifyName);
	void OnInterrupted_7B45FB9D406D5826C78546BC08D19AF4(class FName NotifyName);
	void OnNotifyBegin_7B45FB9D406D5826C78546BC08D19AF4(class FName NotifyName);
	void OnNotifyEnd_7B45FB9D406D5826C78546BC08D19AF4(class FName NotifyName);
	void PossibleHide();
	void TraceZipperTransform(bool bPossibleHide_0, struct FGameplayTag* DecidedInteractType, struct FTransform* FirstTransform, struct FVector* SecondLocation, struct FVector* LocationOfInjectionCounterpart, struct FVector* LocationOfInjectionOrigin, class AActor** HitActor, class UPrimitiveComponent** HitComponent);
	void OnCancel();
	void OnReady();
	void ReceiveTick(float DeltaSeconds);
	void OnActive();
	void InitializeVariables();
	void CheckPossibleInteract(bool* bPossibleInteract);

	bool IsInPreview() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBZipperSkill_C">();
	}
	static class UBP_AJBZipperSkill_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBZipperSkill_C>();
	}
};
static_assert(alignof(UBP_AJBZipperSkill_C) == 0x000008, "Wrong alignment on UBP_AJBZipperSkill_C");
static_assert(sizeof(UBP_AJBZipperSkill_C) == 0x000230, "Wrong size on UBP_AJBZipperSkill_C");
static_assert(offsetof(UBP_AJBZipperSkill_C, UberGraphFrame_BP_AJBZipperSkill_C) == 0x0001D8, "Member 'UBP_AJBZipperSkill_C::UberGraphFrame_BP_AJBZipperSkill_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBZipperSkill_C, bPossibleHide) == 0x0001E0, "Member 'UBP_AJBZipperSkill_C::bPossibleHide' has a wrong offset!");
static_assert(offsetof(UBP_AJBZipperSkill_C, SphereRadius) == 0x0001E4, "Member 'UBP_AJBZipperSkill_C::SphereRadius' has a wrong offset!");
static_assert(offsetof(UBP_AJBZipperSkill_C, TraceDistance) == 0x0001E8, "Member 'UBP_AJBZipperSkill_C::TraceDistance' has a wrong offset!");
static_assert(offsetof(UBP_AJBZipperSkill_C, MaxGapWidth) == 0x0001EC, "Member 'UBP_AJBZipperSkill_C::MaxGapWidth' has a wrong offset!");
static_assert(offsetof(UBP_AJBZipperSkill_C, TraceStartDistanceFromCamera) == 0x0001F0, "Member 'UBP_AJBZipperSkill_C::TraceStartDistanceFromCamera' has a wrong offset!");
static_assert(offsetof(UBP_AJBZipperSkill_C, Rep_SpawnedZipper) == 0x0001F8, "Member 'UBP_AJBZipperSkill_C::Rep_SpawnedZipper' has a wrong offset!");
static_assert(offsetof(UBP_AJBZipperSkill_C, bSettingComplete) == 0x000200, "Member 'UBP_AJBZipperSkill_C::bSettingComplete' has a wrong offset!");
static_assert(offsetof(UBP_AJBZipperSkill_C, PreviewZipper) == 0x000208, "Member 'UBP_AJBZipperSkill_C::PreviewZipper' has a wrong offset!");
static_assert(offsetof(UBP_AJBZipperSkill_C, ReserveAction) == 0x000210, "Member 'UBP_AJBZipperSkill_C::ReserveAction' has a wrong offset!");
static_assert(offsetof(UBP_AJBZipperSkill_C, Rep_SpawnedHidingZipper) == 0x000218, "Member 'UBP_AJBZipperSkill_C::Rep_SpawnedHidingZipper' has a wrong offset!");
static_assert(offsetof(UBP_AJBZipperSkill_C, LifeTimeThru) == 0x000220, "Member 'UBP_AJBZipperSkill_C::LifeTimeThru' has a wrong offset!");
static_assert(offsetof(UBP_AJBZipperSkill_C, LifeTimeHide) == 0x000224, "Member 'UBP_AJBZipperSkill_C::LifeTimeHide' has a wrong offset!");
static_assert(offsetof(UBP_AJBZipperSkill_C, HideZipperContinuedConsumptionMP) == 0x000228, "Member 'UBP_AJBZipperSkill_C::HideZipperContinuedConsumptionMP' has a wrong offset!");

}

