#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInteractAction

#include "Basic.hpp"

#include "E_GionSpawnedSpace_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BP_AJBActionBase_classes.hpp"
#include "AJB_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBInteractAction.BP_AJBInteractAction_C
// 0x0168 (0x0278 - 0x0110)
class UBP_AJBInteractAction_C final : public UBP_AJBActionBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBInteractAction_C;             // 0x0110(0x0008)(Transient, DuplicateTransient)
	float                                         DistanceBaseToTraceEnd;                            // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 InteractActor;                                     // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDistanceTraceStartToBase;                       // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinForwardZ_ForMaxTraceDistanceRate;               // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxForwardZ_ForMinTraceDistanceRate;               // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxTraceDistanceRate;                              // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinTraceDistanceRate_Up;                           // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinTraceDistanceRate_Down;                         // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FindInterval;                                      // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceRadius;                                       // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableDebug;                                       // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnChangeInteractActor;                             // 0x0150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	uint8                                         InteractActorState;                                // 0x0160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHidingZipper;                                     // 0x0161(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_162[0x2];                                      // 0x0162(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ZipperAnimDuration;                                // 0x0164(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBZipperInteractAnimator_C*        PassThruAnimator;                                  // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PassThruEntranceNormal;                            // 0x0170(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBZipper_Hide_C*                   HidingZipper;                                      // 0x0180(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnBeginPassThruEnterServer;                        // 0x0188(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnBeginPassThruExitServer;                         // 0x0198(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bPassThruInteractOriginToCounterpart;              // 0x01A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnHidingPropDamagedServer;                         // 0x01B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnBeginHidingServer;                               // 0x01C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bWaitingLongpress;                                 // 0x01D0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_1D1[0x3];                                      // 0x01D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReservedLongPressTime;                             // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebugPrintWaitingLongPressStateTime;              // 0x01D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEnableTrace;                                      // 0x01D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bErrorCondition;                                   // 0x01DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         ErrorConditionType;                                // 0x01DB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnChangeErrorCondition;                            // 0x01E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FGameplayTag                           MemoryLeakInteractParticleTag;                     // 0x01F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          MemoryLeakInteractParticle;                        // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ReservedInteractActor;                             // 0x0200(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                ReservedInteractAction;                            // 0x0208(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnHidingTimeDetermined_Local;                      // 0x0210(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bReservedCancelHiding_Local;                       // 0x0220(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_221[0x7];                                      // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           InputCameraOnlyFactorTag_ZipperHide;               // 0x0228(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           InputCameraOnlyFactorTag_PassThru;                 // 0x0230(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   Server_OnInteract;                                 // 0x0238(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bUseOffsetPercentOnInteractageVisibilityTrace;     // 0x0248(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_249[0x3];                                      // 0x0249(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OffsetPercentageInteractVisibilityTraceUsed;       // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bWaitingLongPressOnOwner;                          // 0x0250(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_251[0x7];                                      // 0x0251(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ThruAnimationLand;                                 // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           ThruAnimationAir;                                  // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 TempInteractActor;                                 // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SETagOnZipperThruOwnerEnv;                         // 0x0270(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void OnChangeInteractActor__DelegateSignature(class ABP_AJBInGameCharacter_C* OperatorCharacter, class AActor* InteractActor_0);
	void OnBeginPassThruEnterServer__DelegateSignature(bool bOriginToCounterpart);
	void OnBeginPassThruExitServer__DelegateSignature(bool bOriginToCounterpart);
	void OnHidingPropDamagedServer__DelegateSignature();
	void OnBeginHidingServer__DelegateSignature();
	void OnChangeErrorCondition__DelegateSignature(bool bNewErrorCondition, uint8 NewErrorConditionType);
	void OnHidingTimeDetermined_Local__DelegateSignature(float TimeSec);
	void Server_OnInteract__DelegateSignature(class AActor* InteractTargetActor, class AActor* InteractingActor);
	void ExecuteUbergraph_BP_AJBInteractAction(int32 EntryPoint);
	void Setup(class AController* Controller);
	void ROS_ForceInteract(class AActor* TargetActor);
	void ForceInteractLocal(class AActor* TargetActor);
	void ROC_ExclusiveInteractSucceeded(class AActor* TouchActor);
	void ROS_ExclusiveInteract(class AActor* TouchActor, bool ServerIsInteractingPlayer);
	void StartInteractTimer_NPC();
	void OnReleasedInteractButton();
	void OnPressedInteractButton();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ROS_Interact(class AActor* TouchActor, bool ServerIsInteractingPlayer);
	void StateBegin_WaitingLongPress(bool bResetStateTime);
	void StateBegin_BlockingNextInteraction();
	void StateBegin_InteractWithZipper(class UAnimMontage* Anim);
	void StateBegin_None(bool bResetStateTime);
	void StateBegin_HiddenInZipper(bool bResetStateTime);
	void ChangeCharaStateToExitToHide_Guaranteed();
	void RestoreFromHiding();
	void RestoreToHiding();
	void RequestThruWindowBrokenEffect_Core(class ABP_AJBInGameWindow_C* Window, bool bOriginToCounterpart, const struct FST_FXVisibilityInfo& FXVisibility);
	void RequestThruWindowBrokenEffect(class ABP_AJBInGameWindow_C* Window, bool bOriginToCounterpart);
	void MC_RequestThruWindowBrokenEffect(class ABP_AJBInGameWindow_C* Window, bool bOriginToCounterpart);
	void ROS_RequestThruWindowBrokenEffect(class ABP_AJBInGameWindow_C* Window, bool bOriginToCounterpart);
	void MC_OnFinishPassThru();
	void Server_NotifyBeginHiding();
	void MC_CloseZipperOnLifetimeExpired(class ABP_AJBZipper_Hide_C* ZipperHide);
	void ROS_CloseZipperOnLifetimeExpired(class ABP_AJBZipper_Hide_C* ZipperHide);
	void RequestCloseZipperOnLifetimeExpired(class ABP_AJBZipper_Hide_C* ZipperHide);
	void ROC_RequestAppearFromZipper(bool bOwnerCharacterIsAlive);
	void MC_OnStartHiding();
	void MC_OnFinishHiding();
	void MC_OnExitOnHiding(const struct FVector& ExitLocation, const struct FVector& ZipperLocation, bool bOwnerCharacterIsAlive);
	void ROS_OnFinishHiding();
	void ChangeCharaStateToFinishHiding(bool bRestore);
	void RequestToFinishHiding();
	void ChangeCharaStateToExitToHide(bool bResotre);
	void ROS_OnExitOnHiding(class ABP_AJBZipper_Hide_C* HidingZipper_0, bool bOwnerCharacterIsAlive);
	void RequestToExitOnHiding(bool bOwnerCharacterIsAlive);
	void ROS_OnStartHiding();
	void OnExitAnimFinishedForHiding();
	void OnEnterAnimFinishedForHiding();
	void ChangeCharaStateToStartHiding(bool bRestore);
	void RequestToStartHiding();
	void ChangeCharaStateOnEnterToHide(bool bRestore);
	void MC_OnEnterToHide();
	void ROS_OnEnterToHide(class ABP_AJBZipper_Hide_C* ZipperToHide);
	void RequestToEnterOnHiding();
	void ROS_BindEventToZipperThru(class ABP_AJBZipper_Thru_C* ZipperThru);
	void SetupPassThruCore(TScriptInterface<class IBI_PassThruInterface_C> PassThruActor, bool bPassThruOriginToCounterpart);
	void OnExitAnimFinishedForPassingThru();
	void ROS_OnFinishPassThru();
	void ChangeCharaStateOnFinishPassThru();
	void MC_OnExitPassThru(const struct FVector& LocationExit);
	void ROS_OnExitPassThru();
	void RequestToFinishPassThru();
	void RequestToExitOnPassThru(const struct FVector& LocationExit);
	void OnEnterAnimFinishedForPassingThru();
	void SetupPassThruNew(class AActor* PassThruActor, bool bPassThruOriginToCounterpart);
	void ChangeCharaStateOnStartPassThru();
	void ROS_OnEnterPassThru(class AActor* PassThruActor, bool bOriginToCounterpart);
	void MC_OnEnterPassThru(const struct FVector& PassThruEntranceNormal_0);
	void RequestToEnterOnPassThru(class AActor* PassThru);
	void PassThruWindowLocal(bool bOriginToCounterpart, class ABP_AJBInGameWindow_C* Window);
	void ROC_CancelTickEnabled();
	void Server_NotifyHidingPropDamaged();
	void SetupZipperHide(class ABP_AJBZipper_Hide_C* InteractingZipper);
	void AppearFromZipper(bool bOwnerCharacterIsAlive);
	void HideIntoZipper(class ABP_AJBZipper_Hide_C* Zipper);
	void TeleportByZipper(bool bOriginToCounterpart, class ABP_AJBZipper_Thru_C* Zipper);
	void OnToggleDebugDraw();
	void RestoreWaitingLongPressOnInactivate();
	void RestoreWaitingLongPressOnActivate();
	void UpdateErrorTypeUI(class UObject* InteractAction);
	void OnLongPressEnded(bool bSuccess, bool bForceCancel, class AActor* InteractActor_0, class UObject* InteractAction);
	void OnLongPressBegan(class AActor* InteractActor_0, class UObject* InteractAction);
	void OnEndState_WaitingLongPress(bool bSuccess, bool bForceCancel, class AActor* InteractActor_0);
	void MC_EndState_WaitingLongPress(bool bSuccess, bool bForceCancel, class AActor* InteractActor_0);
	void ROS_EndState_WaitingLongPress(bool bSuccess, bool bForceCancel, class AActor* InteractActor_0);
	void EndState_WaitingLongPress_Local(bool bSuccess, bool bForceCancel);
	void TickState_WaitingLongPress();
	void MC_BeginState_WaitingLongPress(float Time, class AActor* Actor, class UObject* InteractAction);
	void OnBeginState_WaitingLongPress(float Time, class AActor* InteractActor_0, class UObject* InteractAction);
	void ROS_BeginState_WaitingLongPress(float Time, class AActor* InteractActor_0, class UObject* InteractAction);
	void BeginState_WaitingLongPress_Local(float Time, class UObject* InteractAction);
	void OnCompleted_FBE32BC241B8D86CA3E34A9F33DACFB5(class FName NotifyName);
	void OnBlendOut_FBE32BC241B8D86CA3E34A9F33DACFB5(class FName NotifyName);
	void OnInterrupted_FBE32BC241B8D86CA3E34A9F33DACFB5(class FName NotifyName);
	void OnNotifyBegin_FBE32BC241B8D86CA3E34A9F33DACFB5(class FName NotifyName);
	void OnNotifyEnd_FBE32BC241B8D86CA3E34A9F33DACFB5(class FName NotifyName);
	void OnCompleted_FBE32BC241B8D86CA3E34A9FDF570701(class FName NotifyName);
	void OnBlendOut_FBE32BC241B8D86CA3E34A9FDF570701(class FName NotifyName);
	void OnInterrupted_FBE32BC241B8D86CA3E34A9FDF570701(class FName NotifyName);
	void OnNotifyBegin_FBE32BC241B8D86CA3E34A9FDF570701(class FName NotifyName);
	void OnNotifyEnd_FBE32BC241B8D86CA3E34A9FDF570701(class FName NotifyName);
	void OnCompleted_FBE32BC241B8D86CA3E34A9F9CE15863(class FName NotifyName);
	void OnBlendOut_FBE32BC241B8D86CA3E34A9F9CE15863(class FName NotifyName);
	void OnInterrupted_FBE32BC241B8D86CA3E34A9F9CE15863(class FName NotifyName);
	void OnNotifyBegin_FBE32BC241B8D86CA3E34A9F9CE15863(class FName NotifyName);
	void OnNotifyEnd_FBE32BC241B8D86CA3E34A9F9CE15863(class FName NotifyName);
	void OnCompleted_FBE32BC241B8D86CA3E34A9F906D9C02(class FName NotifyName);
	void OnBlendOut_FBE32BC241B8D86CA3E34A9F906D9C02(class FName NotifyName);
	void OnInterrupted_FBE32BC241B8D86CA3E34A9F906D9C02(class FName NotifyName);
	void OnNotifyBegin_FBE32BC241B8D86CA3E34A9F906D9C02(class FName NotifyName);
	void OnNotifyEnd_FBE32BC241B8D86CA3E34A9F906D9C02(class FName NotifyName);
	void OnCompleted_FBE32BC241B8D86CA3E34A9FC384BF9A(class FName NotifyName);
	void OnBlendOut_FBE32BC241B8D86CA3E34A9FC384BF9A(class FName NotifyName);
	void OnInterrupted_FBE32BC241B8D86CA3E34A9FC384BF9A(class FName NotifyName);
	void OnNotifyBegin_FBE32BC241B8D86CA3E34A9FC384BF9A(class FName NotifyName);
	void OnNotifyEnd_FBE32BC241B8D86CA3E34A9FC384BF9A(class FName NotifyName);
	void FindInteractActor();
	class UAnimMontage* GetZipperEnterAnim(const struct FVector& ZipperNormal);
	class UAnimMontage* GetZipperExitAnim_Thru(const struct FVector& LocationExit);
	void GetZipperEnteringDirection(const struct FVector& ZipperNormal, bool* bHorizontal, bool* bGoUp);
	void GetPassThruExitOffset(const struct FVector& ZipperNormal, struct FVector* Offset);
	bool GetZipperExitInAir(const struct FVector& LocationExit);
	class UAnimMontage* GetZipperExitAnim_Hide(const struct FVector& ExitLocation, const struct FVector& ZipperLocation);
	void LockCharacterToPassThru();
	void UnlockCharacterToPassThru();
	bool IsInteractState();
	void FindInteractActor_NPC();
	void UpdateErrorCondition(class AActor* InteractTarget, class AActor* Operator);
	void ChangeSystemEnable(bool bEnable);
	void UpdateInteractActorInfo(class ABP_AJBInGameCharacter_C* OperatorCharacter, class AActor* NewInteractActor, bool* bIsChangeInteractActor);
	bool HasInteractActor();
	void GetHideZipperContinuedConsumptionMP(float* ContinuedConsumptionMP);
	class AActor* GetInteractActor();
	class APlayerController* GetPlayerControllerForInteractCamera();
	struct FVector GetInteractCameraForwardVector();
	bool IfPossibleInteractCharacterExistsAround(class AActor* TouchActor);
	void OnRep_bHidingZipper();
	void OnRep_bWaitingLongpress();
	void GetEndLocationOnInteractVisibilityTrace(struct FVector* EndLocation);
	void CheckWaitingLongPressOnOwner(bool* bWaitingLongpress_0);
	void TryChangeTorrentialRainEnable(bool bEnable);
	void OnDisconnected();
	void OnCancel();
	void OnActiveAction_OnLocal();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void StateBeginPlay(bool bShouldRestore, bool bUseNextState, uint8 NextState);
	void ChangeState(uint8 NextState, bool bResetStateTime);
	void OnActionInactivate(bool bTriggeredByStand);
	void OnActionActivate(bool bTriggeredByStand);
	void OnRelatedCharacterBecomeLastSurvivor();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBInteractAction_C">();
	}
	static class UBP_AJBInteractAction_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBInteractAction_C>();
	}
};
static_assert(alignof(UBP_AJBInteractAction_C) == 0x000008, "Wrong alignment on UBP_AJBInteractAction_C");
static_assert(sizeof(UBP_AJBInteractAction_C) == 0x000278, "Wrong size on UBP_AJBInteractAction_C");
static_assert(offsetof(UBP_AJBInteractAction_C, UberGraphFrame_BP_AJBInteractAction_C) == 0x000110, "Member 'UBP_AJBInteractAction_C::UberGraphFrame_BP_AJBInteractAction_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, DistanceBaseToTraceEnd) == 0x000118, "Member 'UBP_AJBInteractAction_C::DistanceBaseToTraceEnd' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, InteractActor) == 0x000120, "Member 'UBP_AJBInteractAction_C::InteractActor' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, MaxDistanceTraceStartToBase) == 0x000128, "Member 'UBP_AJBInteractAction_C::MaxDistanceTraceStartToBase' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, MinForwardZ_ForMaxTraceDistanceRate) == 0x00012C, "Member 'UBP_AJBInteractAction_C::MinForwardZ_ForMaxTraceDistanceRate' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, MaxForwardZ_ForMinTraceDistanceRate) == 0x000130, "Member 'UBP_AJBInteractAction_C::MaxForwardZ_ForMinTraceDistanceRate' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, MaxTraceDistanceRate) == 0x000134, "Member 'UBP_AJBInteractAction_C::MaxTraceDistanceRate' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, MinTraceDistanceRate_Up) == 0x000138, "Member 'UBP_AJBInteractAction_C::MinTraceDistanceRate_Up' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, MinTraceDistanceRate_Down) == 0x00013C, "Member 'UBP_AJBInteractAction_C::MinTraceDistanceRate_Down' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, FindInterval) == 0x000140, "Member 'UBP_AJBInteractAction_C::FindInterval' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, TraceRadius) == 0x000144, "Member 'UBP_AJBInteractAction_C::TraceRadius' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, EnableDebug) == 0x000148, "Member 'UBP_AJBInteractAction_C::EnableDebug' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, OnChangeInteractActor) == 0x000150, "Member 'UBP_AJBInteractAction_C::OnChangeInteractActor' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, InteractActorState) == 0x000160, "Member 'UBP_AJBInteractAction_C::InteractActorState' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, bHidingZipper) == 0x000161, "Member 'UBP_AJBInteractAction_C::bHidingZipper' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, ZipperAnimDuration) == 0x000164, "Member 'UBP_AJBInteractAction_C::ZipperAnimDuration' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, PassThruAnimator) == 0x000168, "Member 'UBP_AJBInteractAction_C::PassThruAnimator' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, PassThruEntranceNormal) == 0x000170, "Member 'UBP_AJBInteractAction_C::PassThruEntranceNormal' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, HidingZipper) == 0x000180, "Member 'UBP_AJBInteractAction_C::HidingZipper' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, OnBeginPassThruEnterServer) == 0x000188, "Member 'UBP_AJBInteractAction_C::OnBeginPassThruEnterServer' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, OnBeginPassThruExitServer) == 0x000198, "Member 'UBP_AJBInteractAction_C::OnBeginPassThruExitServer' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, bPassThruInteractOriginToCounterpart) == 0x0001A8, "Member 'UBP_AJBInteractAction_C::bPassThruInteractOriginToCounterpart' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, OnHidingPropDamagedServer) == 0x0001B0, "Member 'UBP_AJBInteractAction_C::OnHidingPropDamagedServer' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, OnBeginHidingServer) == 0x0001C0, "Member 'UBP_AJBInteractAction_C::OnBeginHidingServer' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, bWaitingLongpress) == 0x0001D0, "Member 'UBP_AJBInteractAction_C::bWaitingLongpress' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, ReservedLongPressTime) == 0x0001D4, "Member 'UBP_AJBInteractAction_C::ReservedLongPressTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, bDebugPrintWaitingLongPressStateTime) == 0x0001D8, "Member 'UBP_AJBInteractAction_C::bDebugPrintWaitingLongPressStateTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, bEnableTrace) == 0x0001D9, "Member 'UBP_AJBInteractAction_C::bEnableTrace' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, bErrorCondition) == 0x0001DA, "Member 'UBP_AJBInteractAction_C::bErrorCondition' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, ErrorConditionType) == 0x0001DB, "Member 'UBP_AJBInteractAction_C::ErrorConditionType' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, OnChangeErrorCondition) == 0x0001E0, "Member 'UBP_AJBInteractAction_C::OnChangeErrorCondition' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, MemoryLeakInteractParticleTag) == 0x0001F0, "Member 'UBP_AJBInteractAction_C::MemoryLeakInteractParticleTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, MemoryLeakInteractParticle) == 0x0001F8, "Member 'UBP_AJBInteractAction_C::MemoryLeakInteractParticle' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, ReservedInteractActor) == 0x000200, "Member 'UBP_AJBInteractAction_C::ReservedInteractActor' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, ReservedInteractAction) == 0x000208, "Member 'UBP_AJBInteractAction_C::ReservedInteractAction' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, OnHidingTimeDetermined_Local) == 0x000210, "Member 'UBP_AJBInteractAction_C::OnHidingTimeDetermined_Local' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, bReservedCancelHiding_Local) == 0x000220, "Member 'UBP_AJBInteractAction_C::bReservedCancelHiding_Local' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, InputCameraOnlyFactorTag_ZipperHide) == 0x000228, "Member 'UBP_AJBInteractAction_C::InputCameraOnlyFactorTag_ZipperHide' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, InputCameraOnlyFactorTag_PassThru) == 0x000230, "Member 'UBP_AJBInteractAction_C::InputCameraOnlyFactorTag_PassThru' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, Server_OnInteract) == 0x000238, "Member 'UBP_AJBInteractAction_C::Server_OnInteract' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, bUseOffsetPercentOnInteractageVisibilityTrace) == 0x000248, "Member 'UBP_AJBInteractAction_C::bUseOffsetPercentOnInteractageVisibilityTrace' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, OffsetPercentageInteractVisibilityTraceUsed) == 0x00024C, "Member 'UBP_AJBInteractAction_C::OffsetPercentageInteractVisibilityTraceUsed' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, bWaitingLongPressOnOwner) == 0x000250, "Member 'UBP_AJBInteractAction_C::bWaitingLongPressOnOwner' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, ThruAnimationLand) == 0x000258, "Member 'UBP_AJBInteractAction_C::ThruAnimationLand' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, ThruAnimationAir) == 0x000260, "Member 'UBP_AJBInteractAction_C::ThruAnimationAir' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, TempInteractActor) == 0x000268, "Member 'UBP_AJBInteractAction_C::TempInteractActor' has a wrong offset!");
static_assert(offsetof(UBP_AJBInteractAction_C, SETagOnZipperThruOwnerEnv) == 0x000270, "Member 'UBP_AJBInteractAction_C::SETagOnZipperThruOwnerEnv' has a wrong offset!");

}

