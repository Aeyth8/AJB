#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AchievementTriggerSender_Character

#include "Basic.hpp"

#include "BP_AchievementTriggerSender_Character_classes.hpp"
#include "BP_AchievementTriggerSender_Character_parameters.hpp"


namespace SDK
{

// Function BP_AchievementTriggerSender_Character.BP_AchievementTriggerSender_Character_C.ExecuteUbergraph_BP_AchievementTriggerSender_Character
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AchievementTriggerSender_Character_C::ExecuteUbergraph_BP_AchievementTriggerSender_Character(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_Character_C", "ExecuteUbergraph_BP_AchievementTriggerSender_Character");

	Params::BP_AchievementTriggerSender_Character_C_ExecuteUbergraph_BP_AchievementTriggerSender_Character Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AchievementTriggerSender_Character.BP_AchievementTriggerSender_Character_C.UpdateMoveDistance
// (BlueprintCallable, BlueprintEvent)

void UBP_AchievementTriggerSender_Character_C::UpdateMoveDistance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_Character_C", "UpdateMoveDistance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AchievementTriggerSender_Character.BP_AchievementTriggerSender_Character_C.OnPassiveAddedForAchievement
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     CauserType                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   SerialNumber                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AchievementTriggerSender_Character_C::OnPassiveAddedForAchievement(const struct FGameplayTag& CauserType, int32 SerialNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_Character_C", "OnPassiveAddedForAchievement");

	Params::BP_AchievementTriggerSender_Character_C_OnPassiveAddedForAchievement Parms{};

	Parms.CauserType = std::move(CauserType);
	Parms.SerialNumber = SerialNumber;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AchievementTriggerSender_Character.BP_AchievementTriggerSender_Character_C.CountEffectiveSkill
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     SkillTag                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   SerialNumber                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AchievementTriggerSender_Character_C::CountEffectiveSkill(const struct FGameplayTag& SkillTag, int32 SerialNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_Character_C", "CountEffectiveSkill");

	Params::BP_AchievementTriggerSender_Character_C_CountEffectiveSkill Parms{};

	Parms.SkillTag = std::move(SkillTag);
	Parms.SerialNumber = SerialNumber;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AchievementTriggerSender_Character.BP_AchievementTriggerSender_Character_C.OnHitMultiple
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EAJBSkillType                           SkillType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   HittedCharacterCount                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   BlockedCharacterCount                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InvalidatedCharacterCount                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AchievementTriggerSender_Character_C::OnHitMultiple(EAJBSkillType SkillType, int32 HittedCharacterCount, int32 BlockedCharacterCount, int32 InvalidatedCharacterCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_Character_C", "OnHitMultiple");

	Params::BP_AchievementTriggerSender_Character_C_OnHitMultiple Parms{};

	Parms.SkillType = SkillType;
	Parms.HittedCharacterCount = HittedCharacterCount;
	Parms.BlockedCharacterCount = BlockedCharacterCount;
	Parms.InvalidatedCharacterCount = InvalidatedCharacterCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AchievementTriggerSender_Character.BP_AchievementTriggerSender_Character_C.OnPairDie
// (BlueprintCallable, BlueprintEvent)

void UBP_AchievementTriggerSender_Character_C::OnPairDie()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_Character_C", "OnPairDie");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AchievementTriggerSender_Character.BP_AchievementTriggerSender_Character_C.OnLastKill
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     SkillTag                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void UBP_AchievementTriggerSender_Character_C::OnLastKill(const struct FGameplayTag& SkillTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_Character_C", "OnLastKill");

	Params::BP_AchievementTriggerSender_Character_C_OnLastKill Parms{};

	Parms.SkillTag = std::move(SkillTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AchievementTriggerSender_Character.BP_AchievementTriggerSender_Character_C.OnDie
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bWillRessurect                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bIsLastDefeated                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDiedOfKillZ                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AchievementTriggerSender_Character_C::OnDie(bool bWillRessurect, bool bIsLastDefeated, bool bDiedOfKillZ)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_Character_C", "OnDie");

	Params::BP_AchievementTriggerSender_Character_C_OnDie Parms{};

	Parms.bWillRessurect = bWillRessurect;
	Parms.bIsLastDefeated = bIsLastDefeated;
	Parms.bDiedOfKillZ = bDiedOfKillZ;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AchievementTriggerSender_Character.BP_AchievementTriggerSender_Character_C.OnSkillEffectiveValueDetermined
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     SkillTag                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   EffectiveValue                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bUpdateEvenIfNotInGameplay                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AchievementTriggerSender_Character_C::OnSkillEffectiveValueDetermined(const struct FGameplayTag& SkillTag, int32 EffectiveValue, bool bUpdateEvenIfNotInGameplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_Character_C", "OnSkillEffectiveValueDetermined");

	Params::BP_AchievementTriggerSender_Character_C_OnSkillEffectiveValueDetermined Parms{};

	Parms.SkillTag = std::move(SkillTag);
	Parms.EffectiveValue = EffectiveValue;
	Parms.bUpdateEvenIfNotInGameplay = bUpdateEvenIfNotInGameplay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AchievementTriggerSender_Character.BP_AchievementTriggerSender_Character_C.OnCutDamage
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CutDamage                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AchievementTriggerSender_Character_C::OnCutDamage(int32 CutDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_Character_C", "OnCutDamage");

	Params::BP_AchievementTriggerSender_Character_C_OnCutDamage Parms{};

	Parms.CutDamage = CutDamage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AchievementTriggerSender_Character.BP_AchievementTriggerSender_Character_C.OnHidingTimeDetermined
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   TimeSec                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AchievementTriggerSender_Character_C::OnHidingTimeDetermined(float TimeSec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_Character_C", "OnHidingTimeDetermined");

	Params::BP_AchievementTriggerSender_Character_C_OnHidingTimeDetermined Parms{};

	Parms.TimeSec = TimeSec;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AchievementTriggerSender_Character.BP_AchievementTriggerSender_Character_C.OnSkillGiveHeadShot
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     SkillTag                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void UBP_AchievementTriggerSender_Character_C::OnSkillGiveHeadShot(const struct FGameplayTag& SkillTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_Character_C", "OnSkillGiveHeadShot");

	Params::BP_AchievementTriggerSender_Character_C_OnSkillGiveHeadShot Parms{};

	Parms.SkillTag = std::move(SkillTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AchievementTriggerSender_Character.BP_AchievementTriggerSender_Character_C.OnSkillSucceeded
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     SkillTag                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void UBP_AchievementTriggerSender_Character_C::OnSkillSucceeded(const struct FGameplayTag& SkillTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_Character_C", "OnSkillSucceeded");

	Params::BP_AchievementTriggerSender_Character_C_OnSkillSucceeded Parms{};

	Parms.SkillTag = std::move(SkillTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AchievementTriggerSender_Character.BP_AchievementTriggerSender_Character_C.OnSkillEffectiveTimeDetermined
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     SkillTag                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// float                                   EffectiveTimeSec                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bUpdateEvenIfNotInGameplay                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AchievementTriggerSender_Character_C::OnSkillEffectiveTimeDetermined(const struct FGameplayTag& SkillTag, float EffectiveTimeSec, bool bUpdateEvenIfNotInGameplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_Character_C", "OnSkillEffectiveTimeDetermined");

	Params::BP_AchievementTriggerSender_Character_C_OnSkillEffectiveTimeDetermined Parms{};

	Parms.SkillTag = std::move(SkillTag);
	Parms.EffectiveTimeSec = EffectiveTimeSec;
	Parms.bUpdateEvenIfNotInGameplay = bUpdateEvenIfNotInGameplay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AchievementTriggerSender_Character.BP_AchievementTriggerSender_Character_C.OnSkillConsumed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     SkillTag                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void UBP_AchievementTriggerSender_Character_C::OnSkillConsumed(const struct FGameplayTag& SkillTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_Character_C", "OnSkillConsumed");

	Params::BP_AchievementTriggerSender_Character_C_OnSkillConsumed Parms{};

	Parms.SkillTag = std::move(SkillTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AchievementTriggerSender_Character.BP_AchievementTriggerSender_Character_C.OnRescueSuccess
// (BlueprintCallable, BlueprintEvent)

void UBP_AchievementTriggerSender_Character_C::OnRescueSuccess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_Character_C", "OnRescueSuccess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AchievementTriggerSender_Character.BP_AchievementTriggerSender_Character_C.OnWindowBroken
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBrokenByAttack                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AchievementTriggerSender_Character_C::OnWindowBroken(bool bBrokenByAttack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_Character_C", "OnWindowBroken");

	Params::BP_AchievementTriggerSender_Character_C_OnWindowBroken Parms{};

	Parms.bBrokenByAttack = bBrokenByAttack;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AchievementTriggerSender_Character.BP_AchievementTriggerSender_Character_C.OnJump
// (BlueprintCallable, BlueprintEvent)

void UBP_AchievementTriggerSender_Character_C::OnJump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_Character_C", "OnJump");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AchievementTriggerSender_Character.BP_AchievementTriggerSender_Character_C.OnCrouch
// (BlueprintCallable, BlueprintEvent)

void UBP_AchievementTriggerSender_Character_C::OnCrouch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_Character_C", "OnCrouch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AchievementTriggerSender_Character.BP_AchievementTriggerSender_Character_C.OnReceiveDamage
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bRemainHP                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDamageIsCutByStatus                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDamageIsCutByAAP                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AchievementTriggerSender_Character_C::OnReceiveDamage(int32 Damage, const struct FGameplayTag& DamageType, class AActor* DamageCauser, bool bRemainHP, bool bDamageIsCutByStatus, bool bDamageIsCutByAAP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_Character_C", "OnReceiveDamage");

	Params::BP_AchievementTriggerSender_Character_C_OnReceiveDamage Parms{};

	Parms.Damage = Damage;
	Parms.DamageType = std::move(DamageType);
	Parms.DamageCauser = DamageCauser;
	Parms.bRemainHP = bRemainHP;
	Parms.bDamageIsCutByStatus = bDamageIsCutByStatus;
	Parms.bDamageIsCutByAAP = bDamageIsCutByAAP;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AchievementTriggerSender_Character.BP_AchievementTriggerSender_Character_C.OnGetItem
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     ItemTag                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void UBP_AchievementTriggerSender_Character_C::OnGetItem(const struct FGameplayTag& ItemTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_Character_C", "OnGetItem");

	Params::BP_AchievementTriggerSender_Character_C_OnGetItem Parms{};

	Parms.ItemTag = std::move(ItemTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AchievementTriggerSender_Character.BP_AchievementTriggerSender_Character_C.OnKill
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     SkillTag                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   SerialNumber                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AttackDistance                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   KilledCharacterId                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bWithSeparatedStandAttack                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bHitEnemysSeparatedStand                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bFirstBlood                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   UltimateSkillSerialNumberIfInEffect                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DeadPlayerID                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsLastDefeated                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bPlayerKill                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bSpecialKill                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AchievementTriggerSender_Character_C::OnKill(const struct FGameplayTag& SkillTag, int32 SerialNumber, float AttackDistance, uint8 KilledCharacterId, bool bWithSeparatedStandAttack, bool bHitEnemysSeparatedStand, bool bFirstBlood, int32 UltimateSkillSerialNumberIfInEffect, float ElapsedTime, int32 DeadPlayerID, bool bIsLastDefeated, bool bPlayerKill, bool bSpecialKill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_Character_C", "OnKill");

	Params::BP_AchievementTriggerSender_Character_C_OnKill Parms{};

	Parms.SkillTag = std::move(SkillTag);
	Parms.SerialNumber = SerialNumber;
	Parms.AttackDistance = AttackDistance;
	Parms.KilledCharacterId = KilledCharacterId;
	Parms.bWithSeparatedStandAttack = bWithSeparatedStandAttack;
	Parms.bHitEnemysSeparatedStand = bHitEnemysSeparatedStand;
	Parms.bFirstBlood = bFirstBlood;
	Parms.UltimateSkillSerialNumberIfInEffect = UltimateSkillSerialNumberIfInEffect;
	Parms.ElapsedTime = ElapsedTime;
	Parms.DeadPlayerID = DeadPlayerID;
	Parms.bIsLastDefeated = bIsLastDefeated;
	Parms.bPlayerKill = bPlayerKill;
	Parms.bSpecialKill = bSpecialKill;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AchievementTriggerSender_Character.BP_AchievementTriggerSender_Character_C.BindOwnerActorEvents
// (BlueprintCallable, BlueprintEvent)

void UBP_AchievementTriggerSender_Character_C::BindOwnerActorEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_Character_C", "BindOwnerActorEvents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AchievementTriggerSender_Character.BP_AchievementTriggerSender_Character_C.OnGiveDamage
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageReceiver                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bRemainHP                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDamageIsCut                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   SerialNumber                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    DamageReceiverIsPlayer                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bWithSeparatedStandAttack                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bEnemysSeparateStand                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AchievementTriggerSender_Character_C::OnGiveDamage(int32 Damage, const struct FGameplayTag& DamageType, class AActor* DamageReceiver, bool bRemainHP, bool bDamageIsCut, int32 SerialNumber, bool DamageReceiverIsPlayer, bool bWithSeparatedStandAttack, bool bEnemysSeparateStand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_Character_C", "OnGiveDamage");

	Params::BP_AchievementTriggerSender_Character_C_OnGiveDamage Parms{};

	Parms.Damage = Damage;
	Parms.DamageType = std::move(DamageType);
	Parms.DamageReceiver = DamageReceiver;
	Parms.bRemainHP = bRemainHP;
	Parms.bDamageIsCut = bDamageIsCut;
	Parms.SerialNumber = SerialNumber;
	Parms.DamageReceiverIsPlayer = DamageReceiverIsPlayer;
	Parms.bWithSeparatedStandAttack = bWithSeparatedStandAttack;
	Parms.bEnemysSeparateStand = bEnemysSeparateStand;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AchievementTriggerSender_Character.BP_AchievementTriggerSender_Character_C.OnOpenTheGame
// (BlueprintCallable, BlueprintEvent)

void UBP_AchievementTriggerSender_Character_C::OnOpenTheGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_Character_C", "OnOpenTheGame");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AchievementTriggerSender_Character.BP_AchievementTriggerSender_Character_C.GetOwnerCharacterShortName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FString                           ShortName                                              (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBP_AchievementTriggerSender_Character_C::GetOwnerCharacterShortName(bool* Result, class FString* ShortName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_Character_C", "GetOwnerCharacterShortName");

	Params::BP_AchievementTriggerSender_Character_C_GetOwnerCharacterShortName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (ShortName != nullptr)
		*ShortName = std::move(Parms.ShortName);
}

}

