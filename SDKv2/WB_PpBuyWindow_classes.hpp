#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_PpBuyWindow

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AJB_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_PpBuyWindow.WB_PpBuyWindow_C
// 0x0070 (0x0330 - 0x02C0)
class UWB_PpBuyWindow_C final : public UAJBWindowWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(Transient, DuplicateTransient)
	class UWB_PpBuy_Button_1Credit_C*             Button_Credit_1;                                   // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_PpBuy_Button_1Credit_C*             Button_Credit_2;                                   // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_PpBuy_Button_1Credit_C*             Button_Credit_5;                                   // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_CommonButton_C*                     WB_CommonButton;                                   // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_Title_Button_EMoney_C*              WB_Title_Button_EMoney;                            // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_WindowFrame_C*                      WB_WindowBG_0;                                     // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         CountDownTime;                                     // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOpened;                                           // 0x02FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FD[0x3];                                      // 0x02FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ElapsedTime;                                       // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NeedPPNum;                                         // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bGameOver;                                         // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsPlayOpenSE;                                     // 0x0309(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          bSelectedPPBuy;                                    // 0x030A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30B[0x1];                                      // 0x030B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PrevCreditNum;                                     // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnResetedTimeCountdown;                            // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnFinishedOpening;                                 // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void OnResetedTimeCountdown__DelegateSignature();
	void OnFinishedOpening__DelegateSignature();
	void ExecuteUbergraph_WB_PpBuyWindow(int32 EntryPoint);
	void BndEvt__WB_Title_Button_EMoney_K2Node_ComponentBoundEvent_4_OnAJBButtonEvent__DelegateSignature(class UAJBButtonWidget* OwnerWidget, class UAJBButton* TargetButton);
	void OnOpeningGameOver(class UAJBWindowWidget* TargetWidget);
	void TakeOverCountDownTime(float ElapsedTime_0, float CountDownTime_0);
	void Construct();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void BndEvt__WB_CommonButton_K2Node_ComponentBoundEvent_3_OnAJBButtonEvent__DelegateSignature(class UAJBButtonWidget* OwnerWidget, class UAJBButton* TargetButton);
	void BndEvt__Button_Credit_5_K2Node_ComponentBoundEvent_2_OnAJBButtonEvent__DelegateSignature(class UAJBButtonWidget* OwnerWidget, class UAJBButton* TargetButton);
	void BndEvt__Button_Credit_2_K2Node_ComponentBoundEvent_1_OnAJBButtonEvent__DelegateSignature(class UAJBButtonWidget* OwnerWidget, class UAJBButton* TargetButton);
	void BndEvt__Button_Credit_1_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature(class UAJBButtonWidget* OwnerWidget, class UAJBButton* TargetButton);
	void OnOpeningWindow();
	void OnClosingWindow();
	void OnFinishedOpenCurveAnim();
	void GetAJBHUDBase(bool* bSuccess, class AAJBHUDBase** HUDBase);
	void UpdateTitle();
	void IsSelectedBuy(bool* bSelected);
	bool OnInputReleasedUp();
	bool OnInputReleasedRight();
	bool OnInputReleasedLeft();
	bool OnInputReleasedDown();
	bool OnInputReleasedDecide();
	bool OnInputReleasedCancel();
	bool OnInputPressedUp();
	bool OnInputPressedRight();
	bool OnInputPressedLeft();
	bool OnInputPressedDown();
	bool OnInputPressedDecide();
	bool OnInputPressedCancel();
	bool OnInputTurnRate(float Value);
	bool OnInputMoveRight(float Value);
	bool OnInputMoveForward(float Value);
	bool OnInputLookupRate(float Value);
	bool IsModeless();
	bool OnInputReleasedTouch();
	bool OnInputPressedTouch(const float LocationX, const float LocationY);
	bool OnInputReleasedR2();
	bool OnInputReleasedR1();
	bool OnInputReleasedL2();
	bool OnInputReleasedL1();
	bool OnInputPressedR2();
	bool OnInputPressedR1();
	bool OnInputPressedL2();
	bool OnInputPressedL1();
	bool OnInputReleasedL3();
	bool OnInputPressedL3();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_PpBuyWindow_C">();
	}
	static class UWB_PpBuyWindow_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_PpBuyWindow_C>();
	}
};
static_assert(alignof(UWB_PpBuyWindow_C) == 0x000008, "Wrong alignment on UWB_PpBuyWindow_C");
static_assert(sizeof(UWB_PpBuyWindow_C) == 0x000330, "Wrong size on UWB_PpBuyWindow_C");
static_assert(offsetof(UWB_PpBuyWindow_C, UberGraphFrame) == 0x0002C0, "Member 'UWB_PpBuyWindow_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_PpBuyWindow_C, Button_Credit_1) == 0x0002C8, "Member 'UWB_PpBuyWindow_C::Button_Credit_1' has a wrong offset!");
static_assert(offsetof(UWB_PpBuyWindow_C, Button_Credit_2) == 0x0002D0, "Member 'UWB_PpBuyWindow_C::Button_Credit_2' has a wrong offset!");
static_assert(offsetof(UWB_PpBuyWindow_C, Button_Credit_5) == 0x0002D8, "Member 'UWB_PpBuyWindow_C::Button_Credit_5' has a wrong offset!");
static_assert(offsetof(UWB_PpBuyWindow_C, WB_CommonButton) == 0x0002E0, "Member 'UWB_PpBuyWindow_C::WB_CommonButton' has a wrong offset!");
static_assert(offsetof(UWB_PpBuyWindow_C, WB_Title_Button_EMoney) == 0x0002E8, "Member 'UWB_PpBuyWindow_C::WB_Title_Button_EMoney' has a wrong offset!");
static_assert(offsetof(UWB_PpBuyWindow_C, WB_WindowBG_0) == 0x0002F0, "Member 'UWB_PpBuyWindow_C::WB_WindowBG_0' has a wrong offset!");
static_assert(offsetof(UWB_PpBuyWindow_C, CountDownTime) == 0x0002F8, "Member 'UWB_PpBuyWindow_C::CountDownTime' has a wrong offset!");
static_assert(offsetof(UWB_PpBuyWindow_C, bOpened) == 0x0002FC, "Member 'UWB_PpBuyWindow_C::bOpened' has a wrong offset!");
static_assert(offsetof(UWB_PpBuyWindow_C, ElapsedTime) == 0x000300, "Member 'UWB_PpBuyWindow_C::ElapsedTime' has a wrong offset!");
static_assert(offsetof(UWB_PpBuyWindow_C, NeedPPNum) == 0x000304, "Member 'UWB_PpBuyWindow_C::NeedPPNum' has a wrong offset!");
static_assert(offsetof(UWB_PpBuyWindow_C, bGameOver) == 0x000308, "Member 'UWB_PpBuyWindow_C::bGameOver' has a wrong offset!");
static_assert(offsetof(UWB_PpBuyWindow_C, bIsPlayOpenSE) == 0x000309, "Member 'UWB_PpBuyWindow_C::bIsPlayOpenSE' has a wrong offset!");
static_assert(offsetof(UWB_PpBuyWindow_C, bSelectedPPBuy) == 0x00030A, "Member 'UWB_PpBuyWindow_C::bSelectedPPBuy' has a wrong offset!");
static_assert(offsetof(UWB_PpBuyWindow_C, PrevCreditNum) == 0x00030C, "Member 'UWB_PpBuyWindow_C::PrevCreditNum' has a wrong offset!");
static_assert(offsetof(UWB_PpBuyWindow_C, OnResetedTimeCountdown) == 0x000310, "Member 'UWB_PpBuyWindow_C::OnResetedTimeCountdown' has a wrong offset!");
static_assert(offsetof(UWB_PpBuyWindow_C, OnFinishedOpening) == 0x000320, "Member 'UWB_PpBuyWindow_C::OnFinishedOpening' has a wrong offset!");

}

