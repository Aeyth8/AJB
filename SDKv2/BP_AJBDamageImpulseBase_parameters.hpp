#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBDamageImpulseBase

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AJB_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.ExecuteUbergraph_BP_AJBDamageImpulseBase
// 0x0388 (0x0388 - 0x0000)
struct BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_DeltaSeconds3;                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_DeltaSeconds2;                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_DeltaSeconds1;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_DeltaSeconds;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue1;     // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue2;     // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x001C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGameplayTagValid_ReturnValue;           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameParticleEffect_C*          CallFunc_RequestParticleEffectOnLocal_ParticleEffect; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBInGameCharacter*                    K2Node_Event_Operator;                             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Time;                                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGeneralTiming                                K2Node_Event_Timing;                               // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bEnable;                              // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bOperatorIsEmpty;                     // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_47[0x1];                                       // 0x0047(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue1;         // 0x0048(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           CallFunc_RequestWwiseEventOnLocal_AkComponent;     // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable1;                              // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue2;         // 0x008C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable2;                              // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue3;         // 0x00AC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue1;             // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue4;         // 0x00BC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue3;         // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               CallFunc_GetAJBCharacterFromActor_CharacterBP;     // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBCharacterFromActor_bSuccess;        // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EA[0x2];                                       // 0x00EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue2;             // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue4;         // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue5;         // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue1;            // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsServer_ReturnValue1;                    // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue2;            // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0130(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue1;              // 0x0140(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0150(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue1;               // 0x0160(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue2;               // 0x0170(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue3;               // 0x0180(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue4;               // 0x0190(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue5;               // 0x01A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B4[0x4];                                      // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue2;              // 0x01B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue6;         // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue6;               // 0x01D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue7;               // 0x01E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue8;               // 0x01F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable3;                              // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsServer_ReturnValue2;                    // 0x020C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_20D[0x3];                                      // 0x020D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_TargetActor;                    // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBI_BlockingRushOperatorInterface_C> K2Node_DynamicCast_AsBI_Blocking_Rush_Operator_Interface; // 0x0218(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue1;           // 0x0229(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22A[0x6];                                      // 0x022A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetAllActorsWithInterface_OutActors;      // 0x0230(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_251[0x7];                                      // 0x0251(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBInterface_C>    K2Node_DynamicCast_AsBI_AJBInterface;              // 0x0258(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckTargetSelf_bTarget;                  // 0x0269(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26A[0x6];                                      // 0x026A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBInterface_C>    K2Node_DynamicCast_AsBI_AJBInterface1;             // 0x0270(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckDisableDamage_bDisableDamage;        // 0x0281(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_282[0x6];                                      // 0x0282(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBInterface_C>    K2Node_DynamicCast_AsBI_AJBInterface2;             // 0x0288(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0299(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29A[0x6];                                      // 0x029A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBInteractAction_C*                CallFunc_GetComponentByClass_ReturnValue;          // 0x02A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x02A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckDamage_bNoDamage;                    // 0x02AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckInRange_bInRange;                    // 0x02AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DamageProcessCore_bRemainHP;              // 0x02AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue1;                 // 0x02AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue2;                 // 0x02AE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AF[0x1];                                      // 0x02AF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue5;         // 0x02B0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldDamageOverlap_bShouldOverlap;       // 0x02BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BD[0x3];                                      // 0x02BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable1;                               // 0x02C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C5[0x3];                                      // 0x02C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable1;                                // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select1_Default;                            // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D9[0x7];                                      // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetViewTarget_ReturnValue;                // 0x02E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x02E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckState_bMatch;                        // 0x02E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue3;                 // 0x02EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2EB[0x1];                                      // 0x02EB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_KillNum;                        // 0x02EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue2;           // 0x02F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x02F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F2[0x2];                                      // 0x02F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue2;                  // 0x02F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x02F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F9[0x3];                                      // 0x02F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue6;         // 0x02FC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue3;            // 0x0308(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue3;              // 0x0318(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0328(0x000C)(IsPlainOldData, NoDestructor)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue9;               // 0x0338(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue10;              // 0x0348(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue7;         // 0x0358(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35C[0x4];                                      // 0x035C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue11;              // 0x0360(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue8;         // 0x0370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue9;         // 0x0374(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0378(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase) == 0x000008, "Wrong alignment on BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase");
static_assert(sizeof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase) == 0x000388, "Wrong size on BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, EntryPoint) == 0x000000, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, K2Node_CustomEvent_DeltaSeconds3) == 0x000004, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::K2Node_CustomEvent_DeltaSeconds3' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, K2Node_CustomEvent_DeltaSeconds2) == 0x000008, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::K2Node_CustomEvent_DeltaSeconds2' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, K2Node_CustomEvent_DeltaSeconds1) == 0x00000C, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::K2Node_CustomEvent_DeltaSeconds1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, K2Node_SwitchEnum_CmpSuccess) == 0x000010, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, K2Node_CustomEvent_DeltaSeconds) == 0x000014, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::K2Node_CustomEvent_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_GreaterEqual_FloatFloat_ReturnValue1) == 0x000019, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_GreaterEqual_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_GreaterEqual_FloatFloat_ReturnValue2) == 0x00001A, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_GreaterEqual_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00001C, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_IsGameplayTagValid_ReturnValue) == 0x000028, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_IsGameplayTagValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_RequestParticleEffectOnLocal_ParticleEffect) == 0x000030, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_RequestParticleEffectOnLocal_ParticleEffect' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, K2Node_Event_Operator) == 0x000038, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::K2Node_Event_Operator' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, K2Node_Event_Time) == 0x000040, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::K2Node_Event_Time' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, K2Node_Event_Timing) == 0x000044, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::K2Node_Event_Timing' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, K2Node_Event_bEnable) == 0x000045, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::K2Node_Event_bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, K2Node_Event_bOperatorIsEmpty) == 0x000046, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::K2Node_Event_bOperatorIsEmpty' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_K2_GetActorLocation_ReturnValue1) == 0x000048, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_K2_GetActorLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_RequestWwiseEventOnLocal_AkComponent) == 0x000058, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_RequestWwiseEventOnLocal_AkComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, K2Node_Event_DeltaSeconds) == 0x000060, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_IsValid_ReturnValue) == 0x000064, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_GetOwner_ReturnValue) == 0x000068, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, Temp_bool_Variable) == 0x000070, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_IsServer_ReturnValue) == 0x000071, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_IsServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, Temp_float_Variable) == 0x000074, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, Temp_float_Variable1) == 0x000078, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::Temp_float_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, Temp_int_Variable) == 0x00007C, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, Temp_int_Loop_Counter_Variable) == 0x000080, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Add_IntInt_ReturnValue) == 0x000084, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_IsDedicatedServer_ReturnValue) == 0x000088, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_K2_GetActorLocation_ReturnValue2) == 0x00008C, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_K2_GetActorLocation_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, Temp_float_Variable2) == 0x000098, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::Temp_float_Variable2' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00009C, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, K2Node_Select_Default) == 0x0000A0, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000A4, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x0000A8, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_K2_GetActorLocation_ReturnValue3) == 0x0000AC, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_K2_GetActorLocation_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Conv_IntToFloat_ReturnValue1) == 0x0000B8, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Conv_IntToFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_K2_GetActorLocation_ReturnValue4) == 0x0000BC, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_K2_GetActorLocation_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x0000C8, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_GetOwner_ReturnValue1) == 0x0000D0, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Multiply_FloatFloat_ReturnValue3) == 0x0000D8, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Multiply_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_GetAJBCharacterFromActor_CharacterBP) == 0x0000E0, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_GetAJBCharacterFromActor_CharacterBP' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_GetAJBCharacterFromActor_bSuccess) == 0x0000E8, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_GetAJBCharacterFromActor_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_IsValid_ReturnValue1) == 0x0000E9, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Conv_IntToFloat_ReturnValue2) == 0x0000EC, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Conv_IntToFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Multiply_FloatFloat_ReturnValue4) == 0x0000F0, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Multiply_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Multiply_FloatFloat_ReturnValue5) == 0x0000F4, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Multiply_FloatFloat_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Conv_IntToString_ReturnValue) == 0x0000F8, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Conv_IntToString_ReturnValue1) == 0x000108, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Conv_IntToString_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_IsServer_ReturnValue1) == 0x000118, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_IsServer_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Conv_IntToString_ReturnValue2) == 0x000120, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Conv_IntToString_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_GetDisplayName_ReturnValue) == 0x000130, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_GetDisplayName_ReturnValue1) == 0x000140, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_GetDisplayName_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Concat_StrStr_ReturnValue) == 0x000150, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Concat_StrStr_ReturnValue1) == 0x000160, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Concat_StrStr_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Concat_StrStr_ReturnValue2) == 0x000170, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Concat_StrStr_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Concat_StrStr_ReturnValue3) == 0x000180, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Concat_StrStr_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Concat_StrStr_ReturnValue4) == 0x000190, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Concat_StrStr_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Concat_StrStr_ReturnValue5) == 0x0001A0, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Concat_StrStr_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x0001B0, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_GetDisplayName_ReturnValue2) == 0x0001B8, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_GetDisplayName_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Multiply_FloatFloat_ReturnValue6) == 0x0001C8, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Multiply_FloatFloat_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Concat_StrStr_ReturnValue6) == 0x0001D0, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Concat_StrStr_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Add_FloatFloat_ReturnValue) == 0x0001E0, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Concat_StrStr_ReturnValue7) == 0x0001E8, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Concat_StrStr_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Concat_StrStr_ReturnValue8) == 0x0001F8, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Concat_StrStr_ReturnValue8' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, Temp_float_Variable3) == 0x000208, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::Temp_float_Variable3' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_IsServer_ReturnValue2) == 0x00020C, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_IsServer_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, K2Node_CustomEvent_TargetActor) == 0x000210, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::K2Node_CustomEvent_TargetActor' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, K2Node_DynamicCast_AsBI_Blocking_Rush_Operator_Interface) == 0x000218, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::K2Node_DynamicCast_AsBI_Blocking_Rush_Operator_Interface' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, K2Node_DynamicCast_bSuccess) == 0x000228, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_IsDedicatedServer_ReturnValue1) == 0x000229, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_IsDedicatedServer_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_GetAllActorsWithInterface_OutActors) == 0x000230, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_GetAllActorsWithInterface_OutActors' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, Temp_int_Array_Index_Variable) == 0x000240, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Array_Length_ReturnValue) == 0x000244, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Array_Get_Item) == 0x000248, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Less_IntInt_ReturnValue) == 0x000250, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, K2Node_DynamicCast_AsBI_AJBInterface) == 0x000258, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::K2Node_DynamicCast_AsBI_AJBInterface' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, K2Node_DynamicCast_bSuccess1) == 0x000268, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_CheckTargetSelf_bTarget) == 0x000269, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_CheckTargetSelf_bTarget' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, K2Node_DynamicCast_AsBI_AJBInterface1) == 0x000270, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::K2Node_DynamicCast_AsBI_AJBInterface1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, K2Node_DynamicCast_bSuccess2) == 0x000280, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_CheckDisableDamage_bDisableDamage) == 0x000281, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_CheckDisableDamage_bDisableDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, K2Node_DynamicCast_AsBI_AJBInterface2) == 0x000288, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::K2Node_DynamicCast_AsBI_AJBInterface2' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, K2Node_DynamicCast_bSuccess3) == 0x000298, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Not_PreBool_ReturnValue) == 0x000299, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_GetComponentByClass_ReturnValue) == 0x0002A0, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_BooleanAND_ReturnValue) == 0x0002A8, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_IsValid_ReturnValue2) == 0x0002A9, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_CheckDamage_bNoDamage) == 0x0002AA, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_CheckDamage_bNoDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_CheckInRange_bInRange) == 0x0002AB, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_CheckInRange_bInRange' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_DamageProcessCore_bRemainHP) == 0x0002AC, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_DamageProcessCore_bRemainHP' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Not_PreBool_ReturnValue1) == 0x0002AD, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Not_PreBool_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Not_PreBool_ReturnValue2) == 0x0002AE, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Not_PreBool_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_K2_GetActorLocation_ReturnValue5) == 0x0002B0, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_K2_GetActorLocation_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_ShouldDamageOverlap_bShouldOverlap) == 0x0002BC, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_ShouldDamageOverlap_bShouldOverlap' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Add_IntInt_ReturnValue1) == 0x0002C0, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, Temp_bool_Variable1) == 0x0002C4, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, Temp_int_Variable1) == 0x0002C8, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::Temp_int_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, K2Node_Select1_Default) == 0x0002CC, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_GetPlayerController_ReturnValue) == 0x0002D0, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_MakeLiteralByte_ReturnValue) == 0x0002D8, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_GetViewTarget_ReturnValue) == 0x0002E0, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_GetViewTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0002E8, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_CheckState_bMatch) == 0x0002E9, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_CheckState_bMatch' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Not_PreBool_ReturnValue3) == 0x0002EA, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Not_PreBool_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, K2Node_CustomEvent_KillNum) == 0x0002EC, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::K2Node_CustomEvent_KillNum' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_IsDedicatedServer_ReturnValue2) == 0x0002F0, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_IsDedicatedServer_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Greater_IntInt_ReturnValue) == 0x0002F1, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Add_IntInt_ReturnValue2) == 0x0002F4, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Add_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, K2Node_Event_EndPlayReason) == 0x0002F8, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_K2_GetActorLocation_ReturnValue6) == 0x0002FC, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_K2_GetActorLocation_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Conv_IntToString_ReturnValue3) == 0x000308, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Conv_IntToString_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_GetDisplayName_ReturnValue3) == 0x000318, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_GetDisplayName_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000328, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Concat_StrStr_ReturnValue9) == 0x000338, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Concat_StrStr_ReturnValue9' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Concat_StrStr_ReturnValue10) == 0x000348, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Concat_StrStr_ReturnValue10' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Multiply_FloatFloat_ReturnValue7) == 0x000358, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Multiply_FloatFloat_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Concat_StrStr_ReturnValue11) == 0x000360, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Concat_StrStr_ReturnValue11' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Multiply_FloatFloat_ReturnValue8) == 0x000370, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Multiply_FloatFloat_ReturnValue8' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_Multiply_FloatFloat_ReturnValue9) == 0x000374, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_Multiply_FloatFloat_ReturnValue9' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase, CallFunc_MakeVector_ReturnValue) == 0x000378, "Member 'BP_AJBDamageImpulseBase_C_ExecuteUbergraph_BP_AJBDamageImpulseBase::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBDamageImpulseBase_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBDamageImpulseBase_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_AJBDamageImpulseBase_C_ReceiveEndPlay");
static_assert(sizeof(BP_AJBDamageImpulseBase_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_AJBDamageImpulseBase_C_ReceiveEndPlay");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_AJBDamageImpulseBase_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.ROC_AttackResult
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBDamageImpulseBase_C_ROC_AttackResult final
{
public:
	int32                                         KillNum;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBDamageImpulseBase_C_ROC_AttackResult) == 0x000004, "Wrong alignment on BP_AJBDamageImpulseBase_C_ROC_AttackResult");
static_assert(sizeof(BP_AJBDamageImpulseBase_C_ROC_AttackResult) == 0x000004, "Wrong size on BP_AJBDamageImpulseBase_C_ROC_AttackResult");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ROC_AttackResult, KillNum) == 0x000000, "Member 'BP_AJBDamageImpulseBase_C_ROC_AttackResult::KillNum' has a wrong offset!");

// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.MC_SpawnInvisibleParticle
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBDamageImpulseBase_C_MC_SpawnInvisibleParticle final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBDamageImpulseBase_C_MC_SpawnInvisibleParticle) == 0x000008, "Wrong alignment on BP_AJBDamageImpulseBase_C_MC_SpawnInvisibleParticle");
static_assert(sizeof(BP_AJBDamageImpulseBase_C_MC_SpawnInvisibleParticle) == 0x000008, "Wrong size on BP_AJBDamageImpulseBase_C_MC_SpawnInvisibleParticle");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_MC_SpawnInvisibleParticle, TargetActor) == 0x000000, "Member 'BP_AJBDamageImpulseBase_C_MC_SpawnInvisibleParticle::TargetActor' has a wrong offset!");

// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBDamageImpulseBase_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBDamageImpulseBase_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_AJBDamageImpulseBase_C_ReceiveTick");
static_assert(sizeof(BP_AJBDamageImpulseBase_C_ReceiveTick) == 0x000004, "Wrong size on BP_AJBDamageImpulseBase_C_ReceiveTick");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_AJBDamageImpulseBase_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.TickState_Active
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBDamageImpulseBase_C_TickState_Active final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBDamageImpulseBase_C_TickState_Active) == 0x000004, "Wrong alignment on BP_AJBDamageImpulseBase_C_TickState_Active");
static_assert(sizeof(BP_AJBDamageImpulseBase_C_TickState_Active) == 0x000004, "Wrong size on BP_AJBDamageImpulseBase_C_TickState_Active");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_TickState_Active, DeltaSeconds) == 0x000000, "Member 'BP_AJBDamageImpulseBase_C_TickState_Active::DeltaSeconds' has a wrong offset!");

// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.StateTick
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBDamageImpulseBase_C_StateTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBDamageImpulseBase_C_StateTick) == 0x000004, "Wrong alignment on BP_AJBDamageImpulseBase_C_StateTick");
static_assert(sizeof(BP_AJBDamageImpulseBase_C_StateTick) == 0x000004, "Wrong size on BP_AJBDamageImpulseBase_C_StateTick");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_StateTick, DeltaSeconds) == 0x000000, "Member 'BP_AJBDamageImpulseBase_C_StateTick::DeltaSeconds' has a wrong offset!");

// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.TickState_Clearing
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBDamageImpulseBase_C_TickState_Clearing final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBDamageImpulseBase_C_TickState_Clearing) == 0x000004, "Wrong alignment on BP_AJBDamageImpulseBase_C_TickState_Clearing");
static_assert(sizeof(BP_AJBDamageImpulseBase_C_TickState_Clearing) == 0x000004, "Wrong size on BP_AJBDamageImpulseBase_C_TickState_Clearing");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_TickState_Clearing, DeltaSeconds) == 0x000000, "Member 'BP_AJBDamageImpulseBase_C_TickState_Clearing::DeltaSeconds' has a wrong offset!");

// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.TickState_Ready
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBDamageImpulseBase_C_TickState_Ready final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBDamageImpulseBase_C_TickState_Ready) == 0x000004, "Wrong alignment on BP_AJBDamageImpulseBase_C_TickState_Ready");
static_assert(sizeof(BP_AJBDamageImpulseBase_C_TickState_Ready) == 0x000004, "Wrong size on BP_AJBDamageImpulseBase_C_TickState_Ready");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_TickState_Ready, DeltaSeconds) == 0x000000, "Member 'BP_AJBDamageImpulseBase_C_TickState_Ready::DeltaSeconds' has a wrong offset!");

// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.NotifyTheWorld
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBDamageImpulseBase_C_NotifyTheWorld final
{
public:
	class AAJBInGameCharacter*                    Operator;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGeneralTiming                                Timing;                                            // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnable;                                           // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bOperatorIsEmpty;                                  // 0x000E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBDamageImpulseBase_C_NotifyTheWorld) == 0x000008, "Wrong alignment on BP_AJBDamageImpulseBase_C_NotifyTheWorld");
static_assert(sizeof(BP_AJBDamageImpulseBase_C_NotifyTheWorld) == 0x000010, "Wrong size on BP_AJBDamageImpulseBase_C_NotifyTheWorld");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_NotifyTheWorld, Operator) == 0x000000, "Member 'BP_AJBDamageImpulseBase_C_NotifyTheWorld::Operator' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_NotifyTheWorld, Time) == 0x000008, "Member 'BP_AJBDamageImpulseBase_C_NotifyTheWorld::Time' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_NotifyTheWorld, Timing) == 0x00000C, "Member 'BP_AJBDamageImpulseBase_C_NotifyTheWorld::Timing' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_NotifyTheWorld, bEnable) == 0x00000D, "Member 'BP_AJBDamageImpulseBase_C_NotifyTheWorld::bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_NotifyTheWorld, bOperatorIsEmpty) == 0x00000E, "Member 'BP_AJBDamageImpulseBase_C_NotifyTheWorld::bOperatorIsEmpty' has a wrong offset!");

// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.GetAttackDistance
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBDamageImpulseBase_C_GetAttackDistance final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackDistance;                                    // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBDamageImpulseBase_C_GetAttackDistance) == 0x000008, "Wrong alignment on BP_AJBDamageImpulseBase_C_GetAttackDistance");
static_assert(sizeof(BP_AJBDamageImpulseBase_C_GetAttackDistance) == 0x000010, "Wrong size on BP_AJBDamageImpulseBase_C_GetAttackDistance");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_GetAttackDistance, DamagedActor) == 0x000000, "Member 'BP_AJBDamageImpulseBase_C_GetAttackDistance::DamagedActor' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_GetAttackDistance, AttackDistance) == 0x000008, "Member 'BP_AJBDamageImpulseBase_C_GetAttackDistance::AttackDistance' has a wrong offset!");

// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.ChangeState
// 0x0003 (0x0003 - 0x0000)
struct BP_AJBDamageImpulseBase_C_ChangeState final
{
public:
	EDamageImpulseState                           NewState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBDamageImpulseBase_C_ChangeState) == 0x000001, "Wrong alignment on BP_AJBDamageImpulseBase_C_ChangeState");
static_assert(sizeof(BP_AJBDamageImpulseBase_C_ChangeState) == 0x000003, "Wrong size on BP_AJBDamageImpulseBase_C_ChangeState");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ChangeState, NewState) == 0x000000, "Member 'BP_AJBDamageImpulseBase_C_ChangeState::NewState' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ChangeState, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'BP_AJBDamageImpulseBase_C_ChangeState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ChangeState, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000002, "Member 'BP_AJBDamageImpulseBase_C_ChangeState::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.CalcDamage
// 0x0100 (0x0100 - 0x0000)
struct BP_AJBDamageImpulseBase_C_CalcDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Damage;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TempDebugDrawColor;                                // 0x000C(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TempDamage;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempRate;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempLength;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBI_DamageImpulseInterface_C> K2Node_DynamicCast_AsBI_Damage_Impulse_Interface;  // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetTargetLocation_Location;               // 0x003C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBI_DamageImpulseInterface_C> K2Node_DynamicCast_AsBI_Damage_Impulse_Interface1; // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetTargetLocation_Location1;              // 0x005C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue1;               // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FTrunc_ReturnValue1;                      // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue1;         // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue2;                      // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue2;         // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00C0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_DamageImpulseInterface_C> K2Node_DynamicCast_AsBI_Damage_Impulse_Interface2; // 0x00D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetTargetLocation_Location2;              // 0x00E4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00F0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBDamageImpulseBase_C_CalcDamage) == 0x000008, "Wrong alignment on BP_AJBDamageImpulseBase_C_CalcDamage");
static_assert(sizeof(BP_AJBDamageImpulseBase_C_CalcDamage) == 0x000100, "Wrong size on BP_AJBDamageImpulseBase_C_CalcDamage");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CalcDamage, DamagedActor) == 0x000000, "Member 'BP_AJBDamageImpulseBase_C_CalcDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CalcDamage, Damage) == 0x000008, "Member 'BP_AJBDamageImpulseBase_C_CalcDamage::Damage' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CalcDamage, TempDebugDrawColor) == 0x00000C, "Member 'BP_AJBDamageImpulseBase_C_CalcDamage::TempDebugDrawColor' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CalcDamage, TempDamage) == 0x00001C, "Member 'BP_AJBDamageImpulseBase_C_CalcDamage::TempDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CalcDamage, TempRate) == 0x000020, "Member 'BP_AJBDamageImpulseBase_C_CalcDamage::TempRate' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CalcDamage, TempLength) == 0x000024, "Member 'BP_AJBDamageImpulseBase_C_CalcDamage::TempLength' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CalcDamage, K2Node_DynamicCast_AsBI_Damage_Impulse_Interface) == 0x000028, "Member 'BP_AJBDamageImpulseBase_C_CalcDamage::K2Node_DynamicCast_AsBI_Damage_Impulse_Interface' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CalcDamage, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_AJBDamageImpulseBase_C_CalcDamage::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CalcDamage, CallFunc_GetTargetLocation_Location) == 0x00003C, "Member 'BP_AJBDamageImpulseBase_C_CalcDamage::CallFunc_GetTargetLocation_Location' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CalcDamage, K2Node_DynamicCast_AsBI_Damage_Impulse_Interface1) == 0x000048, "Member 'BP_AJBDamageImpulseBase_C_CalcDamage::K2Node_DynamicCast_AsBI_Damage_Impulse_Interface1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CalcDamage, K2Node_DynamicCast_bSuccess1) == 0x000058, "Member 'BP_AJBDamageImpulseBase_C_CalcDamage::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CalcDamage, CallFunc_GetTargetLocation_Location1) == 0x00005C, "Member 'BP_AJBDamageImpulseBase_C_CalcDamage::CallFunc_GetTargetLocation_Location1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CalcDamage, CallFunc_GetDisplayName_ReturnValue) == 0x000068, "Member 'BP_AJBDamageImpulseBase_C_CalcDamage::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CalcDamage, CallFunc_Concat_StrStr_ReturnValue) == 0x000078, "Member 'BP_AJBDamageImpulseBase_C_CalcDamage::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CalcDamage, CallFunc_Concat_StrStr_ReturnValue1) == 0x000088, "Member 'BP_AJBDamageImpulseBase_C_CalcDamage::CallFunc_Concat_StrStr_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CalcDamage, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000098, "Member 'BP_AJBDamageImpulseBase_C_CalcDamage::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CalcDamage, CallFunc_FTrunc_ReturnValue) == 0x00009C, "Member 'BP_AJBDamageImpulseBase_C_CalcDamage::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CalcDamage, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x0000A0, "Member 'BP_AJBDamageImpulseBase_C_CalcDamage::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CalcDamage, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0000A4, "Member 'BP_AJBDamageImpulseBase_C_CalcDamage::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CalcDamage, CallFunc_FTrunc_ReturnValue1) == 0x0000A8, "Member 'BP_AJBDamageImpulseBase_C_CalcDamage::CallFunc_FTrunc_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CalcDamage, CallFunc_GreaterEqual_IntInt_ReturnValue1) == 0x0000AC, "Member 'BP_AJBDamageImpulseBase_C_CalcDamage::CallFunc_GreaterEqual_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CalcDamage, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x0000B0, "Member 'BP_AJBDamageImpulseBase_C_CalcDamage::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CalcDamage, CallFunc_FTrunc_ReturnValue2) == 0x0000B4, "Member 'BP_AJBDamageImpulseBase_C_CalcDamage::CallFunc_FTrunc_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CalcDamage, CallFunc_GreaterEqual_IntInt_ReturnValue2) == 0x0000B8, "Member 'BP_AJBDamageImpulseBase_C_CalcDamage::CallFunc_GreaterEqual_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CalcDamage, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000BC, "Member 'BP_AJBDamageImpulseBase_C_CalcDamage::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CalcDamage, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000C0, "Member 'BP_AJBDamageImpulseBase_C_CalcDamage::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CalcDamage, K2Node_DynamicCast_AsBI_Damage_Impulse_Interface2) == 0x0000D0, "Member 'BP_AJBDamageImpulseBase_C_CalcDamage::K2Node_DynamicCast_AsBI_Damage_Impulse_Interface2' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CalcDamage, K2Node_DynamicCast_bSuccess2) == 0x0000E0, "Member 'BP_AJBDamageImpulseBase_C_CalcDamage::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CalcDamage, CallFunc_GetTargetLocation_Location2) == 0x0000E4, "Member 'BP_AJBDamageImpulseBase_C_CalcDamage::CallFunc_GetTargetLocation_Location2' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CalcDamage, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000F0, "Member 'BP_AJBDamageImpulseBase_C_CalcDamage::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CalcDamage, CallFunc_VSize_ReturnValue) == 0x0000FC, "Member 'BP_AJBDamageImpulseBase_C_CalcDamage::CallFunc_VSize_ReturnValue' has a wrong offset!");

// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.CheckInRange
// 0x00C0 (0x00C0 - 0x0000)
struct BP_AJBDamageImpulseBase_C_CheckInRange final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInRange;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TempTargetLocation;                                // 0x000C(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_DamageImpulseInterface_C> K2Node_DynamicCast_AsBI_Damage_Impulse_Interface;  // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetTargetLocation_Location;               // 0x0034(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x004C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0060(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPointInBoxWithTransform_ReturnValue;    // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0094(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00A0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBDamageImpulseBase_C_CheckInRange) == 0x000010, "Wrong alignment on BP_AJBDamageImpulseBase_C_CheckInRange");
static_assert(sizeof(BP_AJBDamageImpulseBase_C_CheckInRange) == 0x0000C0, "Wrong size on BP_AJBDamageImpulseBase_C_CheckInRange");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CheckInRange, DamagedActor) == 0x000000, "Member 'BP_AJBDamageImpulseBase_C_CheckInRange::DamagedActor' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CheckInRange, bInRange) == 0x000008, "Member 'BP_AJBDamageImpulseBase_C_CheckInRange::bInRange' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CheckInRange, TempTargetLocation) == 0x00000C, "Member 'BP_AJBDamageImpulseBase_C_CheckInRange::TempTargetLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CheckInRange, Temp_bool_Variable) == 0x000018, "Member 'BP_AJBDamageImpulseBase_C_CheckInRange::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CheckInRange, K2Node_DynamicCast_AsBI_Damage_Impulse_Interface) == 0x000020, "Member 'BP_AJBDamageImpulseBase_C_CheckInRange::K2Node_DynamicCast_AsBI_Damage_Impulse_Interface' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CheckInRange, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_AJBDamageImpulseBase_C_CheckInRange::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CheckInRange, CallFunc_GetTargetLocation_Location) == 0x000034, "Member 'BP_AJBDamageImpulseBase_C_CheckInRange::CallFunc_GetTargetLocation_Location' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CheckInRange, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000040, "Member 'BP_AJBDamageImpulseBase_C_CheckInRange::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CheckInRange, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x000044, "Member 'BP_AJBDamageImpulseBase_C_CheckInRange::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CheckInRange, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x000048, "Member 'BP_AJBDamageImpulseBase_C_CheckInRange::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CheckInRange, CallFunc_MakeVector_ReturnValue) == 0x00004C, "Member 'BP_AJBDamageImpulseBase_C_CheckInRange::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CheckInRange, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000060, "Member 'BP_AJBDamageImpulseBase_C_CheckInRange::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CheckInRange, CallFunc_IsPointInBoxWithTransform_ReturnValue) == 0x000090, "Member 'BP_AJBDamageImpulseBase_C_CheckInRange::CallFunc_IsPointInBoxWithTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CheckInRange, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000094, "Member 'BP_AJBDamageImpulseBase_C_CheckInRange::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CheckInRange, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000A0, "Member 'BP_AJBDamageImpulseBase_C_CheckInRange::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CheckInRange, CallFunc_VSize_ReturnValue) == 0x0000AC, "Member 'BP_AJBDamageImpulseBase_C_CheckInRange::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CheckInRange, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0000B0, "Member 'BP_AJBDamageImpulseBase_C_CheckInRange::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CheckInRange, K2Node_Select_Default) == 0x0000B1, "Member 'BP_AJBDamageImpulseBase_C_CheckInRange::K2Node_Select_Default' has a wrong offset!");

// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.EnableDamageOverlap
// 0x0018 (0x0018 - 0x0000)
struct BP_AJBDamageImpulseBase_C_EnableDamageOverlap final
{
public:
	class UPrimitiveComponent*                    CallFunc_GetCollisionComponent_CollisionComponent; // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_GetCollisionComponent_CollisionComponent1; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_GetCollisionComponent_CollisionComponent2; // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBDamageImpulseBase_C_EnableDamageOverlap) == 0x000008, "Wrong alignment on BP_AJBDamageImpulseBase_C_EnableDamageOverlap");
static_assert(sizeof(BP_AJBDamageImpulseBase_C_EnableDamageOverlap) == 0x000018, "Wrong size on BP_AJBDamageImpulseBase_C_EnableDamageOverlap");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_EnableDamageOverlap, CallFunc_GetCollisionComponent_CollisionComponent) == 0x000000, "Member 'BP_AJBDamageImpulseBase_C_EnableDamageOverlap::CallFunc_GetCollisionComponent_CollisionComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_EnableDamageOverlap, CallFunc_GetCollisionComponent_CollisionComponent1) == 0x000008, "Member 'BP_AJBDamageImpulseBase_C_EnableDamageOverlap::CallFunc_GetCollisionComponent_CollisionComponent1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_EnableDamageOverlap, CallFunc_GetCollisionComponent_CollisionComponent2) == 0x000010, "Member 'BP_AJBDamageImpulseBase_C_EnableDamageOverlap::CallFunc_GetCollisionComponent_CollisionComponent2' has a wrong offset!");

// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.DamageProcessCore
// 0x0068 (0x0068 - 0x0000)
struct BP_AJBDamageImpulseBase_C_DamageProcessCore final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DamageCauser;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNoDamage;                                         // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bRemainHP;                                         // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bTempRemainHP;                                     // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_GetPoliticPassiveTagOnDamage_PassiveTagOnDamage; // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGameplayTagValid_ReturnValue;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_GetPoliticPassiveTagOnDamage_PassiveTagOnDamage1; // 0x0028(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable1;                              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_CalcDamage_DamageForHPAP;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_CalcDamage_DamageForAAP;                  // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_CalcDamage_CutDamage;                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CalcDamage_bRemainHP;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CalcDamage_bDamageIsCutByAAP;             // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldAddPassive_bShouldAddPassive;       // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldAddDamage_bShouldAddDamage;         // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBGameplayTagOwnerInterface_C> K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface; // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_CalcDamage_Damage;                        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttackDistance_AttackDistance;         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBDamageImpulseBase_C_DamageProcessCore) == 0x000008, "Wrong alignment on BP_AJBDamageImpulseBase_C_DamageProcessCore");
static_assert(sizeof(BP_AJBDamageImpulseBase_C_DamageProcessCore) == 0x000068, "Wrong size on BP_AJBDamageImpulseBase_C_DamageProcessCore");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_DamageProcessCore, DamagedActor) == 0x000000, "Member 'BP_AJBDamageImpulseBase_C_DamageProcessCore::DamagedActor' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_DamageProcessCore, DamageCauser) == 0x000008, "Member 'BP_AJBDamageImpulseBase_C_DamageProcessCore::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_DamageProcessCore, bNoDamage) == 0x000010, "Member 'BP_AJBDamageImpulseBase_C_DamageProcessCore::bNoDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_DamageProcessCore, bRemainHP) == 0x000011, "Member 'BP_AJBDamageImpulseBase_C_DamageProcessCore::bRemainHP' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_DamageProcessCore, bTempRemainHP) == 0x000012, "Member 'BP_AJBDamageImpulseBase_C_DamageProcessCore::bTempRemainHP' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_DamageProcessCore, Temp_float_Variable) == 0x000014, "Member 'BP_AJBDamageImpulseBase_C_DamageProcessCore::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_DamageProcessCore, CallFunc_GetPoliticPassiveTagOnDamage_PassiveTagOnDamage) == 0x000018, "Member 'BP_AJBDamageImpulseBase_C_DamageProcessCore::CallFunc_GetPoliticPassiveTagOnDamage_PassiveTagOnDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_DamageProcessCore, CallFunc_IsGameplayTagValid_ReturnValue) == 0x000020, "Member 'BP_AJBDamageImpulseBase_C_DamageProcessCore::CallFunc_IsGameplayTagValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_DamageProcessCore, CallFunc_GetPoliticPassiveTagOnDamage_PassiveTagOnDamage1) == 0x000028, "Member 'BP_AJBDamageImpulseBase_C_DamageProcessCore::CallFunc_GetPoliticPassiveTagOnDamage_PassiveTagOnDamage1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_DamageProcessCore, Temp_float_Variable1) == 0x000030, "Member 'BP_AJBDamageImpulseBase_C_DamageProcessCore::Temp_float_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_DamageProcessCore, CallFunc_CalcDamage_DamageForHPAP) == 0x000034, "Member 'BP_AJBDamageImpulseBase_C_DamageProcessCore::CallFunc_CalcDamage_DamageForHPAP' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_DamageProcessCore, CallFunc_CalcDamage_DamageForAAP) == 0x000038, "Member 'BP_AJBDamageImpulseBase_C_DamageProcessCore::CallFunc_CalcDamage_DamageForAAP' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_DamageProcessCore, CallFunc_CalcDamage_CutDamage) == 0x00003C, "Member 'BP_AJBDamageImpulseBase_C_DamageProcessCore::CallFunc_CalcDamage_CutDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_DamageProcessCore, CallFunc_CalcDamage_bRemainHP) == 0x000040, "Member 'BP_AJBDamageImpulseBase_C_DamageProcessCore::CallFunc_CalcDamage_bRemainHP' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_DamageProcessCore, CallFunc_CalcDamage_bDamageIsCutByAAP) == 0x000041, "Member 'BP_AJBDamageImpulseBase_C_DamageProcessCore::CallFunc_CalcDamage_bDamageIsCutByAAP' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_DamageProcessCore, CallFunc_ShouldAddPassive_bShouldAddPassive) == 0x000042, "Member 'BP_AJBDamageImpulseBase_C_DamageProcessCore::CallFunc_ShouldAddPassive_bShouldAddPassive' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_DamageProcessCore, Temp_bool_Variable) == 0x000043, "Member 'BP_AJBDamageImpulseBase_C_DamageProcessCore::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_DamageProcessCore, CallFunc_ShouldAddDamage_bShouldAddDamage) == 0x000044, "Member 'BP_AJBDamageImpulseBase_C_DamageProcessCore::CallFunc_ShouldAddDamage_bShouldAddDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_DamageProcessCore, CallFunc_BooleanAND_ReturnValue) == 0x000045, "Member 'BP_AJBDamageImpulseBase_C_DamageProcessCore::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_DamageProcessCore, K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface) == 0x000048, "Member 'BP_AJBDamageImpulseBase_C_DamageProcessCore::K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_DamageProcessCore, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'BP_AJBDamageImpulseBase_C_DamageProcessCore::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_DamageProcessCore, K2Node_Select_Default) == 0x00005C, "Member 'BP_AJBDamageImpulseBase_C_DamageProcessCore::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_DamageProcessCore, CallFunc_CalcDamage_Damage) == 0x000060, "Member 'BP_AJBDamageImpulseBase_C_DamageProcessCore::CallFunc_CalcDamage_Damage' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_DamageProcessCore, CallFunc_GetAttackDistance_AttackDistance) == 0x000064, "Member 'BP_AJBDamageImpulseBase_C_DamageProcessCore::CallFunc_GetAttackDistance_AttackDistance' has a wrong offset!");

// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.ShouldAddDamage
// 0x0058 (0x0058 - 0x0000)
struct BP_AJBDamageImpulseBase_C_ShouldAddDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DamageCauser;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldAddDamage;                                  // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bTempStealth;                                      // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBGameplayTagOwnerInterface_C> K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface; // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_GetGameplayTags_TagContainerCopy;         // 0x0030(0x0020)()
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_MatchesAnyTags_ReturnValue;               // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBDamageImpulseBase_C_ShouldAddDamage) == 0x000008, "Wrong alignment on BP_AJBDamageImpulseBase_C_ShouldAddDamage");
static_assert(sizeof(BP_AJBDamageImpulseBase_C_ShouldAddDamage) == 0x000058, "Wrong size on BP_AJBDamageImpulseBase_C_ShouldAddDamage");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ShouldAddDamage, DamagedActor) == 0x000000, "Member 'BP_AJBDamageImpulseBase_C_ShouldAddDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ShouldAddDamage, DamageCauser) == 0x000008, "Member 'BP_AJBDamageImpulseBase_C_ShouldAddDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ShouldAddDamage, bShouldAddDamage) == 0x000010, "Member 'BP_AJBDamageImpulseBase_C_ShouldAddDamage::bShouldAddDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ShouldAddDamage, bTempStealth) == 0x000011, "Member 'BP_AJBDamageImpulseBase_C_ShouldAddDamage::bTempStealth' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ShouldAddDamage, K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface) == 0x000018, "Member 'BP_AJBDamageImpulseBase_C_ShouldAddDamage::K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ShouldAddDamage, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_AJBDamageImpulseBase_C_ShouldAddDamage::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ShouldAddDamage, CallFunc_GetGameplayTags_TagContainerCopy) == 0x000030, "Member 'BP_AJBDamageImpulseBase_C_ShouldAddDamage::CallFunc_GetGameplayTags_TagContainerCopy' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ShouldAddDamage, CallFunc_Not_PreBool_ReturnValue) == 0x000050, "Member 'BP_AJBDamageImpulseBase_C_ShouldAddDamage::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ShouldAddDamage, CallFunc_MatchesAnyTags_ReturnValue) == 0x000051, "Member 'BP_AJBDamageImpulseBase_C_ShouldAddDamage::CallFunc_MatchesAnyTags_ReturnValue' has a wrong offset!");

// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.ShouldAddPassive
// 0x0080 (0x0080 - 0x0000)
struct BP_AJBDamageImpulseBase_C_ShouldAddPassive final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DamageCauser;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldAddPassive;                                 // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bTempStealth;                                      // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBInterface_C>    K2Node_DynamicCast_AsBI_AJBInterface;              // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBGameplayTagOwnerInterface_C> K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface; // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_GetGameplayTags_TagContainerCopy;         // 0x0048(0x0020)()
	bool                                          CallFunc_MatchesAnyTags_ReturnValue;               // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_GetPoliticPassiveTagOnDamage_PassiveTagOnDamage; // 0x0070(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckDisablePassive_bDisablePassive;      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBDamageImpulseBase_C_ShouldAddPassive) == 0x000008, "Wrong alignment on BP_AJBDamageImpulseBase_C_ShouldAddPassive");
static_assert(sizeof(BP_AJBDamageImpulseBase_C_ShouldAddPassive) == 0x000080, "Wrong size on BP_AJBDamageImpulseBase_C_ShouldAddPassive");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ShouldAddPassive, DamagedActor) == 0x000000, "Member 'BP_AJBDamageImpulseBase_C_ShouldAddPassive::DamagedActor' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ShouldAddPassive, DamageCauser) == 0x000008, "Member 'BP_AJBDamageImpulseBase_C_ShouldAddPassive::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ShouldAddPassive, bShouldAddPassive) == 0x000010, "Member 'BP_AJBDamageImpulseBase_C_ShouldAddPassive::bShouldAddPassive' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ShouldAddPassive, bTempStealth) == 0x000011, "Member 'BP_AJBDamageImpulseBase_C_ShouldAddPassive::bTempStealth' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ShouldAddPassive, K2Node_DynamicCast_AsBI_AJBInterface) == 0x000018, "Member 'BP_AJBDamageImpulseBase_C_ShouldAddPassive::K2Node_DynamicCast_AsBI_AJBInterface' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ShouldAddPassive, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_AJBDamageImpulseBase_C_ShouldAddPassive::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ShouldAddPassive, CallFunc_Not_PreBool_ReturnValue) == 0x000029, "Member 'BP_AJBDamageImpulseBase_C_ShouldAddPassive::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ShouldAddPassive, K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface) == 0x000030, "Member 'BP_AJBDamageImpulseBase_C_ShouldAddPassive::K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ShouldAddPassive, K2Node_DynamicCast_bSuccess1) == 0x000040, "Member 'BP_AJBDamageImpulseBase_C_ShouldAddPassive::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ShouldAddPassive, CallFunc_GetGameplayTags_TagContainerCopy) == 0x000048, "Member 'BP_AJBDamageImpulseBase_C_ShouldAddPassive::CallFunc_GetGameplayTags_TagContainerCopy' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ShouldAddPassive, CallFunc_MatchesAnyTags_ReturnValue) == 0x000068, "Member 'BP_AJBDamageImpulseBase_C_ShouldAddPassive::CallFunc_MatchesAnyTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ShouldAddPassive, CallFunc_GetPoliticPassiveTagOnDamage_PassiveTagOnDamage) == 0x000070, "Member 'BP_AJBDamageImpulseBase_C_ShouldAddPassive::CallFunc_GetPoliticPassiveTagOnDamage_PassiveTagOnDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ShouldAddPassive, CallFunc_CheckDisablePassive_bDisablePassive) == 0x000078, "Member 'BP_AJBDamageImpulseBase_C_ShouldAddPassive::CallFunc_CheckDisablePassive_bDisablePassive' has a wrong offset!");

// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.TryToSpeakAttackResultVoice
// 0x0040 (0x0040 - 0x0000)
struct BP_AJBDamageImpulseBase_C_TryToSpeakAttackResultVoice final
{
public:
	int32                                         KillNum;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               CallFunc_GetAJBCharacterFromActor_CharacterBP;     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBCharacterFromActor_bSuccess;        // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable1;                               // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Select_Default;                             // 0x0028(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Select1_Default;                            // 0x0030(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGameplayTagValid_ReturnValue;           // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryToSpeakVoice_bWillBeSpoken;            // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBDamageImpulseBase_C_TryToSpeakAttackResultVoice) == 0x000008, "Wrong alignment on BP_AJBDamageImpulseBase_C_TryToSpeakAttackResultVoice");
static_assert(sizeof(BP_AJBDamageImpulseBase_C_TryToSpeakAttackResultVoice) == 0x000040, "Wrong size on BP_AJBDamageImpulseBase_C_TryToSpeakAttackResultVoice");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_TryToSpeakAttackResultVoice, KillNum) == 0x000000, "Member 'BP_AJBDamageImpulseBase_C_TryToSpeakAttackResultVoice::KillNum' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_TryToSpeakAttackResultVoice, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBDamageImpulseBase_C_TryToSpeakAttackResultVoice::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_TryToSpeakAttackResultVoice, Temp_bool_Variable) == 0x000010, "Member 'BP_AJBDamageImpulseBase_C_TryToSpeakAttackResultVoice::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_TryToSpeakAttackResultVoice, CallFunc_GetAJBCharacterFromActor_CharacterBP) == 0x000018, "Member 'BP_AJBDamageImpulseBase_C_TryToSpeakAttackResultVoice::CallFunc_GetAJBCharacterFromActor_CharacterBP' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_TryToSpeakAttackResultVoice, CallFunc_GetAJBCharacterFromActor_bSuccess) == 0x000020, "Member 'BP_AJBDamageImpulseBase_C_TryToSpeakAttackResultVoice::CallFunc_GetAJBCharacterFromActor_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_TryToSpeakAttackResultVoice, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'BP_AJBDamageImpulseBase_C_TryToSpeakAttackResultVoice::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_TryToSpeakAttackResultVoice, Temp_bool_Variable1) == 0x000022, "Member 'BP_AJBDamageImpulseBase_C_TryToSpeakAttackResultVoice::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_TryToSpeakAttackResultVoice, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000023, "Member 'BP_AJBDamageImpulseBase_C_TryToSpeakAttackResultVoice::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_TryToSpeakAttackResultVoice, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000024, "Member 'BP_AJBDamageImpulseBase_C_TryToSpeakAttackResultVoice::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_TryToSpeakAttackResultVoice, K2Node_Select_Default) == 0x000028, "Member 'BP_AJBDamageImpulseBase_C_TryToSpeakAttackResultVoice::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_TryToSpeakAttackResultVoice, K2Node_Select1_Default) == 0x000030, "Member 'BP_AJBDamageImpulseBase_C_TryToSpeakAttackResultVoice::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_TryToSpeakAttackResultVoice, CallFunc_IsGameplayTagValid_ReturnValue) == 0x000038, "Member 'BP_AJBDamageImpulseBase_C_TryToSpeakAttackResultVoice::CallFunc_IsGameplayTagValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_TryToSpeakAttackResultVoice, CallFunc_TryToSpeakVoice_bWillBeSpoken) == 0x000039, "Member 'BP_AJBDamageImpulseBase_C_TryToSpeakAttackResultVoice::CallFunc_TryToSpeakVoice_bWillBeSpoken' has a wrong offset!");

// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.RequestImpulseGion
// 0x0040 (0x0040 - 0x0000)
struct BP_AJBDamageImpulseBase_C_RequestImpulseGion final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0008(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue1;         // 0x0020(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           CallFunc_RequestGion_AkComponent__LocalOnly_;      // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RequestGion_bFullfilDisplayCond_LocalOnly_; // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBDamageImpulseBase_C_RequestImpulseGion) == 0x000008, "Wrong alignment on BP_AJBDamageImpulseBase_C_RequestImpulseGion");
static_assert(sizeof(BP_AJBDamageImpulseBase_C_RequestImpulseGion) == 0x000040, "Wrong size on BP_AJBDamageImpulseBase_C_RequestImpulseGion");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_RequestImpulseGion, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'BP_AJBDamageImpulseBase_C_RequestImpulseGion::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_RequestImpulseGion, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000008, "Member 'BP_AJBDamageImpulseBase_C_RequestImpulseGion::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_RequestImpulseGion, CallFunc_GetOwner_ReturnValue1) == 0x000018, "Member 'BP_AJBDamageImpulseBase_C_RequestImpulseGion::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_RequestImpulseGion, CallFunc_K2_GetActorLocation_ReturnValue1) == 0x000020, "Member 'BP_AJBDamageImpulseBase_C_RequestImpulseGion::CallFunc_K2_GetActorLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_RequestImpulseGion, CallFunc_RequestGion_AkComponent__LocalOnly_) == 0x000030, "Member 'BP_AJBDamageImpulseBase_C_RequestImpulseGion::CallFunc_RequestGion_AkComponent__LocalOnly_' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_RequestImpulseGion, CallFunc_RequestGion_bFullfilDisplayCond_LocalOnly_) == 0x000038, "Member 'BP_AJBDamageImpulseBase_C_RequestImpulseGion::CallFunc_RequestGion_bFullfilDisplayCond_LocalOnly_' has a wrong offset!");

// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.TryDestroyReadyParticle
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBDamageImpulseBase_C_TryDestroyReadyParticle final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBDamageImpulseBase_C_TryDestroyReadyParticle) == 0x000001, "Wrong alignment on BP_AJBDamageImpulseBase_C_TryDestroyReadyParticle");
static_assert(sizeof(BP_AJBDamageImpulseBase_C_TryDestroyReadyParticle) == 0x000001, "Wrong size on BP_AJBDamageImpulseBase_C_TryDestroyReadyParticle");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_TryDestroyReadyParticle, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_AJBDamageImpulseBase_C_TryDestroyReadyParticle::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.SettingCollisionSize
// 0x0018 (0x0018 - 0x0000)
struct BP_AJBDamageImpulseBase_C_SettingCollisionSize final
{
public:
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x000C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBDamageImpulseBase_C_SettingCollisionSize) == 0x000004, "Wrong alignment on BP_AJBDamageImpulseBase_C_SettingCollisionSize");
static_assert(sizeof(BP_AJBDamageImpulseBase_C_SettingCollisionSize) == 0x000018, "Wrong size on BP_AJBDamageImpulseBase_C_SettingCollisionSize");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_SettingCollisionSize, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000000, "Member 'BP_AJBDamageImpulseBase_C_SettingCollisionSize::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_SettingCollisionSize, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x000004, "Member 'BP_AJBDamageImpulseBase_C_SettingCollisionSize::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_SettingCollisionSize, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x000008, "Member 'BP_AJBDamageImpulseBase_C_SettingCollisionSize::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_SettingCollisionSize, CallFunc_MakeVector_ReturnValue) == 0x00000C, "Member 'BP_AJBDamageImpulseBase_C_SettingCollisionSize::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.GetCollisionComponent
// 0x0018 (0x0018 - 0x0000)
struct BP_AJBDamageImpulseBase_C_GetCollisionComponent final
{
public:
	class UPrimitiveComponent*                    CollisionComponent;                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_Select_Default;                             // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBDamageImpulseBase_C_GetCollisionComponent) == 0x000008, "Wrong alignment on BP_AJBDamageImpulseBase_C_GetCollisionComponent");
static_assert(sizeof(BP_AJBDamageImpulseBase_C_GetCollisionComponent) == 0x000018, "Wrong size on BP_AJBDamageImpulseBase_C_GetCollisionComponent");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_GetCollisionComponent, CollisionComponent) == 0x000000, "Member 'BP_AJBDamageImpulseBase_C_GetCollisionComponent::CollisionComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_GetCollisionComponent, Temp_bool_Variable) == 0x000008, "Member 'BP_AJBDamageImpulseBase_C_GetCollisionComponent::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_GetCollisionComponent, K2Node_Select_Default) == 0x000010, "Member 'BP_AJBDamageImpulseBase_C_GetCollisionComponent::K2Node_Select_Default' has a wrong offset!");

// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.CheckDamage
// 0x0030 (0x0030 - 0x0000)
struct BP_AJBDamageImpulseBase_C_CheckDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DamageCauser;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNoDamage;                                         // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBInterface_C>    K2Node_DynamicCast_AsBI_AJBInterface;              // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckNoDamage_bNoDamage;                  // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBDamageImpulseBase_C_CheckDamage) == 0x000008, "Wrong alignment on BP_AJBDamageImpulseBase_C_CheckDamage");
static_assert(sizeof(BP_AJBDamageImpulseBase_C_CheckDamage) == 0x000030, "Wrong size on BP_AJBDamageImpulseBase_C_CheckDamage");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CheckDamage, DamagedActor) == 0x000000, "Member 'BP_AJBDamageImpulseBase_C_CheckDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CheckDamage, DamageCauser) == 0x000008, "Member 'BP_AJBDamageImpulseBase_C_CheckDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CheckDamage, bNoDamage) == 0x000010, "Member 'BP_AJBDamageImpulseBase_C_CheckDamage::bNoDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CheckDamage, K2Node_DynamicCast_AsBI_AJBInterface) == 0x000018, "Member 'BP_AJBDamageImpulseBase_C_CheckDamage::K2Node_DynamicCast_AsBI_AJBInterface' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CheckDamage, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_AJBDamageImpulseBase_C_CheckDamage::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_CheckDamage, CallFunc_CheckNoDamage_bNoDamage) == 0x000029, "Member 'BP_AJBDamageImpulseBase_C_CheckDamage::CallFunc_CheckNoDamage_bNoDamage' has a wrong offset!");

// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.RequestActiveParticle
// 0x0018 (0x0018 - 0x0000)
struct BP_AJBDamageImpulseBase_C_RequestActiveParticle final
{
public:
	bool                                          CallFunc_IsGameplayTagValid_ReturnValue;           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0004(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          CallFunc_RequestParticleEffectOnLocal_ParticleEffect; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBDamageImpulseBase_C_RequestActiveParticle) == 0x000008, "Wrong alignment on BP_AJBDamageImpulseBase_C_RequestActiveParticle");
static_assert(sizeof(BP_AJBDamageImpulseBase_C_RequestActiveParticle) == 0x000018, "Wrong size on BP_AJBDamageImpulseBase_C_RequestActiveParticle");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_RequestActiveParticle, CallFunc_IsGameplayTagValid_ReturnValue) == 0x000000, "Member 'BP_AJBDamageImpulseBase_C_RequestActiveParticle::CallFunc_IsGameplayTagValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_RequestActiveParticle, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000004, "Member 'BP_AJBDamageImpulseBase_C_RequestActiveParticle::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_RequestActiveParticle, CallFunc_RequestParticleEffectOnLocal_ParticleEffect) == 0x000010, "Member 'BP_AJBDamageImpulseBase_C_RequestActiveParticle::CallFunc_RequestParticleEffectOnLocal_ParticleEffect' has a wrong offset!");

// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.GetPoliticPassiveTagOnDamage
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBDamageImpulseBase_C_GetPoliticPassiveTagOnDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           PassiveTagOnDamage_0;                              // 0x0008(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBDamageImpulseBase_C_GetPoliticPassiveTagOnDamage) == 0x000008, "Wrong alignment on BP_AJBDamageImpulseBase_C_GetPoliticPassiveTagOnDamage");
static_assert(sizeof(BP_AJBDamageImpulseBase_C_GetPoliticPassiveTagOnDamage) == 0x000010, "Wrong size on BP_AJBDamageImpulseBase_C_GetPoliticPassiveTagOnDamage");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_GetPoliticPassiveTagOnDamage, DamagedActor) == 0x000000, "Member 'BP_AJBDamageImpulseBase_C_GetPoliticPassiveTagOnDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_GetPoliticPassiveTagOnDamage, PassiveTagOnDamage_0) == 0x000008, "Member 'BP_AJBDamageImpulseBase_C_GetPoliticPassiveTagOnDamage::PassiveTagOnDamage_0' has a wrong offset!");

// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.ShouldDamageOverlap
// 0x0030 (0x0030 - 0x0000)
struct BP_AJBDamageImpulseBase_C_ShouldDamageOverlap final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DamageCauser;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldOverlap;                                    // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBInterface_C>    K2Node_DynamicCast_AsBI_AJBInterface;              // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IfCheckDamageOverlap_ReturnValue;         // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBDamageImpulseBase_C_ShouldDamageOverlap) == 0x000008, "Wrong alignment on BP_AJBDamageImpulseBase_C_ShouldDamageOverlap");
static_assert(sizeof(BP_AJBDamageImpulseBase_C_ShouldDamageOverlap) == 0x000030, "Wrong size on BP_AJBDamageImpulseBase_C_ShouldDamageOverlap");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ShouldDamageOverlap, DamagedActor) == 0x000000, "Member 'BP_AJBDamageImpulseBase_C_ShouldDamageOverlap::DamagedActor' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ShouldDamageOverlap, DamageCauser) == 0x000008, "Member 'BP_AJBDamageImpulseBase_C_ShouldDamageOverlap::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ShouldDamageOverlap, bShouldOverlap) == 0x000010, "Member 'BP_AJBDamageImpulseBase_C_ShouldDamageOverlap::bShouldOverlap' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ShouldDamageOverlap, K2Node_DynamicCast_AsBI_AJBInterface) == 0x000018, "Member 'BP_AJBDamageImpulseBase_C_ShouldDamageOverlap::K2Node_DynamicCast_AsBI_AJBInterface' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ShouldDamageOverlap, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_AJBDamageImpulseBase_C_ShouldDamageOverlap::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_ShouldDamageOverlap, CallFunc_IfCheckDamageOverlap_ReturnValue) == 0x000029, "Member 'BP_AJBDamageImpulseBase_C_ShouldDamageOverlap::CallFunc_IfCheckDamageOverlap_ReturnValue' has a wrong offset!");

// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.GetCauserOwnerCharacterBP
// 0x0028 (0x0028 - 0x0000)
struct BP_AJBDamageImpulseBase_C_GetCauserOwnerCharacterBP final
{
public:
	class ABP_AJBInGameCharacter_C*               CharacterBP;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               CallFunc_GetAJBCharacterFromActor_CharacterBP;     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBCharacterFromActor_bSuccess;        // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBDamageImpulseBase_C_GetCauserOwnerCharacterBP) == 0x000008, "Wrong alignment on BP_AJBDamageImpulseBase_C_GetCauserOwnerCharacterBP");
static_assert(sizeof(BP_AJBDamageImpulseBase_C_GetCauserOwnerCharacterBP) == 0x000028, "Wrong size on BP_AJBDamageImpulseBase_C_GetCauserOwnerCharacterBP");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_GetCauserOwnerCharacterBP, CharacterBP) == 0x000000, "Member 'BP_AJBDamageImpulseBase_C_GetCauserOwnerCharacterBP::CharacterBP' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_GetCauserOwnerCharacterBP, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBDamageImpulseBase_C_GetCauserOwnerCharacterBP::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_GetCauserOwnerCharacterBP, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_AJBDamageImpulseBase_C_GetCauserOwnerCharacterBP::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_GetCauserOwnerCharacterBP, CallFunc_GetAJBCharacterFromActor_CharacterBP) == 0x000018, "Member 'BP_AJBDamageImpulseBase_C_GetCauserOwnerCharacterBP::CallFunc_GetAJBCharacterFromActor_CharacterBP' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_GetCauserOwnerCharacterBP, CallFunc_GetAJBCharacterFromActor_bSuccess) == 0x000020, "Member 'BP_AJBDamageImpulseBase_C_GetCauserOwnerCharacterBP::CallFunc_GetAJBCharacterFromActor_bSuccess' has a wrong offset!");

// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.GetPassiveSkillTag
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBDamageImpulseBase_C_GetPassiveSkillTag final
{
public:
	struct FGameplayTag                           PassiveSkillTag;                                   // 0x0000(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_GetPoliticPassiveTagOnDamage_PassiveTagOnDamage; // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBDamageImpulseBase_C_GetPassiveSkillTag) == 0x000008, "Wrong alignment on BP_AJBDamageImpulseBase_C_GetPassiveSkillTag");
static_assert(sizeof(BP_AJBDamageImpulseBase_C_GetPassiveSkillTag) == 0x000010, "Wrong size on BP_AJBDamageImpulseBase_C_GetPassiveSkillTag");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_GetPassiveSkillTag, PassiveSkillTag) == 0x000000, "Member 'BP_AJBDamageImpulseBase_C_GetPassiveSkillTag::PassiveSkillTag' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_GetPassiveSkillTag, CallFunc_GetPoliticPassiveTagOnDamage_PassiveTagOnDamage) == 0x000008, "Member 'BP_AJBDamageImpulseBase_C_GetPassiveSkillTag::CallFunc_GetPoliticPassiveTagOnDamage_PassiveTagOnDamage' has a wrong offset!");

// Function BP_AJBDamageImpulseBase.BP_AJBDamageImpulseBase_C.GetDuration
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBDamageImpulseBase_C_GetDuration final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBDamageImpulseBase_C_GetDuration) == 0x000004, "Wrong alignment on BP_AJBDamageImpulseBase_C_GetDuration");
static_assert(sizeof(BP_AJBDamageImpulseBase_C_GetDuration) == 0x000004, "Wrong size on BP_AJBDamageImpulseBase_C_GetDuration");
static_assert(offsetof(BP_AJBDamageImpulseBase_C_GetDuration, Duration) == 0x000000, "Member 'BP_AJBDamageImpulseBase_C_GetDuration::Duration' has a wrong offset!");

}

