#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPF_AJBAIFunctionLibrary

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPF_AJBAIFunctionLibrary.BPF_AJBAIFunctionLibrary_C
// 0x0000 (0x0028 - 0x0028)
class UBPF_AJBAIFunctionLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static bool HasDestinationToGo(class UBlackboardComponent* Blackboard, const struct FBlackboardKeySelector& DestinationKey, const struct FBlackboardKeySelector& ArrivedDestinationKey, class UObject* __WorldContext);
	static class UBP_AJBInGameAIRecognition_C* GetRecognition(class AAIController* AIController, class UObject* __WorldContext);
	static class UBP_AJBInGameAIInputProxy_C* GetInput(class AAIController* AIController, class UObject* __WorldContext);
	static bool PathPointCompleted(class UNavigationPath* NavigationPath, int32 CurrentPathIndex, class UObject* __WorldContext);
	static struct FVector CurrentPathPoint(class UNavigationPath* NavigationPath, int32 CurrentPathIndex, class UObject* __WorldContext);
	static bool IsProbablyPropByBounds(class UPrimitiveComponent* PrimitiveComponent, class UObject* __WorldContext);
	static struct FVector LocationOfOppositeSide(class UPrimitiveComponent* HitComponent, class ABP_AJBInGameAIImaginaryCharacter_C* Character, class UObject* __WorldContext);
	static bool LineBoxIntersection(const struct FVector& Start, const struct FVector& End, const struct FVector& BoxOrigin, const struct FVector& BoxExtent, const struct FRotator& BoxRotation, class UObject* __WorldContext);
	static struct FVector ClosestPointOnBox(const struct FVector& Point, const struct FVector& BoxOrigin, const struct FVector& BoxExtent, const struct FRotator& BoxRotation, class UObject* __WorldContext);
	static struct FVector FarthestPointOnBoxKeepZ(const struct FVector& Point, const struct FVector& BoxOrigin, const struct FVector& BoxExtent, const struct FRotator& BoxRotation, class UObject* __WorldContext);
	static TArray<EObjectTypeQuery> AITraceObjectTypesWithoutPlayers(class UObject* __WorldContext);
	static bool AIIfCharacterPossiblySeeMe(class ABP_AJBInGameAIImaginaryCharacter_C* SelfCharacter, class ABP_AJBInGameAIImaginaryCharacter_C* Others, class UObject* __WorldContext);
	static void RequestAIGion(const struct FGameplayTag& GionEffectType, class AActor* GionOwner, const struct FVector& Location, class UObject* __WorldContext);
	static class UBP_AJBAIBTExtension_C* GetBTExtension(class AAIController* AIController, class UObject* __WorldContext);
	static TArray<EObjectTypeQuery> AITraceObjectTypesWithPlayers(class UObject* __WorldContext);
	static bool IsOutOfNavMesh(class ABP_AJBInGameAIImaginaryCharacter_C* Character, class UObject* __WorldContext);
	static bool IsOutOfNavMeshByLocation(const struct FVector& Location, class UObject* __WorldContext);
	static class ABP_AJBAIHouseInfo_C* FindIndoorHouseInfoRaw(class UBP_AJBInGameAIRecognition_C* Recognition, class ABP_AJBInGameAIImaginaryCharacter_C* ImaginaryCharacter, class UBP_AJBAIInGameCharacterHandle_C* CharacterHandle, class UObject* __WorldContext);
	static class AActor* GetIndoorHouseRaw(class UBP_AJBAIInGameCharacterHandle_C* CharacterHandle, class UObject* __WorldContext);
	static bool BoxContainsPoint(const struct FVector& Point, const struct FVector& BoxOrigin, const struct FVector& BoxExtent, const struct FRotator& BoxRotation, class UObject* __WorldContext);
	static void FindDoorEntranceLocation(class AActor* Door, float OffsetLength, class UObject* __WorldContext, struct FVector* A, struct FVector* B);
	static void FindNearFarDoorEntranceLocation(class AActor* Door, float Offset, const struct FVector& Location, class UObject* __WorldContext, struct FVector* Near, struct FVector* Far);
	static float SumDiffAbsXYZ(const struct FVector& V1, const struct FVector& V2, class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPF_AJBAIFunctionLibrary_C">();
	}
	static class UBPF_AJBAIFunctionLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPF_AJBAIFunctionLibrary_C>();
	}
};
static_assert(alignof(UBPF_AJBAIFunctionLibrary_C) == 0x000008, "Wrong alignment on UBPF_AJBAIFunctionLibrary_C");
static_assert(sizeof(UBPF_AJBAIFunctionLibrary_C) == 0x000028, "Wrong size on UBPF_AJBAIFunctionLibrary_C");

}

