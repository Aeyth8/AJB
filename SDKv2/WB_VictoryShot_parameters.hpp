#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_VictoryShot

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "AJB_structs.hpp"
#include "UMG_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function WB_VictoryShot.WB_VictoryShot_C.ExecuteUbergraph_WB_VictoryShot
// 0x0098 (0x0098 - 0x0000)
struct WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x001C(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable1;                // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateCountDownTimer_bZero;               // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateCountDownTimer_bZero1;              // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdateCountDownTimer_bZero2;              // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable1;                      // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable2;                // 0x005F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable2;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAJBInGameHUD_bIsValid;                 // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameHUD*                          CallFunc_GetAJBInGameHUD_ReturnValue;              // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate1;             // 0x0070(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_GetAJBGameInstance_bSuccess;              // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBGameInstance_C*                  CallFunc_GetAJBGameInstance_AJB_Game_Instance;     // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PlayModeEquals_bResult;                   // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot) == 0x000008, "Wrong alignment on WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot");
static_assert(sizeof(WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot) == 0x000098, "Wrong size on WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot");
static_assert(offsetof(WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot, EntryPoint) == 0x000000, "Member 'WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot, Temp_bool_IsClosed_Variable) == 0x000004, "Member 'WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot, Temp_bool_Has_Been_Initd_Variable) == 0x000018, "Member 'WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot, K2Node_Event_MyGeometry) == 0x00001C, "Member 'WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot, K2Node_Event_InDeltaTime) == 0x000054, "Member 'WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot, Temp_bool_Has_Been_Initd_Variable1) == 0x000058, "Member 'WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot::Temp_bool_Has_Been_Initd_Variable1' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot, K2Node_SwitchName_CmpSuccess) == 0x000059, "Member 'WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot::K2Node_SwitchName_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot, CallFunc_UpdateCountDownTimer_bZero) == 0x00005A, "Member 'WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot::CallFunc_UpdateCountDownTimer_bZero' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot, CallFunc_UpdateCountDownTimer_bZero1) == 0x00005B, "Member 'WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot::CallFunc_UpdateCountDownTimer_bZero1' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot, K2Node_Event_IsDesignTime) == 0x00005C, "Member 'WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot, CallFunc_UpdateCountDownTimer_bZero2) == 0x00005D, "Member 'WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot::CallFunc_UpdateCountDownTimer_bZero2' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot, Temp_bool_IsClosed_Variable1) == 0x00005E, "Member 'WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot::Temp_bool_IsClosed_Variable1' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot, Temp_bool_Has_Been_Initd_Variable2) == 0x00005F, "Member 'WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot::Temp_bool_Has_Been_Initd_Variable2' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot, Temp_bool_IsClosed_Variable2) == 0x000060, "Member 'WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot::Temp_bool_IsClosed_Variable2' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot, CallFunc_GetAJBInGameHUD_bIsValid) == 0x000061, "Member 'WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot::CallFunc_GetAJBInGameHUD_bIsValid' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot, CallFunc_GetAJBInGameHUD_ReturnValue) == 0x000068, "Member 'WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot::CallFunc_GetAJBInGameHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot, K2Node_CreateDelegate_OutputDelegate1) == 0x000070, "Member 'WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot, CallFunc_GetAJBGameInstance_bSuccess) == 0x000080, "Member 'WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot::CallFunc_GetAJBGameInstance_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot, CallFunc_GetAJBGameInstance_AJB_Game_Instance) == 0x000088, "Member 'WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot::CallFunc_GetAJBGameInstance_AJB_Game_Instance' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot, CallFunc_PlayModeEquals_bResult) == 0x000090, "Member 'WB_VictoryShot_C_ExecuteUbergraph_WB_VictoryShot::CallFunc_PlayModeEquals_bResult' has a wrong offset!");

// Function WB_VictoryShot.WB_VictoryShot_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WB_VictoryShot_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_VictoryShot_C_PreConstruct) == 0x000001, "Wrong alignment on WB_VictoryShot_C_PreConstruct");
static_assert(sizeof(WB_VictoryShot_C_PreConstruct) == 0x000001, "Wrong size on WB_VictoryShot_C_PreConstruct");
static_assert(offsetof(WB_VictoryShot_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WB_VictoryShot_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WB_VictoryShot.WB_VictoryShot_C.Tick
// 0x003C (0x003C - 0x0000)
struct WB_VictoryShot_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_VictoryShot_C_Tick) == 0x000004, "Wrong alignment on WB_VictoryShot_C_Tick");
static_assert(sizeof(WB_VictoryShot_C_Tick) == 0x00003C, "Wrong size on WB_VictoryShot_C_Tick");
static_assert(offsetof(WB_VictoryShot_C_Tick, MyGeometry) == 0x000000, "Member 'WB_VictoryShot_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_Tick, InDeltaTime) == 0x000038, "Member 'WB_VictoryShot_C_Tick::InDeltaTime' has a wrong offset!");

// Function WB_VictoryShot.WB_VictoryShot_C.ChangeFlowStep
// 0x0138 (0x0138 - 0x0000)
struct WB_VictoryShot_C_ChangeFlowStep final
{
public:
	class FName                                   NextFlowStep;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAJBPadIconType                               Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable1;                               // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable2;                               // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetUseYButtonAsVictoryShot_ReturnValue;   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EAJBPadIconType                               Temp_byte_Variable3;                               // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetVictoryShotText_ReturnValue;           // 0x0010(0x0018)()
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable1;                               // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EAJBPadIconType                               K2Node_Select1_Default;                            // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EAJBPadIconType                               CallFunc_ConvertAJBInGamePadIconKeyAction_ReturnValue; // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetAJBPadIconString_Out;                  // 0x0030(0x0018)()
	class FText                                   CallFunc_GetAJBPadIconString_Out1;                 // 0x0048(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0060(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData1;             // 0x00A0(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00E0(0x0010)(ZeroConstructor, ReferenceParm)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array1;                           // 0x00F0(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0100(0x0018)()
	class FText                                   CallFunc_Format_ReturnValue1;                      // 0x0118(0x0018)()
	bool                                          K2Node_SwitchName1_CmpSuccess;                     // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_VictoryShot_C_ChangeFlowStep) == 0x000008, "Wrong alignment on WB_VictoryShot_C_ChangeFlowStep");
static_assert(sizeof(WB_VictoryShot_C_ChangeFlowStep) == 0x000138, "Wrong size on WB_VictoryShot_C_ChangeFlowStep");
static_assert(offsetof(WB_VictoryShot_C_ChangeFlowStep, NextFlowStep) == 0x000000, "Member 'WB_VictoryShot_C_ChangeFlowStep::NextFlowStep' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ChangeFlowStep, Temp_byte_Variable) == 0x000008, "Member 'WB_VictoryShot_C_ChangeFlowStep::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ChangeFlowStep, Temp_bool_Variable) == 0x000009, "Member 'WB_VictoryShot_C_ChangeFlowStep::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ChangeFlowStep, Temp_byte_Variable1) == 0x00000A, "Member 'WB_VictoryShot_C_ChangeFlowStep::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ChangeFlowStep, Temp_byte_Variable2) == 0x00000B, "Member 'WB_VictoryShot_C_ChangeFlowStep::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ChangeFlowStep, CallFunc_GetUseYButtonAsVictoryShot_ReturnValue) == 0x00000C, "Member 'WB_VictoryShot_C_ChangeFlowStep::CallFunc_GetUseYButtonAsVictoryShot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ChangeFlowStep, Temp_byte_Variable3) == 0x00000D, "Member 'WB_VictoryShot_C_ChangeFlowStep::Temp_byte_Variable3' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ChangeFlowStep, CallFunc_GetVictoryShotText_ReturnValue) == 0x000010, "Member 'WB_VictoryShot_C_ChangeFlowStep::CallFunc_GetVictoryShotText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ChangeFlowStep, K2Node_Select_Default) == 0x000028, "Member 'WB_VictoryShot_C_ChangeFlowStep::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ChangeFlowStep, Temp_bool_Variable1) == 0x000029, "Member 'WB_VictoryShot_C_ChangeFlowStep::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ChangeFlowStep, K2Node_Select1_Default) == 0x00002A, "Member 'WB_VictoryShot_C_ChangeFlowStep::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ChangeFlowStep, K2Node_SwitchName_CmpSuccess) == 0x00002B, "Member 'WB_VictoryShot_C_ChangeFlowStep::K2Node_SwitchName_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ChangeFlowStep, CallFunc_ConvertAJBInGamePadIconKeyAction_ReturnValue) == 0x00002C, "Member 'WB_VictoryShot_C_ChangeFlowStep::CallFunc_ConvertAJBInGamePadIconKeyAction_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ChangeFlowStep, CallFunc_GetAJBPadIconString_Out) == 0x000030, "Member 'WB_VictoryShot_C_ChangeFlowStep::CallFunc_GetAJBPadIconString_Out' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ChangeFlowStep, CallFunc_GetAJBPadIconString_Out1) == 0x000048, "Member 'WB_VictoryShot_C_ChangeFlowStep::CallFunc_GetAJBPadIconString_Out1' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ChangeFlowStep, K2Node_MakeStruct_FormatArgumentData) == 0x000060, "Member 'WB_VictoryShot_C_ChangeFlowStep::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ChangeFlowStep, K2Node_MakeStruct_FormatArgumentData1) == 0x0000A0, "Member 'WB_VictoryShot_C_ChangeFlowStep::K2Node_MakeStruct_FormatArgumentData1' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ChangeFlowStep, K2Node_MakeArray_Array) == 0x0000E0, "Member 'WB_VictoryShot_C_ChangeFlowStep::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ChangeFlowStep, K2Node_MakeArray_Array1) == 0x0000F0, "Member 'WB_VictoryShot_C_ChangeFlowStep::K2Node_MakeArray_Array1' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ChangeFlowStep, CallFunc_Format_ReturnValue) == 0x000100, "Member 'WB_VictoryShot_C_ChangeFlowStep::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ChangeFlowStep, CallFunc_Format_ReturnValue1) == 0x000118, "Member 'WB_VictoryShot_C_ChangeFlowStep::CallFunc_Format_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_ChangeFlowStep, K2Node_SwitchName1_CmpSuccess) == 0x000130, "Member 'WB_VictoryShot_C_ChangeFlowStep::K2Node_SwitchName1_CmpSuccess' has a wrong offset!");

// Function WB_VictoryShot.WB_VictoryShot_C.UpdateCountDownTimer
// 0x0020 (0x0020 - 0x0000)
struct WB_VictoryShot_C_UpdateCountDownTimer final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxTime;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bZero;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAJBInGameHUD_bIsValid;                 // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameHUD*                          CallFunc_GetAJBInGameHUD_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_VictoryShot_C_UpdateCountDownTimer) == 0x000008, "Wrong alignment on WB_VictoryShot_C_UpdateCountDownTimer");
static_assert(sizeof(WB_VictoryShot_C_UpdateCountDownTimer) == 0x000020, "Wrong size on WB_VictoryShot_C_UpdateCountDownTimer");
static_assert(offsetof(WB_VictoryShot_C_UpdateCountDownTimer, Delta) == 0x000000, "Member 'WB_VictoryShot_C_UpdateCountDownTimer::Delta' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_UpdateCountDownTimer, MaxTime) == 0x000004, "Member 'WB_VictoryShot_C_UpdateCountDownTimer::MaxTime' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_UpdateCountDownTimer, bZero) == 0x000008, "Member 'WB_VictoryShot_C_UpdateCountDownTimer::bZero' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_UpdateCountDownTimer, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000009, "Member 'WB_VictoryShot_C_UpdateCountDownTimer::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_UpdateCountDownTimer, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00000C, "Member 'WB_VictoryShot_C_UpdateCountDownTimer::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_UpdateCountDownTimer, CallFunc_FMax_ReturnValue) == 0x000010, "Member 'WB_VictoryShot_C_UpdateCountDownTimer::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_UpdateCountDownTimer, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000014, "Member 'WB_VictoryShot_C_UpdateCountDownTimer::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_UpdateCountDownTimer, CallFunc_GetAJBInGameHUD_bIsValid) == 0x000015, "Member 'WB_VictoryShot_C_UpdateCountDownTimer::CallFunc_GetAJBInGameHUD_bIsValid' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_UpdateCountDownTimer, CallFunc_GetAJBInGameHUD_ReturnValue) == 0x000018, "Member 'WB_VictoryShot_C_UpdateCountDownTimer::CallFunc_GetAJBInGameHUD_ReturnValue' has a wrong offset!");

// Function WB_VictoryShot.WB_VictoryShot_C.SetUploadedResult
// 0x0001 (0x0001 - 0x0000)
struct WB_VictoryShot_C_SetUploadedResult final
{
public:
	bool                                          bUploadSuccess_0;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_VictoryShot_C_SetUploadedResult) == 0x000001, "Wrong alignment on WB_VictoryShot_C_SetUploadedResult");
static_assert(sizeof(WB_VictoryShot_C_SetUploadedResult) == 0x000001, "Wrong size on WB_VictoryShot_C_SetUploadedResult");
static_assert(offsetof(WB_VictoryShot_C_SetUploadedResult, bUploadSuccess_0) == 0x000000, "Member 'WB_VictoryShot_C_SetUploadedResult::bUploadSuccess_0' has a wrong offset!");

// Function WB_VictoryShot.WB_VictoryShot_C.GetVictoryShotText
// 0x0078 (0x0078 - 0x0000)
struct WB_VictoryShot_C_GetVictoryShotText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x0018(0x0018)()
	class FText                                   CallFunc_MakeLiteralText_ReturnValue1;             // 0x0030(0x0018)()
	bool                                          CallFunc_GetAJBGameInstance_bSuccess;              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBGameInstance_C*                  CallFunc_GetAJBGameInstance_AJB_Game_Instance;     // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAJBOfflineMode_ReturnValue;             // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsGuestPlaying_ReturnValue;               // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_MakeLiteralText_ReturnValue2;             // 0x0060(0x0018)()
};
static_assert(alignof(WB_VictoryShot_C_GetVictoryShotText) == 0x000008, "Wrong alignment on WB_VictoryShot_C_GetVictoryShotText");
static_assert(sizeof(WB_VictoryShot_C_GetVictoryShotText) == 0x000078, "Wrong size on WB_VictoryShot_C_GetVictoryShotText");
static_assert(offsetof(WB_VictoryShot_C_GetVictoryShotText, ReturnValue) == 0x000000, "Member 'WB_VictoryShot_C_GetVictoryShotText::ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_GetVictoryShotText, CallFunc_MakeLiteralText_ReturnValue) == 0x000018, "Member 'WB_VictoryShot_C_GetVictoryShotText::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_GetVictoryShotText, CallFunc_MakeLiteralText_ReturnValue1) == 0x000030, "Member 'WB_VictoryShot_C_GetVictoryShotText::CallFunc_MakeLiteralText_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_GetVictoryShotText, CallFunc_GetAJBGameInstance_bSuccess) == 0x000048, "Member 'WB_VictoryShot_C_GetVictoryShotText::CallFunc_GetAJBGameInstance_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_GetVictoryShotText, CallFunc_GetAJBGameInstance_AJB_Game_Instance) == 0x000050, "Member 'WB_VictoryShot_C_GetVictoryShotText::CallFunc_GetAJBGameInstance_AJB_Game_Instance' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_GetVictoryShotText, CallFunc_IsAJBOfflineMode_ReturnValue) == 0x000058, "Member 'WB_VictoryShot_C_GetVictoryShotText::CallFunc_IsAJBOfflineMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_GetVictoryShotText, CallFunc_IsGuestPlaying_ReturnValue) == 0x000059, "Member 'WB_VictoryShot_C_GetVictoryShotText::CallFunc_IsGuestPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_GetVictoryShotText, CallFunc_MakeLiteralText_ReturnValue2) == 0x000060, "Member 'WB_VictoryShot_C_GetVictoryShotText::CallFunc_MakeLiteralText_ReturnValue2' has a wrong offset!");

// Function WB_VictoryShot.WB_VictoryShot_C.OnInputTurnRate
// 0x0008 (0x0008 - 0x0000)
struct WB_VictoryShot_C_OnInputTurnRate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_VictoryShot_C_OnInputTurnRate) == 0x000004, "Wrong alignment on WB_VictoryShot_C_OnInputTurnRate");
static_assert(sizeof(WB_VictoryShot_C_OnInputTurnRate) == 0x000008, "Wrong size on WB_VictoryShot_C_OnInputTurnRate");
static_assert(offsetof(WB_VictoryShot_C_OnInputTurnRate, Value) == 0x000000, "Member 'WB_VictoryShot_C_OnInputTurnRate::Value' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_OnInputTurnRate, ReturnValue) == 0x000004, "Member 'WB_VictoryShot_C_OnInputTurnRate::ReturnValue' has a wrong offset!");

// Function WB_VictoryShot.WB_VictoryShot_C.OnInputReleasedUp
// 0x0001 (0x0001 - 0x0000)
struct WB_VictoryShot_C_OnInputReleasedUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_VictoryShot_C_OnInputReleasedUp) == 0x000001, "Wrong alignment on WB_VictoryShot_C_OnInputReleasedUp");
static_assert(sizeof(WB_VictoryShot_C_OnInputReleasedUp) == 0x000001, "Wrong size on WB_VictoryShot_C_OnInputReleasedUp");
static_assert(offsetof(WB_VictoryShot_C_OnInputReleasedUp, ReturnValue) == 0x000000, "Member 'WB_VictoryShot_C_OnInputReleasedUp::ReturnValue' has a wrong offset!");

// Function WB_VictoryShot.WB_VictoryShot_C.OnInputReleasedTouch
// 0x0001 (0x0001 - 0x0000)
struct WB_VictoryShot_C_OnInputReleasedTouch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_VictoryShot_C_OnInputReleasedTouch) == 0x000001, "Wrong alignment on WB_VictoryShot_C_OnInputReleasedTouch");
static_assert(sizeof(WB_VictoryShot_C_OnInputReleasedTouch) == 0x000001, "Wrong size on WB_VictoryShot_C_OnInputReleasedTouch");
static_assert(offsetof(WB_VictoryShot_C_OnInputReleasedTouch, ReturnValue) == 0x000000, "Member 'WB_VictoryShot_C_OnInputReleasedTouch::ReturnValue' has a wrong offset!");

// Function WB_VictoryShot.WB_VictoryShot_C.OnInputReleasedRight
// 0x0001 (0x0001 - 0x0000)
struct WB_VictoryShot_C_OnInputReleasedRight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_VictoryShot_C_OnInputReleasedRight) == 0x000001, "Wrong alignment on WB_VictoryShot_C_OnInputReleasedRight");
static_assert(sizeof(WB_VictoryShot_C_OnInputReleasedRight) == 0x000001, "Wrong size on WB_VictoryShot_C_OnInputReleasedRight");
static_assert(offsetof(WB_VictoryShot_C_OnInputReleasedRight, ReturnValue) == 0x000000, "Member 'WB_VictoryShot_C_OnInputReleasedRight::ReturnValue' has a wrong offset!");

// Function WB_VictoryShot.WB_VictoryShot_C.OnInputReleasedR2
// 0x0001 (0x0001 - 0x0000)
struct WB_VictoryShot_C_OnInputReleasedR2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_VictoryShot_C_OnInputReleasedR2) == 0x000001, "Wrong alignment on WB_VictoryShot_C_OnInputReleasedR2");
static_assert(sizeof(WB_VictoryShot_C_OnInputReleasedR2) == 0x000001, "Wrong size on WB_VictoryShot_C_OnInputReleasedR2");
static_assert(offsetof(WB_VictoryShot_C_OnInputReleasedR2, ReturnValue) == 0x000000, "Member 'WB_VictoryShot_C_OnInputReleasedR2::ReturnValue' has a wrong offset!");

// Function WB_VictoryShot.WB_VictoryShot_C.OnInputReleasedR1
// 0x0001 (0x0001 - 0x0000)
struct WB_VictoryShot_C_OnInputReleasedR1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_VictoryShot_C_OnInputReleasedR1) == 0x000001, "Wrong alignment on WB_VictoryShot_C_OnInputReleasedR1");
static_assert(sizeof(WB_VictoryShot_C_OnInputReleasedR1) == 0x000001, "Wrong size on WB_VictoryShot_C_OnInputReleasedR1");
static_assert(offsetof(WB_VictoryShot_C_OnInputReleasedR1, ReturnValue) == 0x000000, "Member 'WB_VictoryShot_C_OnInputReleasedR1::ReturnValue' has a wrong offset!");

// Function WB_VictoryShot.WB_VictoryShot_C.OnInputReleasedLeft
// 0x0001 (0x0001 - 0x0000)
struct WB_VictoryShot_C_OnInputReleasedLeft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_VictoryShot_C_OnInputReleasedLeft) == 0x000001, "Wrong alignment on WB_VictoryShot_C_OnInputReleasedLeft");
static_assert(sizeof(WB_VictoryShot_C_OnInputReleasedLeft) == 0x000001, "Wrong size on WB_VictoryShot_C_OnInputReleasedLeft");
static_assert(offsetof(WB_VictoryShot_C_OnInputReleasedLeft, ReturnValue) == 0x000000, "Member 'WB_VictoryShot_C_OnInputReleasedLeft::ReturnValue' has a wrong offset!");

// Function WB_VictoryShot.WB_VictoryShot_C.OnInputReleasedL3
// 0x0001 (0x0001 - 0x0000)
struct WB_VictoryShot_C_OnInputReleasedL3 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_VictoryShot_C_OnInputReleasedL3) == 0x000001, "Wrong alignment on WB_VictoryShot_C_OnInputReleasedL3");
static_assert(sizeof(WB_VictoryShot_C_OnInputReleasedL3) == 0x000001, "Wrong size on WB_VictoryShot_C_OnInputReleasedL3");
static_assert(offsetof(WB_VictoryShot_C_OnInputReleasedL3, ReturnValue) == 0x000000, "Member 'WB_VictoryShot_C_OnInputReleasedL3::ReturnValue' has a wrong offset!");

// Function WB_VictoryShot.WB_VictoryShot_C.OnInputReleasedL2
// 0x0001 (0x0001 - 0x0000)
struct WB_VictoryShot_C_OnInputReleasedL2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_VictoryShot_C_OnInputReleasedL2) == 0x000001, "Wrong alignment on WB_VictoryShot_C_OnInputReleasedL2");
static_assert(sizeof(WB_VictoryShot_C_OnInputReleasedL2) == 0x000001, "Wrong size on WB_VictoryShot_C_OnInputReleasedL2");
static_assert(offsetof(WB_VictoryShot_C_OnInputReleasedL2, ReturnValue) == 0x000000, "Member 'WB_VictoryShot_C_OnInputReleasedL2::ReturnValue' has a wrong offset!");

// Function WB_VictoryShot.WB_VictoryShot_C.OnInputReleasedL1
// 0x0001 (0x0001 - 0x0000)
struct WB_VictoryShot_C_OnInputReleasedL1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_VictoryShot_C_OnInputReleasedL1) == 0x000001, "Wrong alignment on WB_VictoryShot_C_OnInputReleasedL1");
static_assert(sizeof(WB_VictoryShot_C_OnInputReleasedL1) == 0x000001, "Wrong size on WB_VictoryShot_C_OnInputReleasedL1");
static_assert(offsetof(WB_VictoryShot_C_OnInputReleasedL1, ReturnValue) == 0x000000, "Member 'WB_VictoryShot_C_OnInputReleasedL1::ReturnValue' has a wrong offset!");

// Function WB_VictoryShot.WB_VictoryShot_C.OnInputReleasedDown
// 0x0001 (0x0001 - 0x0000)
struct WB_VictoryShot_C_OnInputReleasedDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_VictoryShot_C_OnInputReleasedDown) == 0x000001, "Wrong alignment on WB_VictoryShot_C_OnInputReleasedDown");
static_assert(sizeof(WB_VictoryShot_C_OnInputReleasedDown) == 0x000001, "Wrong size on WB_VictoryShot_C_OnInputReleasedDown");
static_assert(offsetof(WB_VictoryShot_C_OnInputReleasedDown, ReturnValue) == 0x000000, "Member 'WB_VictoryShot_C_OnInputReleasedDown::ReturnValue' has a wrong offset!");

// Function WB_VictoryShot.WB_VictoryShot_C.OnInputReleasedDecide
// 0x0001 (0x0001 - 0x0000)
struct WB_VictoryShot_C_OnInputReleasedDecide final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_VictoryShot_C_OnInputReleasedDecide) == 0x000001, "Wrong alignment on WB_VictoryShot_C_OnInputReleasedDecide");
static_assert(sizeof(WB_VictoryShot_C_OnInputReleasedDecide) == 0x000001, "Wrong size on WB_VictoryShot_C_OnInputReleasedDecide");
static_assert(offsetof(WB_VictoryShot_C_OnInputReleasedDecide, ReturnValue) == 0x000000, "Member 'WB_VictoryShot_C_OnInputReleasedDecide::ReturnValue' has a wrong offset!");

// Function WB_VictoryShot.WB_VictoryShot_C.OnInputReleasedCancel
// 0x0001 (0x0001 - 0x0000)
struct WB_VictoryShot_C_OnInputReleasedCancel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_VictoryShot_C_OnInputReleasedCancel) == 0x000001, "Wrong alignment on WB_VictoryShot_C_OnInputReleasedCancel");
static_assert(sizeof(WB_VictoryShot_C_OnInputReleasedCancel) == 0x000001, "Wrong size on WB_VictoryShot_C_OnInputReleasedCancel");
static_assert(offsetof(WB_VictoryShot_C_OnInputReleasedCancel, ReturnValue) == 0x000000, "Member 'WB_VictoryShot_C_OnInputReleasedCancel::ReturnValue' has a wrong offset!");

// Function WB_VictoryShot.WB_VictoryShot_C.OnInputPressedUp
// 0x0001 (0x0001 - 0x0000)
struct WB_VictoryShot_C_OnInputPressedUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_VictoryShot_C_OnInputPressedUp) == 0x000001, "Wrong alignment on WB_VictoryShot_C_OnInputPressedUp");
static_assert(sizeof(WB_VictoryShot_C_OnInputPressedUp) == 0x000001, "Wrong size on WB_VictoryShot_C_OnInputPressedUp");
static_assert(offsetof(WB_VictoryShot_C_OnInputPressedUp, ReturnValue) == 0x000000, "Member 'WB_VictoryShot_C_OnInputPressedUp::ReturnValue' has a wrong offset!");

// Function WB_VictoryShot.WB_VictoryShot_C.OnInputPressedTouch
// 0x000C (0x000C - 0x0000)
struct WB_VictoryShot_C_OnInputPressedTouch final
{
public:
	float                                         LocationX;                                         // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LocationY;                                         // 0x0004(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_VictoryShot_C_OnInputPressedTouch) == 0x000004, "Wrong alignment on WB_VictoryShot_C_OnInputPressedTouch");
static_assert(sizeof(WB_VictoryShot_C_OnInputPressedTouch) == 0x00000C, "Wrong size on WB_VictoryShot_C_OnInputPressedTouch");
static_assert(offsetof(WB_VictoryShot_C_OnInputPressedTouch, LocationX) == 0x000000, "Member 'WB_VictoryShot_C_OnInputPressedTouch::LocationX' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_OnInputPressedTouch, LocationY) == 0x000004, "Member 'WB_VictoryShot_C_OnInputPressedTouch::LocationY' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_OnInputPressedTouch, ReturnValue) == 0x000008, "Member 'WB_VictoryShot_C_OnInputPressedTouch::ReturnValue' has a wrong offset!");

// Function WB_VictoryShot.WB_VictoryShot_C.OnInputPressedRight
// 0x0001 (0x0001 - 0x0000)
struct WB_VictoryShot_C_OnInputPressedRight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_VictoryShot_C_OnInputPressedRight) == 0x000001, "Wrong alignment on WB_VictoryShot_C_OnInputPressedRight");
static_assert(sizeof(WB_VictoryShot_C_OnInputPressedRight) == 0x000001, "Wrong size on WB_VictoryShot_C_OnInputPressedRight");
static_assert(offsetof(WB_VictoryShot_C_OnInputPressedRight, ReturnValue) == 0x000000, "Member 'WB_VictoryShot_C_OnInputPressedRight::ReturnValue' has a wrong offset!");

// Function WB_VictoryShot.WB_VictoryShot_C.OnInputPressedR2
// 0x0001 (0x0001 - 0x0000)
struct WB_VictoryShot_C_OnInputPressedR2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_VictoryShot_C_OnInputPressedR2) == 0x000001, "Wrong alignment on WB_VictoryShot_C_OnInputPressedR2");
static_assert(sizeof(WB_VictoryShot_C_OnInputPressedR2) == 0x000001, "Wrong size on WB_VictoryShot_C_OnInputPressedR2");
static_assert(offsetof(WB_VictoryShot_C_OnInputPressedR2, ReturnValue) == 0x000000, "Member 'WB_VictoryShot_C_OnInputPressedR2::ReturnValue' has a wrong offset!");

// Function WB_VictoryShot.WB_VictoryShot_C.OnInputPressedR1
// 0x0001 (0x0001 - 0x0000)
struct WB_VictoryShot_C_OnInputPressedR1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_VictoryShot_C_OnInputPressedR1) == 0x000001, "Wrong alignment on WB_VictoryShot_C_OnInputPressedR1");
static_assert(sizeof(WB_VictoryShot_C_OnInputPressedR1) == 0x000001, "Wrong size on WB_VictoryShot_C_OnInputPressedR1");
static_assert(offsetof(WB_VictoryShot_C_OnInputPressedR1, ReturnValue) == 0x000000, "Member 'WB_VictoryShot_C_OnInputPressedR1::ReturnValue' has a wrong offset!");

// Function WB_VictoryShot.WB_VictoryShot_C.OnInputPressedLeft
// 0x0001 (0x0001 - 0x0000)
struct WB_VictoryShot_C_OnInputPressedLeft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_VictoryShot_C_OnInputPressedLeft) == 0x000001, "Wrong alignment on WB_VictoryShot_C_OnInputPressedLeft");
static_assert(sizeof(WB_VictoryShot_C_OnInputPressedLeft) == 0x000001, "Wrong size on WB_VictoryShot_C_OnInputPressedLeft");
static_assert(offsetof(WB_VictoryShot_C_OnInputPressedLeft, ReturnValue) == 0x000000, "Member 'WB_VictoryShot_C_OnInputPressedLeft::ReturnValue' has a wrong offset!");

// Function WB_VictoryShot.WB_VictoryShot_C.OnInputPressedL3
// 0x0001 (0x0001 - 0x0000)
struct WB_VictoryShot_C_OnInputPressedL3 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_VictoryShot_C_OnInputPressedL3) == 0x000001, "Wrong alignment on WB_VictoryShot_C_OnInputPressedL3");
static_assert(sizeof(WB_VictoryShot_C_OnInputPressedL3) == 0x000001, "Wrong size on WB_VictoryShot_C_OnInputPressedL3");
static_assert(offsetof(WB_VictoryShot_C_OnInputPressedL3, ReturnValue) == 0x000000, "Member 'WB_VictoryShot_C_OnInputPressedL3::ReturnValue' has a wrong offset!");

// Function WB_VictoryShot.WB_VictoryShot_C.OnInputPressedL2
// 0x0001 (0x0001 - 0x0000)
struct WB_VictoryShot_C_OnInputPressedL2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_VictoryShot_C_OnInputPressedL2) == 0x000001, "Wrong alignment on WB_VictoryShot_C_OnInputPressedL2");
static_assert(sizeof(WB_VictoryShot_C_OnInputPressedL2) == 0x000001, "Wrong size on WB_VictoryShot_C_OnInputPressedL2");
static_assert(offsetof(WB_VictoryShot_C_OnInputPressedL2, ReturnValue) == 0x000000, "Member 'WB_VictoryShot_C_OnInputPressedL2::ReturnValue' has a wrong offset!");

// Function WB_VictoryShot.WB_VictoryShot_C.OnInputPressedL1
// 0x0001 (0x0001 - 0x0000)
struct WB_VictoryShot_C_OnInputPressedL1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_VictoryShot_C_OnInputPressedL1) == 0x000001, "Wrong alignment on WB_VictoryShot_C_OnInputPressedL1");
static_assert(sizeof(WB_VictoryShot_C_OnInputPressedL1) == 0x000001, "Wrong size on WB_VictoryShot_C_OnInputPressedL1");
static_assert(offsetof(WB_VictoryShot_C_OnInputPressedL1, ReturnValue) == 0x000000, "Member 'WB_VictoryShot_C_OnInputPressedL1::ReturnValue' has a wrong offset!");

// Function WB_VictoryShot.WB_VictoryShot_C.OnInputPressedDown
// 0x0001 (0x0001 - 0x0000)
struct WB_VictoryShot_C_OnInputPressedDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_VictoryShot_C_OnInputPressedDown) == 0x000001, "Wrong alignment on WB_VictoryShot_C_OnInputPressedDown");
static_assert(sizeof(WB_VictoryShot_C_OnInputPressedDown) == 0x000001, "Wrong size on WB_VictoryShot_C_OnInputPressedDown");
static_assert(offsetof(WB_VictoryShot_C_OnInputPressedDown, ReturnValue) == 0x000000, "Member 'WB_VictoryShot_C_OnInputPressedDown::ReturnValue' has a wrong offset!");

// Function WB_VictoryShot.WB_VictoryShot_C.OnInputPressedDecide
// 0x0001 (0x0001 - 0x0000)
struct WB_VictoryShot_C_OnInputPressedDecide final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_VictoryShot_C_OnInputPressedDecide) == 0x000001, "Wrong alignment on WB_VictoryShot_C_OnInputPressedDecide");
static_assert(sizeof(WB_VictoryShot_C_OnInputPressedDecide) == 0x000001, "Wrong size on WB_VictoryShot_C_OnInputPressedDecide");
static_assert(offsetof(WB_VictoryShot_C_OnInputPressedDecide, ReturnValue) == 0x000000, "Member 'WB_VictoryShot_C_OnInputPressedDecide::ReturnValue' has a wrong offset!");

// Function WB_VictoryShot.WB_VictoryShot_C.OnInputPressedCancel
// 0x0001 (0x0001 - 0x0000)
struct WB_VictoryShot_C_OnInputPressedCancel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_VictoryShot_C_OnInputPressedCancel) == 0x000001, "Wrong alignment on WB_VictoryShot_C_OnInputPressedCancel");
static_assert(sizeof(WB_VictoryShot_C_OnInputPressedCancel) == 0x000001, "Wrong size on WB_VictoryShot_C_OnInputPressedCancel");
static_assert(offsetof(WB_VictoryShot_C_OnInputPressedCancel, ReturnValue) == 0x000000, "Member 'WB_VictoryShot_C_OnInputPressedCancel::ReturnValue' has a wrong offset!");

// Function WB_VictoryShot.WB_VictoryShot_C.OnInputMoveRight
// 0x0008 (0x0008 - 0x0000)
struct WB_VictoryShot_C_OnInputMoveRight final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_VictoryShot_C_OnInputMoveRight) == 0x000004, "Wrong alignment on WB_VictoryShot_C_OnInputMoveRight");
static_assert(sizeof(WB_VictoryShot_C_OnInputMoveRight) == 0x000008, "Wrong size on WB_VictoryShot_C_OnInputMoveRight");
static_assert(offsetof(WB_VictoryShot_C_OnInputMoveRight, Value) == 0x000000, "Member 'WB_VictoryShot_C_OnInputMoveRight::Value' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_OnInputMoveRight, ReturnValue) == 0x000004, "Member 'WB_VictoryShot_C_OnInputMoveRight::ReturnValue' has a wrong offset!");

// Function WB_VictoryShot.WB_VictoryShot_C.OnInputMoveForward
// 0x0008 (0x0008 - 0x0000)
struct WB_VictoryShot_C_OnInputMoveForward final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_VictoryShot_C_OnInputMoveForward) == 0x000004, "Wrong alignment on WB_VictoryShot_C_OnInputMoveForward");
static_assert(sizeof(WB_VictoryShot_C_OnInputMoveForward) == 0x000008, "Wrong size on WB_VictoryShot_C_OnInputMoveForward");
static_assert(offsetof(WB_VictoryShot_C_OnInputMoveForward, Value) == 0x000000, "Member 'WB_VictoryShot_C_OnInputMoveForward::Value' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_OnInputMoveForward, ReturnValue) == 0x000004, "Member 'WB_VictoryShot_C_OnInputMoveForward::ReturnValue' has a wrong offset!");

// Function WB_VictoryShot.WB_VictoryShot_C.OnInputLookupRate
// 0x0008 (0x0008 - 0x0000)
struct WB_VictoryShot_C_OnInputLookupRate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_VictoryShot_C_OnInputLookupRate) == 0x000004, "Wrong alignment on WB_VictoryShot_C_OnInputLookupRate");
static_assert(sizeof(WB_VictoryShot_C_OnInputLookupRate) == 0x000008, "Wrong size on WB_VictoryShot_C_OnInputLookupRate");
static_assert(offsetof(WB_VictoryShot_C_OnInputLookupRate, Value) == 0x000000, "Member 'WB_VictoryShot_C_OnInputLookupRate::Value' has a wrong offset!");
static_assert(offsetof(WB_VictoryShot_C_OnInputLookupRate, ReturnValue) == 0x000004, "Member 'WB_VictoryShot_C_OnInputLookupRate::ReturnValue' has a wrong offset!");

// Function WB_VictoryShot.WB_VictoryShot_C.IsModeless
// 0x0001 (0x0001 - 0x0000)
struct WB_VictoryShot_C_IsModeless final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_VictoryShot_C_IsModeless) == 0x000001, "Wrong alignment on WB_VictoryShot_C_IsModeless");
static_assert(sizeof(WB_VictoryShot_C_IsModeless) == 0x000001, "Wrong size on WB_VictoryShot_C_IsModeless");
static_assert(offsetof(WB_VictoryShot_C_IsModeless, ReturnValue) == 0x000000, "Member 'WB_VictoryShot_C_IsModeless::ReturnValue' has a wrong offset!");

}

