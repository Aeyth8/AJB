#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBMemoryLeakBuff

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BP_AJBPassiveSkillBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBMemoryLeakBuff.BP_AJBMemoryLeakBuff_C
// 0x0058 (0x0248 - 0x01F0)
class UBP_AJBMemoryLeakBuff_C final : public UBP_AJBPassiveSkillBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBMemoryLeakBuff_C;             // 0x01F0(0x0008)(Transient, DuplicateTransient)
	int32                                         PhaseNum;                                          // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MoveSpeedIncrement___;                             // 0x01FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AttackIncrement___;                                // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MPMaxIncrement___;                                 // 0x0204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 CurrentPhaseList;                                  // 0x0208(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FGameplayTag>                   StatusBuffTag;                                     // 0x0218(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          bDebugPrintPhase;                                  // 0x0228(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugPrintValueOnApply;                           // 0x0229(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22A[0x6];                                      // 0x022A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           BuffSETag;                                         // 0x0230(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GrowupTag_Attackup;                                // 0x0238(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GrowupTag_MaxMP;                                   // 0x0240(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBMemoryLeakBuff(int32 EntryPoint);
	void MC_ApplyBuff(const struct FGameplayTag& ApplyBuffTag, int32 NextPhase);
	void RequestBuff();
	void LotteryBuff(struct FGameplayTag* LotteryTag, int32* NextPhase);
	void CheckBuffLimit(bool* bLimit);
	void DebugTick();
	void ApplyBuff(const struct FGameplayTag& ApplyBuffTag, int32 NextPhase);
	void GetTagIndex(const struct FGameplayTag& Tag, int32* Index_0);
	void ActiveContinuedParticle(bool bActiveForOwner, bool bActiveForMovableStand);
	void CalcMoveSpeed(int32 Phase, float* Value);
	void CalcAttack(int32 Phase, float* Value);
	void CalcMPMax(int32 Phase, float* Value);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void OnActionActivate(bool bTriggeredByStand);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBMemoryLeakBuff_C">();
	}
	static class UBP_AJBMemoryLeakBuff_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBMemoryLeakBuff_C>();
	}
};
static_assert(alignof(UBP_AJBMemoryLeakBuff_C) == 0x000008, "Wrong alignment on UBP_AJBMemoryLeakBuff_C");
static_assert(sizeof(UBP_AJBMemoryLeakBuff_C) == 0x000248, "Wrong size on UBP_AJBMemoryLeakBuff_C");
static_assert(offsetof(UBP_AJBMemoryLeakBuff_C, UberGraphFrame_BP_AJBMemoryLeakBuff_C) == 0x0001F0, "Member 'UBP_AJBMemoryLeakBuff_C::UberGraphFrame_BP_AJBMemoryLeakBuff_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBMemoryLeakBuff_C, PhaseNum) == 0x0001F8, "Member 'UBP_AJBMemoryLeakBuff_C::PhaseNum' has a wrong offset!");
static_assert(offsetof(UBP_AJBMemoryLeakBuff_C, MoveSpeedIncrement___) == 0x0001FC, "Member 'UBP_AJBMemoryLeakBuff_C::MoveSpeedIncrement___' has a wrong offset!");
static_assert(offsetof(UBP_AJBMemoryLeakBuff_C, AttackIncrement___) == 0x000200, "Member 'UBP_AJBMemoryLeakBuff_C::AttackIncrement___' has a wrong offset!");
static_assert(offsetof(UBP_AJBMemoryLeakBuff_C, MPMaxIncrement___) == 0x000204, "Member 'UBP_AJBMemoryLeakBuff_C::MPMaxIncrement___' has a wrong offset!");
static_assert(offsetof(UBP_AJBMemoryLeakBuff_C, CurrentPhaseList) == 0x000208, "Member 'UBP_AJBMemoryLeakBuff_C::CurrentPhaseList' has a wrong offset!");
static_assert(offsetof(UBP_AJBMemoryLeakBuff_C, StatusBuffTag) == 0x000218, "Member 'UBP_AJBMemoryLeakBuff_C::StatusBuffTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBMemoryLeakBuff_C, bDebugPrintPhase) == 0x000228, "Member 'UBP_AJBMemoryLeakBuff_C::bDebugPrintPhase' has a wrong offset!");
static_assert(offsetof(UBP_AJBMemoryLeakBuff_C, bDebugPrintValueOnApply) == 0x000229, "Member 'UBP_AJBMemoryLeakBuff_C::bDebugPrintValueOnApply' has a wrong offset!");
static_assert(offsetof(UBP_AJBMemoryLeakBuff_C, BuffSETag) == 0x000230, "Member 'UBP_AJBMemoryLeakBuff_C::BuffSETag' has a wrong offset!");
static_assert(offsetof(UBP_AJBMemoryLeakBuff_C, GrowupTag_Attackup) == 0x000238, "Member 'UBP_AJBMemoryLeakBuff_C::GrowupTag_Attackup' has a wrong offset!");
static_assert(offsetof(UBP_AJBMemoryLeakBuff_C, GrowupTag_MaxMP) == 0x000240, "Member 'UBP_AJBMemoryLeakBuff_C::GrowupTag_MaxMP' has a wrong offset!");

}

