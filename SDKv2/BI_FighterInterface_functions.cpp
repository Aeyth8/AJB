#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BI_FighterInterface

#include "Basic.hpp"

#include "BI_FighterInterface_classes.hpp"
#include "BI_FighterInterface_parameters.hpp"


namespace SDK
{

// Function BI_FighterInterface.BI_FighterInterface_C.GetAttackLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          TargetLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_FighterInterface_C::GetAttackLocation(const struct FVector& TargetLocation, struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_FighterInterface_C", "GetAttackLocation");

	Params::BI_FighterInterface_C_GetAttackLocation Parms{};

	Parms.TargetLocation = std::move(TargetLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function BI_FighterInterface.BI_FighterInterface_C.GetAttackCollisionRadius
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CloseRangeSkillNo                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Radius                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_FighterInterface_C::GetAttackCollisionRadius(int32 CloseRangeSkillNo, float* Radius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_FighterInterface_C", "GetAttackCollisionRadius");

	Params::BI_FighterInterface_C_GetAttackCollisionRadius Parms{};

	Parms.CloseRangeSkillNo = CloseRangeSkillNo;

	UObject::ProcessEvent(Func, &Parms);

	if (Radius != nullptr)
		*Radius = Parms.Radius;
}


// Function BI_FighterInterface.BI_FighterInterface_C.GetAttackRange
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CloseRangeSkillNo                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AttackRange                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_FighterInterface_C::GetAttackRange(int32 CloseRangeSkillNo, float* AttackRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_FighterInterface_C", "GetAttackRange");

	Params::BI_FighterInterface_C_GetAttackRange Parms{};

	Parms.CloseRangeSkillNo = CloseRangeSkillNo;

	UObject::ProcessEvent(Func, &Parms);

	if (AttackRange != nullptr)
		*AttackRange = Parms.AttackRange;
}


// Function BI_FighterInterface.BI_FighterInterface_C.GetStandAttackOffset
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CloseRangeSkillNo                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          StandAttackOffset                                      (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_FighterInterface_C::GetStandAttackOffset(int32 CloseRangeSkillNo, struct FVector* StandAttackOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_FighterInterface_C", "GetStandAttackOffset");

	Params::BI_FighterInterface_C_GetStandAttackOffset Parms{};

	Parms.CloseRangeSkillNo = CloseRangeSkillNo;

	UObject::ProcessEvent(Func, &Parms);

	if (StandAttackOffset != nullptr)
		*StandAttackOffset = std::move(Parms.StandAttackOffset);
}

}

