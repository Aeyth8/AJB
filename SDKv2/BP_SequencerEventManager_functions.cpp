#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SequencerEventManager

#include "Basic.hpp"

#include "BP_SequencerEventManager_classes.hpp"
#include "BP_SequencerEventManager_parameters.hpp"


namespace SDK
{

// Function BP_SequencerEventManager.BP_SequencerEventManager_C.ExecuteUbergraph_BP_SequencerEventManager
// ()
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SequencerEventManager_C::ExecuteUbergraph_BP_SequencerEventManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SequencerEventManager_C", "ExecuteUbergraph_BP_SequencerEventManager");

	Params::BP_SequencerEventManager_C_ExecuteUbergraph_BP_SequencerEventManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SequencerEventManager.BP_SequencerEventManager_C.CacheTracks
// (BlueprintCallable, BlueprintEvent)

void ABP_SequencerEventManager_C::CacheTracks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SequencerEventManager_C", "CacheTracks");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SequencerEventManager.BP_SequencerEventManager_C.SkipSequencer
// (BlueprintCallable, BlueprintEvent)

void ABP_SequencerEventManager_C::SkipSequencer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SequencerEventManager_C", "SkipSequencer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SequencerEventManager.BP_SequencerEventManager_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_SequencerEventManager_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SequencerEventManager_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SequencerEventManager.BP_SequencerEventManager_C.GetValidSequencerTracks
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_SequencerTrackBase_C*> InSequencerTracks                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class ABP_SequencerTrackBase_C*> OutSequencerTracks                                     (Parm, OutParm, ZeroConstructor)

void ABP_SequencerEventManager_C::GetValidSequencerTracks(TArray<class ABP_SequencerTrackBase_C*>& InSequencerTracks, TArray<class ABP_SequencerTrackBase_C*>* OutSequencerTracks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SequencerEventManager_C", "GetValidSequencerTracks");

	Params::BP_SequencerEventManager_C_GetValidSequencerTracks Parms{};

	Parms.InSequencerTracks = std::move(InSequencerTracks);

	UObject::ProcessEvent(Func, &Parms);

	InSequencerTracks = std::move(Parms.InSequencerTracks);

	if (OutSequencerTracks != nullptr)
		*OutSequencerTracks = std::move(Parms.OutSequencerTracks);
}


// Function BP_SequencerEventManager.BP_SequencerEventManager_C.IsSkipping
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsSkipping                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SequencerEventManager_C::IsSkipping(bool* bIsSkipping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SequencerEventManager_C", "IsSkipping");

	Params::BP_SequencerEventManager_C_IsSkipping Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bIsSkipping != nullptr)
		*bIsSkipping = Parms.bIsSkipping;
}

}

