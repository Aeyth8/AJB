#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AJBIngameAnimFunctionLibrary

#include "Basic.hpp"

#include "AJBIngameAnimFunctionLibrary_classes.hpp"
#include "AJBIngameAnimFunctionLibrary_parameters.hpp"


namespace SDK
{

// Function AJBIngameAnimFunctionLibrary.AJBIngameAnimFunctionLibrary_C.CalcSplineIKPointTransforms
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimInstance*                    AnimInstance                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          TargetPointWorldLocation                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>                  SplinePointOriginComponentLocation                     (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// float                                   FluctuationCoefficient                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MaxFluctuationLength_cm_                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bApplyFluctuationToComponentX                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bApplyFluctuationToComponentY                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bApplyFluctuationToComponentZ                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          SplinePointComponentLocationOffset                     (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         SplinePointComponentRotation                           (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    bDisplayDebugSphere                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FTransform>               Result                                                 (Parm, OutParm, ZeroConstructor)

void UAJBIngameAnimFunctionLibrary_C::CalcSplineIKPointTransforms(class UAnimInstance* AnimInstance, const struct FVector& TargetPointWorldLocation, TArray<struct FVector>& SplinePointOriginComponentLocation, float FluctuationCoefficient, float MaxFluctuationLength_cm_, bool bApplyFluctuationToComponentX, bool bApplyFluctuationToComponentY, bool bApplyFluctuationToComponentZ, const struct FVector& SplinePointComponentLocationOffset, const struct FRotator& SplinePointComponentRotation, bool bDisplayDebugSphere, class UObject* __WorldContext, TArray<struct FTransform>* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AJBIngameAnimFunctionLibrary_C", "CalcSplineIKPointTransforms");

	Params::AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms Parms{};

	Parms.AnimInstance = AnimInstance;
	Parms.TargetPointWorldLocation = std::move(TargetPointWorldLocation);
	Parms.SplinePointOriginComponentLocation = std::move(SplinePointOriginComponentLocation);
	Parms.FluctuationCoefficient = FluctuationCoefficient;
	Parms.MaxFluctuationLength_cm_ = MaxFluctuationLength_cm_;
	Parms.bApplyFluctuationToComponentX = bApplyFluctuationToComponentX;
	Parms.bApplyFluctuationToComponentY = bApplyFluctuationToComponentY;
	Parms.bApplyFluctuationToComponentZ = bApplyFluctuationToComponentZ;
	Parms.SplinePointComponentLocationOffset = std::move(SplinePointComponentLocationOffset);
	Parms.SplinePointComponentRotation = std::move(SplinePointComponentRotation);
	Parms.bDisplayDebugSphere = bDisplayDebugSphere;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	SplinePointOriginComponentLocation = std::move(Parms.SplinePointOriginComponentLocation);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}

}

