#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_Skill_AssaultDive

#include "Basic.hpp"

#include "WB_Skill_AssaultDive_classes.hpp"
#include "WB_Skill_AssaultDive_parameters.hpp"


namespace SDK
{

// Function WB_Skill_AssaultDive.WB_Skill_AssaultDive_C.ExecuteUbergraph_WB_Skill_AssaultDive
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Skill_AssaultDive_C::ExecuteUbergraph_WB_Skill_AssaultDive(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Skill_AssaultDive_C", "ExecuteUbergraph_WB_Skill_AssaultDive");

	Params::WB_Skill_AssaultDive_C_ExecuteUbergraph_WB_Skill_AssaultDive Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Skill_AssaultDive.WB_Skill_AssaultDive_C.HideAdditionalAssaultDiveGuide
// (BlueprintCallable, BlueprintEvent)

void UWB_Skill_AssaultDive_C::HideAdditionalAssaultDiveGuide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Skill_AssaultDive_C", "HideAdditionalAssaultDiveGuide");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Skill_AssaultDive.WB_Skill_AssaultDive_C.ShowAdditionalAssaultDiveGuide
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FAJBSkillGuideInfo               AdditionalGuide                                        (BlueprintVisible, BlueprintReadOnly, Parm)

void UWB_Skill_AssaultDive_C::ShowAdditionalAssaultDiveGuide(const struct FAJBSkillGuideInfo& AdditionalGuide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Skill_AssaultDive_C", "ShowAdditionalAssaultDiveGuide");

	Params::WB_Skill_AssaultDive_C_ShowAdditionalAssaultDiveGuide Parms{};

	Parms.AdditionalGuide = std::move(AdditionalGuide);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Skill_AssaultDive.WB_Skill_AssaultDive_C.HideAssaultDiveGuide
// (BlueprintCallable, BlueprintEvent)

void UWB_Skill_AssaultDive_C::HideAssaultDiveGuide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Skill_AssaultDive_C", "HideAssaultDiveGuide");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Skill_AssaultDive.WB_Skill_AssaultDive_C.ShowAssaultDiveGuide
// (BlueprintCallable, BlueprintEvent)

void UWB_Skill_AssaultDive_C::ShowAssaultDiveGuide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Skill_AssaultDive_C", "ShowAssaultDiveGuide");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Skill_AssaultDive.WB_Skill_AssaultDive_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_Skill_AssaultDive_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Skill_AssaultDive_C", "Tick");

	Params::WB_Skill_AssaultDive_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_Skill_AssaultDive.WB_Skill_AssaultDive_C.OnActiveSkillWidget
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UWB_Skill_AssaultDive_C::OnActiveSkillWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Skill_AssaultDive_C", "OnActiveSkillWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Skill_AssaultDive.WB_Skill_AssaultDive_C.OnInactiveSkillWidget
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UWB_Skill_AssaultDive_C::OnInactiveSkillWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Skill_AssaultDive_C", "OnInactiveSkillWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_Skill_AssaultDive.WB_Skill_AssaultDive_C.GetSXPCharacter
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_AJBInGameMovableStand_SXP_C*  SXP                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_Skill_AssaultDive_C::GetSXPCharacter(class ABP_AJBInGameMovableStand_SXP_C** SXP, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Skill_AssaultDive_C", "GetSXPCharacter");

	Params::WB_Skill_AssaultDive_C_GetSXPCharacter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SXP != nullptr)
		*SXP = Parms.SXP;

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function WB_Skill_AssaultDive.WB_Skill_AssaultDive_C.GetGuideInfo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FAJBSkillGuideInfo               AdditionalGuideInfo                                    (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FAJBSkillGuideInfo               FinalyGuideInfo                                        (Parm, OutParm)

void UWB_Skill_AssaultDive_C::GetGuideInfo(const struct FAJBSkillGuideInfo& AdditionalGuideInfo, struct FAJBSkillGuideInfo* FinalyGuideInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_Skill_AssaultDive_C", "GetGuideInfo");

	Params::WB_Skill_AssaultDive_C_GetGuideInfo Parms{};

	Parms.AdditionalGuideInfo = std::move(AdditionalGuideInfo);

	UObject::ProcessEvent(Func, &Parms);

	if (FinalyGuideInfo != nullptr)
		*FinalyGuideInfo = std::move(Parms.FinalyGuideInfo);
}

}

