#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBGrowTree

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AJB_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBGrowTree.BP_AJBGrowTree_C
// 0x00F0 (0x0418 - 0x0328)
class ABP_AJBGrowTree_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(Transient, DuplicateTransient)
	class UNavModifierComponent*                  NavModifier;                                       // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SM_OverGlow;                                       // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CollisionParent;                                   // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SceneRoot;                                         // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Root;                                              // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAJBNetVaryFloatComponent*              AJBNetVaryFloat;                                   // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Base;                                              // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         HPMax;                                             // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseRadius;                                        // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ForceClearingDistance;                             // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultGrowDistanceLimit_cm_;                      // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGrowTreeState                                CurrentState;                                      // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_379[0x3];                                      // 0x0379(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GrownTime;                                         // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StateTime;                                         // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ClearingTime;                                      // 0x0384(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnCompletedClearing;                               // 0x0388(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         MeshSize;                                          // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrowSpeed;                                         // 0x039C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         GrowDistanceLimit;                                 // 0x03A0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         Rep_HP;                                            // 0x03A4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GrowStartParticleTag;                              // 0x03A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GrowingParticleTag;                                // 0x03B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           BreakParticleTag;                                  // 0x03B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GrowStartGionTag;                                  // 0x03C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GrowingSETag;                                      // 0x03C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          GrowStartParticle;                                 // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          GrowingParticle;                                   // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       DMI_OverGrowMesh;                                  // 0x03E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         MaxTreeDistance;                                   // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F4[0x4];                                      // 0x03F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           GrowingSE;                                         // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOwnerGetOn;                                       // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bReserveClearing;                                  // 0x0401(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDuringTheWorld;                                   // 0x0402(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_403[0x5];                                      // 0x0403(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            GrowingCurve;                                      // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               TargetCharacterBP;                                 // 0x0410(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void OnCompletedClearing__DelegateSignature(class ABP_AJBGrowTree_C* Target);
	void ExecuteUbergraph_BP_AJBGrowTree(int32 EntryPoint);
	void OnBecomeLastSurvivor();
	void OnDie_Local(bool bWillRessurect, bool bIsLastDefeated, bool bDiedOfKillZ);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void OnStateEnd();
	void MC_StateEnd();
	void ROS_StateEnd();
	void ROS_BeginState_Clearing(bool bBeBroken);
	void MC_BeginState_Grown();
	void ROS_BeginState_Grown();
	void OnBeginState_Grown(bool bBroken);
	void MC_BeginState_Growing();
	void ROS_BeginState_Growing();
	void OnBeginState_Growing();
	void MC_BeginState_Clearing(bool bBeBroken);
	void OnBeginState_Clearing(bool bBeBroken);
	void StateEnd();
	void TickState_Clearing();
	void TickState_Grown();
	void BeginState_Clearing(bool bBeBroken);
	void TickState_Growing();
	void StateTick(float DeltaSeconds);
	void OnValueArrivedMax();
	void BeginState_Growing();
	void BeginState_Grown();
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);
	void MC_OnHPZero();
	void AJBDamage(class AActor* DamagedActor, int32 DamageForHPAP, int32 DamageForAAP, int32 CutDamage, const struct FGameplayTag& DamageType, int32 SerialNumber, EDamagePriority DamagePriority, float AttackDistance, class AActor* DamageCauser, bool WithSeparatedStandAttack, bool HitEnemysSeparatedStand, bool bPenetrateAP, bool bNotUseCollision);
	void OnAreaDamageDisabled();
	void OnPassiveDisabled();
	void OnDamageDisabled();
	void DamageOverlapped(class AActor* DamageCauser, const struct FVector& HitLocation, bool bPenetrating, const struct FGameplayTag& FactorTag);
	void UserConstructionScript();
	void ChangeState(EGrowTreeState NewState);
	void TryClearingByDistance();
	void UpdateBase();
	void UpdateRoot();
	void CheckActiveState(bool* bActive);
	void InitializeStatus();
	void ConsumeDamage(int32 Damage);
	void CheckState(EGrowTreeState State, bool* bReturn);
	void UpdateParticleParameter(class UParticleSystemComponent* NewParam);
	void ChangeCollisionEnable(bool bEnable);
	void GetAppliedCurveValue(float* Value);
	void ApplyMaxTreeDistance();
	void TryClearingByLocation();
	bool IfCheckDamageOverlap();
	void OwnHitParam(bool* bCharacter, bool* bLeftAP, struct FGameplayTag* ParticleTagBlockedByAAP, struct FGameplayTag* SETagBlockedByAAP);
	void CheckTargetSelf(class AActor* DamageCauser, bool bForDamageOverlap, bool bIgnoreMovableStand, bool* bTarget);
	void CheckDisableDamage(class AActor* DamageCauser, bool* bDisableDamage);
	void CheckDisablePassive(class AActor* PassiveCauser, const struct FGameplayTag& PassiveTag, bool* bDisablePassive);
	void CheckDisableAreaDamage(bool* bDisableAreadamage);
	void CheckNoDamage(class AActor* DamageCauser, bool* bNoDamage);
	void IsReactedByReticule(bool* bResult);
	void IgnoreTrace(bool* bIgnore);
	void CheckDisableDirectDamage(class AActor* DamageCauser, bool* bDisableDirectDamage);
	void GetTargetLocation(struct FVector* Location);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBGrowTree_C">();
	}
	static class ABP_AJBGrowTree_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBGrowTree_C>();
	}
};
static_assert(alignof(ABP_AJBGrowTree_C) == 0x000008, "Wrong alignment on ABP_AJBGrowTree_C");
static_assert(sizeof(ABP_AJBGrowTree_C) == 0x000418, "Wrong size on ABP_AJBGrowTree_C");
static_assert(offsetof(ABP_AJBGrowTree_C, UberGraphFrame) == 0x000328, "Member 'ABP_AJBGrowTree_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AJBGrowTree_C, NavModifier) == 0x000330, "Member 'ABP_AJBGrowTree_C::NavModifier' has a wrong offset!");
static_assert(offsetof(ABP_AJBGrowTree_C, SM_OverGlow) == 0x000338, "Member 'ABP_AJBGrowTree_C::SM_OverGlow' has a wrong offset!");
static_assert(offsetof(ABP_AJBGrowTree_C, CollisionParent) == 0x000340, "Member 'ABP_AJBGrowTree_C::CollisionParent' has a wrong offset!");
static_assert(offsetof(ABP_AJBGrowTree_C, SceneRoot) == 0x000348, "Member 'ABP_AJBGrowTree_C::SceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_AJBGrowTree_C, Root) == 0x000350, "Member 'ABP_AJBGrowTree_C::Root' has a wrong offset!");
static_assert(offsetof(ABP_AJBGrowTree_C, AJBNetVaryFloat) == 0x000358, "Member 'ABP_AJBGrowTree_C::AJBNetVaryFloat' has a wrong offset!");
static_assert(offsetof(ABP_AJBGrowTree_C, Base) == 0x000360, "Member 'ABP_AJBGrowTree_C::Base' has a wrong offset!");
static_assert(offsetof(ABP_AJBGrowTree_C, HPMax) == 0x000368, "Member 'ABP_AJBGrowTree_C::HPMax' has a wrong offset!");
static_assert(offsetof(ABP_AJBGrowTree_C, BaseRadius) == 0x00036C, "Member 'ABP_AJBGrowTree_C::BaseRadius' has a wrong offset!");
static_assert(offsetof(ABP_AJBGrowTree_C, ForceClearingDistance) == 0x000370, "Member 'ABP_AJBGrowTree_C::ForceClearingDistance' has a wrong offset!");
static_assert(offsetof(ABP_AJBGrowTree_C, DefaultGrowDistanceLimit_cm_) == 0x000374, "Member 'ABP_AJBGrowTree_C::DefaultGrowDistanceLimit_cm_' has a wrong offset!");
static_assert(offsetof(ABP_AJBGrowTree_C, CurrentState) == 0x000378, "Member 'ABP_AJBGrowTree_C::CurrentState' has a wrong offset!");
static_assert(offsetof(ABP_AJBGrowTree_C, GrownTime) == 0x00037C, "Member 'ABP_AJBGrowTree_C::GrownTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBGrowTree_C, StateTime) == 0x000380, "Member 'ABP_AJBGrowTree_C::StateTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBGrowTree_C, ClearingTime) == 0x000384, "Member 'ABP_AJBGrowTree_C::ClearingTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBGrowTree_C, OnCompletedClearing) == 0x000388, "Member 'ABP_AJBGrowTree_C::OnCompletedClearing' has a wrong offset!");
static_assert(offsetof(ABP_AJBGrowTree_C, MeshSize) == 0x000398, "Member 'ABP_AJBGrowTree_C::MeshSize' has a wrong offset!");
static_assert(offsetof(ABP_AJBGrowTree_C, GrowSpeed) == 0x00039C, "Member 'ABP_AJBGrowTree_C::GrowSpeed' has a wrong offset!");
static_assert(offsetof(ABP_AJBGrowTree_C, GrowDistanceLimit) == 0x0003A0, "Member 'ABP_AJBGrowTree_C::GrowDistanceLimit' has a wrong offset!");
static_assert(offsetof(ABP_AJBGrowTree_C, Rep_HP) == 0x0003A4, "Member 'ABP_AJBGrowTree_C::Rep_HP' has a wrong offset!");
static_assert(offsetof(ABP_AJBGrowTree_C, GrowStartParticleTag) == 0x0003A8, "Member 'ABP_AJBGrowTree_C::GrowStartParticleTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBGrowTree_C, GrowingParticleTag) == 0x0003B0, "Member 'ABP_AJBGrowTree_C::GrowingParticleTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBGrowTree_C, BreakParticleTag) == 0x0003B8, "Member 'ABP_AJBGrowTree_C::BreakParticleTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBGrowTree_C, GrowStartGionTag) == 0x0003C0, "Member 'ABP_AJBGrowTree_C::GrowStartGionTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBGrowTree_C, GrowingSETag) == 0x0003C8, "Member 'ABP_AJBGrowTree_C::GrowingSETag' has a wrong offset!");
static_assert(offsetof(ABP_AJBGrowTree_C, GrowStartParticle) == 0x0003D0, "Member 'ABP_AJBGrowTree_C::GrowStartParticle' has a wrong offset!");
static_assert(offsetof(ABP_AJBGrowTree_C, GrowingParticle) == 0x0003D8, "Member 'ABP_AJBGrowTree_C::GrowingParticle' has a wrong offset!");
static_assert(offsetof(ABP_AJBGrowTree_C, DMI_OverGrowMesh) == 0x0003E0, "Member 'ABP_AJBGrowTree_C::DMI_OverGrowMesh' has a wrong offset!");
static_assert(offsetof(ABP_AJBGrowTree_C, MaxTreeDistance) == 0x0003F0, "Member 'ABP_AJBGrowTree_C::MaxTreeDistance' has a wrong offset!");
static_assert(offsetof(ABP_AJBGrowTree_C, GrowingSE) == 0x0003F8, "Member 'ABP_AJBGrowTree_C::GrowingSE' has a wrong offset!");
static_assert(offsetof(ABP_AJBGrowTree_C, bOwnerGetOn) == 0x000400, "Member 'ABP_AJBGrowTree_C::bOwnerGetOn' has a wrong offset!");
static_assert(offsetof(ABP_AJBGrowTree_C, bReserveClearing) == 0x000401, "Member 'ABP_AJBGrowTree_C::bReserveClearing' has a wrong offset!");
static_assert(offsetof(ABP_AJBGrowTree_C, bDuringTheWorld) == 0x000402, "Member 'ABP_AJBGrowTree_C::bDuringTheWorld' has a wrong offset!");
static_assert(offsetof(ABP_AJBGrowTree_C, GrowingCurve) == 0x000408, "Member 'ABP_AJBGrowTree_C::GrowingCurve' has a wrong offset!");
static_assert(offsetof(ABP_AJBGrowTree_C, TargetCharacterBP) == 0x000410, "Member 'ABP_AJBGrowTree_C::TargetCharacterBP' has a wrong offset!");

}

