#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_TestModeMenuItemInteger

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "WB_TestModeMenuItemValue_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_TestModeMenuItemInteger.WB_TestModeMenuItemInteger_C
// 0x0018 (0x0340 - 0x0328)
class UWB_TestModeMenuItemInteger_C final : public UWB_TestModeMenuItemValue_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_WB_TestModeMenuItemInteger_C;       // 0x0328(0x0008)(Transient, DuplicateTransient)
	int32                                         Value;                                             // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         ValueMax;                                          // 0x0334(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         ValueMin;                                          // 0x0338(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         DefaultValue;                                      // 0x033C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WB_TestModeMenuItemInteger(int32 EntryPoint);
	void SetSelectValue(int32 Value_0);
	void ModifyMinValue();
	void ModifyMaxValue();
	bool ValueDown();
	void ValueUp(bool* IsMax);
	bool IsDefaultValue();
	void GetValueText(class FText* OutText);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_TestModeMenuItemInteger_C">();
	}
	static class UWB_TestModeMenuItemInteger_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_TestModeMenuItemInteger_C>();
	}
};
static_assert(alignof(UWB_TestModeMenuItemInteger_C) == 0x000008, "Wrong alignment on UWB_TestModeMenuItemInteger_C");
static_assert(sizeof(UWB_TestModeMenuItemInteger_C) == 0x000340, "Wrong size on UWB_TestModeMenuItemInteger_C");
static_assert(offsetof(UWB_TestModeMenuItemInteger_C, UberGraphFrame_WB_TestModeMenuItemInteger_C) == 0x000328, "Member 'UWB_TestModeMenuItemInteger_C::UberGraphFrame_WB_TestModeMenuItemInteger_C' has a wrong offset!");
static_assert(offsetof(UWB_TestModeMenuItemInteger_C, Value) == 0x000330, "Member 'UWB_TestModeMenuItemInteger_C::Value' has a wrong offset!");
static_assert(offsetof(UWB_TestModeMenuItemInteger_C, ValueMax) == 0x000334, "Member 'UWB_TestModeMenuItemInteger_C::ValueMax' has a wrong offset!");
static_assert(offsetof(UWB_TestModeMenuItemInteger_C, ValueMin) == 0x000338, "Member 'UWB_TestModeMenuItemInteger_C::ValueMin' has a wrong offset!");
static_assert(offsetof(UWB_TestModeMenuItemInteger_C, DefaultValue) == 0x00033C, "Member 'UWB_TestModeMenuItemInteger_C::DefaultValue' has a wrong offset!");

}

