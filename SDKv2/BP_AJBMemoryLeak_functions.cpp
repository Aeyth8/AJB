#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBMemoryLeak

#include "Basic.hpp"

#include "BP_AJBMemoryLeak_classes.hpp"
#include "BP_AJBMemoryLeak_parameters.hpp"


namespace SDK
{

// Function BP_AJBMemoryLeak.BP_AJBMemoryLeak_C.ExecuteUbergraph_BP_AJBMemoryLeak
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBMemoryLeak_C::ExecuteUbergraph_BP_AJBMemoryLeak(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBMemoryLeak_C", "ExecuteUbergraph_BP_AJBMemoryLeak");

	Params::BP_AJBMemoryLeak_C_ExecuteUbergraph_BP_AJBMemoryLeak Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBMemoryLeak.BP_AJBMemoryLeak_C.PlayLongInteractSE
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBMemoryLeak_C::PlayLongInteractSE()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBMemoryLeak_C", "PlayLongInteractSE");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBMemoryLeak.BP_AJBMemoryLeak_C.UpdateErrorTypeUI
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   ErrorType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBMemoryLeak_C::UpdateErrorTypeUI(uint8 ErrorType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBMemoryLeak_C", "UpdateErrorTypeUI");

	Params::BP_AJBMemoryLeak_C_UpdateErrorTypeUI Parms{};

	Parms.ErrorType = ErrorType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBMemoryLeak.BP_AJBMemoryLeak_C.OnLongPressInteractEnded
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSuccess                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bForceCancel                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AActor*                           InteractActor_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBMemoryLeak_C::OnLongPressInteractEnded(bool bSuccess, bool bForceCancel, class AActor* InteractActor_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBMemoryLeak_C", "OnLongPressInteractEnded");

	Params::BP_AJBMemoryLeak_C_OnLongPressInteractEnded Parms{};

	Parms.bSuccess = bSuccess;
	Parms.bForceCancel = bForceCancel;
	Parms.InteractActor_0 = InteractActor_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBMemoryLeak.BP_AJBMemoryLeak_C.ActorIsAlreadyInteracted
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Interacted                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBMemoryLeak_C::ActorIsAlreadyInteracted(const class AActor*& Actor, bool* Interacted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBMemoryLeak_C", "ActorIsAlreadyInteracted");

	Params::BP_AJBMemoryLeak_C_ActorIsAlreadyInteracted Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (Interacted != nullptr)
		*Interacted = Parms.Interacted;
}


// Function BP_AJBMemoryLeak.BP_AJBMemoryLeak_C.BeginInteract
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBMemoryLeak_C::BeginInteract(bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBMemoryLeak_C", "BeginInteract");

	Params::BP_AJBMemoryLeak_C_BeginInteract Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function BP_AJBMemoryLeak.BP_AJBMemoryLeak_C.GetPriority
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Priority                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBMemoryLeak_C::GetPriority(int32* Priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBMemoryLeak_C", "GetPriority");

	Params::BP_AJBMemoryLeak_C_GetPriority Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Priority != nullptr)
		*Priority = Parms.Priority;
}


// Function BP_AJBMemoryLeak.BP_AJBMemoryLeak_C.GetText
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FText                             Text                                                   (Parm, OutParm)

void UBP_AJBMemoryLeak_C::GetText(bool* bSuccess, class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBMemoryLeak_C", "GetText");

	Params::BP_AJBMemoryLeak_C_GetText Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function BP_AJBMemoryLeak.BP_AJBMemoryLeak_C.CheckInteractable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_AJBInGameCharacter_C*         OperatorCharacter                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BaseTraceLength                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bInteractable                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBMemoryLeak_C::CheckInteractable(class ABP_AJBInGameCharacter_C* OperatorCharacter, class AActor* TargetActor, float BaseTraceLength, bool* bInteractable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBMemoryLeak_C", "CheckInteractable");

	Params::BP_AJBMemoryLeak_C_CheckInteractable Parms{};

	Parms.OperatorCharacter = OperatorCharacter;
	Parms.TargetActor = TargetActor;
	Parms.BaseTraceLength = BaseTraceLength;

	UObject::ProcessEvent(Func, &Parms);

	if (bInteractable != nullptr)
		*bInteractable = Parms.bInteractable;
}


// Function BP_AJBMemoryLeak.BP_AJBMemoryLeak_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_AJBMemoryLeak_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBMemoryLeak_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBMemoryLeak.BP_AJBMemoryLeak_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBMemoryLeak_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBMemoryLeak_C", "ReceiveTick");

	Params::BP_AJBMemoryLeak_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBMemoryLeak.BP_AJBMemoryLeak_C.NotifyTheWorld
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAJBInGameCharacter*              Operator                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EGeneralTiming                          Timing                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bOperatorIsEmpty                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBMemoryLeak_C::NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBMemoryLeak_C", "NotifyTheWorld");

	Params::BP_AJBMemoryLeak_C_NotifyTheWorld Parms{};

	Parms.Operator = Operator;
	Parms.Time = Time;
	Parms.Timing = Timing;
	Parms.bEnable = bEnable;
	Parms.bOperatorIsEmpty = bOperatorIsEmpty;

	UObject::ProcessEvent(Func, &Parms);
}

}

