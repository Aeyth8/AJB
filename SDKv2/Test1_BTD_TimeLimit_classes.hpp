#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Test1_BTD_TimeLimit

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass test1_BTD_TimeLimit.test1_BTD_TimeLimit_C
// 0x0018 (0x00B8 - 0x00A0)
class UTest1_BTD_TimeLimit_C final : public UBTDecorator_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(Transient, DuplicateTransient)
	float                                         DurationTime;                                      // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RandomDeviation;                                   // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainingTime;                                     // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AlreadyFormattedRemainingTime;                     // 0x00B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_test1_BTD_TimeLimit(int32 EntryPoint);
	void ReceiveObserverActivatedAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	bool PerformConditionCheckAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ResetRemainingTime(float* RemainingTime_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"test1_BTD_TimeLimit_C">();
	}
	static class UTest1_BTD_TimeLimit_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTest1_BTD_TimeLimit_C>();
	}
};
static_assert(alignof(UTest1_BTD_TimeLimit_C) == 0x000008, "Wrong alignment on UTest1_BTD_TimeLimit_C");
static_assert(sizeof(UTest1_BTD_TimeLimit_C) == 0x0000B8, "Wrong size on UTest1_BTD_TimeLimit_C");
static_assert(offsetof(UTest1_BTD_TimeLimit_C, UberGraphFrame) == 0x0000A0, "Member 'UTest1_BTD_TimeLimit_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UTest1_BTD_TimeLimit_C, DurationTime) == 0x0000A8, "Member 'UTest1_BTD_TimeLimit_C::DurationTime' has a wrong offset!");
static_assert(offsetof(UTest1_BTD_TimeLimit_C, RandomDeviation) == 0x0000AC, "Member 'UTest1_BTD_TimeLimit_C::RandomDeviation' has a wrong offset!");
static_assert(offsetof(UTest1_BTD_TimeLimit_C, RemainingTime) == 0x0000B0, "Member 'UTest1_BTD_TimeLimit_C::RemainingTime' has a wrong offset!");
static_assert(offsetof(UTest1_BTD_TimeLimit_C, AlreadyFormattedRemainingTime) == 0x0000B4, "Member 'UTest1_BTD_TimeLimit_C::AlreadyFormattedRemainingTime' has a wrong offset!");

}

