#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBGate

#include "Basic.hpp"

#include "E_GionSpawnedSpace_structs.hpp"
#include "Engine_structs.hpp"
#include "ST_GateState_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "AJB_classes.hpp"
#include "E_GateState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBGate.BP_AJBGate_C
// 0x0058 (0x0380 - 0x0328)
class ABP_AJBGate_C : public AAJBInGameGate
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(Transient, DuplicateTransient)
	class UNavModifierComponent*                  NavModifier;                                       // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          InteractTrigger;                                   // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsTwoSideOpen;                                    // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_GateState                          Rep_GateState;                                     // 0x0350(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify, HasGetValueTypeHash)
	struct FST_GateState                          Old_GateState;                                     // 0x0360(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FGameplayTag                           OpenSETag;                                         // 0x0370(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CloseSETag;                                        // 0x0378(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBGate(int32 EntryPoint);
	void OpenOrClose_Server_(const struct FST_GateState& NewGateState);
	void MC_OpenOrCloseTheMoment(const struct FST_GateState& New_GateState);
	void OnROSInteract(class AActor* InteractingActor, bool ServerIsInteractingPlayer);
	void OpenOrCloseOnInteracrt_Server_(class AActor* InteractingActor);
	void OnStartAnim(class UBP_SimpleCurveAnimation_C* AnimComponent, bool bReverse);
	void OnFinishAnim(class UBP_SimpleCurveAnimation_C* AnimComponent);
	void ReceiveBeginPlay();
	void OnForceClose_Server_();
	void OnForceOpen_Server_();
	void OnInteractionBlocked(class AActor* InteractingActor);
	void OnSucceededLongPress_Local();
	void OnInteract(class AActor* InteractActor);
	void UserConstructionScript();
	void OnRep_Rep_GateState();
	void PlayGionAndSoundOnSwitching(class AActor* InteractingActor, bool bClose, const struct FST_FXVisibilityInfo& FXVisibility);
	void OpenOrCloseTheMoment(const struct FST_GateState& New_GateState);
	bool Interactable(class ABP_AJBInGameCharacter_C* Character, float TraceLength);
	bool InteractInstantly(class ABP_AJBInGameCharacter_C* Character);
	void TryGetInteractableText(class ABP_AJBInGameCharacter_C* OperatorCharacter, bool* bSuccess, class FText* InteractMessage);
	void OnLocalInteract(class AActor* InteractingActor, bool* bSuccess);
	void CheckErrorCondition(bool* bErrorCondition, uint8* ErrorType);
	void GetInteractState(uint8* InteractState);
	void GetInteractPriority(int32* Priority);
	void GetInteractBoundForCulling(class AActor* InteractingActor, struct FVector* Center, float* Radius);
	bool IfNeedsExclusiveInteractStrictly();
	bool IfBlockInteract(class AActor* InteractingActor);
	void ShouldPrioritizedThanPrepaidSkillCancel(bool* bShouldPriorirized);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBGate_C">();
	}
	static class ABP_AJBGate_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBGate_C>();
	}
};
static_assert(alignof(ABP_AJBGate_C) == 0x000008, "Wrong alignment on ABP_AJBGate_C");
static_assert(sizeof(ABP_AJBGate_C) == 0x000380, "Wrong size on ABP_AJBGate_C");
static_assert(offsetof(ABP_AJBGate_C, UberGraphFrame) == 0x000328, "Member 'ABP_AJBGate_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AJBGate_C, NavModifier) == 0x000330, "Member 'ABP_AJBGate_C::NavModifier' has a wrong offset!");
static_assert(offsetof(ABP_AJBGate_C, InteractTrigger) == 0x000338, "Member 'ABP_AJBGate_C::InteractTrigger' has a wrong offset!");
static_assert(offsetof(ABP_AJBGate_C, DefaultSceneRoot) == 0x000340, "Member 'ABP_AJBGate_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_AJBGate_C, bIsTwoSideOpen) == 0x000348, "Member 'ABP_AJBGate_C::bIsTwoSideOpen' has a wrong offset!");
static_assert(offsetof(ABP_AJBGate_C, Rep_GateState) == 0x000350, "Member 'ABP_AJBGate_C::Rep_GateState' has a wrong offset!");
static_assert(offsetof(ABP_AJBGate_C, Old_GateState) == 0x000360, "Member 'ABP_AJBGate_C::Old_GateState' has a wrong offset!");
static_assert(offsetof(ABP_AJBGate_C, OpenSETag) == 0x000370, "Member 'ABP_AJBGate_C::OpenSETag' has a wrong offset!");
static_assert(offsetof(ABP_AJBGate_C, CloseSETag) == 0x000378, "Member 'ABP_AJBGate_C::CloseSETag' has a wrong offset!");

}

