#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_InGameMiniMap

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WB_InGameMiniMap.WB_InGameMiniMap_C.ExecuteUbergraph_WB_InGameMiniMap
// 0x0098 (0x0098 - 0x0000)
struct WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Visible;                        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable1;                               // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x001C(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBInGameHUD_BP_bSuccess;              // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameHUD_C*                     CallFunc_GetAJBInGameHUD_BP_In_Game_HUD;           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAJBWindowWidget*                       K2Node_CustomEvent_TargetWidget;                   // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_InGameOpening_C*                    CallFunc_FindAJBWidgetOfClass_OutWidget;           // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UAJBWindowWidget* TargetWidget)> K2Node_CreateDelegate_OutputDelegate1;             // 0x0080(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsEnabledTick_ReturnValue;                // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap) == 0x000008, "Wrong alignment on WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap");
static_assert(sizeof(WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap) == 0x000098, "Wrong size on WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap");
static_assert(offsetof(WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap, EntryPoint) == 0x000000, "Member 'WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap, K2Node_CustomEvent_Visible) == 0x000004, "Member 'WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap::K2Node_CustomEvent_Visible' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap, Temp_bool_Variable) == 0x000005, "Member 'WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap, Temp_byte_Variable) == 0x000018, "Member 'WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap, Temp_byte_Variable1) == 0x000019, "Member 'WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap, K2Node_Select_Default) == 0x00001A, "Member 'WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap, K2Node_Event_MyGeometry) == 0x00001C, "Member 'WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap, K2Node_Event_InDeltaTime) == 0x000054, "Member 'WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap, CallFunc_GetAJBInGameHUD_BP_bSuccess) == 0x000058, "Member 'WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap::CallFunc_GetAJBInGameHUD_BP_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap, CallFunc_GetAJBInGameHUD_BP_In_Game_HUD) == 0x000060, "Member 'WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap::CallFunc_GetAJBInGameHUD_BP_In_Game_HUD' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap, K2Node_CustomEvent_TargetWidget) == 0x000068, "Member 'WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap::K2Node_CustomEvent_TargetWidget' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap, CallFunc_FindAJBWidgetOfClass_OutWidget) == 0x000070, "Member 'WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap::CallFunc_FindAJBWidgetOfClass_OutWidget' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap, CallFunc_IsValid_ReturnValue) == 0x000078, "Member 'WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap, K2Node_CreateDelegate_OutputDelegate1) == 0x000080, "Member 'WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap, CallFunc_IsEnabledTick_ReturnValue) == 0x000090, "Member 'WB_InGameMiniMap_C_ExecuteUbergraph_WB_InGameMiniMap::CallFunc_IsEnabledTick_ReturnValue' has a wrong offset!");

// Function WB_InGameMiniMap.WB_InGameMiniMap_C.SetVisiblePhaseInformation
// 0x0001 (0x0001 - 0x0000)
struct WB_InGameMiniMap_C_SetVisiblePhaseInformation final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_InGameMiniMap_C_SetVisiblePhaseInformation) == 0x000001, "Wrong alignment on WB_InGameMiniMap_C_SetVisiblePhaseInformation");
static_assert(sizeof(WB_InGameMiniMap_C_SetVisiblePhaseInformation) == 0x000001, "Wrong size on WB_InGameMiniMap_C_SetVisiblePhaseInformation");
static_assert(offsetof(WB_InGameMiniMap_C_SetVisiblePhaseInformation, Visible) == 0x000000, "Member 'WB_InGameMiniMap_C_SetVisiblePhaseInformation::Visible' has a wrong offset!");

// Function WB_InGameMiniMap.WB_InGameMiniMap_C.OnOpen_InGameOpening
// 0x0008 (0x0008 - 0x0000)
struct WB_InGameMiniMap_C_OnOpen_InGameOpening final
{
public:
	class UAJBWindowWidget*                       TargetWidget;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_InGameMiniMap_C_OnOpen_InGameOpening) == 0x000008, "Wrong alignment on WB_InGameMiniMap_C_OnOpen_InGameOpening");
static_assert(sizeof(WB_InGameMiniMap_C_OnOpen_InGameOpening) == 0x000008, "Wrong size on WB_InGameMiniMap_C_OnOpen_InGameOpening");
static_assert(offsetof(WB_InGameMiniMap_C_OnOpen_InGameOpening, TargetWidget) == 0x000000, "Member 'WB_InGameMiniMap_C_OnOpen_InGameOpening::TargetWidget' has a wrong offset!");

// Function WB_InGameMiniMap.WB_InGameMiniMap_C.Tick
// 0x003C (0x003C - 0x0000)
struct WB_InGameMiniMap_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_InGameMiniMap_C_Tick) == 0x000004, "Wrong alignment on WB_InGameMiniMap_C_Tick");
static_assert(sizeof(WB_InGameMiniMap_C_Tick) == 0x00003C, "Wrong size on WB_InGameMiniMap_C_Tick");
static_assert(offsetof(WB_InGameMiniMap_C_Tick, MyGeometry) == 0x000000, "Member 'WB_InGameMiniMap_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_Tick, InDeltaTime) == 0x000038, "Member 'WB_InGameMiniMap_C_Tick::InDeltaTime' has a wrong offset!");

// Function WB_InGameMiniMap.WB_InGameMiniMap_C.UpdateDisplay
// 0x0280 (0x0280 - 0x0000)
struct WB_InGameMiniMap_C_UpdateDisplay final
{
public:
	int32                                         LMinute;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LSec;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LSeconds;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LCompleteTime;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LStartTime;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0028(0x0018)()
	bool                                          CallFunc_IsEnabledTick_ReturnValue;                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEnabledTick_ReturnValue1;               // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue1;                // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_AJBDamageAreaContext_C*             CallFunc_GetComponentByClass_ReturnValue;          // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_AJBDamageAreaContext_C*             CallFunc_GetComponentByClass_ReturnValue1;         // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0068(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData1;             // 0x00A8(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array1;                           // 0x00E8(0x0010)(ZeroConstructor, ReferenceParm)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array2;                           // 0x00F8(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue1;                      // 0x0108(0x0018)()
	class FText                                   CallFunc_Format_ReturnValue2;                      // 0x0120(0x0018)()
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0138(0x0018)()
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue1;            // 0x0151(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_152[0x6];                                      // 0x0152(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue1;              // 0x0158(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0170(0x0018)()
	bool                                          Temp_bool_Variable1;                               // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData2;             // 0x0190(0x0040)(HasGetValueTypeHash)
	class FText                                   K2Node_Select1_Default;                            // 0x01D0(0x0018)()
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E9[0x7];                                      // 0x01E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData3;             // 0x01F0(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array3;                           // 0x0230(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue3;                      // 0x0240(0x0018)()
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue2;                // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBBattleGameState_C*               K2Node_DynamicCast_AsBP_AJBBattle_Game_State;      // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_271[0x3];                                      // 0x0271(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetTimeSecondsUntilStartReduction_Seconds; // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsProceedingReduction_ReturnValue;        // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_279[0x3];                                      // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetTimeSecondsUntilCompleteReduction_Seconds; // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_InGameMiniMap_C_UpdateDisplay) == 0x000008, "Wrong alignment on WB_InGameMiniMap_C_UpdateDisplay");
static_assert(sizeof(WB_InGameMiniMap_C_UpdateDisplay) == 0x000280, "Wrong size on WB_InGameMiniMap_C_UpdateDisplay");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, LMinute) == 0x000000, "Member 'WB_InGameMiniMap_C_UpdateDisplay::LMinute' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, LSec) == 0x000004, "Member 'WB_InGameMiniMap_C_UpdateDisplay::LSec' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, LSeconds) == 0x000008, "Member 'WB_InGameMiniMap_C_UpdateDisplay::LSeconds' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, LCompleteTime) == 0x00000C, "Member 'WB_InGameMiniMap_C_UpdateDisplay::LCompleteTime' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, LStartTime) == 0x000010, "Member 'WB_InGameMiniMap_C_UpdateDisplay::LStartTime' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, Temp_bool_Variable) == 0x000014, "Member 'WB_InGameMiniMap_C_UpdateDisplay::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, K2Node_MakeArray_Array) == 0x000018, "Member 'WB_InGameMiniMap_C_UpdateDisplay::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, CallFunc_Format_ReturnValue) == 0x000028, "Member 'WB_InGameMiniMap_C_UpdateDisplay::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, CallFunc_IsEnabledTick_ReturnValue) == 0x000040, "Member 'WB_InGameMiniMap_C_UpdateDisplay::CallFunc_IsEnabledTick_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, CallFunc_IsEnabledTick_ReturnValue1) == 0x000041, "Member 'WB_InGameMiniMap_C_UpdateDisplay::CallFunc_IsEnabledTick_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, CallFunc_GetGameState_ReturnValue) == 0x000048, "Member 'WB_InGameMiniMap_C_UpdateDisplay::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, CallFunc_GetGameState_ReturnValue1) == 0x000050, "Member 'WB_InGameMiniMap_C_UpdateDisplay::CallFunc_GetGameState_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, CallFunc_GetComponentByClass_ReturnValue) == 0x000058, "Member 'WB_InGameMiniMap_C_UpdateDisplay::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, CallFunc_GetComponentByClass_ReturnValue1) == 0x000060, "Member 'WB_InGameMiniMap_C_UpdateDisplay::CallFunc_GetComponentByClass_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, K2Node_MakeStruct_FormatArgumentData) == 0x000068, "Member 'WB_InGameMiniMap_C_UpdateDisplay::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, K2Node_MakeStruct_FormatArgumentData1) == 0x0000A8, "Member 'WB_InGameMiniMap_C_UpdateDisplay::K2Node_MakeStruct_FormatArgumentData1' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, K2Node_MakeArray_Array1) == 0x0000E8, "Member 'WB_InGameMiniMap_C_UpdateDisplay::K2Node_MakeArray_Array1' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, K2Node_MakeArray_Array2) == 0x0000F8, "Member 'WB_InGameMiniMap_C_UpdateDisplay::K2Node_MakeArray_Array2' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, CallFunc_Format_ReturnValue1) == 0x000108, "Member 'WB_InGameMiniMap_C_UpdateDisplay::CallFunc_Format_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, CallFunc_Format_ReturnValue2) == 0x000120, "Member 'WB_InGameMiniMap_C_UpdateDisplay::CallFunc_Format_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, CallFunc_Conv_IntToText_ReturnValue) == 0x000138, "Member 'WB_InGameMiniMap_C_UpdateDisplay::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000150, "Member 'WB_InGameMiniMap_C_UpdateDisplay::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, CallFunc_LessEqual_IntInt_ReturnValue1) == 0x000151, "Member 'WB_InGameMiniMap_C_UpdateDisplay::CallFunc_LessEqual_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, CallFunc_Conv_IntToText_ReturnValue1) == 0x000158, "Member 'WB_InGameMiniMap_C_UpdateDisplay::CallFunc_Conv_IntToText_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, K2Node_Select_Default) == 0x000170, "Member 'WB_InGameMiniMap_C_UpdateDisplay::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, Temp_bool_Variable1) == 0x000188, "Member 'WB_InGameMiniMap_C_UpdateDisplay::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, K2Node_MakeStruct_FormatArgumentData2) == 0x000190, "Member 'WB_InGameMiniMap_C_UpdateDisplay::K2Node_MakeStruct_FormatArgumentData2' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, K2Node_Select1_Default) == 0x0001D0, "Member 'WB_InGameMiniMap_C_UpdateDisplay::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, CallFunc_Greater_IntInt_ReturnValue) == 0x0001E8, "Member 'WB_InGameMiniMap_C_UpdateDisplay::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, K2Node_MakeStruct_FormatArgumentData3) == 0x0001F0, "Member 'WB_InGameMiniMap_C_UpdateDisplay::K2Node_MakeStruct_FormatArgumentData3' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, K2Node_MakeArray_Array3) == 0x000230, "Member 'WB_InGameMiniMap_C_UpdateDisplay::K2Node_MakeArray_Array3' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, CallFunc_Format_ReturnValue3) == 0x000240, "Member 'WB_InGameMiniMap_C_UpdateDisplay::CallFunc_Format_ReturnValue3' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, CallFunc_Percent_IntInt_ReturnValue) == 0x000258, "Member 'WB_InGameMiniMap_C_UpdateDisplay::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, CallFunc_Divide_IntInt_ReturnValue) == 0x00025C, "Member 'WB_InGameMiniMap_C_UpdateDisplay::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, CallFunc_GetGameState_ReturnValue2) == 0x000260, "Member 'WB_InGameMiniMap_C_UpdateDisplay::CallFunc_GetGameState_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, K2Node_DynamicCast_AsBP_AJBBattle_Game_State) == 0x000268, "Member 'WB_InGameMiniMap_C_UpdateDisplay::K2Node_DynamicCast_AsBP_AJBBattle_Game_State' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, K2Node_DynamicCast_bSuccess) == 0x000270, "Member 'WB_InGameMiniMap_C_UpdateDisplay::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, CallFunc_GetTimeSecondsUntilStartReduction_Seconds) == 0x000274, "Member 'WB_InGameMiniMap_C_UpdateDisplay::CallFunc_GetTimeSecondsUntilStartReduction_Seconds' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, CallFunc_IsProceedingReduction_ReturnValue) == 0x000278, "Member 'WB_InGameMiniMap_C_UpdateDisplay::CallFunc_IsProceedingReduction_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_UpdateDisplay, CallFunc_GetTimeSecondsUntilCompleteReduction_Seconds) == 0x00027C, "Member 'WB_InGameMiniMap_C_UpdateDisplay::CallFunc_GetTimeSecondsUntilCompleteReduction_Seconds' has a wrong offset!");

// Function WB_InGameMiniMap.WB_InGameMiniMap_C.IsEnabledTick
// 0x0018 (0x0018 - 0x0000)
struct WB_InGameMiniMap_C_IsEnabledTick final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAJBGameInstance_bSuccess;              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBGameInstance_C*                  CallFunc_GetAJBGameInstance_AJB_Game_Instance;     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayingReplay_ReturnValue;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_InGameMiniMap_C_IsEnabledTick) == 0x000008, "Wrong alignment on WB_InGameMiniMap_C_IsEnabledTick");
static_assert(sizeof(WB_InGameMiniMap_C_IsEnabledTick) == 0x000018, "Wrong size on WB_InGameMiniMap_C_IsEnabledTick");
static_assert(offsetof(WB_InGameMiniMap_C_IsEnabledTick, ReturnValue) == 0x000000, "Member 'WB_InGameMiniMap_C_IsEnabledTick::ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_IsEnabledTick, CallFunc_GetAJBGameInstance_bSuccess) == 0x000001, "Member 'WB_InGameMiniMap_C_IsEnabledTick::CallFunc_GetAJBGameInstance_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_IsEnabledTick, CallFunc_GetAJBGameInstance_AJB_Game_Instance) == 0x000008, "Member 'WB_InGameMiniMap_C_IsEnabledTick::CallFunc_GetAJBGameInstance_AJB_Game_Instance' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_IsEnabledTick, CallFunc_IsPlayingReplay_ReturnValue) == 0x000010, "Member 'WB_InGameMiniMap_C_IsEnabledTick::CallFunc_IsPlayingReplay_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_IsEnabledTick, CallFunc_Not_PreBool_ReturnValue) == 0x000011, "Member 'WB_InGameMiniMap_C_IsEnabledTick::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_IsEnabledTick, CallFunc_BooleanAND_ReturnValue) == 0x000012, "Member 'WB_InGameMiniMap_C_IsEnabledTick::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_InGameMiniMap_C_IsEnabledTick, CallFunc_BooleanOR_ReturnValue) == 0x000013, "Member 'WB_InGameMiniMap_C_IsEnabledTick::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

}

