#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBCollisionDetectorBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBCollisionDetectorBase.BP_AJBCollisionDetectorBase_C
// 0x0028 (0x0350 - 0x0328)
class ABP_AJBCollisionDetectorBase_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(Transient, DuplicateTransient)
	class USphereComponent*                       Sphere;                                            // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         OverlapIntervalDistance;                           // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeftOverlapDistance;                               // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PreLocation;                                       // 0x0340(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBCollisionDetectorBase(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ChangeEnable(bool bEnable);
	void ReceiveTick(float DeltaSeconds);
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void UserConstructionScript();
	void CheckPossibleOverlapDistance(bool* bPossible);
	void SetLeftOverlapDistance();
	void UpdateLeftOverlapDistance();
	void UpdatePreLocation();
	void ResetLeftOverlapDistance();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBCollisionDetectorBase_C">();
	}
	static class ABP_AJBCollisionDetectorBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBCollisionDetectorBase_C>();
	}
};
static_assert(alignof(ABP_AJBCollisionDetectorBase_C) == 0x000008, "Wrong alignment on ABP_AJBCollisionDetectorBase_C");
static_assert(sizeof(ABP_AJBCollisionDetectorBase_C) == 0x000350, "Wrong size on ABP_AJBCollisionDetectorBase_C");
static_assert(offsetof(ABP_AJBCollisionDetectorBase_C, UberGraphFrame) == 0x000328, "Member 'ABP_AJBCollisionDetectorBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AJBCollisionDetectorBase_C, Sphere) == 0x000330, "Member 'ABP_AJBCollisionDetectorBase_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_AJBCollisionDetectorBase_C, OverlapIntervalDistance) == 0x000338, "Member 'ABP_AJBCollisionDetectorBase_C::OverlapIntervalDistance' has a wrong offset!");
static_assert(offsetof(ABP_AJBCollisionDetectorBase_C, LeftOverlapDistance) == 0x00033C, "Member 'ABP_AJBCollisionDetectorBase_C::LeftOverlapDistance' has a wrong offset!");
static_assert(offsetof(ABP_AJBCollisionDetectorBase_C, PreLocation) == 0x000340, "Member 'ABP_AJBCollisionDetectorBase_C::PreLocation' has a wrong offset!");

}

