#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UnderwaterAreaVolume

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_UnderwaterAreaVolume.BP_UnderwaterAreaVolume_C
// 0x0018 (0x0340 - 0x0328)
class ABP_UnderwaterAreaVolume_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(Transient, DuplicateTransient)
	class UBoxComponent*                          UnderwaterAreaVolume;                              // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_UnderwaterAreaVolume(int32 EntryPoint);
	void SpawnWaterSurfaceSplashEffect(const struct FVector& Location, class AActor* Owner_0);
	void OnEndComponentOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnBeginComponentOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void GetWaterSurfaceZ(float* Z);
	void CalcProjectileEffectPosition(class ABP_AJBInGameProjectile_C* AJBInGame, struct FVector* Intersection);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_UnderwaterAreaVolume_C">();
	}
	static class ABP_UnderwaterAreaVolume_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_UnderwaterAreaVolume_C>();
	}
};
static_assert(alignof(ABP_UnderwaterAreaVolume_C) == 0x000008, "Wrong alignment on ABP_UnderwaterAreaVolume_C");
static_assert(sizeof(ABP_UnderwaterAreaVolume_C) == 0x000340, "Wrong size on ABP_UnderwaterAreaVolume_C");
static_assert(offsetof(ABP_UnderwaterAreaVolume_C, UberGraphFrame) == 0x000328, "Member 'ABP_UnderwaterAreaVolume_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_UnderwaterAreaVolume_C, UnderwaterAreaVolume) == 0x000330, "Member 'ABP_UnderwaterAreaVolume_C::UnderwaterAreaVolume' has a wrong offset!");
static_assert(offsetof(ABP_UnderwaterAreaVolume_C, DefaultSceneRoot) == 0x000338, "Member 'ABP_UnderwaterAreaVolume_C::DefaultSceneRoot' has a wrong offset!");

}

