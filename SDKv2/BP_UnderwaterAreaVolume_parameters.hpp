#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UnderwaterAreaVolume

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_UnderwaterAreaVolume.BP_UnderwaterAreaVolume_C.ExecuteUbergraph_BP_UnderwaterAreaVolume
// 0x03A0 (0x03A0 - 0x0000)
struct BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	class UPrimitiveComponent*                    K2Node_CustomEvent_OverlappedComponent;            // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_OtherActor;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_CustomEvent_OtherComp;                      // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_OtherBodyIndex;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_Location;                       // 0x0034(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_Owner;                          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameProjectile_C*              K2Node_DynamicCast_AsBP_AJBIn_Game_Projectile;     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_UnderwaterAffecter_C*               CallFunc_GetComponentByClass_ReturnValue;          // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_CalcProjectileEffectPosition_Intersection; // 0x006C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0078(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X1;                           // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y1;                           // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z1;                           // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameMovableStand_SXP_C*        K2Node_DynamicCast_AsBP_AJBIn_Game_Movable_Stand_SXP; // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBDamageActor_C*                   K2Node_DynamicCast_AsBP_AJBDamage_Actor;           // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00CC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue2;                    // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X2;                           // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y2;                           // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z2;                           // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue1;         // 0x00EC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue1;       // 0x00F8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X3;                           // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y3;                           // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z3;                           // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X4;                           // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y4;                           // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z4;                           // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue1;          // 0x011D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11E[0x2];                                      // 0x011E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_UnderwaterAffecter_C*               CallFunc_GetComponentByClass_ReturnValue1;         // 0x0120(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWaterSurfaceZ_Z;                       // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult)> K2Node_CreateDelegate_OutputDelegate1;             // 0x0130(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWaterSurfaceZ_Z1;                      // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue1;             // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14B[0x5];                                      // 0x014B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	const class ABP_UnderwaterAreaVolume_C*       Temp_object_Variable;                              // 0x0150(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWaterSurfaceZ_Z2;                      // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_CustomEvent_OverlappedComponent1;           // 0x0160(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_OtherActor1;                    // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_CustomEvent_OtherComp1;                     // 0x0170(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_OtherBodyIndex1;                // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bFromSweep;                     // 0x017C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17D[0x3];                                      // 0x017D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_CustomEvent_SweepResult;                    // 0x0180(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class ABP_AJBInGameProjectile_C*              K2Node_DynamicCast_AsBP_AJBIn_Game_Projectile1;    // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_211[0x7];                                      // 0x0211(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue3;                    // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalcProjectileEffectPosition_Intersection1; // 0x0220(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X5;                           // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y5;                           // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z5;                           // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue2;       // 0x0238(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_244[0x4];                                      // 0x0244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue4;                    // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X6;                           // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y6;                           // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z6;                           // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25C[0x4];                                      // 0x025C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameMovableStand_SXP_C*        K2Node_DynamicCast_AsBP_AJBIn_Game_Movable_Stand_SXP1; // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess4;                      // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue2;             // 0x0269(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26A[0x2];                                      // 0x026A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue2;         // 0x026C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBDamageActor_C*                   K2Node_DynamicCast_AsBP_AJBDamage_Actor1;          // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess5;                      // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_281[0x3];                                      // 0x0281(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X7;                           // 0x0284(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y7;                           // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z7;                           // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue5;                    // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue3;         // 0x0298(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X8;                           // 0x02A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y8;                           // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z8;                           // 0x02AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X9;                           // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y9;                           // 0x02B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z9;                           // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue3;       // 0x02BC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C9[0x3];                                      // 0x02C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X10;                          // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y10;                          // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z10;                          // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UActorComponent*                        CallFunc_AddComponentByClass_ReturnValue;          // 0x02D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue3;             // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E1[0x7];                                      // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_UnderwaterAffecter_C*               K2Node_DynamicCast_AsBP_Underwater_Affecter;       // 0x02E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess6;                      // 0x02F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x02F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F2[0x6];                                      // 0x02F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue3;                     // 0x0301(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_302[0x6];                                      // 0x0302(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_UnderwaterAffecter_C*               CallFunc_GetComponentByClass_ReturnValue2;         // 0x0308(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWaterSurfaceZ_Z3;                      // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue1;     // 0x0314(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue4;                     // 0x0315(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue3;                  // 0x0316(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x0317(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetWaterSurfaceZ_Z4;                      // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x031C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class ABP_UnderwaterAreaVolume_C*       Temp_object_Variable1;                             // 0x0328(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWaterSurfaceZ_Z5;                      // 0x0330(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class ABP_UnderwaterAreaVolume_C*       Temp_object_Variable2;                             // 0x0338(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue1;                  // 0x0340(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlane                                 CallFunc_MakePlaneFromPointAndNormal_ReturnValue;  // 0x0350(0x0010)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_LinePlaneIntersection_T;                  // 0x0360(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LinePlaneIntersection_Intersection;       // 0x0364(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LinePlaneIntersection_ReturnValue;        // 0x0370(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_371[0x3];                                      // 0x0371(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWaterSurfaceZ_Z6;                      // 0x0374(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWaterSurfaceZ_Z7;                      // 0x0378(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue2;                  // 0x037C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue3;                  // 0x0388(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume) == 0x000010, "Wrong alignment on BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume");
static_assert(sizeof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume) == 0x0003A0, "Wrong size on BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, EntryPoint) == 0x000000, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, K2Node_CustomEvent_OverlappedComponent) == 0x000018, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::K2Node_CustomEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, K2Node_CustomEvent_OtherActor) == 0x000020, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::K2Node_CustomEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, K2Node_CustomEvent_OtherComp) == 0x000028, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::K2Node_CustomEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, K2Node_CustomEvent_OtherBodyIndex) == 0x000030, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::K2Node_CustomEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, K2Node_CustomEvent_Location) == 0x000034, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::K2Node_CustomEvent_Location' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, K2Node_CustomEvent_Owner) == 0x000040, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::K2Node_CustomEvent_Owner' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, K2Node_DynamicCast_AsBP_AJBIn_Game_Projectile) == 0x000048, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::K2Node_DynamicCast_AsBP_AJBIn_Game_Projectile' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_GetComponentByClass_ReturnValue) == 0x000058, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_GetOwner_ReturnValue) == 0x000060, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_IsValid_ReturnValue) == 0x000068, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_CalcProjectileEffectPosition_Intersection) == 0x00006C, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_CalcProjectileEffectPosition_Intersection' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_GetActorForwardVector_ReturnValue) == 0x000078, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BreakVector_X) == 0x000084, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BreakVector_Y) == 0x000088, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BreakVector_Z) == 0x00008C, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BreakVector_X1) == 0x000090, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BreakVector_X1' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BreakVector_Y1) == 0x000094, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BreakVector_Y1' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BreakVector_Z1) == 0x000098, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BreakVector_Z1' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_GetOwner_ReturnValue1) == 0x0000A0, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000A8, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, K2Node_DynamicCast_AsBP_AJBIn_Game_Movable_Stand_SXP) == 0x0000B0, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::K2Node_DynamicCast_AsBP_AJBIn_Game_Movable_Stand_SXP' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, K2Node_DynamicCast_bSuccess1) == 0x0000B8, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, K2Node_DynamicCast_AsBP_AJBDamage_Actor) == 0x0000C0, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::K2Node_DynamicCast_AsBP_AJBDamage_Actor' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, K2Node_DynamicCast_bSuccess2) == 0x0000C8, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000CC, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_GetOwner_ReturnValue2) == 0x0000D8, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_GetOwner_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BreakVector_X2) == 0x0000E0, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BreakVector_X2' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BreakVector_Y2) == 0x0000E4, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BreakVector_Y2' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BreakVector_Z2) == 0x0000E8, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BreakVector_Z2' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_K2_GetActorLocation_ReturnValue1) == 0x0000EC, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_K2_GetActorLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_GetActorForwardVector_ReturnValue1) == 0x0000F8, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_GetActorForwardVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BreakVector_X3) == 0x000104, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BreakVector_X3' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BreakVector_Y3) == 0x000108, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BreakVector_Y3' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BreakVector_Z3) == 0x00010C, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BreakVector_Z3' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BreakVector_X4) == 0x000110, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BreakVector_X4' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BreakVector_Y4) == 0x000114, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BreakVector_Y4' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BreakVector_Z4) == 0x000118, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BreakVector_Z4' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_IsValid_ReturnValue1) == 0x00011C, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_Greater_FloatFloat_ReturnValue1) == 0x00011D, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_Greater_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_GetComponentByClass_ReturnValue1) == 0x000120, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_GetComponentByClass_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_IsValid_ReturnValue2) == 0x000128, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_GetWaterSurfaceZ_Z) == 0x00012C, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_GetWaterSurfaceZ_Z' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, K2Node_CreateDelegate_OutputDelegate1) == 0x000130, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_Less_FloatFloat_ReturnValue) == 0x000140, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_GetWaterSurfaceZ_Z1) == 0x000144, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_GetWaterSurfaceZ_Z1' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BooleanAND_ReturnValue) == 0x000148, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_Less_FloatFloat_ReturnValue1) == 0x000149, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_Less_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BooleanAND_ReturnValue1) == 0x00014A, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, Temp_object_Variable) == 0x000150, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_GetWaterSurfaceZ_Z2) == 0x000158, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_GetWaterSurfaceZ_Z2' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, K2Node_CustomEvent_OverlappedComponent1) == 0x000160, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::K2Node_CustomEvent_OverlappedComponent1' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, K2Node_CustomEvent_OtherActor1) == 0x000168, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::K2Node_CustomEvent_OtherActor1' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, K2Node_CustomEvent_OtherComp1) == 0x000170, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::K2Node_CustomEvent_OtherComp1' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, K2Node_CustomEvent_OtherBodyIndex1) == 0x000178, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::K2Node_CustomEvent_OtherBodyIndex1' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, K2Node_CustomEvent_bFromSweep) == 0x00017C, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::K2Node_CustomEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, K2Node_CustomEvent_SweepResult) == 0x000180, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::K2Node_CustomEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, K2Node_DynamicCast_AsBP_AJBIn_Game_Projectile1) == 0x000208, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::K2Node_DynamicCast_AsBP_AJBIn_Game_Projectile1' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, K2Node_DynamicCast_bSuccess3) == 0x000210, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_GetOwner_ReturnValue3) == 0x000218, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_GetOwner_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_CalcProjectileEffectPosition_Intersection1) == 0x000220, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_CalcProjectileEffectPosition_Intersection1' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BreakVector_X5) == 0x00022C, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BreakVector_X5' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BreakVector_Y5) == 0x000230, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BreakVector_Y5' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BreakVector_Z5) == 0x000234, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BreakVector_Z5' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_GetActorForwardVector_ReturnValue2) == 0x000238, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_GetActorForwardVector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_GetOwner_ReturnValue4) == 0x000248, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_GetOwner_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BreakVector_X6) == 0x000250, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BreakVector_X6' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BreakVector_Y6) == 0x000254, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BreakVector_Y6' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BreakVector_Z6) == 0x000258, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BreakVector_Z6' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, K2Node_DynamicCast_AsBP_AJBIn_Game_Movable_Stand_SXP1) == 0x000260, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::K2Node_DynamicCast_AsBP_AJBIn_Game_Movable_Stand_SXP1' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, K2Node_DynamicCast_bSuccess4) == 0x000268, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::K2Node_DynamicCast_bSuccess4' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_Less_FloatFloat_ReturnValue2) == 0x000269, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_Less_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_K2_GetActorLocation_ReturnValue2) == 0x00026C, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_K2_GetActorLocation_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, K2Node_DynamicCast_AsBP_AJBDamage_Actor1) == 0x000278, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::K2Node_DynamicCast_AsBP_AJBDamage_Actor1' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, K2Node_DynamicCast_bSuccess5) == 0x000280, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::K2Node_DynamicCast_bSuccess5' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BreakVector_X7) == 0x000284, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BreakVector_X7' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BreakVector_Y7) == 0x000288, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BreakVector_Y7' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BreakVector_Z7) == 0x00028C, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BreakVector_Z7' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_GetOwner_ReturnValue5) == 0x000290, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_GetOwner_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_K2_GetActorLocation_ReturnValue3) == 0x000298, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_K2_GetActorLocation_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BreakVector_X8) == 0x0002A4, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BreakVector_X8' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BreakVector_Y8) == 0x0002A8, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BreakVector_Y8' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BreakVector_Z8) == 0x0002AC, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BreakVector_Z8' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BreakVector_X9) == 0x0002B0, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BreakVector_X9' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BreakVector_Y9) == 0x0002B4, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BreakVector_Y9' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BreakVector_Z9) == 0x0002B8, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BreakVector_Z9' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_GetActorForwardVector_ReturnValue3) == 0x0002BC, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_GetActorForwardVector_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0002C8, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BreakVector_X10) == 0x0002CC, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BreakVector_X10' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BreakVector_Y10) == 0x0002D0, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BreakVector_Y10' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BreakVector_Z10) == 0x0002D4, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BreakVector_Z10' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_AddComponentByClass_ReturnValue) == 0x0002D8, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_AddComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_Less_FloatFloat_ReturnValue3) == 0x0002E0, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_Less_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, K2Node_DynamicCast_AsBP_Underwater_Affecter) == 0x0002E8, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::K2Node_DynamicCast_AsBP_Underwater_Affecter' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, K2Node_DynamicCast_bSuccess6) == 0x0002F0, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::K2Node_DynamicCast_bSuccess6' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BooleanAND_ReturnValue2) == 0x0002F1, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_GetObjectClass_ReturnValue) == 0x0002F8, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_ClassIsChildOf_ReturnValue) == 0x000300, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_IsValid_ReturnValue3) == 0x000301, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_IsValid_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_GetComponentByClass_ReturnValue2) == 0x000308, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_GetComponentByClass_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_GetWaterSurfaceZ_Z3) == 0x000310, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_GetWaterSurfaceZ_Z3' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_GreaterEqual_FloatFloat_ReturnValue1) == 0x000314, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_GreaterEqual_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_IsValid_ReturnValue4) == 0x000315, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_IsValid_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_BooleanAND_ReturnValue3) == 0x000316, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_BooleanAND_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_IsServer_ReturnValue) == 0x000317, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_IsServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_GetWaterSurfaceZ_Z4) == 0x000318, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_GetWaterSurfaceZ_Z4' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_MakeVector_ReturnValue) == 0x00031C, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, Temp_object_Variable1) == 0x000328, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::Temp_object_Variable1' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_GetWaterSurfaceZ_Z5) == 0x000330, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_GetWaterSurfaceZ_Z5' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, Temp_object_Variable2) == 0x000338, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::Temp_object_Variable2' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_MakeVector_ReturnValue1) == 0x000340, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_MakeVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_MakePlaneFromPointAndNormal_ReturnValue) == 0x000350, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_MakePlaneFromPointAndNormal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_LinePlaneIntersection_T) == 0x000360, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_LinePlaneIntersection_T' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_LinePlaneIntersection_Intersection) == 0x000364, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_LinePlaneIntersection_Intersection' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_LinePlaneIntersection_ReturnValue) == 0x000370, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_LinePlaneIntersection_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_GetWaterSurfaceZ_Z6) == 0x000374, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_GetWaterSurfaceZ_Z6' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_GetWaterSurfaceZ_Z7) == 0x000378, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_GetWaterSurfaceZ_Z7' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_MakeVector_ReturnValue2) == 0x00037C, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_MakeVector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume, CallFunc_MakeVector_ReturnValue3) == 0x000388, "Member 'BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume::CallFunc_MakeVector_ReturnValue3' has a wrong offset!");

// Function BP_UnderwaterAreaVolume.BP_UnderwaterAreaVolume_C.SpawnWaterSurfaceSplashEffect
// 0x0018 (0x0018 - 0x0000)
struct BP_UnderwaterAreaVolume_C_SpawnWaterSurfaceSplashEffect final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Owner_0;                                           // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_UnderwaterAreaVolume_C_SpawnWaterSurfaceSplashEffect) == 0x000008, "Wrong alignment on BP_UnderwaterAreaVolume_C_SpawnWaterSurfaceSplashEffect");
static_assert(sizeof(BP_UnderwaterAreaVolume_C_SpawnWaterSurfaceSplashEffect) == 0x000018, "Wrong size on BP_UnderwaterAreaVolume_C_SpawnWaterSurfaceSplashEffect");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_SpawnWaterSurfaceSplashEffect, Location) == 0x000000, "Member 'BP_UnderwaterAreaVolume_C_SpawnWaterSurfaceSplashEffect::Location' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_SpawnWaterSurfaceSplashEffect, Owner_0) == 0x000010, "Member 'BP_UnderwaterAreaVolume_C_SpawnWaterSurfaceSplashEffect::Owner_0' has a wrong offset!");

// Function BP_UnderwaterAreaVolume.BP_UnderwaterAreaVolume_C.OnEndComponentOverlap
// 0x0020 (0x0020 - 0x0000)
struct BP_UnderwaterAreaVolume_C_OnEndComponentOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_UnderwaterAreaVolume_C_OnEndComponentOverlap) == 0x000008, "Wrong alignment on BP_UnderwaterAreaVolume_C_OnEndComponentOverlap");
static_assert(sizeof(BP_UnderwaterAreaVolume_C_OnEndComponentOverlap) == 0x000020, "Wrong size on BP_UnderwaterAreaVolume_C_OnEndComponentOverlap");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_OnEndComponentOverlap, OverlappedComponent) == 0x000000, "Member 'BP_UnderwaterAreaVolume_C_OnEndComponentOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_OnEndComponentOverlap, OtherActor) == 0x000008, "Member 'BP_UnderwaterAreaVolume_C_OnEndComponentOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_OnEndComponentOverlap, OtherComp) == 0x000010, "Member 'BP_UnderwaterAreaVolume_C_OnEndComponentOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_OnEndComponentOverlap, OtherBodyIndex) == 0x000018, "Member 'BP_UnderwaterAreaVolume_C_OnEndComponentOverlap::OtherBodyIndex' has a wrong offset!");

// Function BP_UnderwaterAreaVolume.BP_UnderwaterAreaVolume_C.OnBeginComponentOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct BP_UnderwaterAreaVolume_C_OnBeginComponentOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_UnderwaterAreaVolume_C_OnBeginComponentOverlap) == 0x000008, "Wrong alignment on BP_UnderwaterAreaVolume_C_OnBeginComponentOverlap");
static_assert(sizeof(BP_UnderwaterAreaVolume_C_OnBeginComponentOverlap) == 0x0000A8, "Wrong size on BP_UnderwaterAreaVolume_C_OnBeginComponentOverlap");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_OnBeginComponentOverlap, OverlappedComponent) == 0x000000, "Member 'BP_UnderwaterAreaVolume_C_OnBeginComponentOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_OnBeginComponentOverlap, OtherActor) == 0x000008, "Member 'BP_UnderwaterAreaVolume_C_OnBeginComponentOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_OnBeginComponentOverlap, OtherComp) == 0x000010, "Member 'BP_UnderwaterAreaVolume_C_OnBeginComponentOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_OnBeginComponentOverlap, OtherBodyIndex) == 0x000018, "Member 'BP_UnderwaterAreaVolume_C_OnBeginComponentOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_OnBeginComponentOverlap, bFromSweep) == 0x00001C, "Member 'BP_UnderwaterAreaVolume_C_OnBeginComponentOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_OnBeginComponentOverlap, SweepResult) == 0x000020, "Member 'BP_UnderwaterAreaVolume_C_OnBeginComponentOverlap::SweepResult' has a wrong offset!");

// Function BP_UnderwaterAreaVolume.BP_UnderwaterAreaVolume_C.GetWaterSurfaceZ
// 0x0058 (0x0058 - 0x0000)
struct BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ final
{
public:
	float                                         Z;                                                 // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0004(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorScale3D_ReturnValue;              // 0x0010(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X1;                           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y1;                           // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z1;                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetScaledBoxExtent_ReturnValue;           // 0x0034(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X2;                           // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y2;                           // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z2;                           // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ) == 0x000004, "Wrong alignment on BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ");
static_assert(sizeof(BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ) == 0x000058, "Wrong size on BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ, Z) == 0x000000, "Member 'BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ::Z' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000004, "Member 'BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ, CallFunc_GetActorScale3D_ReturnValue) == 0x000010, "Member 'BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ::CallFunc_GetActorScale3D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ, CallFunc_BreakVector_X) == 0x00001C, "Member 'BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ, CallFunc_BreakVector_Y) == 0x000020, "Member 'BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ, CallFunc_BreakVector_Z) == 0x000024, "Member 'BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ, CallFunc_BreakVector_X1) == 0x000028, "Member 'BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ::CallFunc_BreakVector_X1' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ, CallFunc_BreakVector_Y1) == 0x00002C, "Member 'BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ::CallFunc_BreakVector_Y1' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ, CallFunc_BreakVector_Z1) == 0x000030, "Member 'BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ::CallFunc_BreakVector_Z1' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ, CallFunc_GetScaledBoxExtent_ReturnValue) == 0x000034, "Member 'BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ::CallFunc_GetScaledBoxExtent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ, CallFunc_BreakVector_X2) == 0x000040, "Member 'BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ::CallFunc_BreakVector_X2' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ, CallFunc_BreakVector_Y2) == 0x000044, "Member 'BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ::CallFunc_BreakVector_Y2' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ, CallFunc_BreakVector_Z2) == 0x000048, "Member 'BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ::CallFunc_BreakVector_Z2' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00004C, "Member 'BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000050, "Member 'BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ, CallFunc_Add_FloatFloat_ReturnValue) == 0x000054, "Member 'BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_UnderwaterAreaVolume.BP_UnderwaterAreaVolume_C.CalcProjectileEffectPosition
// 0x0080 (0x0080 - 0x0000)
struct BP_UnderwaterAreaVolume_C_CalcProjectileEffectPosition final
{
public:
	class ABP_AJBInGameProjectile_C*              AJBInGame;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Intersection;                                      // 0x0008(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWaterSurfaceZ_Z;                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0018(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0024(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0030(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlane                                 CallFunc_MakePlaneFromPointAndNormal_ReturnValue;  // 0x0040(0x0010)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0050(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x005C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinePlaneIntersection_T;                  // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LinePlaneIntersection_Intersection;       // 0x006C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LinePlaneIntersection_ReturnValue;        // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_UnderwaterAreaVolume_C_CalcProjectileEffectPosition) == 0x000010, "Wrong alignment on BP_UnderwaterAreaVolume_C_CalcProjectileEffectPosition");
static_assert(sizeof(BP_UnderwaterAreaVolume_C_CalcProjectileEffectPosition) == 0x000080, "Wrong size on BP_UnderwaterAreaVolume_C_CalcProjectileEffectPosition");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_CalcProjectileEffectPosition, AJBInGame) == 0x000000, "Member 'BP_UnderwaterAreaVolume_C_CalcProjectileEffectPosition::AJBInGame' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_CalcProjectileEffectPosition, Intersection) == 0x000008, "Member 'BP_UnderwaterAreaVolume_C_CalcProjectileEffectPosition::Intersection' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_CalcProjectileEffectPosition, CallFunc_GetWaterSurfaceZ_Z) == 0x000014, "Member 'BP_UnderwaterAreaVolume_C_CalcProjectileEffectPosition::CallFunc_GetWaterSurfaceZ_Z' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_CalcProjectileEffectPosition, CallFunc_GetActorForwardVector_ReturnValue) == 0x000018, "Member 'BP_UnderwaterAreaVolume_C_CalcProjectileEffectPosition::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_CalcProjectileEffectPosition, CallFunc_MakeVector_ReturnValue) == 0x000024, "Member 'BP_UnderwaterAreaVolume_C_CalcProjectileEffectPosition::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_CalcProjectileEffectPosition, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000030, "Member 'BP_UnderwaterAreaVolume_C_CalcProjectileEffectPosition::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_CalcProjectileEffectPosition, CallFunc_MakePlaneFromPointAndNormal_ReturnValue) == 0x000040, "Member 'BP_UnderwaterAreaVolume_C_CalcProjectileEffectPosition::CallFunc_MakePlaneFromPointAndNormal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_CalcProjectileEffectPosition, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000050, "Member 'BP_UnderwaterAreaVolume_C_CalcProjectileEffectPosition::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_CalcProjectileEffectPosition, CallFunc_Add_VectorVector_ReturnValue) == 0x00005C, "Member 'BP_UnderwaterAreaVolume_C_CalcProjectileEffectPosition::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_CalcProjectileEffectPosition, CallFunc_LinePlaneIntersection_T) == 0x000068, "Member 'BP_UnderwaterAreaVolume_C_CalcProjectileEffectPosition::CallFunc_LinePlaneIntersection_T' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_CalcProjectileEffectPosition, CallFunc_LinePlaneIntersection_Intersection) == 0x00006C, "Member 'BP_UnderwaterAreaVolume_C_CalcProjectileEffectPosition::CallFunc_LinePlaneIntersection_Intersection' has a wrong offset!");
static_assert(offsetof(BP_UnderwaterAreaVolume_C_CalcProjectileEffectPosition, CallFunc_LinePlaneIntersection_ReturnValue) == 0x000078, "Member 'BP_UnderwaterAreaVolume_C_CalcProjectileEffectPosition::CallFunc_LinePlaneIntersection_ReturnValue' has a wrong offset!");

}

