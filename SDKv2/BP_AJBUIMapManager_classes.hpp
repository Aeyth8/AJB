#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBUIMapManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "ST_WidgetSafeZone_structs.hpp"
#include "AJB_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBUIMapManager.BP_AJBUIMapManager_C
// 0x00D0 (0x03F8 - 0x0328)
class ABP_AJBUIMapManager_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnStickedPlayerMarker;                             // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnStickedPairMarker;                               // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnChangedPlayerIcon;                               // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnChangedPairIcon;                                 // 0x0368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FVector2D                              InvalidPosition;                                   // 0x0378(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   ResetMarker;                                       // 0x0380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bEnableMapPinSound;                                // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_AJBSignalPinBase_C*>         SignalPins;                                        // 0x0398(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          ReservedNewPin;                                    // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A9[0x3];                                      // 0x03A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDistanceStickSignalPin;                         // 0x03AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnSpawnSignalPin;                                  // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         MaxSignalPinSpawn;                                 // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C4[0x4];                                      // 0x03C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               LastViewTarget;                                    // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_WidgetSafeZone                     SignalPinPlaceableArea;                            // 0x03D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_AJBSignalPinBase_C*>         RemoveReservedPin;                                 // 0x03E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         CautionPinReceptionTime;                           // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnStickedPlayerMarker__DelegateSignature(const struct FVector2D& NormalizedPosition, class UWB_LandmarkableMap_C* MapWidget, const struct FGameplayTag& SignalTypeTag, bool FromMap);
	void OnStickedPairMarker__DelegateSignature(const struct FVector2D& NormalizedPosition, class UWB_LandmarkableMap_C* MapWidget, const struct FGameplayTag& SignalTypeTag);
	void OnChangedPlayerIcon__DelegateSignature(const struct FVector2D& NormalizedPosition, float IconAngle, class UWB_LandmarkableMap_C* MapWidget);
	void OnChangedPairIcon__DelegateSignature(const struct FVector2D& NormalizedPosition, float IconAngle, class UWB_LandmarkableMap_C* MapWidget, bool bVisibleIcon, int32 PairHP);
	void ResetMarker__DelegateSignature();
	void OnSpawnSignalPin__DelegateSignature(const struct FVector& Location, const struct FGameplayTag& SignalPinType, bool bIsRemove, bool bWithSound);
	void ExecuteUbergraph_BP_AJBUIMapManager(int32 EntryPoint);
	void OnSetViewTargetToNewSpectator_Event();
	void OnStickedMaker_Pair(const struct FVector2D& NormalizedPosition, class UWB_LandmarkableMap_C* MapWidget, const struct FGameplayTag& Tag);
	void OnStickedMaker_Owner(const struct FVector2D& NormalizedPosition, class UWB_LandmarkableMap_C* MapWidget, const struct FGameplayTag& Tag, bool FromMap);
	void DisabledMapPinSound();
	void EnabledMapPinSound();
	void OnStickedMarker_Event(const struct FVector2D& NormalizedPosition, class UWB_LandmarkableMap_C* MapWidget, const struct FGameplayTag& SignalTypeTag, bool bIsPair, bool FromMap);
	void ReceiveBeginPlay();
	void DestroyAllSignalPin_Local(bool bInstant);
	void PlaySignalPinDestroySound(const struct FGameplayTag& SignalPinType);
	void PlaySignalPinSpawnSound(const struct FGameplayTag& SignalPinType);
	void DestroySignalPin(const struct FGameplayTag& SignalPinType, const struct FVector& Location, bool bIsPair, bool bIsLocalOnly, bool bIsIntention);
	void DestroySignalPinFromActor(class ABP_AJBSignalPinBase_C* SignalPinActor, bool bIsIntention);
	void SpawnSignalPinFromDisplayTap(const struct FVector& Spawn_Transform_Location, const struct FGameplayTag& SignalPinTag);
	void OnClick();
	void StickCautionPin();
	void ReserveNewPin();
	void SpawnSignalPin(bool Pair, const struct FVector& Spawn_Transform_Location, const struct FGameplayTag& SignalPinTag, bool bIsRemove, bool bWithSound);
	void DestroySignalPinType(const struct FGameplayTag& SignalTypeTag, bool bIsPair, bool bIsIntention);
	void SpawnSignalPinFromMap(const struct FVector2D& SignalPinlocation, const struct FGameplayTag& SignalTypeTag, bool bIsPair);
	void UserConstructionScript();
	void GetSignalPinActorFromTag(const struct FGameplayTag& SignalPinTag, class UClass** ReturnActor);
	void TryTracePinPosition(struct FVector* Location, struct FGameplayTag* SignalPinType);
	void CalcMapNormalizePosition(const struct FVector& Position, struct FVector2D* NormalizePosition);
	void GetCountOwningItemPin(int32* ItemPinNum);
	void GetOldestItemlPin(class ABP_AJBSignalPinBase_C** OldestItemPin);
	void GetAllWindowActors(TArray<class AActor*>* WindowActors);
	void TryTraceCautionPosition(struct FVector* Location);
	bool CanStickNewPin();
	void IsInClickableArea(bool* bIsClickable);
	void GetAllIgnoreCharacter(TArray<class ABP_AJBInGameCharacter_C*>* IgnoreCharacters);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBUIMapManager_C">();
	}
	static class ABP_AJBUIMapManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBUIMapManager_C>();
	}
};
static_assert(alignof(ABP_AJBUIMapManager_C) == 0x000008, "Wrong alignment on ABP_AJBUIMapManager_C");
static_assert(sizeof(ABP_AJBUIMapManager_C) == 0x0003F8, "Wrong size on ABP_AJBUIMapManager_C");
static_assert(offsetof(ABP_AJBUIMapManager_C, UberGraphFrame) == 0x000328, "Member 'ABP_AJBUIMapManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AJBUIMapManager_C, DefaultSceneRoot) == 0x000330, "Member 'ABP_AJBUIMapManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_AJBUIMapManager_C, OnStickedPlayerMarker) == 0x000338, "Member 'ABP_AJBUIMapManager_C::OnStickedPlayerMarker' has a wrong offset!");
static_assert(offsetof(ABP_AJBUIMapManager_C, OnStickedPairMarker) == 0x000348, "Member 'ABP_AJBUIMapManager_C::OnStickedPairMarker' has a wrong offset!");
static_assert(offsetof(ABP_AJBUIMapManager_C, OnChangedPlayerIcon) == 0x000358, "Member 'ABP_AJBUIMapManager_C::OnChangedPlayerIcon' has a wrong offset!");
static_assert(offsetof(ABP_AJBUIMapManager_C, OnChangedPairIcon) == 0x000368, "Member 'ABP_AJBUIMapManager_C::OnChangedPairIcon' has a wrong offset!");
static_assert(offsetof(ABP_AJBUIMapManager_C, InvalidPosition) == 0x000378, "Member 'ABP_AJBUIMapManager_C::InvalidPosition' has a wrong offset!");
static_assert(offsetof(ABP_AJBUIMapManager_C, ResetMarker) == 0x000380, "Member 'ABP_AJBUIMapManager_C::ResetMarker' has a wrong offset!");
static_assert(offsetof(ABP_AJBUIMapManager_C, bEnableMapPinSound) == 0x000390, "Member 'ABP_AJBUIMapManager_C::bEnableMapPinSound' has a wrong offset!");
static_assert(offsetof(ABP_AJBUIMapManager_C, SignalPins) == 0x000398, "Member 'ABP_AJBUIMapManager_C::SignalPins' has a wrong offset!");
static_assert(offsetof(ABP_AJBUIMapManager_C, ReservedNewPin) == 0x0003A8, "Member 'ABP_AJBUIMapManager_C::ReservedNewPin' has a wrong offset!");
static_assert(offsetof(ABP_AJBUIMapManager_C, MaxDistanceStickSignalPin) == 0x0003AC, "Member 'ABP_AJBUIMapManager_C::MaxDistanceStickSignalPin' has a wrong offset!");
static_assert(offsetof(ABP_AJBUIMapManager_C, OnSpawnSignalPin) == 0x0003B0, "Member 'ABP_AJBUIMapManager_C::OnSpawnSignalPin' has a wrong offset!");
static_assert(offsetof(ABP_AJBUIMapManager_C, MaxSignalPinSpawn) == 0x0003C0, "Member 'ABP_AJBUIMapManager_C::MaxSignalPinSpawn' has a wrong offset!");
static_assert(offsetof(ABP_AJBUIMapManager_C, LastViewTarget) == 0x0003C8, "Member 'ABP_AJBUIMapManager_C::LastViewTarget' has a wrong offset!");
static_assert(offsetof(ABP_AJBUIMapManager_C, SignalPinPlaceableArea) == 0x0003D0, "Member 'ABP_AJBUIMapManager_C::SignalPinPlaceableArea' has a wrong offset!");
static_assert(offsetof(ABP_AJBUIMapManager_C, RemoveReservedPin) == 0x0003E0, "Member 'ABP_AJBUIMapManager_C::RemoveReservedPin' has a wrong offset!");
static_assert(offsetof(ABP_AJBUIMapManager_C, CautionPinReceptionTime) == 0x0003F0, "Member 'ABP_AJBUIMapManager_C::CautionPinReceptionTime' has a wrong offset!");

}

