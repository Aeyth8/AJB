#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBMostHigh

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_AJBPassiveSkillBase_classes.hpp"
#include "AJB_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBMostHigh.BP_AJBMostHigh_C
// 0x0048 (0x0238 - 0x01F0)
class UBP_AJBMostHigh_C final : public UBP_AJBPassiveSkillBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBMostHigh_C;                   // 0x01F0(0x0008)(Transient, DuplicateTransient)
	int32                                         HealingValue;                                      // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveSpeedRate;                                     // 0x01FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MPMaxRate;                                         // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_204[0x4];                                      // 0x0204(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameParticleEffect_C*          ActiveParticle;                                    // 0x0208(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          InactiveParticle;                                  // 0x0210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CharacterJumpSpeedScale;                           // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EffectiveTimeSec_Server;                           // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxEffectiveTimeSec_Server;                        // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebugShowEffectiveTime;                           // 0x0224(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_225[0x3];                                      // 0x0225(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GravityScale;                                      // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinLandingStopHeight;                              // 0x022C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxLandingStopHeight;                              // 0x0230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBMostHigh(int32 EntryPoint);
	void OnCritical();
	void ROC_SendEffectiveTime(float EffectiveTimeSec);
	void SendEffectiveTimeServer();
	void OnBecomeLastSurvivor();
	void OnCharacterDead(const struct FGameplayTag& DamageType, class AActor* DeadActor, class AActor* DamageCauser);
	void OnMostHigh();
	void MC_ContinueMostHigh();
	void ContinueActivate_Server();
	void GenerateAttachedParticle(const struct FGameplayTag& ParticleTag_0, class ABP_AJBInGameParticleEffect_C*& ParticleEffect, bool bUseSocketAttach, class FName AttachedSocketName);
	void CountUpEffectiveTimeSec_Server(float AdditionalTimeSec, bool bCheckBehaviorActive);
	void TryUpdateMaxEffectiveTimeSec_Server();
	void OnContinuedParticleActivated();
	void PlaySE(class UObject* Causer);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void OnActionInactivate(bool bTriggeredByStand);
	void OnActionActivate(bool bTriggeredByStand);
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBMostHigh_C">();
	}
	static class UBP_AJBMostHigh_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBMostHigh_C>();
	}
};
static_assert(alignof(UBP_AJBMostHigh_C) == 0x000008, "Wrong alignment on UBP_AJBMostHigh_C");
static_assert(sizeof(UBP_AJBMostHigh_C) == 0x000238, "Wrong size on UBP_AJBMostHigh_C");
static_assert(offsetof(UBP_AJBMostHigh_C, UberGraphFrame_BP_AJBMostHigh_C) == 0x0001F0, "Member 'UBP_AJBMostHigh_C::UberGraphFrame_BP_AJBMostHigh_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBMostHigh_C, HealingValue) == 0x0001F8, "Member 'UBP_AJBMostHigh_C::HealingValue' has a wrong offset!");
static_assert(offsetof(UBP_AJBMostHigh_C, MoveSpeedRate) == 0x0001FC, "Member 'UBP_AJBMostHigh_C::MoveSpeedRate' has a wrong offset!");
static_assert(offsetof(UBP_AJBMostHigh_C, MPMaxRate) == 0x000200, "Member 'UBP_AJBMostHigh_C::MPMaxRate' has a wrong offset!");
static_assert(offsetof(UBP_AJBMostHigh_C, ActiveParticle) == 0x000208, "Member 'UBP_AJBMostHigh_C::ActiveParticle' has a wrong offset!");
static_assert(offsetof(UBP_AJBMostHigh_C, InactiveParticle) == 0x000210, "Member 'UBP_AJBMostHigh_C::InactiveParticle' has a wrong offset!");
static_assert(offsetof(UBP_AJBMostHigh_C, CharacterJumpSpeedScale) == 0x000218, "Member 'UBP_AJBMostHigh_C::CharacterJumpSpeedScale' has a wrong offset!");
static_assert(offsetof(UBP_AJBMostHigh_C, EffectiveTimeSec_Server) == 0x00021C, "Member 'UBP_AJBMostHigh_C::EffectiveTimeSec_Server' has a wrong offset!");
static_assert(offsetof(UBP_AJBMostHigh_C, MaxEffectiveTimeSec_Server) == 0x000220, "Member 'UBP_AJBMostHigh_C::MaxEffectiveTimeSec_Server' has a wrong offset!");
static_assert(offsetof(UBP_AJBMostHigh_C, bDebugShowEffectiveTime) == 0x000224, "Member 'UBP_AJBMostHigh_C::bDebugShowEffectiveTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBMostHigh_C, GravityScale) == 0x000228, "Member 'UBP_AJBMostHigh_C::GravityScale' has a wrong offset!");
static_assert(offsetof(UBP_AJBMostHigh_C, MinLandingStopHeight) == 0x00022C, "Member 'UBP_AJBMostHigh_C::MinLandingStopHeight' has a wrong offset!");
static_assert(offsetof(UBP_AJBMostHigh_C, MaxLandingStopHeight) == 0x000230, "Member 'UBP_AJBMostHigh_C::MaxLandingStopHeight' has a wrong offset!");

}

