#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SplineMoatTest4

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SplineMoatTest4.BP_SplineMoatTest4_C
// 0x0030 (0x0358 - 0x0328)
class ABP_SplineMoatTest4_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(Transient, DuplicateTransient)
	class USplineComponent*                       Spline;                                            // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Roll;                                              // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Height;                                            // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Top_Offset;                                        // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Top_Scale;                                         // 0x034C(0x0008)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_SplineMoatTest4(int32 EntryPoint);
	void Construct();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SplineMoatTest4_C">();
	}
	static class ABP_SplineMoatTest4_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SplineMoatTest4_C>();
	}
};
static_assert(alignof(ABP_SplineMoatTest4_C) == 0x000008, "Wrong alignment on ABP_SplineMoatTest4_C");
static_assert(sizeof(ABP_SplineMoatTest4_C) == 0x000358, "Wrong size on ABP_SplineMoatTest4_C");
static_assert(offsetof(ABP_SplineMoatTest4_C, UberGraphFrame) == 0x000328, "Member 'ABP_SplineMoatTest4_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoatTest4_C, Spline) == 0x000330, "Member 'ABP_SplineMoatTest4_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoatTest4_C, DefaultSceneRoot) == 0x000338, "Member 'ABP_SplineMoatTest4_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoatTest4_C, Roll) == 0x000340, "Member 'ABP_SplineMoatTest4_C::Roll' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoatTest4_C, Height) == 0x000344, "Member 'ABP_SplineMoatTest4_C::Height' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoatTest4_C, Top_Offset) == 0x000348, "Member 'ABP_SplineMoatTest4_C::Top_Offset' has a wrong offset!");
static_assert(offsetof(ABP_SplineMoatTest4_C, Top_Scale) == 0x00034C, "Member 'ABP_SplineMoatTest4_C::Top_Scale' has a wrong offset!");

}

