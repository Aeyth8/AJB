#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTS_AJBMovementForMovableStand

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AIModule_structs.hpp"


namespace SDK::Params
{

// Function BTS_AJBMovementForMovableStand.BTS_AJBMovementForMovableStand_C.ExecuteUbergraph_BTS_AJBMovementForMovableStand
// 0x01C8 (0x01C8 - 0x0000)
struct BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetBlackboardValueAsObject_ReturnValue;   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetRawActorFromBlackboardCharacterValue_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_LookAtTargetActor;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPitchDiffNormalizedLookAtTarget_ReturnValue; // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetYawDiffNormalizedLookAtTarget_ReturnValue; // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetBlackboardValueAsVector_ReturnValue;   // 0x0038(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidVectorValue_ReturnValue;           // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPitchDiffNormalizedLookAtDir_ReturnValue; // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBlackboardValueAsVector_ReturnValue1;  // 0x004C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetYawDiffNormalizedLookAtDir_ReturnValue; // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue1;                      // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue2;                      // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetBlackboardValueAsFloat_ReturnValue;    // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetBlackboardValueAsVector_ReturnValue2;  // 0x0078(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_AJBInGameAIRecognition_C*           CallFunc_GetRecognition_ReturnValue;               // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_AJBInGameAIInputProxy_C*            CallFunc_GetInput_ReturnValue;                     // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeLiteralFloat_ReturnValue;             // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPitchDiffNormalizedDefault_ReturnValue; // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue3;         // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue4;         // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue5;         // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue3;                      // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetYawDiffNormalizedDefault_ReturnValue;  // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue4;                      // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue6;         // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue5;                      // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          K2Node_Event_OwnerController1;                     // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn1;                      // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlackboardComponent*                   CallFunc_GetBlackboard_ReturnValue;                // 0x00F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasDestinationToGo_ReturnValue;           // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameAIImaginaryCharacter_C*    CallFunc_GetControllingImaginaryCharacter_ReturnValue; // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetRotation_ReturnValue;                  // 0x0110(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x011C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocation_ReturnValue;                  // 0x0128(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsIndoor_ReturnValue;                     // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0138(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_AI_ProjectVectorOnCharacterForwardRightZero_ReturnValue; // 0x0144(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue1;       // 0x0150(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x015C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_AI_ProjectVectorOnCharacterForwardRightZero_ReturnValue1; // 0x0174(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue1;                      // 0x0180(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X1;                           // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y1;                           // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z1;                           // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue2;       // 0x0198(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_AI_ProjectVectorOnCharacterForwardRightZero_ReturnValue2; // 0x01A4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue2;                      // 0x01B0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X2;                           // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y2;                           // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z2;                           // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand) == 0x000008, "Wrong alignment on BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand");
static_assert(sizeof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand) == 0x0001C8, "Wrong size on BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, EntryPoint) == 0x000000, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::EntryPoint' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, Temp_bool_Variable) == 0x000004, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_GetBlackboardValueAsObject_ReturnValue) == 0x000008, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_GetBlackboardValueAsObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_GetRawActorFromBlackboardCharacterValue_ReturnValue) == 0x000010, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_GetRawActorFromBlackboardCharacterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, K2Node_CustomEvent_LookAtTargetActor) == 0x000018, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::K2Node_CustomEvent_LookAtTargetActor' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_GetPitchDiffNormalizedLookAtTarget_ReturnValue) == 0x000020, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_GetPitchDiffNormalizedLookAtTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_GetYawDiffNormalizedLookAtTarget_ReturnValue) == 0x000024, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_GetYawDiffNormalizedLookAtTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000028, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_IsValid_ReturnValue) == 0x00002C, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_FClamp_ReturnValue) == 0x000030, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, Temp_bool_IsClosed_Variable) == 0x000034, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_GetBlackboardValueAsVector_ReturnValue) == 0x000038, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_GetBlackboardValueAsVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_IsValidVectorValue_ReturnValue) == 0x000044, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_IsValidVectorValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_GetPitchDiffNormalizedLookAtDir_ReturnValue) == 0x000048, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_GetPitchDiffNormalizedLookAtDir_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_GetBlackboardValueAsVector_ReturnValue1) == 0x00004C, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_GetBlackboardValueAsVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x000058, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_GetYawDiffNormalizedLookAtDir_ReturnValue) == 0x00005C, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_GetYawDiffNormalizedLookAtDir_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_FClamp_ReturnValue1) == 0x000060, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_FClamp_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x000064, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_FClamp_ReturnValue2) == 0x000068, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_FClamp_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_GetBlackboardValueAsFloat_ReturnValue) == 0x00006C, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_GetBlackboardValueAsFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_Add_FloatFloat_ReturnValue) == 0x000070, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, Temp_bool_Has_Been_Initd_Variable) == 0x000074, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_GetBlackboardValueAsVector_ReturnValue2) == 0x000078, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_GetBlackboardValueAsVector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, K2Node_Event_OwnerController) == 0x000088, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, K2Node_Event_ControlledPawn) == 0x000090, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_GetRecognition_ReturnValue) == 0x000098, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_GetRecognition_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_GetInput_ReturnValue) == 0x0000A0, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_GetInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_MakeLiteralFloat_ReturnValue) == 0x0000A8, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_MakeLiteralFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_GetPitchDiffNormalizedDefault_ReturnValue) == 0x0000AC, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_GetPitchDiffNormalizedDefault_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_Multiply_FloatFloat_ReturnValue3) == 0x0000B0, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_Multiply_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_Multiply_FloatFloat_ReturnValue4) == 0x0000B4, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_Multiply_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_Multiply_FloatFloat_ReturnValue5) == 0x0000B8, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_Multiply_FloatFloat_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_FClamp_ReturnValue3) == 0x0000BC, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_FClamp_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, K2Node_Select_Default) == 0x0000C0, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_GetYawDiffNormalizedDefault_ReturnValue) == 0x0000C4, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_GetYawDiffNormalizedDefault_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_FClamp_ReturnValue4) == 0x0000C8, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_FClamp_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_Multiply_FloatFloat_ReturnValue6) == 0x0000CC, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_Multiply_FloatFloat_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_Abs_ReturnValue) == 0x0000D0, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_FClamp_ReturnValue5) == 0x0000D4, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_FClamp_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_Less_FloatFloat_ReturnValue) == 0x0000D8, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_SelectFloat_ReturnValue) == 0x0000DC, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, K2Node_Event_OwnerController1) == 0x0000E0, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::K2Node_Event_OwnerController1' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, K2Node_Event_ControlledPawn1) == 0x0000E8, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::K2Node_Event_ControlledPawn1' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, K2Node_Event_DeltaSeconds) == 0x0000F0, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_GetBlackboard_ReturnValue) == 0x0000F8, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_GetBlackboard_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_HasDestinationToGo_ReturnValue) == 0x000100, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_HasDestinationToGo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_GetControllingImaginaryCharacter_ReturnValue) == 0x000108, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_GetControllingImaginaryCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_GetRotation_ReturnValue) == 0x000110, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_GetRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_GetForwardVector_ReturnValue) == 0x00011C, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_GetLocation_ReturnValue) == 0x000128, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_GetLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_IsIndoor_ReturnValue) == 0x000134, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_IsIndoor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000138, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_AI_ProjectVectorOnCharacterForwardRightZero_ReturnValue) == 0x000144, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_AI_ProjectVectorOnCharacterForwardRightZero_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_Subtract_VectorVector_ReturnValue1) == 0x000150, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_Subtract_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_Normal_ReturnValue) == 0x00015C, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_BreakVector_X) == 0x000168, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_BreakVector_Y) == 0x00016C, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_BreakVector_Z) == 0x000170, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_AI_ProjectVectorOnCharacterForwardRightZero_ReturnValue1) == 0x000174, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_AI_ProjectVectorOnCharacterForwardRightZero_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_Normal_ReturnValue1) == 0x000180, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_Normal_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_BreakVector_X1) == 0x00018C, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_BreakVector_X1' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_BreakVector_Y1) == 0x000190, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_BreakVector_Y1' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_BreakVector_Z1) == 0x000194, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_BreakVector_Z1' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_Subtract_VectorVector_ReturnValue2) == 0x000198, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_Subtract_VectorVector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_AI_ProjectVectorOnCharacterForwardRightZero_ReturnValue2) == 0x0001A4, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_AI_ProjectVectorOnCharacterForwardRightZero_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_Normal_ReturnValue2) == 0x0001B0, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_Normal_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_BreakVector_X2) == 0x0001BC, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_BreakVector_X2' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_BreakVector_Y2) == 0x0001C0, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_BreakVector_Y2' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand, CallFunc_BreakVector_Z2) == 0x0001C4, "Member 'BTS_AJBMovementForMovableStand_C_ExecuteUbergraph_BTS_AJBMovementForMovableStand::CallFunc_BreakVector_Z2' has a wrong offset!");

// Function BTS_AJBMovementForMovableStand.BTS_AJBMovementForMovableStand_C.InputMovementLookingAtTarget
// 0x0008 (0x0008 - 0x0000)
struct BTS_AJBMovementForMovableStand_C_InputMovementLookingAtTarget final
{
public:
	class AActor*                                 LookAtTargetActor;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_AJBMovementForMovableStand_C_InputMovementLookingAtTarget) == 0x000008, "Wrong alignment on BTS_AJBMovementForMovableStand_C_InputMovementLookingAtTarget");
static_assert(sizeof(BTS_AJBMovementForMovableStand_C_InputMovementLookingAtTarget) == 0x000008, "Wrong size on BTS_AJBMovementForMovableStand_C_InputMovementLookingAtTarget");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_InputMovementLookingAtTarget, LookAtTargetActor) == 0x000000, "Member 'BTS_AJBMovementForMovableStand_C_InputMovementLookingAtTarget::LookAtTargetActor' has a wrong offset!");

// Function BTS_AJBMovementForMovableStand.BTS_AJBMovementForMovableStand_C.ReceiveActivationAI
// 0x0010 (0x0010 - 0x0000)
struct BTS_AJBMovementForMovableStand_C_ReceiveActivationAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_AJBMovementForMovableStand_C_ReceiveActivationAI) == 0x000008, "Wrong alignment on BTS_AJBMovementForMovableStand_C_ReceiveActivationAI");
static_assert(sizeof(BTS_AJBMovementForMovableStand_C_ReceiveActivationAI) == 0x000010, "Wrong size on BTS_AJBMovementForMovableStand_C_ReceiveActivationAI");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ReceiveActivationAI, OwnerController) == 0x000000, "Member 'BTS_AJBMovementForMovableStand_C_ReceiveActivationAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ReceiveActivationAI, ControlledPawn) == 0x000008, "Member 'BTS_AJBMovementForMovableStand_C_ReceiveActivationAI::ControlledPawn' has a wrong offset!");

// Function BTS_AJBMovementForMovableStand.BTS_AJBMovementForMovableStand_C.ReceiveTickAI
// 0x0018 (0x0018 - 0x0000)
struct BTS_AJBMovementForMovableStand_C_ReceiveTickAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_AJBMovementForMovableStand_C_ReceiveTickAI) == 0x000008, "Wrong alignment on BTS_AJBMovementForMovableStand_C_ReceiveTickAI");
static_assert(sizeof(BTS_AJBMovementForMovableStand_C_ReceiveTickAI) == 0x000018, "Wrong size on BTS_AJBMovementForMovableStand_C_ReceiveTickAI");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ReceiveTickAI, OwnerController) == 0x000000, "Member 'BTS_AJBMovementForMovableStand_C_ReceiveTickAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ReceiveTickAI, ControlledPawn) == 0x000008, "Member 'BTS_AJBMovementForMovableStand_C_ReceiveTickAI::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_ReceiveTickAI, DeltaSeconds) == 0x000010, "Member 'BTS_AJBMovementForMovableStand_C_ReceiveTickAI::DeltaSeconds' has a wrong offset!");

// Function BTS_AJBMovementForMovableStand.BTS_AJBMovementForMovableStand_C.GetYawDiffNormalizedDefault
// 0x0068 (0x0068 - 0x0000)
struct BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedDefault final
{
public:
	struct FBlackboardKeySelector                 DestinationKey;                                    // 0x0000(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	float                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBlackboardValueAsVector_ReturnValue;   // 0x002C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0044(0x000C)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll1;                       // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch1;                      // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw1;                        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_NormalizeAxis_ReturnValue;                // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedDefault) == 0x000008, "Wrong alignment on BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedDefault");
static_assert(sizeof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedDefault) == 0x000068, "Wrong size on BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedDefault");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedDefault, DestinationKey) == 0x000000, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedDefault::DestinationKey' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedDefault, ReturnValue) == 0x000028, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedDefault::ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedDefault, CallFunc_GetBlackboardValueAsVector_ReturnValue) == 0x00002C, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedDefault::CallFunc_GetBlackboardValueAsVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedDefault, CallFunc_BreakRotator_Roll) == 0x000038, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedDefault::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedDefault, CallFunc_BreakRotator_Pitch) == 0x00003C, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedDefault::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedDefault, CallFunc_BreakRotator_Yaw) == 0x000040, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedDefault::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedDefault, CallFunc_FindLookAtRotation_ReturnValue) == 0x000044, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedDefault::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedDefault, CallFunc_BreakRotator_Roll1) == 0x000050, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedDefault::CallFunc_BreakRotator_Roll1' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedDefault, CallFunc_BreakRotator_Pitch1) == 0x000054, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedDefault::CallFunc_BreakRotator_Pitch1' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedDefault, CallFunc_BreakRotator_Yaw1) == 0x000058, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedDefault::CallFunc_BreakRotator_Yaw1' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedDefault, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00005C, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedDefault::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedDefault, CallFunc_NormalizeAxis_ReturnValue) == 0x000060, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedDefault::CallFunc_NormalizeAxis_ReturnValue' has a wrong offset!");

// Function BTS_AJBMovementForMovableStand.BTS_AJBMovementForMovableStand_C.InputMovement
// 0x0010 (0x0010 - 0x0000)
struct BTS_AJBMovementForMovableStand_C_InputMovement final
{
public:
	float                                         Forward;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Right;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Turn;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LookUp;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_AJBMovementForMovableStand_C_InputMovement) == 0x000004, "Wrong alignment on BTS_AJBMovementForMovableStand_C_InputMovement");
static_assert(sizeof(BTS_AJBMovementForMovableStand_C_InputMovement) == 0x000010, "Wrong size on BTS_AJBMovementForMovableStand_C_InputMovement");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_InputMovement, Forward) == 0x000000, "Member 'BTS_AJBMovementForMovableStand_C_InputMovement::Forward' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_InputMovement, Right) == 0x000004, "Member 'BTS_AJBMovementForMovableStand_C_InputMovement::Right' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_InputMovement, Turn) == 0x000008, "Member 'BTS_AJBMovementForMovableStand_C_InputMovement::Turn' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_InputMovement, LookUp) == 0x00000C, "Member 'BTS_AJBMovementForMovableStand_C_InputMovement::LookUp' has a wrong offset!");

// Function BTS_AJBMovementForMovableStand.BTS_AJBMovementForMovableStand_C.GetYawDiffNormalizedLookAtTarget
// 0x0048 (0x0048 - 0x0000)
struct BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtTarget final
{
public:
	class AActor*                                 LookAtTargetActor;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x000C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0024(0x000C)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll1;                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch1;                      // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw1;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_NormalizeAxis_ReturnValue;                // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtTarget) == 0x000008, "Wrong alignment on BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtTarget");
static_assert(sizeof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtTarget) == 0x000048, "Wrong size on BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtTarget");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtTarget, LookAtTargetActor) == 0x000000, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtTarget::LookAtTargetActor' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtTarget, ReturnValue) == 0x000008, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtTarget::ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtTarget, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00000C, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtTarget::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtTarget, CallFunc_BreakRotator_Roll) == 0x000018, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtTarget::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtTarget, CallFunc_BreakRotator_Pitch) == 0x00001C, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtTarget::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtTarget, CallFunc_BreakRotator_Yaw) == 0x000020, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtTarget::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtTarget, CallFunc_FindLookAtRotation_ReturnValue) == 0x000024, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtTarget::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtTarget, CallFunc_BreakRotator_Roll1) == 0x000030, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtTarget::CallFunc_BreakRotator_Roll1' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtTarget, CallFunc_BreakRotator_Pitch1) == 0x000034, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtTarget::CallFunc_BreakRotator_Pitch1' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtTarget, CallFunc_BreakRotator_Yaw1) == 0x000038, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtTarget::CallFunc_BreakRotator_Yaw1' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtTarget, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00003C, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtTarget::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtTarget, CallFunc_NormalizeAxis_ReturnValue) == 0x000040, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtTarget::CallFunc_NormalizeAxis_ReturnValue' has a wrong offset!");

// Function BTS_AJBMovementForMovableStand.BTS_AJBMovementForMovableStand_C.GetYawDiffNormalizedLookAtDir
// 0x0068 (0x0068 - 0x0000)
struct BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtDir final
{
public:
	struct FBlackboardKeySelector                 LookAtDirKey;                                      // 0x0000(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	float                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBlackboardValueAsVector_ReturnValue;   // 0x002C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x0044(0x000C)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll1;                       // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch1;                      // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw1;                        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_NormalizeAxis_ReturnValue;                // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtDir) == 0x000008, "Wrong alignment on BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtDir");
static_assert(sizeof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtDir) == 0x000068, "Wrong size on BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtDir");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtDir, LookAtDirKey) == 0x000000, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtDir::LookAtDirKey' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtDir, ReturnValue) == 0x000028, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtDir::ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtDir, CallFunc_GetBlackboardValueAsVector_ReturnValue) == 0x00002C, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtDir::CallFunc_GetBlackboardValueAsVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtDir, CallFunc_BreakRotator_Roll) == 0x000038, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtDir::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtDir, CallFunc_BreakRotator_Pitch) == 0x00003C, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtDir::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtDir, CallFunc_BreakRotator_Yaw) == 0x000040, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtDir::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtDir, CallFunc_MakeRotFromX_ReturnValue) == 0x000044, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtDir::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtDir, CallFunc_BreakRotator_Roll1) == 0x000050, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtDir::CallFunc_BreakRotator_Roll1' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtDir, CallFunc_BreakRotator_Pitch1) == 0x000054, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtDir::CallFunc_BreakRotator_Pitch1' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtDir, CallFunc_BreakRotator_Yaw1) == 0x000058, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtDir::CallFunc_BreakRotator_Yaw1' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtDir, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00005C, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtDir::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtDir, CallFunc_NormalizeAxis_ReturnValue) == 0x000060, "Member 'BTS_AJBMovementForMovableStand_C_GetYawDiffNormalizedLookAtDir::CallFunc_NormalizeAxis_ReturnValue' has a wrong offset!");

// Function BTS_AJBMovementForMovableStand.BTS_AJBMovementForMovableStand_C.GetPitchDiffNormalizedDefault
// 0x0068 (0x0068 - 0x0000)
struct BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedDefault final
{
public:
	struct FBlackboardKeySelector                 DestinationKey;                                    // 0x0000(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	float                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBlackboardValueAsVector_ReturnValue;   // 0x002C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0038(0x000C)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll1;                       // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch1;                      // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw1;                        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ClampAngle_ReturnValue;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_NormalizeAxis_ReturnValue;                // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedDefault) == 0x000008, "Wrong alignment on BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedDefault");
static_assert(sizeof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedDefault) == 0x000068, "Wrong size on BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedDefault");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedDefault, DestinationKey) == 0x000000, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedDefault::DestinationKey' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedDefault, ReturnValue) == 0x000028, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedDefault::ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedDefault, CallFunc_GetBlackboardValueAsVector_ReturnValue) == 0x00002C, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedDefault::CallFunc_GetBlackboardValueAsVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedDefault, CallFunc_FindLookAtRotation_ReturnValue) == 0x000038, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedDefault::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedDefault, CallFunc_BreakRotator_Roll) == 0x000044, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedDefault::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedDefault, CallFunc_BreakRotator_Pitch) == 0x000048, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedDefault::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedDefault, CallFunc_BreakRotator_Yaw) == 0x00004C, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedDefault::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedDefault, CallFunc_BreakRotator_Roll1) == 0x000050, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedDefault::CallFunc_BreakRotator_Roll1' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedDefault, CallFunc_BreakRotator_Pitch1) == 0x000054, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedDefault::CallFunc_BreakRotator_Pitch1' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedDefault, CallFunc_BreakRotator_Yaw1) == 0x000058, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedDefault::CallFunc_BreakRotator_Yaw1' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedDefault, CallFunc_ClampAngle_ReturnValue) == 0x00005C, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedDefault::CallFunc_ClampAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedDefault, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000060, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedDefault::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedDefault, CallFunc_NormalizeAxis_ReturnValue) == 0x000064, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedDefault::CallFunc_NormalizeAxis_ReturnValue' has a wrong offset!");

// Function BTS_AJBMovementForMovableStand.BTS_AJBMovementForMovableStand_C.GetPitchDiffNormalizedLookAtTarget
// 0x0048 (0x0048 - 0x0000)
struct BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtTarget final
{
public:
	class AActor*                                 LookAtTargetActor;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x000C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0024(0x000C)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll1;                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch1;                      // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw1;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_NormalizeAxis_ReturnValue;                // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtTarget) == 0x000008, "Wrong alignment on BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtTarget");
static_assert(sizeof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtTarget) == 0x000048, "Wrong size on BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtTarget");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtTarget, LookAtTargetActor) == 0x000000, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtTarget::LookAtTargetActor' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtTarget, ReturnValue) == 0x000008, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtTarget::ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtTarget, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00000C, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtTarget::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtTarget, CallFunc_BreakRotator_Roll) == 0x000018, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtTarget::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtTarget, CallFunc_BreakRotator_Pitch) == 0x00001C, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtTarget::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtTarget, CallFunc_BreakRotator_Yaw) == 0x000020, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtTarget::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtTarget, CallFunc_FindLookAtRotation_ReturnValue) == 0x000024, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtTarget::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtTarget, CallFunc_BreakRotator_Roll1) == 0x000030, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtTarget::CallFunc_BreakRotator_Roll1' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtTarget, CallFunc_BreakRotator_Pitch1) == 0x000034, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtTarget::CallFunc_BreakRotator_Pitch1' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtTarget, CallFunc_BreakRotator_Yaw1) == 0x000038, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtTarget::CallFunc_BreakRotator_Yaw1' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtTarget, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00003C, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtTarget::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtTarget, CallFunc_NormalizeAxis_ReturnValue) == 0x000040, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtTarget::CallFunc_NormalizeAxis_ReturnValue' has a wrong offset!");

// Function BTS_AJBMovementForMovableStand.BTS_AJBMovementForMovableStand_C.GetPitchDiffNormalizedLookAtDir
// 0x0068 (0x0068 - 0x0000)
struct BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtDir final
{
public:
	struct FBlackboardKeySelector                 LookAtDirKey;                                      // 0x0000(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	float                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBlackboardValueAsVector_ReturnValue;   // 0x002C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x0044(0x000C)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll1;                       // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch1;                      // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw1;                        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ClampAngle_ReturnValue;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_NormalizeAxis_ReturnValue;                // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtDir) == 0x000008, "Wrong alignment on BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtDir");
static_assert(sizeof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtDir) == 0x000068, "Wrong size on BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtDir");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtDir, LookAtDirKey) == 0x000000, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtDir::LookAtDirKey' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtDir, ReturnValue) == 0x000028, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtDir::ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtDir, CallFunc_GetBlackboardValueAsVector_ReturnValue) == 0x00002C, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtDir::CallFunc_GetBlackboardValueAsVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtDir, CallFunc_BreakRotator_Roll) == 0x000038, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtDir::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtDir, CallFunc_BreakRotator_Pitch) == 0x00003C, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtDir::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtDir, CallFunc_BreakRotator_Yaw) == 0x000040, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtDir::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtDir, CallFunc_MakeRotFromX_ReturnValue) == 0x000044, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtDir::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtDir, CallFunc_BreakRotator_Roll1) == 0x000050, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtDir::CallFunc_BreakRotator_Roll1' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtDir, CallFunc_BreakRotator_Pitch1) == 0x000054, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtDir::CallFunc_BreakRotator_Pitch1' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtDir, CallFunc_BreakRotator_Yaw1) == 0x000058, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtDir::CallFunc_BreakRotator_Yaw1' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtDir, CallFunc_ClampAngle_ReturnValue) == 0x00005C, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtDir::CallFunc_ClampAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtDir, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000060, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtDir::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtDir, CallFunc_NormalizeAxis_ReturnValue) == 0x000064, "Member 'BTS_AJBMovementForMovableStand_C_GetPitchDiffNormalizedLookAtDir::CallFunc_NormalizeAxis_ReturnValue' has a wrong offset!");

}

