#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameStand_KLQ

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_AJBInGameStand_KLQ.BP_AJBInGameStand_KLQ_C.ExecuteUbergraph_BP_AJBInGameStand_KLQ
// 0x0100 (0x0100 - 0x0000)
struct BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName2;                    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName1;                    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate1;             // 0x0030(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName;                     // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate2;             // 0x0048(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   Temp_name_Variable;                                // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable1;                              // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable1;                               // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable2;                              // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable3;                              // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_KIR_C*           K2Node_DynamicCast_AsBP_AJBIn_Game_Character_KIR;  // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckDuringInjectionSHA_bDuringInjectionSHA; // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select1_Default;                            // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayMontageCallbackProxy*              CallFunc_CreateProxyObjectForPlayMontage_ReturnValue; // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_Array_Get_Item;                           // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C6[0x2];                                       // 0x00C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_CustomEvent_NotifyName3;                    // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Value;                                // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate3;             // 0x00D8(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName4;                    // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate4;             // 0x00F0(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ) == 0x000008, "Wrong alignment on BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ");
static_assert(sizeof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ) == 0x000100, "Wrong size on BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ, EntryPoint) == 0x000000, "Member 'BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ, K2Node_CustomEvent_NotifyName2) == 0x000020, "Member 'BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ::K2Node_CustomEvent_NotifyName2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ, K2Node_CustomEvent_NotifyName1) == 0x000028, "Member 'BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ::K2Node_CustomEvent_NotifyName1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ, K2Node_CreateDelegate_OutputDelegate1) == 0x000030, "Member 'BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ, K2Node_CustomEvent_NotifyName) == 0x000040, "Member 'BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ::K2Node_CustomEvent_NotifyName' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ, K2Node_CreateDelegate_OutputDelegate2) == 0x000048, "Member 'BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ::K2Node_CreateDelegate_OutputDelegate2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ, Temp_name_Variable) == 0x000058, "Member 'BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ, Temp_bool_Variable) == 0x000060, "Member 'BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ, Temp_float_Variable) == 0x000064, "Member 'BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ, Temp_float_Variable1) == 0x000068, "Member 'BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ::Temp_float_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ, Temp_bool_Variable1) == 0x00006C, "Member 'BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ, Temp_float_Variable2) == 0x000070, "Member 'BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ::Temp_float_Variable2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ, Temp_float_Variable3) == 0x000074, "Member 'BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ::Temp_float_Variable3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ, Temp_int_Array_Index_Variable) == 0x000078, "Member 'BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ, CallFunc_GetOwner_ReturnValue) == 0x000080, "Member 'BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000088, "Member 'BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ, K2Node_DynamicCast_bSuccess) == 0x000090, "Member 'BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ, K2Node_DynamicCast_AsBP_AJBIn_Game_Character_KIR) == 0x000098, "Member 'BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ::K2Node_DynamicCast_AsBP_AJBIn_Game_Character_KIR' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ, K2Node_DynamicCast_bSuccess1) == 0x0000A0, "Member 'BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ, CallFunc_CheckDuringInjectionSHA_bDuringInjectionSHA) == 0x0000A1, "Member 'BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ::CallFunc_CheckDuringInjectionSHA_bDuringInjectionSHA' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ, K2Node_Select_Default) == 0x0000A4, "Member 'BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ, K2Node_Select1_Default) == 0x0000A8, "Member 'BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ, CallFunc_CreateProxyObjectForPlayMontage_ReturnValue) == 0x0000B0, "Member 'BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ::CallFunc_CreateProxyObjectForPlayMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ, CallFunc_Array_Get_Item) == 0x0000B8, "Member 'BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ, CallFunc_Array_Length_ReturnValue) == 0x0000C0, "Member 'BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ, CallFunc_Less_IntInt_ReturnValue) == 0x0000C4, "Member 'BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ, CallFunc_IsValid_ReturnValue) == 0x0000C5, "Member 'BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ, K2Node_CustomEvent_NotifyName3) == 0x0000C8, "Member 'BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ::K2Node_CustomEvent_NotifyName3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ, K2Node_Event_Value) == 0x0000D0, "Member 'BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ::K2Node_Event_Value' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ, K2Node_CreateDelegate_OutputDelegate3) == 0x0000D8, "Member 'BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ::K2Node_CreateDelegate_OutputDelegate3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ, K2Node_CustomEvent_NotifyName4) == 0x0000E8, "Member 'BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ::K2Node_CustomEvent_NotifyName4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ, K2Node_CreateDelegate_OutputDelegate4) == 0x0000F0, "Member 'BP_AJBInGameStand_KLQ_C_ExecuteUbergraph_BP_AJBInGameStand_KLQ::K2Node_CreateDelegate_OutputDelegate4' has a wrong offset!");

// Function BP_AJBInGameStand_KLQ.BP_AJBInGameStand_KLQ_C.OnCompleted_63DB416A4A9CEC40F179F290149A4A28
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) BP_AJBInGameStand_KLQ_C_OnCompleted_63DB416A4A9CEC40F179F290149A4A28 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_KLQ_C_OnCompleted_63DB416A4A9CEC40F179F290149A4A28) == 0x000008, "Wrong alignment on BP_AJBInGameStand_KLQ_C_OnCompleted_63DB416A4A9CEC40F179F290149A4A28");
static_assert(sizeof(BP_AJBInGameStand_KLQ_C_OnCompleted_63DB416A4A9CEC40F179F290149A4A28) == 0x000008, "Wrong size on BP_AJBInGameStand_KLQ_C_OnCompleted_63DB416A4A9CEC40F179F290149A4A28");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_OnCompleted_63DB416A4A9CEC40F179F290149A4A28, NotifyName) == 0x000000, "Member 'BP_AJBInGameStand_KLQ_C_OnCompleted_63DB416A4A9CEC40F179F290149A4A28::NotifyName' has a wrong offset!");

// Function BP_AJBInGameStand_KLQ.BP_AJBInGameStand_KLQ_C.OnBlendOut_63DB416A4A9CEC40F179F290149A4A28
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) BP_AJBInGameStand_KLQ_C_OnBlendOut_63DB416A4A9CEC40F179F290149A4A28 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_KLQ_C_OnBlendOut_63DB416A4A9CEC40F179F290149A4A28) == 0x000008, "Wrong alignment on BP_AJBInGameStand_KLQ_C_OnBlendOut_63DB416A4A9CEC40F179F290149A4A28");
static_assert(sizeof(BP_AJBInGameStand_KLQ_C_OnBlendOut_63DB416A4A9CEC40F179F290149A4A28) == 0x000008, "Wrong size on BP_AJBInGameStand_KLQ_C_OnBlendOut_63DB416A4A9CEC40F179F290149A4A28");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_OnBlendOut_63DB416A4A9CEC40F179F290149A4A28, NotifyName) == 0x000000, "Member 'BP_AJBInGameStand_KLQ_C_OnBlendOut_63DB416A4A9CEC40F179F290149A4A28::NotifyName' has a wrong offset!");

// Function BP_AJBInGameStand_KLQ.BP_AJBInGameStand_KLQ_C.OnInterrupted_63DB416A4A9CEC40F179F290149A4A28
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) BP_AJBInGameStand_KLQ_C_OnInterrupted_63DB416A4A9CEC40F179F290149A4A28 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_KLQ_C_OnInterrupted_63DB416A4A9CEC40F179F290149A4A28) == 0x000008, "Wrong alignment on BP_AJBInGameStand_KLQ_C_OnInterrupted_63DB416A4A9CEC40F179F290149A4A28");
static_assert(sizeof(BP_AJBInGameStand_KLQ_C_OnInterrupted_63DB416A4A9CEC40F179F290149A4A28) == 0x000008, "Wrong size on BP_AJBInGameStand_KLQ_C_OnInterrupted_63DB416A4A9CEC40F179F290149A4A28");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_OnInterrupted_63DB416A4A9CEC40F179F290149A4A28, NotifyName) == 0x000000, "Member 'BP_AJBInGameStand_KLQ_C_OnInterrupted_63DB416A4A9CEC40F179F290149A4A28::NotifyName' has a wrong offset!");

// Function BP_AJBInGameStand_KLQ.BP_AJBInGameStand_KLQ_C.OnNotifyBegin_63DB416A4A9CEC40F179F290149A4A28
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) BP_AJBInGameStand_KLQ_C_OnNotifyBegin_63DB416A4A9CEC40F179F290149A4A28 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_KLQ_C_OnNotifyBegin_63DB416A4A9CEC40F179F290149A4A28) == 0x000008, "Wrong alignment on BP_AJBInGameStand_KLQ_C_OnNotifyBegin_63DB416A4A9CEC40F179F290149A4A28");
static_assert(sizeof(BP_AJBInGameStand_KLQ_C_OnNotifyBegin_63DB416A4A9CEC40F179F290149A4A28) == 0x000008, "Wrong size on BP_AJBInGameStand_KLQ_C_OnNotifyBegin_63DB416A4A9CEC40F179F290149A4A28");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_OnNotifyBegin_63DB416A4A9CEC40F179F290149A4A28, NotifyName) == 0x000000, "Member 'BP_AJBInGameStand_KLQ_C_OnNotifyBegin_63DB416A4A9CEC40F179F290149A4A28::NotifyName' has a wrong offset!");

// Function BP_AJBInGameStand_KLQ.BP_AJBInGameStand_KLQ_C.OnNotifyEnd_63DB416A4A9CEC40F179F290149A4A28
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) BP_AJBInGameStand_KLQ_C_OnNotifyEnd_63DB416A4A9CEC40F179F290149A4A28 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_KLQ_C_OnNotifyEnd_63DB416A4A9CEC40F179F290149A4A28) == 0x000008, "Wrong alignment on BP_AJBInGameStand_KLQ_C_OnNotifyEnd_63DB416A4A9CEC40F179F290149A4A28");
static_assert(sizeof(BP_AJBInGameStand_KLQ_C_OnNotifyEnd_63DB416A4A9CEC40F179F290149A4A28) == 0x000008, "Wrong size on BP_AJBInGameStand_KLQ_C_OnNotifyEnd_63DB416A4A9CEC40F179F290149A4A28");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_OnNotifyEnd_63DB416A4A9CEC40F179F290149A4A28, NotifyName) == 0x000000, "Member 'BP_AJBInGameStand_KLQ_C_OnNotifyEnd_63DB416A4A9CEC40F179F290149A4A28::NotifyName' has a wrong offset!");

// Function BP_AJBInGameStand_KLQ.BP_AJBInGameStand_KLQ_C.GetStandAttackOffset
// 0x0038 (0x0038 - 0x0000)
struct BP_AJBInGameStand_KLQ_C_GetStandAttackOffset final
{
public:
	int32                                         CloseRangeSkillNo;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StandAttackOffset;                                 // 0x0004(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBCloseRangeSkill_C*               CallFunc_GetComponentByClass_ReturnValue;          // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameStand_KLQ_C_GetStandAttackOffset) == 0x000008, "Wrong alignment on BP_AJBInGameStand_KLQ_C_GetStandAttackOffset");
static_assert(sizeof(BP_AJBInGameStand_KLQ_C_GetStandAttackOffset) == 0x000038, "Wrong size on BP_AJBInGameStand_KLQ_C_GetStandAttackOffset");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetStandAttackOffset, CloseRangeSkillNo) == 0x000000, "Member 'BP_AJBInGameStand_KLQ_C_GetStandAttackOffset::CloseRangeSkillNo' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetStandAttackOffset, StandAttackOffset) == 0x000004, "Member 'BP_AJBInGameStand_KLQ_C_GetStandAttackOffset::StandAttackOffset' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetStandAttackOffset, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'BP_AJBInGameStand_KLQ_C_GetStandAttackOffset::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetStandAttackOffset, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000018, "Member 'BP_AJBInGameStand_KLQ_C_GetStandAttackOffset::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetStandAttackOffset, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_AJBInGameStand_KLQ_C_GetStandAttackOffset::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetStandAttackOffset, CallFunc_GetComponentByClass_ReturnValue) == 0x000028, "Member 'BP_AJBInGameStand_KLQ_C_GetStandAttackOffset::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetStandAttackOffset, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'BP_AJBInGameStand_KLQ_C_GetStandAttackOffset::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameStand_KLQ.BP_AJBInGameStand_KLQ_C.GetAttackRange
// 0x0040 (0x0040 - 0x0000)
struct BP_AJBInGameStand_KLQ_C_GetAttackRange final
{
public:
	int32                                         CloseRangeSkillNo;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackRange;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBCloseRangeSkill_C*               CallFunc_GetComponentByClass_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue1;              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_KLQ_C_GetAttackRange) == 0x000008, "Wrong alignment on BP_AJBInGameStand_KLQ_C_GetAttackRange");
static_assert(sizeof(BP_AJBInGameStand_KLQ_C_GetAttackRange) == 0x000040, "Wrong size on BP_AJBInGameStand_KLQ_C_GetAttackRange");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetAttackRange, CloseRangeSkillNo) == 0x000000, "Member 'BP_AJBInGameStand_KLQ_C_GetAttackRange::CloseRangeSkillNo' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetAttackRange, AttackRange) == 0x000004, "Member 'BP_AJBInGameStand_KLQ_C_GetAttackRange::AttackRange' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetAttackRange, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBInGameStand_KLQ_C_GetAttackRange::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetAttackRange, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000010, "Member 'BP_AJBInGameStand_KLQ_C_GetAttackRange::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetAttackRange, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AJBInGameStand_KLQ_C_GetAttackRange::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetAttackRange, CallFunc_GetComponentByClass_ReturnValue) == 0x000020, "Member 'BP_AJBInGameStand_KLQ_C_GetAttackRange::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetAttackRange, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_AJBInGameStand_KLQ_C_GetAttackRange::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetAttackRange, CallFunc_BreakVector_X) == 0x00002C, "Member 'BP_AJBInGameStand_KLQ_C_GetAttackRange::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetAttackRange, CallFunc_BreakVector_Y) == 0x000030, "Member 'BP_AJBInGameStand_KLQ_C_GetAttackRange::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetAttackRange, CallFunc_BreakVector_Z) == 0x000034, "Member 'BP_AJBInGameStand_KLQ_C_GetAttackRange::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetAttackRange, CallFunc_Add_FloatFloat_ReturnValue) == 0x000038, "Member 'BP_AJBInGameStand_KLQ_C_GetAttackRange::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetAttackRange, CallFunc_Add_FloatFloat_ReturnValue1) == 0x00003C, "Member 'BP_AJBInGameStand_KLQ_C_GetAttackRange::CallFunc_Add_FloatFloat_ReturnValue1' has a wrong offset!");

// Function BP_AJBInGameStand_KLQ.BP_AJBInGameStand_KLQ_C.GetAttackCollisionRadius
// 0x0030 (0x0030 - 0x0000)
struct BP_AJBInGameStand_KLQ_C_GetAttackCollisionRadius final
{
public:
	int32                                         CloseRangeSkillNo;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBCloseRangeSkill_C*               CallFunc_GetComponentByClass_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameStand_KLQ_C_GetAttackCollisionRadius) == 0x000008, "Wrong alignment on BP_AJBInGameStand_KLQ_C_GetAttackCollisionRadius");
static_assert(sizeof(BP_AJBInGameStand_KLQ_C_GetAttackCollisionRadius) == 0x000030, "Wrong size on BP_AJBInGameStand_KLQ_C_GetAttackCollisionRadius");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetAttackCollisionRadius, CloseRangeSkillNo) == 0x000000, "Member 'BP_AJBInGameStand_KLQ_C_GetAttackCollisionRadius::CloseRangeSkillNo' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetAttackCollisionRadius, Radius) == 0x000004, "Member 'BP_AJBInGameStand_KLQ_C_GetAttackCollisionRadius::Radius' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetAttackCollisionRadius, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBInGameStand_KLQ_C_GetAttackCollisionRadius::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetAttackCollisionRadius, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000010, "Member 'BP_AJBInGameStand_KLQ_C_GetAttackCollisionRadius::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetAttackCollisionRadius, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AJBInGameStand_KLQ_C_GetAttackCollisionRadius::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetAttackCollisionRadius, CallFunc_GetComponentByClass_ReturnValue) == 0x000020, "Member 'BP_AJBInGameStand_KLQ_C_GetAttackCollisionRadius::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetAttackCollisionRadius, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_AJBInGameStand_KLQ_C_GetAttackCollisionRadius::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameStand_KLQ.BP_AJBInGameStand_KLQ_C.GetAttackLocation
// 0x0068 (0x0068 - 0x0000)
struct BP_AJBInGameStand_KLQ_C_GetAttackLocation final
{
public:
	struct FVector                                TargetLocation;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x000C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetFixedLocation_Location;                // 0x002C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_AJBCloseRangeSkill_C*               CallFunc_GetComponentByClass_ReturnValue;          // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0040(0x000C)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0050(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x005C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_KLQ_C_GetAttackLocation) == 0x000008, "Wrong alignment on BP_AJBInGameStand_KLQ_C_GetAttackLocation");
static_assert(sizeof(BP_AJBInGameStand_KLQ_C_GetAttackLocation) == 0x000068, "Wrong size on BP_AJBInGameStand_KLQ_C_GetAttackLocation");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetAttackLocation, TargetLocation) == 0x000000, "Member 'BP_AJBInGameStand_KLQ_C_GetAttackLocation::TargetLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetAttackLocation, Location) == 0x00000C, "Member 'BP_AJBInGameStand_KLQ_C_GetAttackLocation::Location' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetAttackLocation, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'BP_AJBInGameStand_KLQ_C_GetAttackLocation::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetAttackLocation, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000020, "Member 'BP_AJBInGameStand_KLQ_C_GetAttackLocation::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetAttackLocation, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_AJBInGameStand_KLQ_C_GetAttackLocation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetAttackLocation, CallFunc_GetFixedLocation_Location) == 0x00002C, "Member 'BP_AJBInGameStand_KLQ_C_GetAttackLocation::CallFunc_GetFixedLocation_Location' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetAttackLocation, CallFunc_GetComponentByClass_ReturnValue) == 0x000038, "Member 'BP_AJBInGameStand_KLQ_C_GetAttackLocation::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetAttackLocation, CallFunc_FindLookAtRotation_ReturnValue) == 0x000040, "Member 'BP_AJBInGameStand_KLQ_C_GetAttackLocation::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetAttackLocation, CallFunc_IsValid_ReturnValue) == 0x00004C, "Member 'BP_AJBInGameStand_KLQ_C_GetAttackLocation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetAttackLocation, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000050, "Member 'BP_AJBInGameStand_KLQ_C_GetAttackLocation::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetAttackLocation, CallFunc_Add_VectorVector_ReturnValue) == 0x00005C, "Member 'BP_AJBInGameStand_KLQ_C_GetAttackLocation::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameStand_KLQ.BP_AJBInGameStand_KLQ_C.GetLaunchedActorHomeLocation
// 0x001C (0x001C - 0x0000)
struct BP_AJBInGameStand_KLQ_C_GetLaunchedActorHomeLocation final
{
public:
	int32                                         CloseRangeSkillNo;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0004(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetFixedLocation_Location;                // 0x0010(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_KLQ_C_GetLaunchedActorHomeLocation) == 0x000004, "Wrong alignment on BP_AJBInGameStand_KLQ_C_GetLaunchedActorHomeLocation");
static_assert(sizeof(BP_AJBInGameStand_KLQ_C_GetLaunchedActorHomeLocation) == 0x00001C, "Wrong size on BP_AJBInGameStand_KLQ_C_GetLaunchedActorHomeLocation");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetLaunchedActorHomeLocation, CloseRangeSkillNo) == 0x000000, "Member 'BP_AJBInGameStand_KLQ_C_GetLaunchedActorHomeLocation::CloseRangeSkillNo' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetLaunchedActorHomeLocation, Location) == 0x000004, "Member 'BP_AJBInGameStand_KLQ_C_GetLaunchedActorHomeLocation::Location' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetLaunchedActorHomeLocation, CallFunc_GetFixedLocation_Location) == 0x000010, "Member 'BP_AJBInGameStand_KLQ_C_GetLaunchedActorHomeLocation::CallFunc_GetFixedLocation_Location' has a wrong offset!");

// Function BP_AJBInGameStand_KLQ.BP_AJBInGameStand_KLQ_C.GetCloseRangeLaunchedActor
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBInGameStand_KLQ_C_GetCloseRangeLaunchedActor final
{
public:
	int32                                         CloseRangeSkillNo;                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LaunchedActor;                                     // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_KLQ_C_GetCloseRangeLaunchedActor) == 0x000008, "Wrong alignment on BP_AJBInGameStand_KLQ_C_GetCloseRangeLaunchedActor");
static_assert(sizeof(BP_AJBInGameStand_KLQ_C_GetCloseRangeLaunchedActor) == 0x000010, "Wrong size on BP_AJBInGameStand_KLQ_C_GetCloseRangeLaunchedActor");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetCloseRangeLaunchedActor, CloseRangeSkillNo) == 0x000000, "Member 'BP_AJBInGameStand_KLQ_C_GetCloseRangeLaunchedActor::CloseRangeSkillNo' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetCloseRangeLaunchedActor, LaunchedActor) == 0x000008, "Member 'BP_AJBInGameStand_KLQ_C_GetCloseRangeLaunchedActor::LaunchedActor' has a wrong offset!");

// Function BP_AJBInGameStand_KLQ.BP_AJBInGameStand_KLQ_C.GetDamageActorTargetLocation
// 0x000C (0x000C - 0x0000)
struct BP_AJBInGameStand_KLQ_C_GetDamageActorTargetLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_KLQ_C_GetDamageActorTargetLocation) == 0x000004, "Wrong alignment on BP_AJBInGameStand_KLQ_C_GetDamageActorTargetLocation");
static_assert(sizeof(BP_AJBInGameStand_KLQ_C_GetDamageActorTargetLocation) == 0x00000C, "Wrong size on BP_AJBInGameStand_KLQ_C_GetDamageActorTargetLocation");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetDamageActorTargetLocation, Location) == 0x000000, "Member 'BP_AJBInGameStand_KLQ_C_GetDamageActorTargetLocation::Location' has a wrong offset!");

// Function BP_AJBInGameStand_KLQ.BP_AJBInGameStand_KLQ_C.GetDummyShotLocation
// 0x0030 (0x0030 - 0x0000)
struct BP_AJBInGameStand_KLQ_C_GetDummyShotLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        CallFunc_GetShotLocation_Locations;                // 0x0010(0x0010)(ZeroConstructor, ReferenceParm)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0024(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_KLQ_C_GetDummyShotLocation) == 0x000008, "Wrong alignment on BP_AJBInGameStand_KLQ_C_GetDummyShotLocation");
static_assert(sizeof(BP_AJBInGameStand_KLQ_C_GetDummyShotLocation) == 0x000030, "Wrong size on BP_AJBInGameStand_KLQ_C_GetDummyShotLocation");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetDummyShotLocation, Location) == 0x000000, "Member 'BP_AJBInGameStand_KLQ_C_GetDummyShotLocation::Location' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetDummyShotLocation, CallFunc_GetShotLocation_Locations) == 0x000010, "Member 'BP_AJBInGameStand_KLQ_C_GetDummyShotLocation::CallFunc_GetShotLocation_Locations' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetDummyShotLocation, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000020, "Member 'BP_AJBInGameStand_KLQ_C_GetDummyShotLocation::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetDummyShotLocation, CallFunc_Array_Get_Item) == 0x000024, "Member 'BP_AJBInGameStand_KLQ_C_GetDummyShotLocation::CallFunc_Array_Get_Item' has a wrong offset!");

// Function BP_AJBInGameStand_KLQ.BP_AJBInGameStand_KLQ_C.ShouldShowNGPoint
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameStand_KLQ_C_ShouldShowNGPoint final
{
public:
	bool                                          bResult;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameStand_KLQ_C_ShouldShowNGPoint) == 0x000001, "Wrong alignment on BP_AJBInGameStand_KLQ_C_ShouldShowNGPoint");
static_assert(sizeof(BP_AJBInGameStand_KLQ_C_ShouldShowNGPoint) == 0x000001, "Wrong size on BP_AJBInGameStand_KLQ_C_ShouldShowNGPoint");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_ShouldShowNGPoint, bResult) == 0x000000, "Member 'BP_AJBInGameStand_KLQ_C_ShouldShowNGPoint::bResult' has a wrong offset!");

// Function BP_AJBInGameStand_KLQ.BP_AJBInGameStand_KLQ_C.GetShutTraceRadius
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBInGameStand_KLQ_C_GetShutTraceRadius final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_KLQ_C_GetShutTraceRadius) == 0x000004, "Wrong alignment on BP_AJBInGameStand_KLQ_C_GetShutTraceRadius");
static_assert(sizeof(BP_AJBInGameStand_KLQ_C_GetShutTraceRadius) == 0x000004, "Wrong size on BP_AJBInGameStand_KLQ_C_GetShutTraceRadius");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetShutTraceRadius, Radius) == 0x000000, "Member 'BP_AJBInGameStand_KLQ_C_GetShutTraceRadius::Radius' has a wrong offset!");

// Function BP_AJBInGameStand_KLQ.BP_AJBInGameStand_KLQ_C.GetShotLocation
// 0x0080 (0x0080 - 0x0000)
struct BP_AJBInGameStand_KLQ_C_GetShotLocation final
{
public:
	bool                                          bConsiderCharacterCapsuleRadius;                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           SkillTag;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        Locations;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<struct FVector>                        TempReturnLocations;                               // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<class USceneComponent*>                TempComponents;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x005C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USceneComponent*>                CallFunc_GetComponentsByTag_ReturnValue;           // 0x0070(0x0010)(ZeroConstructor, ReferenceParm)
};
static_assert(alignof(BP_AJBInGameStand_KLQ_C_GetShotLocation) == 0x000008, "Wrong alignment on BP_AJBInGameStand_KLQ_C_GetShotLocation");
static_assert(sizeof(BP_AJBInGameStand_KLQ_C_GetShotLocation) == 0x000080, "Wrong size on BP_AJBInGameStand_KLQ_C_GetShotLocation");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetShotLocation, bConsiderCharacterCapsuleRadius) == 0x000000, "Member 'BP_AJBInGameStand_KLQ_C_GetShotLocation::bConsiderCharacterCapsuleRadius' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetShotLocation, SkillTag) == 0x000008, "Member 'BP_AJBInGameStand_KLQ_C_GetShotLocation::SkillTag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetShotLocation, Locations) == 0x000010, "Member 'BP_AJBInGameStand_KLQ_C_GetShotLocation::Locations' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetShotLocation, TempReturnLocations) == 0x000020, "Member 'BP_AJBInGameStand_KLQ_C_GetShotLocation::TempReturnLocations' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetShotLocation, TempComponents) == 0x000030, "Member 'BP_AJBInGameStand_KLQ_C_GetShotLocation::TempComponents' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetShotLocation, Temp_int_Array_Index_Variable) == 0x000040, "Member 'BP_AJBInGameStand_KLQ_C_GetShotLocation::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetShotLocation, Temp_int_Loop_Counter_Variable) == 0x000044, "Member 'BP_AJBInGameStand_KLQ_C_GetShotLocation::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetShotLocation, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'BP_AJBInGameStand_KLQ_C_GetShotLocation::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetShotLocation, CallFunc_Array_Get_Item) == 0x000050, "Member 'BP_AJBInGameStand_KLQ_C_GetShotLocation::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetShotLocation, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'BP_AJBInGameStand_KLQ_C_GetShotLocation::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetShotLocation, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00005C, "Member 'BP_AJBInGameStand_KLQ_C_GetShotLocation::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetShotLocation, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member 'BP_AJBInGameStand_KLQ_C_GetShotLocation::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetShotLocation, CallFunc_Array_Add_ReturnValue) == 0x00006C, "Member 'BP_AJBInGameStand_KLQ_C_GetShotLocation::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_GetShotLocation, CallFunc_GetComponentsByTag_ReturnValue) == 0x000070, "Member 'BP_AJBInGameStand_KLQ_C_GetShotLocation::CallFunc_GetComponentsByTag_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameStand_KLQ.BP_AJBInGameStand_KLQ_C.CheckLocallyControlled
// 0x0038 (0x0038 - 0x0000)
struct BP_AJBInGameStand_KLQ_C_CheckLocallyControlled final
{
public:
	bool                                          bLocallyControlled;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character1;     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue;     // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerController_ReturnValue;           // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameStand_KLQ_C_CheckLocallyControlled) == 0x000008, "Wrong alignment on BP_AJBInGameStand_KLQ_C_CheckLocallyControlled");
static_assert(sizeof(BP_AJBInGameStand_KLQ_C_CheckLocallyControlled) == 0x000038, "Wrong size on BP_AJBInGameStand_KLQ_C_CheckLocallyControlled");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_CheckLocallyControlled, bLocallyControlled) == 0x000000, "Member 'BP_AJBInGameStand_KLQ_C_CheckLocallyControlled::bLocallyControlled' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_CheckLocallyControlled, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBInGameStand_KLQ_C_CheckLocallyControlled::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_CheckLocallyControlled, CallFunc_GetOwner_ReturnValue1) == 0x000010, "Member 'BP_AJBInGameStand_KLQ_C_CheckLocallyControlled::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_CheckLocallyControlled, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000018, "Member 'BP_AJBInGameStand_KLQ_C_CheckLocallyControlled::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_CheckLocallyControlled, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_AJBInGameStand_KLQ_C_CheckLocallyControlled::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_CheckLocallyControlled, K2Node_DynamicCast_AsBP_AJBIn_Game_Character1) == 0x000028, "Member 'BP_AJBInGameStand_KLQ_C_CheckLocallyControlled::K2Node_DynamicCast_AsBP_AJBIn_Game_Character1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_CheckLocallyControlled, K2Node_DynamicCast_bSuccess1) == 0x000030, "Member 'BP_AJBInGameStand_KLQ_C_CheckLocallyControlled::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_CheckLocallyControlled, CallFunc_HasLocalSharedController_ReturnValue) == 0x000031, "Member 'BP_AJBInGameStand_KLQ_C_CheckLocallyControlled::CallFunc_HasLocalSharedController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_CheckLocallyControlled, CallFunc_IsPlayerController_ReturnValue) == 0x000032, "Member 'BP_AJBInGameStand_KLQ_C_CheckLocallyControlled::CallFunc_IsPlayerController_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameStand_KLQ.BP_AJBInGameStand_KLQ_C.SetValueDissolveAlpha
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBInGameStand_KLQ_C_SetValueDissolveAlpha final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_KLQ_C_SetValueDissolveAlpha) == 0x000004, "Wrong alignment on BP_AJBInGameStand_KLQ_C_SetValueDissolveAlpha");
static_assert(sizeof(BP_AJBInGameStand_KLQ_C_SetValueDissolveAlpha) == 0x000004, "Wrong size on BP_AJBInGameStand_KLQ_C_SetValueDissolveAlpha");
static_assert(offsetof(BP_AJBInGameStand_KLQ_C_SetValueDissolveAlpha, Value) == 0x000000, "Member 'BP_AJBInGameStand_KLQ_C_SetValueDissolveAlpha::Value' has a wrong offset!");

}

