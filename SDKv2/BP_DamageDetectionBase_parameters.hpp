#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DamageDetectionBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "AJB_structs.hpp"


namespace SDK::Params
{

// Function BP_DamageDetectionBase.BP_DamageDetectionBase_C.ExecuteUbergraph_BP_DamageDetectionBase
// 0x00E8 (0x00E8 - 0x0000)
struct BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_DamagedActor;                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_DamageForHPAP;                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_DamageForAAP;                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_CutDamage;                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Event_DamageType;                           // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_SerialNumber;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDamagePriority                               K2Node_Event_DamagePriority;                       // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_AttackDistance;                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_DamageCauser1;                        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_WithSeparatedStandAttack;             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_HitEnemysSeparatedStand;              // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bPenetrateAP;                         // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bNotUseCollision;                     // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacter*                    K2Node_Event_Operator;                             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Time;                                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGeneralTiming                                K2Node_Event_Timing;                               // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bEnable;                              // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bOperatorIsEmpty;                     // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_57[0x1];                                       // 0x0057(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x005C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_DamageCauser;                         // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_HitLocation;                          // 0x0070(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bPenetrating;                         // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Event_FactorTag;                            // 0x0080(0x0008)(NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_Event_OperatorCharacter1;                   // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_EffectTag2;                           // 0x0090(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_SETag2;                               // 0x0098(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bNoDamage;                            // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_Event_OperaatorCharacter;                   // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bNewFlag;                             // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Event_EffectTag;                            // 0x00B8(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_SETag;                                // 0x00C0(0x0008)(NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_Event_OperatorCharacter;                    // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_EffectTag1;                           // 0x00D0(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_SETag1;                               // 0x00D8(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase) == 0x000008, "Wrong alignment on BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase");
static_assert(sizeof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase) == 0x0000E8, "Wrong size on BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, EntryPoint) == 0x000000, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, K2Node_Event_DamagedActor) == 0x000008, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::K2Node_Event_DamagedActor' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, K2Node_Event_DamageForHPAP) == 0x000010, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::K2Node_Event_DamageForHPAP' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, K2Node_Event_DamageForAAP) == 0x000014, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::K2Node_Event_DamageForAAP' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, K2Node_Event_CutDamage) == 0x000018, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::K2Node_Event_CutDamage' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, K2Node_Event_DamageType) == 0x000020, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::K2Node_Event_DamageType' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, K2Node_Event_SerialNumber) == 0x000028, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::K2Node_Event_SerialNumber' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, K2Node_Event_DamagePriority) == 0x00002C, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::K2Node_Event_DamagePriority' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, K2Node_Event_AttackDistance) == 0x000030, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::K2Node_Event_AttackDistance' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, K2Node_Event_DamageCauser1) == 0x000038, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::K2Node_Event_DamageCauser1' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, K2Node_Event_WithSeparatedStandAttack) == 0x000040, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::K2Node_Event_WithSeparatedStandAttack' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, K2Node_Event_HitEnemysSeparatedStand) == 0x000041, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::K2Node_Event_HitEnemysSeparatedStand' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, K2Node_Event_bPenetrateAP) == 0x000042, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::K2Node_Event_bPenetrateAP' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, K2Node_Event_bNotUseCollision) == 0x000043, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::K2Node_Event_bNotUseCollision' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, CallFunc_Not_PreBool_ReturnValue) == 0x000044, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, K2Node_Event_Operator) == 0x000048, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::K2Node_Event_Operator' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, K2Node_Event_Time) == 0x000050, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::K2Node_Event_Time' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, K2Node_Event_Timing) == 0x000054, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::K2Node_Event_Timing' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, K2Node_Event_bEnable) == 0x000055, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::K2Node_Event_bEnable' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, K2Node_Event_bOperatorIsEmpty) == 0x000056, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::K2Node_Event_bOperatorIsEmpty' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, K2Node_Event_DeltaSeconds) == 0x000058, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00005C, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, K2Node_Event_DamageCauser) == 0x000068, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::K2Node_Event_DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, K2Node_Event_HitLocation) == 0x000070, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::K2Node_Event_HitLocation' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, K2Node_Event_bPenetrating) == 0x00007C, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::K2Node_Event_bPenetrating' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, K2Node_Event_FactorTag) == 0x000080, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::K2Node_Event_FactorTag' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, K2Node_Event_OperatorCharacter1) == 0x000088, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::K2Node_Event_OperatorCharacter1' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, K2Node_Event_EffectTag2) == 0x000090, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::K2Node_Event_EffectTag2' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, K2Node_Event_SETag2) == 0x000098, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::K2Node_Event_SETag2' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, K2Node_Event_bNoDamage) == 0x0000A0, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::K2Node_Event_bNoDamage' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, K2Node_Event_OperaatorCharacter) == 0x0000A8, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::K2Node_Event_OperaatorCharacter' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, K2Node_Event_bNewFlag) == 0x0000B0, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::K2Node_Event_bNewFlag' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, K2Node_Event_EffectTag) == 0x0000B8, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::K2Node_Event_EffectTag' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, K2Node_Event_SETag) == 0x0000C0, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::K2Node_Event_SETag' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, K2Node_Event_OperatorCharacter) == 0x0000C8, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::K2Node_Event_OperatorCharacter' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, K2Node_Event_EffectTag1) == 0x0000D0, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::K2Node_Event_EffectTag1' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, K2Node_Event_SETag1) == 0x0000D8, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::K2Node_Event_SETag1' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase, CallFunc_IsServer_ReturnValue) == 0x0000E0, "Member 'BP_DamageDetectionBase_C_ExecuteUbergraph_BP_DamageDetectionBase::CallFunc_IsServer_ReturnValue' has a wrong offset!");

// Function BP_DamageDetectionBase.BP_DamageDetectionBase_C.DamageOverlapped
// 0x0020 (0x0020 - 0x0000)
struct BP_DamageDetectionBase_C_DamageOverlapped final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitLocation;                                       // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPenetrating;                                      // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           FactorTag;                                         // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DamageDetectionBase_C_DamageOverlapped) == 0x000008, "Wrong alignment on BP_DamageDetectionBase_C_DamageOverlapped");
static_assert(sizeof(BP_DamageDetectionBase_C_DamageOverlapped) == 0x000020, "Wrong size on BP_DamageDetectionBase_C_DamageOverlapped");
static_assert(offsetof(BP_DamageDetectionBase_C_DamageOverlapped, DamageCauser) == 0x000000, "Member 'BP_DamageDetectionBase_C_DamageOverlapped::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_DamageOverlapped, HitLocation) == 0x000008, "Member 'BP_DamageDetectionBase_C_DamageOverlapped::HitLocation' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_DamageOverlapped, bPenetrating) == 0x000014, "Member 'BP_DamageDetectionBase_C_DamageOverlapped::bPenetrating' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_DamageOverlapped, FactorTag) == 0x000018, "Member 'BP_DamageDetectionBase_C_DamageOverlapped::FactorTag' has a wrong offset!");

// Function BP_DamageDetectionBase.BP_DamageDetectionBase_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_DamageDetectionBase_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DamageDetectionBase_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_DamageDetectionBase_C_ReceiveTick");
static_assert(sizeof(BP_DamageDetectionBase_C_ReceiveTick) == 0x000004, "Wrong size on BP_DamageDetectionBase_C_ReceiveTick");
static_assert(offsetof(BP_DamageDetectionBase_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_DamageDetectionBase_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_DamageDetectionBase.BP_DamageDetectionBase_C.NotifyTheWorld
// 0x0010 (0x0010 - 0x0000)
struct BP_DamageDetectionBase_C_NotifyTheWorld final
{
public:
	class AAJBInGameCharacter*                    Operator;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGeneralTiming                                Timing;                                            // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnable;                                           // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bOperatorIsEmpty;                                  // 0x000E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DamageDetectionBase_C_NotifyTheWorld) == 0x000008, "Wrong alignment on BP_DamageDetectionBase_C_NotifyTheWorld");
static_assert(sizeof(BP_DamageDetectionBase_C_NotifyTheWorld) == 0x000010, "Wrong size on BP_DamageDetectionBase_C_NotifyTheWorld");
static_assert(offsetof(BP_DamageDetectionBase_C_NotifyTheWorld, Operator) == 0x000000, "Member 'BP_DamageDetectionBase_C_NotifyTheWorld::Operator' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_NotifyTheWorld, Time) == 0x000008, "Member 'BP_DamageDetectionBase_C_NotifyTheWorld::Time' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_NotifyTheWorld, Timing) == 0x00000C, "Member 'BP_DamageDetectionBase_C_NotifyTheWorld::Timing' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_NotifyTheWorld, bEnable) == 0x00000D, "Member 'BP_DamageDetectionBase_C_NotifyTheWorld::bEnable' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_NotifyTheWorld, bOperatorIsEmpty) == 0x00000E, "Member 'BP_DamageDetectionBase_C_NotifyTheWorld::bOperatorIsEmpty' has a wrong offset!");

// Function BP_DamageDetectionBase.BP_DamageDetectionBase_C.AJBDamage
// 0x0040 (0x0040 - 0x0000)
struct BP_DamageDetectionBase_C_AJBDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DamageForHPAP;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DamageForAAP;                                      // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CutDamage;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           DamageType;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         SerialNumber;                                      // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDamagePriority                               DamagePriority;                                    // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttackDistance;                                    // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DamageCauser;                                      // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WithSeparatedStandAttack;                          // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HitEnemysSeparatedStand;                           // 0x0039(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bPenetrateAP;                                      // 0x003A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bNotUseCollision;                                  // 0x003B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DamageDetectionBase_C_AJBDamage) == 0x000008, "Wrong alignment on BP_DamageDetectionBase_C_AJBDamage");
static_assert(sizeof(BP_DamageDetectionBase_C_AJBDamage) == 0x000040, "Wrong size on BP_DamageDetectionBase_C_AJBDamage");
static_assert(offsetof(BP_DamageDetectionBase_C_AJBDamage, DamagedActor) == 0x000000, "Member 'BP_DamageDetectionBase_C_AJBDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_AJBDamage, DamageForHPAP) == 0x000008, "Member 'BP_DamageDetectionBase_C_AJBDamage::DamageForHPAP' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_AJBDamage, DamageForAAP) == 0x00000C, "Member 'BP_DamageDetectionBase_C_AJBDamage::DamageForAAP' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_AJBDamage, CutDamage) == 0x000010, "Member 'BP_DamageDetectionBase_C_AJBDamage::CutDamage' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_AJBDamage, DamageType) == 0x000018, "Member 'BP_DamageDetectionBase_C_AJBDamage::DamageType' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_AJBDamage, SerialNumber) == 0x000020, "Member 'BP_DamageDetectionBase_C_AJBDamage::SerialNumber' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_AJBDamage, DamagePriority) == 0x000024, "Member 'BP_DamageDetectionBase_C_AJBDamage::DamagePriority' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_AJBDamage, AttackDistance) == 0x000028, "Member 'BP_DamageDetectionBase_C_AJBDamage::AttackDistance' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_AJBDamage, DamageCauser) == 0x000030, "Member 'BP_DamageDetectionBase_C_AJBDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_AJBDamage, WithSeparatedStandAttack) == 0x000038, "Member 'BP_DamageDetectionBase_C_AJBDamage::WithSeparatedStandAttack' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_AJBDamage, HitEnemysSeparatedStand) == 0x000039, "Member 'BP_DamageDetectionBase_C_AJBDamage::HitEnemysSeparatedStand' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_AJBDamage, bPenetrateAP) == 0x00003A, "Member 'BP_DamageDetectionBase_C_AJBDamage::bPenetrateAP' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_AJBDamage, bNotUseCollision) == 0x00003B, "Member 'BP_DamageDetectionBase_C_AJBDamage::bNotUseCollision' has a wrong offset!");

// Function BP_DamageDetectionBase.BP_DamageDetectionBase_C.OnNoDamageChanged
// 0x0020 (0x0020 - 0x0000)
struct BP_DamageDetectionBase_C_OnNoDamageChanged final
{
public:
	class ABP_AJBInGameCharacter_C*               OperaatorCharacter;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNewFlag;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           EffectTag;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SETag;                                             // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DamageDetectionBase_C_OnNoDamageChanged) == 0x000008, "Wrong alignment on BP_DamageDetectionBase_C_OnNoDamageChanged");
static_assert(sizeof(BP_DamageDetectionBase_C_OnNoDamageChanged) == 0x000020, "Wrong size on BP_DamageDetectionBase_C_OnNoDamageChanged");
static_assert(offsetof(BP_DamageDetectionBase_C_OnNoDamageChanged, OperaatorCharacter) == 0x000000, "Member 'BP_DamageDetectionBase_C_OnNoDamageChanged::OperaatorCharacter' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_OnNoDamageChanged, bNewFlag) == 0x000008, "Member 'BP_DamageDetectionBase_C_OnNoDamageChanged::bNewFlag' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_OnNoDamageChanged, EffectTag) == 0x000010, "Member 'BP_DamageDetectionBase_C_OnNoDamageChanged::EffectTag' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_OnNoDamageChanged, SETag) == 0x000018, "Member 'BP_DamageDetectionBase_C_OnNoDamageChanged::SETag' has a wrong offset!");

// Function BP_DamageDetectionBase.BP_DamageDetectionBase_C.OnAreaOut
// 0x0018 (0x0018 - 0x0000)
struct BP_DamageDetectionBase_C_OnAreaOut final
{
public:
	class ABP_AJBInGameCharacter_C*               OperatorCharacter;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EffectTag;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SETag;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DamageDetectionBase_C_OnAreaOut) == 0x000008, "Wrong alignment on BP_DamageDetectionBase_C_OnAreaOut");
static_assert(sizeof(BP_DamageDetectionBase_C_OnAreaOut) == 0x000018, "Wrong size on BP_DamageDetectionBase_C_OnAreaOut");
static_assert(offsetof(BP_DamageDetectionBase_C_OnAreaOut, OperatorCharacter) == 0x000000, "Member 'BP_DamageDetectionBase_C_OnAreaOut::OperatorCharacter' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_OnAreaOut, EffectTag) == 0x000008, "Member 'BP_DamageDetectionBase_C_OnAreaOut::EffectTag' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_OnAreaOut, SETag) == 0x000010, "Member 'BP_DamageDetectionBase_C_OnAreaOut::SETag' has a wrong offset!");

// Function BP_DamageDetectionBase.BP_DamageDetectionBase_C.OnAreaIn
// 0x0020 (0x0020 - 0x0000)
struct BP_DamageDetectionBase_C_OnAreaIn final
{
public:
	class ABP_AJBInGameCharacter_C*               OperatorCharacter;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EffectTag;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SETag;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          bNoDamage;                                         // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DamageDetectionBase_C_OnAreaIn) == 0x000008, "Wrong alignment on BP_DamageDetectionBase_C_OnAreaIn");
static_assert(sizeof(BP_DamageDetectionBase_C_OnAreaIn) == 0x000020, "Wrong size on BP_DamageDetectionBase_C_OnAreaIn");
static_assert(offsetof(BP_DamageDetectionBase_C_OnAreaIn, OperatorCharacter) == 0x000000, "Member 'BP_DamageDetectionBase_C_OnAreaIn::OperatorCharacter' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_OnAreaIn, EffectTag) == 0x000008, "Member 'BP_DamageDetectionBase_C_OnAreaIn::EffectTag' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_OnAreaIn, SETag) == 0x000010, "Member 'BP_DamageDetectionBase_C_OnAreaIn::SETag' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_OnAreaIn, bNoDamage) == 0x000018, "Member 'BP_DamageDetectionBase_C_OnAreaIn::bNoDamage' has a wrong offset!");

// Function BP_DamageDetectionBase.BP_DamageDetectionBase_C.IgnoreTrace
// 0x0001 (0x0001 - 0x0000)
struct BP_DamageDetectionBase_C_IgnoreTrace final
{
public:
	bool                                          bIgnore;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DamageDetectionBase_C_IgnoreTrace) == 0x000001, "Wrong alignment on BP_DamageDetectionBase_C_IgnoreTrace");
static_assert(sizeof(BP_DamageDetectionBase_C_IgnoreTrace) == 0x000001, "Wrong size on BP_DamageDetectionBase_C_IgnoreTrace");
static_assert(offsetof(BP_DamageDetectionBase_C_IgnoreTrace, bIgnore) == 0x000000, "Member 'BP_DamageDetectionBase_C_IgnoreTrace::bIgnore' has a wrong offset!");

// Function BP_DamageDetectionBase.BP_DamageDetectionBase_C.IsReactedByReticule
// 0x0001 (0x0001 - 0x0000)
struct BP_DamageDetectionBase_C_IsReactedByReticule final
{
public:
	bool                                          bResult;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DamageDetectionBase_C_IsReactedByReticule) == 0x000001, "Wrong alignment on BP_DamageDetectionBase_C_IsReactedByReticule");
static_assert(sizeof(BP_DamageDetectionBase_C_IsReactedByReticule) == 0x000001, "Wrong size on BP_DamageDetectionBase_C_IsReactedByReticule");
static_assert(offsetof(BP_DamageDetectionBase_C_IsReactedByReticule, bResult) == 0x000000, "Member 'BP_DamageDetectionBase_C_IsReactedByReticule::bResult' has a wrong offset!");

// Function BP_DamageDetectionBase.BP_DamageDetectionBase_C.CheckNoDamage
// 0x0010 (0x0010 - 0x0000)
struct BP_DamageDetectionBase_C_CheckNoDamage final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNoDamage;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DamageDetectionBase_C_CheckNoDamage) == 0x000008, "Wrong alignment on BP_DamageDetectionBase_C_CheckNoDamage");
static_assert(sizeof(BP_DamageDetectionBase_C_CheckNoDamage) == 0x000010, "Wrong size on BP_DamageDetectionBase_C_CheckNoDamage");
static_assert(offsetof(BP_DamageDetectionBase_C_CheckNoDamage, DamageCauser) == 0x000000, "Member 'BP_DamageDetectionBase_C_CheckNoDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_CheckNoDamage, bNoDamage) == 0x000008, "Member 'BP_DamageDetectionBase_C_CheckNoDamage::bNoDamage' has a wrong offset!");

// Function BP_DamageDetectionBase.BP_DamageDetectionBase_C.CheckDisableAreaDamage
// 0x0001 (0x0001 - 0x0000)
struct BP_DamageDetectionBase_C_CheckDisableAreaDamage final
{
public:
	bool                                          bDisableAreadamage;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DamageDetectionBase_C_CheckDisableAreaDamage) == 0x000001, "Wrong alignment on BP_DamageDetectionBase_C_CheckDisableAreaDamage");
static_assert(sizeof(BP_DamageDetectionBase_C_CheckDisableAreaDamage) == 0x000001, "Wrong size on BP_DamageDetectionBase_C_CheckDisableAreaDamage");
static_assert(offsetof(BP_DamageDetectionBase_C_CheckDisableAreaDamage, bDisableAreadamage) == 0x000000, "Member 'BP_DamageDetectionBase_C_CheckDisableAreaDamage::bDisableAreadamage' has a wrong offset!");

// Function BP_DamageDetectionBase.BP_DamageDetectionBase_C.CheckDisablePassive
// 0x0018 (0x0018 - 0x0000)
struct BP_DamageDetectionBase_C_CheckDisablePassive final
{
public:
	class AActor*                                 PassiveCauser;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           PassiveTag;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisablePassive;                                   // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DamageDetectionBase_C_CheckDisablePassive) == 0x000008, "Wrong alignment on BP_DamageDetectionBase_C_CheckDisablePassive");
static_assert(sizeof(BP_DamageDetectionBase_C_CheckDisablePassive) == 0x000018, "Wrong size on BP_DamageDetectionBase_C_CheckDisablePassive");
static_assert(offsetof(BP_DamageDetectionBase_C_CheckDisablePassive, PassiveCauser) == 0x000000, "Member 'BP_DamageDetectionBase_C_CheckDisablePassive::PassiveCauser' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_CheckDisablePassive, PassiveTag) == 0x000008, "Member 'BP_DamageDetectionBase_C_CheckDisablePassive::PassiveTag' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_CheckDisablePassive, bDisablePassive) == 0x000010, "Member 'BP_DamageDetectionBase_C_CheckDisablePassive::bDisablePassive' has a wrong offset!");

// Function BP_DamageDetectionBase.BP_DamageDetectionBase_C.CheckDisableDamage
// 0x0010 (0x0010 - 0x0000)
struct BP_DamageDetectionBase_C_CheckDisableDamage final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisableDamage;                                    // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DamageDetectionBase_C_CheckDisableDamage) == 0x000008, "Wrong alignment on BP_DamageDetectionBase_C_CheckDisableDamage");
static_assert(sizeof(BP_DamageDetectionBase_C_CheckDisableDamage) == 0x000010, "Wrong size on BP_DamageDetectionBase_C_CheckDisableDamage");
static_assert(offsetof(BP_DamageDetectionBase_C_CheckDisableDamage, DamageCauser) == 0x000000, "Member 'BP_DamageDetectionBase_C_CheckDisableDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_CheckDisableDamage, bDisableDamage) == 0x000008, "Member 'BP_DamageDetectionBase_C_CheckDisableDamage::bDisableDamage' has a wrong offset!");

// Function BP_DamageDetectionBase.BP_DamageDetectionBase_C.IfCheckDamageOverlap
// 0x0001 (0x0001 - 0x0000)
struct BP_DamageDetectionBase_C_IfCheckDamageOverlap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DamageDetectionBase_C_IfCheckDamageOverlap) == 0x000001, "Wrong alignment on BP_DamageDetectionBase_C_IfCheckDamageOverlap");
static_assert(sizeof(BP_DamageDetectionBase_C_IfCheckDamageOverlap) == 0x000001, "Wrong size on BP_DamageDetectionBase_C_IfCheckDamageOverlap");
static_assert(offsetof(BP_DamageDetectionBase_C_IfCheckDamageOverlap, ReturnValue) == 0x000000, "Member 'BP_DamageDetectionBase_C_IfCheckDamageOverlap::ReturnValue' has a wrong offset!");

// Function BP_DamageDetectionBase.BP_DamageDetectionBase_C.OwnHitParam
// 0x0018 (0x0018 - 0x0000)
struct BP_DamageDetectionBase_C_OwnHitParam final
{
public:
	bool                                          bCharacter;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bLeftAP;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ParticleTagBlockedByAAP;                           // 0x0008(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SETagBlockedByAAP;                                 // 0x0010(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DamageDetectionBase_C_OwnHitParam) == 0x000008, "Wrong alignment on BP_DamageDetectionBase_C_OwnHitParam");
static_assert(sizeof(BP_DamageDetectionBase_C_OwnHitParam) == 0x000018, "Wrong size on BP_DamageDetectionBase_C_OwnHitParam");
static_assert(offsetof(BP_DamageDetectionBase_C_OwnHitParam, bCharacter) == 0x000000, "Member 'BP_DamageDetectionBase_C_OwnHitParam::bCharacter' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_OwnHitParam, bLeftAP) == 0x000001, "Member 'BP_DamageDetectionBase_C_OwnHitParam::bLeftAP' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_OwnHitParam, ParticleTagBlockedByAAP) == 0x000008, "Member 'BP_DamageDetectionBase_C_OwnHitParam::ParticleTagBlockedByAAP' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_OwnHitParam, SETagBlockedByAAP) == 0x000010, "Member 'BP_DamageDetectionBase_C_OwnHitParam::SETagBlockedByAAP' has a wrong offset!");

// Function BP_DamageDetectionBase.BP_DamageDetectionBase_C.CheckTargetSelf
// 0x0010 (0x0010 - 0x0000)
struct BP_DamageDetectionBase_C_CheckTargetSelf final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bForDamageOverlap;                                 // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIgnoreMovableStand;                               // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bTarget;                                           // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DamageDetectionBase_C_CheckTargetSelf) == 0x000008, "Wrong alignment on BP_DamageDetectionBase_C_CheckTargetSelf");
static_assert(sizeof(BP_DamageDetectionBase_C_CheckTargetSelf) == 0x000010, "Wrong size on BP_DamageDetectionBase_C_CheckTargetSelf");
static_assert(offsetof(BP_DamageDetectionBase_C_CheckTargetSelf, DamageCauser) == 0x000000, "Member 'BP_DamageDetectionBase_C_CheckTargetSelf::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_CheckTargetSelf, bForDamageOverlap) == 0x000008, "Member 'BP_DamageDetectionBase_C_CheckTargetSelf::bForDamageOverlap' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_CheckTargetSelf, bIgnoreMovableStand) == 0x000009, "Member 'BP_DamageDetectionBase_C_CheckTargetSelf::bIgnoreMovableStand' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_CheckTargetSelf, bTarget) == 0x00000A, "Member 'BP_DamageDetectionBase_C_CheckTargetSelf::bTarget' has a wrong offset!");

// Function BP_DamageDetectionBase.BP_DamageDetectionBase_C.CheckDisableDirectDamage
// 0x0010 (0x0010 - 0x0000)
struct BP_DamageDetectionBase_C_CheckDisableDirectDamage final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisableDirectDamage;                              // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DamageDetectionBase_C_CheckDisableDirectDamage) == 0x000008, "Wrong alignment on BP_DamageDetectionBase_C_CheckDisableDirectDamage");
static_assert(sizeof(BP_DamageDetectionBase_C_CheckDisableDirectDamage) == 0x000010, "Wrong size on BP_DamageDetectionBase_C_CheckDisableDirectDamage");
static_assert(offsetof(BP_DamageDetectionBase_C_CheckDisableDirectDamage, DamageCauser) == 0x000000, "Member 'BP_DamageDetectionBase_C_CheckDisableDirectDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_CheckDisableDirectDamage, bDisableDirectDamage) == 0x000008, "Member 'BP_DamageDetectionBase_C_CheckDisableDirectDamage::bDisableDirectDamage' has a wrong offset!");

// Function BP_DamageDetectionBase.BP_DamageDetectionBase_C.CheckAreaIn
// 0x0044 (0x0044 - 0x0000)
struct BP_DamageDetectionBase_C_CheckAreaIn final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         Radius;                                            // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Length;                                            // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PartitionNum;                                      // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCheckUnder;                                       // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ValidGroundOffsetZ;                                // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTarget;                                           // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0030(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue;       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HitCheck_ContinuedSphere_Sphere_bHit;     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_DamageDetectionBase_C_CheckAreaIn) == 0x000004, "Wrong alignment on BP_DamageDetectionBase_C_CheckAreaIn");
static_assert(sizeof(BP_DamageDetectionBase_C_CheckAreaIn) == 0x000044, "Wrong size on BP_DamageDetectionBase_C_CheckAreaIn");
static_assert(offsetof(BP_DamageDetectionBase_C_CheckAreaIn, Location) == 0x000000, "Member 'BP_DamageDetectionBase_C_CheckAreaIn::Location' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_CheckAreaIn, Rotation) == 0x00000C, "Member 'BP_DamageDetectionBase_C_CheckAreaIn::Rotation' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_CheckAreaIn, Radius) == 0x000018, "Member 'BP_DamageDetectionBase_C_CheckAreaIn::Radius' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_CheckAreaIn, Length) == 0x00001C, "Member 'BP_DamageDetectionBase_C_CheckAreaIn::Length' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_CheckAreaIn, PartitionNum) == 0x000020, "Member 'BP_DamageDetectionBase_C_CheckAreaIn::PartitionNum' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_CheckAreaIn, bCheckUnder) == 0x000024, "Member 'BP_DamageDetectionBase_C_CheckAreaIn::bCheckUnder' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_CheckAreaIn, ValidGroundOffsetZ) == 0x000028, "Member 'BP_DamageDetectionBase_C_CheckAreaIn::ValidGroundOffsetZ' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_CheckAreaIn, bTarget) == 0x00002C, "Member 'BP_DamageDetectionBase_C_CheckAreaIn::bTarget' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_CheckAreaIn, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000030, "Member 'BP_DamageDetectionBase_C_CheckAreaIn::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_CheckAreaIn, CallFunc_GetScaledCapsuleRadius_ReturnValue) == 0x00003C, "Member 'BP_DamageDetectionBase_C_CheckAreaIn::CallFunc_GetScaledCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_CheckAreaIn, CallFunc_HitCheck_ContinuedSphere_Sphere_bHit) == 0x000040, "Member 'BP_DamageDetectionBase_C_CheckAreaIn::CallFunc_HitCheck_ContinuedSphere_Sphere_bHit' has a wrong offset!");

// Function BP_DamageDetectionBase.BP_DamageDetectionBase_C.GetTargetLocation
// 0x0018 (0x0018 - 0x0000)
struct BP_DamageDetectionBase_C_GetTargetLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x000C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DamageDetectionBase_C_GetTargetLocation) == 0x000004, "Wrong alignment on BP_DamageDetectionBase_C_GetTargetLocation");
static_assert(sizeof(BP_DamageDetectionBase_C_GetTargetLocation) == 0x000018, "Wrong size on BP_DamageDetectionBase_C_GetTargetLocation");
static_assert(offsetof(BP_DamageDetectionBase_C_GetTargetLocation, Location) == 0x000000, "Member 'BP_DamageDetectionBase_C_GetTargetLocation::Location' has a wrong offset!");
static_assert(offsetof(BP_DamageDetectionBase_C_GetTargetLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00000C, "Member 'BP_DamageDetectionBase_C_GetTargetLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

}

