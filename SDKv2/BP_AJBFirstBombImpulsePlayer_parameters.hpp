#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBFirstBombImpulsePlayer

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function BP_AJBFirstBombImpulsePlayer.BP_AJBFirstBombImpulsePlayer_C.ExecuteUbergraph_BP_AJBFirstBombImpulsePlayer
// 0x0028 (0x0028 - 0x0000)
struct BP_AJBFirstBombImpulsePlayer_C_ExecuteUbergraph_BP_AJBFirstBombImpulsePlayer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character1;     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBFirstBombImpulsePlayer_C_ExecuteUbergraph_BP_AJBFirstBombImpulsePlayer) == 0x000008, "Wrong alignment on BP_AJBFirstBombImpulsePlayer_C_ExecuteUbergraph_BP_AJBFirstBombImpulsePlayer");
static_assert(sizeof(BP_AJBFirstBombImpulsePlayer_C_ExecuteUbergraph_BP_AJBFirstBombImpulsePlayer) == 0x000028, "Wrong size on BP_AJBFirstBombImpulsePlayer_C_ExecuteUbergraph_BP_AJBFirstBombImpulsePlayer");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_ExecuteUbergraph_BP_AJBFirstBombImpulsePlayer, EntryPoint) == 0x000000, "Member 'BP_AJBFirstBombImpulsePlayer_C_ExecuteUbergraph_BP_AJBFirstBombImpulsePlayer::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_ExecuteUbergraph_BP_AJBFirstBombImpulsePlayer, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000008, "Member 'BP_AJBFirstBombImpulsePlayer_C_ExecuteUbergraph_BP_AJBFirstBombImpulsePlayer::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_ExecuteUbergraph_BP_AJBFirstBombImpulsePlayer, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_AJBFirstBombImpulsePlayer_C_ExecuteUbergraph_BP_AJBFirstBombImpulsePlayer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_ExecuteUbergraph_BP_AJBFirstBombImpulsePlayer, K2Node_DynamicCast_AsBP_AJBIn_Game_Character1) == 0x000018, "Member 'BP_AJBFirstBombImpulsePlayer_C_ExecuteUbergraph_BP_AJBFirstBombImpulsePlayer::K2Node_DynamicCast_AsBP_AJBIn_Game_Character1' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_ExecuteUbergraph_BP_AJBFirstBombImpulsePlayer, K2Node_DynamicCast_bSuccess1) == 0x000020, "Member 'BP_AJBFirstBombImpulsePlayer_C_ExecuteUbergraph_BP_AJBFirstBombImpulsePlayer::K2Node_DynamicCast_bSuccess1' has a wrong offset!");

// Function BP_AJBFirstBombImpulsePlayer.BP_AJBFirstBombImpulsePlayer_C.CheckDamagedActorOnly
// 0x0040 (0x0040 - 0x0000)
struct BP_AJBFirstBombImpulsePlayer_C_CheckDamagedActorOnly final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDamagedActorOnly;                                 // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_AJBCrimsonDimensionAffecter_C*> CallFunc_GetAllActorsOfClass_OutActors;            // 0x0010(0x0010)(ZeroConstructor, ReferenceParm)
	class ABP_AJBCrimsonDimensionAffecter_C*      CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBFirstBombImpulsePlayer_C_CheckDamagedActorOnly) == 0x000008, "Wrong alignment on BP_AJBFirstBombImpulsePlayer_C_CheckDamagedActorOnly");
static_assert(sizeof(BP_AJBFirstBombImpulsePlayer_C_CheckDamagedActorOnly) == 0x000040, "Wrong size on BP_AJBFirstBombImpulsePlayer_C_CheckDamagedActorOnly");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_CheckDamagedActorOnly, DamagedActor) == 0x000000, "Member 'BP_AJBFirstBombImpulsePlayer_C_CheckDamagedActorOnly::DamagedActor' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_CheckDamagedActorOnly, bDamagedActorOnly) == 0x000008, "Member 'BP_AJBFirstBombImpulsePlayer_C_CheckDamagedActorOnly::bDamagedActorOnly' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_CheckDamagedActorOnly, CallFunc_GetAllActorsOfClass_OutActors) == 0x000010, "Member 'BP_AJBFirstBombImpulsePlayer_C_CheckDamagedActorOnly::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_CheckDamagedActorOnly, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_AJBFirstBombImpulsePlayer_C_CheckDamagedActorOnly::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_CheckDamagedActorOnly, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000028, "Member 'BP_AJBFirstBombImpulsePlayer_C_CheckDamagedActorOnly::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_CheckDamagedActorOnly, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000029, "Member 'BP_AJBFirstBombImpulsePlayer_C_CheckDamagedActorOnly::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_CheckDamagedActorOnly, CallFunc_GetOwner_ReturnValue) == 0x000030, "Member 'BP_AJBFirstBombImpulsePlayer_C_CheckDamagedActorOnly::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_CheckDamagedActorOnly, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000038, "Member 'BP_AJBFirstBombImpulsePlayer_C_CheckDamagedActorOnly::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_CheckDamagedActorOnly, CallFunc_BooleanAND_ReturnValue) == 0x000039, "Member 'BP_AJBFirstBombImpulsePlayer_C_CheckDamagedActorOnly::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_AJBFirstBombImpulsePlayer.BP_AJBFirstBombImpulsePlayer_C.ShouldAddDamage
// 0x0018 (0x0018 - 0x0000)
struct BP_AJBFirstBombImpulsePlayer_C_ShouldAddDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DamageCauser;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldAddDamage;                                  // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldAddDamage_bShouldAddDamage;         // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBFirstBombImpulsePlayer_C_ShouldAddDamage) == 0x000008, "Wrong alignment on BP_AJBFirstBombImpulsePlayer_C_ShouldAddDamage");
static_assert(sizeof(BP_AJBFirstBombImpulsePlayer_C_ShouldAddDamage) == 0x000018, "Wrong size on BP_AJBFirstBombImpulsePlayer_C_ShouldAddDamage");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_ShouldAddDamage, DamagedActor) == 0x000000, "Member 'BP_AJBFirstBombImpulsePlayer_C_ShouldAddDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_ShouldAddDamage, DamageCauser) == 0x000008, "Member 'BP_AJBFirstBombImpulsePlayer_C_ShouldAddDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_ShouldAddDamage, bShouldAddDamage) == 0x000010, "Member 'BP_AJBFirstBombImpulsePlayer_C_ShouldAddDamage::bShouldAddDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_ShouldAddDamage, CallFunc_ShouldAddDamage_bShouldAddDamage) == 0x000011, "Member 'BP_AJBFirstBombImpulsePlayer_C_ShouldAddDamage::CallFunc_ShouldAddDamage_bShouldAddDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_ShouldAddDamage, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000012, "Member 'BP_AJBFirstBombImpulsePlayer_C_ShouldAddDamage::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function BP_AJBFirstBombImpulsePlayer.BP_AJBFirstBombImpulsePlayer_C.ShouldAddPassive
// 0x0018 (0x0018 - 0x0000)
struct BP_AJBFirstBombImpulsePlayer_C_ShouldAddPassive final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DamageCauser;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldAddPassive;                                 // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldAddPassive_bShouldAddPassive;       // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckDamagedActorOnly_bDamagedActorOnly;  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBFirstBombImpulsePlayer_C_ShouldAddPassive) == 0x000008, "Wrong alignment on BP_AJBFirstBombImpulsePlayer_C_ShouldAddPassive");
static_assert(sizeof(BP_AJBFirstBombImpulsePlayer_C_ShouldAddPassive) == 0x000018, "Wrong size on BP_AJBFirstBombImpulsePlayer_C_ShouldAddPassive");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_ShouldAddPassive, DamagedActor) == 0x000000, "Member 'BP_AJBFirstBombImpulsePlayer_C_ShouldAddPassive::DamagedActor' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_ShouldAddPassive, DamageCauser) == 0x000008, "Member 'BP_AJBFirstBombImpulsePlayer_C_ShouldAddPassive::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_ShouldAddPassive, bShouldAddPassive) == 0x000010, "Member 'BP_AJBFirstBombImpulsePlayer_C_ShouldAddPassive::bShouldAddPassive' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_ShouldAddPassive, CallFunc_ShouldAddPassive_bShouldAddPassive) == 0x000011, "Member 'BP_AJBFirstBombImpulsePlayer_C_ShouldAddPassive::CallFunc_ShouldAddPassive_bShouldAddPassive' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_ShouldAddPassive, CallFunc_CheckDamagedActorOnly_bDamagedActorOnly) == 0x000012, "Member 'BP_AJBFirstBombImpulsePlayer_C_ShouldAddPassive::CallFunc_CheckDamagedActorOnly_bDamagedActorOnly' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_ShouldAddPassive, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000013, "Member 'BP_AJBFirstBombImpulsePlayer_C_ShouldAddPassive::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function BP_AJBFirstBombImpulsePlayer.BP_AJBFirstBombImpulsePlayer_C.CheckDamage
// 0x0030 (0x0030 - 0x0000)
struct BP_AJBFirstBombImpulsePlayer_C_CheckDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DamageCauser;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNoDamage;                                         // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckDamagedActorOnly_bDamagedActorOnly;  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBInterface_C>    K2Node_DynamicCast_AsBI_AJBInterface;              // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckDisableDirectDamage_bDisableDirectDamage; // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckDamage_bNoDamage;                    // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBFirstBombImpulsePlayer_C_CheckDamage) == 0x000008, "Wrong alignment on BP_AJBFirstBombImpulsePlayer_C_CheckDamage");
static_assert(sizeof(BP_AJBFirstBombImpulsePlayer_C_CheckDamage) == 0x000030, "Wrong size on BP_AJBFirstBombImpulsePlayer_C_CheckDamage");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_CheckDamage, DamagedActor) == 0x000000, "Member 'BP_AJBFirstBombImpulsePlayer_C_CheckDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_CheckDamage, DamageCauser) == 0x000008, "Member 'BP_AJBFirstBombImpulsePlayer_C_CheckDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_CheckDamage, bNoDamage) == 0x000010, "Member 'BP_AJBFirstBombImpulsePlayer_C_CheckDamage::bNoDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_CheckDamage, CallFunc_CheckDamagedActorOnly_bDamagedActorOnly) == 0x000011, "Member 'BP_AJBFirstBombImpulsePlayer_C_CheckDamage::CallFunc_CheckDamagedActorOnly_bDamagedActorOnly' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_CheckDamage, K2Node_DynamicCast_AsBI_AJBInterface) == 0x000018, "Member 'BP_AJBFirstBombImpulsePlayer_C_CheckDamage::K2Node_DynamicCast_AsBI_AJBInterface' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_CheckDamage, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_AJBFirstBombImpulsePlayer_C_CheckDamage::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_CheckDamage, CallFunc_CheckDisableDirectDamage_bDisableDirectDamage) == 0x000029, "Member 'BP_AJBFirstBombImpulsePlayer_C_CheckDamage::CallFunc_CheckDisableDirectDamage_bDisableDirectDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_CheckDamage, CallFunc_CheckDamage_bNoDamage) == 0x00002A, "Member 'BP_AJBFirstBombImpulsePlayer_C_CheckDamage::CallFunc_CheckDamage_bNoDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_CheckDamage, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x00002B, "Member 'BP_AJBFirstBombImpulsePlayer_C_CheckDamage::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function BP_AJBFirstBombImpulsePlayer.BP_AJBFirstBombImpulsePlayer_C.GetPoliticPassiveTagOnDamage
// 0x0038 (0x0038 - 0x0000)
struct BP_AJBFirstBombImpulsePlayer_C_GetPoliticPassiveTagOnDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           PassiveTagOnDamage_0;                              // 0x0008(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Temp_struct_Variable;                              // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_GetPoliticPassiveTagOnDamage_PassiveTagOnDamage; // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Select_Default;                             // 0x0030(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBFirstBombImpulsePlayer_C_GetPoliticPassiveTagOnDamage) == 0x000008, "Wrong alignment on BP_AJBFirstBombImpulsePlayer_C_GetPoliticPassiveTagOnDamage");
static_assert(sizeof(BP_AJBFirstBombImpulsePlayer_C_GetPoliticPassiveTagOnDamage) == 0x000038, "Wrong size on BP_AJBFirstBombImpulsePlayer_C_GetPoliticPassiveTagOnDamage");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_GetPoliticPassiveTagOnDamage, DamagedActor) == 0x000000, "Member 'BP_AJBFirstBombImpulsePlayer_C_GetPoliticPassiveTagOnDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_GetPoliticPassiveTagOnDamage, PassiveTagOnDamage_0) == 0x000008, "Member 'BP_AJBFirstBombImpulsePlayer_C_GetPoliticPassiveTagOnDamage::PassiveTagOnDamage_0' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_GetPoliticPassiveTagOnDamage, Temp_bool_Variable) == 0x000010, "Member 'BP_AJBFirstBombImpulsePlayer_C_GetPoliticPassiveTagOnDamage::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_GetPoliticPassiveTagOnDamage, Temp_struct_Variable) == 0x000018, "Member 'BP_AJBFirstBombImpulsePlayer_C_GetPoliticPassiveTagOnDamage::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_GetPoliticPassiveTagOnDamage, CallFunc_GetPoliticPassiveTagOnDamage_PassiveTagOnDamage) == 0x000020, "Member 'BP_AJBFirstBombImpulsePlayer_C_GetPoliticPassiveTagOnDamage::CallFunc_GetPoliticPassiveTagOnDamage_PassiveTagOnDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_GetPoliticPassiveTagOnDamage, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000028, "Member 'BP_AJBFirstBombImpulsePlayer_C_GetPoliticPassiveTagOnDamage::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_GetPoliticPassiveTagOnDamage, K2Node_Select_Default) == 0x000030, "Member 'BP_AJBFirstBombImpulsePlayer_C_GetPoliticPassiveTagOnDamage::K2Node_Select_Default' has a wrong offset!");

// Function BP_AJBFirstBombImpulsePlayer.BP_AJBFirstBombImpulsePlayer_C.ShouldDamageOverlap
// 0x0018 (0x0018 - 0x0000)
struct BP_AJBFirstBombImpulsePlayer_C_ShouldDamageOverlap final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DamageCauser;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldOverlap;                                    // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldAddDamage_bShouldAddDamage;         // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldDamageOverlap_bShouldOverlap;       // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBFirstBombImpulsePlayer_C_ShouldDamageOverlap) == 0x000008, "Wrong alignment on BP_AJBFirstBombImpulsePlayer_C_ShouldDamageOverlap");
static_assert(sizeof(BP_AJBFirstBombImpulsePlayer_C_ShouldDamageOverlap) == 0x000018, "Wrong size on BP_AJBFirstBombImpulsePlayer_C_ShouldDamageOverlap");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_ShouldDamageOverlap, DamagedActor) == 0x000000, "Member 'BP_AJBFirstBombImpulsePlayer_C_ShouldDamageOverlap::DamagedActor' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_ShouldDamageOverlap, DamageCauser) == 0x000008, "Member 'BP_AJBFirstBombImpulsePlayer_C_ShouldDamageOverlap::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_ShouldDamageOverlap, bShouldOverlap) == 0x000010, "Member 'BP_AJBFirstBombImpulsePlayer_C_ShouldDamageOverlap::bShouldOverlap' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_ShouldDamageOverlap, CallFunc_ShouldAddDamage_bShouldAddDamage) == 0x000011, "Member 'BP_AJBFirstBombImpulsePlayer_C_ShouldDamageOverlap::CallFunc_ShouldAddDamage_bShouldAddDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBFirstBombImpulsePlayer_C_ShouldDamageOverlap, CallFunc_ShouldDamageOverlap_bShouldOverlap) == 0x000012, "Member 'BP_AJBFirstBombImpulsePlayer_C_ShouldDamageOverlap::CallFunc_ShouldDamageOverlap_bShouldOverlap' has a wrong offset!");

}

