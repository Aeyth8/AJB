#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBGrownupMessage

#include "Basic.hpp"

#include "BP_AJBGrownupMessage_classes.hpp"
#include "BP_AJBGrownupMessage_parameters.hpp"


namespace SDK
{

// Function BP_AJBGrownupMessage.BP_AJBGrownupMessage_C.RequestMessageByGameplayTag
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_AJBInGameCharacter_C*         TargetCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     GrowupTag                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UWB_SkillIcon_C*                  UnlockSkillIconWidget                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBGrownupMessage_C::RequestMessageByGameplayTag(class ABP_AJBInGameCharacter_C* TargetCharacter, const struct FGameplayTag& GrowupTag, float Value, class UWB_SkillIcon_C* UnlockSkillIconWidget, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrownupMessage_C", "RequestMessageByGameplayTag");

	Params::BP_AJBGrownupMessage_C_RequestMessageByGameplayTag Parms{};

	Parms.TargetCharacter = TargetCharacter;
	Parms.GrowupTag = std::move(GrowupTag);
	Parms.Value = Value;
	Parms.UnlockSkillIconWidget = UnlockSkillIconWidget;

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function BP_AJBGrownupMessage.BP_AJBGrownupMessage_C.SetupMessageWidget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWB_AbilityActivateMessage_C*     MessageWidget_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBGrownupMessage_C::SetupMessageWidget(class UWB_AbilityActivateMessage_C* MessageWidget_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrownupMessage_C", "SetupMessageWidget");

	Params::BP_AJBGrownupMessage_C_SetupMessageWidget Parms{};

	Parms.MessageWidget_0 = MessageWidget_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBGrownupMessage.BP_AJBGrownupMessage_C.MessageFulfillDisplayCondition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FGameplayTag                     GrowupTag                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class ABP_AJBInGameCharacter_C*         TargetCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bResult                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBGrownupMessage_C::MessageFulfillDisplayCondition(const struct FGameplayTag& GrowupTag, class ABP_AJBInGameCharacter_C* TargetCharacter, bool* bResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrownupMessage_C", "MessageFulfillDisplayCondition");

	Params::BP_AJBGrownupMessage_C_MessageFulfillDisplayCondition Parms{};

	Parms.GrowupTag = std::move(GrowupTag);
	Parms.TargetCharacter = TargetCharacter;

	UObject::ProcessEvent(Func, &Parms);

	if (bResult != nullptr)
		*bResult = Parms.bResult;
}


// Function BP_AJBGrownupMessage.BP_AJBGrownupMessage_C.RequestMessageByGameplayTagThreeParams
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_AJBInGameCharacter_C*         TargetCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     GrowupTag                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// float                                   Value01                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Value02                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Value03                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBGrownupMessage_C::RequestMessageByGameplayTagThreeParams(class ABP_AJBInGameCharacter_C* TargetCharacter, const struct FGameplayTag& GrowupTag, float Value01, float Value02, float Value03, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrownupMessage_C", "RequestMessageByGameplayTagThreeParams");

	Params::BP_AJBGrownupMessage_C_RequestMessageByGameplayTagThreeParams Parms{};

	Parms.TargetCharacter = TargetCharacter;
	Parms.GrowupTag = std::move(GrowupTag);
	Parms.Value01 = Value01;
	Parms.Value02 = Value02;
	Parms.Value03 = Value03;

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}

}

