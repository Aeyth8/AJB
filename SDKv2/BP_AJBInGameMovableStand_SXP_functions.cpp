#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameMovableStand_SXP

#include "Basic.hpp"

#include "BP_AJBInGameMovableStand_SXP_classes.hpp"
#include "BP_AJBInGameMovableStand_SXP_parameters.hpp"


namespace SDK
{

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnStateChanged__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovableStandSXPState                   PrevState                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMovableStandSXPState                   NextState                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_SXP_C::OnStateChanged__DelegateSignature(EMovableStandSXPState PrevState, EMovableStandSXPState NextState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "OnStateChanged__DelegateSignature");

	Params::BP_AJBInGameMovableStand_SXP_C_OnStateChanged__DelegateSignature Parms{};

	Parms.PrevState = PrevState;
	Parms.NextState = NextState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnMaxSpeedChanged__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovableSXPFlyingState                  FlyingState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_SXP_C::OnMaxSpeedChanged__DelegateSignature(EMovableSXPFlyingState FlyingState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "OnMaxSpeedChanged__DelegateSignature");

	Params::BP_AJBInGameMovableStand_SXP_C_OnMaxSpeedChanged__DelegateSignature Parms{};

	Parms.FlyingState = FlyingState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ExecuteUbergraph_BP_AJBInGameMovableStand_SXP
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_SXP_C::ExecuteUbergraph_BP_AJBInGameMovableStand_SXP(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "ExecuteUbergraph_BP_AJBInGameMovableStand_SXP");

	Params::BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnCharacterActiveBehaviorChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAJBInGameCharacter*              TargetCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECharacterActiveBehavior                OldBehavior                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECharacterActiveBehavior                NextBehavior                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSpecialBreakDown                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_SXP_C::OnCharacterActiveBehaviorChanged(class AAJBInGameCharacter* TargetCharacter, ECharacterActiveBehavior OldBehavior, ECharacterActiveBehavior NextBehavior, bool bSpecialBreakDown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "OnCharacterActiveBehaviorChanged");

	Params::BP_AJBInGameMovableStand_SXP_C_OnCharacterActiveBehaviorChanged Parms{};

	Parms.TargetCharacter = TargetCharacter;
	Parms.OldBehavior = OldBehavior;
	Parms.NextBehavior = NextBehavior;
	Parms.bSpecialBreakDown = bSpecialBreakDown;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ROS_OnDamageOverlap
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           HitActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_SXP_C::ROS_OnDamageOverlap(class AActor* HitActor, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "ROS_OnDamageOverlap");

	Params::BP_AJBInGameMovableStand_SXP_C_ROS_OnDamageOverlap Parms{};

	Parms.HitActor = HitActor;
	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnDamageOverlap
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           HitActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_SXP_C::OnDamageOverlap(class AActor* HitActor, const struct FVector& HitLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "OnDamageOverlap");

	Params::BP_AJBInGameMovableStand_SXP_C_OnDamageOverlap Parms{};

	Parms.HitActor = HitActor;
	Parms.HitLocation = std::move(HitLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.StopSpecialBreakDownAnimation
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_SXP_C::StopSpecialBreakDownAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "StopSpecialBreakDownAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.PlaySpecialBreakDownAnimation
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_SXP_C::PlaySpecialBreakDownAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "PlaySpecialBreakDownAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnSetViewTargetToNewSpectator
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_SXP_C::OnSetViewTargetToNewSpectator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "OnSetViewTargetToNewSpectator");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.StateBeginPlay
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_SXP_C::StateBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "StateBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnBeginState_Waiting
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovableStandSXPState                   PrevState                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_SXP_C::OnBeginState_Waiting(EMovableStandSXPState PrevState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "OnBeginState_Waiting");

	Params::BP_AJBInGameMovableStand_SXP_C_OnBeginState_Waiting Parms{};

	Parms.PrevState = PrevState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnBeginState_Kicking
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovableStandSXPState                   PrevState                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_SXP_C::OnBeginState_Kicking(EMovableStandSXPState PrevState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "OnBeginState_Kicking");

	Params::BP_AJBInGameMovableStand_SXP_C_OnBeginState_Kicking Parms{};

	Parms.PrevState = PrevState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnBeginState_Loitering
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovableStandSXPState                   PrevState                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_SXP_C::OnBeginState_Loitering(EMovableStandSXPState PrevState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "OnBeginState_Loitering");

	Params::BP_AJBInGameMovableStand_SXP_C_OnBeginState_Loitering Parms{};

	Parms.PrevState = PrevState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnBeginState_None
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovableStandSXPState                   PrevState                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_SXP_C::OnBeginState_None(EMovableStandSXPState PrevState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "OnBeginState_None");

	Params::BP_AJBInGameMovableStand_SXP_C_OnBeginState_None Parms{};

	Parms.PrevState = PrevState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.GenerateEffects
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           HitActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bHeadShot                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   CuttingRate                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDisableDamage                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bBlockedByAAP                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_SXP_C::GenerateEffects(const struct FVector& Location, class AActor* HitActor, bool bHeadShot, float CuttingRate, bool bDisableDamage, bool bBlockedByAAP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "GenerateEffects");

	Params::BP_AJBInGameMovableStand_SXP_C_GenerateEffects Parms{};

	Parms.Location = std::move(Location);
	Parms.HitActor = HitActor;
	Parms.bHeadShot = bHeadShot;
	Parms.CuttingRate = CuttingRate;
	Parms.bDisableDamage = bDisableDamage;
	Parms.bBlockedByAAP = bBlockedByAAP;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ReceiveDestroyed
// (Event, Public, BlueprintEvent)

void ABP_AJBInGameMovableStand_SXP_C::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "ReceiveDestroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnChangeFlyingState
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovableSXPFlyingState                  NewState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_SXP_C::OnChangeFlyingState(EMovableSXPFlyingState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "OnChangeFlyingState");

	Params::BP_AJBInGameMovableStand_SXP_C_OnChangeFlyingState Parms{};

	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ROS_ChangeFlyingState
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovableSXPFlyingState                  NewState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_SXP_C::ROS_ChangeFlyingState(EMovableSXPFlyingState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "ROS_ChangeFlyingState");

	Params::BP_AJBInGameMovableStand_SXP_C_ROS_ChangeFlyingState Parms{};

	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ChangeFlyingState
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovableSXPFlyingState                  NewState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_SXP_C::ChangeFlyingState(EMovableSXPFlyingState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "ChangeFlyingState");

	Params::BP_AJBInGameMovableStand_SXP_C_ChangeFlyingState Parms{};

	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ChangeStateCore
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovableStandSXPState                   PrevState                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMovableStandSXPState                   NextState                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_SXP_C::ChangeStateCore(EMovableStandSXPState PrevState, EMovableStandSXPState NextState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "ChangeStateCore");

	Params::BP_AJBInGameMovableStand_SXP_C_ChangeStateCore Parms{};

	Parms.PrevState = PrevState;
	Parms.NextState = NextState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnChangeState
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovableStandSXPState                   PrevState                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMovableStandSXPState                   NextState                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_SXP_C::OnChangeState(EMovableStandSXPState PrevState, EMovableStandSXPState NextState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "OnChangeState");

	Params::BP_AJBInGameMovableStand_SXP_C_OnChangeState Parms{};

	Parms.PrevState = PrevState;
	Parms.NextState = NextState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ChangeState_Local
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovableStandSXPState                   NextState                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_SXP_C::ChangeState_Local(EMovableStandSXPState NextState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "ChangeState_Local");

	Params::BP_AJBInGameMovableStand_SXP_C_ChangeState_Local Parms{};

	Parms.NextState = NextState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnMC_ChangeState
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovableStandSXPState                   PrevState                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMovableStandSXPState                   NextState                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_SXP_C::OnMC_ChangeState(EMovableStandSXPState PrevState, EMovableStandSXPState NextState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "OnMC_ChangeState");

	Params::BP_AJBInGameMovableStand_SXP_C_OnMC_ChangeState Parms{};

	Parms.PrevState = PrevState;
	Parms.NextState = NextState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnROS_ChangeState
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovableStandSXPState                   PrevState                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMovableStandSXPState                   NextState                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_SXP_C::OnROS_ChangeState(EMovableStandSXPState PrevState, EMovableStandSXPState NextState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "OnROS_ChangeState");

	Params::BP_AJBInGameMovableStand_SXP_C_OnROS_ChangeState Parms{};

	Parms.PrevState = PrevState;
	Parms.NextState = NextState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.MC_ChangeState
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovableStandSXPState                   PrevState                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMovableStandSXPState                   NextState                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_SXP_C::MC_ChangeState(EMovableStandSXPState PrevState, EMovableStandSXPState NextState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "MC_ChangeState");

	Params::BP_AJBInGameMovableStand_SXP_C_MC_ChangeState Parms{};

	Parms.PrevState = PrevState;
	Parms.NextState = NextState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ROS_ChangeState
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovableStandSXPState                   PrevState                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMovableStandSXPState                   NextState                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_SXP_C::ROS_ChangeState(EMovableStandSXPState PrevState, EMovableStandSXPState NextState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "ROS_ChangeState");

	Params::BP_AJBInGameMovableStand_SXP_C_ROS_ChangeState Parms{};

	Parms.PrevState = PrevState;
	Parms.NextState = NextState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnPressedR2
// (Event, Public, BlueprintEvent)

void ABP_AJBInGameMovableStand_SXP_C::OnPressedR2()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "OnPressedR2");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.MC_OnHitRodeoShot
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           HitActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bHeadShot                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   CuttingRate                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDisableDamage                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bBlockedByAAP                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_SXP_C::MC_OnHitRodeoShot(const struct FVector& HitLocation, class AActor* HitActor, bool bHeadShot, float CuttingRate, bool bDisableDamage, bool bBlockedByAAP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "MC_OnHitRodeoShot");

	Params::BP_AJBInGameMovableStand_SXP_C_MC_OnHitRodeoShot Parms{};

	Parms.HitLocation = std::move(HitLocation);
	Parms.HitActor = HitActor;
	Parms.bHeadShot = bHeadShot;
	Parms.CuttingRate = CuttingRate;
	Parms.bDisableDamage = bDisableDamage;
	Parms.bBlockedByAAP = bBlockedByAAP;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ROS_OnHitRodeoShot
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           HitActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bHeadShot                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   CuttingRate                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDisableDamage                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bBlockedByAAP                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_SXP_C::ROS_OnHitRodeoShot(const struct FVector& HitLocation, class AActor* HitActor, bool bHeadShot, float CuttingRate, bool bDisableDamage, bool bBlockedByAAP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "ROS_OnHitRodeoShot");

	Params::BP_AJBInGameMovableStand_SXP_C_ROS_OnHitRodeoShot Parms{};

	Parms.HitLocation = std::move(HitLocation);
	Parms.HitActor = HitActor;
	Parms.bHeadShot = bHeadShot;
	Parms.CuttingRate = CuttingRate;
	Parms.bDisableDamage = bDisableDamage;
	Parms.bBlockedByAAP = bBlockedByAAP;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_AJBInGameMovableStand_SXP_C::BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");

	Params::BP_AJBInGameMovableStand_SXP_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnHitRodeoShot
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           HitActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bHeadShot                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   CuttingRate                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDisableDamage                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_SXP_C::OnHitRodeoShot(const struct FVector& HitLocation, class AActor* HitActor, bool bHeadShot, float CuttingRate, bool bDisableDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "OnHitRodeoShot");

	Params::BP_AJBInGameMovableStand_SXP_C_OnHitRodeoShot Parms{};

	Parms.HitLocation = std::move(HitLocation);
	Parms.HitActor = HitActor;
	Parms.bHeadShot = bHeadShot;
	Parms.CuttingRate = CuttingRate;
	Parms.bDisableDamage = bDisableDamage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.MC_OnBlocking
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           BlockedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bReflect                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bSeparateStandAttack                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_SXP_C::MC_OnBlocking(class AActor* BlockedActor, const struct FVector& HitLocation, bool bReflect, bool bSeparateStandAttack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "MC_OnBlocking");

	Params::BP_AJBInGameMovableStand_SXP_C_MC_OnBlocking Parms{};

	Parms.BlockedActor = BlockedActor;
	Parms.HitLocation = std::move(HitLocation);
	Parms.bReflect = bReflect;
	Parms.bSeparateStandAttack = bSeparateStandAttack;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ROS_OnBlocking
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           BlockedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bReflect                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bSeparateStandAttack                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_SXP_C::ROS_OnBlocking(class AActor* BlockedActor, const struct FVector& HitLocation, bool bReflect, bool bSeparateStandAttack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "ROS_OnBlocking");

	Params::BP_AJBInGameMovableStand_SXP_C_ROS_OnBlocking Parms{};

	Parms.BlockedActor = BlockedActor;
	Parms.HitLocation = std::move(HitLocation);
	Parms.bReflect = bReflect;
	Parms.bSeparateStandAttack = bSeparateStandAttack;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.Blocking
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           BlockedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitNormal                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CuttingProjectile___                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CuttingOther___                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bInvincible                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bReflectProjectile                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         ReflectRotation                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    bAvoidSkill                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bSeparateStandAttack                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FGameplayTag                     ReflectSkillTag                                        (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_SXP_C::Blocking(class AActor* BlockedActor, class AActor* OtherActor, const struct FVector& HitLocation, const struct FVector& HitNormal, int32 CuttingProjectile___, int32 CuttingOther___, bool bInvincible, bool bReflectProjectile, const struct FRotator& ReflectRotation, bool bAvoidSkill, bool bSeparateStandAttack, const struct FGameplayTag& ReflectSkillTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "Blocking");

	Params::BP_AJBInGameMovableStand_SXP_C_Blocking Parms{};

	Parms.BlockedActor = BlockedActor;
	Parms.OtherActor = OtherActor;
	Parms.HitLocation = std::move(HitLocation);
	Parms.HitNormal = std::move(HitNormal);
	Parms.CuttingProjectile___ = CuttingProjectile___;
	Parms.CuttingOther___ = CuttingOther___;
	Parms.bInvincible = bInvincible;
	Parms.bReflectProjectile = bReflectProjectile;
	Parms.ReflectRotation = std::move(ReflectRotation);
	Parms.bAvoidSkill = bAvoidSkill;
	Parms.bSeparateStandAttack = bSeparateStandAttack;
	Parms.ReflectSkillTag = std::move(ReflectSkillTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ROC_Waiting
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_SXP_C::ROC_Waiting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "ROC_Waiting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnCompleted_4766B3DE4E785B5E56887793DC497D70
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_SXP_C::OnCompleted_4766B3DE4E785B5E56887793DC497D70(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "OnCompleted_4766B3DE4E785B5E56887793DC497D70");

	Params::BP_AJBInGameMovableStand_SXP_C_OnCompleted_4766B3DE4E785B5E56887793DC497D70 Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnBlendOut_4766B3DE4E785B5E56887793DC497D70
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_SXP_C::OnBlendOut_4766B3DE4E785B5E56887793DC497D70(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "OnBlendOut_4766B3DE4E785B5E56887793DC497D70");

	Params::BP_AJBInGameMovableStand_SXP_C_OnBlendOut_4766B3DE4E785B5E56887793DC497D70 Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnInterrupted_4766B3DE4E785B5E56887793DC497D70
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_SXP_C::OnInterrupted_4766B3DE4E785B5E56887793DC497D70(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "OnInterrupted_4766B3DE4E785B5E56887793DC497D70");

	Params::BP_AJBInGameMovableStand_SXP_C_OnInterrupted_4766B3DE4E785B5E56887793DC497D70 Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnNotifyBegin_4766B3DE4E785B5E56887793DC497D70
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_SXP_C::OnNotifyBegin_4766B3DE4E785B5E56887793DC497D70(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "OnNotifyBegin_4766B3DE4E785B5E56887793DC497D70");

	Params::BP_AJBInGameMovableStand_SXP_C_OnNotifyBegin_4766B3DE4E785B5E56887793DC497D70 Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnNotifyEnd_4766B3DE4E785B5E56887793DC497D70
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_SXP_C::OnNotifyEnd_4766B3DE4E785B5E56887793DC497D70(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "OnNotifyEnd_4766B3DE4E785B5E56887793DC497D70");

	Params::BP_AJBInGameMovableStand_SXP_C_OnNotifyEnd_4766B3DE4E785B5E56887793DC497D70 Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.Ignition_Local
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_SXP_C::Ignition_Local()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "Ignition_Local");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.InitializeStatus
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_SXP_C::InitializeStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "InitializeStatus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ConsumeDamage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_SXP_C::ConsumeDamage(int32 Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "ConsumeDamage");

	Params::BP_AJBInGameMovableStand_SXP_C_ConsumeDamage Parms{};

	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.Waiting_Local
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_SXP_C::Waiting_Local()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "Waiting_Local");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.DebugPrintLeftTime
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_SXP_C::DebugPrintLeftTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "DebugPrintLeftTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ChangeEnableMovement
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_SXP_C::ChangeEnableMovement(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "ChangeEnableMovement");

	Params::BP_AJBInGameMovableStand_SXP_C_ChangeEnableMovement Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ChangeEnableBullletVisibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_SXP_C::ChangeEnableBullletVisibility(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "ChangeEnableBullletVisibility");

	Params::BP_AJBInGameMovableStand_SXP_C_ChangeEnableBullletVisibility Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ChangeEnableEffect
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_SXP_C::ChangeEnableEffect(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "ChangeEnableEffect");

	Params::BP_AJBInGameMovableStand_SXP_C_ChangeEnableEffect Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ResetSpringArmLength
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_SXP_C::ResetSpringArmLength()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "ResetSpringArmLength");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.SetSpringArmLength
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Length                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_SXP_C::SetSpringArmLength(float Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "SetSpringArmLength");

	Params::BP_AJBInGameMovableStand_SXP_C_SetSpringArmLength Parms{};

	Parms.Length = Length;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.SkillSettings
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     InSkillTag                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class USkeletalMesh*                    InMesh                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     InAM_Loitering                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     InAM_Kicking                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     InEffectLoiteringTag                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     InEffectHitTag                                         (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     InSELoiteringTag                                       (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     InSEHitTag                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     InGionHitTag                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    bInEnableHeadShot                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   InMaxHP                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InMaxSpeedOnAccel                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InMaxSpeedDefault                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InMaxSpeedOnDeaccel                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InLoiteringTime                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InKickingTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InWaitingTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InHitDamage                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InHitDamageOnHeadShot                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InHeadShotTraceLength                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InSerialNumber                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     InAM_SpecialBreakDown                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_SXP_C::SkillSettings(const struct FGameplayTag& InSkillTag, class USkeletalMesh* InMesh, class UAnimMontage* InAM_Loitering, class UAnimMontage* InAM_Kicking, const struct FGameplayTag& InEffectLoiteringTag, const struct FGameplayTag& InEffectHitTag, const struct FGameplayTag& InSELoiteringTag, const struct FGameplayTag& InSEHitTag, const struct FGameplayTag& InGionHitTag, bool bInEnableHeadShot, int32 InMaxHP, float InMaxSpeedOnAccel, float InMaxSpeedDefault, float InMaxSpeedOnDeaccel, float InLoiteringTime, float InKickingTime, float InWaitingTime, int32 InHitDamage, int32 InHitDamageOnHeadShot, float InHeadShotTraceLength, int32 InSerialNumber, class UAnimMontage* InAM_SpecialBreakDown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "SkillSettings");

	Params::BP_AJBInGameMovableStand_SXP_C_SkillSettings Parms{};

	Parms.InSkillTag = std::move(InSkillTag);
	Parms.InMesh = InMesh;
	Parms.InAM_Loitering = InAM_Loitering;
	Parms.InAM_Kicking = InAM_Kicking;
	Parms.InEffectLoiteringTag = std::move(InEffectLoiteringTag);
	Parms.InEffectHitTag = std::move(InEffectHitTag);
	Parms.InSELoiteringTag = std::move(InSELoiteringTag);
	Parms.InSEHitTag = std::move(InSEHitTag);
	Parms.InGionHitTag = std::move(InGionHitTag);
	Parms.bInEnableHeadShot = bInEnableHeadShot;
	Parms.InMaxHP = InMaxHP;
	Parms.InMaxSpeedOnAccel = InMaxSpeedOnAccel;
	Parms.InMaxSpeedDefault = InMaxSpeedDefault;
	Parms.InMaxSpeedOnDeaccel = InMaxSpeedOnDeaccel;
	Parms.InLoiteringTime = InLoiteringTime;
	Parms.InKickingTime = InKickingTime;
	Parms.InWaitingTime = InWaitingTime;
	Parms.InHitDamage = InHitDamage;
	Parms.InHitDamageOnHeadShot = InHitDamageOnHeadShot;
	Parms.InHeadShotTraceLength = InHeadShotTraceLength;
	Parms.InSerialNumber = InSerialNumber;
	Parms.InAM_SpecialBreakDown = InAM_SpecialBreakDown;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ClearingLoiteringState
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_SXP_C::ClearingLoiteringState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "ClearingLoiteringState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.GetPoliticDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bHeadShot                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   Damage                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_SXP_C::GetPoliticDamage(bool bHeadShot, int32* Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "GetPoliticDamage");

	Params::BP_AJBInGameMovableStand_SXP_C_GetPoliticDamage Parms{};

	Parms.bHeadShot = bHeadShot;

	UObject::ProcessEvent(Func, &Parms);

	if (Damage != nullptr)
		*Damage = Parms.Damage;
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnRep_(ForSkipOwner)SXPFlyingState
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_SXP_C::OnRep__ForSkipOwner_SXPFlyingState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "OnRep_(ForSkipOwner)SXPFlyingState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ChangeSXPFlyingState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovableSXPFlyingState                  SXPFlyingState_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_SXP_C::ChangeSXPFlyingState(EMovableSXPFlyingState SXPFlyingState_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "ChangeSXPFlyingState");

	Params::BP_AJBInGameMovableStand_SXP_C_ChangeSXPFlyingState Parms{};

	Parms.SXPFlyingState_0 = SXPFlyingState_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.EndState_Local
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_SXP_C::EndState_Local()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "EndState_Local");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ClearingWaitingState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bFromLoitering                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_SXP_C::ClearingWaitingState(bool bFromLoitering)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "ClearingWaitingState");

	Params::BP_AJBInGameMovableStand_SXP_C_ClearingWaitingState Parms{};

	Parms.bFromLoitering = bFromLoitering;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.MovableStandSetup
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_SXP_C::MovableStandSetup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "MovableStandSetup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnDisappear
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_SXP_C::OnDisappear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "OnDisappear");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ReceiveTheWorld
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bOperatorIsEmpty                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_SXP_C::ReceiveTheWorld(float Time, bool bEnable, bool bOperatorIsEmpty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "ReceiveTheWorld");

	Params::BP_AJBInGameMovableStand_SXP_C_ReceiveTheWorld Parms{};

	Parms.Time = Time;
	Parms.bEnable = bEnable;
	Parms.bOperatorIsEmpty = bOperatorIsEmpty;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnRep_AppearanceTransition
// (Event, Public, BlueprintEvent)

void ABP_AJBInGameMovableStand_SXP_C::OnRep_AppearanceTransition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "OnRep_AppearanceTransition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_SXP_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "ReceiveTick");

	Params::BP_AJBInGameMovableStand_SXP_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_AJBInGameMovableStand_SXP_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.TryDestroyAffecter
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_SXP_C::TryDestroyAffecter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "TryDestroyAffecter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ChangeSXPState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovableStandSXPState                   NewSXPState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_SXP_C::ChangeSXPState(EMovableStandSXPState NewSXPState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "ChangeSXPState");

	Params::BP_AJBInGameMovableStand_SXP_C_ChangeSXPState Parms{};

	Parms.NewSXPState = NewSXPState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.RestoreSkillSettings
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_SXP_C::RestoreSkillSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "RestoreSkillSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.UpdateTransform
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_SXP_C::UpdateTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "UpdateTransform");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.CheckIgnoreBlocking
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIgnore                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_SXP_C::CheckIgnoreBlocking(class AActor* TargetActor, bool* bIgnore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "CheckIgnoreBlocking");

	Params::BP_AJBInGameMovableStand_SXP_C_CheckIgnoreBlocking Parms{};

	Parms.TargetActor = TargetActor;

	UObject::ProcessEvent(Func, &Parms);

	if (bIgnore != nullptr)
		*bIgnore = Parms.bIgnore;
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.CheckPassiveOnly
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsPassiveOnly                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_SXP_C::CheckPassiveOnly(bool* bIsPassiveOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "CheckPassiveOnly");

	Params::BP_AJBInGameMovableStand_SXP_C_CheckPassiveOnly Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bIsPassiveOnly != nullptr)
		*bIsPassiveOnly = Parms.bIsPassiveOnly;
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.UpdateCameraInput
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_SXP_C::UpdateCameraInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "UpdateCameraInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.AJBDamage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamagedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DamageForHPAP                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DamageForAAP                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CutDamage                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   SerialNumber_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EDamagePriority                         DamagePriority                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AttackDistance                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WithSeparatedStandAttack                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HitEnemysSeparatedStand                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bPenetrateAP                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bNotUseCollision                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_SXP_C::AJBDamage(class AActor* DamagedActor, int32 DamageForHPAP, int32 DamageForAAP, int32 CutDamage, const struct FGameplayTag& DamageType, int32 SerialNumber_0, EDamagePriority DamagePriority, float AttackDistance, class AActor* DamageCauser, bool WithSeparatedStandAttack, bool HitEnemysSeparatedStand, bool bPenetrateAP, bool bNotUseCollision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "AJBDamage");

	Params::BP_AJBInGameMovableStand_SXP_C_AJBDamage Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.DamageForHPAP = DamageForHPAP;
	Parms.DamageForAAP = DamageForAAP;
	Parms.CutDamage = CutDamage;
	Parms.DamageType = std::move(DamageType);
	Parms.SerialNumber_0 = SerialNumber_0;
	Parms.DamagePriority = DamagePriority;
	Parms.AttackDistance = AttackDistance;
	Parms.DamageCauser = DamageCauser;
	Parms.WithSeparatedStandAttack = WithSeparatedStandAttack;
	Parms.HitEnemysSeparatedStand = HitEnemysSeparatedStand;
	Parms.bPenetrateAP = bPenetrateAP;
	Parms.bNotUseCollision = bNotUseCollision;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_SXP_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.GetCollisionProfileName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             ProfileName                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_SXP_C::GetCollisionProfileName(class FName* ProfileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "GetCollisionProfileName");

	Params::BP_AJBInGameMovableStand_SXP_C_GetCollisionProfileName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ProfileName != nullptr)
		*ProfileName = Parms.ProfileName;
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.UpdateMovementForwardInput
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          WorldDirection                                         (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ScaleValue                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameMovableStand_SXP_C::UpdateMovementForwardInput(float Value, struct FVector* WorldDirection, float* ScaleValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "UpdateMovementForwardInput");

	Params::BP_AJBInGameMovableStand_SXP_C_UpdateMovementForwardInput Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);

	if (WorldDirection != nullptr)
		*WorldDirection = std::move(Parms.WorldDirection);

	if (ScaleValue != nullptr)
		*ScaleValue = Parms.ScaleValue;
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnBeforeInteract
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_SXP_C::OnBeforeInteract()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "OnBeforeInteract");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.UpdateMaterials
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameMovableStand_SXP_C::UpdateMaterials()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "UpdateMaterials");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ChangeStandMovementMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_SXP_C::ChangeStandMovementMode(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "ChangeStandMovementMode");

	Params::BP_AJBInGameMovableStand_SXP_C_ChangeStandMovementMode Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.CheckChangeableSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bChangeable                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameMovableStand_SXP_C::CheckChangeableSpeed(bool* bChangeable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "CheckChangeableSpeed");

	Params::BP_AJBInGameMovableStand_SXP_C_CheckChangeableSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bChangeable != nullptr)
		*bChangeable = Parms.bChangeable;
}


// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.GetPrimitivesToChangeStencil
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_StencilDigit                          StencilDigit                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UPrimitiveComponent*>      PrimitiveComponents                                    (Parm, OutParm, ZeroConstructor)

void ABP_AJBInGameMovableStand_SXP_C::GetPrimitivesToChangeStencil(E_StencilDigit StencilDigit, TArray<class UPrimitiveComponent*>* PrimitiveComponents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameMovableStand_SXP_C", "GetPrimitivesToChangeStencil");

	Params::BP_AJBInGameMovableStand_SXP_C_GetPrimitivesToChangeStencil Parms{};

	Parms.StencilDigit = StencilDigit;

	UObject::ProcessEvent(Func, &Parms);

	if (PrimitiveComponents != nullptr)
		*PrimitiveComponents = std::move(Parms.PrimitiveComponents);
}

}

