#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBGrowTree

#include "Basic.hpp"

#include "BP_AJBGrowTree_classes.hpp"
#include "BP_AJBGrowTree_parameters.hpp"


namespace SDK
{

// Function BP_AJBGrowTree.BP_AJBGrowTree_C.OnCompletedClearing__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_AJBGrowTree_C*                Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBGrowTree_C::OnCompletedClearing__DelegateSignature(class ABP_AJBGrowTree_C* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "OnCompletedClearing__DelegateSignature");

	Params::BP_AJBGrowTree_C_OnCompletedClearing__DelegateSignature Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.ExecuteUbergraph_BP_AJBGrowTree
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBGrowTree_C::ExecuteUbergraph_BP_AJBGrowTree(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "ExecuteUbergraph_BP_AJBGrowTree");

	Params::BP_AJBGrowTree_C_ExecuteUbergraph_BP_AJBGrowTree Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.OnBecomeLastSurvivor
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBGrowTree_C::OnBecomeLastSurvivor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "OnBecomeLastSurvivor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.OnDie_Local
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bWillRessurect                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bIsLastDefeated                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDiedOfKillZ                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBGrowTree_C::OnDie_Local(bool bWillRessurect, bool bIsLastDefeated, bool bDiedOfKillZ)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "OnDie_Local");

	Params::BP_AJBGrowTree_C_OnDie_Local Parms{};

	Parms.bWillRessurect = bWillRessurect;
	Parms.bIsLastDefeated = bIsLastDefeated;
	Parms.bDiedOfKillZ = bDiedOfKillZ;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_AJBGrowTree_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBGrowTree_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "ReceiveTick");

	Params::BP_AJBGrowTree_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.OnStateEnd
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBGrowTree_C::OnStateEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "OnStateEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.MC_StateEnd
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_AJBGrowTree_C::MC_StateEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "MC_StateEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.ROS_StateEnd
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_AJBGrowTree_C::ROS_StateEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "ROS_StateEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.ROS_BeginState_Clearing
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBeBroken                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBGrowTree_C::ROS_BeginState_Clearing(bool bBeBroken)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "ROS_BeginState_Clearing");

	Params::BP_AJBGrowTree_C_ROS_BeginState_Clearing Parms{};

	Parms.bBeBroken = bBeBroken;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.MC_BeginState_Grown
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_AJBGrowTree_C::MC_BeginState_Grown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "MC_BeginState_Grown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.ROS_BeginState_Grown
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_AJBGrowTree_C::ROS_BeginState_Grown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "ROS_BeginState_Grown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.OnBeginState_Grown
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBroken                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBGrowTree_C::OnBeginState_Grown(bool bBroken)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "OnBeginState_Grown");

	Params::BP_AJBGrowTree_C_OnBeginState_Grown Parms{};

	Parms.bBroken = bBroken;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.MC_BeginState_Growing
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_AJBGrowTree_C::MC_BeginState_Growing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "MC_BeginState_Growing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.ROS_BeginState_Growing
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_AJBGrowTree_C::ROS_BeginState_Growing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "ROS_BeginState_Growing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.OnBeginState_Growing
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBGrowTree_C::OnBeginState_Growing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "OnBeginState_Growing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.MC_BeginState_Clearing
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBeBroken                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBGrowTree_C::MC_BeginState_Clearing(bool bBeBroken)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "MC_BeginState_Clearing");

	Params::BP_AJBGrowTree_C_MC_BeginState_Clearing Parms{};

	Parms.bBeBroken = bBeBroken;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.OnBeginState_Clearing
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBeBroken                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBGrowTree_C::OnBeginState_Clearing(bool bBeBroken)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "OnBeginState_Clearing");

	Params::BP_AJBGrowTree_C_OnBeginState_Clearing Parms{};

	Parms.bBeBroken = bBeBroken;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.StateEnd
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBGrowTree_C::StateEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "StateEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.TickState_Clearing
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBGrowTree_C::TickState_Clearing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "TickState_Clearing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.TickState_Grown
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBGrowTree_C::TickState_Grown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "TickState_Grown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.BeginState_Clearing
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBeBroken                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBGrowTree_C::BeginState_Clearing(bool bBeBroken)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "BeginState_Clearing");

	Params::BP_AJBGrowTree_C_BeginState_Clearing Parms{};

	Parms.bBeBroken = bBeBroken;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.TickState_Growing
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBGrowTree_C::TickState_Growing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "TickState_Growing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.StateTick
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBGrowTree_C::StateTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "StateTick");

	Params::BP_AJBGrowTree_C_StateTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.OnValueArrivedMax
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBGrowTree_C::OnValueArrivedMax()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "OnValueArrivedMax");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.BeginState_Growing
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBGrowTree_C::BeginState_Growing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "BeginState_Growing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.BeginState_Grown
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBGrowTree_C::BeginState_Grown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "BeginState_Grown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.NotifyTheWorld
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAJBInGameCharacter*              Operator                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EGeneralTiming                          Timing                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bOperatorIsEmpty                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBGrowTree_C::NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "NotifyTheWorld");

	Params::BP_AJBGrowTree_C_NotifyTheWorld Parms{};

	Parms.Operator = Operator;
	Parms.Time = Time;
	Parms.Timing = Timing;
	Parms.bEnable = bEnable;
	Parms.bOperatorIsEmpty = bOperatorIsEmpty;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.MC_OnHPZero
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_AJBGrowTree_C::MC_OnHPZero()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "MC_OnHPZero");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.AJBDamage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamagedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DamageForHPAP                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DamageForAAP                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CutDamage                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   SerialNumber                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EDamagePriority                         DamagePriority                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AttackDistance                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WithSeparatedStandAttack                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HitEnemysSeparatedStand                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bPenetrateAP                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bNotUseCollision                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBGrowTree_C::AJBDamage(class AActor* DamagedActor, int32 DamageForHPAP, int32 DamageForAAP, int32 CutDamage, const struct FGameplayTag& DamageType, int32 SerialNumber, EDamagePriority DamagePriority, float AttackDistance, class AActor* DamageCauser, bool WithSeparatedStandAttack, bool HitEnemysSeparatedStand, bool bPenetrateAP, bool bNotUseCollision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "AJBDamage");

	Params::BP_AJBGrowTree_C_AJBDamage Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.DamageForHPAP = DamageForHPAP;
	Parms.DamageForAAP = DamageForAAP;
	Parms.CutDamage = CutDamage;
	Parms.DamageType = std::move(DamageType);
	Parms.SerialNumber = SerialNumber;
	Parms.DamagePriority = DamagePriority;
	Parms.AttackDistance = AttackDistance;
	Parms.DamageCauser = DamageCauser;
	Parms.WithSeparatedStandAttack = WithSeparatedStandAttack;
	Parms.HitEnemysSeparatedStand = HitEnemysSeparatedStand;
	Parms.bPenetrateAP = bPenetrateAP;
	Parms.bNotUseCollision = bNotUseCollision;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.OnAreaDamageDisabled
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBGrowTree_C::OnAreaDamageDisabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "OnAreaDamageDisabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.OnPassiveDisabled
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBGrowTree_C::OnPassiveDisabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "OnPassiveDisabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.OnDamageDisabled
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBGrowTree_C::OnDamageDisabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "OnDamageDisabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.DamageOverlapped
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bPenetrating                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FGameplayTag                     FactorTag                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ABP_AJBGrowTree_C::DamageOverlapped(class AActor* DamageCauser, const struct FVector& HitLocation, bool bPenetrating, const struct FGameplayTag& FactorTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "DamageOverlapped");

	Params::BP_AJBGrowTree_C_DamageOverlapped Parms{};

	Parms.DamageCauser = DamageCauser;
	Parms.HitLocation = std::move(HitLocation);
	Parms.bPenetrating = bPenetrating;
	Parms.FactorTag = std::move(FactorTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBGrowTree_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.ChangeState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EGrowTreeState                          NewState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBGrowTree_C::ChangeState(EGrowTreeState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "ChangeState");

	Params::BP_AJBGrowTree_C_ChangeState Parms{};

	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.TryClearingByDistance
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_AJBGrowTree_C::TryClearingByDistance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "TryClearingByDistance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.UpdateBase
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_AJBGrowTree_C::UpdateBase()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "UpdateBase");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.UpdateRoot
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_AJBGrowTree_C::UpdateRoot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "UpdateRoot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.CheckActiveState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bActive                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBGrowTree_C::CheckActiveState(bool* bActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "CheckActiveState");

	Params::BP_AJBGrowTree_C_CheckActiveState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bActive != nullptr)
		*bActive = Parms.bActive;
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.InitializeStatus
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBGrowTree_C::InitializeStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "InitializeStatus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.ConsumeDamage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBGrowTree_C::ConsumeDamage(int32 Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "ConsumeDamage");

	Params::BP_AJBGrowTree_C_ConsumeDamage Parms{};

	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.CheckState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EGrowTreeState                          State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bReturn                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBGrowTree_C::CheckState(EGrowTreeState State, bool* bReturn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "CheckState");

	Params::BP_AJBGrowTree_C_CheckState Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);

	if (bReturn != nullptr)
		*bReturn = Parms.bReturn;
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.UpdateParticleParameter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UParticleSystemComponent*         NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBGrowTree_C::UpdateParticleParameter(class UParticleSystemComponent* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "UpdateParticleParameter");

	Params::BP_AJBGrowTree_C_UpdateParticleParameter Parms{};

	Parms.NewParam = NewParam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.ChangeCollisionEnable
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBGrowTree_C::ChangeCollisionEnable(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "ChangeCollisionEnable");

	Params::BP_AJBGrowTree_C_ChangeCollisionEnable Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.GetAppliedCurveValue
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBGrowTree_C::GetAppliedCurveValue(float* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "GetAppliedCurveValue");

	Params::BP_AJBGrowTree_C_GetAppliedCurveValue Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.ApplyMaxTreeDistance
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBGrowTree_C::ApplyMaxTreeDistance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "ApplyMaxTreeDistance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.TryClearingByLocation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_AJBGrowTree_C::TryClearingByLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "TryClearingByLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.IfCheckDamageOverlap
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_AJBGrowTree_C::IfCheckDamageOverlap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "IfCheckDamageOverlap");

	Params::BP_AJBGrowTree_C_IfCheckDamageOverlap Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.OwnHitParam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bCharacter                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bLeftAP                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FGameplayTag                     ParticleTagBlockedByAAP                                (Parm, OutParm, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     SETagBlockedByAAP                                      (Parm, OutParm, NoDestructor, HasGetValueTypeHash)

void ABP_AJBGrowTree_C::OwnHitParam(bool* bCharacter, bool* bLeftAP, struct FGameplayTag* ParticleTagBlockedByAAP, struct FGameplayTag* SETagBlockedByAAP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "OwnHitParam");

	Params::BP_AJBGrowTree_C_OwnHitParam Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bCharacter != nullptr)
		*bCharacter = Parms.bCharacter;

	if (bLeftAP != nullptr)
		*bLeftAP = Parms.bLeftAP;

	if (ParticleTagBlockedByAAP != nullptr)
		*ParticleTagBlockedByAAP = std::move(Parms.ParticleTagBlockedByAAP);

	if (SETagBlockedByAAP != nullptr)
		*SETagBlockedByAAP = std::move(Parms.SETagBlockedByAAP);
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.CheckTargetSelf
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bForDamageOverlap                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bIgnoreMovableStand                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bTarget                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBGrowTree_C::CheckTargetSelf(class AActor* DamageCauser, bool bForDamageOverlap, bool bIgnoreMovableStand, bool* bTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "CheckTargetSelf");

	Params::BP_AJBGrowTree_C_CheckTargetSelf Parms{};

	Parms.DamageCauser = DamageCauser;
	Parms.bForDamageOverlap = bForDamageOverlap;
	Parms.bIgnoreMovableStand = bIgnoreMovableStand;

	UObject::ProcessEvent(Func, &Parms);

	if (bTarget != nullptr)
		*bTarget = Parms.bTarget;
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.CheckDisableDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDisableDamage                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBGrowTree_C::CheckDisableDamage(class AActor* DamageCauser, bool* bDisableDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "CheckDisableDamage");

	Params::BP_AJBGrowTree_C_CheckDisableDamage Parms{};

	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);

	if (bDisableDamage != nullptr)
		*bDisableDamage = Parms.bDisableDamage;
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.CheckDisablePassive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           PassiveCauser                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     PassiveTag                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    bDisablePassive                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBGrowTree_C::CheckDisablePassive(class AActor* PassiveCauser, const struct FGameplayTag& PassiveTag, bool* bDisablePassive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "CheckDisablePassive");

	Params::BP_AJBGrowTree_C_CheckDisablePassive Parms{};

	Parms.PassiveCauser = PassiveCauser;
	Parms.PassiveTag = std::move(PassiveTag);

	UObject::ProcessEvent(Func, &Parms);

	if (bDisablePassive != nullptr)
		*bDisablePassive = Parms.bDisablePassive;
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.CheckDisableAreaDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDisableAreadamage                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBGrowTree_C::CheckDisableAreaDamage(bool* bDisableAreadamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "CheckDisableAreaDamage");

	Params::BP_AJBGrowTree_C_CheckDisableAreaDamage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDisableAreadamage != nullptr)
		*bDisableAreadamage = Parms.bDisableAreadamage;
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.CheckNoDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bNoDamage                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBGrowTree_C::CheckNoDamage(class AActor* DamageCauser, bool* bNoDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "CheckNoDamage");

	Params::BP_AJBGrowTree_C_CheckNoDamage Parms{};

	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);

	if (bNoDamage != nullptr)
		*bNoDamage = Parms.bNoDamage;
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.IsReactedByReticule
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bResult                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBGrowTree_C::IsReactedByReticule(bool* bResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "IsReactedByReticule");

	Params::BP_AJBGrowTree_C_IsReactedByReticule Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bResult != nullptr)
		*bResult = Parms.bResult;
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.IgnoreTrace
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIgnore                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBGrowTree_C::IgnoreTrace(bool* bIgnore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "IgnoreTrace");

	Params::BP_AJBGrowTree_C_IgnoreTrace Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bIgnore != nullptr)
		*bIgnore = Parms.bIgnore;
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.CheckDisableDirectDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDisableDirectDamage                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBGrowTree_C::CheckDisableDirectDamage(class AActor* DamageCauser, bool* bDisableDirectDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "CheckDisableDirectDamage");

	Params::BP_AJBGrowTree_C_CheckDisableDirectDamage Parms{};

	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);

	if (bDisableDirectDamage != nullptr)
		*bDisableDirectDamage = Parms.bDisableDirectDamage;
}


// Function BP_AJBGrowTree.BP_AJBGrowTree_C.GetTargetLocation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBGrowTree_C::GetTargetLocation(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBGrowTree_C", "GetTargetLocation");

	Params::BP_AJBGrowTree_C_GetTargetLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}

}

