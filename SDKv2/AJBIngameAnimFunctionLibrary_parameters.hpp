#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AJBIngameAnimFunctionLibrary

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function AJBIngameAnimFunctionLibrary.AJBIngameAnimFunctionLibrary_C.CalcSplineIKPointTransforms
// 0x0290 (0x0290 - 0x0000)
struct AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetPointWorldLocation;                          // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        SplinePointOriginComponentLocation;                // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	float                                         FluctuationCoefficient;                            // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxFluctuationLength_cm_;                          // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bApplyFluctuationToComponentX;                     // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bApplyFluctuationToComponentY;                     // 0x0031(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bApplyFluctuationToComponentZ;                     // 0x0032(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SplinePointComponentLocationOffset;                // 0x0034(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               SplinePointComponentRotation;                      // 0x0040(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	bool                                          bDisplayDebugSphere;                               // 0x004C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTransform>                     Result;                                            // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<struct FTransform>                     Temp_Result;                                       // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	struct FVector                                Temp_FluctuationFactorVector;                      // 0x0078(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_SplinePointOriginComponentTipLocation;        // 0x0084(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_SplinePointOriginComponentRootLocation;       // 0x0090(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_SplinePointLastIndex;                         // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Temp_ComponentWorldTransform;                      // 0x00A0(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FVector                                Temp_TargetWorldLocationForSplinePoint;            // 0x00D0(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_CorrectionVector;                             // 0x00DC(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x00EC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue1;           // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10D[0x3];                                      // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue;           // 0x0120(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_128[0x8];                                      // 0x0128(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0130(0x0030)(IsPlainOldData, NoDestructor)
	float                                         Temp_float_Variable;                               // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable1;                              // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_169[0x3];                                      // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable2;                              // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable1;                               // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_175[0x3];                                      // 0x0175(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable3;                              // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable4;                              // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X1;                           // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y1;                           // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z1;                           // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X2;                           // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y2;                           // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z2;                           // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue2;           // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_199[0x3];                                      // 0x0199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable2;                               // 0x01A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A2[0x2];                                      // 0x01A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select1_Default;                            // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select2_Default;                            // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x01B0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x01BC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x01C8(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x01D4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable5;                              // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x01E4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x01F0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable6;                              // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable3;                               // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_201[0x3];                                      // 0x0201(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_InverseTransformLocation_ReturnValue;     // 0x0204(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select3_Default;                            // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable7;                              // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable8;                              // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0220(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x022C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22D[0x3];                                      // 0x022D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue1;            // 0x0230(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0240(0x0030)(IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable4;                               // 0x0274(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_275[0x3];                                      // 0x0275(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select4_Default;                            // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x027C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms) == 0x000010, "Wrong alignment on AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms");
static_assert(sizeof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms) == 0x000290, "Wrong size on AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, AnimInstance) == 0x000000, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::AnimInstance' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, TargetPointWorldLocation) == 0x000008, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::TargetPointWorldLocation' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, SplinePointOriginComponentLocation) == 0x000018, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::SplinePointOriginComponentLocation' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, FluctuationCoefficient) == 0x000028, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::FluctuationCoefficient' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, MaxFluctuationLength_cm_) == 0x00002C, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::MaxFluctuationLength_cm_' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, bApplyFluctuationToComponentX) == 0x000030, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::bApplyFluctuationToComponentX' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, bApplyFluctuationToComponentY) == 0x000031, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::bApplyFluctuationToComponentY' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, bApplyFluctuationToComponentZ) == 0x000032, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::bApplyFluctuationToComponentZ' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, SplinePointComponentLocationOffset) == 0x000034, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::SplinePointComponentLocationOffset' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, SplinePointComponentRotation) == 0x000040, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::SplinePointComponentRotation' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, bDisplayDebugSphere) == 0x00004C, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::bDisplayDebugSphere' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, __WorldContext) == 0x000050, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::__WorldContext' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, Result) == 0x000058, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::Result' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, Temp_Result) == 0x000068, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::Temp_Result' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, Temp_FluctuationFactorVector) == 0x000078, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::Temp_FluctuationFactorVector' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, Temp_SplinePointOriginComponentTipLocation) == 0x000084, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::Temp_SplinePointOriginComponentTipLocation' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, Temp_SplinePointOriginComponentRootLocation) == 0x000090, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::Temp_SplinePointOriginComponentRootLocation' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, Temp_SplinePointLastIndex) == 0x00009C, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::Temp_SplinePointLastIndex' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, Temp_ComponentWorldTransform) == 0x0000A0, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::Temp_ComponentWorldTransform' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, Temp_TargetWorldLocationForSplinePoint) == 0x0000D0, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::Temp_TargetWorldLocationForSplinePoint' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, Temp_CorrectionVector) == 0x0000DC, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::Temp_CorrectionVector' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, Temp_int_Array_Index_Variable) == 0x0000E8, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, CallFunc_Array_Get_Item) == 0x0000EC, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000F8, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, CallFunc_BreakVector_X) == 0x0000FC, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, CallFunc_BreakVector_Y) == 0x000100, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, CallFunc_BreakVector_Z) == 0x000104, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, CallFunc_Percent_IntInt_ReturnValue) == 0x000108, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, CallFunc_EqualEqual_IntInt_ReturnValue1) == 0x00010C, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::CallFunc_EqualEqual_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000110, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, CallFunc_Array_Length_ReturnValue) == 0x000114, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, CallFunc_Array_LastIndex_ReturnValue) == 0x000118, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, CallFunc_GetOwningComponent_ReturnValue) == 0x000120, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::CallFunc_GetOwningComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000130, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, Temp_float_Variable) == 0x000160, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, Temp_float_Variable1) == 0x000164, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::Temp_float_Variable1' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, Temp_bool_Variable) == 0x000168, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, K2Node_Select_Default) == 0x00016C, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, Temp_float_Variable2) == 0x000170, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::Temp_float_Variable2' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, Temp_bool_Variable1) == 0x000174, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, Temp_float_Variable3) == 0x000178, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::Temp_float_Variable3' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, Temp_float_Variable4) == 0x00017C, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::Temp_float_Variable4' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, CallFunc_BreakVector_X1) == 0x000180, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::CallFunc_BreakVector_X1' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, CallFunc_BreakVector_Y1) == 0x000184, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::CallFunc_BreakVector_Y1' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, CallFunc_BreakVector_Z1) == 0x000188, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::CallFunc_BreakVector_Z1' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, CallFunc_BreakVector_X2) == 0x00018C, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::CallFunc_BreakVector_X2' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, CallFunc_BreakVector_Y2) == 0x000190, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::CallFunc_BreakVector_Y2' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, CallFunc_BreakVector_Z2) == 0x000194, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::CallFunc_BreakVector_Z2' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, CallFunc_EqualEqual_IntInt_ReturnValue2) == 0x000198, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::CallFunc_EqualEqual_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, CallFunc_MapRangeClamped_ReturnValue) == 0x00019C, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, CallFunc_BooleanOR_ReturnValue) == 0x0001A0, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, Temp_bool_Variable2) == 0x0001A1, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, K2Node_Select1_Default) == 0x0001A4, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, K2Node_Select2_Default) == 0x0001A8, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x0001AC, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0001B0, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, CallFunc_BreakTransform_Location) == 0x0001BC, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, CallFunc_BreakTransform_Rotation) == 0x0001C8, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, CallFunc_BreakTransform_Scale) == 0x0001D4, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, Temp_float_Variable5) == 0x0001E0, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::Temp_float_Variable5' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, CallFunc_Add_VectorVector_ReturnValue) == 0x0001E4, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, CallFunc_VLerp_ReturnValue) == 0x0001F0, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, Temp_float_Variable6) == 0x0001FC, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::Temp_float_Variable6' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, Temp_bool_Variable3) == 0x000200, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::Temp_bool_Variable3' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, CallFunc_InverseTransformLocation_ReturnValue) == 0x000204, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::CallFunc_InverseTransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, K2Node_Select3_Default) == 0x000210, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::K2Node_Select3_Default' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, Temp_float_Variable7) == 0x000214, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::Temp_float_Variable7' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, Temp_float_Variable8) == 0x000218, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::Temp_float_Variable8' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, Temp_int_Loop_Counter_Variable) == 0x00021C, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000220, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, CallFunc_Less_IntInt_ReturnValue) == 0x00022C, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, CallFunc_Add_VectorVector_ReturnValue1) == 0x000230, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::CallFunc_Add_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, CallFunc_MakeTransform_ReturnValue) == 0x000240, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, CallFunc_Add_IntInt_ReturnValue) == 0x000270, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, Temp_bool_Variable4) == 0x000274, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::Temp_bool_Variable4' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, K2Node_Select4_Default) == 0x000278, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::K2Node_Select4_Default' has a wrong offset!");
static_assert(offsetof(AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms, CallFunc_MakeVector_ReturnValue) == 0x00027C, "Member 'AJBIngameAnimFunctionLibrary_C_CalcSplineIKPointTransforms::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

}

