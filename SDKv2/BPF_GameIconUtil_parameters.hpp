#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPF_GameIconUtil

#include "Basic.hpp"

#include "AJB_structs.hpp"


namespace SDK::Params
{

// Function BPF_GameIconUtil.BPF_GameIconUtil_C.GetAJBPadIcon
// 0x0020 (0x0020 - 0x0000)
struct BPF_GameIconUtil_C_GetAJBPadIcon final
{
public:
	EAJBPadIconType                               PadType;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             OutTexture;                                        // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_GameIconUtil_C_GetAJBPadIcon) == 0x000008, "Wrong alignment on BPF_GameIconUtil_C_GetAJBPadIcon");
static_assert(sizeof(BPF_GameIconUtil_C_GetAJBPadIcon) == 0x000020, "Wrong size on BPF_GameIconUtil_C_GetAJBPadIcon");
static_assert(offsetof(BPF_GameIconUtil_C_GetAJBPadIcon, PadType) == 0x000000, "Member 'BPF_GameIconUtil_C_GetAJBPadIcon::PadType' has a wrong offset!");
static_assert(offsetof(BPF_GameIconUtil_C_GetAJBPadIcon, __WorldContext) == 0x000008, "Member 'BPF_GameIconUtil_C_GetAJBPadIcon::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_GameIconUtil_C_GetAJBPadIcon, OutTexture) == 0x000010, "Member 'BPF_GameIconUtil_C_GetAJBPadIcon::OutTexture' has a wrong offset!");
static_assert(offsetof(BPF_GameIconUtil_C_GetAJBPadIcon, K2Node_SwitchEnum_CmpSuccess) == 0x000018, "Member 'BPF_GameIconUtil_C_GetAJBPadIcon::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BPF_GameIconUtil.BPF_GameIconUtil_C.GetAJBRewardItemTypeCommonIcon
// 0x0020 (0x0020 - 0x0000)
struct BPF_GameIconUtil_C_GetAJBRewardItemTypeCommonIcon final
{
public:
	ERewardItemType                               Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             OutTexture;                                        // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_GameIconUtil_C_GetAJBRewardItemTypeCommonIcon) == 0x000008, "Wrong alignment on BPF_GameIconUtil_C_GetAJBRewardItemTypeCommonIcon");
static_assert(sizeof(BPF_GameIconUtil_C_GetAJBRewardItemTypeCommonIcon) == 0x000020, "Wrong size on BPF_GameIconUtil_C_GetAJBRewardItemTypeCommonIcon");
static_assert(offsetof(BPF_GameIconUtil_C_GetAJBRewardItemTypeCommonIcon, Type) == 0x000000, "Member 'BPF_GameIconUtil_C_GetAJBRewardItemTypeCommonIcon::Type' has a wrong offset!");
static_assert(offsetof(BPF_GameIconUtil_C_GetAJBRewardItemTypeCommonIcon, __WorldContext) == 0x000008, "Member 'BPF_GameIconUtil_C_GetAJBRewardItemTypeCommonIcon::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_GameIconUtil_C_GetAJBRewardItemTypeCommonIcon, OutTexture) == 0x000010, "Member 'BPF_GameIconUtil_C_GetAJBRewardItemTypeCommonIcon::OutTexture' has a wrong offset!");
static_assert(offsetof(BPF_GameIconUtil_C_GetAJBRewardItemTypeCommonIcon, K2Node_SwitchEnum_CmpSuccess) == 0x000018, "Member 'BPF_GameIconUtil_C_GetAJBRewardItemTypeCommonIcon::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BPF_GameIconUtil.BPF_GameIconUtil_C.GetAJBRewardCharaProfileCommonIcon
// 0x0010 (0x0010 - 0x0000)
struct BPF_GameIconUtil_C_GetAJBRewardCharaProfileCommonIcon final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             OutTexture;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_GameIconUtil_C_GetAJBRewardCharaProfileCommonIcon) == 0x000008, "Wrong alignment on BPF_GameIconUtil_C_GetAJBRewardCharaProfileCommonIcon");
static_assert(sizeof(BPF_GameIconUtil_C_GetAJBRewardCharaProfileCommonIcon) == 0x000010, "Wrong size on BPF_GameIconUtil_C_GetAJBRewardCharaProfileCommonIcon");
static_assert(offsetof(BPF_GameIconUtil_C_GetAJBRewardCharaProfileCommonIcon, __WorldContext) == 0x000000, "Member 'BPF_GameIconUtil_C_GetAJBRewardCharaProfileCommonIcon::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_GameIconUtil_C_GetAJBRewardCharaProfileCommonIcon, OutTexture) == 0x000008, "Member 'BPF_GameIconUtil_C_GetAJBRewardCharaProfileCommonIcon::OutTexture' has a wrong offset!");

// Function BPF_GameIconUtil.BPF_GameIconUtil_C.GetAJBPadIcon_KeyAssignConsidering
// 0x0028 (0x0028 - 0x0000)
struct BPF_GameIconUtil_C_GetAJBPadIcon_KeyAssignConsidering final
{
public:
	EAJBPadIconType                               DefaultUIPadType;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             OutTexture;                                        // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAJBPadIconType                               CallFunc_ConvertAJBInGamePadIconKeyAction_ReturnValue; // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             CallFunc_GetAJBPadIcon_OutTexture;                 // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_GameIconUtil_C_GetAJBPadIcon_KeyAssignConsidering) == 0x000008, "Wrong alignment on BPF_GameIconUtil_C_GetAJBPadIcon_KeyAssignConsidering");
static_assert(sizeof(BPF_GameIconUtil_C_GetAJBPadIcon_KeyAssignConsidering) == 0x000028, "Wrong size on BPF_GameIconUtil_C_GetAJBPadIcon_KeyAssignConsidering");
static_assert(offsetof(BPF_GameIconUtil_C_GetAJBPadIcon_KeyAssignConsidering, DefaultUIPadType) == 0x000000, "Member 'BPF_GameIconUtil_C_GetAJBPadIcon_KeyAssignConsidering::DefaultUIPadType' has a wrong offset!");
static_assert(offsetof(BPF_GameIconUtil_C_GetAJBPadIcon_KeyAssignConsidering, __WorldContext) == 0x000008, "Member 'BPF_GameIconUtil_C_GetAJBPadIcon_KeyAssignConsidering::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_GameIconUtil_C_GetAJBPadIcon_KeyAssignConsidering, OutTexture) == 0x000010, "Member 'BPF_GameIconUtil_C_GetAJBPadIcon_KeyAssignConsidering::OutTexture' has a wrong offset!");
static_assert(offsetof(BPF_GameIconUtil_C_GetAJBPadIcon_KeyAssignConsidering, CallFunc_ConvertAJBInGamePadIconKeyAction_ReturnValue) == 0x000018, "Member 'BPF_GameIconUtil_C_GetAJBPadIcon_KeyAssignConsidering::CallFunc_ConvertAJBInGamePadIconKeyAction_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_GameIconUtil_C_GetAJBPadIcon_KeyAssignConsidering, CallFunc_GetAJBPadIcon_OutTexture) == 0x000020, "Member 'BPF_GameIconUtil_C_GetAJBPadIcon_KeyAssignConsidering::CallFunc_GetAJBPadIcon_OutTexture' has a wrong offset!");

}

