#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGamePlayerController

#include "Basic.hpp"

#include "E_ClimaxBGMPlayTimingByDamageArea_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "AJB_structs.hpp"
#include "AJB_classes.hpp"
#include "E_VoiceCommandType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBInGamePlayerController.BP_AJBInGamePlayerController_C
// 0x0178 (0x0898 - 0x0720)
class ABP_AJBInGamePlayerController_C : public AAJBInGamePlayerController
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0720(0x0008)(Transient, DuplicateTransient)
	class UBP_AchievementTriggerSender_PlayerController_C* BP_AchievementTriggerSender_PlayerController;      // 0x0728(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AJBAIMessenger_C*                   BP_AJBAIMessenger;                                 // 0x0730(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_GameFlowStateManager_C*             BP_GameFlowStateManager;                           // 0x0738(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameItemAccesser_C*            ItemAccesser;                                      // 0x0740(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameEffectPoolManager_C*       Rep_EffectPoolManager;                             // 0x0748(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameMessageManager_C*          Rep_MessageManager;                                // 0x0750(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CharacterNo;                                       // 0x0758(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_75C[0x4];                                      // 0x075C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              GameEndTime;                                       // 0x0760(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         KillCount;                                         // 0x0768(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_76C[0x4];                                      // 0x076C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBHitEventAccesser_C*              HitEventAccesser;                                  // 0x0770(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           SendEvent;                                         // 0x0778(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          bIsStandbyGame;                                    // 0x0780(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_781[0x7];                                      // 0x0781(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               SpectatorTarget;                                   // 0x0788(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnReadyCharacterDispatcher;                        // 0x0790(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class UClass*>                         CharacterClassList;                                // 0x07A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          bDebugShowAtkHitLocation;                          // 0x07B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B1[0x7];                                      // 0x07B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameVictoryShotCamera_C*       VictoryShotCamera;                                 // 0x07B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBinGameDeathCamera_C*             DeathCamera;                                       // 0x07C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CheckSpectatorTargetTimer;                         // 0x07C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	float                                         CheckSpectatorTimeSpan;                            // 0x07D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BattleGameRank;                                    // 0x07D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBWwiseManager_C*                  Rep_WwiseManager;                                  // 0x07D8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CheckLoginPlayerInfoTimer;                         // 0x07E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FVector                                StartLocation;                                     // 0x07E8(0x000C)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F4[0x4];                                      // 0x07F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           PlayingBGM;                                        // 0x07F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnDetermineLivingTime_Local;                       // 0x0800(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         DamageAreaRestOfIntervalCountForClimaxBGM;         // 0x0810(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ClimaxBGMPlayTimingByDamageArea             ClimaxBGMPlayTimingByDamageArea;                   // 0x0814(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_815[0x3];                                      // 0x0815(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnDetermineBattleGameRank_Local;                   // 0x0818(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsDebugCharacterChange;                            // 0x0828(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_829[0x7];                                      // 0x0829(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               CharacterBPRef;                                    // 0x0830(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              WatchingStartTime;                                 // 0x0838(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnDetermineWatchingTime_Local;                     // 0x0840(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bDebugShowFlowState;                               // 0x0850(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_851[0x7];                                      // 0x0851(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnSetViewTargetToNewSpectator_Local;               // 0x0858(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UBP_DebugInputCountComponent_C*         DevOnly_InputCountComponent;                       // 0x0868(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_CommonWIndow_S_C*                   UploadingConfirm;                                  // 0x0870(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ShowUploadingConfirmTimer;                         // 0x0878(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FTimerHandle                           TimerHandle_WaitForNewViewTarget;                  // 0x0880(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class ABP_AJBinGameDeathCamera_C*             DeathCamera_Client;                                // 0x0888(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebugShowDistanceLimit;                           // 0x0890(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_891[0x3];                                      // 0x0891(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DebugDistanceLimitSegments;                        // 0x0894(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnReadyCharacterDispatcher__DelegateSignature(uint8 PlayerID, class AAJBInGameCharacter* TargetCharacter);
	void OnDetermineLivingTime_Local__DelegateSignature(const struct FTimespan& LivingTime);
	void OnDetermineBattleGameRank_Local__DelegateSignature(int32 BattleGameRank_0, int32 BattleGameRankWithoutCPU);
	void OnDetermineWatchingTime_Local__DelegateSignature(const struct FTimespan& WatchingTime);
	void OnSetViewTargetToNewSpectator_Local__DelegateSignature();
	void ExecuteUbergraph_BP_AJBInGamePlayerController(int32 EntryPoint);
	void ChangeDashInputMode(EDashInputMode NewMode);
	void InitializeDashInputMode();
	void NotifySettingNewViewTarget(class UObject* NewViewTarget);
	void WaitForNewViewTarget();
	void OnPawnLeavingGameBP();
	void ChangeKeyAssign(EAJBKeyConfigType KeyConfigType);
	void OnSetupInputComponentBP();
	void ROC_NotifySettingViewTargetToNewSpectator(class AActor* BeforeViewTarget, class AActor* CurrentViewTarget, bool bBeforeAndCurrentAreRelated);
	void ReceiveTick(float DeltaSeconds);
	void ROC_SetClientControlRotation(const struct FRotator& Rotation);
	void BeginPlay_ServerOnly();
	void ROC_SyncProperties(int32 ControlledMatchingPlayerIndex, class AAJBInGameCharacterBase* PairCharacter, const class FString& PairID);
	void ROS_SyncProperties();
	void BeginPlay_LocalController();
	void ROS_OnPlayerFinalize();
	void OnPlayerFinalize_Local();
	void SetSpectatorTarget(class ABP_AJBInGameCharacter_C* Target);
	void ROS_TryChangeViewTarget();
	void ChangeViewTargetAtRandom();
	void ROC_SetViewTargetFromCharacter(class ABP_AJBInGameCharacter_C* Character_0);
	void ResetStandby();
	void ROS_StandbyOK();
	void ROC_RequestCharactorNo();
	void ROS_SendCharaInfo(int32 CharacterNo_0);
	void ReceiveBeginPlay();
	void ROC_Debug_SyncMatchingPlayerInfo(const TArray<class FString>& KeyList, const TArray<struct FMatchingPlayerInfo>& ValueList);
	void ROS_Debug_ChangeSkinColorAtRandom();
	void Debug_ROC_PrintPairInfo(const TArray<class FString>& PairInfoStrings);
	void Debug_ROS_PrintPairInfo();
	void ROS_Debug_ChangeDamageArea(uint8 AreaType);
	void Debug_ChangeDamageArea(uint8 AreaType);
	void ROS_DebugCharacterDamage(int32 Damage);
	void DebugCharacterDamage(int32 Damage);
	void ROS_Debug_VanishDamageArea();
	void Debug_VanishDamageArea();
	void ToggleFlag_ShowCloseRangeDebugInfo();
	void ROS_DebugShowSpectatorsInfo(bool bShow);
	void DebugShowWwiseInfo(bool bShowDebugPrint);
	void OnDebugSuicide();
	void ROS_Suicide();
	void ROC_ResponsePlayerInfo(uint8 Player_ID, uint8 Team_ID, uint8 Charactor_ID, EInGameProgressID In_Game_Progress_ID, const struct FStartLocation& Start_Location, const class FString& InString);
	void ROS_RequestPlayerInfo();
	void ToggleShowAtkHitLocation();
	void ROS_DebugRemovePassiveSkills();
	void DebugRemovePassiveSkills();
	void ROS_DebugAddPassiveSkill(const struct FGameplayTag& PassiveSkillTag, class UObject* Causer);
	void DebugAddPassiveSkill(const struct FGameplayTag& PassiveSkillTag);
	void ROS_DebugTogglePauseDamageArea(bool IsOn);
	void DebugTogglePauseDamageArea(bool bIsOn);
	void OnChangeQualityFromDebugMenu();
	void OnDebugChangeQuality();
	void DebugSetNPCNum(int32 NPCNum);
	void ROS_DebugSetNPCNum(uint8 NPCNum);
	void ROS_DebugCharaChange(int32 CharacterNo_0);
	void DebugCharacterChange(int32 CharacterNo_0);
	void CallStopClimaxBGM();
	void CheckPlayClimaxBGMByLivingPlayerCount(int32 Count, float LivingPlayerRate, int32 PairCount);
	void CheckPlayClimaxBGMByDamageArea();
	void SetDeathCamera_Client_(class ABP_AJBinGameDeathCamera_C* DeathCamera_0);
	void OnEnd_VictoryResult(const struct FGameplayTag& NextState);
	void CloseUploadingConfirm();
	void OnShowUploadingConfirm();
	void ROS_SetCharacterBPRef(class ABP_AJBInGameCharacter_C* CharacterBPRef_0);
	void ROC_SetLivingTime();
	void StartInGameDefaultBGM();
	void ROC_OnEnd_VictoryShot_Posing();
	void ROS_OnEnd_VictoryShot_Posing();
	void ROS_PossessDeathCamera();
	void ROS_SetupDeathCamera(class AActor* CameraTarget, bool bSkipWatchingDeadBody);
	void WaiitCaptureLoop();
	void OnTimeOut();
	void OnClosedFailedMessage(class UAJBWindowWidget* TargetWidget);
	void ROC_SetBattleGameRank(int32 BattleGameRank_0, int32 BattleGameRankWithoutCPU);
	void OnBegin_VictoryShot_Finish(const struct FGameplayTag& PrevState);
	void ChangeState(const struct FGameplayTag& NextStateTag);
	void ROC_ChangeStateWithRank(const struct FGameplayTag& NextStateTag, int32 Rank, int32 RankWithoutCPU);
	void OnTick_InGameSpectator(float DeltaSecond);
	void OnActiveHUD();
	void OnBegin_GameResult(const struct FGameplayTag& PrevState);
	void OnEnd_Gameplay(const struct FGameplayTag& NextState);
	void OnTick_Gameplay(float DeltaSecond);
	void OnBegin_Gameplay(const struct FGameplayTag& PrevState);
	void ROS_PossessVictoryShotCamera();
	void OnEnd_VictoryShot_Posing(const struct FGameplayTag& NextState);
	void OnBegin_VictoryResult(const struct FGameplayTag& PrevState);
	void ROS_SetupVictoryShotCamera();
	void OnBegin_VictroyShot_Posing(const struct FGameplayTag& PrevState);
	void OnBegin_VictoryShot_Shot(const struct FGameplayTag& PrevState);
	void OnBegin_Exit(const struct FGameplayTag& PrevState);
	void OnTick_InGameStandBy(float DeltaSecond);
	void OnEnd_InGameSpectator(const struct FGameplayTag& NextState);
	void OnBegin_InGameSpectator(const struct FGameplayTag& PrevState);
	void OnEnd_InGameRetire(const struct FGameplayTag& NextState);
	void OnBegin_InGameRetire(const struct FGameplayTag& PrevState);
	void OnEnd_InGameStandBy(const struct FGameplayTag& NextState);
	void OnBegin_InGameStandby(const struct FGameplayTag& PrevState);
	void ROC_ChangeState(const struct FGameplayTag& NextStateTag);
	void OnBegin_SimpleMatchExit(const struct FGameplayTag& PrevState);
	void BindFlowStateEvent();
	void ROC_PlayDownSE();
	void ROC_PlayKnockdownSE();
	void ROC_SpeakVoiceFromRemote(class ABP_AJBInGameCharacter_C* Character_0, const struct FGameplayTag& VoiceTag, E_VoiceCommandType VoiceCommandType);
	void OnSuccess_0F16E7A64DDAD633C5E69784E63CFA47(EAJBNetAPIResult Result);
	void OnFailed_0F16E7A64DDAD633C5E69784E63CFA47(EAJBNetAPIResult Result);
	void UserConstructionScript();
	void OnRep_CharacterNo();
	void InitializeScore();
	void GetCurrentFlowState(struct FGameplayTag* FlowState);
	void SpawnPlayerCharacter();
	void IsStandby(bool* Result);
	void ChangeFlowState(const struct FGameplayTag& NewFlowState);
	void SafetyPossess(class APawn* NewPawn, bool bUseClientSideCameraUpdate, class APawn** BeforePossessedPawn);
	void OnPawnClientRestarted();
	void GetControlledCharacter(class ABP_AJBInGameCharacter_C** AsBP_AJBIn_Game_Character);
	void CheckSpectatorTarget();
	struct FTimespan GetGamePlayTime();
	void CheckLoginPlayerInfo();
	void PlayClimaxBGM(const struct FGameplayTag& BGMTag);
	void StopClimaxBGM();
	void SetBattleGameRankIfPossible(int32 NewBattleGameRank, int32 NewBattleGameRankWithoutCPU);
	void SetLivingTime();
	void CalcProperWorldLocationForCamera(float Radius, struct FVector* Result);
	void IsWatcherCameraControlled(bool* bResult);
	void Debug_CreatePairInfoString(TArray<class FString>* PairInfoStrings);
	void Debug_StartStickTiltingCount();
	void OnEndVictoryShotPosing();
	void DebugChangeShowDistanceLimit(bool bEnable);
	void DebugChangeDistanceLimitSegments(int32 Segments);
	struct FVector GetCameraForwardVector();
	struct FVector GetCameraLocation();
	void GetCameraInfo(struct FVector* Location, struct FRotator* Rotation, float* FOV_0);
	void GetPassiveSkillTag(struct FGameplayTag* PassiveSkillTag);
	void GetDuration(float* Duration);
	void GetCauserOwnerCharacterBP(class ABP_AJBInGameCharacter_C** CharacterBP);
	void IsLocalTransitionGameResult(bool* bTransition);

	void GetGameStartLocation(struct FVector* Location) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBInGamePlayerController_C">();
	}
	static class ABP_AJBInGamePlayerController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBInGamePlayerController_C>();
	}
};
static_assert(alignof(ABP_AJBInGamePlayerController_C) == 0x000008, "Wrong alignment on ABP_AJBInGamePlayerController_C");
static_assert(sizeof(ABP_AJBInGamePlayerController_C) == 0x000898, "Wrong size on ABP_AJBInGamePlayerController_C");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, UberGraphFrame) == 0x000720, "Member 'ABP_AJBInGamePlayerController_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, BP_AchievementTriggerSender_PlayerController) == 0x000728, "Member 'ABP_AJBInGamePlayerController_C::BP_AchievementTriggerSender_PlayerController' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, BP_AJBAIMessenger) == 0x000730, "Member 'ABP_AJBInGamePlayerController_C::BP_AJBAIMessenger' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, BP_GameFlowStateManager) == 0x000738, "Member 'ABP_AJBInGamePlayerController_C::BP_GameFlowStateManager' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, ItemAccesser) == 0x000740, "Member 'ABP_AJBInGamePlayerController_C::ItemAccesser' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, Rep_EffectPoolManager) == 0x000748, "Member 'ABP_AJBInGamePlayerController_C::Rep_EffectPoolManager' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, Rep_MessageManager) == 0x000750, "Member 'ABP_AJBInGamePlayerController_C::Rep_MessageManager' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, CharacterNo) == 0x000758, "Member 'ABP_AJBInGamePlayerController_C::CharacterNo' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, GameEndTime) == 0x000760, "Member 'ABP_AJBInGamePlayerController_C::GameEndTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, KillCount) == 0x000768, "Member 'ABP_AJBInGamePlayerController_C::KillCount' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, HitEventAccesser) == 0x000770, "Member 'ABP_AJBInGamePlayerController_C::HitEventAccesser' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, SendEvent) == 0x000778, "Member 'ABP_AJBInGamePlayerController_C::SendEvent' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, bIsStandbyGame) == 0x000780, "Member 'ABP_AJBInGamePlayerController_C::bIsStandbyGame' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, SpectatorTarget) == 0x000788, "Member 'ABP_AJBInGamePlayerController_C::SpectatorTarget' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, OnReadyCharacterDispatcher) == 0x000790, "Member 'ABP_AJBInGamePlayerController_C::OnReadyCharacterDispatcher' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, CharacterClassList) == 0x0007A0, "Member 'ABP_AJBInGamePlayerController_C::CharacterClassList' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, bDebugShowAtkHitLocation) == 0x0007B0, "Member 'ABP_AJBInGamePlayerController_C::bDebugShowAtkHitLocation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, VictoryShotCamera) == 0x0007B8, "Member 'ABP_AJBInGamePlayerController_C::VictoryShotCamera' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, DeathCamera) == 0x0007C0, "Member 'ABP_AJBInGamePlayerController_C::DeathCamera' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, CheckSpectatorTargetTimer) == 0x0007C8, "Member 'ABP_AJBInGamePlayerController_C::CheckSpectatorTargetTimer' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, CheckSpectatorTimeSpan) == 0x0007D0, "Member 'ABP_AJBInGamePlayerController_C::CheckSpectatorTimeSpan' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, BattleGameRank) == 0x0007D4, "Member 'ABP_AJBInGamePlayerController_C::BattleGameRank' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, Rep_WwiseManager) == 0x0007D8, "Member 'ABP_AJBInGamePlayerController_C::Rep_WwiseManager' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, CheckLoginPlayerInfoTimer) == 0x0007E0, "Member 'ABP_AJBInGamePlayerController_C::CheckLoginPlayerInfoTimer' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, StartLocation) == 0x0007E8, "Member 'ABP_AJBInGamePlayerController_C::StartLocation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, PlayingBGM) == 0x0007F8, "Member 'ABP_AJBInGamePlayerController_C::PlayingBGM' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, OnDetermineLivingTime_Local) == 0x000800, "Member 'ABP_AJBInGamePlayerController_C::OnDetermineLivingTime_Local' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, DamageAreaRestOfIntervalCountForClimaxBGM) == 0x000810, "Member 'ABP_AJBInGamePlayerController_C::DamageAreaRestOfIntervalCountForClimaxBGM' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, ClimaxBGMPlayTimingByDamageArea) == 0x000814, "Member 'ABP_AJBInGamePlayerController_C::ClimaxBGMPlayTimingByDamageArea' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, OnDetermineBattleGameRank_Local) == 0x000818, "Member 'ABP_AJBInGamePlayerController_C::OnDetermineBattleGameRank_Local' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, IsDebugCharacterChange) == 0x000828, "Member 'ABP_AJBInGamePlayerController_C::IsDebugCharacterChange' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, CharacterBPRef) == 0x000830, "Member 'ABP_AJBInGamePlayerController_C::CharacterBPRef' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, WatchingStartTime) == 0x000838, "Member 'ABP_AJBInGamePlayerController_C::WatchingStartTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, OnDetermineWatchingTime_Local) == 0x000840, "Member 'ABP_AJBInGamePlayerController_C::OnDetermineWatchingTime_Local' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, bDebugShowFlowState) == 0x000850, "Member 'ABP_AJBInGamePlayerController_C::bDebugShowFlowState' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, OnSetViewTargetToNewSpectator_Local) == 0x000858, "Member 'ABP_AJBInGamePlayerController_C::OnSetViewTargetToNewSpectator_Local' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, DevOnly_InputCountComponent) == 0x000868, "Member 'ABP_AJBInGamePlayerController_C::DevOnly_InputCountComponent' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, UploadingConfirm) == 0x000870, "Member 'ABP_AJBInGamePlayerController_C::UploadingConfirm' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, ShowUploadingConfirmTimer) == 0x000878, "Member 'ABP_AJBInGamePlayerController_C::ShowUploadingConfirmTimer' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, TimerHandle_WaitForNewViewTarget) == 0x000880, "Member 'ABP_AJBInGamePlayerController_C::TimerHandle_WaitForNewViewTarget' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, DeathCamera_Client) == 0x000888, "Member 'ABP_AJBInGamePlayerController_C::DeathCamera_Client' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, bDebugShowDistanceLimit) == 0x000890, "Member 'ABP_AJBInGamePlayerController_C::bDebugShowDistanceLimit' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePlayerController_C, DebugDistanceLimitSegments) == 0x000894, "Member 'ABP_AJBInGamePlayerController_C::DebugDistanceLimitSegments' has a wrong offset!");

}

