#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HUDCountDownTimerWrapper

#include "Basic.hpp"


namespace SDK::Params
{

// Function BP_HUDCountDownTimerWrapper.BP_HUDCountDownTimerWrapper_C.ExecuteUbergraph_BP_HUDCountDownTimerWrapper
// 0x0050 (0x0050 - 0x0000)
struct BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSuspended_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable1;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable1;                // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue1;        // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_MaxTime;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBHUDBase*                            K2Node_CustomEvent_AJBHUDBase;                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_InDeltaTime;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue1;         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue1;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue1;                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable1;                                // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsVisible;                      // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSuspended_ReturnValue1;                 // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper) == 0x000008, "Wrong alignment on BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper");
static_assert(sizeof(BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper) == 0x000050, "Wrong size on BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper");
static_assert(offsetof(BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper, EntryPoint) == 0x000000, "Member 'BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper, CallFunc_IsSuspended_ReturnValue) == 0x000004, "Member 'BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper::CallFunc_IsSuspended_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper, Temp_int_Variable) == 0x000008, "Member 'BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper, Temp_bool_IsClosed_Variable) == 0x00000C, "Member 'BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper, Temp_bool_Has_Been_Initd_Variable) == 0x00000D, "Member 'BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00000E, "Member 'BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper, CallFunc_FMax_ReturnValue) == 0x000014, "Member 'BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper, CallFunc_FMin_ReturnValue) == 0x000018, "Member 'BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper, Temp_bool_IsClosed_Variable1) == 0x00001C, "Member 'BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper::Temp_bool_IsClosed_Variable1' has a wrong offset!");
static_assert(offsetof(BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper, Temp_bool_Has_Been_Initd_Variable1) == 0x00001D, "Member 'BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper::Temp_bool_Has_Been_Initd_Variable1' has a wrong offset!");
static_assert(offsetof(BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper, CallFunc_LessEqual_FloatFloat_ReturnValue1) == 0x00001E, "Member 'BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper::CallFunc_LessEqual_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper, K2Node_CustomEvent_MaxTime) == 0x000020, "Member 'BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper::K2Node_CustomEvent_MaxTime' has a wrong offset!");
static_assert(offsetof(BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper, K2Node_CustomEvent_AJBHUDBase) == 0x000028, "Member 'BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper::K2Node_CustomEvent_AJBHUDBase' has a wrong offset!");
static_assert(offsetof(BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper, K2Node_CustomEvent_InDeltaTime) == 0x000030, "Member 'BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper::K2Node_CustomEvent_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper, CallFunc_Subtract_FloatFloat_ReturnValue1) == 0x000034, "Member 'BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper::CallFunc_Subtract_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper, CallFunc_FMax_ReturnValue1) == 0x000038, "Member 'BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper::CallFunc_FMax_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper, CallFunc_FMin_ReturnValue1) == 0x00003C, "Member 'BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper::CallFunc_FMin_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper, Temp_int_Variable1) == 0x000040, "Member 'BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper::Temp_int_Variable1' has a wrong offset!");
static_assert(offsetof(BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper, CallFunc_Subtract_IntInt_ReturnValue) == 0x000048, "Member 'BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper, K2Node_CustomEvent_IsVisible) == 0x00004C, "Member 'BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper::K2Node_CustomEvent_IsVisible' has a wrong offset!");
static_assert(offsetof(BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper, CallFunc_IsSuspended_ReturnValue1) == 0x00004D, "Member 'BP_HUDCountDownTimerWrapper_C_ExecuteUbergraph_BP_HUDCountDownTimerWrapper::CallFunc_IsSuspended_ReturnValue1' has a wrong offset!");

// Function BP_HUDCountDownTimerWrapper.BP_HUDCountDownTimerWrapper_C.SetVisibility
// 0x0001 (0x0001 - 0x0000)
struct BP_HUDCountDownTimerWrapper_C_SetVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUDCountDownTimerWrapper_C_SetVisibility) == 0x000001, "Wrong alignment on BP_HUDCountDownTimerWrapper_C_SetVisibility");
static_assert(sizeof(BP_HUDCountDownTimerWrapper_C_SetVisibility) == 0x000001, "Wrong size on BP_HUDCountDownTimerWrapper_C_SetVisibility");
static_assert(offsetof(BP_HUDCountDownTimerWrapper_C_SetVisibility, IsVisible) == 0x000000, "Member 'BP_HUDCountDownTimerWrapper_C_SetVisibility::IsVisible' has a wrong offset!");

// Function BP_HUDCountDownTimerWrapper.BP_HUDCountDownTimerWrapper_C.UpdateTime
// 0x0004 (0x0004 - 0x0000)
struct BP_HUDCountDownTimerWrapper_C_UpdateTime final
{
public:
	float                                         InDeltaTime;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUDCountDownTimerWrapper_C_UpdateTime) == 0x000004, "Wrong alignment on BP_HUDCountDownTimerWrapper_C_UpdateTime");
static_assert(sizeof(BP_HUDCountDownTimerWrapper_C_UpdateTime) == 0x000004, "Wrong size on BP_HUDCountDownTimerWrapper_C_UpdateTime");
static_assert(offsetof(BP_HUDCountDownTimerWrapper_C_UpdateTime, InDeltaTime) == 0x000000, "Member 'BP_HUDCountDownTimerWrapper_C_UpdateTime::InDeltaTime' has a wrong offset!");

// Function BP_HUDCountDownTimerWrapper.BP_HUDCountDownTimerWrapper_C.Init
// 0x0010 (0x0010 - 0x0000)
struct BP_HUDCountDownTimerWrapper_C_Init final
{
public:
	float                                         MaxTime_0;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBHUDBase*                            AJBHUDBase_0;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUDCountDownTimerWrapper_C_Init) == 0x000008, "Wrong alignment on BP_HUDCountDownTimerWrapper_C_Init");
static_assert(sizeof(BP_HUDCountDownTimerWrapper_C_Init) == 0x000010, "Wrong size on BP_HUDCountDownTimerWrapper_C_Init");
static_assert(offsetof(BP_HUDCountDownTimerWrapper_C_Init, MaxTime_0) == 0x000000, "Member 'BP_HUDCountDownTimerWrapper_C_Init::MaxTime_0' has a wrong offset!");
static_assert(offsetof(BP_HUDCountDownTimerWrapper_C_Init, AJBHUDBase_0) == 0x000008, "Member 'BP_HUDCountDownTimerWrapper_C_Init::AJBHUDBase_0' has a wrong offset!");

// Function BP_HUDCountDownTimerWrapper.BP_HUDCountDownTimerWrapper_C.GetAJBHUDBase
// 0x0008 (0x0008 - 0x0000)
struct BP_HUDCountDownTimerWrapper_C_GetAJBHUDBase final
{
public:
	class AAJBHUDBase*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUDCountDownTimerWrapper_C_GetAJBHUDBase) == 0x000008, "Wrong alignment on BP_HUDCountDownTimerWrapper_C_GetAJBHUDBase");
static_assert(sizeof(BP_HUDCountDownTimerWrapper_C_GetAJBHUDBase) == 0x000008, "Wrong size on BP_HUDCountDownTimerWrapper_C_GetAJBHUDBase");
static_assert(offsetof(BP_HUDCountDownTimerWrapper_C_GetAJBHUDBase, ReturnValue) == 0x000000, "Member 'BP_HUDCountDownTimerWrapper_C_GetAJBHUDBase::ReturnValue' has a wrong offset!");

// Function BP_HUDCountDownTimerWrapper.BP_HUDCountDownTimerWrapper_C.GetMaxTime
// 0x0004 (0x0004 - 0x0000)
struct BP_HUDCountDownTimerWrapper_C_GetMaxTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUDCountDownTimerWrapper_C_GetMaxTime) == 0x000004, "Wrong alignment on BP_HUDCountDownTimerWrapper_C_GetMaxTime");
static_assert(sizeof(BP_HUDCountDownTimerWrapper_C_GetMaxTime) == 0x000004, "Wrong size on BP_HUDCountDownTimerWrapper_C_GetMaxTime");
static_assert(offsetof(BP_HUDCountDownTimerWrapper_C_GetMaxTime, ReturnValue) == 0x000000, "Member 'BP_HUDCountDownTimerWrapper_C_GetMaxTime::ReturnValue' has a wrong offset!");

// Function BP_HUDCountDownTimerWrapper.BP_HUDCountDownTimerWrapper_C.GetCurrentTime
// 0x0004 (0x0004 - 0x0000)
struct BP_HUDCountDownTimerWrapper_C_GetCurrentTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_HUDCountDownTimerWrapper_C_GetCurrentTime) == 0x000004, "Wrong alignment on BP_HUDCountDownTimerWrapper_C_GetCurrentTime");
static_assert(sizeof(BP_HUDCountDownTimerWrapper_C_GetCurrentTime) == 0x000004, "Wrong size on BP_HUDCountDownTimerWrapper_C_GetCurrentTime");
static_assert(offsetof(BP_HUDCountDownTimerWrapper_C_GetCurrentTime, ReturnValue) == 0x000000, "Member 'BP_HUDCountDownTimerWrapper_C_GetCurrentTime::ReturnValue' has a wrong offset!");

// Function BP_HUDCountDownTimerWrapper.BP_HUDCountDownTimerWrapper_C.IsSuspended
// 0x0002 (0x0002 - 0x0000)
struct BP_HUDCountDownTimerWrapper_C_IsSuspended final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_HUDCountDownTimerWrapper_C_IsSuspended) == 0x000001, "Wrong alignment on BP_HUDCountDownTimerWrapper_C_IsSuspended");
static_assert(sizeof(BP_HUDCountDownTimerWrapper_C_IsSuspended) == 0x000002, "Wrong size on BP_HUDCountDownTimerWrapper_C_IsSuspended");
static_assert(offsetof(BP_HUDCountDownTimerWrapper_C_IsSuspended, ReturnValue) == 0x000000, "Member 'BP_HUDCountDownTimerWrapper_C_IsSuspended::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_HUDCountDownTimerWrapper_C_IsSuspended, CallFunc_Less_IntInt_ReturnValue) == 0x000001, "Member 'BP_HUDCountDownTimerWrapper_C_IsSuspended::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

}

