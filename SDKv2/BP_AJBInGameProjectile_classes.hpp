#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameProjectile

#include "Basic.hpp"

#include "AJB_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "E_VoiceProcessType_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBInGameProjectile.BP_AJBInGameProjectile_C
// 0x0150 (0x0478 - 0x0328)
class ABP_AJBInGameProjectile_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(Transient, DuplicateTransient)
	class USphereComponent*                       Sphere;                                            // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         CollisionRadius;                                   // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShotRange;                                         // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Damage;                                            // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DamageOnSeparate;                                  // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DamageOnHeadShot;                                  // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bConsume;                                          // 0x034C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34D[0x3];                                      // 0x034D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           HitEffectTag;                                      // 0x0350(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           HitSETagNonCharacter;                              // 0x0358(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 DecalClass;                                        // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableHeadShot;                                   // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_369[0x3];                                      // 0x0369(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeadShotTraceLength;                               // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPenetrate;                                        // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_371[0x3];                                      // 0x0371(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FirstLocation;                                     // 0x0374(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SkillTag;                                          // 0x0380(0x0008)(Edit, BlueprintVisible, Net, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FGameplayTag                           PassiveSkillTag;                                   // 0x0388(0x0008)(Edit, BlueprintVisible, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         PassiveSkillDuration_Sec_;                         // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         AdditionalGravityPower;                            // 0x0394(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                HitLocation;                                       // 0x0398(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x03A4(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              HitSurfaceType;                                    // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B1[0x3];                                      // 0x03B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpeedScale;                                        // 0x03B4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                FiredWorldLocation;                                // 0x03B8(0x000C)(Edit, BlueprintVisible, Net, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bAlreadyFirstHit;                                  // 0x03C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugShowTrace;                                   // 0x03C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C6[0x2];                                      // 0x03C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SerialNumber;                                      // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bLaunchFromSeparatedStand;                         // 0x03CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_3CD[0x3];                                      // 0x03CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           HitNonCharacterEffectTag;                          // 0x03D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         PlayHitSEInterval_Sec_;                            // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeftPlayHitSETime;                                 // 0x03DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpawnDecalInterval_cm_;                            // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeftSpawnDecalDistance;                            // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PreLocation;                                       // 0x03E8(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebugSpawnDecal;                                  // 0x03F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F5[0x3];                                      // 0x03F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameProjectileObjectiveCollisionDetector_C* ObjectiveCollisionDetector;                        // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseObjectiveCollisionDetector;                    // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EAJBSkillType                                 SkillType;                                         // 0x0401(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_402[0x6];                                      // 0x0402(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           OverrideCharaParam;                                // 0x0408(0x0008)(Edit, BlueprintVisible, Net, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bDuringTheWorld;                                   // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_411[0x3];                                      // 0x0411(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GravityPowerScale;                                 // 0x0414(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBlockingOnProjectileOwnerEnv;                     // 0x0418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAdditionalBlockingCheckOnProjectileOwnerEnv;      // 0x0419(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bNotChangeOwnerOnReflect;                          // 0x041A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bReflectSingle;                                    // 0x041B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bReflectLimit;                                     // 0x041C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_41D[0x3];                                      // 0x041D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ParticleTagDestroySelf;                            // 0x0420(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bOptimizePenetratePerformance;                     // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_429[0x3];                                      // 0x0429(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RequestHitEffectCount;                             // 0x042C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RequestHitEffectCountLimit;                        // 0x0430(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bStopPenetrateOnCharacterHit;                      // 0x0434(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_435[0x3];                                      // 0x0435(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 ProjectileTrailClass;                              // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameProjectileTrailBase_C*     ProjectileTrail;                                   // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           VoiceTagDestroySelf;                               // 0x0448(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	E_VoiceProcessType                            VoiceProcessTypeDestroySelf;                       // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIgnoreAddPassiveForMovableStand;                  // 0x0451(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_452[0x2];                                      // 0x0452(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GravitySpeedScale;                                 // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ReflectSkillTag;                                   // 0x0458(0x0008)(Edit, BlueprintVisible, Net, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bDamageAttenuation;                                // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_461[0x3];                                      // 0x0461(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DamageAttenuationDistance;                         // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AttenuationDamage;                                 // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AttenuationDamageOnSeparate;                       // 0x046C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AttenuationDamageOnHeadShot;                       // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBInGameProjectile(int32 EntryPoint);
	void MC_DestroySelf(const struct FVector& Location);
	void ROS_NotifyBlockingOnProjectileOwnerEnv(const struct FVector& Location, const struct FVector& Normal, class UBP_AJBBlockingRushSkill_C* BlockingSkillComponent, bool bSeparateStandAttack);
	void RequestHitEffect_Core(const struct FVector& Location, const struct FVector& Normal, const struct FRotator& Rotation, bool bCharacter, bool bLeftAP, bool bBlocking, bool bHeadShot, EPhysicalSurface SurfaceType, bool bBlockedByAAP, const struct FGameplayTag& ParticleTagBlockedByAAP);
	void MC_RequestHitEffect(const struct FVector& Location, const struct FVector& Normal, const struct FRotator& Rotation, bool bCharacter, bool bLeftAP, bool bBlocking, bool bHeadShot, EPhysicalSurface SurfaceType, bool bBlockedByAAP, const struct FGameplayTag& ParticleTagBlockedByAAP);
	void ROS_RequestHitEffect(const struct FVector& Location, const struct FVector& Normal, const struct FRotator& Rotation, bool bCharacter, bool bLeftAP, bool bBlocking, bool bHeadShot, EPhysicalSurface SurfaceType, bool bBlockedByAAP, const struct FGameplayTag& ParticleTagBlockedByAAP);
	void RequestHitEffect(const struct FVector& Location, const struct FVector& Normal, const struct FRotator& Rotation, bool bCharacter, bool bLeftAP, bool bBlocking, bool bHeadShot, EPhysicalSurface SurfaceType, bool bBlockedByAAP, const struct FGameplayTag& ParticleTagBlockedByAAP);
	void OnHitObjectiveCollision_Local(class AActor* HitActor, const struct FVector& HitLocation_0, const struct FVector& HitNormal_0, EPhysicalSurface HitSurfaceType_0);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void BeginObjectiveCollisionOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnHitObjectiveCollision_Server(const struct FVector& Location);
	void OnHitObjectiveCollision_All();
	void MC_HitObjectiveCollision();
	void ROS_HitObjectiveCollision(const struct FVector& HitLocation_0);
	void ROS_OnDamageOverlap(class AActor* HitActor, const struct FVector& Location);
	void OnDamageOverlap(class AActor* HitActor, const struct FVector& HitLocation_0);
	void OnPassiveSkillAffecting(bool bSuccess, class AActor* HitActor, const struct FVector& HitLocation_0, const struct FVector& HitNormal_0, bool bHeadShot, bool bPenetrate_0, float CuttingRate);
	void ReceiveBeginPlay();
	void ROS_TryServerConsume(class AActor* HitActor, const struct FVector& HitLocation_0, const struct FVector& HitNormal_0, bool bHeadShot, bool bPenetrate_0, bool bFirstHit, float CuttingRate, EPhysicalSurface SurfaceType, bool bDisableDamage, bool bReflect, const struct FRotator& ReflectRotation, bool bBlocking, bool bBlockedByAAP, const struct FGameplayTag& ReflectSkillTag_0);
	void MC_TryServerConsume(class AActor* HitActor, const struct FVector& HitLocation_0, bool bHeadShot, EPhysicalSurface SurfaceType, bool bDisableDamage, float CuttingRate, bool bBlockedByAAP, bool bReflect);
	void TryServerConsume(class AActor* HitActor, const struct FVector& HitLocation_0, const struct FVector& HitNormal_0, bool bHeadShot, bool bPenetrate_0, bool bFirstHit, float CuttingRate, EPhysicalSurface SurfaceType, bool bDisableDamage, bool bReflect, const struct FRotator& ReflectRotation, bool bBlocking, bool bBlockedByAAP, const struct FGameplayTag& ReflectSkillTag_0);
	void SpawnParticle(const struct FVector& SpawnLocation, const struct FVector& SpawnNormal, bool bBlocking, bool bHeadShot, class AActor* HitActor, EPhysicalSurface SurfaceType);
	void LocalConsume();
	void OnMC_ProjectileHit(class AActor* HitActor, const struct FVector& HitLocation_0, bool bHeadShot, EPhysicalSurface SurfaceType, bool bDisableDamage, float CuttingRate, bool bBlockedByAAP, bool bReflect);
	void OnROS_ProjectileHit(class AActor* HitActor, const struct FVector& HitLocation_0, const struct FVector& HitNormal_0, bool bHeadShot, bool bPenetrate_0, bool bFirstHit, float CuttingRate, bool bDisableDamage, bool bReflect, const struct FRotator& ReflectRotation, bool bBlocking, const struct FGameplayTag& ReflectSkillTag_0);
	void OnProjectileHit(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool FromSweep, const struct FHitResult& SweepResult, bool bHeadShot, bool bPenetrate_0, bool bFirstHit);
	void ROS_DestroySelf();
	void CheckRange();
	void ReceiveTick(float DeltaSeconds);
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);
	void ForceSpawn();
	void OnAreaDamageDisabled();
	void OnPassiveDisabled();
	void OnDamageDisabled();
	void DamageOverlapped(class AActor* DamageCauser, const struct FVector& HitLocation_0, bool bPenetrating, const struct FGameplayTag& FactorTag);
	void AJBDamage(class AActor* DamagedActor, int32 DamageForHPAP, int32 DamageForAAP, int32 CutDamage, const struct FGameplayTag& DamageType, int32 SerialNumber_0, EDamagePriority DamagePriority, float AttackDistance, class AActor* DamageCauser, bool WithSeparatedStandAttack, bool HitEnemysSeparatedStand, bool bPenetrateAP, bool bNotUseCollision);
	void UserConstructionScript();
	void OnCollisionOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, const struct FHitResult& SweepResult);
	void GetPoliticDamage(bool bHeadShot, int32* Damage_0);
	void CheckHeadShot(class AActor* HitActor, const struct FVector& Location, const struct FVector& Direction, bool* bHeadShot);
	void DebugDrawHitLocation(const struct FVector& HitLocation_0);
	void PlayHitSE(class AActor* HitActor, const struct FVector& HitLocation_0, bool bHeadShot, EPhysicalSurface SurfaceType, float CuttingRate, bool bBlockedByAAP);
	void CheckCharacterIsAlive(class AActor* Actor, bool* bIsAlive);
	void GetMovementLength(float* Length);
	void SetLeftPlayHitSETime();
	void CheckPossiblePlayHitSE(bool* bPossible);
	void UpdateLeftPlayHitSETime(float DeltaSeconds);
	void SetLeftSpawnDecalDistance();
	void UpdateLeftSpawnDecalDistance();
	void CheckPossibleSpawnDecal(bool* bPossible);
	void ApplyProjectileParameter();
	void GetAppropriateCharaParam(struct FGameplayTag* CharaParam);
	void ShouldCheckRange(bool* bShouldCheckRange);
	void CheckSeparateStandAttack(class AActor* DamageOwner, bool* bSeparateStandAttack);
	void ShouldRequestHitEffect(bool bCharacter, bool bBlocking, bool* bShouldRequest);
	void CheckPenetrate(class AActor* TargetActor, bool* bPenetrate_0);
	void CheckIgnoreAddPassive(class AActor* HitActor, bool* bIgnore);
	void CalcDamageOnSeparate(int32* Damage_0);
	void CalcDamageOnHeadShot(int32* Damage_0);
	void ShouldAttenuation(bool* bShouldAttenuation);
	void CalcDamageOnDefault(int32* Damage_0);
	void GetMoveLengthUsedHitLocation(float* MoveLength);
	void CheckTargetSelf(class AActor* DamageCauser, bool bForDamageOverlap, bool bIgnoreMovableStand, bool* bTarget);
	void OwnHitParam(bool* bCharacter, bool* bLeftAP, struct FGameplayTag* ParticleTagBlockedByAAP, struct FGameplayTag* SETagBlockedByAAP);
	bool IfCheckDamageOverlap();
	void CheckDisableDamage(class AActor* DamageCauser, bool* bDisableDamage);
	void CheckDisablePassive(class AActor* PassiveCauser, const struct FGameplayTag& PassiveTag, bool* bDisablePassive);
	void CheckDisableAreaDamage(bool* bDisableAreadamage);
	void CheckNoDamage(class AActor* DamageCauser, bool* bNoDamage);
	void IsReactedByReticule(bool* bResult);
	void IgnoreTrace(bool* bIgnore);
	void CheckDisableDirectDamage(class AActor* DamageCauser, bool* bDisableDirectDamage);
	void GetDuration(float* Duration);
	void GetPassiveSkillTag(struct FGameplayTag* PassiveSkillTag_0);
	void GetCauserOwnerCharacterBP(class ABP_AJBInGameCharacter_C** CharacterBP);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBInGameProjectile_C">();
	}
	static class ABP_AJBInGameProjectile_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBInGameProjectile_C>();
	}
};
static_assert(alignof(ABP_AJBInGameProjectile_C) == 0x000008, "Wrong alignment on ABP_AJBInGameProjectile_C");
static_assert(sizeof(ABP_AJBInGameProjectile_C) == 0x000478, "Wrong size on ABP_AJBInGameProjectile_C");
static_assert(offsetof(ABP_AJBInGameProjectile_C, UberGraphFrame) == 0x000328, "Member 'ABP_AJBInGameProjectile_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, Sphere) == 0x000330, "Member 'ABP_AJBInGameProjectile_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, CollisionRadius) == 0x000338, "Member 'ABP_AJBInGameProjectile_C::CollisionRadius' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, ShotRange) == 0x00033C, "Member 'ABP_AJBInGameProjectile_C::ShotRange' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, Damage) == 0x000340, "Member 'ABP_AJBInGameProjectile_C::Damage' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, DamageOnSeparate) == 0x000344, "Member 'ABP_AJBInGameProjectile_C::DamageOnSeparate' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, DamageOnHeadShot) == 0x000348, "Member 'ABP_AJBInGameProjectile_C::DamageOnHeadShot' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, bConsume) == 0x00034C, "Member 'ABP_AJBInGameProjectile_C::bConsume' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, HitEffectTag) == 0x000350, "Member 'ABP_AJBInGameProjectile_C::HitEffectTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, HitSETagNonCharacter) == 0x000358, "Member 'ABP_AJBInGameProjectile_C::HitSETagNonCharacter' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, DecalClass) == 0x000360, "Member 'ABP_AJBInGameProjectile_C::DecalClass' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, bEnableHeadShot) == 0x000368, "Member 'ABP_AJBInGameProjectile_C::bEnableHeadShot' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, HeadShotTraceLength) == 0x00036C, "Member 'ABP_AJBInGameProjectile_C::HeadShotTraceLength' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, bPenetrate) == 0x000370, "Member 'ABP_AJBInGameProjectile_C::bPenetrate' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, FirstLocation) == 0x000374, "Member 'ABP_AJBInGameProjectile_C::FirstLocation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, SkillTag) == 0x000380, "Member 'ABP_AJBInGameProjectile_C::SkillTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, PassiveSkillTag) == 0x000388, "Member 'ABP_AJBInGameProjectile_C::PassiveSkillTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, PassiveSkillDuration_Sec_) == 0x000390, "Member 'ABP_AJBInGameProjectile_C::PassiveSkillDuration_Sec_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, AdditionalGravityPower) == 0x000394, "Member 'ABP_AJBInGameProjectile_C::AdditionalGravityPower' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, HitLocation) == 0x000398, "Member 'ABP_AJBInGameProjectile_C::HitLocation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, HitNormal) == 0x0003A4, "Member 'ABP_AJBInGameProjectile_C::HitNormal' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, HitSurfaceType) == 0x0003B0, "Member 'ABP_AJBInGameProjectile_C::HitSurfaceType' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, SpeedScale) == 0x0003B4, "Member 'ABP_AJBInGameProjectile_C::SpeedScale' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, FiredWorldLocation) == 0x0003B8, "Member 'ABP_AJBInGameProjectile_C::FiredWorldLocation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, bAlreadyFirstHit) == 0x0003C4, "Member 'ABP_AJBInGameProjectile_C::bAlreadyFirstHit' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, bDebugShowTrace) == 0x0003C5, "Member 'ABP_AJBInGameProjectile_C::bDebugShowTrace' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, SerialNumber) == 0x0003C8, "Member 'ABP_AJBInGameProjectile_C::SerialNumber' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, bLaunchFromSeparatedStand) == 0x0003CC, "Member 'ABP_AJBInGameProjectile_C::bLaunchFromSeparatedStand' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, HitNonCharacterEffectTag) == 0x0003D0, "Member 'ABP_AJBInGameProjectile_C::HitNonCharacterEffectTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, PlayHitSEInterval_Sec_) == 0x0003D8, "Member 'ABP_AJBInGameProjectile_C::PlayHitSEInterval_Sec_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, LeftPlayHitSETime) == 0x0003DC, "Member 'ABP_AJBInGameProjectile_C::LeftPlayHitSETime' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, SpawnDecalInterval_cm_) == 0x0003E0, "Member 'ABP_AJBInGameProjectile_C::SpawnDecalInterval_cm_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, LeftSpawnDecalDistance) == 0x0003E4, "Member 'ABP_AJBInGameProjectile_C::LeftSpawnDecalDistance' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, PreLocation) == 0x0003E8, "Member 'ABP_AJBInGameProjectile_C::PreLocation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, bDebugSpawnDecal) == 0x0003F4, "Member 'ABP_AJBInGameProjectile_C::bDebugSpawnDecal' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, ObjectiveCollisionDetector) == 0x0003F8, "Member 'ABP_AJBInGameProjectile_C::ObjectiveCollisionDetector' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, bUseObjectiveCollisionDetector) == 0x000400, "Member 'ABP_AJBInGameProjectile_C::bUseObjectiveCollisionDetector' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, SkillType) == 0x000401, "Member 'ABP_AJBInGameProjectile_C::SkillType' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, OverrideCharaParam) == 0x000408, "Member 'ABP_AJBInGameProjectile_C::OverrideCharaParam' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, bDuringTheWorld) == 0x000410, "Member 'ABP_AJBInGameProjectile_C::bDuringTheWorld' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, GravityPowerScale) == 0x000414, "Member 'ABP_AJBInGameProjectile_C::GravityPowerScale' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, bBlockingOnProjectileOwnerEnv) == 0x000418, "Member 'ABP_AJBInGameProjectile_C::bBlockingOnProjectileOwnerEnv' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, bAdditionalBlockingCheckOnProjectileOwnerEnv) == 0x000419, "Member 'ABP_AJBInGameProjectile_C::bAdditionalBlockingCheckOnProjectileOwnerEnv' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, bNotChangeOwnerOnReflect) == 0x00041A, "Member 'ABP_AJBInGameProjectile_C::bNotChangeOwnerOnReflect' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, bReflectSingle) == 0x00041B, "Member 'ABP_AJBInGameProjectile_C::bReflectSingle' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, bReflectLimit) == 0x00041C, "Member 'ABP_AJBInGameProjectile_C::bReflectLimit' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, ParticleTagDestroySelf) == 0x000420, "Member 'ABP_AJBInGameProjectile_C::ParticleTagDestroySelf' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, bOptimizePenetratePerformance) == 0x000428, "Member 'ABP_AJBInGameProjectile_C::bOptimizePenetratePerformance' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, RequestHitEffectCount) == 0x00042C, "Member 'ABP_AJBInGameProjectile_C::RequestHitEffectCount' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, RequestHitEffectCountLimit) == 0x000430, "Member 'ABP_AJBInGameProjectile_C::RequestHitEffectCountLimit' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, bStopPenetrateOnCharacterHit) == 0x000434, "Member 'ABP_AJBInGameProjectile_C::bStopPenetrateOnCharacterHit' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, ProjectileTrailClass) == 0x000438, "Member 'ABP_AJBInGameProjectile_C::ProjectileTrailClass' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, ProjectileTrail) == 0x000440, "Member 'ABP_AJBInGameProjectile_C::ProjectileTrail' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, VoiceTagDestroySelf) == 0x000448, "Member 'ABP_AJBInGameProjectile_C::VoiceTagDestroySelf' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, VoiceProcessTypeDestroySelf) == 0x000450, "Member 'ABP_AJBInGameProjectile_C::VoiceProcessTypeDestroySelf' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, bIgnoreAddPassiveForMovableStand) == 0x000451, "Member 'ABP_AJBInGameProjectile_C::bIgnoreAddPassiveForMovableStand' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, GravitySpeedScale) == 0x000454, "Member 'ABP_AJBInGameProjectile_C::GravitySpeedScale' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, ReflectSkillTag) == 0x000458, "Member 'ABP_AJBInGameProjectile_C::ReflectSkillTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, bDamageAttenuation) == 0x000460, "Member 'ABP_AJBInGameProjectile_C::bDamageAttenuation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, DamageAttenuationDistance) == 0x000464, "Member 'ABP_AJBInGameProjectile_C::DamageAttenuationDistance' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, AttenuationDamage) == 0x000468, "Member 'ABP_AJBInGameProjectile_C::AttenuationDamage' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, AttenuationDamageOnSeparate) == 0x00046C, "Member 'ABP_AJBInGameProjectile_C::AttenuationDamageOnSeparate' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_C, AttenuationDamageOnHeadShot) == 0x000470, "Member 'ABP_AJBInGameProjectile_C::AttenuationDamageOnHeadShot' has a wrong offset!");

}

