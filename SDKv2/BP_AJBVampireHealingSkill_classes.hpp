#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBVampireHealingSkill

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BP_AJBSkillBase_classes.hpp"
#include "AJB_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBVampireHealingSkill.BP_AJBVampireHealingSkill_C
// 0x0048 (0x0220 - 0x01D8)
class UBP_AJBVampireHealingSkill_C final : public UBP_AJBSkillBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBVampireHealingSkill_C;        // 0x01D8(0x0008)(Transient, DuplicateTransient)
	float                                         HealingInterval;                                   // 0x01E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HealingValue;                                      // 0x01E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           HealingParticleTag;                                // 0x01E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          HealingParticle;                                   // 0x01F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           StopAnimation;                                     // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveSpeedScale;                                    // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HealingSpeedScale;                                 // 0x0204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalHealValue;                                    // 0x0208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20C[0x4];                                      // 0x020C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           HealingSETag;                                      // 0x0210(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           HealingSEAkComponent;                              // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBVampireHealingSkill(int32 EntryPoint);
	void ROC_NotifyHealValue(int32 EffectiveValue);
	void CheckNecessaryHealing(bool* bNecessary);
	void ReceiveTick(float DeltaSeconds);
	void OnInactive();
	void OnActive();
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);
	bool CanUseSkill(struct FGameplayTagContainer* TagContainer);
	void Increase_Local(int32 Num);
	void Increase_Server(int32 Num);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBVampireHealingSkill_C">();
	}
	static class UBP_AJBVampireHealingSkill_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBVampireHealingSkill_C>();
	}
};
static_assert(alignof(UBP_AJBVampireHealingSkill_C) == 0x000008, "Wrong alignment on UBP_AJBVampireHealingSkill_C");
static_assert(sizeof(UBP_AJBVampireHealingSkill_C) == 0x000220, "Wrong size on UBP_AJBVampireHealingSkill_C");
static_assert(offsetof(UBP_AJBVampireHealingSkill_C, UberGraphFrame_BP_AJBVampireHealingSkill_C) == 0x0001D8, "Member 'UBP_AJBVampireHealingSkill_C::UberGraphFrame_BP_AJBVampireHealingSkill_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBVampireHealingSkill_C, HealingInterval) == 0x0001E0, "Member 'UBP_AJBVampireHealingSkill_C::HealingInterval' has a wrong offset!");
static_assert(offsetof(UBP_AJBVampireHealingSkill_C, HealingValue) == 0x0001E4, "Member 'UBP_AJBVampireHealingSkill_C::HealingValue' has a wrong offset!");
static_assert(offsetof(UBP_AJBVampireHealingSkill_C, HealingParticleTag) == 0x0001E8, "Member 'UBP_AJBVampireHealingSkill_C::HealingParticleTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBVampireHealingSkill_C, HealingParticle) == 0x0001F0, "Member 'UBP_AJBVampireHealingSkill_C::HealingParticle' has a wrong offset!");
static_assert(offsetof(UBP_AJBVampireHealingSkill_C, StopAnimation) == 0x0001F8, "Member 'UBP_AJBVampireHealingSkill_C::StopAnimation' has a wrong offset!");
static_assert(offsetof(UBP_AJBVampireHealingSkill_C, MoveSpeedScale) == 0x000200, "Member 'UBP_AJBVampireHealingSkill_C::MoveSpeedScale' has a wrong offset!");
static_assert(offsetof(UBP_AJBVampireHealingSkill_C, HealingSpeedScale) == 0x000204, "Member 'UBP_AJBVampireHealingSkill_C::HealingSpeedScale' has a wrong offset!");
static_assert(offsetof(UBP_AJBVampireHealingSkill_C, TotalHealValue) == 0x000208, "Member 'UBP_AJBVampireHealingSkill_C::TotalHealValue' has a wrong offset!");
static_assert(offsetof(UBP_AJBVampireHealingSkill_C, HealingSETag) == 0x000210, "Member 'UBP_AJBVampireHealingSkill_C::HealingSETag' has a wrong offset!");
static_assert(offsetof(UBP_AJBVampireHealingSkill_C, HealingSEAkComponent) == 0x000218, "Member 'UBP_AJBVampireHealingSkill_C::HealingSEAkComponent' has a wrong offset!");

}

