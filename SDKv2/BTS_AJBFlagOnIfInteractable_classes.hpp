#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTS_AJBFlagOnIfInteractable

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTS_AJBFlagOnIfInteractable.BTS_AJBFlagOnIfInteractable_C
// 0x0070 (0x0108 - 0x0098)
class UBTS_AJBFlagOnIfInteractable_C final : public UBTService_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0098(0x0008)(Transient, DuplicateTransient)
	struct FBlackboardKeySelector                 RO_InteractTargetActorKey;                         // 0x00A0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly)
	struct FBlackboardKeySelector                 FlagKey;                                           // 0x00C8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly)
	class AActor*                                 InteractTargetActor;                               // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_AJBInGameAIRecognition_C*           Recognition;                                       // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ForceInteractDistance;                             // 0x0100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BTS_AJBFlagOnIfInteractable(int32 EntryPoint);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void OnInteractActorChanged(class AActor* InteractActor);
	void ReceiveActivationAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveDeactivationAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTS_AJBFlagOnIfInteractable_C">();
	}
	static class UBTS_AJBFlagOnIfInteractable_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTS_AJBFlagOnIfInteractable_C>();
	}
};
static_assert(alignof(UBTS_AJBFlagOnIfInteractable_C) == 0x000008, "Wrong alignment on UBTS_AJBFlagOnIfInteractable_C");
static_assert(sizeof(UBTS_AJBFlagOnIfInteractable_C) == 0x000108, "Wrong size on UBTS_AJBFlagOnIfInteractable_C");
static_assert(offsetof(UBTS_AJBFlagOnIfInteractable_C, UberGraphFrame) == 0x000098, "Member 'UBTS_AJBFlagOnIfInteractable_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTS_AJBFlagOnIfInteractable_C, RO_InteractTargetActorKey) == 0x0000A0, "Member 'UBTS_AJBFlagOnIfInteractable_C::RO_InteractTargetActorKey' has a wrong offset!");
static_assert(offsetof(UBTS_AJBFlagOnIfInteractable_C, FlagKey) == 0x0000C8, "Member 'UBTS_AJBFlagOnIfInteractable_C::FlagKey' has a wrong offset!");
static_assert(offsetof(UBTS_AJBFlagOnIfInteractable_C, InteractTargetActor) == 0x0000F0, "Member 'UBTS_AJBFlagOnIfInteractable_C::InteractTargetActor' has a wrong offset!");
static_assert(offsetof(UBTS_AJBFlagOnIfInteractable_C, Recognition) == 0x0000F8, "Member 'UBTS_AJBFlagOnIfInteractable_C::Recognition' has a wrong offset!");
static_assert(offsetof(UBTS_AJBFlagOnIfInteractable_C, ForceInteractDistance) == 0x000100, "Member 'UBTS_AJBFlagOnIfInteractable_C::ForceInteractDistance' has a wrong offset!");

}

