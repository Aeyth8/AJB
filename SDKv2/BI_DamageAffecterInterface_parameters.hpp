#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BI_DamageAffecterInterface

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BI_DamageAffecterInterface.BI_DamageAffecterInterface_C.CheckAreaIn
// 0x0030 (0x0030 - 0x0000)
struct BI_DamageAffecterInterface_C_CheckAreaIn final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         Radius;                                            // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Length;                                            // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PartitionNum;                                      // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCheckUnder;                                       // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ValidGroundOffsetZ;                                // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTarget;                                           // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_DamageAffecterInterface_C_CheckAreaIn) == 0x000004, "Wrong alignment on BI_DamageAffecterInterface_C_CheckAreaIn");
static_assert(sizeof(BI_DamageAffecterInterface_C_CheckAreaIn) == 0x000030, "Wrong size on BI_DamageAffecterInterface_C_CheckAreaIn");
static_assert(offsetof(BI_DamageAffecterInterface_C_CheckAreaIn, Location) == 0x000000, "Member 'BI_DamageAffecterInterface_C_CheckAreaIn::Location' has a wrong offset!");
static_assert(offsetof(BI_DamageAffecterInterface_C_CheckAreaIn, Rotation) == 0x00000C, "Member 'BI_DamageAffecterInterface_C_CheckAreaIn::Rotation' has a wrong offset!");
static_assert(offsetof(BI_DamageAffecterInterface_C_CheckAreaIn, Radius) == 0x000018, "Member 'BI_DamageAffecterInterface_C_CheckAreaIn::Radius' has a wrong offset!");
static_assert(offsetof(BI_DamageAffecterInterface_C_CheckAreaIn, Length) == 0x00001C, "Member 'BI_DamageAffecterInterface_C_CheckAreaIn::Length' has a wrong offset!");
static_assert(offsetof(BI_DamageAffecterInterface_C_CheckAreaIn, PartitionNum) == 0x000020, "Member 'BI_DamageAffecterInterface_C_CheckAreaIn::PartitionNum' has a wrong offset!");
static_assert(offsetof(BI_DamageAffecterInterface_C_CheckAreaIn, bCheckUnder) == 0x000024, "Member 'BI_DamageAffecterInterface_C_CheckAreaIn::bCheckUnder' has a wrong offset!");
static_assert(offsetof(BI_DamageAffecterInterface_C_CheckAreaIn, ValidGroundOffsetZ) == 0x000028, "Member 'BI_DamageAffecterInterface_C_CheckAreaIn::ValidGroundOffsetZ' has a wrong offset!");
static_assert(offsetof(BI_DamageAffecterInterface_C_CheckAreaIn, bTarget) == 0x00002C, "Member 'BI_DamageAffecterInterface_C_CheckAreaIn::bTarget' has a wrong offset!");

// Function BI_DamageAffecterInterface.BI_DamageAffecterInterface_C.OnAreaIn
// 0x0020 (0x0020 - 0x0000)
struct BI_DamageAffecterInterface_C_OnAreaIn final
{
public:
	class ABP_AJBInGameCharacter_C*               OperatorCharacter;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EffectTag;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SETag;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          bNoDamage;                                         // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_DamageAffecterInterface_C_OnAreaIn) == 0x000008, "Wrong alignment on BI_DamageAffecterInterface_C_OnAreaIn");
static_assert(sizeof(BI_DamageAffecterInterface_C_OnAreaIn) == 0x000020, "Wrong size on BI_DamageAffecterInterface_C_OnAreaIn");
static_assert(offsetof(BI_DamageAffecterInterface_C_OnAreaIn, OperatorCharacter) == 0x000000, "Member 'BI_DamageAffecterInterface_C_OnAreaIn::OperatorCharacter' has a wrong offset!");
static_assert(offsetof(BI_DamageAffecterInterface_C_OnAreaIn, EffectTag) == 0x000008, "Member 'BI_DamageAffecterInterface_C_OnAreaIn::EffectTag' has a wrong offset!");
static_assert(offsetof(BI_DamageAffecterInterface_C_OnAreaIn, SETag) == 0x000010, "Member 'BI_DamageAffecterInterface_C_OnAreaIn::SETag' has a wrong offset!");
static_assert(offsetof(BI_DamageAffecterInterface_C_OnAreaIn, bNoDamage) == 0x000018, "Member 'BI_DamageAffecterInterface_C_OnAreaIn::bNoDamage' has a wrong offset!");

// Function BI_DamageAffecterInterface.BI_DamageAffecterInterface_C.OnAreaOut
// 0x0018 (0x0018 - 0x0000)
struct BI_DamageAffecterInterface_C_OnAreaOut final
{
public:
	class ABP_AJBInGameCharacter_C*               OperatorCharacter;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EffectTag;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SETag;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BI_DamageAffecterInterface_C_OnAreaOut) == 0x000008, "Wrong alignment on BI_DamageAffecterInterface_C_OnAreaOut");
static_assert(sizeof(BI_DamageAffecterInterface_C_OnAreaOut) == 0x000018, "Wrong size on BI_DamageAffecterInterface_C_OnAreaOut");
static_assert(offsetof(BI_DamageAffecterInterface_C_OnAreaOut, OperatorCharacter) == 0x000000, "Member 'BI_DamageAffecterInterface_C_OnAreaOut::OperatorCharacter' has a wrong offset!");
static_assert(offsetof(BI_DamageAffecterInterface_C_OnAreaOut, EffectTag) == 0x000008, "Member 'BI_DamageAffecterInterface_C_OnAreaOut::EffectTag' has a wrong offset!");
static_assert(offsetof(BI_DamageAffecterInterface_C_OnAreaOut, SETag) == 0x000010, "Member 'BI_DamageAffecterInterface_C_OnAreaOut::SETag' has a wrong offset!");

// Function BI_DamageAffecterInterface.BI_DamageAffecterInterface_C.OnNoDamageChanged
// 0x0020 (0x0020 - 0x0000)
struct BI_DamageAffecterInterface_C_OnNoDamageChanged final
{
public:
	class ABP_AJBInGameCharacter_C*               OperaatorCharacter;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNewFlag;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           EffectTag;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SETag;                                             // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BI_DamageAffecterInterface_C_OnNoDamageChanged) == 0x000008, "Wrong alignment on BI_DamageAffecterInterface_C_OnNoDamageChanged");
static_assert(sizeof(BI_DamageAffecterInterface_C_OnNoDamageChanged) == 0x000020, "Wrong size on BI_DamageAffecterInterface_C_OnNoDamageChanged");
static_assert(offsetof(BI_DamageAffecterInterface_C_OnNoDamageChanged, OperaatorCharacter) == 0x000000, "Member 'BI_DamageAffecterInterface_C_OnNoDamageChanged::OperaatorCharacter' has a wrong offset!");
static_assert(offsetof(BI_DamageAffecterInterface_C_OnNoDamageChanged, bNewFlag) == 0x000008, "Member 'BI_DamageAffecterInterface_C_OnNoDamageChanged::bNewFlag' has a wrong offset!");
static_assert(offsetof(BI_DamageAffecterInterface_C_OnNoDamageChanged, EffectTag) == 0x000010, "Member 'BI_DamageAffecterInterface_C_OnNoDamageChanged::EffectTag' has a wrong offset!");
static_assert(offsetof(BI_DamageAffecterInterface_C_OnNoDamageChanged, SETag) == 0x000018, "Member 'BI_DamageAffecterInterface_C_OnNoDamageChanged::SETag' has a wrong offset!");

}

