#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UnderwaterAffecter

#include "Basic.hpp"

#include "BP_UnderwaterAffecter_classes.hpp"
#include "BP_UnderwaterAffecter_parameters.hpp"


namespace SDK
{

// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.OnBeginUnderwaterEvent__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UBP_UnderwaterAffecter_C::OnBeginUnderwaterEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "OnBeginUnderwaterEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.OnEndUnderwaterEvent__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UBP_UnderwaterAffecter_C::OnEndUnderwaterEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "OnEndUnderwaterEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.OnBeginDrown__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UBP_UnderwaterAffecter_C::OnBeginDrown__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "OnBeginDrown__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.OnEndDrown__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UBP_UnderwaterAffecter_C::OnEndDrown__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "OnEndDrown__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.OnDrownDamage__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UBP_UnderwaterAffecter_C::OnDrownDamage__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "OnDrownDamage__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.OnChangeCameraStatus__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsCameraInWater_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_UnderwaterAffecter_C::OnChangeCameraStatus__DelegateSignature(bool IsCameraInWater_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "OnChangeCameraStatus__DelegateSignature");

	Params::BP_UnderwaterAffecter_C_OnChangeCameraStatus__DelegateSignature Parms{};

	Parms.IsCameraInWater_0 = IsCameraInWater_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.ExecuteUbergraph_BP_UnderwaterAffecter
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UnderwaterAffecter_C::ExecuteUbergraph_BP_UnderwaterAffecter(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "ExecuteUbergraph_BP_UnderwaterAffecter");

	Params::BP_UnderwaterAffecter_C_ExecuteUbergraph_BP_UnderwaterAffecter Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.OnEndKillCamera
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     NextState                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void UBP_UnderwaterAffecter_C::OnEndKillCamera(const struct FGameplayTag& NextState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "OnEndKillCamera");

	Params::BP_UnderwaterAffecter_C_OnEndKillCamera Parms{};

	Parms.NextState = std::move(NextState);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.UpdateStatusAfterResurrect
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Rescuer                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UnderwaterAffecter_C::UpdateStatusAfterResurrect(class AActor* Rescuer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "UpdateStatusAfterResurrect");

	Params::BP_UnderwaterAffecter_C_UpdateStatusAfterResurrect Parms{};

	Parms.Rescuer = Rescuer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.UpdateCheckCameraStatus_ForMaskCylinder
// (BlueprintCallable, BlueprintEvent)

void UBP_UnderwaterAffecter_C::UpdateCheckCameraStatus_ForMaskCylinder()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "UpdateCheckCameraStatus_ForMaskCylinder");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UnderwaterAffecter_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "ReceiveEndPlay");

	Params::BP_UnderwaterAffecter_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.ChangeMask
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsCameraInWater_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_UnderwaterAffecter_C::ChangeMask(bool IsCameraInWater_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "ChangeMask");

	Params::BP_UnderwaterAffecter_C_ChangeMask Parms{};

	Parms.IsCameraInWater_0 = IsCameraInWater_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.OnBeginResult
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     PrevState                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void UBP_UnderwaterAffecter_C::OnBeginResult(const struct FGameplayTag& PrevState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "OnBeginResult");

	Params::BP_UnderwaterAffecter_C_OnBeginResult Parms{};

	Parms.PrevState = std::move(PrevState);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.UpdateCheckCameraStatus
// (BlueprintCallable, BlueprintEvent)

void UBP_UnderwaterAffecter_C::UpdateCheckCameraStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "UpdateCheckCameraStatus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.DisableDrown
// (BlueprintCallable, BlueprintEvent)

void UBP_UnderwaterAffecter_C::DisableDrown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "DisableDrown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.EnableDrown
// (BlueprintCallable, BlueprintEvent)

void UBP_UnderwaterAffecter_C::EnableDrown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "EnableDrown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.OnUpdateSubmasionRate
// (BlueprintCallable, BlueprintEvent)

void UBP_UnderwaterAffecter_C::OnUpdateSubmasionRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "OnUpdateSubmasionRate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.DisableSpeedDown
// (BlueprintCallable, BlueprintEvent)

void UBP_UnderwaterAffecter_C::DisableSpeedDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "DisableSpeedDown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.EnableSpeedDown
// (BlueprintCallable, BlueprintEvent)

void UBP_UnderwaterAffecter_C::EnableSpeedDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "EnableSpeedDown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.CheckSubmergePelvis
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   SubmasionRate_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UnderwaterAffecter_C::CheckSubmergePelvis(float SubmasionRate_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "CheckSubmergePelvis");

	Params::BP_UnderwaterAffecter_C_CheckSubmergePelvis Parms{};

	Parms.SubmasionRate_0 = SubmasionRate_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.OnPelvisInOut
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsSubmergedPelvis_0                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_UnderwaterAffecter_C::OnPelvisInOut(bool IsSubmergedPelvis_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "OnPelvisInOut");

	Params::BP_UnderwaterAffecter_C_OnPelvisInOut Parms{};

	Parms.IsSubmergedPelvis_0 = IsSubmergedPelvis_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.OnDamageDrown
// (BlueprintCallable, BlueprintEvent)

void UBP_UnderwaterAffecter_C::OnDamageDrown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "OnDamageDrown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.UpdateDrown
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UnderwaterAffecter_C::UpdateDrown(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "UpdateDrown");

	Params::BP_UnderwaterAffecter_C_UpdateDrown Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.MC_OnUpdateSubmasionRate
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void UBP_UnderwaterAffecter_C::MC_OnUpdateSubmasionRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "MC_OnUpdateSubmasionRate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.RecoverOxygen
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UnderwaterAffecter_C::RecoverOxygen(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "RecoverOxygen");

	Params::BP_UnderwaterAffecter_C_RecoverOxygen Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.ROS_OnUpdateSubmasionRate
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   SubmasionRate_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsNoseInWater_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_UnderwaterAffecter_C::ROS_OnUpdateSubmasionRate(float SubmasionRate_0, bool IsNoseInWater_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "ROS_OnUpdateSubmasionRate");

	Params::BP_UnderwaterAffecter_C_ROS_OnUpdateSubmasionRate Parms{};

	Parms.SubmasionRate_0 = SubmasionRate_0;
	Parms.IsNoseInWater_0 = IsNoseInWater_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.UpdateSubmersionRate
// (BlueprintCallable, BlueprintEvent)

void UBP_UnderwaterAffecter_C::UpdateSubmersionRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "UpdateSubmersionRate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.OnEndUnderwater
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_UnderwaterAreaVolume_C*       Volume                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UnderwaterAffecter_C::OnEndUnderwater(const class ABP_UnderwaterAreaVolume_C*& Volume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "OnEndUnderwater");

	Params::BP_UnderwaterAffecter_C_OnEndUnderwater Parms{};

	Parms.Volume = Volume;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.OnBeginUnderwater
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_UnderwaterAreaVolume_C*       Volume                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UnderwaterAffecter_C::OnBeginUnderwater(const class ABP_UnderwaterAreaVolume_C*& Volume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "OnBeginUnderwater");

	Params::BP_UnderwaterAffecter_C_OnBeginUnderwater Parms{};

	Parms.Volume = Volume;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UnderwaterAffecter_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "ReceiveTick");

	Params::BP_UnderwaterAffecter_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_UnderwaterAffecter_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.MC_SpawnInOutWaterEffects
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void UBP_UnderwaterAffecter_C::MC_SpawnInOutWaterEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "MC_SpawnInOutWaterEffects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.ROS_SpawnInOutWaterEffects
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void UBP_UnderwaterAffecter_C::ROS_SpawnInOutWaterEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "ROS_SpawnInOutWaterEffects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.SpawnWaterSurfaceAttackSplashCore
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          InputPin                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UnderwaterAffecter_C::SpawnWaterSurfaceAttackSplashCore(const struct FVector& InputPin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "SpawnWaterSurfaceAttackSplashCore");

	Params::BP_UnderwaterAffecter_C_SpawnWaterSurfaceAttackSplashCore Parms{};

	Parms.InputPin = std::move(InputPin);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.MC_SpawnWaterSurfaceAttackSplash
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UnderwaterAffecter_C::MC_SpawnWaterSurfaceAttackSplash(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "MC_SpawnWaterSurfaceAttackSplash");

	Params::BP_UnderwaterAffecter_C_MC_SpawnWaterSurfaceAttackSplash Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.ROS_SpawnWaterSurfaceAttackSplash
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UnderwaterAffecter_C::ROS_SpawnWaterSurfaceAttackSplash(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "ROS_SpawnWaterSurfaceAttackSplash");

	Params::BP_UnderwaterAffecter_C_ROS_SpawnWaterSurfaceAttackSplash Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.SpawnWaterSurfaceAttackSplash
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UnderwaterAffecter_C::SpawnWaterSurfaceAttackSplash(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "SpawnWaterSurfaceAttackSplash");

	Params::BP_UnderwaterAffecter_C_SpawnWaterSurfaceAttackSplash Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.SpawnInOutWaterEffects
// (BlueprintCallable, BlueprintEvent)

void UBP_UnderwaterAffecter_C::SpawnInOutWaterEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "SpawnInOutWaterEffects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.UpdateRippleEffect
// (BlueprintCallable, BlueprintEvent)

void UBP_UnderwaterAffecter_C::UpdateRippleEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "UpdateRippleEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.OnInWater
// (BlueprintCallable, BlueprintEvent)

void UBP_UnderwaterAffecter_C::OnInWater()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "OnInWater");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.SpawnMovingEffects
// (BlueprintCallable, BlueprintEvent)

void UBP_UnderwaterAffecter_C::SpawnMovingEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "SpawnMovingEffects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.GetOwnerInGameCharacter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_AJBInGameCharacter_C*         InGameCharacter                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UnderwaterAffecter_C::GetOwnerInGameCharacter(class ABP_AJBInGameCharacter_C** InGameCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "GetOwnerInGameCharacter");

	Params::BP_UnderwaterAffecter_C_GetOwnerInGameCharacter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InGameCharacter != nullptr)
		*InGameCharacter = Parms.InGameCharacter;
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.GetWaterSurfaceZ
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Z                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UnderwaterAffecter_C::GetWaterSurfaceZ(float* Z)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "GetWaterSurfaceZ");

	Params::BP_UnderwaterAffecter_C_GetWaterSurfaceZ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Z != nullptr)
		*Z = Parms.Z;
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.GetOwnerSocketZ
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             InSocketName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Z                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UnderwaterAffecter_C::GetOwnerSocketZ(class FName InSocketName, float* Z)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "GetOwnerSocketZ");

	Params::BP_UnderwaterAffecter_C_GetOwnerSocketZ Parms{};

	Parms.InSocketName = InSocketName;

	UObject::ProcessEvent(Func, &Parms);

	if (Z != nullptr)
		*Z = Parms.Z;
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.GetCurrentDepthLevel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   DeplthLevel                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UnderwaterAffecter_C::GetCurrentDepthLevel(int32* DeplthLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "GetCurrentDepthLevel");

	Params::BP_UnderwaterAffecter_C_GetCurrentDepthLevel Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DeplthLevel != nullptr)
		*DeplthLevel = Parms.DeplthLevel;
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.GetMovingEffectInterval
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UBP_UnderwaterAffecter_C::GetMovingEffectInterval()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "GetMovingEffectInterval");

	Params::BP_UnderwaterAffecter_C_GetMovingEffectInterval Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.SetActiveRippleLoopEffect
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNewActive                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_UnderwaterAffecter_C::SetActiveRippleLoopEffect(bool bNewActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "SetActiveRippleLoopEffect");

	Params::BP_UnderwaterAffecter_C_SetActiveRippleLoopEffect Parms{};

	Parms.bNewActive = bNewActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.CheckOverlappingUnderwaterVolumes
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_UnderwaterAffecter_C::CheckOverlappingUnderwaterVolumes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "CheckOverlappingUnderwaterVolumes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.GetOwnerNosePointZ
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Return_Value_Z                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UnderwaterAffecter_C::GetOwnerNosePointZ(float* Return_Value_Z)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "GetOwnerNosePointZ");

	Params::BP_UnderwaterAffecter_C_GetOwnerNosePointZ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return_Value_Z != nullptr)
		*Return_Value_Z = Parms.Return_Value_Z;
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.IsInWater
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_UnderwaterAffecter_C::IsInWater()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "IsInWater");

	Params::BP_UnderwaterAffecter_C_IsInWater Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.GetCharacterWaterSurfacePosition
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Position                                               (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UnderwaterAffecter_C::GetCharacterWaterSurfacePosition(struct FVector* Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "GetCharacterWaterSurfacePosition");

	Params::BP_UnderwaterAffecter_C_GetCharacterWaterSurfacePosition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Position != nullptr)
		*Position = std::move(Parms.Position);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.SetActiveDustLoopEffect
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewActive                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_UnderwaterAffecter_C::SetActiveDustLoopEffect(bool NewActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "SetActiveDustLoopEffect");

	Params::BP_UnderwaterAffecter_C_SetActiveDustLoopEffect Parms{};

	Parms.NewActive = NewActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.SetActiveBreathBubblesEffect
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewActive                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_UnderwaterAffecter_C::SetActiveBreathBubblesEffect(bool NewActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "SetActiveBreathBubblesEffect");

	Params::BP_UnderwaterAffecter_C_SetActiveBreathBubblesEffect Parms{};

	Parms.NewActive = NewActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.IsDuringTeleportation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_UnderwaterAffecter_C::IsDuringTeleportation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "IsDuringTeleportation");

	Params::BP_UnderwaterAffecter_C_IsDuringTeleportation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.tryGetUnderwaterMaskingCylinder
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_UnderwaterMaskingCylinder_C*  WaterMaskCylinder_0                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UnderwaterAffecter_C::TryGetUnderwaterMaskingCylinder(class ABP_UnderwaterMaskingCylinder_C** WaterMaskCylinder_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "tryGetUnderwaterMaskingCylinder");

	Params::BP_UnderwaterAffecter_C_TryGetUnderwaterMaskingCylinder Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WaterMaskCylinder_0 != nullptr)
		*WaterMaskCylinder_0 = Parms.WaterMaskCylinder_0;
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.DestroyUnderwaterMaskingCylinder
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_UnderwaterAffecter_C::DestroyUnderwaterMaskingCylinder()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "DestroyUnderwaterMaskingCylinder");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.IsViewTargetOwner
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsViewTarget                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_UnderwaterAffecter_C::IsViewTargetOwner(bool* IsViewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "IsViewTargetOwner");

	Params::BP_UnderwaterAffecter_C_IsViewTargetOwner Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsViewTarget != nullptr)
		*IsViewTarget = Parms.IsViewTarget;
}


// Function BP_UnderwaterAffecter.BP_UnderwaterAffecter_C.IsDuringStickyDive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_UnderwaterAffecter_C::IsDuringStickyDive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAffecter_C", "IsDuringStickyDive");

	Params::BP_UnderwaterAffecter_C_IsDuringStickyDive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

