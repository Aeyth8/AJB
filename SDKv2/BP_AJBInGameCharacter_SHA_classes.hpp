#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameCharacter_SHA

#include "Basic.hpp"

#include "AJB_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_GionSpawnedSpace_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BP_AJBInGameCharacter_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBInGameCharacter_SHA.BP_AJBInGameCharacter_SHA_C
// 0x0060 (0x1690 - 0x1630)
class ABP_AJBInGameCharacter_SHA_C final : public ABP_AJBInGameCharacter_C
{
public:
	uint8                                         Pad_1621[0x7];                                     // 0x1621(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBInGameCharacter_SHA_C;        // 0x1628(0x0008)(Transient, DuplicateTransient)
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x1630(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         CatchLength_cm_;                                   // 0x1638(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DebugDrawColor;                                    // 0x163C(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAlreadyHit;                                       // 0x164C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ESHABehavior                                  Rep_SHABehavior;                                   // 0x164D(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_164E[0x2];                                     // 0x164E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SHABehaviorTime_Loitering_s_;                      // 0x1650(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SHABehaviorTime_Triggering_s_;                     // 0x1654(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SHABehaviorTime;                                   // 0x1658(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SHABehaviorTime_Clearing_s_;                       // 0x165C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SerialNumber;                                      // 0x1660(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1664[0x4];                                     // 0x1664(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           SwitchSETag;                                       // 0x1668(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           AlertSETag;                                        // 0x1670(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bRep_ShouldStopOnBeginPlay;                        // 0x1678(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_1679[0x7];                                     // 0x1679(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameParticleEffect_C*          ImpulseReadyParticle;                              // 0x1680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBInGameCharacter_SHA(int32 EntryPoint);
	void MC_ChangeDimensionMode(class ABP_AJBCrimsonDimensionAffecter_C* DimensionAffecter);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void OnSetViewTargetToNewSpectator_Local();
	void OnPassiveAddedAfterSetCauser_SHA(const struct FGameplayTag& AddCondition, class UObject* Causer);
	void OnBeginSHABehavior_Clearing();
	void OnBeginSHABehavior_Clearing_OneShot(bool bFromBombing);
	void MC_ChangeSHABehavior_Clearing(bool bFromBombing);
	void MC_ChangeSHABehavior_Bombing();
	void OnBeginSHABehavior_Bombing();
	void OnBeginSHABehavior_Bombing_OneShot();
	void OnBeginSHABehavior_Triggering_OneShot();
	void MC_ChangeSHABehavior_Triggering();
	void OnBeginSHABehavior_Triggering();
	void ChangeSHABehavior_Server(ESHABehavior NewBehavior, bool bParam01);
	void UpdateSHABehavior_Clearing();
	void UpdateSHABehavior_Bombing();
	void UpdateSHABehavior_Triggering();
	void UpdateSHABehavior_None();
	void UpdateSHABehavior_Loitering();
	void UpdateSHABehavior_Server(float DeltaSeconds);
	void MC_NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);
	void SetSerialNumber(int32 SerialNumber_0);
	void OnRep_Rep_SHABehavior();
	void CheckSHABehavior_Server(ESHABehavior SHABehavior, bool* bMatch);
	void CheckHitTarget_Server(bool* bHit);
	void TryAddPassive_Server(const struct FGameplayTag& PassiveTag);
	void TryRemovePassive_Server(const struct FGameplayTag& PassiveTag);
	void OnRep_bRep_ShouldStopOnBeginPlay();
	void ChangeStencil();
	void TryDestroyImpulseReadyParticle();
	void GetPropertyOwnerCharacterBP(class ABP_AJBInGameCharacter_C** CharacterBP);
	void GetPropertyType(EAJBCharacterPropertyType* PropertyType);
	void PreInitializeComponentsBP();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);
	void UserConstructionScript();
	void CheckDisableDamage(class AActor* DamageCauser, bool* bDisableDamage_0);
	void CheckTargetSelf(class AActor* DamageCauser, bool bForDamageOverlap, bool bIgnoreMovableStand, bool* bTarget);
	void CheckDisablePassive(class AActor* PassiveCauser, const struct FGameplayTag& PassiveTag, bool* bDisablePassive_0);
	void GetGionOwner(class AActor** GionOwner);
	void GetSpawnedSpaceInOwnersEnv(E_GionSpawnedSpace* SpawnedSpaceInOwnersEnv);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBInGameCharacter_SHA_C">();
	}
	static class ABP_AJBInGameCharacter_SHA_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBInGameCharacter_SHA_C>();
	}
};
static_assert(alignof(ABP_AJBInGameCharacter_SHA_C) == 0x000010, "Wrong alignment on ABP_AJBInGameCharacter_SHA_C");
static_assert(sizeof(ABP_AJBInGameCharacter_SHA_C) == 0x001690, "Wrong size on ABP_AJBInGameCharacter_SHA_C");
static_assert(offsetof(ABP_AJBInGameCharacter_SHA_C, UberGraphFrame_BP_AJBInGameCharacter_SHA_C) == 0x001628, "Member 'ABP_AJBInGameCharacter_SHA_C::UberGraphFrame_BP_AJBInGameCharacter_SHA_C' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_SHA_C, ParticleSystem) == 0x001630, "Member 'ABP_AJBInGameCharacter_SHA_C::ParticleSystem' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_SHA_C, CatchLength_cm_) == 0x001638, "Member 'ABP_AJBInGameCharacter_SHA_C::CatchLength_cm_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_SHA_C, DebugDrawColor) == 0x00163C, "Member 'ABP_AJBInGameCharacter_SHA_C::DebugDrawColor' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_SHA_C, bAlreadyHit) == 0x00164C, "Member 'ABP_AJBInGameCharacter_SHA_C::bAlreadyHit' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_SHA_C, Rep_SHABehavior) == 0x00164D, "Member 'ABP_AJBInGameCharacter_SHA_C::Rep_SHABehavior' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_SHA_C, SHABehaviorTime_Loitering_s_) == 0x001650, "Member 'ABP_AJBInGameCharacter_SHA_C::SHABehaviorTime_Loitering_s_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_SHA_C, SHABehaviorTime_Triggering_s_) == 0x001654, "Member 'ABP_AJBInGameCharacter_SHA_C::SHABehaviorTime_Triggering_s_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_SHA_C, SHABehaviorTime) == 0x001658, "Member 'ABP_AJBInGameCharacter_SHA_C::SHABehaviorTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_SHA_C, SHABehaviorTime_Clearing_s_) == 0x00165C, "Member 'ABP_AJBInGameCharacter_SHA_C::SHABehaviorTime_Clearing_s_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_SHA_C, SerialNumber) == 0x001660, "Member 'ABP_AJBInGameCharacter_SHA_C::SerialNumber' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_SHA_C, SwitchSETag) == 0x001668, "Member 'ABP_AJBInGameCharacter_SHA_C::SwitchSETag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_SHA_C, AlertSETag) == 0x001670, "Member 'ABP_AJBInGameCharacter_SHA_C::AlertSETag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_SHA_C, bRep_ShouldStopOnBeginPlay) == 0x001678, "Member 'ABP_AJBInGameCharacter_SHA_C::bRep_ShouldStopOnBeginPlay' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_SHA_C, ImpulseReadyParticle) == 0x001680, "Member 'ABP_AJBInGameCharacter_SHA_C::ImpulseReadyParticle' has a wrong offset!");

}

