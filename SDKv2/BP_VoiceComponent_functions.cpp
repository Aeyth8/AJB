#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VoiceComponent

#include "Basic.hpp"

#include "BP_VoiceComponent_classes.hpp"
#include "BP_VoiceComponent_parameters.hpp"


namespace SDK
{

// Function BP_VoiceComponent.BP_VoiceComponent_C.ExecuteUbergraph_BP_VoiceComponent
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_VoiceComponent_C::ExecuteUbergraph_BP_VoiceComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "ExecuteUbergraph_BP_VoiceComponent");

	Params::BP_VoiceComponent_C_ExecuteUbergraph_BP_VoiceComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.OnSpawnSignalPin_Event
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     SignalPinType                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void UBP_VoiceComponent_C::OnSpawnSignalPin_Event(const struct FGameplayTag& SignalPinType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "OnSpawnSignalPin_Event");

	Params::BP_VoiceComponent_C_OnSpawnSignalPin_Event Parms{};

	Parms.SignalPinType = std::move(SignalPinType);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.OnEmote
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   VoiceIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_VoiceComponent_C::OnEmote(int32 VoiceIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "OnEmote");

	Params::BP_VoiceComponent_C_OnEmote Parms{};

	Parms.VoiceIndex = VoiceIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.CheckIsInLandmark
// (BlueprintCallable, BlueprintEvent)

void UBP_VoiceComponent_C::CheckIsInLandmark()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "CheckIsInLandmark");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.SetupLandmarkWatcher
// (BlueprintCallable, BlueprintEvent)

void UBP_VoiceComponent_C::SetupLandmarkWatcher()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "SetupLandmarkWatcher");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.OnPlayRadioChat
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ActionLogIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     VoiceTag                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void UBP_VoiceComponent_C::OnPlayRadioChat(int32 ActionLogIndex, const struct FGameplayTag& VoiceTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "OnPlayRadioChat");

	Params::BP_VoiceComponent_C_OnPlayRadioChat Parms{};

	Parms.ActionLogIndex = ActionLogIndex;
	Parms.VoiceTag = std::move(VoiceTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.SpeakLastSurvivorVoice
// (BlueprintCallable, BlueprintEvent)

void UBP_VoiceComponent_C::SpeakLastSurvivorVoice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "SpeakLastSurvivorVoice");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.ResetDamageAreaOutVoice
// (BlueprintCallable, BlueprintEvent)

void UBP_VoiceComponent_C::ResetDamageAreaOutVoice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "ResetDamageAreaOutVoice");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.OnStartDamageAreaReduction
// (BlueprintCallable, BlueprintEvent)

void UBP_VoiceComponent_C::OnStartDamageAreaReduction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "OnStartDamageAreaReduction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.ResetDamageAreaDamageVoice
// (BlueprintCallable, BlueprintEvent)

void UBP_VoiceComponent_C::ResetDamageAreaDamageVoice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "ResetDamageAreaDamageVoice");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.OnDamageAreaOut
// (BlueprintCallable, BlueprintEvent)

void UBP_VoiceComponent_C::OnDamageAreaOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "OnDamageAreaOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.OnCharacterPairKill
// (BlueprintCallable, BlueprintEvent)

void UBP_VoiceComponent_C::OnCharacterPairKill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "OnCharacterPairKill");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.OnCharacterPairDie
// (BlueprintCallable, BlueprintEvent)

void UBP_VoiceComponent_C::OnCharacterPairDie()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "OnCharacterPairDie");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.OnCharacterRescueSuccess
// (BlueprintCallable, BlueprintEvent)

void UBP_VoiceComponent_C::OnCharacterRescueSuccess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "OnCharacterRescueSuccess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.OnCharacterRevive
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Rescuer                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_VoiceComponent_C::OnCharacterRevive(class AActor* Rescuer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "OnCharacterRevive");

	Params::BP_VoiceComponent_C_OnCharacterRevive Parms{};

	Parms.Rescuer = Rescuer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.OnDown
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DownedMachingPlayerIndex                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_VoiceComponent_C::OnDown(int32 DownedMachingPlayerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "OnDown");

	Params::BP_VoiceComponent_C_OnDown Parms{};

	Parms.DownedMachingPlayerIndex = DownedMachingPlayerIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.OnDie
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bWillRessurect                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bIsLastDefeated                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDiedOfKillZ                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_VoiceComponent_C::OnDie(bool bWillRessurect, bool bIsLastDefeated, bool bDiedOfKillZ)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "OnDie");

	Params::BP_VoiceComponent_C_OnDie Parms{};

	Parms.bWillRessurect = bWillRessurect;
	Parms.bIsLastDefeated = bIsLastDefeated;
	Parms.bDiedOfKillZ = bDiedOfKillZ;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.OnCritical
// (BlueprintCallable, BlueprintEvent)

void UBP_VoiceComponent_C::OnCritical()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "OnCritical");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.OnCharacterKill
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     SkillTag                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   SerialNumber                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AttackDistance                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   KilledCharacterId                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bWithSeparatedStandAttack                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bHitEnemysSeparatedStand                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bFirstBlood                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   UltimateSkillSerialNumberIfInEffect                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DeadPlayerID                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsLastDefeated                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bPlayerKill                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bSpecialKill                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_VoiceComponent_C::OnCharacterKill(const struct FGameplayTag& SkillTag, int32 SerialNumber, float AttackDistance, uint8 KilledCharacterId, bool bWithSeparatedStandAttack, bool bHitEnemysSeparatedStand, bool bFirstBlood, int32 UltimateSkillSerialNumberIfInEffect, float ElapsedTime, int32 DeadPlayerID, bool bIsLastDefeated, bool bPlayerKill, bool bSpecialKill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "OnCharacterKill");

	Params::BP_VoiceComponent_C_OnCharacterKill Parms{};

	Parms.SkillTag = std::move(SkillTag);
	Parms.SerialNumber = SerialNumber;
	Parms.AttackDistance = AttackDistance;
	Parms.KilledCharacterId = KilledCharacterId;
	Parms.bWithSeparatedStandAttack = bWithSeparatedStandAttack;
	Parms.bHitEnemysSeparatedStand = bHitEnemysSeparatedStand;
	Parms.bFirstBlood = bFirstBlood;
	Parms.UltimateSkillSerialNumberIfInEffect = UltimateSkillSerialNumberIfInEffect;
	Parms.ElapsedTime = ElapsedTime;
	Parms.DeadPlayerID = DeadPlayerID;
	Parms.bIsLastDefeated = bIsLastDefeated;
	Parms.bPlayerKill = bPlayerKill;
	Parms.bSpecialKill = bSpecialKill;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_VoiceComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "ReceiveTick");

	Params::BP_VoiceComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.ROC_OnCharacterHidingPropDamaged
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void UBP_VoiceComponent_C::ROC_OnCharacterHidingPropDamaged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "ROC_OnCharacterHidingPropDamaged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.OnCharacterHidingPropDamaged_OnServer
// (BlueprintCallable, BlueprintEvent)

void UBP_VoiceComponent_C::OnCharacterHidingPropDamaged_OnServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "OnCharacterHidingPropDamaged_OnServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.ROC_OnCharacterHideIntoZipper
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void UBP_VoiceComponent_C::ROC_OnCharacterHideIntoZipper()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "ROC_OnCharacterHideIntoZipper");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.OnCharacterHideIntoZipper_OnServer
// (BlueprintCallable, BlueprintEvent)

void UBP_VoiceComponent_C::OnCharacterHideIntoZipper_OnServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "OnCharacterHideIntoZipper_OnServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.OnCharacterEmote
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   VoiceIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_VoiceComponent_C::OnCharacterEmote(int32 VoiceIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "OnCharacterEmote");

	Params::BP_VoiceComponent_C_OnCharacterEmote Parms{};

	Parms.VoiceIndex = VoiceIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.OnCharacterRessurect
// (BlueprintCallable, BlueprintEvent)

void UBP_VoiceComponent_C::OnCharacterRessurect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "OnCharacterRessurect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.ROC_OnCharacterPassThruEnter
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void UBP_VoiceComponent_C::ROC_OnCharacterPassThruEnter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "ROC_OnCharacterPassThruEnter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.OnCharacterPassThruEnter_OnServer
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bOriginToCounterpart                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_VoiceComponent_C::OnCharacterPassThruEnter_OnServer(bool bOriginToCounterpart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "OnCharacterPassThruEnter_OnServer");

	Params::BP_VoiceComponent_C_OnCharacterPassThruEnter_OnServer Parms{};

	Parms.bOriginToCounterpart = bOriginToCounterpart;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.OnCharacterSkillGrownup
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     GameplayTag                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_VoiceComponent_C::OnCharacterSkillGrownup(const struct FGameplayTag& GameplayTag, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "OnCharacterSkillGrownup");

	Params::BP_VoiceComponent_C_OnCharacterSkillGrownup Parms{};

	Parms.GameplayTag = std::move(GameplayTag);
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.OnGameStateChangeLivingPlayerCount
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Count                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LivingPlayerRate                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PairCount                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_VoiceComponent_C::OnGameStateChangeLivingPlayerCount(int32 Count, float LivingPlayerRate, int32 PairCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "OnGameStateChangeLivingPlayerCount");

	Params::BP_VoiceComponent_C_OnGameStateChangeLivingPlayerCount Parms{};

	Parms.Count = Count;
	Parms.LivingPlayerRate = LivingPlayerRate;
	Parms.PairCount = PairCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.BindGameStateDispatcher
// (BlueprintCallable, BlueprintEvent)

void UBP_VoiceComponent_C::BindGameStateDispatcher()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "BindGameStateDispatcher");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.OnHUDOpenTheGame
// (BlueprintCallable, BlueprintEvent)

void UBP_VoiceComponent_C::OnHUDOpenTheGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "OnHUDOpenTheGame");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.BindHUDDispatcher
// (BlueprintCallable, BlueprintEvent)

void UBP_VoiceComponent_C::BindHUDDispatcher()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "BindHUDDispatcher");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.OnCharacterPassiveAdded
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     AddCondition                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void UBP_VoiceComponent_C::OnCharacterPassiveAdded(const struct FGameplayTag& AddCondition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "OnCharacterPassiveAdded");

	Params::BP_VoiceComponent_C_OnCharacterPassiveAdded Parms{};

	Parms.AddCondition = std::move(AddCondition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.OnCharacterGiveDamage
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageReceiver                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bRemainHP                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDamageIsCut                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   SerialNumber                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    DamageReceiverIsPlayer                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bWithSeparatedStandAttack                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bEnemysSeparateStand                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_VoiceComponent_C::OnCharacterGiveDamage(int32 Damage, const struct FGameplayTag& DamageType, class AActor* DamageReceiver, bool bRemainHP, bool bDamageIsCut, int32 SerialNumber, bool DamageReceiverIsPlayer, bool bWithSeparatedStandAttack, bool bEnemysSeparateStand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "OnCharacterGiveDamage");

	Params::BP_VoiceComponent_C_OnCharacterGiveDamage Parms{};

	Parms.Damage = Damage;
	Parms.DamageType = std::move(DamageType);
	Parms.DamageReceiver = DamageReceiver;
	Parms.bRemainHP = bRemainHP;
	Parms.bDamageIsCut = bDamageIsCut;
	Parms.SerialNumber = SerialNumber;
	Parms.DamageReceiverIsPlayer = DamageReceiverIsPlayer;
	Parms.bWithSeparatedStandAttack = bWithSeparatedStandAttack;
	Parms.bEnemysSeparateStand = bEnemysSeparateStand;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.OnCharacterReceiveDamage
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bRemainHP                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDamageIsCutByStatus                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDamageIsCutByAAP                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_VoiceComponent_C::OnCharacterReceiveDamage(int32 Damage, const struct FGameplayTag& DamageType, class AActor* DamageCauser, bool bRemainHP, bool bDamageIsCutByStatus, bool bDamageIsCutByAAP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "OnCharacterReceiveDamage");

	Params::BP_VoiceComponent_C_OnCharacterReceiveDamage Parms{};

	Parms.Damage = Damage;
	Parms.DamageType = std::move(DamageType);
	Parms.DamageCauser = DamageCauser;
	Parms.bRemainHP = bRemainHP;
	Parms.bDamageIsCutByStatus = bDamageIsCutByStatus;
	Parms.bDamageIsCutByAAP = bDamageIsCutByAAP;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.OnCharacterGetItem
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     ItemTag                                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void UBP_VoiceComponent_C::OnCharacterGetItem(const struct FGameplayTag& ItemTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "OnCharacterGetItem");

	Params::BP_VoiceComponent_C_OnCharacterGetItem Parms{};

	Parms.ItemTag = std::move(ItemTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.OnCharacterJump
// (BlueprintCallable, BlueprintEvent)

void UBP_VoiceComponent_C::OnCharacterJump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "OnCharacterJump");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.BindCharacterDispatcher
// (BlueprintCallable, BlueprintEvent)

void UBP_VoiceComponent_C::BindCharacterDispatcher()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "BindCharacterDispatcher");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_VoiceComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.OnServer_SpeakFromRemote_Core
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_AJBInGameCharacter_C*         CharacterBPToSpeak                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_AJBInGameCharacter_C*         CharacterBPForComm                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     VoiceTag                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// E_VoiceCommandType                      VoiceCommandType                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bAlsoSpeakOnPairEnv                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_VoiceComponent_C::OnServer_SpeakFromRemote_Core(class ABP_AJBInGameCharacter_C* CharacterBPToSpeak, class ABP_AJBInGameCharacter_C* CharacterBPForComm, const struct FGameplayTag& VoiceTag, E_VoiceCommandType VoiceCommandType, bool bAlsoSpeakOnPairEnv)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "OnServer_SpeakFromRemote_Core");

	Params::BP_VoiceComponent_C_OnServer_SpeakFromRemote_Core Parms{};

	Parms.CharacterBPToSpeak = CharacterBPToSpeak;
	Parms.CharacterBPForComm = CharacterBPForComm;
	Parms.VoiceTag = std::move(VoiceTag);
	Parms.VoiceCommandType = VoiceCommandType;
	Parms.bAlsoSpeakOnPairEnv = bAlsoSpeakOnPairEnv;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.SpeakFromRemote
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     VoiceTag                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// E_VoiceCommandType                      VoiceCommandType                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_VoiceComponent_C::SpeakFromRemote(const struct FGameplayTag& VoiceTag, E_VoiceCommandType VoiceCommandType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "SpeakFromRemote");

	Params::BP_VoiceComponent_C_SpeakFromRemote Parms{};

	Parms.VoiceTag = std::move(VoiceTag);
	Parms.VoiceCommandType = VoiceCommandType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.ROS_SpeakFromRemote
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     VoiceTag                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// E_VoiceCommandType                      VoiceCommandType                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bAlsoSpeakOnPairEnv                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_VoiceComponent_C::ROS_SpeakFromRemote(const struct FGameplayTag& VoiceTag, E_VoiceCommandType VoiceCommandType, bool bAlsoSpeakOnPairEnv)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "ROS_SpeakFromRemote");

	Params::BP_VoiceComponent_C_ROS_SpeakFromRemote Parms{};

	Parms.VoiceTag = std::move(VoiceTag);
	Parms.VoiceCommandType = VoiceCommandType;
	Parms.bAlsoSpeakOnPairEnv = bAlsoSpeakOnPairEnv;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.OnWwiseEventCallback
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EAkCallbackType                         CallbackType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAkCallbackInfo*                  CallbackInfo                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_VoiceComponent_C::OnWwiseEventCallback(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "OnWwiseEventCallback");

	Params::BP_VoiceComponent_C_OnWwiseEventCallback Parms{};

	Parms.CallbackType = CallbackType;
	Parms.CallbackInfo = CallbackInfo;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.NotifyTheWorld
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAJBInGameCharacter*              Operator                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EGeneralTiming                          Timing                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bOperatorIsEmpty                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_VoiceComponent_C::NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "NotifyTheWorld");

	Params::BP_VoiceComponent_C_NotifyTheWorld Parms{};

	Parms.Operator = Operator;
	Parms.Time = Time;
	Parms.Timing = Timing;
	Parms.bEnable = bEnable;
	Parms.bOperatorIsEmpty = bOperatorIsEmpty;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.TryToSpeak
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     VoiceTag                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// E_VoiceProcessType                      VoiceProcessType                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSpeakEvenIfNotAlive                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bSpeakEvenIfDuringTheWorld                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bSpeakEvenIfNotLocalEnv                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bAlsoSpeakOnPairEnv                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bIgnoreIfDuringTheWorld                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bSpeakIfTheSameEventIsNotQueued                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bWillBeSpoken                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_VoiceComponent_C::TryToSpeak(const struct FGameplayTag& VoiceTag, E_VoiceProcessType VoiceProcessType, bool bSpeakEvenIfNotAlive, bool bSpeakEvenIfDuringTheWorld, bool bSpeakEvenIfNotLocalEnv, bool bAlsoSpeakOnPairEnv, bool bIgnoreIfDuringTheWorld, bool bSpeakIfTheSameEventIsNotQueued, bool* bWillBeSpoken)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "TryToSpeak");

	Params::BP_VoiceComponent_C_TryToSpeak Parms{};

	Parms.VoiceTag = std::move(VoiceTag);
	Parms.VoiceProcessType = VoiceProcessType;
	Parms.bSpeakEvenIfNotAlive = bSpeakEvenIfNotAlive;
	Parms.bSpeakEvenIfDuringTheWorld = bSpeakEvenIfDuringTheWorld;
	Parms.bSpeakEvenIfNotLocalEnv = bSpeakEvenIfNotLocalEnv;
	Parms.bAlsoSpeakOnPairEnv = bAlsoSpeakOnPairEnv;
	Parms.bIgnoreIfDuringTheWorld = bIgnoreIfDuringTheWorld;
	Parms.bSpeakIfTheSameEventIsNotQueued = bSpeakIfTheSameEventIsNotQueued;

	UObject::ProcessEvent(Func, &Parms);

	if (bWillBeSpoken != nullptr)
		*bWillBeSpoken = Parms.bWillBeSpoken;
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.GetCharacterShortName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FString                           ShortName                                              (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBP_VoiceComponent_C::GetCharacterShortName(bool* Result, class FString* ShortName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "GetCharacterShortName");

	Params::BP_VoiceComponent_C_GetCharacterShortName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (ShortName != nullptr)
		*ShortName = std::move(Parms.ShortName);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.GetVoiceEventInfo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     VoiceTagWithoutCharacterShortName                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// bool                                    bResult                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FWwiseVoiceEventInfo             VoiceEventInfo                                         (Parm, OutParm)

void UBP_VoiceComponent_C::GetVoiceEventInfo(const struct FGameplayTag& VoiceTagWithoutCharacterShortName, bool* bResult, struct FWwiseVoiceEventInfo* VoiceEventInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "GetVoiceEventInfo");

	Params::BP_VoiceComponent_C_GetVoiceEventInfo Parms{};

	Parms.VoiceTagWithoutCharacterShortName = std::move(VoiceTagWithoutCharacterShortName);

	UObject::ProcessEvent(Func, &Parms);

	if (bResult != nullptr)
		*bResult = Parms.bResult;

	if (VoiceEventInfo != nullptr)
		*VoiceEventInfo = std::move(Parms.VoiceEventInfo);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.TryToSpeakFromQueue
// (Protected, BlueprintCallable, BlueprintEvent)

void UBP_VoiceComponent_C::TryToSpeakFromQueue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "TryToSpeakFromQueue");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.GetCurrentSpokenVoiceEventInfo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FWwiseVoiceEventInfo             VoiceEventInfo                                         (Parm, OutParm)

void UBP_VoiceComponent_C::GetCurrentSpokenVoiceEventInfo(struct FWwiseVoiceEventInfo* VoiceEventInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "GetCurrentSpokenVoiceEventInfo");

	Params::BP_VoiceComponent_C_GetCurrentSpokenVoiceEventInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (VoiceEventInfo != nullptr)
		*VoiceEventInfo = std::move(Parms.VoiceEventInfo);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.PostEvent
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     VoiceTag                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void UBP_VoiceComponent_C::PostEvent(const struct FGameplayTag& VoiceTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "PostEvent");

	Params::BP_VoiceComponent_C_PostEvent Parms{};

	Parms.VoiceTag = std::move(VoiceTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.TryToSpeakFinishVoice
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_VoiceComponent_C::TryToSpeakFinishVoice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "TryToSpeakFinishVoice");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.ReserveBreak
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     VoiceEventTagToStop                                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void UBP_VoiceComponent_C::ReserveBreak(const struct FGameplayTag& VoiceEventTagToStop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "ReserveBreak");

	Params::BP_VoiceComponent_C_ReserveBreak Parms{};

	Parms.VoiceEventTagToStop = std::move(VoiceEventTagToStop);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.RemoveBreakReservation
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_VoiceComponent_C::RemoveBreakReservation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "RemoveBreakReservation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.CheckPostedAkEventExistence
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PostAkEventReturnValue                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           WwiseEvent                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    bExist                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_VoiceComponent_C::CheckPostedAkEventExistence(int32 PostAkEventReturnValue, const class FString& WwiseEvent, bool* bExist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "CheckPostedAkEventExistence");

	Params::BP_VoiceComponent_C_CheckPostedAkEventExistence Parms{};

	Parms.PostAkEventReturnValue = PostAkEventReturnValue;
	Parms.WwiseEvent = std::move(WwiseEvent);

	UObject::ProcessEvent(Func, &Parms);

	if (bExist != nullptr)
		*bExist = Parms.bExist;
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.ShouldSpeakVoiceFromRemote
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bResult                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_VoiceComponent_C::ShouldSpeakVoiceFromRemote(bool* bResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "ShouldSpeakVoiceFromRemote");

	Params::BP_VoiceComponent_C_ShouldSpeakVoiceFromRemote Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bResult != nullptr)
		*bResult = Parms.bResult;
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.VoiceEventIsStopEvent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FWwiseVoiceEventInfo             VoiceEvent                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_VoiceComponent_C::VoiceEventIsStopEvent(const struct FWwiseVoiceEventInfo& VoiceEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "VoiceEventIsStopEvent");

	Params::BP_VoiceComponent_C_VoiceEventIsStopEvent Parms{};

	Parms.VoiceEvent = std::move(VoiceEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.TryToSpeakDamageVoice
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     VoiceTag                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    bCausedByDamageArea                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_VoiceComponent_C::TryToSpeakDamageVoice(const struct FGameplayTag& VoiceTag, bool bCausedByDamageArea)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "TryToSpeakDamageVoice");

	Params::BP_VoiceComponent_C_TryToSpeakDamageVoice Parms{};

	Parms.VoiceTag = std::move(VoiceTag);
	Parms.bCausedByDamageArea = bCausedByDamageArea;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.TryToSpeakEmoteVoicePoliticClientEnv
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   VoiceIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_VoiceComponent_C::TryToSpeakEmoteVoicePoliticClientEnv(int32 VoiceIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "TryToSpeakEmoteVoicePoliticClientEnv");

	Params::BP_VoiceComponent_C_TryToSpeakEmoteVoicePoliticClientEnv Parms{};

	Parms.VoiceIndex = VoiceIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.GetSignalVoiceTag
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FGameplayTag                     SignalPinType                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     VoiceTag                                               (Parm, OutParm, NoDestructor, HasGetValueTypeHash)

void UBP_VoiceComponent_C::GetSignalVoiceTag(const struct FGameplayTag& SignalPinType, struct FGameplayTag* VoiceTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "GetSignalVoiceTag");

	Params::BP_VoiceComponent_C_GetSignalVoiceTag Parms{};

	Parms.SignalPinType = std::move(SignalPinType);

	UObject::ProcessEvent(Func, &Parms);

	if (VoiceTag != nullptr)
		*VoiceTag = std::move(Parms.VoiceTag);
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.CheckQueuedVoiceTag
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     VoiceTag                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    bQueued                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   QueuedNum                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_VoiceComponent_C::CheckQueuedVoiceTag(const struct FGameplayTag& VoiceTag, bool* bQueued, int32* QueuedNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "CheckQueuedVoiceTag");

	Params::BP_VoiceComponent_C_CheckQueuedVoiceTag Parms{};

	Parms.VoiceTag = std::move(VoiceTag);

	UObject::ProcessEvent(Func, &Parms);

	if (bQueued != nullptr)
		*bQueued = Parms.bQueued;

	if (QueuedNum != nullptr)
		*QueuedNum = Parms.QueuedNum;
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.CheckQueuedVoiceEvent
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           EventName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    bExactMatch                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bQueued                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_VoiceComponent_C::CheckQueuedVoiceEvent(const class FString& EventName, bool bExactMatch, bool* bQueued)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "CheckQueuedVoiceEvent");

	Params::BP_VoiceComponent_C_CheckQueuedVoiceEvent Parms{};

	Parms.EventName = std::move(EventName);
	Parms.bExactMatch = bExactMatch;

	UObject::ProcessEvent(Func, &Parms);

	if (bQueued != nullptr)
		*bQueued = Parms.bQueued;
}


// Function BP_VoiceComponent.BP_VoiceComponent_C.DequeueVoiceEvent
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           EventName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    bExactMatch                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_VoiceComponent_C::DequeueVoiceEvent(const class FString& EventName, bool bExactMatch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VoiceComponent_C", "DequeueVoiceEvent");

	Params::BP_VoiceComponent_C_DequeueVoiceEvent Parms{};

	Parms.EventName = std::move(EventName);
	Parms.bExactMatch = bExactMatch;

	UObject::ProcessEvent(Func, &Parms);
}

}

