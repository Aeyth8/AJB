#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBPairOverGrow

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "AJB_structs.hpp"


namespace SDK::Params
{

// Function BP_AJBPairOverGrow.BP_AJBPairOverGrow_C.ExecuteUbergraph_BP_AJBPairOverGrow
// 0x00E0 (0x00E0 - 0x0000)
struct BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacter*                    K2Node_Event_Operator;                             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Time;                                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGeneralTiming                                K2Node_Event_Timing;                               // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bEnable;                              // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bOperatorIsEmpty;                     // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue;     // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character1;     // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PossibleUseStand_bPossible;               // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdatePairCheckCore_bTargetIsPair;        // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue2;                    // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBInGameCharacterBase*                K2Node_DynamicCast_AsAJBIn_Game_Character_Base;    // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue1;    // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bShouldSpawnParticle1;          // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue1;                 // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B[0x5];                                       // 0x006B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue3;                    // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBInGameCharacterBase*                K2Node_DynamicCast_AsAJBIn_Game_Character_Base1;   // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue4;                    // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character2;     // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess4;                      // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerController_ReturnValue;           // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_ShouldSpawnParticle;            // 0x009B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bShouldSpawnParticle;           // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable1;                              // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x00A8(0x0010)(ZeroConstructor, NoDestructor)
	float                                         K2Node_Select_Default;                             // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x00C0(0x0008)(NoDestructor)
	bool                                          CallFunc_GetAJBHighlightManager_bIsValid;          // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBHighlightManager*                   CallFunc_GetAJBHighlightManager_ReturnValue;       // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayingReplay_ReturnValue;              // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow) == 0x000008, "Wrong alignment on BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow");
static_assert(sizeof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow) == 0x0000E0, "Wrong size on BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, EntryPoint) == 0x000000, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000010, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_Event_Operator) == 0x000020, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_Event_Operator' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_Event_Time) == 0x000028, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_Event_Time' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_Event_Timing) == 0x00002C, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_Event_Timing' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_Event_bEnable) == 0x00002D, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_Event_bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_Event_bOperatorIsEmpty) == 0x00002E, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_Event_bOperatorIsEmpty' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_HasLocalSharedController_ReturnValue) == 0x00002F, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_HasLocalSharedController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_Not_PreBool_ReturnValue) == 0x000030, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_GetOwner_ReturnValue1) == 0x000038, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_DynamicCast_AsBP_AJBIn_Game_Character1) == 0x000040, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_DynamicCast_AsBP_AJBIn_Game_Character1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_DynamicCast_bSuccess1) == 0x000048, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_PossibleUseStand_bPossible) == 0x000049, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_PossibleUseStand_bPossible' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_UpdatePairCheckCore_bTargetIsPair) == 0x00004A, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_UpdatePairCheckCore_bTargetIsPair' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, Temp_bool_Variable) == 0x00004B, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_GetOwner_ReturnValue2) == 0x000050, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_GetOwner_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_DynamicCast_AsAJBIn_Game_Character_Base) == 0x000058, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_DynamicCast_AsAJBIn_Game_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_DynamicCast_bSuccess2) == 0x000060, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, Temp_float_Variable) == 0x000064, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_HasLocalSharedController_ReturnValue1) == 0x000068, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_HasLocalSharedController_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_CustomEvent_bShouldSpawnParticle1) == 0x000069, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_CustomEvent_bShouldSpawnParticle1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_Not_PreBool_ReturnValue1) == 0x00006A, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_Not_PreBool_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_GetOwner_ReturnValue3) == 0x000070, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_GetOwner_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_DynamicCast_AsAJBIn_Game_Character_Base1) == 0x000078, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_DynamicCast_AsAJBIn_Game_Character_Base1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_DynamicCast_bSuccess3) == 0x000080, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_GetOwner_ReturnValue4) == 0x000088, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_GetOwner_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_DynamicCast_AsBP_AJBIn_Game_Character2) == 0x000090, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_DynamicCast_AsBP_AJBIn_Game_Character2' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_DynamicCast_bSuccess4) == 0x000098, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_DynamicCast_bSuccess4' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_IsPlayerController_ReturnValue) == 0x000099, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_IsPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_IsValid_ReturnValue) == 0x00009A, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_CustomEvent_ShouldSpawnParticle) == 0x00009B, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_CustomEvent_ShouldSpawnParticle' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_CustomEvent_bShouldSpawnParticle) == 0x00009C, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_CustomEvent_bShouldSpawnParticle' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, Temp_float_Variable1) == 0x0000A0, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::Temp_float_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_CreateDelegate_OutputDelegate) == 0x0000A8, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_Select_Default) == 0x0000B8, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x0000C0, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_GetAJBHighlightManager_bIsValid) == 0x0000C8, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_GetAJBHighlightManager_bIsValid' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_GetAJBHighlightManager_ReturnValue) == 0x0000D0, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_GetAJBHighlightManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_IsValid_ReturnValue1) == 0x0000D8, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_IsPlayingReplay_ReturnValue) == 0x0000D9, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_IsPlayingReplay_ReturnValue' has a wrong offset!");

// Function BP_AJBPairOverGrow.BP_AJBPairOverGrow_C.OnChangedNotOwnerEnv
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBPairOverGrow_C_OnChangedNotOwnerEnv final
{
public:
	bool                                          bShouldSpawnParticle_0;                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPairOverGrow_C_OnChangedNotOwnerEnv) == 0x000001, "Wrong alignment on BP_AJBPairOverGrow_C_OnChangedNotOwnerEnv");
static_assert(sizeof(BP_AJBPairOverGrow_C_OnChangedNotOwnerEnv) == 0x000001, "Wrong size on BP_AJBPairOverGrow_C_OnChangedNotOwnerEnv");
static_assert(offsetof(BP_AJBPairOverGrow_C_OnChangedNotOwnerEnv, bShouldSpawnParticle_0) == 0x000000, "Member 'BP_AJBPairOverGrow_C_OnChangedNotOwnerEnv::bShouldSpawnParticle_0' has a wrong offset!");

// Function BP_AJBPairOverGrow.BP_AJBPairOverGrow_C.ROS_OnChanged
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBPairOverGrow_C_ROS_OnChanged final
{
public:
	bool                                          ShouldSpawnParticle;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPairOverGrow_C_ROS_OnChanged) == 0x000001, "Wrong alignment on BP_AJBPairOverGrow_C_ROS_OnChanged");
static_assert(sizeof(BP_AJBPairOverGrow_C_ROS_OnChanged) == 0x000001, "Wrong size on BP_AJBPairOverGrow_C_ROS_OnChanged");
static_assert(offsetof(BP_AJBPairOverGrow_C_ROS_OnChanged, ShouldSpawnParticle) == 0x000000, "Member 'BP_AJBPairOverGrow_C_ROS_OnChanged::ShouldSpawnParticle' has a wrong offset!");

// Function BP_AJBPairOverGrow.BP_AJBPairOverGrow_C.OnChangedOwnerEnv
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBPairOverGrow_C_OnChangedOwnerEnv final
{
public:
	bool                                          bShouldSpawnParticle_0;                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPairOverGrow_C_OnChangedOwnerEnv) == 0x000001, "Wrong alignment on BP_AJBPairOverGrow_C_OnChangedOwnerEnv");
static_assert(sizeof(BP_AJBPairOverGrow_C_OnChangedOwnerEnv) == 0x000001, "Wrong size on BP_AJBPairOverGrow_C_OnChangedOwnerEnv");
static_assert(offsetof(BP_AJBPairOverGrow_C_OnChangedOwnerEnv, bShouldSpawnParticle_0) == 0x000000, "Member 'BP_AJBPairOverGrow_C_OnChangedOwnerEnv::bShouldSpawnParticle_0' has a wrong offset!");

// Function BP_AJBPairOverGrow.BP_AJBPairOverGrow_C.NotifyTheWorld
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBPairOverGrow_C_NotifyTheWorld final
{
public:
	class AAJBInGameCharacter*                    Operator;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGeneralTiming                                Timing;                                            // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnable;                                           // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bOperatorIsEmpty;                                  // 0x000E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPairOverGrow_C_NotifyTheWorld) == 0x000008, "Wrong alignment on BP_AJBPairOverGrow_C_NotifyTheWorld");
static_assert(sizeof(BP_AJBPairOverGrow_C_NotifyTheWorld) == 0x000010, "Wrong size on BP_AJBPairOverGrow_C_NotifyTheWorld");
static_assert(offsetof(BP_AJBPairOverGrow_C_NotifyTheWorld, Operator) == 0x000000, "Member 'BP_AJBPairOverGrow_C_NotifyTheWorld::Operator' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_NotifyTheWorld, Time) == 0x000008, "Member 'BP_AJBPairOverGrow_C_NotifyTheWorld::Time' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_NotifyTheWorld, Timing) == 0x00000C, "Member 'BP_AJBPairOverGrow_C_NotifyTheWorld::Timing' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_NotifyTheWorld, bEnable) == 0x00000D, "Member 'BP_AJBPairOverGrow_C_NotifyTheWorld::bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_NotifyTheWorld, bOperatorIsEmpty) == 0x00000E, "Member 'BP_AJBPairOverGrow_C_NotifyTheWorld::bOperatorIsEmpty' has a wrong offset!");

// Function BP_AJBPairOverGrow.BP_AJBPairOverGrow_C.UpdatePairCheckCore
// 0x01D8 (0x01D8 - 0x0000)
struct BP_AJBPairOverGrow_C_UpdatePairCheckCore final
{
public:
	bool                                          bTargetIsPair;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckPairCondition_bShouldTarget;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character1;     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CalcCameraBaseTraceInfo_bSucceed;         // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_CalcCameraBaseTraceInfo_TraceStart;       // 0x003C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalcCameraBaseTraceInfo_TraceEnd;         // 0x0048(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0060(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character2;     // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array1;                           // 0x0080(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	TArray<struct FHitResult>                     CallFunc_AJBMultiSphereTraceForObjects_OutHits;    // 0x0090(0x0010)(ZeroConstructor, ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_AJBMultiSphereTraceForObjects_ReturnValue; // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_Array_Get_Item;                           // 0x00B0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13A[0x2];                                      // 0x013A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0144(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0150(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x015C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0168(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0188(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01A0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01AC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameWindow_C*                  K2Node_DynamicCast_AsBP_AJBIn_Game_Window;         // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C1[0x7];                                      // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsBroken_ReturnValue;                     // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x01D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPairOverGrow_C_UpdatePairCheckCore) == 0x000008, "Wrong alignment on BP_AJBPairOverGrow_C_UpdatePairCheckCore");
static_assert(sizeof(BP_AJBPairOverGrow_C_UpdatePairCheckCore) == 0x0001D8, "Wrong size on BP_AJBPairOverGrow_C_UpdatePairCheckCore");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, bTargetIsPair) == 0x000000, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::bTargetIsPair' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_CheckPairCondition_bShouldTarget) == 0x000001, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_CheckPairCondition_bShouldTarget' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000018, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, K2Node_DynamicCast_AsBP_AJBIn_Game_Character1) == 0x000028, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::K2Node_DynamicCast_AsBP_AJBIn_Game_Character1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, K2Node_DynamicCast_bSuccess1) == 0x000030, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, Temp_int_Array_Index_Variable) == 0x000034, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_CalcCameraBaseTraceInfo_bSucceed) == 0x000038, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_CalcCameraBaseTraceInfo_bSucceed' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_CalcCameraBaseTraceInfo_TraceStart) == 0x00003C, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_CalcCameraBaseTraceInfo_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_CalcCameraBaseTraceInfo_TraceEnd) == 0x000048, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_CalcCameraBaseTraceInfo_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_GetOwner_ReturnValue1) == 0x000058, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, K2Node_MakeArray_Array) == 0x000060, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, K2Node_DynamicCast_AsBP_AJBIn_Game_Character2) == 0x000070, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::K2Node_DynamicCast_AsBP_AJBIn_Game_Character2' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, K2Node_DynamicCast_bSuccess2) == 0x000078, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, K2Node_MakeArray_Array1) == 0x000080, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::K2Node_MakeArray_Array1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_AJBMultiSphereTraceForObjects_OutHits) == 0x000090, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_AJBMultiSphereTraceForObjects_OutHits' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_AJBMultiSphereTraceForObjects_ReturnValue) == 0x0000A0, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_AJBMultiSphereTraceForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_Array_Length_ReturnValue) == 0x0000A4, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_Less_IntInt_ReturnValue) == 0x0000A8, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_Array_Get_Item) == 0x0000B0, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_BreakHitResult_bBlockingHit) == 0x000138, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_BreakHitResult_bInitialOverlap) == 0x000139, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_BreakHitResult_Time) == 0x00013C, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_BreakHitResult_Distance) == 0x000140, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_BreakHitResult_Location) == 0x000144, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_BreakHitResult_ImpactPoint) == 0x000150, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_BreakHitResult_Normal) == 0x00015C, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_BreakHitResult_ImpactNormal) == 0x000168, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_BreakHitResult_PhysMat) == 0x000178, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_BreakHitResult_HitActor) == 0x000180, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_BreakHitResult_HitComponent) == 0x000188, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_BreakHitResult_HitBoneName) == 0x000190, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_BreakHitResult_HitItem) == 0x000198, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_BreakHitResult_FaceIndex) == 0x00019C, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_BreakHitResult_TraceStart) == 0x0001A0, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_BreakHitResult_TraceEnd) == 0x0001AC, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, K2Node_DynamicCast_AsBP_AJBIn_Game_Window) == 0x0001B8, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::K2Node_DynamicCast_AsBP_AJBIn_Game_Window' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, K2Node_DynamicCast_bSuccess3) == 0x0001C0, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_GetObjectClass_ReturnValue) == 0x0001C8, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_IsBroken_ReturnValue) == 0x0001D0, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_IsBroken_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_ClassIsChildOf_ReturnValue) == 0x0001D1, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0001D2, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function BP_AJBPairOverGrow.BP_AJBPairOverGrow_C.ChangeTarget
// 0x0028 (0x0028 - 0x0000)
struct BP_AJBPairOverGrow_C_ChangeTarget final
{
public:
	class ABP_AJBInGameCharacter_C*               CharacterBP;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBOverGrowSkill_C*                 CallFunc_GetComponentByClass_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPairOverGrow_C_ChangeTarget) == 0x000008, "Wrong alignment on BP_AJBPairOverGrow_C_ChangeTarget");
static_assert(sizeof(BP_AJBPairOverGrow_C_ChangeTarget) == 0x000028, "Wrong size on BP_AJBPairOverGrow_C_ChangeTarget");
static_assert(offsetof(BP_AJBPairOverGrow_C_ChangeTarget, CharacterBP) == 0x000000, "Member 'BP_AJBPairOverGrow_C_ChangeTarget::CharacterBP' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ChangeTarget, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBPairOverGrow_C_ChangeTarget::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ChangeTarget, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000010, "Member 'BP_AJBPairOverGrow_C_ChangeTarget::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ChangeTarget, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AJBPairOverGrow_C_ChangeTarget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ChangeTarget, CallFunc_GetComponentByClass_ReturnValue) == 0x000020, "Member 'BP_AJBPairOverGrow_C_ChangeTarget::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");

// Function BP_AJBPairOverGrow.BP_AJBPairOverGrow_C.TrySpawnPairTargetParticle
// 0x0028 (0x0028 - 0x0000)
struct BP_AJBPairOverGrow_C_TrySpawnPairTargetParticle final
{
public:
	struct FGameplayTag                           ParticleTag;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameParticleEffect_C*          CallFunc_RequestParticleEffectAttachedOnLocal_ParticleEffect; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPairOverGrow_C_TrySpawnPairTargetParticle) == 0x000008, "Wrong alignment on BP_AJBPairOverGrow_C_TrySpawnPairTargetParticle");
static_assert(sizeof(BP_AJBPairOverGrow_C_TrySpawnPairTargetParticle) == 0x000028, "Wrong size on BP_AJBPairOverGrow_C_TrySpawnPairTargetParticle");
static_assert(offsetof(BP_AJBPairOverGrow_C_TrySpawnPairTargetParticle, ParticleTag) == 0x000000, "Member 'BP_AJBPairOverGrow_C_TrySpawnPairTargetParticle::ParticleTag' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_TrySpawnPairTargetParticle, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBPairOverGrow_C_TrySpawnPairTargetParticle::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_TrySpawnPairTargetParticle, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000010, "Member 'BP_AJBPairOverGrow_C_TrySpawnPairTargetParticle::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_TrySpawnPairTargetParticle, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AJBPairOverGrow_C_TrySpawnPairTargetParticle::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_TrySpawnPairTargetParticle, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'BP_AJBPairOverGrow_C_TrySpawnPairTargetParticle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_TrySpawnPairTargetParticle, CallFunc_RequestParticleEffectAttachedOnLocal_ParticleEffect) == 0x000020, "Member 'BP_AJBPairOverGrow_C_TrySpawnPairTargetParticle::CallFunc_RequestParticleEffectAttachedOnLocal_ParticleEffect' has a wrong offset!");

// Function BP_AJBPairOverGrow.BP_AJBPairOverGrow_C.TryDestroyPairTargetParticle
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBPairOverGrow_C_TryDestroyPairTargetParticle final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPairOverGrow_C_TryDestroyPairTargetParticle) == 0x000001, "Wrong alignment on BP_AJBPairOverGrow_C_TryDestroyPairTargetParticle");
static_assert(sizeof(BP_AJBPairOverGrow_C_TryDestroyPairTargetParticle) == 0x000001, "Wrong size on BP_AJBPairOverGrow_C_TryDestroyPairTargetParticle");
static_assert(offsetof(BP_AJBPairOverGrow_C_TryDestroyPairTargetParticle, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_AJBPairOverGrow_C_TryDestroyPairTargetParticle::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_AJBPairOverGrow.BP_AJBPairOverGrow_C.ChangeGuideUIEnable
// 0x0028 (0x0028 - 0x0000)
struct BP_AJBPairOverGrow_C_ChangeGuideUIEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBOverGrowSkill_C*                 CallFunc_GetComponentByClass_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPairOverGrow_C_ChangeGuideUIEnable) == 0x000008, "Wrong alignment on BP_AJBPairOverGrow_C_ChangeGuideUIEnable");
static_assert(sizeof(BP_AJBPairOverGrow_C_ChangeGuideUIEnable) == 0x000028, "Wrong size on BP_AJBPairOverGrow_C_ChangeGuideUIEnable");
static_assert(offsetof(BP_AJBPairOverGrow_C_ChangeGuideUIEnable, bEnable) == 0x000000, "Member 'BP_AJBPairOverGrow_C_ChangeGuideUIEnable::bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ChangeGuideUIEnable, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBPairOverGrow_C_ChangeGuideUIEnable::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ChangeGuideUIEnable, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000010, "Member 'BP_AJBPairOverGrow_C_ChangeGuideUIEnable::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ChangeGuideUIEnable, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AJBPairOverGrow_C_ChangeGuideUIEnable::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ChangeGuideUIEnable, CallFunc_GetComponentByClass_ReturnValue) == 0x000020, "Member 'BP_AJBPairOverGrow_C_ChangeGuideUIEnable::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");

// Function BP_AJBPairOverGrow.BP_AJBPairOverGrow_C.CheckPairCondition
// 0x0058 (0x0058 - 0x0000)
struct BP_AJBPairOverGrow_C_CheckPairCondition final
{
public:
	bool                                          bShouldTarget;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x001C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue1;         // 0x0028(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0038(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character1;     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CharacterBehaviorMatches_ReturnValue;     // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPairOverGrow_C_CheckPairCondition) == 0x000008, "Wrong alignment on BP_AJBPairOverGrow_C_CheckPairCondition");
static_assert(sizeof(BP_AJBPairOverGrow_C_CheckPairCondition) == 0x000058, "Wrong size on BP_AJBPairOverGrow_C_CheckPairCondition");
static_assert(offsetof(BP_AJBPairOverGrow_C_CheckPairCondition, bShouldTarget) == 0x000000, "Member 'BP_AJBPairOverGrow_C_CheckPairCondition::bShouldTarget' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_CheckPairCondition, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBPairOverGrow_C_CheckPairCondition::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_CheckPairCondition, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000010, "Member 'BP_AJBPairOverGrow_C_CheckPairCondition::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_CheckPairCondition, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AJBPairOverGrow_C_CheckPairCondition::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_CheckPairCondition, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00001C, "Member 'BP_AJBPairOverGrow_C_CheckPairCondition::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_CheckPairCondition, CallFunc_K2_GetActorLocation_ReturnValue1) == 0x000028, "Member 'BP_AJBPairOverGrow_C_CheckPairCondition::CallFunc_K2_GetActorLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_CheckPairCondition, CallFunc_IsValid_ReturnValue) == 0x000034, "Member 'BP_AJBPairOverGrow_C_CheckPairCondition::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_CheckPairCondition, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000038, "Member 'BP_AJBPairOverGrow_C_CheckPairCondition::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_CheckPairCondition, CallFunc_VSize_ReturnValue) == 0x000044, "Member 'BP_AJBPairOverGrow_C_CheckPairCondition::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_CheckPairCondition, K2Node_DynamicCast_AsBP_AJBIn_Game_Character1) == 0x000048, "Member 'BP_AJBPairOverGrow_C_CheckPairCondition::K2Node_DynamicCast_AsBP_AJBIn_Game_Character1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_CheckPairCondition, K2Node_DynamicCast_bSuccess1) == 0x000050, "Member 'BP_AJBPairOverGrow_C_CheckPairCondition::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_CheckPairCondition, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000051, "Member 'BP_AJBPairOverGrow_C_CheckPairCondition::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_CheckPairCondition, CallFunc_Not_PreBool_ReturnValue) == 0x000052, "Member 'BP_AJBPairOverGrow_C_CheckPairCondition::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_CheckPairCondition, CallFunc_CharacterBehaviorMatches_ReturnValue) == 0x000053, "Member 'BP_AJBPairOverGrow_C_CheckPairCondition::CallFunc_CharacterBehaviorMatches_ReturnValue' has a wrong offset!");

// Function BP_AJBPairOverGrow.BP_AJBPairOverGrow_C.OnRep_bRepShouldSpawnParticle
// 0x0018 (0x0018 - 0x0000)
struct BP_AJBPairOverGrow_C_OnRep_bRepShouldSpawnParticle final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBInGameCharacterBase*                K2Node_DynamicCast_AsAJBIn_Game_Character_Base;    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue;     // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPairOverGrow_C_OnRep_bRepShouldSpawnParticle) == 0x000008, "Wrong alignment on BP_AJBPairOverGrow_C_OnRep_bRepShouldSpawnParticle");
static_assert(sizeof(BP_AJBPairOverGrow_C_OnRep_bRepShouldSpawnParticle) == 0x000018, "Wrong size on BP_AJBPairOverGrow_C_OnRep_bRepShouldSpawnParticle");
static_assert(offsetof(BP_AJBPairOverGrow_C_OnRep_bRepShouldSpawnParticle, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'BP_AJBPairOverGrow_C_OnRep_bRepShouldSpawnParticle::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_OnRep_bRepShouldSpawnParticle, K2Node_DynamicCast_AsAJBIn_Game_Character_Base) == 0x000008, "Member 'BP_AJBPairOverGrow_C_OnRep_bRepShouldSpawnParticle::K2Node_DynamicCast_AsAJBIn_Game_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_OnRep_bRepShouldSpawnParticle, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_AJBPairOverGrow_C_OnRep_bRepShouldSpawnParticle::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_OnRep_bRepShouldSpawnParticle, CallFunc_HasLocalSharedController_ReturnValue) == 0x000011, "Member 'BP_AJBPairOverGrow_C_OnRep_bRepShouldSpawnParticle::CallFunc_HasLocalSharedController_ReturnValue' has a wrong offset!");

}

