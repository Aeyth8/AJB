#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_ChallengeEventProgressWindow

#include "Basic.hpp"

#include "WB_ChallengeEventProgressWindow_classes.hpp"
#include "WB_ChallengeEventProgressWindow_parameters.hpp"


namespace SDK
{

// Function WB_ChallengeEventProgressWindow.WB_ChallengeEventProgressWindow_C.OnPlayerOperationEnabled__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UWB_ChallengeEventProgressWindow_C::OnPlayerOperationEnabled__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ChallengeEventProgressWindow_C", "OnPlayerOperationEnabled__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_ChallengeEventProgressWindow.WB_ChallengeEventProgressWindow_C.ExecuteUbergraph_WB_ChallengeEventProgressWindow
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_ChallengeEventProgressWindow_C::ExecuteUbergraph_WB_ChallengeEventProgressWindow(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ChallengeEventProgressWindow_C", "ExecuteUbergraph_WB_ChallengeEventProgressWindow");

	Params::WB_ChallengeEventProgressWindow_C_ExecuteUbergraph_WB_ChallengeEventProgressWindow Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_ChallengeEventProgressWindow.WB_ChallengeEventProgressWindow_C.PlayOnCloseSequence
// (BlueprintCallable, BlueprintEvent)

void UWB_ChallengeEventProgressWindow_C::PlayOnCloseSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ChallengeEventProgressWindow_C", "PlayOnCloseSequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_ChallengeEventProgressWindow.WB_ChallengeEventProgressWindow_C.PlayOnOpenSequence
// (BlueprintCallable, BlueprintEvent)

void UWB_ChallengeEventProgressWindow_C::PlayOnOpenSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ChallengeEventProgressWindow_C", "PlayOnOpenSequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_ChallengeEventProgressWindow.WB_ChallengeEventProgressWindow_C.OnCloseAnimationFinished
// (BlueprintCallable, BlueprintEvent)

void UWB_ChallengeEventProgressWindow_C::OnCloseAnimationFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ChallengeEventProgressWindow_C", "OnCloseAnimationFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_ChallengeEventProgressWindow.WB_ChallengeEventProgressWindow_C.OnOpenAnimationFinished
// (BlueprintCallable, BlueprintEvent)

void UWB_ChallengeEventProgressWindow_C::OnOpenAnimationFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ChallengeEventProgressWindow_C", "OnOpenAnimationFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_ChallengeEventProgressWindow.WB_ChallengeEventProgressWindow_C.OnCountDownTimerExpired
// (BlueprintCallable, BlueprintEvent)

void UWB_ChallengeEventProgressWindow_C::OnCountDownTimerExpired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ChallengeEventProgressWindow_C", "OnCountDownTimerExpired");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_ChallengeEventProgressWindow.WB_ChallengeEventProgressWindow_C.OnExpUpFInishedOfClassItem
// (BlueprintCallable, BlueprintEvent)

void UWB_ChallengeEventProgressWindow_C::OnExpUpFInishedOfClassItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ChallengeEventProgressWindow_C", "OnExpUpFInishedOfClassItem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_ChallengeEventProgressWindow.WB_ChallengeEventProgressWindow_C.BndEvt__ClassesScrollBox_K2Node_ComponentBoundEvent_2_OnSnapRightScrolled__DelegateSignature
// (BlueprintEvent)

void UWB_ChallengeEventProgressWindow_C::BndEvt__ClassesScrollBox_K2Node_ComponentBoundEvent_2_OnSnapRightScrolled__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ChallengeEventProgressWindow_C", "BndEvt__ClassesScrollBox_K2Node_ComponentBoundEvent_2_OnSnapRightScrolled__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_ChallengeEventProgressWindow.WB_ChallengeEventProgressWindow_C.BndEvt__ClassesScrollBox_K2Node_ComponentBoundEvent_1_OnSnapLeftScrolled__DelegateSignature
// (BlueprintEvent)

void UWB_ChallengeEventProgressWindow_C::BndEvt__ClassesScrollBox_K2Node_ComponentBoundEvent_1_OnSnapLeftScrolled__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ChallengeEventProgressWindow_C", "BndEvt__ClassesScrollBox_K2Node_ComponentBoundEvent_1_OnSnapLeftScrolled__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_ChallengeEventProgressWindow.WB_ChallengeEventProgressWindow_C.BndEvt__ClassesScrollBox_K2Node_ComponentBoundEvent_0_OnScrollMoved__DelegateSignature
// (BlueprintEvent)

void UWB_ChallengeEventProgressWindow_C::BndEvt__ClassesScrollBox_K2Node_ComponentBoundEvent_0_OnScrollMoved__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ChallengeEventProgressWindow_C", "BndEvt__ClassesScrollBox_K2Node_ComponentBoundEvent_0_OnScrollMoved__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_ChallengeEventProgressWindow.WB_ChallengeEventProgressWindow_C.Scroll
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ClassIndexTo                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_ChallengeEventProgressWindow_C::Scroll(int32 ClassIndexTo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ChallengeEventProgressWindow_C", "Scroll");

	Params::WB_ChallengeEventProgressWindow_C_Scroll Parms{};

	Parms.ClassIndexTo = ClassIndexTo;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_ChallengeEventProgressWindow.WB_ChallengeEventProgressWindow_C.OnRewardWindowFinished
// (BlueprintCallable, BlueprintEvent)

void UWB_ChallengeEventProgressWindow_C::OnRewardWindowFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ChallengeEventProgressWindow_C", "OnRewardWindowFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_ChallengeEventProgressWindow.WB_ChallengeEventProgressWindow_C.OnDecidedCloseButton
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAJBButtonWidget*                 OwnerWidget                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAJBButton*                       TargetButton                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_ChallengeEventProgressWindow_C::OnDecidedCloseButton(class UAJBButtonWidget* OwnerWidget, class UAJBButton* TargetButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ChallengeEventProgressWindow_C", "OnDecidedCloseButton");

	Params::WB_ChallengeEventProgressWindow_C_OnDecidedCloseButton Parms{};

	Parms.OwnerWidget = OwnerWidget;
	Parms.TargetButton = TargetButton;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_ChallengeEventProgressWindow.WB_ChallengeEventProgressWindow_C.OnFooterAppearanceFinished
// (BlueprintCallable, BlueprintEvent)

void UWB_ChallengeEventProgressWindow_C::OnFooterAppearanceFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ChallengeEventProgressWindow_C", "OnFooterAppearanceFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_ChallengeEventProgressWindow.WB_ChallengeEventProgressWindow_C.ProgressNextClassItem
// (BlueprintCallable, BlueprintEvent)

void UWB_ChallengeEventProgressWindow_C::ProgressNextClassItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ChallengeEventProgressWindow_C", "ProgressNextClassItem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_ChallengeEventProgressWindow.WB_ChallengeEventProgressWindow_C.ShowRewardWindow
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FChallengeEventClassContext      ClassContext                                           (BlueprintVisible, BlueprintReadOnly, Parm)

void UWB_ChallengeEventProgressWindow_C::ShowRewardWindow(const struct FChallengeEventClassContext& ClassContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ChallengeEventProgressWindow_C", "ShowRewardWindow");

	Params::WB_ChallengeEventProgressWindow_C_ShowRewardWindow Parms{};

	Parms.ClassContext = std::move(ClassContext);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_ChallengeEventProgressWindow.WB_ChallengeEventProgressWindow_C.StartToPlayerOperation
// (BlueprintCallable, BlueprintEvent)

void UWB_ChallengeEventProgressWindow_C::StartToPlayerOperation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ChallengeEventProgressWindow_C", "StartToPlayerOperation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_ChallengeEventProgressWindow.WB_ChallengeEventProgressWindow_C.ShowNextExp
// (BlueprintCallable, BlueprintEvent)

void UWB_ChallengeEventProgressWindow_C::ShowNextExp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ChallengeEventProgressWindow_C", "ShowNextExp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_ChallengeEventProgressWindow.WB_ChallengeEventProgressWindow_C.OnFinishedProgressOfClassItem
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWB_ChallengeEventClassItem_C*    ItemObj                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_ChallengeEventProgressWindow_C::OnFinishedProgressOfClassItem(class UWB_ChallengeEventClassItem_C* ItemObj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ChallengeEventProgressWindow_C", "OnFinishedProgressOfClassItem");

	Params::WB_ChallengeEventProgressWindow_C_OnFinishedProgressOfClassItem Parms{};

	Parms.ItemObj = ItemObj;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_ChallengeEventProgressWindow.WB_ChallengeEventProgressWindow_C.OnClosingWindow
// (Event, Public, BlueprintEvent)

void UWB_ChallengeEventProgressWindow_C::OnClosingWindow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ChallengeEventProgressWindow_C", "OnClosingWindow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_ChallengeEventProgressWindow.WB_ChallengeEventProgressWindow_C.OnOpeningWindow
// (Event, Public, BlueprintEvent)

void UWB_ChallengeEventProgressWindow_C::OnOpeningWindow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ChallengeEventProgressWindow_C", "OnOpeningWindow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_ChallengeEventProgressWindow.WB_ChallengeEventProgressWindow_C.Setup
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FChallengeEventProgressContext   ProgressContext_0                                      (BlueprintVisible, BlueprintReadOnly, Parm)
// class AAJBHUDBase*                      AJBHUDBase_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_ChallengeEventProgressWindow_C::Setup(const struct FChallengeEventProgressContext& ProgressContext_0, class AAJBHUDBase* AJBHUDBase_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ChallengeEventProgressWindow_C", "Setup");

	Params::WB_ChallengeEventProgressWindow_C_Setup Parms{};

	Parms.ProgressContext_0 = std::move(ProgressContext_0);
	Parms.AJBHUDBase_0 = AJBHUDBase_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_ChallengeEventProgressWindow.WB_ChallengeEventProgressWindow_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_ChallengeEventProgressWindow_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ChallengeEventProgressWindow_C", "Tick");

	Params::WB_ChallengeEventProgressWindow_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_ChallengeEventProgressWindow.WB_ChallengeEventProgressWindow_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWB_ChallengeEventProgressWindow_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ChallengeEventProgressWindow_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_ChallengeEventProgressWindow.WB_ChallengeEventProgressWindow_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_ChallengeEventProgressWindow_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ChallengeEventProgressWindow_C", "PreConstruct");

	Params::WB_ChallengeEventProgressWindow_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_ChallengeEventProgressWindow.WB_ChallengeEventProgressWindow_C.DebugSetupWithTestContext
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAJBHUDBase*                      AJBHUDBase_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_ChallengeEventProgressWindow_C::DebugSetupWithTestContext(class AAJBHUDBase* AJBHUDBase_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ChallengeEventProgressWindow_C", "DebugSetupWithTestContext");

	Params::WB_ChallengeEventProgressWindow_C_DebugSetupWithTestContext Parms{};

	Parms.AJBHUDBase_0 = AJBHUDBase_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_ChallengeEventProgressWindow.WB_ChallengeEventProgressWindow_C.GetRestExpToClassUp
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UWB_ChallengeEventProgressWindow_C::GetRestExpToClassUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ChallengeEventProgressWindow_C", "GetRestExpToClassUp");

	Params::WB_ChallengeEventProgressWindow_C_GetRestExpToClassUp Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WB_ChallengeEventProgressWindow.WB_ChallengeEventProgressWindow_C.SetEnableApplyReward
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_ChallengeEventProgressWindow_C::SetEnableApplyReward(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ChallengeEventProgressWindow_C", "SetEnableApplyReward");

	Params::WB_ChallengeEventProgressWindow_C_SetEnableApplyReward Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_ChallengeEventProgressWindow.WB_ChallengeEventProgressWindow_C.IsPlayerOperatable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UWB_ChallengeEventProgressWindow_C::IsPlayerOperatable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ChallengeEventProgressWindow_C", "IsPlayerOperatable");

	Params::WB_ChallengeEventProgressWindow_C_IsPlayerOperatable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WB_ChallengeEventProgressWindow.WB_ChallengeEventProgressWindow_C.SetIsEnabledPlayerOperation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInIsEnabled                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_ChallengeEventProgressWindow_C::SetIsEnabledPlayerOperation(bool bInIsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ChallengeEventProgressWindow_C", "SetIsEnabledPlayerOperation");

	Params::WB_ChallengeEventProgressWindow_C_SetIsEnabledPlayerOperation Parms{};

	Parms.bInIsEnabled = bInIsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_ChallengeEventProgressWindow.WB_ChallengeEventProgressWindow_C.UpdateScrollArrowsVisibility
// (Public, BlueprintCallable, BlueprintEvent)

void UWB_ChallengeEventProgressWindow_C::UpdateScrollArrowsVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ChallengeEventProgressWindow_C", "UpdateScrollArrowsVisibility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_ChallengeEventProgressWindow.WB_ChallengeEventProgressWindow_C.GetRewardInfoFromClassContext
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FChallengeEventClassContext      ClassContext                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FAJBGameRewardInfo               ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FAJBGameRewardInfo UWB_ChallengeEventProgressWindow_C::GetRewardInfoFromClassContext(const struct FChallengeEventClassContext& ClassContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ChallengeEventProgressWindow_C", "GetRewardInfoFromClassContext");

	Params::WB_ChallengeEventProgressWindow_C_GetRewardInfoFromClassContext Parms{};

	Parms.ClassContext = std::move(ClassContext);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

