#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_LandmarkableMap

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AJB_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_LandmarkableMap.WB_LandmarkableMap_C
// 0x0168 (0x0428 - 0x02C0)
class UWB_LandmarkableMap_C final : public UAJBWindowWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(Transient, DuplicateTransient)
	class UWidgetAnimation*                       FocusAnimation;                                    // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              AJBImage_Map;                                      // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Border_Inputer;                                    // 0x02D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           CanvasPanel_Landmarks;                             // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScaleBox*                              ScaleBox_UVExpander_Root;                          // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_LandmarkCautionPair_C*              WB_LandmarkCautionPair;                            // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_LandmarkCautionPlayer_C*            WB_LandmarkCautionPlayer;                          // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_LandmarkPair_C*                     WB_LandmarkPair;                                   // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_LandmarkPairMarker_C*               WB_LandmarkPairMarker;                             // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_LandmarkPlayer_C*                   WB_LandmarkPlayer;                                 // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_LandmarkPlayerMarker_C*             WB_LandmarkPlayerMarker;                           // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_LandmarkText_C*                     WB_LandmarkText;                                   // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_LandmarkText_C*                     WB_LandmarkText_C_0;                               // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_LandmarkText_C*                     WB_LandmarkText_C_1;                               // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_LandmarkText_C*                     WB_LandmarkText_C_2;                               // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_LandmarkText_C*                     WB_LandmarkText_C_3;                               // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_LandmarkText_C*                     WB_LandmarkText_C_4;                               // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_LandmarkText_C*                     WB_LandmarkText_C_5;                               // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_LandmarkText_C*                     WB_LandmarkText_C_6;                               // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_LandmarkText_C*                     WB_LandmarkText_C_7;                               // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_LandmarkText_C*                     WB_LandmarkText_C_8;                               // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_LandmarkText_C*                     WB_LandmarkText_C_9;                               // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_LandmarkText_C*                     WB_LandmarkText_C_10;                              // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_LandmarkText_C*                     WB_LandmarkText_C_11;                              // 0x0380(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_LandmarkText_C*                     WB_LandmarkText_C_12;                              // 0x0388(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_MapGuideLine_C*                     WB_MapGuideLine;                                   // 0x0390(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          bIsPlayerFollow;                                   // 0x0398(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          bIsScalable;                                       // 0x0399(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          bIsScrollable;                                     // 0x039A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          bIsStickableMarker;                                // 0x039B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          bIsVisibleTargetSafeAreaLine;                      // 0x039C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          bPermissionRemoveMarker;                           // 0x039D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39E[0x2];                                      // 0x039E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Position;                                          // 0x03A0(0x0008)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         PositionInterpSpeed;                               // 0x03AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         ScaleInterpSpeed;                                  // 0x03B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         ScaleMax;                                          // 0x03B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector2D                              PositionLimiter;                                   // 0x03B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleMin;                                          // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              TargetPosition;                                    // 0x03C4(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetScale;                                       // 0x03CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CachedMapSize;                                     // 0x03D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CachedMapDMI;                                      // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBUIMapManager_C*                  CachedMapManager;                                  // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UWB_LandmarkBase_C*>             LandmarkWidgets;                                   // 0x03E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          bTouchDisplay;                                     // 0x03F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F9[0x7];                                      // 0x03F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           BanRemoveMarkerTimerHandle;                        // 0x0400(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          bDebugHighlightPlayerLog;                          // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_409[0x7];                                      // 0x0409(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            AdvancedSafeAreaAnimationCurve;                    // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AdvancedSafeAreaDuration;                          // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41C[0x4];                                      // 0x041C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Handle;                                            // 0x0420(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)

public:
	void ExecuteUbergraph_WB_LandmarkableMap(int32 EntryPoint);
	void SetAdvancedSafeAreaVisibility(bool bIsVisible);
	void PlayFocusAnimation();
	void OnHighlightPlayBegin();
	void SetIconBink(bool bEnableBlink);
	void ResetTouchFlag();
	void OnPermissionRemoveMarker();
	void BanRemoveMarker();
	void OnStickedPairMarker(const struct FVector2D& NormalizedPosition, class UWB_LandmarkableMap_C* MapWidget, const struct FGameplayTag& SignalPinType);
	void OnStickedPlayerMarker(const struct FVector2D& NormalizedPosition, class UWB_LandmarkableMap_C* MapWidget, const struct FGameplayTag& SignalPinType, bool FromMap);
	void OnChangedPairIcon(const struct FVector2D& NormalizedPosition, float IconAngle, class UWB_LandmarkableMap_C* MapWidget, bool bVisibleIcon, int32 PairHP);
	void OnChangedPlayerIcon(const struct FVector2D& NormalizedPosition, float IconAngle, class UWB_LandmarkableMap_C* MapWidget);
	void ForceFocusPlayer();
	void PreConstruct(bool IsDesignTime);
	void SetTargetScale(float ScrollScaleTarget);
	void SetTargetPosition(const struct FVector2D& TargetPosition_0);
	void Construct();
	void SetScale(float InScale);
	void SetPosition(const struct FVector2D& InPosition);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void StickCautionPin(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void ReserveInstructionPin(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void UpdateLimiter();
	struct FEventReply On_Border_Inputer_MouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply On_Border_Inputer_MouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void SetupLandmarkMapMaterial(class UMaterialInterface* OverrideMaterial);
	float CalcMapScale(float Scale_0);
	struct FVector2D GetPositionFromNormalizePosition(const struct FVector2D& Position_0);
	struct FEventReply On_Border_Inputer_MouseDoubleClick(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void CalcStickPosition(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent, struct FVector2D* StickPosition, struct FVector2D* NormalizedStickPosition, bool* bIsValid);
	void StickNewPin(const struct FVector2D& StickPosition, const struct FVector2D& NormalizedPosition, const struct FGameplayTag& SignalTypeTag);
	void TryRemoveLandmark(const struct FVector2D& TouchPosition, bool* Removed);
	bool OnInputTurnRate(float Value);
	bool OnInputReleasedUp();
	bool OnInputReleasedTouch();
	bool OnInputReleasedRight();
	bool OnInputReleasedLeft();
	bool OnInputReleasedDown();
	bool OnInputReleasedDecide();
	bool OnInputReleasedCancel();
	bool OnInputPressedUp();
	bool OnInputPressedTouch(const float LocationX, const float LocationY);
	bool OnInputPressedRight();
	bool OnInputPressedLeft();
	bool OnInputPressedDown();
	bool OnInputPressedDecide();
	bool OnInputPressedCancel();
	bool OnInputMoveRight(float Value);
	bool OnInputMoveForward(float Value);
	bool OnInputLookupRate(float Value);
	bool IsModeless();
	bool OnInputReleasedR2();
	bool OnInputReleasedR1();
	bool OnInputReleasedL2();
	bool OnInputReleasedL1();
	bool OnInputPressedR2();
	bool OnInputPressedR1();
	bool OnInputPressedL2();
	bool OnInputPressedL1();
	bool OnInputReleasedL3();
	bool OnInputPressedL3();

	struct FVector2D ClampPosition(const struct FVector2D& InVec) const;
	float ClampScale(float Value) const;
	float GetCompassWaypoint(const struct FVector2D& TargetNormalizedInnerPosition) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_LandmarkableMap_C">();
	}
	static class UWB_LandmarkableMap_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_LandmarkableMap_C>();
	}
};
static_assert(alignof(UWB_LandmarkableMap_C) == 0x000008, "Wrong alignment on UWB_LandmarkableMap_C");
static_assert(sizeof(UWB_LandmarkableMap_C) == 0x000428, "Wrong size on UWB_LandmarkableMap_C");
static_assert(offsetof(UWB_LandmarkableMap_C, UberGraphFrame) == 0x0002C0, "Member 'UWB_LandmarkableMap_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, FocusAnimation) == 0x0002C8, "Member 'UWB_LandmarkableMap_C::FocusAnimation' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, AJBImage_Map) == 0x0002D0, "Member 'UWB_LandmarkableMap_C::AJBImage_Map' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, Border_Inputer) == 0x0002D8, "Member 'UWB_LandmarkableMap_C::Border_Inputer' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, CanvasPanel_Landmarks) == 0x0002E0, "Member 'UWB_LandmarkableMap_C::CanvasPanel_Landmarks' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, ScaleBox_UVExpander_Root) == 0x0002E8, "Member 'UWB_LandmarkableMap_C::ScaleBox_UVExpander_Root' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, WB_LandmarkCautionPair) == 0x0002F0, "Member 'UWB_LandmarkableMap_C::WB_LandmarkCautionPair' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, WB_LandmarkCautionPlayer) == 0x0002F8, "Member 'UWB_LandmarkableMap_C::WB_LandmarkCautionPlayer' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, WB_LandmarkPair) == 0x000300, "Member 'UWB_LandmarkableMap_C::WB_LandmarkPair' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, WB_LandmarkPairMarker) == 0x000308, "Member 'UWB_LandmarkableMap_C::WB_LandmarkPairMarker' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, WB_LandmarkPlayer) == 0x000310, "Member 'UWB_LandmarkableMap_C::WB_LandmarkPlayer' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, WB_LandmarkPlayerMarker) == 0x000318, "Member 'UWB_LandmarkableMap_C::WB_LandmarkPlayerMarker' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, WB_LandmarkText) == 0x000320, "Member 'UWB_LandmarkableMap_C::WB_LandmarkText' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, WB_LandmarkText_C_0) == 0x000328, "Member 'UWB_LandmarkableMap_C::WB_LandmarkText_C_0' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, WB_LandmarkText_C_1) == 0x000330, "Member 'UWB_LandmarkableMap_C::WB_LandmarkText_C_1' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, WB_LandmarkText_C_2) == 0x000338, "Member 'UWB_LandmarkableMap_C::WB_LandmarkText_C_2' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, WB_LandmarkText_C_3) == 0x000340, "Member 'UWB_LandmarkableMap_C::WB_LandmarkText_C_3' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, WB_LandmarkText_C_4) == 0x000348, "Member 'UWB_LandmarkableMap_C::WB_LandmarkText_C_4' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, WB_LandmarkText_C_5) == 0x000350, "Member 'UWB_LandmarkableMap_C::WB_LandmarkText_C_5' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, WB_LandmarkText_C_6) == 0x000358, "Member 'UWB_LandmarkableMap_C::WB_LandmarkText_C_6' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, WB_LandmarkText_C_7) == 0x000360, "Member 'UWB_LandmarkableMap_C::WB_LandmarkText_C_7' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, WB_LandmarkText_C_8) == 0x000368, "Member 'UWB_LandmarkableMap_C::WB_LandmarkText_C_8' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, WB_LandmarkText_C_9) == 0x000370, "Member 'UWB_LandmarkableMap_C::WB_LandmarkText_C_9' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, WB_LandmarkText_C_10) == 0x000378, "Member 'UWB_LandmarkableMap_C::WB_LandmarkText_C_10' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, WB_LandmarkText_C_11) == 0x000380, "Member 'UWB_LandmarkableMap_C::WB_LandmarkText_C_11' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, WB_LandmarkText_C_12) == 0x000388, "Member 'UWB_LandmarkableMap_C::WB_LandmarkText_C_12' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, WB_MapGuideLine) == 0x000390, "Member 'UWB_LandmarkableMap_C::WB_MapGuideLine' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, bIsPlayerFollow) == 0x000398, "Member 'UWB_LandmarkableMap_C::bIsPlayerFollow' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, bIsScalable) == 0x000399, "Member 'UWB_LandmarkableMap_C::bIsScalable' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, bIsScrollable) == 0x00039A, "Member 'UWB_LandmarkableMap_C::bIsScrollable' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, bIsStickableMarker) == 0x00039B, "Member 'UWB_LandmarkableMap_C::bIsStickableMarker' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, bIsVisibleTargetSafeAreaLine) == 0x00039C, "Member 'UWB_LandmarkableMap_C::bIsVisibleTargetSafeAreaLine' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, bPermissionRemoveMarker) == 0x00039D, "Member 'UWB_LandmarkableMap_C::bPermissionRemoveMarker' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, Position) == 0x0003A0, "Member 'UWB_LandmarkableMap_C::Position' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, Scale) == 0x0003A8, "Member 'UWB_LandmarkableMap_C::Scale' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, PositionInterpSpeed) == 0x0003AC, "Member 'UWB_LandmarkableMap_C::PositionInterpSpeed' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, ScaleInterpSpeed) == 0x0003B0, "Member 'UWB_LandmarkableMap_C::ScaleInterpSpeed' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, ScaleMax) == 0x0003B4, "Member 'UWB_LandmarkableMap_C::ScaleMax' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, PositionLimiter) == 0x0003B8, "Member 'UWB_LandmarkableMap_C::PositionLimiter' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, ScaleMin) == 0x0003C0, "Member 'UWB_LandmarkableMap_C::ScaleMin' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, TargetPosition) == 0x0003C4, "Member 'UWB_LandmarkableMap_C::TargetPosition' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, TargetScale) == 0x0003CC, "Member 'UWB_LandmarkableMap_C::TargetScale' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, CachedMapSize) == 0x0003D0, "Member 'UWB_LandmarkableMap_C::CachedMapSize' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, CachedMapDMI) == 0x0003D8, "Member 'UWB_LandmarkableMap_C::CachedMapDMI' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, CachedMapManager) == 0x0003E0, "Member 'UWB_LandmarkableMap_C::CachedMapManager' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, LandmarkWidgets) == 0x0003E8, "Member 'UWB_LandmarkableMap_C::LandmarkWidgets' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, bTouchDisplay) == 0x0003F8, "Member 'UWB_LandmarkableMap_C::bTouchDisplay' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, BanRemoveMarkerTimerHandle) == 0x000400, "Member 'UWB_LandmarkableMap_C::BanRemoveMarkerTimerHandle' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, bDebugHighlightPlayerLog) == 0x000408, "Member 'UWB_LandmarkableMap_C::bDebugHighlightPlayerLog' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, AdvancedSafeAreaAnimationCurve) == 0x000410, "Member 'UWB_LandmarkableMap_C::AdvancedSafeAreaAnimationCurve' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, AdvancedSafeAreaDuration) == 0x000418, "Member 'UWB_LandmarkableMap_C::AdvancedSafeAreaDuration' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkableMap_C, Handle) == 0x000420, "Member 'UWB_LandmarkableMap_C::Handle' has a wrong offset!");

}

