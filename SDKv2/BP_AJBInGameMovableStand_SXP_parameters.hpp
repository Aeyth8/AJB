#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameMovableStand_SXP

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "AJB_structs.hpp"
#include "ST_CustomSkinMaterials_structs.hpp"
#include "E_StencilDigit_structs.hpp"
#include "AkAudio_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnStateChanged__DelegateSignature
// 0x0002 (0x0002 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_OnStateChanged__DelegateSignature final
{
public:
	EMovableStandSXPState                         PrevState;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovableStandSXPState                         NextState;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_OnStateChanged__DelegateSignature) == 0x000001, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_OnStateChanged__DelegateSignature");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_OnStateChanged__DelegateSignature) == 0x000002, "Wrong size on BP_AJBInGameMovableStand_SXP_C_OnStateChanged__DelegateSignature");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_OnStateChanged__DelegateSignature, PrevState) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_OnStateChanged__DelegateSignature::PrevState' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_OnStateChanged__DelegateSignature, NextState) == 0x000001, "Member 'BP_AJBInGameMovableStand_SXP_C_OnStateChanged__DelegateSignature::NextState' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnMaxSpeedChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_OnMaxSpeedChanged__DelegateSignature final
{
public:
	EMovableSXPFlyingState                        FlyingState;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_OnMaxSpeedChanged__DelegateSignature) == 0x000001, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_OnMaxSpeedChanged__DelegateSignature");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_OnMaxSpeedChanged__DelegateSignature) == 0x000001, "Wrong size on BP_AJBInGameMovableStand_SXP_C_OnMaxSpeedChanged__DelegateSignature");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_OnMaxSpeedChanged__DelegateSignature, FlyingState) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_OnMaxSpeedChanged__DelegateSignature::FlyingState' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ExecuteUbergraph_BP_AJBInGameMovableStand_SXP
// 0x0990 (0x0990 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckActiveBehaviorBreakDown_bBreakDown;  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckActiveBehaviorBreakDown_bSpecialBreakDown; // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckActiveBehaviorBreakDown_bBreakDownBoth; // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_CheckActiveBehaviorBreakDown_Factor_Tags; // 0x0020(0x0020)()
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue;     // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_CustomEvent_HitLocation1;                   // 0x0044(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_HitActor3;                      // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bHeadShot1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_CuttingRate1;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bDisableDamage1;                // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bBlockedByAAP1;                 // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_CustomEvent_HitLocation2;                   // 0x0064(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_HitActor4;                      // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bHeadShot2;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_CuttingRate2;                   // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bDisableDamage2;                // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bBlockedByAAP2;                 // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue1;                 // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83[0x1];                                       // 0x0083(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetPoliticDamage_Damage;                  // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0088(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0098(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x00A8(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                K2Node_CustomEvent_HitLocation3;                   // 0x0130(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_HitActor5;                      // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bHeadShot3;                     // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_149[0x3];                                      // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_CuttingRate3;                   // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bDisableDamage3;                // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_CalcHitLocation_Deprecated__HitLocation;  // 0x0154(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalcHitLocation_Deprecated__HitNormal;    // 0x0160(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x016C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16D[0x3];                                      // 0x016D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_NegateVector_ReturnValue;                 // 0x0170(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x017C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17D[0x3];                                      // 0x017D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetPoliticDamage_Damage1;                 // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue2;                 // 0x0184(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CalcAAPInfo_bDamageCutByAAP;              // 0x0185(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CalcAAPInfo_bDamageBlockByAAP;            // 0x0186(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_187[0x1];                                      // 0x0187(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetPoliticDamage_Damage2;                 // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x018C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x018D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_18E[0x2];                                      // 0x018E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0198(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01A4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01B0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01BC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01F0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01FC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBI_AJBInterface_C>    K2Node_DynamicCast_AsBI_AJBInterface;              // 0x0208(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_219[0x7];                                      // 0x0219(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBInterface_C>    K2Node_DynamicCast_AsBI_AJBInterface1;             // 0x0220(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_231[0x7];                                      // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_BlockingRushOperatorInterface_C> K2Node_DynamicCast_AsBI_Blocking_Rush_Operator_Interface; // 0x0238(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OwnHitParam_bCharacter;                   // 0x0249(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OwnHitParam_bLeftAP;                      // 0x024A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24B[0x5];                                      // 0x024B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_OwnHitParam_ParticleTagBlockedByAAP;      // 0x0250(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_OwnHitParam_SETagBlockedByAAP;            // 0x0258(0x0008)(NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBI_AJBInterface_C>    K2Node_DynamicCast_AsBI_AJBInterface2;             // 0x0260(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess4;                      // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_271[0x7];                                      // 0x0271(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBInterface_C>    K2Node_DynamicCast_AsBI_AJBInterface3;             // 0x0278(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess5;                      // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_289[0x7];                                      // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_BlockingRushOperatorInterface_C> K2Node_DynamicCast_AsBI_Blocking_Rush_Operator_Interface1; // 0x0290(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess6;                      // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBInterface_C>    K2Node_DynamicCast_AsBI_AJBInterface4;             // 0x02A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess7;                      // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckBlockingComponent_bBlockingComponent; // 0x02B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IfCheckDamageOverlap_ReturnValue;         // 0x02BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BB[0x1];                                      // 0x02BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x02BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_GameplayTag_ReturnValue;       // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckTargetSelf_bTarget;                  // 0x02D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckDisableDamage_bDisableDamage;        // 0x02D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x02D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckNoDamage_bNoDamage;                  // 0x02D3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue;       // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable1;                              // 0x02D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CalcHeadShot_bHeadShot;                   // 0x02DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue1;    // 0x02DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x02DE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2DF[0x1];                                      // 0x02DF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x02E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckBlockingValid_bBlockingValid;        // 0x02E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue3;                 // 0x02E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E6[0x2];                                      // 0x02E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_BlockedActor;                   // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_HitLocation4;                   // 0x02F0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bReflect;                       // 0x02FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bSeparateStandAttack;           // 0x02FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FE[0x2];                                      // 0x02FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_BlockingRushOperatorInterface_C> K2Node_DynamicCast_AsBI_Blocking_Rush_Operator_Interface2; // 0x0300(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess8;                      // 0x0310(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_311[0x7];                                      // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_BlockedActor1;                  // 0x0318(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_HitLocation5;                   // 0x0320(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bReflect1;                      // 0x032C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bSeparateStandAttack1;          // 0x032D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue2;    // 0x032E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_GameplayTag_ReturnValue1;      // 0x032F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_GetOwner_ReturnValue2;                    // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character1;     // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess9;                      // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_341[0x7];                                      // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_BlockedActor;                         // 0x0348(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_OtherActor;                           // 0x0350(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_HitLocation;                          // 0x0358(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_HitNormal;                            // 0x0364(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_CuttingProjectile___;                 // 0x0370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_CuttingOther___;                      // 0x0374(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInvincible;                          // 0x0378(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bReflectProjectile;                   // 0x0379(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_37A[0x2];                                      // 0x037A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               K2Node_Event_ReflectRotation;                      // 0x037C(0x000C)(IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bAvoidSkill;                          // 0x0388(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bSeparateStandAttack;                 // 0x0389(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_38A[0x6];                                      // 0x038A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Event_ReflectSkillTag;                      // 0x0390(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0398(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x039C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39D[0x3];                                      // 0x039D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue3;    // 0x03A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x03A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A6[0x2];                                      // 0x03A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_DamagedActor;                         // 0x03A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_DamageForHPAP;                        // 0x03B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_DamageForAAP;                         // 0x03B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_CutDamage;                            // 0x03B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BC[0x4];                                      // 0x03BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Event_DamageType;                           // 0x03C0(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_SerialNumber;                         // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDamagePriority                               K2Node_Event_DamagePriority;                       // 0x03CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CD[0x3];                                      // 0x03CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_AttackDistance;                       // 0x03D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D4[0x4];                                      // 0x03D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_DamageCauser;                         // 0x03D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_WithSeparatedStandAttack;             // 0x03E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_HitEnemysSeparatedStand;              // 0x03E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bPenetrateAP;                         // 0x03E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bNotUseCollision;                     // 0x03E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAJBGameInstance_bSuccess;              // 0x03E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E5[0x3];                                      // 0x03E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBGameInstance_C*                  CallFunc_GetAJBGameInstance_AJB_Game_Instance;     // 0x03E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x03F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayingReplay_ReturnValue;              // 0x03F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F5[0x3];                                      // 0x03F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x03F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FC[0x4];                                      // 0x03FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue3;                    // 0x0400(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character2;     // 0x0408(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess10;                     // 0x0410(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_411[0x7];                                      // 0x0411(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue4;                    // 0x0418(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckActiveBehaviorBreakDown_bBreakDown1; // 0x0420(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckActiveBehaviorBreakDown_bSpecialBreakDown1; // 0x0421(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckActiveBehaviorBreakDown_bBreakDownBoth1; // 0x0422(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_423[0x5];                                      // 0x0423(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_CheckActiveBehaviorBreakDown_Factor_Tags1; // 0x0428(0x0020)()
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character3;     // 0x0448(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess11;                     // 0x0450(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_451[0x7];                                      // 0x0451(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue5;                    // 0x0458(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0460(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_461[0x7];                                      // 0x0461(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character4;     // 0x0468(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess12;                     // 0x0470(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0471(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_GameplayTag_ReturnValue2;      // 0x0472(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0473(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_474[0x4];                                      // 0x0474(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue6;                    // 0x0478(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue7;                    // 0x0480(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character5;     // 0x0488(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess13;                     // 0x0490(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_491[0x7];                                      // 0x0491(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character6;     // 0x0498(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess14;                     // 0x04A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue4;    // 0x04A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue5;    // 0x04A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue6;    // 0x04A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A4[0x4];                                      // 0x04A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue8;                    // 0x04A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x04B0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BC[0x4];                                      // 0x04BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character7;     // 0x04C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess15;                     // 0x04C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C9[0x3];                                      // 0x04C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x04CC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x04D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue7;    // 0x04DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4DD[0x3];                                      // 0x04DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x04E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue4;                 // 0x04E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E5[0x3];                                      // 0x04E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x04E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x04EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue1;     // 0x04ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x04EE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EMovableStandSXPState                         K2Node_CustomEvent_PrevState9;                     // 0x04EF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovableStandSXPState                         K2Node_CustomEvent_NextState6;                     // 0x04F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F1[0x3];                                      // 0x04F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x04F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovableStandSXPState                         K2Node_CustomEvent_PrevState8;                     // 0x04F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovableStandSXPState                         K2Node_CustomEvent_NextState5;                     // 0x04F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovableStandSXPState                         K2Node_CustomEvent_PrevState7;                     // 0x04FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovableStandSXPState                         K2Node_CustomEvent_NextState4;                     // 0x04FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum1_CmpSuccess;                     // 0x04FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EMovableStandSXPState                         K2Node_CustomEvent_PrevState6;                     // 0x04FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovableStandSXPState                         K2Node_CustomEvent_NextState3;                     // 0x04FE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue1;           // 0x04FF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue1;             // 0x0500(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovableStandSXPState                         K2Node_CustomEvent_NextState2;                     // 0x0501(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x0502(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EMovableStandSXPState                         K2Node_CustomEvent_PrevState5;                     // 0x0503(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovableStandSXPState                         K2Node_CustomEvent_NextState1;                     // 0x0504(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovableStandSXPState                         K2Node_CustomEvent_PrevState4;                     // 0x0505(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovableStandSXPState                         K2Node_CustomEvent_NextState;                      // 0x0506(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_GameplayTag_ReturnValue3;      // 0x0507(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum2_CmpSuccess;                     // 0x0508(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_509[0x7];                                      // 0x0509(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue9;                    // 0x0510(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character8;     // 0x0518(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess16;                     // 0x0520(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_GameplayTag_ReturnValue4;      // 0x0521(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPair_bPairCharacter;                    // 0x0522(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_523[0xD];                                      // 0x0523(0x000D)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0530(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue8;    // 0x0560(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_561[0x7];                                      // 0x0561(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0568(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBPistolsStrikeAffecter_C*         CallFunc_FinishSpawningActor_ReturnValue;          // 0x0570(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue;          // 0x0578(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0580(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue2;     // 0x0584(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_585[0x3];                                      // 0x0585(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0588(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_GameplayTag_ReturnValue5;      // 0x058C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_58D[0x3];                                      // 0x058D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_PlayAnimMontage_ReturnValue;              // 0x0590(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum3_CmpSuccess;                     // 0x0594(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_595[0x3];                                      // 0x0595(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_MakeLiteralGameplayTag_ReturnValue;       // 0x0598(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue1;         // 0x05A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A1[0x7];                                      // 0x05A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           CallFunc_RequestWwiseEventOnLocal_AkComponent;     // 0x05A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGameplayTagValid_ReturnValue;           // 0x05B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x05B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5B2[0x2];                                      // 0x05B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x05B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x05B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue9;    // 0x05BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsGameplayTagValid_ReturnValue1;          // 0x05BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue2;           // 0x05BE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5BF[0x1];                                      // 0x05BF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x05C0(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	int32                                         Temp_int_Array_Index_Variable1;                    // 0x05D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue1;        // 0x05D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable1;                   // 0x05D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable1;                               // 0x05DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5DD[0x3];                                      // 0x05DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue2;                  // 0x05E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E4[0x4];                                      // 0x05E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue10;                   // 0x05E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue1;         // 0x05F0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FC[0x4];                                      // 0x05FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           CallFunc_RequestGion_AkComponent__LocalOnly_;      // 0x0600(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RequestGion_bFullfilDisplayCond_LocalOnly_; // 0x0608(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_609[0x3];                                      // 0x0609(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PostAssociatedAkEvent_ReturnValue;        // 0x060C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0610(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_611[0x7];                                      // 0x0611(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue11;                   // 0x0618(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character9;     // 0x0620(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess17;                     // 0x0628(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue3;           // 0x0629(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62A[0x2];                                      // 0x062A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_Time;                                 // 0x062C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bEnable1;                             // 0x0630(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bOperatorIsEmpty;                     // 0x0631(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0632(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_633[0x5];                                      // 0x0633(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue12;                   // 0x0638(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character10;    // 0x0640(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess18;                     // 0x0648(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckActiveBehaviorBreakDown_bBreakDown2; // 0x0649(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckActiveBehaviorBreakDown_bSpecialBreakDown2; // 0x064A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckActiveBehaviorBreakDown_bBreakDownBoth2; // 0x064B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64C[0x4];                                      // 0x064C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_CheckActiveBehaviorBreakDown_Factor_Tags2; // 0x0650(0x0020)()
	bool                                          CallFunc_IsValid_ReturnValue3;                     // 0x0670(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue5;                 // 0x0671(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_672[0x2];                                      // 0x0672(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable2;                              // 0x0674(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue4;           // 0x0678(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_679[0x3];                                      // 0x0679(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable3;                              // 0x067C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<ECollisionChannel>                     K2Node_MakeArray_Array;                            // 0x0680(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0690(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select1_Default;                            // 0x0694(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_GameplayTag_ReturnValue6;      // 0x0698(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_699[0x3];                                      // 0x0699(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x069C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovableSXPFlyingState                        K2Node_CustomEvent_NewState2;                      // 0x06A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A1[0x3];                                      // 0x06A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue1;              // 0x06A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovableSXPFlyingState                        K2Node_CustomEvent_NewState1;                      // 0x06A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovableSXPFlyingState                        K2Node_CustomEvent_NewState;                       // 0x06A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue10;   // 0x06AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6AB[0x1];                                      // 0x06AB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable2;                    // 0x06AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionChannel                             CallFunc_Array_Get_Item;                           // 0x06B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x06B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_GameplayTag_ReturnValue7;      // 0x06B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B3[0x5];                                      // 0x06B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_CustomSkinMaterials                CallFunc_Array_Get_Item1;                          // 0x06B8(0x0010)(HasGetValueTypeHash)
	class UMaterialInterface*                     CallFunc_Array_Get_Item2;                          // 0x06C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x06D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x06D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D5[0x3];                                      // 0x06D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_CustomSkinMaterials                CallFunc_Array_Get_Item3;                          // 0x06D8(0x0010)(HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue2;        // 0x06E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6EC[0x4];                                      // 0x06EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     CallFunc_Array_Get_Item4;                          // 0x06F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue2;                // 0x06F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue1;                 // 0x06FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue11;   // 0x06FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6FE[0x2];                                      // 0x06FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue3;         // 0x0700(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue6;                 // 0x0704(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_705[0x3];                                      // 0x0705(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue2;              // 0x0708(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable2;                   // 0x070C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_Location1;                      // 0x0710(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71C[0x4];                                      // 0x071C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_HitActor2;                      // 0x0720(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bHeadShot;                      // 0x0728(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_729[0x3];                                      // 0x0729(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_CuttingRate;                    // 0x072C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bDisableDamage;                 // 0x0730(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bBlockedByAAP;                  // 0x0731(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue7;                 // 0x0732(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue1;      // 0x0733(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue8;                 // 0x0734(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue2;      // 0x0735(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue9;                 // 0x0736(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_737[0x1];                                      // 0x0737(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue1;         // 0x0738(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBI_AJBInterface_C>    K2Node_DynamicCast_AsBI_AJBInterface5;             // 0x0740(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess19;                     // 0x0750(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_751[0x7];                                      // 0x0751(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBInterface_C>    K2Node_DynamicCast_AsBI_AJBInterface6;             // 0x0758(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess20;                     // 0x0768(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OwnHitParam_bCharacter1;                  // 0x0769(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OwnHitParam_bLeftAP1;                     // 0x076A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_76B[0x5];                                      // 0x076B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_OwnHitParam_ParticleTagBlockedByAAP1;     // 0x0770(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_OwnHitParam_SETagBlockedByAAP1;           // 0x0778(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OwnHitParam_bCharacter2;                  // 0x0780(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OwnHitParam_bLeftAP2;                     // 0x0781(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_782[0x6];                                      // 0x0782(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_OwnHitParam_ParticleTagBlockedByAAP2;     // 0x0788(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_OwnHitParam_SETagBlockedByAAP2;           // 0x0790(0x0008)(NoDestructor, HasGetValueTypeHash)
	class AAJBInGameCharacterBase*                K2Node_DynamicCast_AsAJBIn_Game_Character_Base;    // 0x0798(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess21;                     // 0x07A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue2;                 // 0x07A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerController_ReturnValue;           // 0x07A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue12;   // 0x07A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue3;                  // 0x07A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           CallFunc_RequestWwiseEventAttachedOnLocal_AkComponent; // 0x07A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerController_ReturnValue1;          // 0x07B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue13;   // 0x07B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B2[0x2];                                      // 0x07B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable4;                              // 0x07B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_GameplayTag_ReturnValue8;      // 0x07B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B9[0x7];                                      // 0x07B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameParticleEffect_C*          CallFunc_RequestParticleEffectOnLocal_ParticleEffect; // 0x07C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable2;                               // 0x07C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_GameplayTag_ReturnValue9;      // 0x07C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionResponse                            Temp_byte_Variable;                                // 0x07CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionResponse                            Temp_byte_Variable1;                               // 0x07CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue2;             // 0x07CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionResponse                            K2Node_Select2_Default;                            // 0x07CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue2;         // 0x07CE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAJBGameInstance_bSuccess1;             // 0x07CF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UBP_AJBGameInstance_C*                  CallFunc_GetAJBGameInstance_AJB_Game_Instance1;    // 0x07D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayingReplay_ReturnValue1;             // 0x07D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable3;                               // 0x07D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7DA[0x6];                                      // 0x07DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AAJBInGameCharacter* TargetCharacter, ECharacterActiveBehavior OldBehavior, ECharacterActiveBehavior NextBehavior, bool bSpecialBreakDown)> K2Node_CreateDelegate_OutputDelegate;              // 0x07E0(0x0010)(ZeroConstructor, NoDestructor)
	float                                         K2Node_Select3_Default;                            // 0x07F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bEnable;                              // 0x07F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue4;                     // 0x07F5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue3;         // 0x07F6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F7[0x1];                                      // 0x07F7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x07F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue5;                     // 0x0800(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EMovableStandSXPState                         K2Node_CustomEvent_PrevState3;                     // 0x0801(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue6;                     // 0x0802(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue4;         // 0x0803(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue1;           // 0x0804(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EMovableStandSXPState                         K2Node_CustomEvent_PrevState2;                     // 0x0805(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovableStandSXPState                         K2Node_CustomEvent_PrevState1;                     // 0x0806(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovableStandSXPState                         K2Node_CustomEvent_PrevState;                      // 0x0807(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue5;         // 0x0808(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_809[0x7];                                      // 0x0809(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayMontageCallbackProxy*              CallFunc_CreateProxyObjectForPlayMontage_ReturnValue; // 0x0810(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue7;                     // 0x0818(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue8;                     // 0x0819(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81A[0x6];                                      // 0x081A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x0820(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName;                     // 0x0828(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum4_CmpSuccess;                     // 0x0830(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_831[0x7];                                      // 0x0831(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate1;             // 0x0838(0x0010)(ZeroConstructor, NoDestructor)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0848(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName1;                    // 0x0850(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGamePlayerController_C*        K2Node_DynamicCast_AsBP_AJBIn_Game_Player_Controller; // 0x0858(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess22;                     // 0x0860(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLocalController_ReturnValue;            // 0x0861(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_862[0x6];                                      // 0x0862(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate2;             // 0x0868(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_NotifyName2;                    // 0x0878(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue3;             // 0x0880(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_881[0x7];                                      // 0x0881(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate3;             // 0x0888(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue6;         // 0x0898(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_899[0x7];                                      // 0x0899(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_CustomEvent_NotifyName3;                    // 0x08A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate4;             // 0x08A8(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue4;             // 0x08B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B9[0x7];                                      // 0x08B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_CustomEvent_NotifyName4;                    // 0x08C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue7;         // 0x08C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue14;   // 0x08C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8CA[0x6];                                      // 0x08CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate5;             // 0x08D0(0x0010)(ZeroConstructor, NoDestructor)
	class AActor*                                 K2Node_CustomEvent_HitActor1;                      // 0x08E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_HItLocation;                    // 0x08E8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F4[0x4];                                      // 0x08F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_HitActor;                       // 0x08F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_Location;                       // 0x0900(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_90C[0x4];                                      // 0x090C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBInterface_C>    K2Node_DynamicCast_AsBI_AJBInterface7;             // 0x0910(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess23;                     // 0x0920(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_921[0x7];                                      // 0x0921(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue13;                   // 0x0928(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBInGameCharacter*                    K2Node_CustomEvent_TargetCharacter;                // 0x0930(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterActiveBehavior                      K2Node_CustomEvent_OldBehavior;                    // 0x0938(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterActiveBehavior                      K2Node_CustomEvent_NextBehavior;                   // 0x0939(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bSpecialBreakDown;              // 0x093A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue8;         // 0x093B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue2;           // 0x093C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue3;           // 0x093D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue9;         // 0x093E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x093F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x0940(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue3;                  // 0x0941(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue9;                     // 0x0942(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_943[0x5];                                      // 0x0943(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate6;             // 0x0948(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue10;                    // 0x0958(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerController_ReturnValue2;          // 0x0959(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue5;             // 0x095A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionResponse                            Temp_byte_Variable2;                               // 0x095B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue10;        // 0x095C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_95D[0x3];                                      // 0x095D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue2;         // 0x0960(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionResponse                            Temp_byte_Variable3;                               // 0x096C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable4;                               // 0x096D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_96E[0x2];                                      // 0x096E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0970(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumMaterials_ReturnValue;              // 0x0978(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionResponse                            K2Node_Select4_Default;                            // 0x097C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_97D[0x3];                                      // 0x097D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0980(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue1;            // 0x0984(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_985[0x3];                                      // 0x0985(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0988(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP) == 0x000010, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP) == 0x000990, "Wrong size on BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, EntryPoint) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000010, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_CheckActiveBehaviorBreakDown_bBreakDown) == 0x000019, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_CheckActiveBehaviorBreakDown_bBreakDown' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_CheckActiveBehaviorBreakDown_bSpecialBreakDown) == 0x00001A, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_CheckActiveBehaviorBreakDown_bSpecialBreakDown' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_CheckActiveBehaviorBreakDown_bBreakDownBoth) == 0x00001B, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_CheckActiveBehaviorBreakDown_bBreakDownBoth' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_CheckActiveBehaviorBreakDown_Factor_Tags) == 0x000020, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_CheckActiveBehaviorBreakDown_Factor_Tags' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Not_PreBool_ReturnValue) == 0x000040, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_HasLocalSharedController_ReturnValue) == 0x000041, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_HasLocalSharedController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_HitLocation1) == 0x000044, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_HitLocation1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_HitActor3) == 0x000050, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_HitActor3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_bHeadShot1) == 0x000058, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_bHeadShot1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_CuttingRate1) == 0x00005C, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_CuttingRate1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_bDisableDamage1) == 0x000060, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_bDisableDamage1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_bBlockedByAAP1) == 0x000061, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_bBlockedByAAP1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_HitLocation2) == 0x000064, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_HitLocation2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_HitActor4) == 0x000070, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_HitActor4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_bHeadShot2) == 0x000078, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_bHeadShot2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_CuttingRate2) == 0x00007C, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_CuttingRate2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_bDisableDamage2) == 0x000080, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_bDisableDamage2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_bBlockedByAAP2) == 0x000081, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_bBlockedByAAP2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Not_PreBool_ReturnValue1) == 0x000082, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Not_PreBool_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_GetPoliticDamage_Damage) == 0x000084, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_GetPoliticDamage_Damage' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000088, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_ComponentBoundEvent_OtherActor) == 0x000090, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_ComponentBoundEvent_OtherComp) == 0x000098, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x0000A0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_ComponentBoundEvent_bFromSweep) == 0x0000A4, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_ComponentBoundEvent_SweepResult) == 0x0000A8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_HitLocation3) == 0x000130, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_HitLocation3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_HitActor5) == 0x000140, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_HitActor5' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_bHeadShot3) == 0x000148, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_bHeadShot3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_CuttingRate3) == 0x00014C, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_CuttingRate3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_bDisableDamage3) == 0x000150, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_bDisableDamage3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_CalcHitLocation_Deprecated__HitLocation) == 0x000154, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_CalcHitLocation_Deprecated__HitLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_CalcHitLocation_Deprecated__HitNormal) == 0x000160, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_CalcHitLocation_Deprecated__HitNormal' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x00016C, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_NegateVector_ReturnValue) == 0x000170, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_NegateVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_BooleanOR_ReturnValue) == 0x00017C, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_GetPoliticDamage_Damage1) == 0x000180, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_GetPoliticDamage_Damage1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Not_PreBool_ReturnValue2) == 0x000184, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Not_PreBool_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_CalcAAPInfo_bDamageCutByAAP) == 0x000185, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_CalcAAPInfo_bDamageCutByAAP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_CalcAAPInfo_bDamageBlockByAAP) == 0x000186, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_CalcAAPInfo_bDamageBlockByAAP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_GetPoliticDamage_Damage2) == 0x000188, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_GetPoliticDamage_Damage2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_BreakHitResult_bBlockingHit) == 0x00018C, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_BreakHitResult_bInitialOverlap) == 0x00018D, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_BreakHitResult_Time) == 0x000190, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_BreakHitResult_Distance) == 0x000194, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_BreakHitResult_Location) == 0x000198, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_BreakHitResult_ImpactPoint) == 0x0001A4, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_BreakHitResult_Normal) == 0x0001B0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_BreakHitResult_ImpactNormal) == 0x0001BC, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_BreakHitResult_PhysMat) == 0x0001C8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_BreakHitResult_HitActor) == 0x0001D0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_BreakHitResult_HitComponent) == 0x0001D8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_BreakHitResult_HitBoneName) == 0x0001E0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_BreakHitResult_HitItem) == 0x0001E8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_BreakHitResult_FaceIndex) == 0x0001EC, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_BreakHitResult_TraceStart) == 0x0001F0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_BreakHitResult_TraceEnd) == 0x0001FC, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_AsBI_AJBInterface) == 0x000208, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_AsBI_AJBInterface' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_bSuccess1) == 0x000218, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_AsBI_AJBInterface1) == 0x000220, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_AsBI_AJBInterface1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_bSuccess2) == 0x000230, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_AsBI_Blocking_Rush_Operator_Interface) == 0x000238, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_AsBI_Blocking_Rush_Operator_Interface' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_bSuccess3) == 0x000248, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_OwnHitParam_bCharacter) == 0x000249, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_OwnHitParam_bCharacter' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_OwnHitParam_bLeftAP) == 0x00024A, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_OwnHitParam_bLeftAP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_OwnHitParam_ParticleTagBlockedByAAP) == 0x000250, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_OwnHitParam_ParticleTagBlockedByAAP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_OwnHitParam_SETagBlockedByAAP) == 0x000258, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_OwnHitParam_SETagBlockedByAAP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_AsBI_AJBInterface2) == 0x000260, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_AsBI_AJBInterface2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_bSuccess4) == 0x000270, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_bSuccess4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_AsBI_AJBInterface3) == 0x000278, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_AsBI_AJBInterface3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_bSuccess5) == 0x000288, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_bSuccess5' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_AsBI_Blocking_Rush_Operator_Interface1) == 0x000290, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_AsBI_Blocking_Rush_Operator_Interface1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_bSuccess6) == 0x0002A0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_bSuccess6' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_AsBI_AJBInterface4) == 0x0002A8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_AsBI_AJBInterface4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_bSuccess7) == 0x0002B8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_bSuccess7' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_CheckBlockingComponent_bBlockingComponent) == 0x0002B9, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_CheckBlockingComponent_bBlockingComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_IfCheckDamageOverlap_ReturnValue) == 0x0002BA, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_IfCheckDamageOverlap_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, Temp_float_Variable) == 0x0002BC, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_EqualEqual_GameplayTag_ReturnValue) == 0x0002C0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_EqualEqual_GameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_GetOwner_ReturnValue1) == 0x0002C8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_CheckTargetSelf_bTarget) == 0x0002D0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_CheckTargetSelf_bTarget' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_CheckDisableDamage_bDisableDamage) == 0x0002D1, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_CheckDisableDamage_bDisableDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_BooleanAND_ReturnValue) == 0x0002D2, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_CheckNoDamage_bNoDamage) == 0x0002D3, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_CheckNoDamage_bNoDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_GetScaledCapsuleRadius_ReturnValue) == 0x0002D4, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_GetScaledCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, Temp_float_Variable1) == 0x0002D8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::Temp_float_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_CalcHeadShot_bHeadShot) == 0x0002DC, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_CalcHeadShot_bHeadShot' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_HasLocalSharedController_ReturnValue1) == 0x0002DD, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_HasLocalSharedController_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, Temp_bool_Variable) == 0x0002DE, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_Select_Default) == 0x0002E0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_CheckBlockingValid_bBlockingValid) == 0x0002E4, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_CheckBlockingValid_bBlockingValid' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Not_PreBool_ReturnValue3) == 0x0002E5, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Not_PreBool_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_BlockedActor) == 0x0002E8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_BlockedActor' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_HitLocation4) == 0x0002F0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_HitLocation4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_bReflect) == 0x0002FC, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_bReflect' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_bSeparateStandAttack) == 0x0002FD, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_bSeparateStandAttack' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_AsBI_Blocking_Rush_Operator_Interface2) == 0x000300, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_AsBI_Blocking_Rush_Operator_Interface2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_bSuccess8) == 0x000310, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_bSuccess8' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_BlockedActor1) == 0x000318, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_BlockedActor1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_HitLocation5) == 0x000320, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_HitLocation5' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_bReflect1) == 0x00032C, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_bReflect1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_bSeparateStandAttack1) == 0x00032D, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_bSeparateStandAttack1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_HasLocalSharedController_ReturnValue2) == 0x00032E, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_HasLocalSharedController_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_EqualEqual_GameplayTag_ReturnValue1) == 0x00032F, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_EqualEqual_GameplayTag_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_GetOwner_ReturnValue2) == 0x000330, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_GetOwner_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_AsBP_AJBIn_Game_Character1) == 0x000338, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_AsBP_AJBIn_Game_Character1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_bSuccess9) == 0x000340, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_bSuccess9' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_Event_BlockedActor) == 0x000348, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_Event_BlockedActor' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_Event_OtherActor) == 0x000350, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_Event_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_Event_HitLocation) == 0x000358, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_Event_HitLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_Event_HitNormal) == 0x000364, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_Event_HitNormal' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_Event_CuttingProjectile___) == 0x000370, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_Event_CuttingProjectile___' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_Event_CuttingOther___) == 0x000374, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_Event_CuttingOther___' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_Event_bInvincible) == 0x000378, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_Event_bInvincible' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_Event_bReflectProjectile) == 0x000379, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_Event_bReflectProjectile' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_Event_ReflectRotation) == 0x00037C, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_Event_ReflectRotation' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_Event_bAvoidSkill) == 0x000388, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_Event_bAvoidSkill' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_Event_bSeparateStandAttack) == 0x000389, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_Event_bSeparateStandAttack' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_Event_ReflectSkillTag) == 0x000390, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_Event_ReflectSkillTag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000398, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x00039C, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0003A0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_HasLocalSharedController_ReturnValue3) == 0x0003A4, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_HasLocalSharedController_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0003A5, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_Event_DamagedActor) == 0x0003A8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_Event_DamagedActor' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_Event_DamageForHPAP) == 0x0003B0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_Event_DamageForHPAP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_Event_DamageForAAP) == 0x0003B4, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_Event_DamageForAAP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_Event_CutDamage) == 0x0003B8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_Event_CutDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_Event_DamageType) == 0x0003C0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_Event_DamageType' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_Event_SerialNumber) == 0x0003C8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_Event_SerialNumber' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_Event_DamagePriority) == 0x0003CC, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_Event_DamagePriority' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_Event_AttackDistance) == 0x0003D0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_Event_AttackDistance' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_Event_DamageCauser) == 0x0003D8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_Event_DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_Event_WithSeparatedStandAttack) == 0x0003E0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_Event_WithSeparatedStandAttack' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_Event_HitEnemysSeparatedStand) == 0x0003E1, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_Event_HitEnemysSeparatedStand' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_Event_bPenetrateAP) == 0x0003E2, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_Event_bPenetrateAP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_Event_bNotUseCollision) == 0x0003E3, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_Event_bNotUseCollision' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_GetAJBGameInstance_bSuccess) == 0x0003E4, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_GetAJBGameInstance_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_GetAJBGameInstance_AJB_Game_Instance) == 0x0003E8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_GetAJBGameInstance_AJB_Game_Instance' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, Temp_int_Variable) == 0x0003F0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_IsPlayingReplay_ReturnValue) == 0x0003F4, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_IsPlayingReplay_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Add_IntInt_ReturnValue) == 0x0003F8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_GetOwner_ReturnValue3) == 0x000400, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_GetOwner_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_AsBP_AJBIn_Game_Character2) == 0x000408, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_AsBP_AJBIn_Game_Character2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_bSuccess10) == 0x000410, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_bSuccess10' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_GetOwner_ReturnValue4) == 0x000418, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_GetOwner_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_CheckActiveBehaviorBreakDown_bBreakDown1) == 0x000420, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_CheckActiveBehaviorBreakDown_bBreakDown1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_CheckActiveBehaviorBreakDown_bSpecialBreakDown1) == 0x000421, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_CheckActiveBehaviorBreakDown_bSpecialBreakDown1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_CheckActiveBehaviorBreakDown_bBreakDownBoth1) == 0x000422, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_CheckActiveBehaviorBreakDown_bBreakDownBoth1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_CheckActiveBehaviorBreakDown_Factor_Tags1) == 0x000428, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_CheckActiveBehaviorBreakDown_Factor_Tags1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_AsBP_AJBIn_Game_Character3) == 0x000448, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_AsBP_AJBIn_Game_Character3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_bSuccess11) == 0x000450, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_bSuccess11' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_GetOwner_ReturnValue5) == 0x000458, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_GetOwner_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_MakeLiteralByte_ReturnValue) == 0x000460, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_AsBP_AJBIn_Game_Character4) == 0x000468, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_AsBP_AJBIn_Game_Character4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_bSuccess12) == 0x000470, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_bSuccess12' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000471, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_EqualEqual_GameplayTag_ReturnValue2) == 0x000472, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_EqualEqual_GameplayTag_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_IsDedicatedServer_ReturnValue) == 0x000473, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_GetOwner_ReturnValue6) == 0x000478, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_GetOwner_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_GetOwner_ReturnValue7) == 0x000480, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_GetOwner_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_AsBP_AJBIn_Game_Character5) == 0x000488, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_AsBP_AJBIn_Game_Character5' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_bSuccess13) == 0x000490, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_bSuccess13' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_AsBP_AJBIn_Game_Character6) == 0x000498, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_AsBP_AJBIn_Game_Character6' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_bSuccess14) == 0x0004A0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_bSuccess14' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_HasLocalSharedController_ReturnValue4) == 0x0004A1, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_HasLocalSharedController_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_HasLocalSharedController_ReturnValue5) == 0x0004A2, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_HasLocalSharedController_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_HasLocalSharedController_ReturnValue6) == 0x0004A3, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_HasLocalSharedController_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_GetOwner_ReturnValue8) == 0x0004A8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_GetOwner_ReturnValue8' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0004B0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_AsBP_AJBIn_Game_Character7) == 0x0004C0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_AsBP_AJBIn_Game_Character7' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_bSuccess15) == 0x0004C8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_bSuccess15' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0004CC, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_VSize_ReturnValue) == 0x0004D8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_HasLocalSharedController_ReturnValue7) == 0x0004DC, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_HasLocalSharedController_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x0004E0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Not_PreBool_ReturnValue4) == 0x0004E4, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Not_PreBool_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_Event_DeltaSeconds) == 0x0004E8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0004EC, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_GreaterEqual_FloatFloat_ReturnValue1) == 0x0004ED, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_GreaterEqual_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_SwitchEnum_CmpSuccess) == 0x0004EE, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_PrevState9) == 0x0004EF, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_PrevState9' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_NextState6) == 0x0004F0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_NextState6' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x0004F4, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_PrevState8) == 0x0004F8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_PrevState8' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_NextState5) == 0x0004F9, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_NextState5' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_PrevState7) == 0x0004FA, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_PrevState7' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_NextState4) == 0x0004FB, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_NextState4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_SwitchEnum1_CmpSuccess) == 0x0004FC, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_SwitchEnum1_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_PrevState6) == 0x0004FD, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_PrevState6' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_NextState3) == 0x0004FE, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_NextState3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_IsDedicatedServer_ReturnValue1) == 0x0004FF, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_IsDedicatedServer_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_MakeLiteralByte_ReturnValue1) == 0x000500, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_MakeLiteralByte_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_NextState2) == 0x000501, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_NextState2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_IsServer_ReturnValue) == 0x000502, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_IsServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_PrevState5) == 0x000503, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_PrevState5' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_NextState1) == 0x000504, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_NextState1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_PrevState4) == 0x000505, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_PrevState4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_NextState) == 0x000506, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_NextState' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_EqualEqual_GameplayTag_ReturnValue3) == 0x000507, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_EqualEqual_GameplayTag_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_SwitchEnum2_CmpSuccess) == 0x000508, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_SwitchEnum2_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_GetOwner_ReturnValue9) == 0x000510, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_GetOwner_ReturnValue9' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_AsBP_AJBIn_Game_Character8) == 0x000518, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_AsBP_AJBIn_Game_Character8' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_bSuccess16) == 0x000520, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_bSuccess16' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_EqualEqual_GameplayTag_ReturnValue4) == 0x000521, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_EqualEqual_GameplayTag_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_IsPair_bPairCharacter) == 0x000522, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_IsPair_bPairCharacter' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_GetTransform_ReturnValue) == 0x000530, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_HasLocalSharedController_ReturnValue8) == 0x000560, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_HasLocalSharedController_ReturnValue8' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000568, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_FinishSpawningActor_ReturnValue) == 0x000570, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_K2_GetRootComponent_ReturnValue) == 0x000578, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_K2_GetRootComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Add_FloatFloat_ReturnValue) == 0x000580, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_GreaterEqual_FloatFloat_ReturnValue2) == 0x000584, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_GreaterEqual_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, Temp_int_Array_Index_Variable) == 0x000588, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_EqualEqual_GameplayTag_ReturnValue5) == 0x00058C, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_EqualEqual_GameplayTag_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_PlayAnimMontage_ReturnValue) == 0x000590, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_PlayAnimMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_SwitchEnum3_CmpSuccess) == 0x000594, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_SwitchEnum3_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_MakeLiteralGameplayTag_ReturnValue) == 0x000598, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_MakeLiteralGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_EqualEqual_ByteByte_ReturnValue1) == 0x0005A0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_EqualEqual_ByteByte_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_RequestWwiseEventOnLocal_AkComponent) == 0x0005A8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_RequestWwiseEventOnLocal_AkComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_IsGameplayTagValid_ReturnValue) == 0x0005B0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_IsGameplayTagValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_IsValid_ReturnValue) == 0x0005B1, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, Temp_int_Loop_Counter_Variable) == 0x0005B4, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Add_IntInt_ReturnValue1) == 0x0005B8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_HasLocalSharedController_ReturnValue9) == 0x0005BC, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_HasLocalSharedController_ReturnValue9' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_IsGameplayTagValid_ReturnValue1) == 0x0005BD, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_IsGameplayTagValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_IsDedicatedServer_ReturnValue2) == 0x0005BE, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_IsDedicatedServer_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, Temp_delegate_Variable) == 0x0005C0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, Temp_int_Array_Index_Variable1) == 0x0005D0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::Temp_int_Array_Index_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_GetWorldDeltaSeconds_ReturnValue1) == 0x0005D4, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_GetWorldDeltaSeconds_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, Temp_int_Loop_Counter_Variable1) == 0x0005D8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::Temp_int_Loop_Counter_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, Temp_bool_Variable1) == 0x0005DC, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Add_IntInt_ReturnValue2) == 0x0005E0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Add_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_GetOwner_ReturnValue10) == 0x0005E8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_GetOwner_ReturnValue10' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_K2_GetActorLocation_ReturnValue1) == 0x0005F0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_K2_GetActorLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_RequestGion_AkComponent__LocalOnly_) == 0x000600, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_RequestGion_AkComponent__LocalOnly_' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_RequestGion_bFullfilDisplayCond_LocalOnly_) == 0x000608, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_RequestGion_bFullfilDisplayCond_LocalOnly_' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_PostAssociatedAkEvent_ReturnValue) == 0x00060C, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_PostAssociatedAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_IsValid_ReturnValue1) == 0x000610, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_GetOwner_ReturnValue11) == 0x000618, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_GetOwner_ReturnValue11' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_AsBP_AJBIn_Game_Character9) == 0x000620, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_AsBP_AJBIn_Game_Character9' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_bSuccess17) == 0x000628, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_bSuccess17' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_IsDedicatedServer_ReturnValue3) == 0x000629, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_IsDedicatedServer_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_Event_Time) == 0x00062C, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_Event_Time' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_Event_bEnable1) == 0x000630, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_Event_bEnable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_Event_bOperatorIsEmpty) == 0x000631, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_Event_bOperatorIsEmpty' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_IsValid_ReturnValue2) == 0x000632, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_GetOwner_ReturnValue12) == 0x000638, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_GetOwner_ReturnValue12' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_AsBP_AJBIn_Game_Character10) == 0x000640, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_AsBP_AJBIn_Game_Character10' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_bSuccess18) == 0x000648, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_bSuccess18' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_CheckActiveBehaviorBreakDown_bBreakDown2) == 0x000649, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_CheckActiveBehaviorBreakDown_bBreakDown2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_CheckActiveBehaviorBreakDown_bSpecialBreakDown2) == 0x00064A, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_CheckActiveBehaviorBreakDown_bSpecialBreakDown2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_CheckActiveBehaviorBreakDown_bBreakDownBoth2) == 0x00064B, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_CheckActiveBehaviorBreakDown_bBreakDownBoth2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_CheckActiveBehaviorBreakDown_Factor_Tags2) == 0x000650, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_CheckActiveBehaviorBreakDown_Factor_Tags2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_IsValid_ReturnValue3) == 0x000670, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_IsValid_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Not_PreBool_ReturnValue5) == 0x000671, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Not_PreBool_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, Temp_float_Variable2) == 0x000674, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::Temp_float_Variable2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_IsDedicatedServer_ReturnValue4) == 0x000678, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_IsDedicatedServer_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, Temp_float_Variable3) == 0x00067C, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::Temp_float_Variable3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_MakeArray_Array) == 0x000680, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Array_Length_ReturnValue) == 0x000690, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_Select1_Default) == 0x000694, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_EqualEqual_GameplayTag_ReturnValue6) == 0x000698, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_EqualEqual_GameplayTag_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x00069C, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_NewState2) == 0x0006A0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_NewState2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Add_FloatFloat_ReturnValue1) == 0x0006A4, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Add_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_NewState1) == 0x0006A8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_NewState1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_NewState) == 0x0006A9, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_NewState' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_HasLocalSharedController_ReturnValue10) == 0x0006AA, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_HasLocalSharedController_ReturnValue10' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, Temp_int_Array_Index_Variable2) == 0x0006AC, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::Temp_int_Array_Index_Variable2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Array_Get_Item) == 0x0006B0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x0006B1, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_EqualEqual_GameplayTag_ReturnValue7) == 0x0006B2, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_EqualEqual_GameplayTag_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Array_Get_Item1) == 0x0006B8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Array_Get_Item2) == 0x0006C8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Array_Get_Item2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Array_Length_ReturnValue1) == 0x0006D0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Less_IntInt_ReturnValue) == 0x0006D4, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Array_Get_Item3) == 0x0006D8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Array_Get_Item3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_GetWorldDeltaSeconds_ReturnValue2) == 0x0006E8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_GetWorldDeltaSeconds_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Array_Get_Item4) == 0x0006F0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Array_Get_Item4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Array_Length_ReturnValue2) == 0x0006F8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Array_Length_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Less_IntInt_ReturnValue1) == 0x0006FC, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Less_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_HasLocalSharedController_ReturnValue11) == 0x0006FD, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_HasLocalSharedController_ReturnValue11' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Multiply_FloatFloat_ReturnValue3) == 0x000700, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Multiply_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Not_PreBool_ReturnValue6) == 0x000704, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Not_PreBool_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Add_FloatFloat_ReturnValue2) == 0x000708, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Add_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, Temp_int_Loop_Counter_Variable2) == 0x00070C, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::Temp_int_Loop_Counter_Variable2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_Location1) == 0x000710, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_Location1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_HitActor2) == 0x000720, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_HitActor2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_bHeadShot) == 0x000728, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_bHeadShot' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_CuttingRate) == 0x00072C, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_CuttingRate' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_bDisableDamage) == 0x000730, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_bDisableDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_bBlockedByAAP) == 0x000731, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_bBlockedByAAP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Not_PreBool_ReturnValue7) == 0x000732, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Not_PreBool_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_NearlyEqual_FloatFloat_ReturnValue1) == 0x000733, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_NearlyEqual_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Not_PreBool_ReturnValue8) == 0x000734, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Not_PreBool_ReturnValue8' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_NearlyEqual_FloatFloat_ReturnValue2) == 0x000735, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_NearlyEqual_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Not_PreBool_ReturnValue9) == 0x000736, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Not_PreBool_ReturnValue9' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_K2_GetRootComponent_ReturnValue1) == 0x000738, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_K2_GetRootComponent_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_AsBI_AJBInterface5) == 0x000740, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_AsBI_AJBInterface5' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_bSuccess19) == 0x000750, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_bSuccess19' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_AsBI_AJBInterface6) == 0x000758, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_AsBI_AJBInterface6' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_bSuccess20) == 0x000768, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_bSuccess20' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_OwnHitParam_bCharacter1) == 0x000769, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_OwnHitParam_bCharacter1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_OwnHitParam_bLeftAP1) == 0x00076A, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_OwnHitParam_bLeftAP1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_OwnHitParam_ParticleTagBlockedByAAP1) == 0x000770, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_OwnHitParam_ParticleTagBlockedByAAP1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_OwnHitParam_SETagBlockedByAAP1) == 0x000778, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_OwnHitParam_SETagBlockedByAAP1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_OwnHitParam_bCharacter2) == 0x000780, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_OwnHitParam_bCharacter2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_OwnHitParam_bLeftAP2) == 0x000781, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_OwnHitParam_bLeftAP2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_OwnHitParam_ParticleTagBlockedByAAP2) == 0x000788, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_OwnHitParam_ParticleTagBlockedByAAP2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_OwnHitParam_SETagBlockedByAAP2) == 0x000790, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_OwnHitParam_SETagBlockedByAAP2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_AsAJBIn_Game_Character_Base) == 0x000798, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_AsAJBIn_Game_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_bSuccess21) == 0x0007A0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_bSuccess21' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Less_IntInt_ReturnValue2) == 0x0007A1, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Less_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_IsPlayerController_ReturnValue) == 0x0007A2, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_IsPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_HasLocalSharedController_ReturnValue12) == 0x0007A3, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_HasLocalSharedController_ReturnValue12' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Add_IntInt_ReturnValue3) == 0x0007A4, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Add_IntInt_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_RequestWwiseEventAttachedOnLocal_AkComponent) == 0x0007A8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_RequestWwiseEventAttachedOnLocal_AkComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_IsPlayerController_ReturnValue1) == 0x0007B0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_IsPlayerController_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_HasLocalSharedController_ReturnValue13) == 0x0007B1, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_HasLocalSharedController_ReturnValue13' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, Temp_float_Variable4) == 0x0007B4, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::Temp_float_Variable4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_EqualEqual_GameplayTag_ReturnValue8) == 0x0007B8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_EqualEqual_GameplayTag_ReturnValue8' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_RequestParticleEffectOnLocal_ParticleEffect) == 0x0007C0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_RequestParticleEffectOnLocal_ParticleEffect' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, Temp_bool_Variable2) == 0x0007C8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_EqualEqual_GameplayTag_ReturnValue9) == 0x0007C9, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_EqualEqual_GameplayTag_ReturnValue9' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, Temp_byte_Variable) == 0x0007CA, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, Temp_byte_Variable1) == 0x0007CB, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_MakeLiteralByte_ReturnValue2) == 0x0007CC, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_MakeLiteralByte_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_Select2_Default) == 0x0007CD, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_EqualEqual_ByteByte_ReturnValue2) == 0x0007CE, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_EqualEqual_ByteByte_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_GetAJBGameInstance_bSuccess1) == 0x0007CF, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_GetAJBGameInstance_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_GetAJBGameInstance_AJB_Game_Instance1) == 0x0007D0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_GetAJBGameInstance_AJB_Game_Instance1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_IsPlayingReplay_ReturnValue1) == 0x0007D8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_IsPlayingReplay_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, Temp_bool_Variable3) == 0x0007D9, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::Temp_bool_Variable3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CreateDelegate_OutputDelegate) == 0x0007E0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_Select3_Default) == 0x0007F0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_Select3_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_Event_bEnable) == 0x0007F4, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_Event_bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_IsValid_ReturnValue4) == 0x0007F5, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_IsValid_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_EqualEqual_ByteByte_ReturnValue3) == 0x0007F6, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_EqualEqual_ByteByte_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_GetAnimInstance_ReturnValue) == 0x0007F8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_IsValid_ReturnValue5) == 0x000800, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_IsValid_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_PrevState3) == 0x000801, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_PrevState3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_IsValid_ReturnValue6) == 0x000802, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_IsValid_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_EqualEqual_ByteByte_ReturnValue4) == 0x000803, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_EqualEqual_ByteByte_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_NotEqual_ByteByte_ReturnValue1) == 0x000804, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_NotEqual_ByteByte_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_PrevState2) == 0x000805, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_PrevState2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_PrevState1) == 0x000806, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_PrevState1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_PrevState) == 0x000807, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_PrevState' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_EqualEqual_ByteByte_ReturnValue5) == 0x000808, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_EqualEqual_ByteByte_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_CreateProxyObjectForPlayMontage_ReturnValue) == 0x000810, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_CreateProxyObjectForPlayMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_IsValid_ReturnValue7) == 0x000818, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_IsValid_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_IsValid_ReturnValue8) == 0x000819, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_IsValid_ReturnValue8' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, Temp_name_Variable) == 0x000820, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_NotifyName) == 0x000828, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_NotifyName' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_SwitchEnum4_CmpSuccess) == 0x000830, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_SwitchEnum4_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CreateDelegate_OutputDelegate1) == 0x000838, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_GetPlayerController_ReturnValue) == 0x000848, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_NotifyName1) == 0x000850, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_NotifyName1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_AsBP_AJBIn_Game_Player_Controller) == 0x000858, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_AsBP_AJBIn_Game_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_bSuccess22) == 0x000860, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_bSuccess22' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_IsLocalController_ReturnValue) == 0x000861, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_IsLocalController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CreateDelegate_OutputDelegate2) == 0x000868, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CreateDelegate_OutputDelegate2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_NotifyName2) == 0x000878, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_NotifyName2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_MakeLiteralByte_ReturnValue3) == 0x000880, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_MakeLiteralByte_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CreateDelegate_OutputDelegate3) == 0x000888, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CreateDelegate_OutputDelegate3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_EqualEqual_ByteByte_ReturnValue6) == 0x000898, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_EqualEqual_ByteByte_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_NotifyName3) == 0x0008A0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_NotifyName3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CreateDelegate_OutputDelegate4) == 0x0008A8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CreateDelegate_OutputDelegate4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_MakeLiteralByte_ReturnValue4) == 0x0008B8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_MakeLiteralByte_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_NotifyName4) == 0x0008C0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_NotifyName4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_EqualEqual_ByteByte_ReturnValue7) == 0x0008C8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_EqualEqual_ByteByte_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_HasLocalSharedController_ReturnValue14) == 0x0008C9, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_HasLocalSharedController_ReturnValue14' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CreateDelegate_OutputDelegate5) == 0x0008D0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CreateDelegate_OutputDelegate5' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_HitActor1) == 0x0008E0, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_HitActor1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_HItLocation) == 0x0008E8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_HItLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_HitActor) == 0x0008F8, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_HitActor' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_Location) == 0x000900, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_Location' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_AsBI_AJBInterface7) == 0x000910, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_AsBI_AJBInterface7' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_DynamicCast_bSuccess23) == 0x000920, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_DynamicCast_bSuccess23' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_GetOwner_ReturnValue13) == 0x000928, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_GetOwner_ReturnValue13' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_TargetCharacter) == 0x000930, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_TargetCharacter' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_OldBehavior) == 0x000938, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_OldBehavior' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_NextBehavior) == 0x000939, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_NextBehavior' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CustomEvent_bSpecialBreakDown) == 0x00093A, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CustomEvent_bSpecialBreakDown' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_EqualEqual_ByteByte_ReturnValue8) == 0x00093B, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_EqualEqual_ByteByte_ReturnValue8' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_NotEqual_ByteByte_ReturnValue2) == 0x00093C, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_NotEqual_ByteByte_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_NotEqual_ByteByte_ReturnValue3) == 0x00093D, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_NotEqual_ByteByte_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_EqualEqual_ByteByte_ReturnValue9) == 0x00093E, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_EqualEqual_ByteByte_ReturnValue9' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_BooleanAND_ReturnValue1) == 0x00093F, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_BooleanAND_ReturnValue2) == 0x000940, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_BooleanAND_ReturnValue3) == 0x000941, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_BooleanAND_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_IsValid_ReturnValue9) == 0x000942, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_IsValid_ReturnValue9' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_CreateDelegate_OutputDelegate6) == 0x000948, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_CreateDelegate_OutputDelegate6' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_IsValid_ReturnValue10) == 0x000958, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_IsValid_ReturnValue10' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_IsPlayerController_ReturnValue2) == 0x000959, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_IsPlayerController_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_MakeLiteralByte_ReturnValue5) == 0x00095A, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_MakeLiteralByte_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, Temp_byte_Variable2) == 0x00095B, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_EqualEqual_ByteByte_ReturnValue10) == 0x00095C, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_EqualEqual_ByteByte_ReturnValue10' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_K2_GetActorLocation_ReturnValue2) == 0x000960, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_K2_GetActorLocation_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, Temp_byte_Variable3) == 0x00096C, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::Temp_byte_Variable3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, Temp_bool_Variable4) == 0x00096D, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::Temp_bool_Variable4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000970, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_GetNumMaterials_ReturnValue) == 0x000978, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_GetNumMaterials_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, K2Node_Select4_Default) == 0x00097C, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::K2Node_Select4_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Subtract_IntInt_ReturnValue) == 0x000980, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_LessEqual_IntInt_ReturnValue1) == 0x000984, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_LessEqual_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP, CallFunc_Array_Add_ReturnValue) == 0x000988, "Member 'BP_AJBInGameMovableStand_SXP_C_ExecuteUbergraph_BP_AJBInGameMovableStand_SXP::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnCharacterActiveBehaviorChanged
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_OnCharacterActiveBehaviorChanged final
{
public:
	class AAJBInGameCharacter*                    TargetCharacter;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterActiveBehavior                      OldBehavior;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterActiveBehavior                      NextBehavior;                                      // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSpecialBreakDown;                                 // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_OnCharacterActiveBehaviorChanged) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_OnCharacterActiveBehaviorChanged");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_OnCharacterActiveBehaviorChanged) == 0x000010, "Wrong size on BP_AJBInGameMovableStand_SXP_C_OnCharacterActiveBehaviorChanged");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_OnCharacterActiveBehaviorChanged, TargetCharacter) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_OnCharacterActiveBehaviorChanged::TargetCharacter' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_OnCharacterActiveBehaviorChanged, OldBehavior) == 0x000008, "Member 'BP_AJBInGameMovableStand_SXP_C_OnCharacterActiveBehaviorChanged::OldBehavior' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_OnCharacterActiveBehaviorChanged, NextBehavior) == 0x000009, "Member 'BP_AJBInGameMovableStand_SXP_C_OnCharacterActiveBehaviorChanged::NextBehavior' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_OnCharacterActiveBehaviorChanged, bSpecialBreakDown) == 0x00000A, "Member 'BP_AJBInGameMovableStand_SXP_C_OnCharacterActiveBehaviorChanged::bSpecialBreakDown' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ROS_OnDamageOverlap
// 0x0018 (0x0018 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_ROS_OnDamageOverlap final
{
public:
	class AActor*                                 HitActor;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_ROS_OnDamageOverlap) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_ROS_OnDamageOverlap");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_ROS_OnDamageOverlap) == 0x000018, "Wrong size on BP_AJBInGameMovableStand_SXP_C_ROS_OnDamageOverlap");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ROS_OnDamageOverlap, HitActor) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_ROS_OnDamageOverlap::HitActor' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ROS_OnDamageOverlap, Location) == 0x000008, "Member 'BP_AJBInGameMovableStand_SXP_C_ROS_OnDamageOverlap::Location' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnDamageOverlap
// 0x0018 (0x0018 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_OnDamageOverlap final
{
public:
	class AActor*                                 HitActor;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitLocation;                                       // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_OnDamageOverlap) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_OnDamageOverlap");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_OnDamageOverlap) == 0x000018, "Wrong size on BP_AJBInGameMovableStand_SXP_C_OnDamageOverlap");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_OnDamageOverlap, HitActor) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_OnDamageOverlap::HitActor' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_OnDamageOverlap, HitLocation) == 0x000008, "Member 'BP_AJBInGameMovableStand_SXP_C_OnDamageOverlap::HitLocation' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnBeginState_Waiting
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_OnBeginState_Waiting final
{
public:
	EMovableStandSXPState                         PrevState;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_OnBeginState_Waiting) == 0x000001, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_OnBeginState_Waiting");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_OnBeginState_Waiting) == 0x000001, "Wrong size on BP_AJBInGameMovableStand_SXP_C_OnBeginState_Waiting");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_OnBeginState_Waiting, PrevState) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_OnBeginState_Waiting::PrevState' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnBeginState_Kicking
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_OnBeginState_Kicking final
{
public:
	EMovableStandSXPState                         PrevState;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_OnBeginState_Kicking) == 0x000001, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_OnBeginState_Kicking");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_OnBeginState_Kicking) == 0x000001, "Wrong size on BP_AJBInGameMovableStand_SXP_C_OnBeginState_Kicking");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_OnBeginState_Kicking, PrevState) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_OnBeginState_Kicking::PrevState' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnBeginState_Loitering
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_OnBeginState_Loitering final
{
public:
	EMovableStandSXPState                         PrevState;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_OnBeginState_Loitering) == 0x000001, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_OnBeginState_Loitering");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_OnBeginState_Loitering) == 0x000001, "Wrong size on BP_AJBInGameMovableStand_SXP_C_OnBeginState_Loitering");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_OnBeginState_Loitering, PrevState) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_OnBeginState_Loitering::PrevState' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnBeginState_None
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_OnBeginState_None final
{
public:
	EMovableStandSXPState                         PrevState;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_OnBeginState_None) == 0x000001, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_OnBeginState_None");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_OnBeginState_None) == 0x000001, "Wrong size on BP_AJBInGameMovableStand_SXP_C_OnBeginState_None");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_OnBeginState_None, PrevState) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_OnBeginState_None::PrevState' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.GenerateEffects
// 0x0028 (0x0028 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_GenerateEffects final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HitActor;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHeadShot;                                         // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CuttingRate;                                       // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisableDamage;                                    // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bBlockedByAAP;                                     // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_GenerateEffects) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_GenerateEffects");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_GenerateEffects) == 0x000028, "Wrong size on BP_AJBInGameMovableStand_SXP_C_GenerateEffects");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_GenerateEffects, Location) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_GenerateEffects::Location' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_GenerateEffects, HitActor) == 0x000010, "Member 'BP_AJBInGameMovableStand_SXP_C_GenerateEffects::HitActor' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_GenerateEffects, bHeadShot) == 0x000018, "Member 'BP_AJBInGameMovableStand_SXP_C_GenerateEffects::bHeadShot' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_GenerateEffects, CuttingRate) == 0x00001C, "Member 'BP_AJBInGameMovableStand_SXP_C_GenerateEffects::CuttingRate' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_GenerateEffects, bDisableDamage) == 0x000020, "Member 'BP_AJBInGameMovableStand_SXP_C_GenerateEffects::bDisableDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_GenerateEffects, bBlockedByAAP) == 0x000021, "Member 'BP_AJBInGameMovableStand_SXP_C_GenerateEffects::bBlockedByAAP' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnChangeFlyingState
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_OnChangeFlyingState final
{
public:
	EMovableSXPFlyingState                        NewState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_OnChangeFlyingState) == 0x000001, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_OnChangeFlyingState");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_OnChangeFlyingState) == 0x000001, "Wrong size on BP_AJBInGameMovableStand_SXP_C_OnChangeFlyingState");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_OnChangeFlyingState, NewState) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_OnChangeFlyingState::NewState' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ROS_ChangeFlyingState
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_ROS_ChangeFlyingState final
{
public:
	EMovableSXPFlyingState                        NewState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_ROS_ChangeFlyingState) == 0x000001, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_ROS_ChangeFlyingState");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_ROS_ChangeFlyingState) == 0x000001, "Wrong size on BP_AJBInGameMovableStand_SXP_C_ROS_ChangeFlyingState");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ROS_ChangeFlyingState, NewState) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_ROS_ChangeFlyingState::NewState' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ChangeFlyingState
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_ChangeFlyingState final
{
public:
	EMovableSXPFlyingState                        NewState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_ChangeFlyingState) == 0x000001, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_ChangeFlyingState");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_ChangeFlyingState) == 0x000001, "Wrong size on BP_AJBInGameMovableStand_SXP_C_ChangeFlyingState");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ChangeFlyingState, NewState) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_ChangeFlyingState::NewState' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ChangeStateCore
// 0x0002 (0x0002 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_ChangeStateCore final
{
public:
	EMovableStandSXPState                         PrevState;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovableStandSXPState                         NextState;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_ChangeStateCore) == 0x000001, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_ChangeStateCore");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_ChangeStateCore) == 0x000002, "Wrong size on BP_AJBInGameMovableStand_SXP_C_ChangeStateCore");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ChangeStateCore, PrevState) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_ChangeStateCore::PrevState' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ChangeStateCore, NextState) == 0x000001, "Member 'BP_AJBInGameMovableStand_SXP_C_ChangeStateCore::NextState' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnChangeState
// 0x0002 (0x0002 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_OnChangeState final
{
public:
	EMovableStandSXPState                         PrevState;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovableStandSXPState                         NextState;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_OnChangeState) == 0x000001, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_OnChangeState");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_OnChangeState) == 0x000002, "Wrong size on BP_AJBInGameMovableStand_SXP_C_OnChangeState");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_OnChangeState, PrevState) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_OnChangeState::PrevState' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_OnChangeState, NextState) == 0x000001, "Member 'BP_AJBInGameMovableStand_SXP_C_OnChangeState::NextState' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ChangeState_Local
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_ChangeState_Local final
{
public:
	EMovableStandSXPState                         NextState;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_ChangeState_Local) == 0x000001, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_ChangeState_Local");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_ChangeState_Local) == 0x000001, "Wrong size on BP_AJBInGameMovableStand_SXP_C_ChangeState_Local");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ChangeState_Local, NextState) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_ChangeState_Local::NextState' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnMC_ChangeState
// 0x0002 (0x0002 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_OnMC_ChangeState final
{
public:
	EMovableStandSXPState                         PrevState;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovableStandSXPState                         NextState;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_OnMC_ChangeState) == 0x000001, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_OnMC_ChangeState");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_OnMC_ChangeState) == 0x000002, "Wrong size on BP_AJBInGameMovableStand_SXP_C_OnMC_ChangeState");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_OnMC_ChangeState, PrevState) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_OnMC_ChangeState::PrevState' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_OnMC_ChangeState, NextState) == 0x000001, "Member 'BP_AJBInGameMovableStand_SXP_C_OnMC_ChangeState::NextState' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnROS_ChangeState
// 0x0002 (0x0002 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_OnROS_ChangeState final
{
public:
	EMovableStandSXPState                         PrevState;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovableStandSXPState                         NextState;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_OnROS_ChangeState) == 0x000001, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_OnROS_ChangeState");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_OnROS_ChangeState) == 0x000002, "Wrong size on BP_AJBInGameMovableStand_SXP_C_OnROS_ChangeState");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_OnROS_ChangeState, PrevState) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_OnROS_ChangeState::PrevState' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_OnROS_ChangeState, NextState) == 0x000001, "Member 'BP_AJBInGameMovableStand_SXP_C_OnROS_ChangeState::NextState' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.MC_ChangeState
// 0x0002 (0x0002 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_MC_ChangeState final
{
public:
	EMovableStandSXPState                         PrevState;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovableStandSXPState                         NextState;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_MC_ChangeState) == 0x000001, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_MC_ChangeState");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_MC_ChangeState) == 0x000002, "Wrong size on BP_AJBInGameMovableStand_SXP_C_MC_ChangeState");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_MC_ChangeState, PrevState) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_MC_ChangeState::PrevState' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_MC_ChangeState, NextState) == 0x000001, "Member 'BP_AJBInGameMovableStand_SXP_C_MC_ChangeState::NextState' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ROS_ChangeState
// 0x0002 (0x0002 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_ROS_ChangeState final
{
public:
	EMovableStandSXPState                         PrevState;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovableStandSXPState                         NextState;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_ROS_ChangeState) == 0x000001, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_ROS_ChangeState");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_ROS_ChangeState) == 0x000002, "Wrong size on BP_AJBInGameMovableStand_SXP_C_ROS_ChangeState");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ROS_ChangeState, PrevState) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_ROS_ChangeState::PrevState' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ROS_ChangeState, NextState) == 0x000001, "Member 'BP_AJBInGameMovableStand_SXP_C_ROS_ChangeState::NextState' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.MC_OnHitRodeoShot
// 0x0028 (0x0028 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_MC_OnHitRodeoShot final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HitActor;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHeadShot;                                         // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CuttingRate;                                       // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisableDamage;                                    // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bBlockedByAAP;                                     // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_MC_OnHitRodeoShot) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_MC_OnHitRodeoShot");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_MC_OnHitRodeoShot) == 0x000028, "Wrong size on BP_AJBInGameMovableStand_SXP_C_MC_OnHitRodeoShot");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_MC_OnHitRodeoShot, HitLocation) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_MC_OnHitRodeoShot::HitLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_MC_OnHitRodeoShot, HitActor) == 0x000010, "Member 'BP_AJBInGameMovableStand_SXP_C_MC_OnHitRodeoShot::HitActor' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_MC_OnHitRodeoShot, bHeadShot) == 0x000018, "Member 'BP_AJBInGameMovableStand_SXP_C_MC_OnHitRodeoShot::bHeadShot' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_MC_OnHitRodeoShot, CuttingRate) == 0x00001C, "Member 'BP_AJBInGameMovableStand_SXP_C_MC_OnHitRodeoShot::CuttingRate' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_MC_OnHitRodeoShot, bDisableDamage) == 0x000020, "Member 'BP_AJBInGameMovableStand_SXP_C_MC_OnHitRodeoShot::bDisableDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_MC_OnHitRodeoShot, bBlockedByAAP) == 0x000021, "Member 'BP_AJBInGameMovableStand_SXP_C_MC_OnHitRodeoShot::bBlockedByAAP' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ROS_OnHitRodeoShot
// 0x0028 (0x0028 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_ROS_OnHitRodeoShot final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HitActor;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHeadShot;                                         // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CuttingRate;                                       // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisableDamage;                                    // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bBlockedByAAP;                                     // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_ROS_OnHitRodeoShot) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_ROS_OnHitRodeoShot");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_ROS_OnHitRodeoShot) == 0x000028, "Wrong size on BP_AJBInGameMovableStand_SXP_C_ROS_OnHitRodeoShot");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ROS_OnHitRodeoShot, HitLocation) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_ROS_OnHitRodeoShot::HitLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ROS_OnHitRodeoShot, HitActor) == 0x000010, "Member 'BP_AJBInGameMovableStand_SXP_C_ROS_OnHitRodeoShot::HitActor' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ROS_OnHitRodeoShot, bHeadShot) == 0x000018, "Member 'BP_AJBInGameMovableStand_SXP_C_ROS_OnHitRodeoShot::bHeadShot' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ROS_OnHitRodeoShot, CuttingRate) == 0x00001C, "Member 'BP_AJBInGameMovableStand_SXP_C_ROS_OnHitRodeoShot::CuttingRate' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ROS_OnHitRodeoShot, bDisableDamage) == 0x000020, "Member 'BP_AJBInGameMovableStand_SXP_C_ROS_OnHitRodeoShot::bDisableDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ROS_OnHitRodeoShot, bBlockedByAAP) == 0x000021, "Member 'BP_AJBInGameMovableStand_SXP_C_ROS_OnHitRodeoShot::bBlockedByAAP' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on BP_AJBInGameMovableStand_SXP_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_AJBInGameMovableStand_SXP_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_AJBInGameMovableStand_SXP_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_AJBInGameMovableStand_SXP_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_AJBInGameMovableStand_SXP_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_AJBInGameMovableStand_SXP_C_BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnHitRodeoShot
// 0x0028 (0x0028 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_OnHitRodeoShot final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HitActor;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHeadShot;                                         // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CuttingRate;                                       // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisableDamage;                                    // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_OnHitRodeoShot) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_OnHitRodeoShot");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_OnHitRodeoShot) == 0x000028, "Wrong size on BP_AJBInGameMovableStand_SXP_C_OnHitRodeoShot");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_OnHitRodeoShot, HitLocation) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_OnHitRodeoShot::HitLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_OnHitRodeoShot, HitActor) == 0x000010, "Member 'BP_AJBInGameMovableStand_SXP_C_OnHitRodeoShot::HitActor' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_OnHitRodeoShot, bHeadShot) == 0x000018, "Member 'BP_AJBInGameMovableStand_SXP_C_OnHitRodeoShot::bHeadShot' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_OnHitRodeoShot, CuttingRate) == 0x00001C, "Member 'BP_AJBInGameMovableStand_SXP_C_OnHitRodeoShot::CuttingRate' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_OnHitRodeoShot, bDisableDamage) == 0x000020, "Member 'BP_AJBInGameMovableStand_SXP_C_OnHitRodeoShot::bDisableDamage' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.MC_OnBlocking
// 0x0018 (0x0018 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_MC_OnBlocking final
{
public:
	class AActor*                                 BlockedActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitLocation;                                       // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bReflect;                                          // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bSeparateStandAttack;                              // 0x0015(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_MC_OnBlocking) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_MC_OnBlocking");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_MC_OnBlocking) == 0x000018, "Wrong size on BP_AJBInGameMovableStand_SXP_C_MC_OnBlocking");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_MC_OnBlocking, BlockedActor) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_MC_OnBlocking::BlockedActor' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_MC_OnBlocking, HitLocation) == 0x000008, "Member 'BP_AJBInGameMovableStand_SXP_C_MC_OnBlocking::HitLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_MC_OnBlocking, bReflect) == 0x000014, "Member 'BP_AJBInGameMovableStand_SXP_C_MC_OnBlocking::bReflect' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_MC_OnBlocking, bSeparateStandAttack) == 0x000015, "Member 'BP_AJBInGameMovableStand_SXP_C_MC_OnBlocking::bSeparateStandAttack' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ROS_OnBlocking
// 0x0018 (0x0018 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_ROS_OnBlocking final
{
public:
	class AActor*                                 BlockedActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitLocation;                                       // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bReflect;                                          // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bSeparateStandAttack;                              // 0x0015(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_ROS_OnBlocking) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_ROS_OnBlocking");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_ROS_OnBlocking) == 0x000018, "Wrong size on BP_AJBInGameMovableStand_SXP_C_ROS_OnBlocking");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ROS_OnBlocking, BlockedActor) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_ROS_OnBlocking::BlockedActor' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ROS_OnBlocking, HitLocation) == 0x000008, "Member 'BP_AJBInGameMovableStand_SXP_C_ROS_OnBlocking::HitLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ROS_OnBlocking, bReflect) == 0x000014, "Member 'BP_AJBInGameMovableStand_SXP_C_ROS_OnBlocking::bReflect' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ROS_OnBlocking, bSeparateStandAttack) == 0x000015, "Member 'BP_AJBInGameMovableStand_SXP_C_ROS_OnBlocking::bSeparateStandAttack' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.Blocking
// 0x0050 (0x0050 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_Blocking final
{
public:
	class AActor*                                 BlockedActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitLocation;                                       // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CuttingProjectile___;                              // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CuttingOther___;                                   // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInvincible;                                       // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bReflectProjectile;                                // 0x0031(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReflectRotation;                                   // 0x0034(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	bool                                          bAvoidSkill;                                       // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bSeparateStandAttack;                              // 0x0041(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ReflectSkillTag;                                   // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_Blocking) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_Blocking");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_Blocking) == 0x000050, "Wrong size on BP_AJBInGameMovableStand_SXP_C_Blocking");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_Blocking, BlockedActor) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_Blocking::BlockedActor' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_Blocking, OtherActor) == 0x000008, "Member 'BP_AJBInGameMovableStand_SXP_C_Blocking::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_Blocking, HitLocation) == 0x000010, "Member 'BP_AJBInGameMovableStand_SXP_C_Blocking::HitLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_Blocking, HitNormal) == 0x00001C, "Member 'BP_AJBInGameMovableStand_SXP_C_Blocking::HitNormal' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_Blocking, CuttingProjectile___) == 0x000028, "Member 'BP_AJBInGameMovableStand_SXP_C_Blocking::CuttingProjectile___' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_Blocking, CuttingOther___) == 0x00002C, "Member 'BP_AJBInGameMovableStand_SXP_C_Blocking::CuttingOther___' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_Blocking, bInvincible) == 0x000030, "Member 'BP_AJBInGameMovableStand_SXP_C_Blocking::bInvincible' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_Blocking, bReflectProjectile) == 0x000031, "Member 'BP_AJBInGameMovableStand_SXP_C_Blocking::bReflectProjectile' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_Blocking, ReflectRotation) == 0x000034, "Member 'BP_AJBInGameMovableStand_SXP_C_Blocking::ReflectRotation' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_Blocking, bAvoidSkill) == 0x000040, "Member 'BP_AJBInGameMovableStand_SXP_C_Blocking::bAvoidSkill' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_Blocking, bSeparateStandAttack) == 0x000041, "Member 'BP_AJBInGameMovableStand_SXP_C_Blocking::bSeparateStandAttack' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_Blocking, ReflectSkillTag) == 0x000048, "Member 'BP_AJBInGameMovableStand_SXP_C_Blocking::ReflectSkillTag' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnCompleted_4766B3DE4E785B5E56887793DC497D70
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) BP_AJBInGameMovableStand_SXP_C_OnCompleted_4766B3DE4E785B5E56887793DC497D70 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_OnCompleted_4766B3DE4E785B5E56887793DC497D70) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_OnCompleted_4766B3DE4E785B5E56887793DC497D70");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_OnCompleted_4766B3DE4E785B5E56887793DC497D70) == 0x000008, "Wrong size on BP_AJBInGameMovableStand_SXP_C_OnCompleted_4766B3DE4E785B5E56887793DC497D70");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_OnCompleted_4766B3DE4E785B5E56887793DC497D70, NotifyName) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_OnCompleted_4766B3DE4E785B5E56887793DC497D70::NotifyName' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnBlendOut_4766B3DE4E785B5E56887793DC497D70
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) BP_AJBInGameMovableStand_SXP_C_OnBlendOut_4766B3DE4E785B5E56887793DC497D70 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_OnBlendOut_4766B3DE4E785B5E56887793DC497D70) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_OnBlendOut_4766B3DE4E785B5E56887793DC497D70");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_OnBlendOut_4766B3DE4E785B5E56887793DC497D70) == 0x000008, "Wrong size on BP_AJBInGameMovableStand_SXP_C_OnBlendOut_4766B3DE4E785B5E56887793DC497D70");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_OnBlendOut_4766B3DE4E785B5E56887793DC497D70, NotifyName) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_OnBlendOut_4766B3DE4E785B5E56887793DC497D70::NotifyName' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnInterrupted_4766B3DE4E785B5E56887793DC497D70
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) BP_AJBInGameMovableStand_SXP_C_OnInterrupted_4766B3DE4E785B5E56887793DC497D70 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_OnInterrupted_4766B3DE4E785B5E56887793DC497D70) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_OnInterrupted_4766B3DE4E785B5E56887793DC497D70");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_OnInterrupted_4766B3DE4E785B5E56887793DC497D70) == 0x000008, "Wrong size on BP_AJBInGameMovableStand_SXP_C_OnInterrupted_4766B3DE4E785B5E56887793DC497D70");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_OnInterrupted_4766B3DE4E785B5E56887793DC497D70, NotifyName) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_OnInterrupted_4766B3DE4E785B5E56887793DC497D70::NotifyName' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnNotifyBegin_4766B3DE4E785B5E56887793DC497D70
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) BP_AJBInGameMovableStand_SXP_C_OnNotifyBegin_4766B3DE4E785B5E56887793DC497D70 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_OnNotifyBegin_4766B3DE4E785B5E56887793DC497D70) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_OnNotifyBegin_4766B3DE4E785B5E56887793DC497D70");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_OnNotifyBegin_4766B3DE4E785B5E56887793DC497D70) == 0x000008, "Wrong size on BP_AJBInGameMovableStand_SXP_C_OnNotifyBegin_4766B3DE4E785B5E56887793DC497D70");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_OnNotifyBegin_4766B3DE4E785B5E56887793DC497D70, NotifyName) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_OnNotifyBegin_4766B3DE4E785B5E56887793DC497D70::NotifyName' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnNotifyEnd_4766B3DE4E785B5E56887793DC497D70
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) BP_AJBInGameMovableStand_SXP_C_OnNotifyEnd_4766B3DE4E785B5E56887793DC497D70 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_OnNotifyEnd_4766B3DE4E785B5E56887793DC497D70) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_OnNotifyEnd_4766B3DE4E785B5E56887793DC497D70");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_OnNotifyEnd_4766B3DE4E785B5E56887793DC497D70) == 0x000008, "Wrong size on BP_AJBInGameMovableStand_SXP_C_OnNotifyEnd_4766B3DE4E785B5E56887793DC497D70");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_OnNotifyEnd_4766B3DE4E785B5E56887793DC497D70, NotifyName) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_OnNotifyEnd_4766B3DE4E785B5E56887793DC497D70::NotifyName' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ConsumeDamage
// 0x000C (0x000C - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_ConsumeDamage final
{
public:
	int32                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_ConsumeDamage) == 0x000004, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_ConsumeDamage");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_ConsumeDamage) == 0x00000C, "Wrong size on BP_AJBInGameMovableStand_SXP_C_ConsumeDamage");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ConsumeDamage, Damage) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_ConsumeDamage::Damage' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ConsumeDamage, CallFunc_Subtract_IntInt_ReturnValue) == 0x000004, "Member 'BP_AJBInGameMovableStand_SXP_C_ConsumeDamage::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ConsumeDamage, CallFunc_Max_ReturnValue) == 0x000008, "Member 'BP_AJBInGameMovableStand_SXP_C_ConsumeDamage::CallFunc_Max_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.DebugPrintLeftTime
// 0x0020 (0x0020 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_DebugPrintLeftTime final
{
public:
	float                                         TempStateMaxTime;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_DebugPrintLeftTime) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_DebugPrintLeftTime");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_DebugPrintLeftTime) == 0x000020, "Wrong size on BP_AJBInGameMovableStand_SXP_C_DebugPrintLeftTime");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_DebugPrintLeftTime, TempStateMaxTime) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_DebugPrintLeftTime::TempStateMaxTime' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_DebugPrintLeftTime, K2Node_SwitchEnum_CmpSuccess) == 0x000004, "Member 'BP_AJBInGameMovableStand_SXP_C_DebugPrintLeftTime::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_DebugPrintLeftTime, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_AJBInGameMovableStand_SXP_C_DebugPrintLeftTime::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_DebugPrintLeftTime, CallFunc_Conv_FloatToString_ReturnValue) == 0x000010, "Member 'BP_AJBInGameMovableStand_SXP_C_DebugPrintLeftTime::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ChangeEnableMovement
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_ChangeEnableMovement final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_ChangeEnableMovement) == 0x000001, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_ChangeEnableMovement");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_ChangeEnableMovement) == 0x000001, "Wrong size on BP_AJBInGameMovableStand_SXP_C_ChangeEnableMovement");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ChangeEnableMovement, bEnable) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_ChangeEnableMovement::bEnable' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ChangeEnableBullletVisibility
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_ChangeEnableBullletVisibility final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_ChangeEnableBullletVisibility) == 0x000001, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_ChangeEnableBullletVisibility");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_ChangeEnableBullletVisibility) == 0x000001, "Wrong size on BP_AJBInGameMovableStand_SXP_C_ChangeEnableBullletVisibility");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ChangeEnableBullletVisibility, bEnable) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_ChangeEnableBullletVisibility::bEnable' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ChangeEnableEffect
// 0x0070 (0x0070 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_ChangeEnableEffect final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0xD];                                        // 0x0003(0x000D)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0010(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0040(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x004C(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0058(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameParticleEffect_C*          CallFunc_RequestParticleEffectOnLocal_ParticleEffect; // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_ChangeEnableEffect) == 0x000010, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_ChangeEnableEffect");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_ChangeEnableEffect) == 0x000070, "Wrong size on BP_AJBInGameMovableStand_SXP_C_ChangeEnableEffect");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ChangeEnableEffect, bEnable) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_ChangeEnableEffect::bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ChangeEnableEffect, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_AJBInGameMovableStand_SXP_C_ChangeEnableEffect::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ChangeEnableEffect, CallFunc_IsValid_ReturnValue1) == 0x000002, "Member 'BP_AJBInGameMovableStand_SXP_C_ChangeEnableEffect::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ChangeEnableEffect, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000010, "Member 'BP_AJBInGameMovableStand_SXP_C_ChangeEnableEffect::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ChangeEnableEffect, CallFunc_BreakTransform_Location) == 0x000040, "Member 'BP_AJBInGameMovableStand_SXP_C_ChangeEnableEffect::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ChangeEnableEffect, CallFunc_BreakTransform_Rotation) == 0x00004C, "Member 'BP_AJBInGameMovableStand_SXP_C_ChangeEnableEffect::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ChangeEnableEffect, CallFunc_BreakTransform_Scale) == 0x000058, "Member 'BP_AJBInGameMovableStand_SXP_C_ChangeEnableEffect::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ChangeEnableEffect, CallFunc_RequestParticleEffectOnLocal_ParticleEffect) == 0x000068, "Member 'BP_AJBInGameMovableStand_SXP_C_ChangeEnableEffect::CallFunc_RequestParticleEffectOnLocal_ParticleEffect' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.SetSpringArmLength
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_SetSpringArmLength final
{
public:
	float                                         Length;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_SetSpringArmLength) == 0x000004, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_SetSpringArmLength");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_SetSpringArmLength) == 0x000004, "Wrong size on BP_AJBInGameMovableStand_SXP_C_SetSpringArmLength");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_SetSpringArmLength, Length) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_SetSpringArmLength::Length' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.SkillSettings
// 0x0088 (0x0088 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_SkillSettings final
{
public:
	struct FGameplayTag                           InSkillTag;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          InMesh;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           InAM_Loitering;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           InAM_Kicking;                                      // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           InEffectLoiteringTag;                              // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           InEffectHitTag;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           InSELoiteringTag;                                  // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           InSEHitTag;                                        // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           InGionHitTag;                                      // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          bInEnableHeadShot;                                 // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InMaxHP;                                           // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InMaxSpeedOnAccel;                                 // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InMaxSpeedDefault;                                 // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InMaxSpeedOnDeaccel;                               // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InLoiteringTime;                                   // 0x005C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InKickingTime;                                     // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InWaitingTime;                                     // 0x0064(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InHitDamage;                                       // 0x0068(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InHitDamageOnHeadShot;                             // 0x006C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InHeadShotTraceLength;                             // 0x0070(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InSerialNumber;                                    // 0x0074(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           InAM_SpecialBreakDown;                             // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_GameplayTag_ReturnValue;       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_GameplayTag_ReturnValue1;      // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_SkillSettings) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_SkillSettings");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_SkillSettings) == 0x000088, "Wrong size on BP_AJBInGameMovableStand_SXP_C_SkillSettings");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_SkillSettings, InSkillTag) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_SkillSettings::InSkillTag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_SkillSettings, InMesh) == 0x000008, "Member 'BP_AJBInGameMovableStand_SXP_C_SkillSettings::InMesh' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_SkillSettings, InAM_Loitering) == 0x000010, "Member 'BP_AJBInGameMovableStand_SXP_C_SkillSettings::InAM_Loitering' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_SkillSettings, InAM_Kicking) == 0x000018, "Member 'BP_AJBInGameMovableStand_SXP_C_SkillSettings::InAM_Kicking' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_SkillSettings, InEffectLoiteringTag) == 0x000020, "Member 'BP_AJBInGameMovableStand_SXP_C_SkillSettings::InEffectLoiteringTag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_SkillSettings, InEffectHitTag) == 0x000028, "Member 'BP_AJBInGameMovableStand_SXP_C_SkillSettings::InEffectHitTag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_SkillSettings, InSELoiteringTag) == 0x000030, "Member 'BP_AJBInGameMovableStand_SXP_C_SkillSettings::InSELoiteringTag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_SkillSettings, InSEHitTag) == 0x000038, "Member 'BP_AJBInGameMovableStand_SXP_C_SkillSettings::InSEHitTag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_SkillSettings, InGionHitTag) == 0x000040, "Member 'BP_AJBInGameMovableStand_SXP_C_SkillSettings::InGionHitTag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_SkillSettings, bInEnableHeadShot) == 0x000048, "Member 'BP_AJBInGameMovableStand_SXP_C_SkillSettings::bInEnableHeadShot' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_SkillSettings, InMaxHP) == 0x00004C, "Member 'BP_AJBInGameMovableStand_SXP_C_SkillSettings::InMaxHP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_SkillSettings, InMaxSpeedOnAccel) == 0x000050, "Member 'BP_AJBInGameMovableStand_SXP_C_SkillSettings::InMaxSpeedOnAccel' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_SkillSettings, InMaxSpeedDefault) == 0x000054, "Member 'BP_AJBInGameMovableStand_SXP_C_SkillSettings::InMaxSpeedDefault' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_SkillSettings, InMaxSpeedOnDeaccel) == 0x000058, "Member 'BP_AJBInGameMovableStand_SXP_C_SkillSettings::InMaxSpeedOnDeaccel' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_SkillSettings, InLoiteringTime) == 0x00005C, "Member 'BP_AJBInGameMovableStand_SXP_C_SkillSettings::InLoiteringTime' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_SkillSettings, InKickingTime) == 0x000060, "Member 'BP_AJBInGameMovableStand_SXP_C_SkillSettings::InKickingTime' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_SkillSettings, InWaitingTime) == 0x000064, "Member 'BP_AJBInGameMovableStand_SXP_C_SkillSettings::InWaitingTime' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_SkillSettings, InHitDamage) == 0x000068, "Member 'BP_AJBInGameMovableStand_SXP_C_SkillSettings::InHitDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_SkillSettings, InHitDamageOnHeadShot) == 0x00006C, "Member 'BP_AJBInGameMovableStand_SXP_C_SkillSettings::InHitDamageOnHeadShot' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_SkillSettings, InHeadShotTraceLength) == 0x000070, "Member 'BP_AJBInGameMovableStand_SXP_C_SkillSettings::InHeadShotTraceLength' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_SkillSettings, InSerialNumber) == 0x000074, "Member 'BP_AJBInGameMovableStand_SXP_C_SkillSettings::InSerialNumber' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_SkillSettings, InAM_SpecialBreakDown) == 0x000078, "Member 'BP_AJBInGameMovableStand_SXP_C_SkillSettings::InAM_SpecialBreakDown' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_SkillSettings, CallFunc_EqualEqual_GameplayTag_ReturnValue) == 0x000080, "Member 'BP_AJBInGameMovableStand_SXP_C_SkillSettings::CallFunc_EqualEqual_GameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_SkillSettings, CallFunc_EqualEqual_GameplayTag_ReturnValue1) == 0x000081, "Member 'BP_AJBInGameMovableStand_SXP_C_SkillSettings::CallFunc_EqualEqual_GameplayTag_ReturnValue1' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ClearingLoiteringState
// 0x0006 (0x0006 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_ClearingLoiteringState final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerController_ReturnValue;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue;     // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue1;    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_ClearingLoiteringState) == 0x000001, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_ClearingLoiteringState");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_ClearingLoiteringState) == 0x000006, "Wrong size on BP_AJBInGameMovableStand_SXP_C_ClearingLoiteringState");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ClearingLoiteringState, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_ClearingLoiteringState::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ClearingLoiteringState, CallFunc_IsPlayerController_ReturnValue) == 0x000001, "Member 'BP_AJBInGameMovableStand_SXP_C_ClearingLoiteringState::CallFunc_IsPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ClearingLoiteringState, CallFunc_IsDedicatedServer_ReturnValue) == 0x000002, "Member 'BP_AJBInGameMovableStand_SXP_C_ClearingLoiteringState::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ClearingLoiteringState, CallFunc_HasLocalSharedController_ReturnValue) == 0x000003, "Member 'BP_AJBInGameMovableStand_SXP_C_ClearingLoiteringState::CallFunc_HasLocalSharedController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ClearingLoiteringState, CallFunc_HasLocalSharedController_ReturnValue1) == 0x000004, "Member 'BP_AJBInGameMovableStand_SXP_C_ClearingLoiteringState::CallFunc_HasLocalSharedController_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ClearingLoiteringState, CallFunc_IsValid_ReturnValue1) == 0x000005, "Member 'BP_AJBInGameMovableStand_SXP_C_ClearingLoiteringState::CallFunc_IsValid_ReturnValue1' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.GetPoliticDamage
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_GetPoliticDamage final
{
public:
	bool                                          bHeadShot;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Damage;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_GetPoliticDamage) == 0x000004, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_GetPoliticDamage");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_GetPoliticDamage) == 0x000010, "Wrong size on BP_AJBInGameMovableStand_SXP_C_GetPoliticDamage");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_GetPoliticDamage, bHeadShot) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_GetPoliticDamage::bHeadShot' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_GetPoliticDamage, Damage) == 0x000004, "Member 'BP_AJBInGameMovableStand_SXP_C_GetPoliticDamage::Damage' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_GetPoliticDamage, Temp_bool_Variable) == 0x000008, "Member 'BP_AJBInGameMovableStand_SXP_C_GetPoliticDamage::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_GetPoliticDamage, K2Node_Select_Default) == 0x00000C, "Member 'BP_AJBInGameMovableStand_SXP_C_GetPoliticDamage::K2Node_Select_Default' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.OnRep_(ForSkipOwner)SXPFlyingState
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_OnRep__ForSkipOwner_SXPFlyingState final
{
public:
	bool                                          CallFunc_HasLocalSharedController_ReturnValue;     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_OnRep__ForSkipOwner_SXPFlyingState) == 0x000001, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_OnRep__ForSkipOwner_SXPFlyingState");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_OnRep__ForSkipOwner_SXPFlyingState) == 0x000001, "Wrong size on BP_AJBInGameMovableStand_SXP_C_OnRep__ForSkipOwner_SXPFlyingState");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_OnRep__ForSkipOwner_SXPFlyingState, CallFunc_HasLocalSharedController_ReturnValue) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_OnRep__ForSkipOwner_SXPFlyingState::CallFunc_HasLocalSharedController_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ChangeSXPFlyingState
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_ChangeSXPFlyingState final
{
public:
	EMovableSXPFlyingState                        SXPFlyingState_0;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovableSXPFlyingState                        Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_ChangeSXPFlyingState) == 0x000004, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_ChangeSXPFlyingState");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_ChangeSXPFlyingState) == 0x000010, "Wrong size on BP_AJBInGameMovableStand_SXP_C_ChangeSXPFlyingState");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ChangeSXPFlyingState, SXPFlyingState_0) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_ChangeSXPFlyingState::SXPFlyingState_0' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ChangeSXPFlyingState, Temp_float_Variable) == 0x000004, "Member 'BP_AJBInGameMovableStand_SXP_C_ChangeSXPFlyingState::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ChangeSXPFlyingState, Temp_byte_Variable) == 0x000008, "Member 'BP_AJBInGameMovableStand_SXP_C_ChangeSXPFlyingState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ChangeSXPFlyingState, K2Node_Select_Default) == 0x00000C, "Member 'BP_AJBInGameMovableStand_SXP_C_ChangeSXPFlyingState::K2Node_Select_Default' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ClearingWaitingState
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_ClearingWaitingState final
{
public:
	bool                                          bFromLoitering;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_ClearingWaitingState) == 0x000001, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_ClearingWaitingState");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_ClearingWaitingState) == 0x000001, "Wrong size on BP_AJBInGameMovableStand_SXP_C_ClearingWaitingState");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ClearingWaitingState, bFromLoitering) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_ClearingWaitingState::bFromLoitering' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ReceiveTheWorld
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_ReceiveTheWorld final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnable;                                           // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bOperatorIsEmpty;                                  // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_ReceiveTheWorld) == 0x000004, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_ReceiveTheWorld");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_ReceiveTheWorld) == 0x000008, "Wrong size on BP_AJBInGameMovableStand_SXP_C_ReceiveTheWorld");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ReceiveTheWorld, Time) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_ReceiveTheWorld::Time' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ReceiveTheWorld, bEnable) == 0x000004, "Member 'BP_AJBInGameMovableStand_SXP_C_ReceiveTheWorld::bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ReceiveTheWorld, bOperatorIsEmpty) == 0x000005, "Member 'BP_AJBInGameMovableStand_SXP_C_ReceiveTheWorld::bOperatorIsEmpty' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_ReceiveTick");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_ReceiveTick) == 0x000004, "Wrong size on BP_AJBInGameMovableStand_SXP_C_ReceiveTick");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.TryDestroyAffecter
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_TryDestroyAffecter final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_TryDestroyAffecter) == 0x000001, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_TryDestroyAffecter");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_TryDestroyAffecter) == 0x000001, "Wrong size on BP_AJBInGameMovableStand_SXP_C_TryDestroyAffecter");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_TryDestroyAffecter, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_TryDestroyAffecter::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ChangeSXPState
// 0x0003 (0x0003 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_ChangeSXPState final
{
public:
	EMovableStandSXPState                         NewSXPState;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovableStandSXPState                         TempPrevState;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_ChangeSXPState) == 0x000001, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_ChangeSXPState");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_ChangeSXPState) == 0x000003, "Wrong size on BP_AJBInGameMovableStand_SXP_C_ChangeSXPState");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ChangeSXPState, NewSXPState) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_ChangeSXPState::NewSXPState' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ChangeSXPState, TempPrevState) == 0x000001, "Member 'BP_AJBInGameMovableStand_SXP_C_ChangeSXPState::TempPrevState' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ChangeSXPState, CallFunc_IsServer_ReturnValue) == 0x000002, "Member 'BP_AJBInGameMovableStand_SXP_C_ChangeSXPState::CallFunc_IsServer_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.RestoreSkillSettings
// 0x0048 (0x0048 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_RestoreSkillSettings final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character1;     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBPistolsStrikeSkill_C*            CallFunc_GetComponentByClass_ReturnValue;          // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_AJBRodeoShotPistolsSkill_C*         CallFunc_GetComponentByClass_ReturnValue1;         // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess;   // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_RestoreSkillSettings) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_RestoreSkillSettings");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_RestoreSkillSettings) == 0x000048, "Wrong size on BP_AJBInGameMovableStand_SXP_C_RestoreSkillSettings");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_RestoreSkillSettings, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_RestoreSkillSettings::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_RestoreSkillSettings, CallFunc_GetOwner_ReturnValue1) == 0x000008, "Member 'BP_AJBInGameMovableStand_SXP_C_RestoreSkillSettings::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_RestoreSkillSettings, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000010, "Member 'BP_AJBInGameMovableStand_SXP_C_RestoreSkillSettings::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_RestoreSkillSettings, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AJBInGameMovableStand_SXP_C_RestoreSkillSettings::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_RestoreSkillSettings, K2Node_DynamicCast_AsBP_AJBIn_Game_Character1) == 0x000020, "Member 'BP_AJBInGameMovableStand_SXP_C_RestoreSkillSettings::K2Node_DynamicCast_AsBP_AJBIn_Game_Character1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_RestoreSkillSettings, K2Node_DynamicCast_bSuccess1) == 0x000028, "Member 'BP_AJBInGameMovableStand_SXP_C_RestoreSkillSettings::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_RestoreSkillSettings, CallFunc_GetComponentByClass_ReturnValue) == 0x000030, "Member 'BP_AJBInGameMovableStand_SXP_C_RestoreSkillSettings::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_RestoreSkillSettings, CallFunc_GetComponentByClass_ReturnValue1) == 0x000038, "Member 'BP_AJBInGameMovableStand_SXP_C_RestoreSkillSettings::CallFunc_GetComponentByClass_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_RestoreSkillSettings, GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess) == 0x000040, "Member 'BP_AJBInGameMovableStand_SXP_C_RestoreSkillSettings::GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.UpdateTransform
// 0x00C0 (0x00C0 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_UpdateTransform final
{
public:
	bool                                          CallFunc_HasLocalSharedController_ReturnValue;     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0004(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0010(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x001C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0028(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0038(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_UpdateTransform) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_UpdateTransform");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_UpdateTransform) == 0x0000C0, "Wrong size on BP_AJBInGameMovableStand_SXP_C_UpdateTransform");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_UpdateTransform, CallFunc_HasLocalSharedController_ReturnValue) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_UpdateTransform::CallFunc_HasLocalSharedController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_UpdateTransform, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000004, "Member 'BP_AJBInGameMovableStand_SXP_C_UpdateTransform::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_UpdateTransform, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000010, "Member 'BP_AJBInGameMovableStand_SXP_C_UpdateTransform::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_UpdateTransform, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00001C, "Member 'BP_AJBInGameMovableStand_SXP_C_UpdateTransform::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_UpdateTransform, CallFunc_Add_VectorVector_ReturnValue) == 0x000028, "Member 'BP_AJBInGameMovableStand_SXP_C_UpdateTransform::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_UpdateTransform, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000038, "Member 'BP_AJBInGameMovableStand_SXP_C_UpdateTransform::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.CheckIgnoreBlocking
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_CheckIgnoreBlocking final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIgnore;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_CheckIgnoreBlocking) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_CheckIgnoreBlocking");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_CheckIgnoreBlocking) == 0x000010, "Wrong size on BP_AJBInGameMovableStand_SXP_C_CheckIgnoreBlocking");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_CheckIgnoreBlocking, TargetActor) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_CheckIgnoreBlocking::TargetActor' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_CheckIgnoreBlocking, bIgnore) == 0x000008, "Member 'BP_AJBInGameMovableStand_SXP_C_CheckIgnoreBlocking::bIgnore' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.CheckPassiveOnly
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_CheckPassiveOnly final
{
public:
	bool                                          bIsPassiveOnly;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_CheckPassiveOnly) == 0x000001, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_CheckPassiveOnly");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_CheckPassiveOnly) == 0x000001, "Wrong size on BP_AJBInGameMovableStand_SXP_C_CheckPassiveOnly");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_CheckPassiveOnly, bIsPassiveOnly) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_CheckPassiveOnly::bIsPassiveOnly' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.AJBDamage
// 0x0040 (0x0040 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_AJBDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DamageForHPAP;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DamageForAAP;                                      // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CutDamage;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           DamageType;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         SerialNumber_0;                                    // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDamagePriority                               DamagePriority;                                    // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttackDistance;                                    // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DamageCauser;                                      // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WithSeparatedStandAttack;                          // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HitEnemysSeparatedStand;                           // 0x0039(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bPenetrateAP;                                      // 0x003A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bNotUseCollision;                                  // 0x003B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_AJBDamage) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_AJBDamage");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_AJBDamage) == 0x000040, "Wrong size on BP_AJBInGameMovableStand_SXP_C_AJBDamage");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_AJBDamage, DamagedActor) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_AJBDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_AJBDamage, DamageForHPAP) == 0x000008, "Member 'BP_AJBInGameMovableStand_SXP_C_AJBDamage::DamageForHPAP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_AJBDamage, DamageForAAP) == 0x00000C, "Member 'BP_AJBInGameMovableStand_SXP_C_AJBDamage::DamageForAAP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_AJBDamage, CutDamage) == 0x000010, "Member 'BP_AJBInGameMovableStand_SXP_C_AJBDamage::CutDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_AJBDamage, DamageType) == 0x000018, "Member 'BP_AJBInGameMovableStand_SXP_C_AJBDamage::DamageType' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_AJBDamage, SerialNumber_0) == 0x000020, "Member 'BP_AJBInGameMovableStand_SXP_C_AJBDamage::SerialNumber_0' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_AJBDamage, DamagePriority) == 0x000024, "Member 'BP_AJBInGameMovableStand_SXP_C_AJBDamage::DamagePriority' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_AJBDamage, AttackDistance) == 0x000028, "Member 'BP_AJBInGameMovableStand_SXP_C_AJBDamage::AttackDistance' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_AJBDamage, DamageCauser) == 0x000030, "Member 'BP_AJBInGameMovableStand_SXP_C_AJBDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_AJBDamage, WithSeparatedStandAttack) == 0x000038, "Member 'BP_AJBInGameMovableStand_SXP_C_AJBDamage::WithSeparatedStandAttack' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_AJBDamage, HitEnemysSeparatedStand) == 0x000039, "Member 'BP_AJBInGameMovableStand_SXP_C_AJBDamage::HitEnemysSeparatedStand' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_AJBDamage, bPenetrateAP) == 0x00003A, "Member 'BP_AJBInGameMovableStand_SXP_C_AJBDamage::bPenetrateAP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_AJBDamage, bNotUseCollision) == 0x00003B, "Member 'BP_AJBInGameMovableStand_SXP_C_AJBDamage::bNotUseCollision' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.GetCollisionProfileName
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) BP_AJBInGameMovableStand_SXP_C_GetCollisionProfileName final
{
public:
	class FName                                   ProfileName;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_GetCollisionProfileName) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_GetCollisionProfileName");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_GetCollisionProfileName) == 0x000008, "Wrong size on BP_AJBInGameMovableStand_SXP_C_GetCollisionProfileName");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_GetCollisionProfileName, ProfileName) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_GetCollisionProfileName::ProfileName' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.UpdateMovementForwardInput
// 0x0034 (0x0034 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_UpdateMovementForwardInput final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorldDirection;                                    // 0x0004(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleValue;                                        // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0014(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_FilteringMovementDistanceLimit_OutputWorldDirection; // 0x0020(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FilteringMovementDistanceLimit_OutputScale; // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_UpdateMovementForwardInput) == 0x000004, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_UpdateMovementForwardInput");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_UpdateMovementForwardInput) == 0x000034, "Wrong size on BP_AJBInGameMovableStand_SXP_C_UpdateMovementForwardInput");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_UpdateMovementForwardInput, Value) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_UpdateMovementForwardInput::Value' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_UpdateMovementForwardInput, WorldDirection) == 0x000004, "Member 'BP_AJBInGameMovableStand_SXP_C_UpdateMovementForwardInput::WorldDirection' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_UpdateMovementForwardInput, ScaleValue) == 0x000010, "Member 'BP_AJBInGameMovableStand_SXP_C_UpdateMovementForwardInput::ScaleValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_UpdateMovementForwardInput, CallFunc_GetActorForwardVector_ReturnValue) == 0x000014, "Member 'BP_AJBInGameMovableStand_SXP_C_UpdateMovementForwardInput::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_UpdateMovementForwardInput, CallFunc_FilteringMovementDistanceLimit_OutputWorldDirection) == 0x000020, "Member 'BP_AJBInGameMovableStand_SXP_C_UpdateMovementForwardInput::CallFunc_FilteringMovementDistanceLimit_OutputWorldDirection' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_UpdateMovementForwardInput, CallFunc_FilteringMovementDistanceLimit_OutputScale) == 0x00002C, "Member 'BP_AJBInGameMovableStand_SXP_C_UpdateMovementForwardInput::CallFunc_FilteringMovementDistanceLimit_OutputScale' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_UpdateMovementForwardInput, CallFunc_Less_FloatFloat_ReturnValue) == 0x000030, "Member 'BP_AJBInGameMovableStand_SXP_C_UpdateMovementForwardInput::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_UpdateMovementForwardInput, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000031, "Member 'BP_AJBInGameMovableStand_SXP_C_UpdateMovementForwardInput::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_UpdateMovementForwardInput, CallFunc_MakeLiteralByte_ReturnValue) == 0x000032, "Member 'BP_AJBInGameMovableStand_SXP_C_UpdateMovementForwardInput::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_UpdateMovementForwardInput, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000033, "Member 'BP_AJBInGameMovableStand_SXP_C_UpdateMovementForwardInput::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.ChangeStandMovementMode
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_ChangeStandMovementMode final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_ChangeStandMovementMode) == 0x000001, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_ChangeStandMovementMode");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_ChangeStandMovementMode) == 0x000001, "Wrong size on BP_AJBInGameMovableStand_SXP_C_ChangeStandMovementMode");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_ChangeStandMovementMode, bEnable) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_ChangeStandMovementMode::bEnable' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.CheckChangeableSpeed
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_CheckChangeableSpeed final
{
public:
	bool                                          bChangeable;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_CheckChangeableSpeed) == 0x000001, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_CheckChangeableSpeed");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_CheckChangeableSpeed) == 0x000001, "Wrong size on BP_AJBInGameMovableStand_SXP_C_CheckChangeableSpeed");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_CheckChangeableSpeed, bChangeable) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_CheckChangeableSpeed::bChangeable' has a wrong offset!");

// Function BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C.GetPrimitivesToChangeStencil
// 0x0040 (0x0040 - 0x0000)
struct BP_AJBInGameMovableStand_SXP_C_GetPrimitivesToChangeStencil final
{
public:
	E_StencilDigit                                StencilDigit;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            PrimitiveComponents;                               // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<class UPrimitiveComponent*>            Temp_Result;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UPrimitiveComponent*>            CallFunc_GetPrimitivesToChangeStencil_PrimitiveComponents; // 0x0028(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_SXP_C_GetPrimitivesToChangeStencil) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_SXP_C_GetPrimitivesToChangeStencil");
static_assert(sizeof(BP_AJBInGameMovableStand_SXP_C_GetPrimitivesToChangeStencil) == 0x000040, "Wrong size on BP_AJBInGameMovableStand_SXP_C_GetPrimitivesToChangeStencil");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_GetPrimitivesToChangeStencil, StencilDigit) == 0x000000, "Member 'BP_AJBInGameMovableStand_SXP_C_GetPrimitivesToChangeStencil::StencilDigit' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_GetPrimitivesToChangeStencil, PrimitiveComponents) == 0x000008, "Member 'BP_AJBInGameMovableStand_SXP_C_GetPrimitivesToChangeStencil::PrimitiveComponents' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_GetPrimitivesToChangeStencil, Temp_Result) == 0x000018, "Member 'BP_AJBInGameMovableStand_SXP_C_GetPrimitivesToChangeStencil::Temp_Result' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_GetPrimitivesToChangeStencil, CallFunc_GetPrimitivesToChangeStencil_PrimitiveComponents) == 0x000028, "Member 'BP_AJBInGameMovableStand_SXP_C_GetPrimitivesToChangeStencil::CallFunc_GetPrimitivesToChangeStencil_PrimitiveComponents' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_SXP_C_GetPrimitivesToChangeStencil, CallFunc_Array_Add_ReturnValue) == 0x000038, "Member 'BP_AJBInGameMovableStand_SXP_C_GetPrimitivesToChangeStencil::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

}

