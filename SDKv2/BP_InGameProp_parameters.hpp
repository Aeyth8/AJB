#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InGameProp

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AJB_structs.hpp"


namespace SDK::Params
{

// Function BP_InGameProp.BP_InGameProp_C.OnPropDamaged__DelegateSignature
// 0x0040 (0x0040 - 0x0000)
struct BP_InGameProp_C_OnPropDamaged__DelegateSignature final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DamageForHPAP;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DamageForAAP;                                      // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CutDamage;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           DamageType;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         SerialNumber;                                      // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDamagePriority                               DamagePriority;                                    // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttackDistance;                                    // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DamageCauser;                                      // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bWithSeparetedStandAttack;                         // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bHitEnemysSeparatedStand;                          // 0x0039(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bPenetrateAP;                                      // 0x003A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_InGameProp_C_OnPropDamaged__DelegateSignature) == 0x000008, "Wrong alignment on BP_InGameProp_C_OnPropDamaged__DelegateSignature");
static_assert(sizeof(BP_InGameProp_C_OnPropDamaged__DelegateSignature) == 0x000040, "Wrong size on BP_InGameProp_C_OnPropDamaged__DelegateSignature");
static_assert(offsetof(BP_InGameProp_C_OnPropDamaged__DelegateSignature, DamagedActor) == 0x000000, "Member 'BP_InGameProp_C_OnPropDamaged__DelegateSignature::DamagedActor' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_OnPropDamaged__DelegateSignature, DamageForHPAP) == 0x000008, "Member 'BP_InGameProp_C_OnPropDamaged__DelegateSignature::DamageForHPAP' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_OnPropDamaged__DelegateSignature, DamageForAAP) == 0x00000C, "Member 'BP_InGameProp_C_OnPropDamaged__DelegateSignature::DamageForAAP' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_OnPropDamaged__DelegateSignature, CutDamage) == 0x000010, "Member 'BP_InGameProp_C_OnPropDamaged__DelegateSignature::CutDamage' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_OnPropDamaged__DelegateSignature, DamageType) == 0x000018, "Member 'BP_InGameProp_C_OnPropDamaged__DelegateSignature::DamageType' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_OnPropDamaged__DelegateSignature, SerialNumber) == 0x000020, "Member 'BP_InGameProp_C_OnPropDamaged__DelegateSignature::SerialNumber' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_OnPropDamaged__DelegateSignature, DamagePriority) == 0x000024, "Member 'BP_InGameProp_C_OnPropDamaged__DelegateSignature::DamagePriority' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_OnPropDamaged__DelegateSignature, AttackDistance) == 0x000028, "Member 'BP_InGameProp_C_OnPropDamaged__DelegateSignature::AttackDistance' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_OnPropDamaged__DelegateSignature, DamageCauser) == 0x000030, "Member 'BP_InGameProp_C_OnPropDamaged__DelegateSignature::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_OnPropDamaged__DelegateSignature, bWithSeparetedStandAttack) == 0x000038, "Member 'BP_InGameProp_C_OnPropDamaged__DelegateSignature::bWithSeparetedStandAttack' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_OnPropDamaged__DelegateSignature, bHitEnemysSeparatedStand) == 0x000039, "Member 'BP_InGameProp_C_OnPropDamaged__DelegateSignature::bHitEnemysSeparatedStand' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_OnPropDamaged__DelegateSignature, bPenetrateAP) == 0x00003A, "Member 'BP_InGameProp_C_OnPropDamaged__DelegateSignature::bPenetrateAP' has a wrong offset!");

// Function BP_InGameProp.BP_InGameProp_C.ExecuteUbergraph_BP_InGameProp
// 0x0088 (0x0088 - 0x0000)
struct BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x0008(0x0020)()
	class AActor*                                 K2Node_Event_DamageCauser;                         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_HitLocation;                          // 0x0030(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bPenetrating;                         // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Event_FactorTag;                            // 0x0040(0x0008)(NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_DamagedActor;                         // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_DamageForHPAP;                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_DamageForAAP;                         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_CutDamage;                            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Event_DamageType;                           // 0x0060(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_SerialNumber;                         // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDamagePriority                               K2Node_Event_DamagePriority;                       // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_AttackDistance;                       // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_DamageCauser1;                        // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_WithSeparatedStandAttack;             // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_HitEnemysSeparatedStand;              // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bPenetrateAP;                         // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bNotUseCollision;                     // 0x0083(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_MatchesAnyTags_ReturnValue;               // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp) == 0x000008, "Wrong alignment on BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp");
static_assert(sizeof(BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp) == 0x000088, "Wrong size on BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp");
static_assert(offsetof(BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp, EntryPoint) == 0x000000, "Member 'BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x000008, "Member 'BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp, K2Node_Event_DamageCauser) == 0x000028, "Member 'BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp::K2Node_Event_DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp, K2Node_Event_HitLocation) == 0x000030, "Member 'BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp::K2Node_Event_HitLocation' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp, K2Node_Event_bPenetrating) == 0x00003C, "Member 'BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp::K2Node_Event_bPenetrating' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp, K2Node_Event_FactorTag) == 0x000040, "Member 'BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp::K2Node_Event_FactorTag' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp, K2Node_Event_DamagedActor) == 0x000048, "Member 'BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp::K2Node_Event_DamagedActor' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp, K2Node_Event_DamageForHPAP) == 0x000050, "Member 'BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp::K2Node_Event_DamageForHPAP' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp, K2Node_Event_DamageForAAP) == 0x000054, "Member 'BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp::K2Node_Event_DamageForAAP' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp, K2Node_Event_CutDamage) == 0x000058, "Member 'BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp::K2Node_Event_CutDamage' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp, K2Node_Event_DamageType) == 0x000060, "Member 'BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp::K2Node_Event_DamageType' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp, K2Node_Event_SerialNumber) == 0x000068, "Member 'BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp::K2Node_Event_SerialNumber' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp, K2Node_Event_DamagePriority) == 0x00006C, "Member 'BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp::K2Node_Event_DamagePriority' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp, K2Node_Event_AttackDistance) == 0x000070, "Member 'BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp::K2Node_Event_AttackDistance' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp, K2Node_Event_DamageCauser1) == 0x000078, "Member 'BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp::K2Node_Event_DamageCauser1' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp, K2Node_Event_WithSeparatedStandAttack) == 0x000080, "Member 'BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp::K2Node_Event_WithSeparatedStandAttack' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp, K2Node_Event_HitEnemysSeparatedStand) == 0x000081, "Member 'BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp::K2Node_Event_HitEnemysSeparatedStand' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp, K2Node_Event_bPenetrateAP) == 0x000082, "Member 'BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp::K2Node_Event_bPenetrateAP' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp, K2Node_Event_bNotUseCollision) == 0x000083, "Member 'BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp::K2Node_Event_bNotUseCollision' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp, CallFunc_MatchesAnyTags_ReturnValue) == 0x000084, "Member 'BP_InGameProp_C_ExecuteUbergraph_BP_InGameProp::CallFunc_MatchesAnyTags_ReturnValue' has a wrong offset!");

// Function BP_InGameProp.BP_InGameProp_C.DamageOverlapped
// 0x0020 (0x0020 - 0x0000)
struct BP_InGameProp_C_DamageOverlapped final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitLocation;                                       // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPenetrating;                                      // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           FactorTag;                                         // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InGameProp_C_DamageOverlapped) == 0x000008, "Wrong alignment on BP_InGameProp_C_DamageOverlapped");
static_assert(sizeof(BP_InGameProp_C_DamageOverlapped) == 0x000020, "Wrong size on BP_InGameProp_C_DamageOverlapped");
static_assert(offsetof(BP_InGameProp_C_DamageOverlapped, DamageCauser) == 0x000000, "Member 'BP_InGameProp_C_DamageOverlapped::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_DamageOverlapped, HitLocation) == 0x000008, "Member 'BP_InGameProp_C_DamageOverlapped::HitLocation' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_DamageOverlapped, bPenetrating) == 0x000014, "Member 'BP_InGameProp_C_DamageOverlapped::bPenetrating' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_DamageOverlapped, FactorTag) == 0x000018, "Member 'BP_InGameProp_C_DamageOverlapped::FactorTag' has a wrong offset!");

// Function BP_InGameProp.BP_InGameProp_C.AJBDamage
// 0x0040 (0x0040 - 0x0000)
struct BP_InGameProp_C_AJBDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DamageForHPAP;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DamageForAAP;                                      // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CutDamage;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           DamageType;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         SerialNumber;                                      // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDamagePriority                               DamagePriority;                                    // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttackDistance;                                    // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DamageCauser;                                      // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WithSeparatedStandAttack;                          // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HitEnemysSeparatedStand;                           // 0x0039(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bPenetrateAP;                                      // 0x003A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bNotUseCollision;                                  // 0x003B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_InGameProp_C_AJBDamage) == 0x000008, "Wrong alignment on BP_InGameProp_C_AJBDamage");
static_assert(sizeof(BP_InGameProp_C_AJBDamage) == 0x000040, "Wrong size on BP_InGameProp_C_AJBDamage");
static_assert(offsetof(BP_InGameProp_C_AJBDamage, DamagedActor) == 0x000000, "Member 'BP_InGameProp_C_AJBDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_AJBDamage, DamageForHPAP) == 0x000008, "Member 'BP_InGameProp_C_AJBDamage::DamageForHPAP' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_AJBDamage, DamageForAAP) == 0x00000C, "Member 'BP_InGameProp_C_AJBDamage::DamageForAAP' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_AJBDamage, CutDamage) == 0x000010, "Member 'BP_InGameProp_C_AJBDamage::CutDamage' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_AJBDamage, DamageType) == 0x000018, "Member 'BP_InGameProp_C_AJBDamage::DamageType' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_AJBDamage, SerialNumber) == 0x000020, "Member 'BP_InGameProp_C_AJBDamage::SerialNumber' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_AJBDamage, DamagePriority) == 0x000024, "Member 'BP_InGameProp_C_AJBDamage::DamagePriority' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_AJBDamage, AttackDistance) == 0x000028, "Member 'BP_InGameProp_C_AJBDamage::AttackDistance' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_AJBDamage, DamageCauser) == 0x000030, "Member 'BP_InGameProp_C_AJBDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_AJBDamage, WithSeparatedStandAttack) == 0x000038, "Member 'BP_InGameProp_C_AJBDamage::WithSeparatedStandAttack' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_AJBDamage, HitEnemysSeparatedStand) == 0x000039, "Member 'BP_InGameProp_C_AJBDamage::HitEnemysSeparatedStand' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_AJBDamage, bPenetrateAP) == 0x00003A, "Member 'BP_InGameProp_C_AJBDamage::bPenetrateAP' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_AJBDamage, bNotUseCollision) == 0x00003B, "Member 'BP_InGameProp_C_AJBDamage::bNotUseCollision' has a wrong offset!");

// Function BP_InGameProp.BP_InGameProp_C.GetLastDamageInfo
// 0x0018 (0x0018 - 0x0000)
struct BP_InGameProp_C_GetLastDamageInfo final
{
public:
	class AActor*                                 LastDamageCauser_0;                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastDamageHitLocation_0;                           // 0x0008(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLastDamagePenetrating_0;                          // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_InGameProp_C_GetLastDamageInfo) == 0x000008, "Wrong alignment on BP_InGameProp_C_GetLastDamageInfo");
static_assert(sizeof(BP_InGameProp_C_GetLastDamageInfo) == 0x000018, "Wrong size on BP_InGameProp_C_GetLastDamageInfo");
static_assert(offsetof(BP_InGameProp_C_GetLastDamageInfo, LastDamageCauser_0) == 0x000000, "Member 'BP_InGameProp_C_GetLastDamageInfo::LastDamageCauser_0' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_GetLastDamageInfo, LastDamageHitLocation_0) == 0x000008, "Member 'BP_InGameProp_C_GetLastDamageInfo::LastDamageHitLocation_0' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_GetLastDamageInfo, bLastDamagePenetrating_0) == 0x000014, "Member 'BP_InGameProp_C_GetLastDamageInfo::bLastDamagePenetrating_0' has a wrong offset!");

// Function BP_InGameProp.BP_InGameProp_C.CheckTargetSelf
// 0x0010 (0x0010 - 0x0000)
struct BP_InGameProp_C_CheckTargetSelf final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bForDamageOverlap;                                 // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIgnoreMovableStand;                               // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bTarget;                                           // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_InGameProp_C_CheckTargetSelf) == 0x000008, "Wrong alignment on BP_InGameProp_C_CheckTargetSelf");
static_assert(sizeof(BP_InGameProp_C_CheckTargetSelf) == 0x000010, "Wrong size on BP_InGameProp_C_CheckTargetSelf");
static_assert(offsetof(BP_InGameProp_C_CheckTargetSelf, DamageCauser) == 0x000000, "Member 'BP_InGameProp_C_CheckTargetSelf::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_CheckTargetSelf, bForDamageOverlap) == 0x000008, "Member 'BP_InGameProp_C_CheckTargetSelf::bForDamageOverlap' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_CheckTargetSelf, bIgnoreMovableStand) == 0x000009, "Member 'BP_InGameProp_C_CheckTargetSelf::bIgnoreMovableStand' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_CheckTargetSelf, bTarget) == 0x00000A, "Member 'BP_InGameProp_C_CheckTargetSelf::bTarget' has a wrong offset!");

// Function BP_InGameProp.BP_InGameProp_C.OwnHitParam
// 0x0018 (0x0018 - 0x0000)
struct BP_InGameProp_C_OwnHitParam final
{
public:
	bool                                          bCharacter;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bLeftAP;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ParticleTagBlockedByAAP;                           // 0x0008(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SETagBlockedByAAP;                                 // 0x0010(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InGameProp_C_OwnHitParam) == 0x000008, "Wrong alignment on BP_InGameProp_C_OwnHitParam");
static_assert(sizeof(BP_InGameProp_C_OwnHitParam) == 0x000018, "Wrong size on BP_InGameProp_C_OwnHitParam");
static_assert(offsetof(BP_InGameProp_C_OwnHitParam, bCharacter) == 0x000000, "Member 'BP_InGameProp_C_OwnHitParam::bCharacter' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_OwnHitParam, bLeftAP) == 0x000001, "Member 'BP_InGameProp_C_OwnHitParam::bLeftAP' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_OwnHitParam, ParticleTagBlockedByAAP) == 0x000008, "Member 'BP_InGameProp_C_OwnHitParam::ParticleTagBlockedByAAP' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_OwnHitParam, SETagBlockedByAAP) == 0x000010, "Member 'BP_InGameProp_C_OwnHitParam::SETagBlockedByAAP' has a wrong offset!");

// Function BP_InGameProp.BP_InGameProp_C.IfCheckDamageOverlap
// 0x0001 (0x0001 - 0x0000)
struct BP_InGameProp_C_IfCheckDamageOverlap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_InGameProp_C_IfCheckDamageOverlap) == 0x000001, "Wrong alignment on BP_InGameProp_C_IfCheckDamageOverlap");
static_assert(sizeof(BP_InGameProp_C_IfCheckDamageOverlap) == 0x000001, "Wrong size on BP_InGameProp_C_IfCheckDamageOverlap");
static_assert(offsetof(BP_InGameProp_C_IfCheckDamageOverlap, ReturnValue) == 0x000000, "Member 'BP_InGameProp_C_IfCheckDamageOverlap::ReturnValue' has a wrong offset!");

// Function BP_InGameProp.BP_InGameProp_C.CheckDisableDamage
// 0x0010 (0x0010 - 0x0000)
struct BP_InGameProp_C_CheckDisableDamage final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisableDamage;                                    // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_InGameProp_C_CheckDisableDamage) == 0x000008, "Wrong alignment on BP_InGameProp_C_CheckDisableDamage");
static_assert(sizeof(BP_InGameProp_C_CheckDisableDamage) == 0x000010, "Wrong size on BP_InGameProp_C_CheckDisableDamage");
static_assert(offsetof(BP_InGameProp_C_CheckDisableDamage, DamageCauser) == 0x000000, "Member 'BP_InGameProp_C_CheckDisableDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_CheckDisableDamage, bDisableDamage) == 0x000008, "Member 'BP_InGameProp_C_CheckDisableDamage::bDisableDamage' has a wrong offset!");

// Function BP_InGameProp.BP_InGameProp_C.CheckDisablePassive
// 0x0018 (0x0018 - 0x0000)
struct BP_InGameProp_C_CheckDisablePassive final
{
public:
	class AActor*                                 PassiveCauser;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           PassiveTag;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisablePassive;                                   // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_InGameProp_C_CheckDisablePassive) == 0x000008, "Wrong alignment on BP_InGameProp_C_CheckDisablePassive");
static_assert(sizeof(BP_InGameProp_C_CheckDisablePassive) == 0x000018, "Wrong size on BP_InGameProp_C_CheckDisablePassive");
static_assert(offsetof(BP_InGameProp_C_CheckDisablePassive, PassiveCauser) == 0x000000, "Member 'BP_InGameProp_C_CheckDisablePassive::PassiveCauser' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_CheckDisablePassive, PassiveTag) == 0x000008, "Member 'BP_InGameProp_C_CheckDisablePassive::PassiveTag' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_CheckDisablePassive, bDisablePassive) == 0x000010, "Member 'BP_InGameProp_C_CheckDisablePassive::bDisablePassive' has a wrong offset!");

// Function BP_InGameProp.BP_InGameProp_C.CheckDisableAreaDamage
// 0x0001 (0x0001 - 0x0000)
struct BP_InGameProp_C_CheckDisableAreaDamage final
{
public:
	bool                                          bDisableAreadamage;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_InGameProp_C_CheckDisableAreaDamage) == 0x000001, "Wrong alignment on BP_InGameProp_C_CheckDisableAreaDamage");
static_assert(sizeof(BP_InGameProp_C_CheckDisableAreaDamage) == 0x000001, "Wrong size on BP_InGameProp_C_CheckDisableAreaDamage");
static_assert(offsetof(BP_InGameProp_C_CheckDisableAreaDamage, bDisableAreadamage) == 0x000000, "Member 'BP_InGameProp_C_CheckDisableAreaDamage::bDisableAreadamage' has a wrong offset!");

// Function BP_InGameProp.BP_InGameProp_C.CheckNoDamage
// 0x0010 (0x0010 - 0x0000)
struct BP_InGameProp_C_CheckNoDamage final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNoDamage;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_InGameProp_C_CheckNoDamage) == 0x000008, "Wrong alignment on BP_InGameProp_C_CheckNoDamage");
static_assert(sizeof(BP_InGameProp_C_CheckNoDamage) == 0x000010, "Wrong size on BP_InGameProp_C_CheckNoDamage");
static_assert(offsetof(BP_InGameProp_C_CheckNoDamage, DamageCauser) == 0x000000, "Member 'BP_InGameProp_C_CheckNoDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_CheckNoDamage, bNoDamage) == 0x000008, "Member 'BP_InGameProp_C_CheckNoDamage::bNoDamage' has a wrong offset!");

// Function BP_InGameProp.BP_InGameProp_C.IsReactedByReticule
// 0x0001 (0x0001 - 0x0000)
struct BP_InGameProp_C_IsReactedByReticule final
{
public:
	bool                                          bResult;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_InGameProp_C_IsReactedByReticule) == 0x000001, "Wrong alignment on BP_InGameProp_C_IsReactedByReticule");
static_assert(sizeof(BP_InGameProp_C_IsReactedByReticule) == 0x000001, "Wrong size on BP_InGameProp_C_IsReactedByReticule");
static_assert(offsetof(BP_InGameProp_C_IsReactedByReticule, bResult) == 0x000000, "Member 'BP_InGameProp_C_IsReactedByReticule::bResult' has a wrong offset!");

// Function BP_InGameProp.BP_InGameProp_C.IgnoreTrace
// 0x0001 (0x0001 - 0x0000)
struct BP_InGameProp_C_IgnoreTrace final
{
public:
	bool                                          bIgnore;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_InGameProp_C_IgnoreTrace) == 0x000001, "Wrong alignment on BP_InGameProp_C_IgnoreTrace");
static_assert(sizeof(BP_InGameProp_C_IgnoreTrace) == 0x000001, "Wrong size on BP_InGameProp_C_IgnoreTrace");
static_assert(offsetof(BP_InGameProp_C_IgnoreTrace, bIgnore) == 0x000000, "Member 'BP_InGameProp_C_IgnoreTrace::bIgnore' has a wrong offset!");

// Function BP_InGameProp.BP_InGameProp_C.CheckDisableDirectDamage
// 0x0010 (0x0010 - 0x0000)
struct BP_InGameProp_C_CheckDisableDirectDamage final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisableDirectDamage;                              // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_InGameProp_C_CheckDisableDirectDamage) == 0x000008, "Wrong alignment on BP_InGameProp_C_CheckDisableDirectDamage");
static_assert(sizeof(BP_InGameProp_C_CheckDisableDirectDamage) == 0x000010, "Wrong size on BP_InGameProp_C_CheckDisableDirectDamage");
static_assert(offsetof(BP_InGameProp_C_CheckDisableDirectDamage, DamageCauser) == 0x000000, "Member 'BP_InGameProp_C_CheckDisableDirectDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_InGameProp_C_CheckDisableDirectDamage, bDisableDirectDamage) == 0x000008, "Member 'BP_InGameProp_C_CheckDisableDirectDamage::bDisableDirectDamage' has a wrong offset!");

}

