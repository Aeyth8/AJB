#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBPlacementTrapBase

#include "Basic.hpp"

#include "E_GionSpawnedSpace_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_AJBPlacementBase_classes.hpp"
#include "AJB_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBPlacementTrapBase.BP_AJBPlacementTrapBase_C
// 0x00C8 (0x0440 - 0x0378)
class ABP_AJBPlacementTrapBase_C : public ABP_AJBPlacementBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBPlacementTrapBase_C;          // 0x0378(0x0008)(Transient, DuplicateTransient)
	class UNavModifierComponent*                  NavModifier;                                       // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AAJBInGameCharacterBase*                HitCharacter;                                      // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TriggeringParticleTag;                             // 0x0390(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TriggeringGionTag;                                 // 0x0398(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         Damage;                                            // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTriggeringGion_HitCharacterToGionOwner;           // 0x03A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_GionSpawnedSpace                            TriggeringGionSpawnedSpaceInOwnersEnv;             // 0x03A5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_GionSpawnedSpace                            TriggeringGionSpawnedSpaceInNotOwnersEnv;          // 0x03A6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A7[0x1];                                      // 0x03A7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           StandbyGionTag;                                    // 0x03A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bCollisionDisableByTheWorld;                       // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           TriggeringSETag;                                   // 0x03B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           StandbySETag;                                      // 0x03C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         PassiveDuration;                                   // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldAttackHitCallOnTriggering;                  // 0x03CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3CD[0x3];                                      // 0x03CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 EnabledNavAreaClassOnTrainingMode;                 // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 EnabledNavAreaClassOnOtherMode;                    // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 DisabledNavAreaClass;                              // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseMultipleCollision;                             // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E9[0x3];                                      // 0x03E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MultipleCollisionDivisionX;                        // 0x03EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MultipleCollisionDivisionY;                        // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MultipleCollisionDivisionZ;                        // 0x03F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CollisionSize;                                     // 0x03F8(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CollisionOffset;                                   // 0x0404(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UBoxComponent*>                  BoxCollisionList;                                  // 0x0410(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         BoxExtentScale;                                    // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseBoxCollisionProcessOnOverlap;                  // 0x0424(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUseBoxCollisionProcessOnSpawn;                    // 0x0425(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_426[0x2];                                      // 0x0426(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TraceStartXOffset;                                 // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42C[0x4];                                      // 0x042C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SkillParamFileName;                                // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   PlacementParamFileName;                            // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBPlacementTrapBase(int32 EntryPoint);
	void PreInitializeComponentsBP();
	void MC_AttackHit();
	void OnComponentBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BindOverlap(class UBoxComponent* BoxCollision);
	void OnHit(class AAJBInGameCharacterBase* HitCharacter_0);
	void OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void NotifyHitEvent_Client(class AAJBInGameCharacterBase* HitCharacter_0, class AActor* Causer);
	void NotifyHitEvent_Server(class AAJBInGameCharacterBase* HitCharacter_0, class AActor* Causer);
	void ChangeCollisionEnable(bool bEnable);
	void AdditionalHitJudgment(class AActor* HitActor, bool* bResult);
	void DamageProcess();
	void CheckCollisionEnable(bool* bEnable);
	void OnBeginState_Prepare();
	void OnBeginState_Triggering_OneShot();
	void OnBeginState_Standby_OneShot();
	void OnBeginState_Clearing();
	void OnBeginState_Standby();
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);
	void UserConstructionScript();
	void AddMultipleBoxCollision();
	void BoxCollisionProcessOnSpawn(const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& DividedCollisionSize, bool* bShouldSpawn);
	void ChangeCollisionEnableSpecified(class UBoxComponent* BoxCollision, bool bEnable);
	void DestroySpecifiedBoxCollision(class UBoxComponent* BoxCollision);
	void BoxCollisionProcessOnOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, bool* bDestroyed);
	void GetCauserOwnerCharacterBP(class ABP_AJBInGameCharacter_C** CharacterBP);
	void GetPassiveSkillTag(struct FGameplayTag* PassiveSkillTag);
	void GetDuration(float* Duration);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBPlacementTrapBase_C">();
	}
	static class ABP_AJBPlacementTrapBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBPlacementTrapBase_C>();
	}
};
static_assert(alignof(ABP_AJBPlacementTrapBase_C) == 0x000008, "Wrong alignment on ABP_AJBPlacementTrapBase_C");
static_assert(sizeof(ABP_AJBPlacementTrapBase_C) == 0x000440, "Wrong size on ABP_AJBPlacementTrapBase_C");
static_assert(offsetof(ABP_AJBPlacementTrapBase_C, UberGraphFrame_BP_AJBPlacementTrapBase_C) == 0x000378, "Member 'ABP_AJBPlacementTrapBase_C::UberGraphFrame_BP_AJBPlacementTrapBase_C' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementTrapBase_C, NavModifier) == 0x000380, "Member 'ABP_AJBPlacementTrapBase_C::NavModifier' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementTrapBase_C, HitCharacter) == 0x000388, "Member 'ABP_AJBPlacementTrapBase_C::HitCharacter' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementTrapBase_C, TriggeringParticleTag) == 0x000390, "Member 'ABP_AJBPlacementTrapBase_C::TriggeringParticleTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementTrapBase_C, TriggeringGionTag) == 0x000398, "Member 'ABP_AJBPlacementTrapBase_C::TriggeringGionTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementTrapBase_C, Damage) == 0x0003A0, "Member 'ABP_AJBPlacementTrapBase_C::Damage' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementTrapBase_C, bTriggeringGion_HitCharacterToGionOwner) == 0x0003A4, "Member 'ABP_AJBPlacementTrapBase_C::bTriggeringGion_HitCharacterToGionOwner' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementTrapBase_C, TriggeringGionSpawnedSpaceInOwnersEnv) == 0x0003A5, "Member 'ABP_AJBPlacementTrapBase_C::TriggeringGionSpawnedSpaceInOwnersEnv' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementTrapBase_C, TriggeringGionSpawnedSpaceInNotOwnersEnv) == 0x0003A6, "Member 'ABP_AJBPlacementTrapBase_C::TriggeringGionSpawnedSpaceInNotOwnersEnv' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementTrapBase_C, StandbyGionTag) == 0x0003A8, "Member 'ABP_AJBPlacementTrapBase_C::StandbyGionTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementTrapBase_C, bCollisionDisableByTheWorld) == 0x0003B0, "Member 'ABP_AJBPlacementTrapBase_C::bCollisionDisableByTheWorld' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementTrapBase_C, TriggeringSETag) == 0x0003B8, "Member 'ABP_AJBPlacementTrapBase_C::TriggeringSETag' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementTrapBase_C, StandbySETag) == 0x0003C0, "Member 'ABP_AJBPlacementTrapBase_C::StandbySETag' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementTrapBase_C, PassiveDuration) == 0x0003C8, "Member 'ABP_AJBPlacementTrapBase_C::PassiveDuration' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementTrapBase_C, bShouldAttackHitCallOnTriggering) == 0x0003CC, "Member 'ABP_AJBPlacementTrapBase_C::bShouldAttackHitCallOnTriggering' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementTrapBase_C, EnabledNavAreaClassOnTrainingMode) == 0x0003D0, "Member 'ABP_AJBPlacementTrapBase_C::EnabledNavAreaClassOnTrainingMode' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementTrapBase_C, EnabledNavAreaClassOnOtherMode) == 0x0003D8, "Member 'ABP_AJBPlacementTrapBase_C::EnabledNavAreaClassOnOtherMode' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementTrapBase_C, DisabledNavAreaClass) == 0x0003E0, "Member 'ABP_AJBPlacementTrapBase_C::DisabledNavAreaClass' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementTrapBase_C, bUseMultipleCollision) == 0x0003E8, "Member 'ABP_AJBPlacementTrapBase_C::bUseMultipleCollision' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementTrapBase_C, MultipleCollisionDivisionX) == 0x0003EC, "Member 'ABP_AJBPlacementTrapBase_C::MultipleCollisionDivisionX' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementTrapBase_C, MultipleCollisionDivisionY) == 0x0003F0, "Member 'ABP_AJBPlacementTrapBase_C::MultipleCollisionDivisionY' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementTrapBase_C, MultipleCollisionDivisionZ) == 0x0003F4, "Member 'ABP_AJBPlacementTrapBase_C::MultipleCollisionDivisionZ' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementTrapBase_C, CollisionSize) == 0x0003F8, "Member 'ABP_AJBPlacementTrapBase_C::CollisionSize' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementTrapBase_C, CollisionOffset) == 0x000404, "Member 'ABP_AJBPlacementTrapBase_C::CollisionOffset' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementTrapBase_C, BoxCollisionList) == 0x000410, "Member 'ABP_AJBPlacementTrapBase_C::BoxCollisionList' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementTrapBase_C, BoxExtentScale) == 0x000420, "Member 'ABP_AJBPlacementTrapBase_C::BoxExtentScale' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementTrapBase_C, bUseBoxCollisionProcessOnOverlap) == 0x000424, "Member 'ABP_AJBPlacementTrapBase_C::bUseBoxCollisionProcessOnOverlap' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementTrapBase_C, bUseBoxCollisionProcessOnSpawn) == 0x000425, "Member 'ABP_AJBPlacementTrapBase_C::bUseBoxCollisionProcessOnSpawn' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementTrapBase_C, TraceStartXOffset) == 0x000428, "Member 'ABP_AJBPlacementTrapBase_C::TraceStartXOffset' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementTrapBase_C, SkillParamFileName) == 0x000430, "Member 'ABP_AJBPlacementTrapBase_C::SkillParamFileName' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementTrapBase_C, PlacementParamFileName) == 0x000438, "Member 'ABP_AJBPlacementTrapBase_C::PlacementParamFileName' has a wrong offset!");

}

