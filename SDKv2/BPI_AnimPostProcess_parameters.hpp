#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_AnimPostProcess

#include "Basic.hpp"

#include "ELipType_structs.hpp"


namespace SDK::Params
{

// Function BPI_AnimPostProcess.BPI_AnimPostProcess_C.SetEnableLip
// 0x0001 (0x0001 - 0x0000)
struct BPI_AnimPostProcess_C_SetEnableLip final
{
public:
	bool                                          NewFlag;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_AnimPostProcess_C_SetEnableLip) == 0x000001, "Wrong alignment on BPI_AnimPostProcess_C_SetEnableLip");
static_assert(sizeof(BPI_AnimPostProcess_C_SetEnableLip) == 0x000001, "Wrong size on BPI_AnimPostProcess_C_SetEnableLip");
static_assert(offsetof(BPI_AnimPostProcess_C_SetEnableLip, NewFlag) == 0x000000, "Member 'BPI_AnimPostProcess_C_SetEnableLip::NewFlag' has a wrong offset!");

// Function BPI_AnimPostProcess.BPI_AnimPostProcess_C.SetLipAnimSequence
// 0x0028 (0x0028 - 0x0000)
struct BPI_AnimPostProcess_C_SetLipAnimSequence final
{
public:
	class UAnimSequenceBase*                      Lip_A;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Lip_I;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Lip_U;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Lip_E;                                             // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Lip_O;                                             // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AnimPostProcess_C_SetLipAnimSequence) == 0x000008, "Wrong alignment on BPI_AnimPostProcess_C_SetLipAnimSequence");
static_assert(sizeof(BPI_AnimPostProcess_C_SetLipAnimSequence) == 0x000028, "Wrong size on BPI_AnimPostProcess_C_SetLipAnimSequence");
static_assert(offsetof(BPI_AnimPostProcess_C_SetLipAnimSequence, Lip_A) == 0x000000, "Member 'BPI_AnimPostProcess_C_SetLipAnimSequence::Lip_A' has a wrong offset!");
static_assert(offsetof(BPI_AnimPostProcess_C_SetLipAnimSequence, Lip_I) == 0x000008, "Member 'BPI_AnimPostProcess_C_SetLipAnimSequence::Lip_I' has a wrong offset!");
static_assert(offsetof(BPI_AnimPostProcess_C_SetLipAnimSequence, Lip_U) == 0x000010, "Member 'BPI_AnimPostProcess_C_SetLipAnimSequence::Lip_U' has a wrong offset!");
static_assert(offsetof(BPI_AnimPostProcess_C_SetLipAnimSequence, Lip_E) == 0x000018, "Member 'BPI_AnimPostProcess_C_SetLipAnimSequence::Lip_E' has a wrong offset!");
static_assert(offsetof(BPI_AnimPostProcess_C_SetLipAnimSequence, Lip_O) == 0x000020, "Member 'BPI_AnimPostProcess_C_SetLipAnimSequence::Lip_O' has a wrong offset!");

// Function BPI_AnimPostProcess.BPI_AnimPostProcess_C.UpdateLipType
// 0x0001 (0x0001 - 0x0000)
struct BPI_AnimPostProcess_C_UpdateLipType final
{
public:
	ELipType                                      NewType;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AnimPostProcess_C_UpdateLipType) == 0x000001, "Wrong alignment on BPI_AnimPostProcess_C_UpdateLipType");
static_assert(sizeof(BPI_AnimPostProcess_C_UpdateLipType) == 0x000001, "Wrong size on BPI_AnimPostProcess_C_UpdateLipType");
static_assert(offsetof(BPI_AnimPostProcess_C_UpdateLipType, NewType) == 0x000000, "Member 'BPI_AnimPostProcess_C_UpdateLipType::NewType' has a wrong offset!");

// Function BPI_AnimPostProcess.BPI_AnimPostProcess_C.UpdateLipBlendTime
// 0x0004 (0x0004 - 0x0000)
struct BPI_AnimPostProcess_C_UpdateLipBlendTime final
{
public:
	float                                         NewBlendTime;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AnimPostProcess_C_UpdateLipBlendTime) == 0x000004, "Wrong alignment on BPI_AnimPostProcess_C_UpdateLipBlendTime");
static_assert(sizeof(BPI_AnimPostProcess_C_UpdateLipBlendTime) == 0x000004, "Wrong size on BPI_AnimPostProcess_C_UpdateLipBlendTime");
static_assert(offsetof(BPI_AnimPostProcess_C_UpdateLipBlendTime, NewBlendTime) == 0x000000, "Member 'BPI_AnimPostProcess_C_UpdateLipBlendTime::NewBlendTime' has a wrong offset!");

}

