#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBOutGameProxy

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "AJB_structs.hpp"
#include "AJB_classes.hpp"
#include "NetCommon_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBOutGameProxy.BP_AJBOutGameProxy_C
// 0x0288 (0x0690 - 0x0408)
class ABP_AJBOutGameProxy_C final : public AAJBOutGameProxy
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0408(0x0008)(Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnSelectedStartLocation;                           // 0x0418(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnTimeOutStartLocation;                            // 0x0428(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnFinishedMatchingDataUpdate;                      // 0x0438(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnFinishMatching;                                  // 0x0448(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FTimerHandle                           CheckTimer;                                        // 0x0458(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	UMulticastDelegateProperty_                   OnLoginOtherPlayer;                                // 0x0460(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         LastCheckPlayerNum;                                // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_474[0x4];                                      // 0x0474(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNetHttp*                               NetHttp;                                           // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNetSocket*                             NetSocket;                                         // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnUpdateDamageArea;                                // 0x0488(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         MatchingTimeOutSecond;                             // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49C[0x4];                                      // 0x049C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnUpdatePairMatchingRoomInfo;                      // 0x04A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnCreatedRoom;                                     // 0x04B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnDeletedRoom;                                     // 0x04C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnPairMatched;                                     // 0x04D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnResponseRandomPairMatch;                         // 0x04E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnEnterRoom;                                       // 0x04F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         DisconnectCount;                                   // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ErrorDisconnectCount;                              // 0x0504(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnUpdateTenpoRoom;                                 // 0x0508(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnTenpoEnterRoom;                                  // 0x0518(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnTenpoDeleteRoom;                                 // 0x0528(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnFinishedTenpoMatching;                           // 0x0538(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnChangedSelectCharacter;                          // 0x0548(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bIsDecisionTenpoMatching;                          // 0x0558(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsClientReplicated;                                // 0x0559(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55A[0x6];                                      // 0x055A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnUpdateTenpoGameSettings;                         // 0x0560(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bIsFinishedTenpoMatching;                          // 0x0570(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_571[0x7];                                      // 0x0571(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnStartTenpoMatchingHost;                          // 0x0578(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FDateTime                              SocketConnectStartTime;                            // 0x0588(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         SocketDisconnectSeconds;                           // 0x0590(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_594[0x4];                                      // 0x0594(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnStartTenpoMatchingClinet;                        // 0x0598(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnChangeStatusTenpoRoom;                           // 0x05A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnBreakupMatching;                                 // 0x05B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         CharacterSelectTimeoutSecond;                      // 0x05C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CC[0x4];                                      // 0x05CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CharacterSelectTimeoutTimer;                       // 0x05D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDateTime                              TenpoConnectStartDateTime;                         // 0x05D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         TenpoTimeOutSecond;                                // 0x05E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E4[0x4];                                      // 0x05E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TenpoEnterTimeOutTimer;                            // 0x05E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class UBP_AJBExtendBPLock_C*                  ExtendBPLockComponent;                             // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCloseTenpoMatching;                              // 0x05F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5F9[0x7];                                      // 0x05F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           RandomPairMatchTimeOutTimer;                       // 0x0600(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	int32                                         RetryMax;                                          // 0x0608(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsSuccessedTenpoMathc;                            // 0x060C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_60D[0x3];                                      // 0x060D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnFailedStartedMatching;                           // 0x0610(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         ExpendPairRoomTimer;                               // 0x0620(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_624[0x4];                                      // 0x0624(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ExpendPairRoomTimerHandle;                         // 0x0628(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	int32                                         SelectedPairRoomNo;                                // 0x0630(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_634[0x4];                                      // 0x0634(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnTimeoutPairMatchingRoom;                         // 0x0638(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         ServerTestIntervalSec;                             // 0x0648(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64C[0x4];                                      // 0x064C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ServerTestTimer;                                   // 0x0650(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	float                                         ServerTestTimeOutSec;                              // 0x0658(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RandomMatchTimeOut;                                // 0x065C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnStartWaitPairIDMatching;                         // 0x0660(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnTimeoutPairIDMatching;                           // 0x0670(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnDeletePairIDMatch;                               // 0x0680(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void OnSelectedStartLocation__DelegateSignature(EResultStartLocation Result, int32 X, int32 Y, const class FString& GameServerUserID);
	void OnTimeOutStartLocation__DelegateSignature();
	void OnFinishedMatchingDataUpdate__DelegateSignature();
	void OnFinishMatching__DelegateSignature();
	void OnLoginOtherPlayer__DelegateSignature(int32 PlayerNum);
	void OnUpdateDamageArea__DelegateSignature();
	void OnUpdatePairMatchingRoomInfo__DelegateSignature();
	void OnCreatedRoom__DelegateSignature(bool bSuccess);
	void OnDeletedRoom__DelegateSignature(bool bSuccess);
	void OnPairMatched__DelegateSignature(bool bSuccess, const struct FMatchingPlayerInfo& PairMatchingPlayerInfo);
	void OnResponseRandomPairMatch__DelegateSignature(bool bSuccess, const struct FMatchingPlayerInfo& PearMatchingPlayerInfo);
	void OnEnterRoom__DelegateSignature(bool bSuccess);
	void OnUpdateTenpoRoom__DelegateSignature();
	void OnTenpoEnterRoom__DelegateSignature(bool bSuccess);
	void OnTenpoDeleteRoom__DelegateSignature(bool bIsHost, bool bSuccess);
	void OnFinishedTenpoMatching__DelegateSignature();
	void OnChangedSelectCharacter__DelegateSignature(const struct FMatchingPlayerInfo& PairPlayerInfo, bool IsFinished);
	void OnUpdateTenpoGameSettings__DelegateSignature(bool IsExchangeMode);
	void OnStartTenpoMatchingHost__DelegateSignature(bool bIsSuccess);
	void OnStartTenpoMatchingClinet__DelegateSignature();
	void OnChangeStatusTenpoRoom__DelegateSignature();
	void OnBreakupMatching__DelegateSignature();
	void OnFailedStartedMatching__DelegateSignature();
	void OnTimeoutPairMatchingRoom__DelegateSignature();
	void OnStartWaitPairIDMatching__DelegateSignature(float RemainTime);
	void OnTimeoutPairIDMatching__DelegateSignature();
	void OnDeletePairIDMatch__DelegateSignature();
	void ExecuteUbergraph_BP_AJBOutGameProxy(int32 EntryPoint);
	void ROS_SendClientReplicated(uint8 SelectedCharacterID, const class FString& CustomData);
	void ROS_OnStopMatching();
	void ROC_UpdateDamageAreaInfo(int32 AreaTypeID, const struct FVector& DamageAreaCenter, float DamageAreaRadius, float SelectAreaSize);
	void ROS_UpdateDamageAreaInfo();
	void ReceiveBeginPlay();
	void ROC_LoginOtherPlayer(int32 PlayerNum);
	void ROC_ResponseInGameInfo(const struct FDateTime& MatchEndTime);
	void ROC_ResponseSelectEndTime(const struct FDateTime& EndTime);
	void ROS_RequestSelectEndTime();
	void ROC_TimeOutSelectStartLocation();
	void CheckTimeoutSelectStartLocation();
	void ROS_BeginSelectStartLocation();
	void OnCheckMatching();
	void ROS_StartMatching(uint8 CharacterID);
	void ROC_FinishMatching();
	void ROC_UpdateMatchingNPC(uint8 Team_ID, uint8 Charactor_ID, uint8 StartLocationX, uint8 StartLocationY, uint8 CheckIndex);
	void ROS_UpdateMatchingNPC(uint8 CheckIndex);
	void RequestUpdateMatchingData();
	void RequestUpdateMatchingPlayerInfo();
	void ROC_ResponseMatchingPlayerInfo(uint8 PlayerID, uint8 Team_ID, const class FString& Name_0, uint8 Charactor_ID, uint8 CheckIndex);
	void ROS_RequestMatchingPlayerInfo(uint8 CheckIndex);
	void ROC_SelectedStartLocation(EResultStartLocation Result, uint8 Player_ID, uint8 X, uint8 Y);
	void ROS_SelectStartLocation(uint8 PlayerID, uint8 X, uint8 Y);
	void OnNotHeldMatching();
	void OnSuccessBreakupmatching();
	void GotoInGame();
	void WaitStartMatching();
	void OnServerError();
	void OnFaildMatching();
	void GameServer_CheckTimeOutSelectStartLocation();
	void OnFinishedSelectedStartLocation();
	void OnUpdateNPCInfo();
	void OnCheckMatching_Local();
	void OnStartMatching();
	void OnUpdateMatchingStatus(bool bComplete);
	void OnResponseSelectStartLocation(EResultStartLocation Result, int32 X, int32 Y, const class FString& UserID);
	void OnResponseDeletePairIDMatch(bool bSuccess);
	void OnResponseTimeoutPairIDMatching();
	void OnResponsePairIDMatching(bool bSuccessMatching, int32 RemainTime);
	void OnResponseTimeoutPairMatching();
	void OnExpendPairRoom();
	void OnTimeOutRandomMatching();
	void OnTimeupCharacterSelect();
	void OnResponseRandomPairMatching(bool bSuccessMatching);
	void OnNotifyUpdatePairMatchingRoomInfo();
	void OnResponsePairMatching(bool bSuccessMatching, const struct FMatchingPlayerInfo& PairMatchingPlayerInfo);
	void OnResponseEnterRoom(bool bSuccess);
	void OnResponseDeleteRoom(bool bSuccess);
	void OnResponseCreateRoom(bool bSuccess);
	void OnNotifyUpdateSelectCharacter(bool bFinished, const struct FRoomPlayerInfo& RoomPlayerInfo);
	void WaitConnectPairMatchingRoom();
	void OnNotifyFailedStartedMatch();
	void OnResponseUpdateTenpoRoomInfo();
	void OnTenpoEnterRoomTimeOut();
	void OnTimeOutTenpoCharacterSelect();
	void OnNotifyTenpoGameSettings(int32 CPUNum, bool ExchangeMode);
	void OnNotifyUpdateTenpoMatching(ETenpoMatchingResult Result);
	void WaitTenpoHostLogined();
	void OnResponseTenpoStartMatching(bool bSuccess);
	void OnFinieshedLoginTenpoMatching();
	void OnResponseTenpoDeleteRoom(bool bSuccess);
	void OnResponseTenpoEnterRoom(bool bSuccess, ETenpoRoomEnterResult Result);
	void OnNotifyUpdateTenpoRoomInfo();
	void WaitConnectTenpoMatching();
	void ROC_DownloadCustomData(uint8 PlayerID, const class FString& EncodeCustomData_0, uint8 CharacterID, uint8 Index_0);
	void ROS_StartUpdateCustomData(uint8 Index_0);
	void ResuestUpdateCustomData();
	void UserConstructionScript();
	void SelectStartLocation(const struct FStartLocation& StartLocation);
	void SetStartLocation_LocalGameInstance(uint8 PlayerID, const struct FStartLocation& Start_Location);
	void TrySelectStartLocation(uint8 PlayerID, const struct FStartLocation& SelectStartLocation, EResultStartLocation* Result);
	void JoinMatching();
	void BeginSelectStartLocation();
	void InitializeNetAPI();
	void OnNetSocketResponse(class UNetSocketEvent* Event);
	void NetSocketConnect(bool bIsRetry);
	void NetSocketDisconnect();
	void RequestSocket_GetRoomInfo();
	void RequestSocket_CreateRoom(int32 RoomNo);
	void RequestSocket_DeleteRoom();
	void RequestSocket_PairRandomMatch();
	void RequestSocket_Tenpo_GetRoomInfo();
	void RequestSocket_Tenpo_EnterRoom(int32 TimeLimit);
	void RequestSocket_Tenpo_ExitRoom();
	void RequestSocket_Tenpo_GameSetting(bool IsExchangeMode);
	void RequestSocket_ChangeCharacter();
	void RequestSocket_StartLocation_GetNPCInfo();
	void RequestSocket_StartLocation_GetPlayerInfo(int32 X, int32 Y);
	void RequestSocket_MatchingStart(bool IsReconnect);
	void RequestSocket_EnterRoom(int32 RoomNo);
	void AddMatchingPlayerInfoLocal(uint8 PlayerID, const class FString& PlayerName, uint8 TeamID, uint8 CharactorID);
	void IsRuntimeMatching(bool* Is);
	void SetDummyData(int32 MatchingPlayerNum);
	void AddDummyData(uint8 PlayerID, const class FString& GameServerUserID, const class FString& Temp);
	void OpenNextLevel();
	void OpenNoticeErrorLevel(EAJBNetAPIResult Result);
	float CalcMatchingTimeoutSecond();
	void StartPairMatchingRoom();
	void RequestCreateRoom(int32 RoomNo);
	void RequestRoomIn(int32 RoomNo);
	void RequestRandomPairMatch();
	void StartCharacterSelect();
	void RequestSocket_StartLocation_PartnerNPC(int32 X, int32 Y);
	void RequestDeleteRoom();
	void StartTenpoRoomMatching();
	void RequestEnterTenpoRoom(int32 TimeLimit);
	void RequestDeleteTenpoRoom();
	void DecisionTenpoMatching();
	void GotoTenpoSession();
	void SendSelectedCharacter();
	void RequestSocket_Tenpo_StartMatching();
	void RequestSocket_Tenpo_Logined();
	void SendTenpGameSettings(bool ExchangeMode);
	void CheckTenpoMatchingAllLogin();
	void SetupedClient();
	void StartTenpoHostServer();
	void IsFinishedTenpoMatching(bool* bIsFinishedTenpoMatching_0);
	void RequestSocket_MatchingFinish();
	void CheckTimeoutSelectStartLocationFunction();
	void RequestSocket_MatchingBreakup();
	void CanRandomRequestSocekt_StartLocation_GetPlayerInfo(bool* bCan);
	void InitializeExtendBPLock();
	void StartExtendBPLock();
	void ReconnectRetry();
	void StopExpendBPLock();
	void StartServerTest();
	void OnTimer_ServerTest();
	void StopServerTest();
	void ExtendBPLockOnce();
	void RequestPairIDMatch(const class FString& PairMatchID);
	void RequestSocket_DeletePairIDMatch(const class FString& PairMatchID);
	void RequestSocket_PairIDMatch(const class FString& PairMatchID);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBOutGameProxy_C">();
	}
	static class ABP_AJBOutGameProxy_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBOutGameProxy_C>();
	}
};
static_assert(alignof(ABP_AJBOutGameProxy_C) == 0x000008, "Wrong alignment on ABP_AJBOutGameProxy_C");
static_assert(sizeof(ABP_AJBOutGameProxy_C) == 0x000690, "Wrong size on ABP_AJBOutGameProxy_C");
static_assert(offsetof(ABP_AJBOutGameProxy_C, UberGraphFrame) == 0x000408, "Member 'ABP_AJBOutGameProxy_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, DefaultSceneRoot) == 0x000410, "Member 'ABP_AJBOutGameProxy_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, OnSelectedStartLocation) == 0x000418, "Member 'ABP_AJBOutGameProxy_C::OnSelectedStartLocation' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, OnTimeOutStartLocation) == 0x000428, "Member 'ABP_AJBOutGameProxy_C::OnTimeOutStartLocation' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, OnFinishedMatchingDataUpdate) == 0x000438, "Member 'ABP_AJBOutGameProxy_C::OnFinishedMatchingDataUpdate' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, OnFinishMatching) == 0x000448, "Member 'ABP_AJBOutGameProxy_C::OnFinishMatching' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, CheckTimer) == 0x000458, "Member 'ABP_AJBOutGameProxy_C::CheckTimer' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, OnLoginOtherPlayer) == 0x000460, "Member 'ABP_AJBOutGameProxy_C::OnLoginOtherPlayer' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, LastCheckPlayerNum) == 0x000470, "Member 'ABP_AJBOutGameProxy_C::LastCheckPlayerNum' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, NetHttp) == 0x000478, "Member 'ABP_AJBOutGameProxy_C::NetHttp' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, NetSocket) == 0x000480, "Member 'ABP_AJBOutGameProxy_C::NetSocket' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, OnUpdateDamageArea) == 0x000488, "Member 'ABP_AJBOutGameProxy_C::OnUpdateDamageArea' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, MatchingTimeOutSecond) == 0x000498, "Member 'ABP_AJBOutGameProxy_C::MatchingTimeOutSecond' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, OnUpdatePairMatchingRoomInfo) == 0x0004A0, "Member 'ABP_AJBOutGameProxy_C::OnUpdatePairMatchingRoomInfo' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, OnCreatedRoom) == 0x0004B0, "Member 'ABP_AJBOutGameProxy_C::OnCreatedRoom' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, OnDeletedRoom) == 0x0004C0, "Member 'ABP_AJBOutGameProxy_C::OnDeletedRoom' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, OnPairMatched) == 0x0004D0, "Member 'ABP_AJBOutGameProxy_C::OnPairMatched' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, OnResponseRandomPairMatch) == 0x0004E0, "Member 'ABP_AJBOutGameProxy_C::OnResponseRandomPairMatch' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, OnEnterRoom) == 0x0004F0, "Member 'ABP_AJBOutGameProxy_C::OnEnterRoom' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, DisconnectCount) == 0x000500, "Member 'ABP_AJBOutGameProxy_C::DisconnectCount' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, ErrorDisconnectCount) == 0x000504, "Member 'ABP_AJBOutGameProxy_C::ErrorDisconnectCount' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, OnUpdateTenpoRoom) == 0x000508, "Member 'ABP_AJBOutGameProxy_C::OnUpdateTenpoRoom' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, OnTenpoEnterRoom) == 0x000518, "Member 'ABP_AJBOutGameProxy_C::OnTenpoEnterRoom' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, OnTenpoDeleteRoom) == 0x000528, "Member 'ABP_AJBOutGameProxy_C::OnTenpoDeleteRoom' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, OnFinishedTenpoMatching) == 0x000538, "Member 'ABP_AJBOutGameProxy_C::OnFinishedTenpoMatching' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, OnChangedSelectCharacter) == 0x000548, "Member 'ABP_AJBOutGameProxy_C::OnChangedSelectCharacter' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, bIsDecisionTenpoMatching) == 0x000558, "Member 'ABP_AJBOutGameProxy_C::bIsDecisionTenpoMatching' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, IsClientReplicated) == 0x000559, "Member 'ABP_AJBOutGameProxy_C::IsClientReplicated' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, OnUpdateTenpoGameSettings) == 0x000560, "Member 'ABP_AJBOutGameProxy_C::OnUpdateTenpoGameSettings' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, bIsFinishedTenpoMatching) == 0x000570, "Member 'ABP_AJBOutGameProxy_C::bIsFinishedTenpoMatching' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, OnStartTenpoMatchingHost) == 0x000578, "Member 'ABP_AJBOutGameProxy_C::OnStartTenpoMatchingHost' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, SocketConnectStartTime) == 0x000588, "Member 'ABP_AJBOutGameProxy_C::SocketConnectStartTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, SocketDisconnectSeconds) == 0x000590, "Member 'ABP_AJBOutGameProxy_C::SocketDisconnectSeconds' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, OnStartTenpoMatchingClinet) == 0x000598, "Member 'ABP_AJBOutGameProxy_C::OnStartTenpoMatchingClinet' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, OnChangeStatusTenpoRoom) == 0x0005A8, "Member 'ABP_AJBOutGameProxy_C::OnChangeStatusTenpoRoom' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, OnBreakupMatching) == 0x0005B8, "Member 'ABP_AJBOutGameProxy_C::OnBreakupMatching' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, CharacterSelectTimeoutSecond) == 0x0005C8, "Member 'ABP_AJBOutGameProxy_C::CharacterSelectTimeoutSecond' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, CharacterSelectTimeoutTimer) == 0x0005D0, "Member 'ABP_AJBOutGameProxy_C::CharacterSelectTimeoutTimer' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, TenpoConnectStartDateTime) == 0x0005D8, "Member 'ABP_AJBOutGameProxy_C::TenpoConnectStartDateTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, TenpoTimeOutSecond) == 0x0005E0, "Member 'ABP_AJBOutGameProxy_C::TenpoTimeOutSecond' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, TenpoEnterTimeOutTimer) == 0x0005E8, "Member 'ABP_AJBOutGameProxy_C::TenpoEnterTimeOutTimer' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, ExtendBPLockComponent) == 0x0005F0, "Member 'ABP_AJBOutGameProxy_C::ExtendBPLockComponent' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, IsCloseTenpoMatching) == 0x0005F8, "Member 'ABP_AJBOutGameProxy_C::IsCloseTenpoMatching' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, RandomPairMatchTimeOutTimer) == 0x000600, "Member 'ABP_AJBOutGameProxy_C::RandomPairMatchTimeOutTimer' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, RetryMax) == 0x000608, "Member 'ABP_AJBOutGameProxy_C::RetryMax' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, bIsSuccessedTenpoMathc) == 0x00060C, "Member 'ABP_AJBOutGameProxy_C::bIsSuccessedTenpoMathc' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, OnFailedStartedMatching) == 0x000610, "Member 'ABP_AJBOutGameProxy_C::OnFailedStartedMatching' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, ExpendPairRoomTimer) == 0x000620, "Member 'ABP_AJBOutGameProxy_C::ExpendPairRoomTimer' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, ExpendPairRoomTimerHandle) == 0x000628, "Member 'ABP_AJBOutGameProxy_C::ExpendPairRoomTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, SelectedPairRoomNo) == 0x000630, "Member 'ABP_AJBOutGameProxy_C::SelectedPairRoomNo' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, OnTimeoutPairMatchingRoom) == 0x000638, "Member 'ABP_AJBOutGameProxy_C::OnTimeoutPairMatchingRoom' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, ServerTestIntervalSec) == 0x000648, "Member 'ABP_AJBOutGameProxy_C::ServerTestIntervalSec' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, ServerTestTimer) == 0x000650, "Member 'ABP_AJBOutGameProxy_C::ServerTestTimer' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, ServerTestTimeOutSec) == 0x000658, "Member 'ABP_AJBOutGameProxy_C::ServerTestTimeOutSec' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, RandomMatchTimeOut) == 0x00065C, "Member 'ABP_AJBOutGameProxy_C::RandomMatchTimeOut' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, OnStartWaitPairIDMatching) == 0x000660, "Member 'ABP_AJBOutGameProxy_C::OnStartWaitPairIDMatching' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, OnTimeoutPairIDMatching) == 0x000670, "Member 'ABP_AJBOutGameProxy_C::OnTimeoutPairIDMatching' has a wrong offset!");
static_assert(offsetof(ABP_AJBOutGameProxy_C, OnDeletePairIDMatch) == 0x000680, "Member 'ABP_AJBOutGameProxy_C::OnDeletePairIDMatch' has a wrong offset!");

}

