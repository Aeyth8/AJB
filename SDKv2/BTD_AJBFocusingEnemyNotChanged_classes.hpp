#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTD_AJBFocusingEnemyNotChanged

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTD_AJBFocusingEnemyNotChanged.BTD_AJBFocusingEnemyNotChanged_C
// 0x0048 (0x00E8 - 0x00A0)
class UBTD_AJBFocusingEnemyNotChanged_C final : public UBTDecorator_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(Transient, DuplicateTransient)
	struct FBlackboardKeySelector                 RO_FocusingEnemy;                                  // 0x00A8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly)
	class ABP_AJBInGameAIImaginaryCharacter_C*    InitialEnemy;                                      // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDoNotCareIfNPC;                                   // 0x00D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ProbabilityToCheckIfChangedParam;                  // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ProbabilityToCheckIfChanged;                       // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BTD_AJBFocusingEnemyNotChanged(int32 EntryPoint);
	void ReceiveExecutionFinishAI(class AAIController* OwnerController, class APawn* ControlledPawn, EBTNodeResult NodeResult);
	void ReceiveExecutionStartAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	bool PerformConditionCheckAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTD_AJBFocusingEnemyNotChanged_C">();
	}
	static class UBTD_AJBFocusingEnemyNotChanged_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTD_AJBFocusingEnemyNotChanged_C>();
	}
};
static_assert(alignof(UBTD_AJBFocusingEnemyNotChanged_C) == 0x000008, "Wrong alignment on UBTD_AJBFocusingEnemyNotChanged_C");
static_assert(sizeof(UBTD_AJBFocusingEnemyNotChanged_C) == 0x0000E8, "Wrong size on UBTD_AJBFocusingEnemyNotChanged_C");
static_assert(offsetof(UBTD_AJBFocusingEnemyNotChanged_C, UberGraphFrame) == 0x0000A0, "Member 'UBTD_AJBFocusingEnemyNotChanged_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTD_AJBFocusingEnemyNotChanged_C, RO_FocusingEnemy) == 0x0000A8, "Member 'UBTD_AJBFocusingEnemyNotChanged_C::RO_FocusingEnemy' has a wrong offset!");
static_assert(offsetof(UBTD_AJBFocusingEnemyNotChanged_C, InitialEnemy) == 0x0000D0, "Member 'UBTD_AJBFocusingEnemyNotChanged_C::InitialEnemy' has a wrong offset!");
static_assert(offsetof(UBTD_AJBFocusingEnemyNotChanged_C, bDoNotCareIfNPC) == 0x0000D8, "Member 'UBTD_AJBFocusingEnemyNotChanged_C::bDoNotCareIfNPC' has a wrong offset!");
static_assert(offsetof(UBTD_AJBFocusingEnemyNotChanged_C, ProbabilityToCheckIfChangedParam) == 0x0000DC, "Member 'UBTD_AJBFocusingEnemyNotChanged_C::ProbabilityToCheckIfChangedParam' has a wrong offset!");
static_assert(offsetof(UBTD_AJBFocusingEnemyNotChanged_C, ProbabilityToCheckIfChanged) == 0x0000E0, "Member 'UBTD_AJBFocusingEnemyNotChanged_C::ProbabilityToCheckIfChanged' has a wrong offset!");

}

