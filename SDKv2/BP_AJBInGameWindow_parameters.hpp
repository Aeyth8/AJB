#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameWindow

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "AJB_structs.hpp"


namespace SDK::Params
{

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.ExecuteUbergraph_BP_AJBInGameWindow
// 0x0248 (0x0248 - 0x0000)
struct BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_DamagedActor;                         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_DamageForHPAP;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_DamageForAAP;                         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_CutDamage;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Event_DamageType;                           // 0x0028(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_SerialNumber;                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDamagePriority                               K2Node_Event_DamagePriority;                       // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_AttackDistance;                       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_DamageCauser1;                        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_WithSeparatedStandAttack;             // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_HitEnemysSeparatedStand;              // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bPenetrateAP;                         // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bNotUseCollision;                     // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_DamageCauser;                         // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_HitLocation;                          // 0x0058(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bPenetrating;                         // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Event_FactorTag;                            // 0x0068(0x0008)(NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_InteractActor;                        // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_InteractingActor1;                    // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacter*                    K2Node_CustomEvent_Operator;                       // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Time;                           // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGeneralTiming                                K2Node_CustomEvent_Timing;                         // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bEnable;                        // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bOperatorIsEmpty;               // 0x0096(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_97[0x1];                                       // 0x0097(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMeshComponent*>           Temp_wildcard_Variable;                            // 0x0098(0x0010)(ZeroConstructor, ReferenceParm)
	class ABP_AJBInGameCharacter_C*               K2Node_CustomEvent_Character;                      // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IfEnteringOriginToCounterpart_ReturnValue; // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_InteractingActor;                     // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_ServerIsInteractingPlayer;            // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMeshComponent*>           CallFunc_GetComponentsByTag_ReturnValue;           // 0x00D8(0x0010)(ZeroConstructor, ReferenceParm)
	TArray<class UStaticMeshComponent*>           CallFunc_GetComponentsByTag_ReturnValue1;          // 0x00E8(0x0010)(ZeroConstructor, ReferenceParm)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable1;                   // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_105[0x3];                                      // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMeshComponent*>           CallFunc_GetComponentsByTag_ReturnValue2;          // 0x0110(0x0010)(ZeroConstructor, ReferenceParm)
	TArray<class UStaticMeshComponent*>           CallFunc_GetComponentsByTag_ReturnValue3;          // 0x0120(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMeshComponent*>           Temp_wildcard_Variable1;                           // 0x0138(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable1;                    // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CallFunc_Array_Get_Item;                           // 0x0150(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_CustomEvent_Breaker1;                       // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue1;                 // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_162[0x2];                                      // 0x0162(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetInteractCenter_ReturnValue;            // 0x0164(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          CallFunc_RequestParticleEffectOnLocal_ParticleEffect; // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_CustomEvent_Breaker;                        // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue2;                 // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue;     // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_182[0x6];                                      // 0x0182(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_OtherActor;                           // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UStaticMeshComponent*>           Temp_wildcard_Variable2;                           // 0x0190(0x0010)(ZeroConstructor, ReferenceParm)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A1[0x3];                                      // 0x01A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue2;                // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBDamageActor_C*                   K2Node_DynamicCast_AsBP_AJBDamage_Actor;           // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B9[0x7];                                      // 0x01B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               CallFunc_GetAJBCharacterFromActor_CharacterBP;     // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBCharacterFromActor_bSuccess;        // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue3;                 // 0x01C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue1;    // 0x01CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue4;                 // 0x01CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Temp_float_Variable1;                              // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable2;                    // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CallFunc_Array_Get_Item1;                          // 0x01D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable2;                   // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMeshComponent*>           Temp_wildcard_Variable3;                           // 0x01E8(0x0010)(ZeroConstructor, ReferenceParm)
	class UStaticMeshComponent*                   CallFunc_Array_Get_Item2;                          // 0x01F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue3;                // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue1;                 // 0x0204(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue2;                 // 0x0205(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_206[0x2];                                      // 0x0206(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue2;                  // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable3;                   // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue3;                 // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0211(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_212[0x2];                                      // 0x0212(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue3;                  // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetInteractCenter_ReturnValue1;           // 0x0218(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable3;                    // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           CallFunc_RequestGion_AkComponent__LocalOnly_;      // 0x0228(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RequestGion_bFullfilDisplayCond_LocalOnly_; // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_231[0x7];                                      // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_Array_Get_Item3;                          // 0x0238(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue5;                 // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue6;                 // 0x0241(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x0242(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0243(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x0244(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow) == 0x000008, "Wrong alignment on BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow");
static_assert(sizeof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow) == 0x000248, "Wrong size on BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, EntryPoint) == 0x000000, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, Temp_bool_Has_Been_Initd_Variable) == 0x00000C, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, K2Node_Event_DamagedActor) == 0x000010, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::K2Node_Event_DamagedActor' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, K2Node_Event_DamageForHPAP) == 0x000018, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::K2Node_Event_DamageForHPAP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, K2Node_Event_DamageForAAP) == 0x00001C, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::K2Node_Event_DamageForAAP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, K2Node_Event_CutDamage) == 0x000020, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::K2Node_Event_CutDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, K2Node_Event_DamageType) == 0x000028, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::K2Node_Event_DamageType' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, K2Node_Event_SerialNumber) == 0x000030, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::K2Node_Event_SerialNumber' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, K2Node_Event_DamagePriority) == 0x000034, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::K2Node_Event_DamagePriority' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, K2Node_Event_AttackDistance) == 0x000038, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::K2Node_Event_AttackDistance' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, K2Node_Event_DamageCauser1) == 0x000040, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::K2Node_Event_DamageCauser1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, K2Node_Event_WithSeparatedStandAttack) == 0x000048, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::K2Node_Event_WithSeparatedStandAttack' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, K2Node_Event_HitEnemysSeparatedStand) == 0x000049, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::K2Node_Event_HitEnemysSeparatedStand' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, K2Node_Event_bPenetrateAP) == 0x00004A, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::K2Node_Event_bPenetrateAP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, K2Node_Event_bNotUseCollision) == 0x00004B, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::K2Node_Event_bNotUseCollision' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, K2Node_Event_DamageCauser) == 0x000050, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::K2Node_Event_DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, K2Node_Event_HitLocation) == 0x000058, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::K2Node_Event_HitLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, K2Node_Event_bPenetrating) == 0x000064, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::K2Node_Event_bPenetrating' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, K2Node_Event_FactorTag) == 0x000068, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::K2Node_Event_FactorTag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, K2Node_Event_InteractActor) == 0x000070, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::K2Node_Event_InteractActor' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, K2Node_Event_InteractingActor1) == 0x000078, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::K2Node_Event_InteractingActor1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, Temp_bool_Variable) == 0x000080, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, Temp_bool_IsClosed_Variable) == 0x000081, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, K2Node_CustomEvent_Operator) == 0x000088, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::K2Node_CustomEvent_Operator' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, K2Node_CustomEvent_Time) == 0x000090, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::K2Node_CustomEvent_Time' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, K2Node_CustomEvent_Timing) == 0x000094, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::K2Node_CustomEvent_Timing' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, K2Node_CustomEvent_bEnable) == 0x000095, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::K2Node_CustomEvent_bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, K2Node_CustomEvent_bOperatorIsEmpty) == 0x000096, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::K2Node_CustomEvent_bOperatorIsEmpty' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, Temp_wildcard_Variable) == 0x000098, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::Temp_wildcard_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, K2Node_CustomEvent_Character) == 0x0000A8, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::K2Node_CustomEvent_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_Array_Length_ReturnValue) == 0x0000B0, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_IfEnteringOriginToCounterpart_ReturnValue) == 0x0000B4, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_IfEnteringOriginToCounterpart_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, K2Node_Event_InteractingActor) == 0x0000B8, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::K2Node_Event_InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, K2Node_Event_ServerIsInteractingPlayer) == 0x0000C0, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::K2Node_Event_ServerIsInteractingPlayer' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x0000C8, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, K2Node_DynamicCast_bSuccess) == 0x0000D0, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_GetComponentsByTag_ReturnValue) == 0x0000D8, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_GetComponentsByTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_GetComponentsByTag_ReturnValue1) == 0x0000E8, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_GetComponentsByTag_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000F8, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, Temp_int_Loop_Counter_Variable1) == 0x0000FC, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::Temp_int_Loop_Counter_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, Temp_float_Variable) == 0x000100, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_Less_IntInt_ReturnValue) == 0x000104, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_Add_IntInt_ReturnValue1) == 0x000108, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_GetComponentsByTag_ReturnValue2) == 0x000110, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_GetComponentsByTag_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_GetComponentsByTag_ReturnValue3) == 0x000120, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_GetComponentsByTag_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, Temp_int_Array_Index_Variable) == 0x000130, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_Not_PreBool_ReturnValue) == 0x000134, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, Temp_wildcard_Variable1) == 0x000138, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::Temp_wildcard_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, Temp_int_Array_Index_Variable1) == 0x000148, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::Temp_int_Array_Index_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_Array_Length_ReturnValue1) == 0x00014C, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_Array_Get_Item) == 0x000150, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, K2Node_CustomEvent_Breaker1) == 0x000158, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::K2Node_CustomEvent_Breaker1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_Not_PreBool_ReturnValue1) == 0x000160, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_Not_PreBool_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_BooleanAND_ReturnValue) == 0x000161, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_GetInteractCenter_ReturnValue) == 0x000164, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_GetInteractCenter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_RequestParticleEffectOnLocal_ParticleEffect) == 0x000170, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_RequestParticleEffectOnLocal_ParticleEffect' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, K2Node_CustomEvent_Breaker) == 0x000178, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::K2Node_CustomEvent_Breaker' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_Not_PreBool_ReturnValue2) == 0x000180, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_Not_PreBool_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_HasLocalSharedController_ReturnValue) == 0x000181, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_HasLocalSharedController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, K2Node_Event_OtherActor) == 0x000188, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::K2Node_Event_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, Temp_wildcard_Variable2) == 0x000190, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::Temp_wildcard_Variable2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_IsValid_ReturnValue) == 0x0001A0, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_Array_Length_ReturnValue2) == 0x0001A4, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_Array_Length_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_GetOwner_ReturnValue) == 0x0001A8, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, K2Node_DynamicCast_AsBP_AJBDamage_Actor) == 0x0001B0, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::K2Node_DynamicCast_AsBP_AJBDamage_Actor' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, K2Node_DynamicCast_bSuccess1) == 0x0001B8, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_GetAJBCharacterFromActor_CharacterBP) == 0x0001C0, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_GetAJBCharacterFromActor_CharacterBP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_GetAJBCharacterFromActor_bSuccess) == 0x0001C8, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_GetAJBCharacterFromActor_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_Not_PreBool_ReturnValue3) == 0x0001C9, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_Not_PreBool_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_HasLocalSharedController_ReturnValue1) == 0x0001CA, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_HasLocalSharedController_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_Not_PreBool_ReturnValue4) == 0x0001CB, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_Not_PreBool_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, Temp_float_Variable1) == 0x0001CC, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::Temp_float_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, Temp_int_Array_Index_Variable2) == 0x0001D0, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::Temp_int_Array_Index_Variable2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, K2Node_Select_Default) == 0x0001D4, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_Array_Get_Item1) == 0x0001D8, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, Temp_int_Loop_Counter_Variable2) == 0x0001E0, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::Temp_int_Loop_Counter_Variable2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, Temp_wildcard_Variable3) == 0x0001E8, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::Temp_wildcard_Variable3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_Array_Get_Item2) == 0x0001F8, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_Array_Get_Item2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_Array_Length_ReturnValue3) == 0x000200, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_Array_Length_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_Less_IntInt_ReturnValue1) == 0x000204, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_Less_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_Less_IntInt_ReturnValue2) == 0x000205, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_Less_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_Add_IntInt_ReturnValue2) == 0x000208, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_Add_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, Temp_int_Loop_Counter_Variable3) == 0x00020C, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::Temp_int_Loop_Counter_Variable3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_Less_IntInt_ReturnValue3) == 0x000210, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_Less_IntInt_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_IsValid_ReturnValue1) == 0x000211, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_Add_IntInt_ReturnValue3) == 0x000214, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_Add_IntInt_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_GetInteractCenter_ReturnValue1) == 0x000218, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_GetInteractCenter_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, Temp_int_Array_Index_Variable3) == 0x000224, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::Temp_int_Array_Index_Variable3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_RequestGion_AkComponent__LocalOnly_) == 0x000228, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_RequestGion_AkComponent__LocalOnly_' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_RequestGion_bFullfilDisplayCond_LocalOnly_) == 0x000230, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_RequestGion_bFullfilDisplayCond_LocalOnly_' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_Array_Get_Item3) == 0x000238, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_Array_Get_Item3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_Not_PreBool_ReturnValue5) == 0x000240, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_Not_PreBool_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_Not_PreBool_ReturnValue6) == 0x000241, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_Not_PreBool_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_BooleanAND_ReturnValue1) == 0x000242, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_IsValid_ReturnValue2) == 0x000243, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow, CallFunc_BooleanAND_ReturnValue2) == 0x000244, "Member 'BP_AJBInGameWindow_C_ExecuteUbergraph_BP_AJBInGameWindow::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.ReceiveActorBeginOverlap
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBInGameWindow_C_ReceiveActorBeginOverlap final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameWindow_C_ReceiveActorBeginOverlap) == 0x000008, "Wrong alignment on BP_AJBInGameWindow_C_ReceiveActorBeginOverlap");
static_assert(sizeof(BP_AJBInGameWindow_C_ReceiveActorBeginOverlap) == 0x000008, "Wrong size on BP_AJBInGameWindow_C_ReceiveActorBeginOverlap");
static_assert(offsetof(BP_AJBInGameWindow_C_ReceiveActorBeginOverlap, OtherActor) == 0x000000, "Member 'BP_AJBInGameWindow_C_ReceiveActorBeginOverlap::OtherActor' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.SpawnBreakEffectWithAttack
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBInGameWindow_C_SpawnBreakEffectWithAttack final
{
public:
	class ABP_AJBInGameCharacter_C*               Breaker;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameWindow_C_SpawnBreakEffectWithAttack) == 0x000008, "Wrong alignment on BP_AJBInGameWindow_C_SpawnBreakEffectWithAttack");
static_assert(sizeof(BP_AJBInGameWindow_C_SpawnBreakEffectWithAttack) == 0x000008, "Wrong size on BP_AJBInGameWindow_C_SpawnBreakEffectWithAttack");
static_assert(offsetof(BP_AJBInGameWindow_C_SpawnBreakEffectWithAttack, Breaker) == 0x000000, "Member 'BP_AJBInGameWindow_C_SpawnBreakEffectWithAttack::Breaker' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.BreakWindowOnAttack_OnAll
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBInGameWindow_C_BreakWindowOnAttack_OnAll final
{
public:
	class ABP_AJBInGameCharacter_C*               Breaker;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameWindow_C_BreakWindowOnAttack_OnAll) == 0x000008, "Wrong alignment on BP_AJBInGameWindow_C_BreakWindowOnAttack_OnAll");
static_assert(sizeof(BP_AJBInGameWindow_C_BreakWindowOnAttack_OnAll) == 0x000008, "Wrong size on BP_AJBInGameWindow_C_BreakWindowOnAttack_OnAll");
static_assert(offsetof(BP_AJBInGameWindow_C_BreakWindowOnAttack_OnAll, Breaker) == 0x000000, "Member 'BP_AJBInGameWindow_C_BreakWindowOnAttack_OnAll::Breaker' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.OnROSInteract
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBInGameWindow_C_OnROSInteract final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ServerIsInteractingPlayer;                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameWindow_C_OnROSInteract) == 0x000008, "Wrong alignment on BP_AJBInGameWindow_C_OnROSInteract");
static_assert(sizeof(BP_AJBInGameWindow_C_OnROSInteract) == 0x000010, "Wrong size on BP_AJBInGameWindow_C_OnROSInteract");
static_assert(offsetof(BP_AJBInGameWindow_C_OnROSInteract, InteractingActor) == 0x000000, "Member 'BP_AJBInGameWindow_C_OnROSInteract::InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_OnROSInteract, ServerIsInteractingPlayer) == 0x000008, "Member 'BP_AJBInGameWindow_C_OnROSInteract::ServerIsInteractingPlayer' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.NotifyToPassThruWindow
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBInGameWindow_C_NotifyToPassThruWindow final
{
public:
	class ABP_AJBInGameCharacter_C*               Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameWindow_C_NotifyToPassThruWindow) == 0x000008, "Wrong alignment on BP_AJBInGameWindow_C_NotifyToPassThruWindow");
static_assert(sizeof(BP_AJBInGameWindow_C_NotifyToPassThruWindow) == 0x000008, "Wrong size on BP_AJBInGameWindow_C_NotifyToPassThruWindow");
static_assert(offsetof(BP_AJBInGameWindow_C_NotifyToPassThruWindow, Character) == 0x000000, "Member 'BP_AJBInGameWindow_C_NotifyToPassThruWindow::Character' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.NotifyTheWorld
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBInGameWindow_C_NotifyTheWorld final
{
public:
	class AAJBInGameCharacter*                    Operator;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGeneralTiming                                Timing;                                            // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnable;                                           // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bOperatorIsEmpty;                                  // 0x000E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameWindow_C_NotifyTheWorld) == 0x000008, "Wrong alignment on BP_AJBInGameWindow_C_NotifyTheWorld");
static_assert(sizeof(BP_AJBInGameWindow_C_NotifyTheWorld) == 0x000010, "Wrong size on BP_AJBInGameWindow_C_NotifyTheWorld");
static_assert(offsetof(BP_AJBInGameWindow_C_NotifyTheWorld, Operator) == 0x000000, "Member 'BP_AJBInGameWindow_C_NotifyTheWorld::Operator' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_NotifyTheWorld, Time) == 0x000008, "Member 'BP_AJBInGameWindow_C_NotifyTheWorld::Time' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_NotifyTheWorld, Timing) == 0x00000C, "Member 'BP_AJBInGameWindow_C_NotifyTheWorld::Timing' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_NotifyTheWorld, bEnable) == 0x00000D, "Member 'BP_AJBInGameWindow_C_NotifyTheWorld::bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_NotifyTheWorld, bOperatorIsEmpty) == 0x00000E, "Member 'BP_AJBInGameWindow_C_NotifyTheWorld::bOperatorIsEmpty' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.OnInteractionBlocked
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBInGameWindow_C_OnInteractionBlocked final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameWindow_C_OnInteractionBlocked) == 0x000008, "Wrong alignment on BP_AJBInGameWindow_C_OnInteractionBlocked");
static_assert(sizeof(BP_AJBInGameWindow_C_OnInteractionBlocked) == 0x000008, "Wrong size on BP_AJBInGameWindow_C_OnInteractionBlocked");
static_assert(offsetof(BP_AJBInGameWindow_C_OnInteractionBlocked, InteractingActor) == 0x000000, "Member 'BP_AJBInGameWindow_C_OnInteractionBlocked::InteractingActor' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.OnInteract
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBInGameWindow_C_OnInteract final
{
public:
	class AActor*                                 InteractActor;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameWindow_C_OnInteract) == 0x000008, "Wrong alignment on BP_AJBInGameWindow_C_OnInteract");
static_assert(sizeof(BP_AJBInGameWindow_C_OnInteract) == 0x000008, "Wrong size on BP_AJBInGameWindow_C_OnInteract");
static_assert(offsetof(BP_AJBInGameWindow_C_OnInteract, InteractActor) == 0x000000, "Member 'BP_AJBInGameWindow_C_OnInteract::InteractActor' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.DamageOverlapped
// 0x0020 (0x0020 - 0x0000)
struct BP_AJBInGameWindow_C_DamageOverlapped final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitLocation;                                       // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPenetrating;                                      // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           FactorTag;                                         // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameWindow_C_DamageOverlapped) == 0x000008, "Wrong alignment on BP_AJBInGameWindow_C_DamageOverlapped");
static_assert(sizeof(BP_AJBInGameWindow_C_DamageOverlapped) == 0x000020, "Wrong size on BP_AJBInGameWindow_C_DamageOverlapped");
static_assert(offsetof(BP_AJBInGameWindow_C_DamageOverlapped, DamageCauser) == 0x000000, "Member 'BP_AJBInGameWindow_C_DamageOverlapped::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_DamageOverlapped, HitLocation) == 0x000008, "Member 'BP_AJBInGameWindow_C_DamageOverlapped::HitLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_DamageOverlapped, bPenetrating) == 0x000014, "Member 'BP_AJBInGameWindow_C_DamageOverlapped::bPenetrating' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_DamageOverlapped, FactorTag) == 0x000018, "Member 'BP_AJBInGameWindow_C_DamageOverlapped::FactorTag' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.AJBDamage
// 0x0040 (0x0040 - 0x0000)
struct BP_AJBInGameWindow_C_AJBDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DamageForHPAP;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DamageForAAP;                                      // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CutDamage;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           DamageType;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         SerialNumber;                                      // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDamagePriority                               DamagePriority;                                    // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttackDistance;                                    // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DamageCauser;                                      // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WithSeparatedStandAttack;                          // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HitEnemysSeparatedStand;                           // 0x0039(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bPenetrateAP;                                      // 0x003A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bNotUseCollision;                                  // 0x003B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameWindow_C_AJBDamage) == 0x000008, "Wrong alignment on BP_AJBInGameWindow_C_AJBDamage");
static_assert(sizeof(BP_AJBInGameWindow_C_AJBDamage) == 0x000040, "Wrong size on BP_AJBInGameWindow_C_AJBDamage");
static_assert(offsetof(BP_AJBInGameWindow_C_AJBDamage, DamagedActor) == 0x000000, "Member 'BP_AJBInGameWindow_C_AJBDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_AJBDamage, DamageForHPAP) == 0x000008, "Member 'BP_AJBInGameWindow_C_AJBDamage::DamageForHPAP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_AJBDamage, DamageForAAP) == 0x00000C, "Member 'BP_AJBInGameWindow_C_AJBDamage::DamageForAAP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_AJBDamage, CutDamage) == 0x000010, "Member 'BP_AJBInGameWindow_C_AJBDamage::CutDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_AJBDamage, DamageType) == 0x000018, "Member 'BP_AJBInGameWindow_C_AJBDamage::DamageType' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_AJBDamage, SerialNumber) == 0x000020, "Member 'BP_AJBInGameWindow_C_AJBDamage::SerialNumber' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_AJBDamage, DamagePriority) == 0x000024, "Member 'BP_AJBInGameWindow_C_AJBDamage::DamagePriority' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_AJBDamage, AttackDistance) == 0x000028, "Member 'BP_AJBInGameWindow_C_AJBDamage::AttackDistance' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_AJBDamage, DamageCauser) == 0x000030, "Member 'BP_AJBInGameWindow_C_AJBDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_AJBDamage, WithSeparatedStandAttack) == 0x000038, "Member 'BP_AJBInGameWindow_C_AJBDamage::WithSeparatedStandAttack' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_AJBDamage, HitEnemysSeparatedStand) == 0x000039, "Member 'BP_AJBInGameWindow_C_AJBDamage::HitEnemysSeparatedStand' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_AJBDamage, bPenetrateAP) == 0x00003A, "Member 'BP_AJBInGameWindow_C_AJBDamage::bPenetrateAP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_AJBDamage, bNotUseCollision) == 0x00003B, "Member 'BP_AJBInGameWindow_C_AJBDamage::bNotUseCollision' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.UserConstructionScript
// 0x00C8 (0x00C8 - 0x0000)
struct BP_AJBInGameWindow_C_UserConstructionScript final
{
public:
	struct FVector                                CallFunc_GetInteractCenter_ReturnValue;            // 0x0000(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0018(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X1;                           // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y1;                           // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z1;                           // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0030(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0040(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_AJBInGameWindow_C_UserConstructionScript) == 0x000008, "Wrong alignment on BP_AJBInGameWindow_C_UserConstructionScript");
static_assert(sizeof(BP_AJBInGameWindow_C_UserConstructionScript) == 0x0000C8, "Wrong size on BP_AJBInGameWindow_C_UserConstructionScript");
static_assert(offsetof(BP_AJBInGameWindow_C_UserConstructionScript, CallFunc_GetInteractCenter_ReturnValue) == 0x000000, "Member 'BP_AJBInGameWindow_C_UserConstructionScript::CallFunc_GetInteractCenter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_UserConstructionScript, CallFunc_BreakVector_X) == 0x00000C, "Member 'BP_AJBInGameWindow_C_UserConstructionScript::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_UserConstructionScript, CallFunc_BreakVector_Y) == 0x000010, "Member 'BP_AJBInGameWindow_C_UserConstructionScript::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_UserConstructionScript, CallFunc_BreakVector_Z) == 0x000014, "Member 'BP_AJBInGameWindow_C_UserConstructionScript::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_UserConstructionScript, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000018, "Member 'BP_AJBInGameWindow_C_UserConstructionScript::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_UserConstructionScript, CallFunc_BreakVector_X1) == 0x000024, "Member 'BP_AJBInGameWindow_C_UserConstructionScript::CallFunc_BreakVector_X1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_UserConstructionScript, CallFunc_BreakVector_Y1) == 0x000028, "Member 'BP_AJBInGameWindow_C_UserConstructionScript::CallFunc_BreakVector_Y1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_UserConstructionScript, CallFunc_BreakVector_Z1) == 0x00002C, "Member 'BP_AJBInGameWindow_C_UserConstructionScript::CallFunc_BreakVector_Z1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_UserConstructionScript, CallFunc_MakeVector_ReturnValue) == 0x000030, "Member 'BP_AJBInGameWindow_C_UserConstructionScript::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_UserConstructionScript, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000040, "Member 'BP_AJBInGameWindow_C_UserConstructionScript::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.GetEntranceOfCounterpart
// 0x0030 (0x0030 - 0x0000)
struct BP_AJBInGameWindow_C_GetEntranceOfCounterpart final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_NormalOfEntrance_ReturnValue;             // 0x000C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0024(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameWindow_C_GetEntranceOfCounterpart) == 0x000004, "Wrong alignment on BP_AJBInGameWindow_C_GetEntranceOfCounterpart");
static_assert(sizeof(BP_AJBInGameWindow_C_GetEntranceOfCounterpart) == 0x000030, "Wrong size on BP_AJBInGameWindow_C_GetEntranceOfCounterpart");
static_assert(offsetof(BP_AJBInGameWindow_C_GetEntranceOfCounterpart, ReturnValue) == 0x000000, "Member 'BP_AJBInGameWindow_C_GetEntranceOfCounterpart::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_GetEntranceOfCounterpart, CallFunc_NormalOfEntrance_ReturnValue) == 0x00000C, "Member 'BP_AJBInGameWindow_C_GetEntranceOfCounterpart::CallFunc_NormalOfEntrance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_GetEntranceOfCounterpart, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'BP_AJBInGameWindow_C_GetEntranceOfCounterpart::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_GetEntranceOfCounterpart, CallFunc_Add_VectorVector_ReturnValue) == 0x000024, "Member 'BP_AJBInGameWindow_C_GetEntranceOfCounterpart::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.GetInteractCenter
// 0x0018 (0x0018 - 0x0000)
struct BP_AJBInGameWindow_C_GetInteractCenter final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x000C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameWindow_C_GetInteractCenter) == 0x000004, "Wrong alignment on BP_AJBInGameWindow_C_GetInteractCenter");
static_assert(sizeof(BP_AJBInGameWindow_C_GetInteractCenter) == 0x000018, "Wrong size on BP_AJBInGameWindow_C_GetInteractCenter");
static_assert(offsetof(BP_AJBInGameWindow_C_GetInteractCenter, ReturnValue) == 0x000000, "Member 'BP_AJBInGameWindow_C_GetInteractCenter::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_GetInteractCenter, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00000C, "Member 'BP_AJBInGameWindow_C_GetInteractCenter::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.IsBroken
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameWindow_C_IsBroken final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameWindow_C_IsBroken) == 0x000001, "Wrong alignment on BP_AJBInGameWindow_C_IsBroken");
static_assert(sizeof(BP_AJBInGameWindow_C_IsBroken) == 0x000001, "Wrong size on BP_AJBInGameWindow_C_IsBroken");
static_assert(offsetof(BP_AJBInGameWindow_C_IsBroken, ReturnValue) == 0x000000, "Member 'BP_AJBInGameWindow_C_IsBroken::ReturnValue' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.IfEnteringOriginToCounterpart
// 0x0060 (0x0060 - 0x0000)
struct BP_AJBInGameWindow_C_IfEnteringOriginToCounterpart final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_NormalOfEntrance_ReturnValue;             // 0x000C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0024(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetInteractCenter_ReturnValue;            // 0x0030(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x003C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue1;                      // 0x0048(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameWindow_C_IfEnteringOriginToCounterpart) == 0x000008, "Wrong alignment on BP_AJBInGameWindow_C_IfEnteringOriginToCounterpart");
static_assert(sizeof(BP_AJBInGameWindow_C_IfEnteringOriginToCounterpart) == 0x000060, "Wrong size on BP_AJBInGameWindow_C_IfEnteringOriginToCounterpart");
static_assert(offsetof(BP_AJBInGameWindow_C_IfEnteringOriginToCounterpart, Actor) == 0x000000, "Member 'BP_AJBInGameWindow_C_IfEnteringOriginToCounterpart::Actor' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_IfEnteringOriginToCounterpart, ReturnValue) == 0x000008, "Member 'BP_AJBInGameWindow_C_IfEnteringOriginToCounterpart::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_IfEnteringOriginToCounterpart, CallFunc_NormalOfEntrance_ReturnValue) == 0x00000C, "Member 'BP_AJBInGameWindow_C_IfEnteringOriginToCounterpart::CallFunc_NormalOfEntrance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_IfEnteringOriginToCounterpart, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'BP_AJBInGameWindow_C_IfEnteringOriginToCounterpart::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_IfEnteringOriginToCounterpart, CallFunc_Normal_ReturnValue) == 0x000024, "Member 'BP_AJBInGameWindow_C_IfEnteringOriginToCounterpart::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_IfEnteringOriginToCounterpart, CallFunc_GetInteractCenter_ReturnValue) == 0x000030, "Member 'BP_AJBInGameWindow_C_IfEnteringOriginToCounterpart::CallFunc_GetInteractCenter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_IfEnteringOriginToCounterpart, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00003C, "Member 'BP_AJBInGameWindow_C_IfEnteringOriginToCounterpart::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_IfEnteringOriginToCounterpart, CallFunc_Normal_ReturnValue1) == 0x000048, "Member 'BP_AJBInGameWindow_C_IfEnteringOriginToCounterpart::CallFunc_Normal_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_IfEnteringOriginToCounterpart, CallFunc_Dot_VectorVector_ReturnValue) == 0x000054, "Member 'BP_AJBInGameWindow_C_IfEnteringOriginToCounterpart::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_IfEnteringOriginToCounterpart, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000058, "Member 'BP_AJBInGameWindow_C_IfEnteringOriginToCounterpart::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.RotationOfBreakWindowEffect
// 0x0034 (0x0034 - 0x0000)
struct BP_AJBInGameWindow_C_RotationOfBreakWindowEffect final
{
public:
	bool                                          bOriginToCounterpart;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_NormalOfEntrance_ReturnValue;             // 0x0010(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x001C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0028(0x000C)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameWindow_C_RotationOfBreakWindowEffect) == 0x000004, "Wrong alignment on BP_AJBInGameWindow_C_RotationOfBreakWindowEffect");
static_assert(sizeof(BP_AJBInGameWindow_C_RotationOfBreakWindowEffect) == 0x000034, "Wrong size on BP_AJBInGameWindow_C_RotationOfBreakWindowEffect");
static_assert(offsetof(BP_AJBInGameWindow_C_RotationOfBreakWindowEffect, bOriginToCounterpart) == 0x000000, "Member 'BP_AJBInGameWindow_C_RotationOfBreakWindowEffect::bOriginToCounterpart' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_RotationOfBreakWindowEffect, ReturnValue) == 0x000004, "Member 'BP_AJBInGameWindow_C_RotationOfBreakWindowEffect::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_RotationOfBreakWindowEffect, CallFunc_NormalOfEntrance_ReturnValue) == 0x000010, "Member 'BP_AJBInGameWindow_C_RotationOfBreakWindowEffect::CallFunc_NormalOfEntrance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_RotationOfBreakWindowEffect, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00001C, "Member 'BP_AJBInGameWindow_C_RotationOfBreakWindowEffect::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_RotationOfBreakWindowEffect, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000028, "Member 'BP_AJBInGameWindow_C_RotationOfBreakWindowEffect::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.GetBreakerCharacter
// 0x0038 (0x0038 - 0x0000)
struct BP_AJBInGameWindow_C_GetBreakerCharacter final
{
public:
	class AActor*                                 Breaker;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               BreakerCharacter;                                  // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBInGameMovableStand*                 K2Node_DynamicCast_AsAJBIn_Game_Movable_Stand;     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameWindow_C_GetBreakerCharacter) == 0x000008, "Wrong alignment on BP_AJBInGameWindow_C_GetBreakerCharacter");
static_assert(sizeof(BP_AJBInGameWindow_C_GetBreakerCharacter) == 0x000038, "Wrong size on BP_AJBInGameWindow_C_GetBreakerCharacter");
static_assert(offsetof(BP_AJBInGameWindow_C_GetBreakerCharacter, Breaker) == 0x000000, "Member 'BP_AJBInGameWindow_C_GetBreakerCharacter::Breaker' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_GetBreakerCharacter, BreakerCharacter) == 0x000008, "Member 'BP_AJBInGameWindow_C_GetBreakerCharacter::BreakerCharacter' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_GetBreakerCharacter, K2Node_DynamicCast_AsAJBIn_Game_Movable_Stand) == 0x000010, "Member 'BP_AJBInGameWindow_C_GetBreakerCharacter::K2Node_DynamicCast_AsAJBIn_Game_Movable_Stand' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_GetBreakerCharacter, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AJBInGameWindow_C_GetBreakerCharacter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_GetBreakerCharacter, CallFunc_GetOwner_ReturnValue) == 0x000020, "Member 'BP_AJBInGameWindow_C_GetBreakerCharacter::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_GetBreakerCharacter, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000028, "Member 'BP_AJBInGameWindow_C_GetBreakerCharacter::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_GetBreakerCharacter, K2Node_DynamicCast_bSuccess1) == 0x000030, "Member 'BP_AJBInGameWindow_C_GetBreakerCharacter::K2Node_DynamicCast_bSuccess1' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.InteractInstantly
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBInGameWindow_C_InteractInstantly final
{
public:
	class ABP_AJBInGameCharacter_C*               Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameWindow_C_InteractInstantly) == 0x000008, "Wrong alignment on BP_AJBInGameWindow_C_InteractInstantly");
static_assert(sizeof(BP_AJBInGameWindow_C_InteractInstantly) == 0x000010, "Wrong size on BP_AJBInGameWindow_C_InteractInstantly");
static_assert(offsetof(BP_AJBInGameWindow_C_InteractInstantly, Character) == 0x000000, "Member 'BP_AJBInGameWindow_C_InteractInstantly::Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_InteractInstantly, ReturnValue) == 0x000008, "Member 'BP_AJBInGameWindow_C_InteractInstantly::ReturnValue' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.Interactable
// 0x0028 (0x0028 - 0x0000)
struct BP_AJBInGameWindow_C_Interactable final
{
public:
	class ABP_AJBInGameCharacter_C*               Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceLength;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0010(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckSmallSized_bSmallSized;              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckDistanceLimit_bSuccess;              // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSmallWindow_ReturnValue;                // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ActorHasTag_ReturnValue;                  // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInteractableDirection_ReturnValue;      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameWindow_C_Interactable) == 0x000008, "Wrong alignment on BP_AJBInGameWindow_C_Interactable");
static_assert(sizeof(BP_AJBInGameWindow_C_Interactable) == 0x000028, "Wrong size on BP_AJBInGameWindow_C_Interactable");
static_assert(offsetof(BP_AJBInGameWindow_C_Interactable, Character) == 0x000000, "Member 'BP_AJBInGameWindow_C_Interactable::Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_Interactable, TraceLength) == 0x000008, "Member 'BP_AJBInGameWindow_C_Interactable::TraceLength' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_Interactable, ReturnValue) == 0x00000C, "Member 'BP_AJBInGameWindow_C_Interactable::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_Interactable, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000010, "Member 'BP_AJBInGameWindow_C_Interactable::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_Interactable, CallFunc_CheckSmallSized_bSmallSized) == 0x00001C, "Member 'BP_AJBInGameWindow_C_Interactable::CallFunc_CheckSmallSized_bSmallSized' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_Interactable, CallFunc_CheckDistanceLimit_bSuccess) == 0x00001D, "Member 'BP_AJBInGameWindow_C_Interactable::CallFunc_CheckDistanceLimit_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_Interactable, CallFunc_IsSmallWindow_ReturnValue) == 0x00001E, "Member 'BP_AJBInGameWindow_C_Interactable::CallFunc_IsSmallWindow_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_Interactable, CallFunc_ActorHasTag_ReturnValue) == 0x00001F, "Member 'BP_AJBInGameWindow_C_Interactable::CallFunc_ActorHasTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_Interactable, CallFunc_IsInteractableDirection_ReturnValue) == 0x000020, "Member 'BP_AJBInGameWindow_C_Interactable::CallFunc_IsInteractableDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_Interactable, CallFunc_BooleanAND_ReturnValue) == 0x000021, "Member 'BP_AJBInGameWindow_C_Interactable::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.TryGetInteractableText
// 0x0080 (0x0080 - 0x0000)
struct BP_AJBInGameWindow_C_TryGetInteractableText final
{
public:
	class ABP_AJBInGameCharacter_C*               OperatorCharacter;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   InteractMessage;                                   // 0x0010(0x0018)(Parm, OutParm)
	class FText                                   Temp_text_Variable;                                // 0x0028(0x0018)()
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable1;                               // 0x0048(0x0018)()
	bool                                          Temp_bool_Variable;                                // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBroken_ReturnValue;                     // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x0068(0x0018)()
};
static_assert(alignof(BP_AJBInGameWindow_C_TryGetInteractableText) == 0x000008, "Wrong alignment on BP_AJBInGameWindow_C_TryGetInteractableText");
static_assert(sizeof(BP_AJBInGameWindow_C_TryGetInteractableText) == 0x000080, "Wrong size on BP_AJBInGameWindow_C_TryGetInteractableText");
static_assert(offsetof(BP_AJBInGameWindow_C_TryGetInteractableText, OperatorCharacter) == 0x000000, "Member 'BP_AJBInGameWindow_C_TryGetInteractableText::OperatorCharacter' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_TryGetInteractableText, bSuccess) == 0x000008, "Member 'BP_AJBInGameWindow_C_TryGetInteractableText::bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_TryGetInteractableText, InteractMessage) == 0x000010, "Member 'BP_AJBInGameWindow_C_TryGetInteractableText::InteractMessage' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_TryGetInteractableText, Temp_text_Variable) == 0x000028, "Member 'BP_AJBInGameWindow_C_TryGetInteractableText::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_TryGetInteractableText, K2Node_SwitchEnum_CmpSuccess) == 0x000040, "Member 'BP_AJBInGameWindow_C_TryGetInteractableText::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_TryGetInteractableText, Temp_text_Variable1) == 0x000048, "Member 'BP_AJBInGameWindow_C_TryGetInteractableText::Temp_text_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_TryGetInteractableText, Temp_bool_Variable) == 0x000060, "Member 'BP_AJBInGameWindow_C_TryGetInteractableText::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_TryGetInteractableText, CallFunc_IsBroken_ReturnValue) == 0x000061, "Member 'BP_AJBInGameWindow_C_TryGetInteractableText::CallFunc_IsBroken_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_TryGetInteractableText, K2Node_Select_Default) == 0x000068, "Member 'BP_AJBInGameWindow_C_TryGetInteractableText::K2Node_Select_Default' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.CheckErrorCondition
// 0x0002 (0x0002 - 0x0000)
struct BP_AJBInGameWindow_C_CheckErrorCondition final
{
public:
	bool                                          bErrorCondition;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         ErrorType;                                         // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameWindow_C_CheckErrorCondition) == 0x000001, "Wrong alignment on BP_AJBInGameWindow_C_CheckErrorCondition");
static_assert(sizeof(BP_AJBInGameWindow_C_CheckErrorCondition) == 0x000002, "Wrong size on BP_AJBInGameWindow_C_CheckErrorCondition");
static_assert(offsetof(BP_AJBInGameWindow_C_CheckErrorCondition, bErrorCondition) == 0x000000, "Member 'BP_AJBInGameWindow_C_CheckErrorCondition::bErrorCondition' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_CheckErrorCondition, ErrorType) == 0x000001, "Member 'BP_AJBInGameWindow_C_CheckErrorCondition::ErrorType' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.OnLocalInteract
// 0x0020 (0x0020 - 0x0000)
struct BP_AJBInGameWindow_C_OnLocalInteract final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameWindow_C_OnLocalInteract) == 0x000008, "Wrong alignment on BP_AJBInGameWindow_C_OnLocalInteract");
static_assert(sizeof(BP_AJBInGameWindow_C_OnLocalInteract) == 0x000020, "Wrong size on BP_AJBInGameWindow_C_OnLocalInteract");
static_assert(offsetof(BP_AJBInGameWindow_C_OnLocalInteract, InteractingActor) == 0x000000, "Member 'BP_AJBInGameWindow_C_OnLocalInteract::InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_OnLocalInteract, bSuccess) == 0x000008, "Member 'BP_AJBInGameWindow_C_OnLocalInteract::bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_OnLocalInteract, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000010, "Member 'BP_AJBInGameWindow_C_OnLocalInteract::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_OnLocalInteract, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AJBInGameWindow_C_OnLocalInteract::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_OnLocalInteract, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000019, "Member 'BP_AJBInGameWindow_C_OnLocalInteract::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_OnLocalInteract, CallFunc_BooleanOR_ReturnValue) == 0x00001A, "Member 'BP_AJBInGameWindow_C_OnLocalInteract::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.GetInteractState
// 0x0003 (0x0003 - 0x0000)
struct BP_AJBInGameWindow_C_GetInteractState final
{
public:
	uint8                                         InteractState;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsBroken_ReturnValue;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_Conv_BoolToByte_ReturnValue;              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameWindow_C_GetInteractState) == 0x000001, "Wrong alignment on BP_AJBInGameWindow_C_GetInteractState");
static_assert(sizeof(BP_AJBInGameWindow_C_GetInteractState) == 0x000003, "Wrong size on BP_AJBInGameWindow_C_GetInteractState");
static_assert(offsetof(BP_AJBInGameWindow_C_GetInteractState, InteractState) == 0x000000, "Member 'BP_AJBInGameWindow_C_GetInteractState::InteractState' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_GetInteractState, CallFunc_IsBroken_ReturnValue) == 0x000001, "Member 'BP_AJBInGameWindow_C_GetInteractState::CallFunc_IsBroken_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_GetInteractState, CallFunc_Conv_BoolToByte_ReturnValue) == 0x000002, "Member 'BP_AJBInGameWindow_C_GetInteractState::CallFunc_Conv_BoolToByte_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.GetInteractPriority
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBInGameWindow_C_GetInteractPriority final
{
public:
	int32                                         Priority;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameWindow_C_GetInteractPriority) == 0x000004, "Wrong alignment on BP_AJBInGameWindow_C_GetInteractPriority");
static_assert(sizeof(BP_AJBInGameWindow_C_GetInteractPriority) == 0x000004, "Wrong size on BP_AJBInGameWindow_C_GetInteractPriority");
static_assert(offsetof(BP_AJBInGameWindow_C_GetInteractPriority, Priority) == 0x000000, "Member 'BP_AJBInGameWindow_C_GetInteractPriority::Priority' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.GetInteractBoundForCulling
// 0x0018 (0x0018 - 0x0000)
struct BP_AJBInGameWindow_C_GetInteractBoundForCulling final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Center;                                            // 0x0008(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameWindow_C_GetInteractBoundForCulling) == 0x000008, "Wrong alignment on BP_AJBInGameWindow_C_GetInteractBoundForCulling");
static_assert(sizeof(BP_AJBInGameWindow_C_GetInteractBoundForCulling) == 0x000018, "Wrong size on BP_AJBInGameWindow_C_GetInteractBoundForCulling");
static_assert(offsetof(BP_AJBInGameWindow_C_GetInteractBoundForCulling, InteractingActor) == 0x000000, "Member 'BP_AJBInGameWindow_C_GetInteractBoundForCulling::InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_GetInteractBoundForCulling, Center) == 0x000008, "Member 'BP_AJBInGameWindow_C_GetInteractBoundForCulling::Center' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_GetInteractBoundForCulling, Radius) == 0x000014, "Member 'BP_AJBInGameWindow_C_GetInteractBoundForCulling::Radius' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.IfNeedsExclusiveInteractStrictly
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameWindow_C_IfNeedsExclusiveInteractStrictly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameWindow_C_IfNeedsExclusiveInteractStrictly) == 0x000001, "Wrong alignment on BP_AJBInGameWindow_C_IfNeedsExclusiveInteractStrictly");
static_assert(sizeof(BP_AJBInGameWindow_C_IfNeedsExclusiveInteractStrictly) == 0x000001, "Wrong size on BP_AJBInGameWindow_C_IfNeedsExclusiveInteractStrictly");
static_assert(offsetof(BP_AJBInGameWindow_C_IfNeedsExclusiveInteractStrictly, ReturnValue) == 0x000000, "Member 'BP_AJBInGameWindow_C_IfNeedsExclusiveInteractStrictly::ReturnValue' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.IfBlockInteract
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBInGameWindow_C_IfBlockInteract final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameWindow_C_IfBlockInteract) == 0x000008, "Wrong alignment on BP_AJBInGameWindow_C_IfBlockInteract");
static_assert(sizeof(BP_AJBInGameWindow_C_IfBlockInteract) == 0x000010, "Wrong size on BP_AJBInGameWindow_C_IfBlockInteract");
static_assert(offsetof(BP_AJBInGameWindow_C_IfBlockInteract, InteractingActor) == 0x000000, "Member 'BP_AJBInGameWindow_C_IfBlockInteract::InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_IfBlockInteract, ReturnValue) == 0x000008, "Member 'BP_AJBInGameWindow_C_IfBlockInteract::ReturnValue' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.ShouldPrioritizedThanPrepaidSkillCancel
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameWindow_C_ShouldPrioritizedThanPrepaidSkillCancel final
{
public:
	bool                                          bShouldPriorirized;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameWindow_C_ShouldPrioritizedThanPrepaidSkillCancel) == 0x000001, "Wrong alignment on BP_AJBInGameWindow_C_ShouldPrioritizedThanPrepaidSkillCancel");
static_assert(sizeof(BP_AJBInGameWindow_C_ShouldPrioritizedThanPrepaidSkillCancel) == 0x000001, "Wrong size on BP_AJBInGameWindow_C_ShouldPrioritizedThanPrepaidSkillCancel");
static_assert(offsetof(BP_AJBInGameWindow_C_ShouldPrioritizedThanPrepaidSkillCancel, bShouldPriorirized) == 0x000000, "Member 'BP_AJBInGameWindow_C_ShouldPrioritizedThanPrepaidSkillCancel::bShouldPriorirized' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.NormalOfEntrance
// 0x0050 (0x0050 - 0x0000)
struct BP_AJBInGameWindow_C_NormalOfEntrance final
{
public:
	bool                                          bOriginToCounterpart;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetInteractCenter_ReturnValue;            // 0x0014(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0020(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x002C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0038(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x0044(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameWindow_C_NormalOfEntrance) == 0x000004, "Wrong alignment on BP_AJBInGameWindow_C_NormalOfEntrance");
static_assert(sizeof(BP_AJBInGameWindow_C_NormalOfEntrance) == 0x000050, "Wrong size on BP_AJBInGameWindow_C_NormalOfEntrance");
static_assert(offsetof(BP_AJBInGameWindow_C_NormalOfEntrance, bOriginToCounterpart) == 0x000000, "Member 'BP_AJBInGameWindow_C_NormalOfEntrance::bOriginToCounterpart' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_NormalOfEntrance, ReturnValue) == 0x000004, "Member 'BP_AJBInGameWindow_C_NormalOfEntrance::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_NormalOfEntrance, Temp_bool_Variable) == 0x000010, "Member 'BP_AJBInGameWindow_C_NormalOfEntrance::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_NormalOfEntrance, CallFunc_GetInteractCenter_ReturnValue) == 0x000014, "Member 'BP_AJBInGameWindow_C_NormalOfEntrance::CallFunc_GetInteractCenter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_NormalOfEntrance, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000020, "Member 'BP_AJBInGameWindow_C_NormalOfEntrance::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_NormalOfEntrance, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00002C, "Member 'BP_AJBInGameWindow_C_NormalOfEntrance::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_NormalOfEntrance, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000038, "Member 'BP_AJBInGameWindow_C_NormalOfEntrance::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_NormalOfEntrance, K2Node_Select_Default) == 0x000044, "Member 'BP_AJBInGameWindow_C_NormalOfEntrance::K2Node_Select_Default' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.LocationExitTo
// 0x0040 (0x0040 - 0x0000)
struct BP_AJBInGameWindow_C_LocationExitTo final
{
public:
	bool                                          bOriginToCounterpart;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetInteractCenter_ReturnValue;            // 0x0010(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_NormalOfEntrance_ReturnValue;             // 0x001C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0028(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0034(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameWindow_C_LocationExitTo) == 0x000004, "Wrong alignment on BP_AJBInGameWindow_C_LocationExitTo");
static_assert(sizeof(BP_AJBInGameWindow_C_LocationExitTo) == 0x000040, "Wrong size on BP_AJBInGameWindow_C_LocationExitTo");
static_assert(offsetof(BP_AJBInGameWindow_C_LocationExitTo, bOriginToCounterpart) == 0x000000, "Member 'BP_AJBInGameWindow_C_LocationExitTo::bOriginToCounterpart' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_LocationExitTo, ReturnValue) == 0x000004, "Member 'BP_AJBInGameWindow_C_LocationExitTo::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_LocationExitTo, CallFunc_GetInteractCenter_ReturnValue) == 0x000010, "Member 'BP_AJBInGameWindow_C_LocationExitTo::CallFunc_GetInteractCenter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_LocationExitTo, CallFunc_NormalOfEntrance_ReturnValue) == 0x00001C, "Member 'BP_AJBInGameWindow_C_LocationExitTo::CallFunc_NormalOfEntrance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_LocationExitTo, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000028, "Member 'BP_AJBInGameWindow_C_LocationExitTo::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_LocationExitTo, CallFunc_Add_VectorVector_ReturnValue) == 0x000034, "Member 'BP_AJBInGameWindow_C_LocationExitTo::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.LocationExitFrom
// 0x001C (0x001C - 0x0000)
struct BP_AJBInGameWindow_C_LocationExitFrom final
{
public:
	bool                                          bOriginToCounterpart;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetInteractCenter_ReturnValue;            // 0x0010(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameWindow_C_LocationExitFrom) == 0x000004, "Wrong alignment on BP_AJBInGameWindow_C_LocationExitFrom");
static_assert(sizeof(BP_AJBInGameWindow_C_LocationExitFrom) == 0x00001C, "Wrong size on BP_AJBInGameWindow_C_LocationExitFrom");
static_assert(offsetof(BP_AJBInGameWindow_C_LocationExitFrom, bOriginToCounterpart) == 0x000000, "Member 'BP_AJBInGameWindow_C_LocationExitFrom::bOriginToCounterpart' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_LocationExitFrom, ReturnValue) == 0x000004, "Member 'BP_AJBInGameWindow_C_LocationExitFrom::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_LocationExitFrom, CallFunc_GetInteractCenter_ReturnValue) == 0x000010, "Member 'BP_AJBInGameWindow_C_LocationExitFrom::CallFunc_GetInteractCenter_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.LocationEnterTo
// 0x001C (0x001C - 0x0000)
struct BP_AJBInGameWindow_C_LocationEnterTo final
{
public:
	bool                                          bOriginToCounterpart;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetInteractCenter_ReturnValue;            // 0x0010(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameWindow_C_LocationEnterTo) == 0x000004, "Wrong alignment on BP_AJBInGameWindow_C_LocationEnterTo");
static_assert(sizeof(BP_AJBInGameWindow_C_LocationEnterTo) == 0x00001C, "Wrong size on BP_AJBInGameWindow_C_LocationEnterTo");
static_assert(offsetof(BP_AJBInGameWindow_C_LocationEnterTo, bOriginToCounterpart) == 0x000000, "Member 'BP_AJBInGameWindow_C_LocationEnterTo::bOriginToCounterpart' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_LocationEnterTo, ReturnValue) == 0x000004, "Member 'BP_AJBInGameWindow_C_LocationEnterTo::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_LocationEnterTo, CallFunc_GetInteractCenter_ReturnValue) == 0x000010, "Member 'BP_AJBInGameWindow_C_LocationEnterTo::CallFunc_GetInteractCenter_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.LocationEnterFrom
// 0x0028 (0x0028 - 0x0000)
struct BP_AJBInGameWindow_C_LocationEnterFrom final
{
public:
	class ABP_AJBInGameCharacter_C*               Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOriginToCounterpart;                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameWindow_C_LocationEnterFrom) == 0x000008, "Wrong alignment on BP_AJBInGameWindow_C_LocationEnterFrom");
static_assert(sizeof(BP_AJBInGameWindow_C_LocationEnterFrom) == 0x000028, "Wrong size on BP_AJBInGameWindow_C_LocationEnterFrom");
static_assert(offsetof(BP_AJBInGameWindow_C_LocationEnterFrom, Character) == 0x000000, "Member 'BP_AJBInGameWindow_C_LocationEnterFrom::Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_LocationEnterFrom, bOriginToCounterpart) == 0x000008, "Member 'BP_AJBInGameWindow_C_LocationEnterFrom::bOriginToCounterpart' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_LocationEnterFrom, ReturnValue) == 0x00000C, "Member 'BP_AJBInGameWindow_C_LocationEnterFrom::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_LocationEnterFrom, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'BP_AJBInGameWindow_C_LocationEnterFrom::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.CheckNoDamage
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBInGameWindow_C_CheckNoDamage final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNoDamage;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameWindow_C_CheckNoDamage) == 0x000008, "Wrong alignment on BP_AJBInGameWindow_C_CheckNoDamage");
static_assert(sizeof(BP_AJBInGameWindow_C_CheckNoDamage) == 0x000010, "Wrong size on BP_AJBInGameWindow_C_CheckNoDamage");
static_assert(offsetof(BP_AJBInGameWindow_C_CheckNoDamage, DamageCauser) == 0x000000, "Member 'BP_AJBInGameWindow_C_CheckNoDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_CheckNoDamage, bNoDamage) == 0x000008, "Member 'BP_AJBInGameWindow_C_CheckNoDamage::bNoDamage' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.CheckDisableAreaDamage
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameWindow_C_CheckDisableAreaDamage final
{
public:
	bool                                          bDisableAreadamage;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameWindow_C_CheckDisableAreaDamage) == 0x000001, "Wrong alignment on BP_AJBInGameWindow_C_CheckDisableAreaDamage");
static_assert(sizeof(BP_AJBInGameWindow_C_CheckDisableAreaDamage) == 0x000001, "Wrong size on BP_AJBInGameWindow_C_CheckDisableAreaDamage");
static_assert(offsetof(BP_AJBInGameWindow_C_CheckDisableAreaDamage, bDisableAreadamage) == 0x000000, "Member 'BP_AJBInGameWindow_C_CheckDisableAreaDamage::bDisableAreadamage' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.CheckDisablePassive
// 0x0018 (0x0018 - 0x0000)
struct BP_AJBInGameWindow_C_CheckDisablePassive final
{
public:
	class AActor*                                 PassiveCauser;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           PassiveTag;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisablePassive;                                   // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameWindow_C_CheckDisablePassive) == 0x000008, "Wrong alignment on BP_AJBInGameWindow_C_CheckDisablePassive");
static_assert(sizeof(BP_AJBInGameWindow_C_CheckDisablePassive) == 0x000018, "Wrong size on BP_AJBInGameWindow_C_CheckDisablePassive");
static_assert(offsetof(BP_AJBInGameWindow_C_CheckDisablePassive, PassiveCauser) == 0x000000, "Member 'BP_AJBInGameWindow_C_CheckDisablePassive::PassiveCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_CheckDisablePassive, PassiveTag) == 0x000008, "Member 'BP_AJBInGameWindow_C_CheckDisablePassive::PassiveTag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_CheckDisablePassive, bDisablePassive) == 0x000010, "Member 'BP_AJBInGameWindow_C_CheckDisablePassive::bDisablePassive' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.CheckDisableDamage
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBInGameWindow_C_CheckDisableDamage final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisableDamage;                                    // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameWindow_C_CheckDisableDamage) == 0x000008, "Wrong alignment on BP_AJBInGameWindow_C_CheckDisableDamage");
static_assert(sizeof(BP_AJBInGameWindow_C_CheckDisableDamage) == 0x000010, "Wrong size on BP_AJBInGameWindow_C_CheckDisableDamage");
static_assert(offsetof(BP_AJBInGameWindow_C_CheckDisableDamage, DamageCauser) == 0x000000, "Member 'BP_AJBInGameWindow_C_CheckDisableDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_CheckDisableDamage, bDisableDamage) == 0x000008, "Member 'BP_AJBInGameWindow_C_CheckDisableDamage::bDisableDamage' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.IfCheckDamageOverlap
// 0x0002 (0x0002 - 0x0000)
struct BP_AJBInGameWindow_C_IfCheckDamageOverlap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameWindow_C_IfCheckDamageOverlap) == 0x000001, "Wrong alignment on BP_AJBInGameWindow_C_IfCheckDamageOverlap");
static_assert(sizeof(BP_AJBInGameWindow_C_IfCheckDamageOverlap) == 0x000002, "Wrong size on BP_AJBInGameWindow_C_IfCheckDamageOverlap");
static_assert(offsetof(BP_AJBInGameWindow_C_IfCheckDamageOverlap, ReturnValue) == 0x000000, "Member 'BP_AJBInGameWindow_C_IfCheckDamageOverlap::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_IfCheckDamageOverlap, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'BP_AJBInGameWindow_C_IfCheckDamageOverlap::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.OwnHitParam
// 0x0018 (0x0018 - 0x0000)
struct BP_AJBInGameWindow_C_OwnHitParam final
{
public:
	bool                                          bCharacter;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bLeftAP;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ParticleTagBlockedByAAP;                           // 0x0008(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SETagBlockedByAAP;                                 // 0x0010(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameWindow_C_OwnHitParam) == 0x000008, "Wrong alignment on BP_AJBInGameWindow_C_OwnHitParam");
static_assert(sizeof(BP_AJBInGameWindow_C_OwnHitParam) == 0x000018, "Wrong size on BP_AJBInGameWindow_C_OwnHitParam");
static_assert(offsetof(BP_AJBInGameWindow_C_OwnHitParam, bCharacter) == 0x000000, "Member 'BP_AJBInGameWindow_C_OwnHitParam::bCharacter' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_OwnHitParam, bLeftAP) == 0x000001, "Member 'BP_AJBInGameWindow_C_OwnHitParam::bLeftAP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_OwnHitParam, ParticleTagBlockedByAAP) == 0x000008, "Member 'BP_AJBInGameWindow_C_OwnHitParam::ParticleTagBlockedByAAP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_OwnHitParam, SETagBlockedByAAP) == 0x000010, "Member 'BP_AJBInGameWindow_C_OwnHitParam::SETagBlockedByAAP' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.CheckTargetSelf
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBInGameWindow_C_CheckTargetSelf final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bForDamageOverlap;                                 // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIgnoreMovableStand;                               // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bTarget;                                           // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameWindow_C_CheckTargetSelf) == 0x000008, "Wrong alignment on BP_AJBInGameWindow_C_CheckTargetSelf");
static_assert(sizeof(BP_AJBInGameWindow_C_CheckTargetSelf) == 0x000010, "Wrong size on BP_AJBInGameWindow_C_CheckTargetSelf");
static_assert(offsetof(BP_AJBInGameWindow_C_CheckTargetSelf, DamageCauser) == 0x000000, "Member 'BP_AJBInGameWindow_C_CheckTargetSelf::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_CheckTargetSelf, bForDamageOverlap) == 0x000008, "Member 'BP_AJBInGameWindow_C_CheckTargetSelf::bForDamageOverlap' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_CheckTargetSelf, bIgnoreMovableStand) == 0x000009, "Member 'BP_AJBInGameWindow_C_CheckTargetSelf::bIgnoreMovableStand' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_CheckTargetSelf, bTarget) == 0x00000A, "Member 'BP_AJBInGameWindow_C_CheckTargetSelf::bTarget' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_CheckTargetSelf, CallFunc_Not_PreBool_ReturnValue) == 0x00000B, "Member 'BP_AJBInGameWindow_C_CheckTargetSelf::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.IsReactedByReticule
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameWindow_C_IsReactedByReticule final
{
public:
	bool                                          bResult;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameWindow_C_IsReactedByReticule) == 0x000001, "Wrong alignment on BP_AJBInGameWindow_C_IsReactedByReticule");
static_assert(sizeof(BP_AJBInGameWindow_C_IsReactedByReticule) == 0x000001, "Wrong size on BP_AJBInGameWindow_C_IsReactedByReticule");
static_assert(offsetof(BP_AJBInGameWindow_C_IsReactedByReticule, bResult) == 0x000000, "Member 'BP_AJBInGameWindow_C_IsReactedByReticule::bResult' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.IgnoreTrace
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameWindow_C_IgnoreTrace final
{
public:
	bool                                          bIgnore;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameWindow_C_IgnoreTrace) == 0x000001, "Wrong alignment on BP_AJBInGameWindow_C_IgnoreTrace");
static_assert(sizeof(BP_AJBInGameWindow_C_IgnoreTrace) == 0x000001, "Wrong size on BP_AJBInGameWindow_C_IgnoreTrace");
static_assert(offsetof(BP_AJBInGameWindow_C_IgnoreTrace, bIgnore) == 0x000000, "Member 'BP_AJBInGameWindow_C_IgnoreTrace::bIgnore' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.CheckDisableDirectDamage
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBInGameWindow_C_CheckDisableDirectDamage final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisableDirectDamage;                              // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameWindow_C_CheckDisableDirectDamage) == 0x000008, "Wrong alignment on BP_AJBInGameWindow_C_CheckDisableDirectDamage");
static_assert(sizeof(BP_AJBInGameWindow_C_CheckDisableDirectDamage) == 0x000010, "Wrong size on BP_AJBInGameWindow_C_CheckDisableDirectDamage");
static_assert(offsetof(BP_AJBInGameWindow_C_CheckDisableDirectDamage, DamageCauser) == 0x000000, "Member 'BP_AJBInGameWindow_C_CheckDisableDirectDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_CheckDisableDirectDamage, bDisableDirectDamage) == 0x000008, "Member 'BP_AJBInGameWindow_C_CheckDisableDirectDamage::bDisableDirectDamage' has a wrong offset!");

// Function BP_AJBInGameWindow.BP_AJBInGameWindow_C.IsSmallWindow
// 0x0002 (0x0002 - 0x0000)
struct BP_AJBInGameWindow_C_IsSmallWindow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ActorHasTag_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameWindow_C_IsSmallWindow) == 0x000001, "Wrong alignment on BP_AJBInGameWindow_C_IsSmallWindow");
static_assert(sizeof(BP_AJBInGameWindow_C_IsSmallWindow) == 0x000002, "Wrong size on BP_AJBInGameWindow_C_IsSmallWindow");
static_assert(offsetof(BP_AJBInGameWindow_C_IsSmallWindow, ReturnValue) == 0x000000, "Member 'BP_AJBInGameWindow_C_IsSmallWindow::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameWindow_C_IsSmallWindow, CallFunc_ActorHasTag_ReturnValue) == 0x000001, "Member 'BP_AJBInGameWindow_C_IsSmallWindow::CallFunc_ActorHasTag_ReturnValue' has a wrong offset!");

}

