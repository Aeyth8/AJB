#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_TestModeMenuItemSelectText

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "WB_TestModeMenuItemValue_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_TestModeMenuItemSelectText.WB_TestModeMenuItemSelectText_C
// 0x0028 (0x0350 - 0x0328)
class UWB_TestModeMenuItemSelectText_C final : public UWB_TestModeMenuItemValue_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_WB_TestModeMenuItemSelectText_C;    // 0x0328(0x0008)(Transient, DuplicateTransient)
	int32                                         SelectIndex;                                       // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           SelectText;                                        // 0x0338(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ExposeOnSpawn)
	int32                                         DefaultIndex;                                      // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bAlignRight;                                       // 0x034C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)

public:
	void ExecuteUbergraph_WB_TestModeMenuItemSelectText(int32 EntryPoint);
	void SetSelectValue(int32 Value);
	void ModifyMinValue();
	void ModifyMaxValue();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Construct();
	bool ValueDown();
	void ValueUp(bool* IsMax);
	bool IsDefaultValue();
	void GetValueText(class FText* OutText);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_TestModeMenuItemSelectText_C">();
	}
	static class UWB_TestModeMenuItemSelectText_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_TestModeMenuItemSelectText_C>();
	}
};
static_assert(alignof(UWB_TestModeMenuItemSelectText_C) == 0x000008, "Wrong alignment on UWB_TestModeMenuItemSelectText_C");
static_assert(sizeof(UWB_TestModeMenuItemSelectText_C) == 0x000350, "Wrong size on UWB_TestModeMenuItemSelectText_C");
static_assert(offsetof(UWB_TestModeMenuItemSelectText_C, UberGraphFrame_WB_TestModeMenuItemSelectText_C) == 0x000328, "Member 'UWB_TestModeMenuItemSelectText_C::UberGraphFrame_WB_TestModeMenuItemSelectText_C' has a wrong offset!");
static_assert(offsetof(UWB_TestModeMenuItemSelectText_C, SelectIndex) == 0x000330, "Member 'UWB_TestModeMenuItemSelectText_C::SelectIndex' has a wrong offset!");
static_assert(offsetof(UWB_TestModeMenuItemSelectText_C, SelectText) == 0x000338, "Member 'UWB_TestModeMenuItemSelectText_C::SelectText' has a wrong offset!");
static_assert(offsetof(UWB_TestModeMenuItemSelectText_C, DefaultIndex) == 0x000348, "Member 'UWB_TestModeMenuItemSelectText_C::DefaultIndex' has a wrong offset!");
static_assert(offsetof(UWB_TestModeMenuItemSelectText_C, bAlignRight) == 0x00034C, "Member 'UWB_TestModeMenuItemSelectText_C::bAlignRight' has a wrong offset!");

}

