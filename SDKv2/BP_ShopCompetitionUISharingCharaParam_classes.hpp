#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ShopCompetitionUISharingCharaParam

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AJB_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ShopCompetitionUISharingCharaParam.BP_ShopCompetitionUISharingCharaParam_C
// 0x0030 (0x0120 - 0x00F0)
class UBP_ShopCompetitionUISharingCharaParam_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00F0(0x0008)(Transient, DuplicateTransient)
	class ABP_AJBInGameCharacter_C*               OwnerCharacter;                                    // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 DevShopCompetitionLevelName;                       // 0x0100(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_AJBInGameWatcherCamera_C*>   CachedCameraman;                                   // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_ShopCompetitionUISharingCharaParam(int32 EntryPoint);
	void UnbindChangeCharacterBehavior();
	void OnChangeCharacterBehavior(ECharacterBehavior New, ECharacterBehavior Old);
	void UnbindCharacterDead();
	void UnbindAddStatus();
	void UnbindDamage();
	void OnDead(const struct FGameplayTag& DamageType, class AActor* DeadActor, class AActor* DamageCauser);
	void OnUpdateCharaPollingParam(float CriticalTimeRate);
	void ReceiveTick(float DeltaSeconds);
	void OnAddStatus();
	void OnUpdateCharaParam();
	void OnDamageOwnerChara_Svr_(int32 Damage, const struct FGameplayTag& DamageType, class AActor* DamageCauser, bool bRemainHP, bool bDamageIsCut, bool bNotUseCollision);
	void ReceiveBeginPlay();
	void IsShopCompetition(bool* bReturnValue);
	void GetCameraman(TArray<class ABP_AJBInGameWatcherCamera_C*>* CachedCameraman_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ShopCompetitionUISharingCharaParam_C">();
	}
	static class UBP_ShopCompetitionUISharingCharaParam_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_ShopCompetitionUISharingCharaParam_C>();
	}
};
static_assert(alignof(UBP_ShopCompetitionUISharingCharaParam_C) == 0x000008, "Wrong alignment on UBP_ShopCompetitionUISharingCharaParam_C");
static_assert(sizeof(UBP_ShopCompetitionUISharingCharaParam_C) == 0x000120, "Wrong size on UBP_ShopCompetitionUISharingCharaParam_C");
static_assert(offsetof(UBP_ShopCompetitionUISharingCharaParam_C, UberGraphFrame) == 0x0000F0, "Member 'UBP_ShopCompetitionUISharingCharaParam_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_ShopCompetitionUISharingCharaParam_C, OwnerCharacter) == 0x0000F8, "Member 'UBP_ShopCompetitionUISharingCharaParam_C::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(UBP_ShopCompetitionUISharingCharaParam_C, DevShopCompetitionLevelName) == 0x000100, "Member 'UBP_ShopCompetitionUISharingCharaParam_C::DevShopCompetitionLevelName' has a wrong offset!");
static_assert(offsetof(UBP_ShopCompetitionUISharingCharaParam_C, CachedCameraman) == 0x000110, "Member 'UBP_ShopCompetitionUISharingCharaParam_C::CachedCameraman' has a wrong offset!");

}

