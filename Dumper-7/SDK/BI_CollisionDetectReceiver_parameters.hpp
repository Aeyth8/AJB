#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BI_CollisionDetectReceiver

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BI_CollisionDetectReceiver.BI_CollisionDetectReceiver_C.OnOverlapped
// 0x00A8 (0x00A8 - 0x0000)
struct BI_CollisionDetectReceiver_C_OnOverlapped final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BI_CollisionDetectReceiver_C_OnOverlapped) == 0x000008, "Wrong alignment on BI_CollisionDetectReceiver_C_OnOverlapped");
static_assert(sizeof(BI_CollisionDetectReceiver_C_OnOverlapped) == 0x0000A8, "Wrong size on BI_CollisionDetectReceiver_C_OnOverlapped");
static_assert(offsetof(BI_CollisionDetectReceiver_C_OnOverlapped, OverlappedComponent) == 0x000000, "Member 'BI_CollisionDetectReceiver_C_OnOverlapped::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BI_CollisionDetectReceiver_C_OnOverlapped, OtherActor) == 0x000008, "Member 'BI_CollisionDetectReceiver_C_OnOverlapped::OtherActor' has a wrong offset!");
static_assert(offsetof(BI_CollisionDetectReceiver_C_OnOverlapped, OtherComp) == 0x000010, "Member 'BI_CollisionDetectReceiver_C_OnOverlapped::OtherComp' has a wrong offset!");
static_assert(offsetof(BI_CollisionDetectReceiver_C_OnOverlapped, OtherBodyIndex) == 0x000018, "Member 'BI_CollisionDetectReceiver_C_OnOverlapped::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BI_CollisionDetectReceiver_C_OnOverlapped, bFromSweep) == 0x00001C, "Member 'BI_CollisionDetectReceiver_C_OnOverlapped::bFromSweep' has a wrong offset!");
static_assert(offsetof(BI_CollisionDetectReceiver_C_OnOverlapped, SweepResult) == 0x000020, "Member 'BI_CollisionDetectReceiver_C_OnOverlapped::SweepResult' has a wrong offset!");

}

