#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameMovableStand_SXP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AJB_structs.hpp"
#include "AkAudio_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BP_AJBInGameMovableStand_classes.hpp"
#include "E_StencilDigit_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBInGameMovableStand_SXP.BP_AJBInGameMovableStand_SXP_C
// 0x0100 (0x1050 - 0x0F50)
class ABP_AJBInGameMovableStand_SXP_C final : public ABP_AJBInGameMovableStand_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBInGameMovableStand_SXP_C;     // 0x0F48(0x0008)(Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 SK_Bullet;                                         // 0x0F50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        PS_LoiteringPoint;                                 // 0x0F58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         LoiteringTime;                                     // 0x0F60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KickingTime;                                       // 0x0F64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaitingTime;                                       // 0x0F68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovableStandSXPState                         SXPState;                                          // 0x0F6C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F6D[0x3];                                      // 0x0F6D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StateTime;                                         // 0x0F70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpringArmLengthDeafult;                            // 0x0F74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpringArmLengthOnKicking;                          // 0x0F78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShowLeftTime;                                     // 0x0F7C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F7D[0x3];                                      // 0x0F7D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBDamageAffecterBase_C*            Affecter;                                          // 0x0F80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SkillTag;                                          // 0x0F88(0x0008)(Edit, BlueprintVisible, Net, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EffectLoiteringTag;                                // 0x0F90(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EffectHitTag;                                      // 0x0F98(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SELoiteringTag;                                    // 0x0FA0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SEHitTag;                                          // 0x0FA8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GionHitTag;                                        // 0x0FB0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableHeadShot;                                   // 0x0FB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FB9[0x3];                                      // 0x0FB9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Rep_HP;                                            // 0x0FBC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HPMax;                                             // 0x0FC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC4[0x4];                                      // 0x0FC4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           AM_Lotering;                                       // 0x0FC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           AM_Kicking;                                        // 0x0FD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnStateChanged;                                    // 0x0FD8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UAkComponent*                           LoiteringSE;                                       // 0x0FE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          PS_Loitering;                                      // 0x0FF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovableStandSXPState                         TempSXPState;                                      // 0x0FF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FF9[0x3];                                      // 0x0FF9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HitDamage;                                         // 0x0FFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HitDamageOnHeadShot;                               // 0x1000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeadShotTraceLength;                               // 0x1004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AccelThreshould;                                   // 0x1008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_100C[0x4];                                     // 0x100C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnMaxSpeedChanged;                                 // 0x1010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UAkComponent*                           HitSE;                                             // 0x1020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovableSXPFlyingState                        SXPFlyingState;                                    // 0x1028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovableSXPFlyingState                        _ForSkipOwner_SXPFlyingState;                      // 0x1029(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_102A[0x2];                                     // 0x102A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SerialNumber;                                      // 0x102C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovableStandSXPState                         Rep_SXPState;                                      // 0x1030(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1031[0x3];                                     // 0x1031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BrakingDecalerationFlyingOnSpecialBreakDown;       // 0x1034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FirstLocation;                                     // 0x1038(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBInGameMovableStand_SXP(int32 EntryPoint);
	void OnCharacterActiveBehaviorChanged(class AAJBInGameCharacter* TargetCharacter, ECharacterActiveBehavior OldBehavior, ECharacterActiveBehavior NextBehavior, bool bSpecialBreakDown);
	void ROS_OnDamageOverlap(class AActor* HitActor, const struct FVector& Location);
	void OnDamageOverlap(class AActor* HitActor, const struct FVector& HitLocation);
	void OnSetViewTargetToNewSpectator();
	void StateBeginPlay();
	void OnBeginState_Waiting(EMovableStandSXPState PrevState);
	void OnBeginState_Kicking(EMovableStandSXPState PrevState);
	void OnBeginState_Loitering(EMovableStandSXPState PrevState);
	void OnBeginState_None(EMovableStandSXPState PrevState);
	void MovableStandSetup();
	void StopSpecialBreakDownAnimation();
	void PlaySpecialBreakDownAnimation();
	void GenerateEffects(const struct FVector& Location, class AActor* HitActor, bool bHeadShot, float CuttingRate, bool bDisableDamage, bool bBlockedByAAP);
	void ReceiveDestroyed();
	void OnDisappear();
	void OnChangeFlyingState(EMovableSXPFlyingState NewState);
	void ROS_ChangeFlyingState(EMovableSXPFlyingState NewState);
	void ChangeFlyingState(EMovableSXPFlyingState NewState);
	void ReceiveTheWorld(float Time, bool bEnable, bool bOperatorIsEmpty);
	void OnRep_AppearanceTransition();
	void ChangeStateCore(EMovableStandSXPState PrevState, EMovableStandSXPState NextState);
	void OnChangeState(EMovableStandSXPState PrevState, EMovableStandSXPState NextState);
	void ChangeState_Local(EMovableStandSXPState NextState);
	void OnMC_ChangeState(EMovableStandSXPState PrevState, EMovableStandSXPState NextState);
	void OnROS_ChangeState(EMovableStandSXPState PrevState, EMovableStandSXPState NextState);
	void MC_ChangeState(EMovableStandSXPState PrevState, EMovableStandSXPState NextState);
	void ROS_ChangeState(EMovableStandSXPState PrevState, EMovableStandSXPState NextState);
	void OnPressedR2();
	void MC_OnHitRodeoShot(const struct FVector& HitLocation, class AActor* HitActor, bool bHeadShot, float CuttingRate, bool bDisableDamage, bool bBlockedByAAP);
	void ROS_OnHitRodeoShot(const struct FVector& HitLocation, class AActor* HitActor, bool bHeadShot, float CuttingRate, bool bDisableDamage, bool bBlockedByAAP);
	void BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnHitRodeoShot(const struct FVector& HitLocation, class AActor* HitActor, bool bHeadShot, float CuttingRate, bool bDisableDamage);
	void MC_SpawnDamageDisplay(const struct FAJBDamageDisplayParams& DisplayParams, const struct FAJBDamageDisplayProperty& DisplayProperty);
	void MC_OnBlocking(class AActor* BlockedActor, const struct FVector& HitLocation, bool bReflect, bool bSeparateStandAttack);
	void ROS_OnBlocking(class AActor* BlockedActor, const struct FVector& HitLocation, bool bReflect, bool bSeparateStandAttack);
	void Blocking(class AActor* BlockedActor, class AActor* OtherActor, const struct FVector& HitLocation, const struct FVector& HitNormal, int32 CuttingProjectile___, int32 CuttingOther___, bool bInvincible, bool bReflectProjectile, const struct FRotator& ReflectRotation, bool bAvoidSkill, bool bSeparateStandAttack, const struct FGameplayTag& ReflectSkillTag, const struct FVector& KnockbackVelocity, float KnockbackIntensity);
	void ROC_Waiting();
	void OnCompleted_4766B3DE4E785B5E56887793DC497D70(class FName NotifyName);
	void OnBlendOut_4766B3DE4E785B5E56887793DC497D70(class FName NotifyName);
	void OnInterrupted_4766B3DE4E785B5E56887793DC497D70(class FName NotifyName);
	void OnNotifyBegin_4766B3DE4E785B5E56887793DC497D70(class FName NotifyName);
	void OnNotifyEnd_4766B3DE4E785B5E56887793DC497D70(class FName NotifyName);
	void Ignition_Local();
	void InitializeStatus();
	void ConsumeDamage(int32 Damage);
	void Waiting_Local();
	void DebugPrintLeftTime();
	void ChangeEnableMovement(bool bEnable);
	void ChangeEnableBullletVisibility(bool bEnable);
	void ChangeEnableEffect(bool bEnable);
	void ResetSpringArmLength();
	void SetSpringArmLength(float Length);
	void SkillSettings(const struct FGameplayTag& InSkillTag, class USkeletalMesh* InMesh, class UAnimMontage* InAM_Loitering, class UAnimMontage* InAM_Kicking, const struct FGameplayTag& InEffectLoiteringTag, const struct FGameplayTag& InEffectHitTag, const struct FGameplayTag& InSELoiteringTag, const struct FGameplayTag& InSEHitTag, const struct FGameplayTag& InGionHitTag, bool bInEnableHeadShot, int32 InMaxHP, float InMaxSpeedOnAccel, float InMaxSpeedDefault, float InMaxSpeedOnDeaccel, float InLoiteringTime, float InKickingTime, float InWaitingTime, int32 InHitDamage, int32 InHitDamageOnHeadShot, float InHeadShotTraceLength, int32 InSerialNumber, class UAnimMontage* InAM_SpecialBreakDown);
	void ClearingLoiteringState();
	void GetPoliticDamage(bool bHeadShot, int32* Damage);
	void OnRep__ForSkipOwner_SXPFlyingState();
	void ChangeSXPFlyingState(EMovableSXPFlyingState SXPFlyingState_0);
	void EndState_Local();
	void ClearingWaitingState(bool bFromLoitering);
	void TryDestroyAffecter();
	void ChangeSXPState(EMovableStandSXPState NewSXPState);
	void RestoreSkillSettings();
	void UpdateTransform();
	void CheckIgnoreBlocking(class AActor* TargetActor, bool* bIgnore);
	void CheckPassiveOnly(bool* bIsPassiveOnly);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UpdateCameraInput();
	void AJBDamage(class AActor* DamagedActor, int32 DamageForHPAP, int32 DamageForAAP, int32 CutDamage, const struct FGameplayTag& DamageType, int32 SerialNumber_0, EDamagePriority DamagePriority, float AttackDistance, class AActor* DamageCauser, bool WithSeparatedStandAttack, bool HitEnemysSeparatedStand, bool bPenetrateAP, bool bNotUseCollision, bool IsEndured, const struct FAJBDamageDisplayParams& DamageDisplayParams, const struct FAJBDamageDisplayProperty& DamageDisplayProperty);
	void UserConstructionScript();
	void GetCollisionProfileName(class FName* ProfileName);
	void UpdateMovementForwardInput(float Value, struct FVector* WorldDirection, float* ScaleValue);
	void UpdateMaterials();
	void ChangeStandMovementMode(bool bEnable);
	void OnBeforeInteract();
	void CheckChangeableSpeed(bool* bChangeable);
	void GetPrimitivesToChangeStencil(E_StencilDigit StencilDigit, TArray<class UPrimitiveComponent*>* PrimitiveComponents);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBInGameMovableStand_SXP_C">();
	}
	static class ABP_AJBInGameMovableStand_SXP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBInGameMovableStand_SXP_C>();
	}
};
static_assert(alignof(ABP_AJBInGameMovableStand_SXP_C) == 0x000010, "Wrong alignment on ABP_AJBInGameMovableStand_SXP_C");
static_assert(sizeof(ABP_AJBInGameMovableStand_SXP_C) == 0x001050, "Wrong size on ABP_AJBInGameMovableStand_SXP_C");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, UberGraphFrame_BP_AJBInGameMovableStand_SXP_C) == 0x000F48, "Member 'ABP_AJBInGameMovableStand_SXP_C::UberGraphFrame_BP_AJBInGameMovableStand_SXP_C' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, SK_Bullet) == 0x000F50, "Member 'ABP_AJBInGameMovableStand_SXP_C::SK_Bullet' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, PS_LoiteringPoint) == 0x000F58, "Member 'ABP_AJBInGameMovableStand_SXP_C::PS_LoiteringPoint' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, LoiteringTime) == 0x000F60, "Member 'ABP_AJBInGameMovableStand_SXP_C::LoiteringTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, KickingTime) == 0x000F64, "Member 'ABP_AJBInGameMovableStand_SXP_C::KickingTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, WaitingTime) == 0x000F68, "Member 'ABP_AJBInGameMovableStand_SXP_C::WaitingTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, SXPState) == 0x000F6C, "Member 'ABP_AJBInGameMovableStand_SXP_C::SXPState' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, StateTime) == 0x000F70, "Member 'ABP_AJBInGameMovableStand_SXP_C::StateTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, SpringArmLengthDeafult) == 0x000F74, "Member 'ABP_AJBInGameMovableStand_SXP_C::SpringArmLengthDeafult' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, SpringArmLengthOnKicking) == 0x000F78, "Member 'ABP_AJBInGameMovableStand_SXP_C::SpringArmLengthOnKicking' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, bShowLeftTime) == 0x000F7C, "Member 'ABP_AJBInGameMovableStand_SXP_C::bShowLeftTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, Affecter) == 0x000F80, "Member 'ABP_AJBInGameMovableStand_SXP_C::Affecter' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, SkillTag) == 0x000F88, "Member 'ABP_AJBInGameMovableStand_SXP_C::SkillTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, EffectLoiteringTag) == 0x000F90, "Member 'ABP_AJBInGameMovableStand_SXP_C::EffectLoiteringTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, EffectHitTag) == 0x000F98, "Member 'ABP_AJBInGameMovableStand_SXP_C::EffectHitTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, SELoiteringTag) == 0x000FA0, "Member 'ABP_AJBInGameMovableStand_SXP_C::SELoiteringTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, SEHitTag) == 0x000FA8, "Member 'ABP_AJBInGameMovableStand_SXP_C::SEHitTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, GionHitTag) == 0x000FB0, "Member 'ABP_AJBInGameMovableStand_SXP_C::GionHitTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, bEnableHeadShot) == 0x000FB8, "Member 'ABP_AJBInGameMovableStand_SXP_C::bEnableHeadShot' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, Rep_HP) == 0x000FBC, "Member 'ABP_AJBInGameMovableStand_SXP_C::Rep_HP' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, HPMax) == 0x000FC0, "Member 'ABP_AJBInGameMovableStand_SXP_C::HPMax' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, AM_Lotering) == 0x000FC8, "Member 'ABP_AJBInGameMovableStand_SXP_C::AM_Lotering' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, AM_Kicking) == 0x000FD0, "Member 'ABP_AJBInGameMovableStand_SXP_C::AM_Kicking' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, OnStateChanged) == 0x000FD8, "Member 'ABP_AJBInGameMovableStand_SXP_C::OnStateChanged' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, LoiteringSE) == 0x000FE8, "Member 'ABP_AJBInGameMovableStand_SXP_C::LoiteringSE' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, PS_Loitering) == 0x000FF0, "Member 'ABP_AJBInGameMovableStand_SXP_C::PS_Loitering' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, TempSXPState) == 0x000FF8, "Member 'ABP_AJBInGameMovableStand_SXP_C::TempSXPState' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, HitDamage) == 0x000FFC, "Member 'ABP_AJBInGameMovableStand_SXP_C::HitDamage' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, HitDamageOnHeadShot) == 0x001000, "Member 'ABP_AJBInGameMovableStand_SXP_C::HitDamageOnHeadShot' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, HeadShotTraceLength) == 0x001004, "Member 'ABP_AJBInGameMovableStand_SXP_C::HeadShotTraceLength' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, AccelThreshould) == 0x001008, "Member 'ABP_AJBInGameMovableStand_SXP_C::AccelThreshould' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, OnMaxSpeedChanged) == 0x001010, "Member 'ABP_AJBInGameMovableStand_SXP_C::OnMaxSpeedChanged' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, HitSE) == 0x001020, "Member 'ABP_AJBInGameMovableStand_SXP_C::HitSE' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, SXPFlyingState) == 0x001028, "Member 'ABP_AJBInGameMovableStand_SXP_C::SXPFlyingState' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, _ForSkipOwner_SXPFlyingState) == 0x001029, "Member 'ABP_AJBInGameMovableStand_SXP_C::_ForSkipOwner_SXPFlyingState' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, SerialNumber) == 0x00102C, "Member 'ABP_AJBInGameMovableStand_SXP_C::SerialNumber' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, Rep_SXPState) == 0x001030, "Member 'ABP_AJBInGameMovableStand_SXP_C::Rep_SXPState' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, BrakingDecalerationFlyingOnSpecialBreakDown) == 0x001034, "Member 'ABP_AJBInGameMovableStand_SXP_C::BrakingDecalerationFlyingOnSpecialBreakDown' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMovableStand_SXP_C, FirstLocation) == 0x001038, "Member 'ABP_AJBInGameMovableStand_SXP_C::FirstLocation' has a wrong offset!");

}

