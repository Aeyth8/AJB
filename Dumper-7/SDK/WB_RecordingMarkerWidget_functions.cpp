#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_RecordingMarkerWidget

#include "Basic.hpp"

#include "WB_RecordingMarkerWidget_classes.hpp"
#include "WB_RecordingMarkerWidget_parameters.hpp"


namespace SDK
{

// Function WB_RecordingMarkerWidget.WB_RecordingMarkerWidget_C.ExecuteUbergraph_WB_RecordingMarkerWidget
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_RecordingMarkerWidget_C::ExecuteUbergraph_WB_RecordingMarkerWidget(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_RecordingMarkerWidget_C", "ExecuteUbergraph_WB_RecordingMarkerWidget");

	Params::WB_RecordingMarkerWidget_C_ExecuteUbergraph_WB_RecordingMarkerWidget Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_RecordingMarkerWidget.WB_RecordingMarkerWidget_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWB_RecordingMarkerWidget_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_RecordingMarkerWidget_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_RecordingMarkerWidget.WB_RecordingMarkerWidget_C.EndUpdate
// (BlueprintCallable, BlueprintEvent)

void UWB_RecordingMarkerWidget_C::EndUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_RecordingMarkerWidget_C", "EndUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_RecordingMarkerWidget.WB_RecordingMarkerWidget_C.BeginUpdate
// (BlueprintCallable, BlueprintEvent)

void UWB_RecordingMarkerWidget_C::BeginUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_RecordingMarkerWidget_C", "BeginUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_RecordingMarkerWidget.WB_RecordingMarkerWidget_C.Update
// (BlueprintCallable, BlueprintEvent)

void UWB_RecordingMarkerWidget_C::Update()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_RecordingMarkerWidget_C", "Update");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_RecordingMarkerWidget.WB_RecordingMarkerWidget_C.UpdateParameter
// (BlueprintCallable, BlueprintEvent)

void UWB_RecordingMarkerWidget_C::UpdateParameter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_RecordingMarkerWidget_C", "UpdateParameter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_RecordingMarkerWidget.WB_RecordingMarkerWidget_C.UpdateLocation
// (BlueprintCallable, BlueprintEvent)

void UWB_RecordingMarkerWidget_C::UpdateLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_RecordingMarkerWidget_C", "UpdateLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_RecordingMarkerWidget.WB_RecordingMarkerWidget_C.EndDamageDirection
// (BlueprintCallable, BlueprintEvent)

void UWB_RecordingMarkerWidget_C::EndDamageDirection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_RecordingMarkerWidget_C", "EndDamageDirection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_RecordingMarkerWidget.WB_RecordingMarkerWidget_C.StartDamageDirection
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_RecordingMarkerWidget_C::StartDamageDirection(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_RecordingMarkerWidget_C", "StartDamageDirection");

	Params::WB_RecordingMarkerWidget_C_StartDamageDirection Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_RecordingMarkerWidget.WB_RecordingMarkerWidget_C.PlayVanishFade
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsFadeOut                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UWB_RecordingMarkerWidget_C::PlayVanishFade(bool bIsFadeOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_RecordingMarkerWidget_C", "PlayVanishFade");

	Params::WB_RecordingMarkerWidget_C_PlayVanishFade Parms{};

	Parms.bIsFadeOut = bIsFadeOut;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WB_RecordingMarkerWidget.WB_RecordingMarkerWidget_C.CalcRandomRange
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_RecordingMarkerWidget_C::CalcRandomRange(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_RecordingMarkerWidget_C", "CalcRandomRange");

	Params::WB_RecordingMarkerWidget_C_CalcRandomRange Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_RecordingMarkerWidget.WB_RecordingMarkerWidget_C.CalcScale
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D*                       Scale                                                  (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_RecordingMarkerWidget_C::CalcScale(struct FVector2D* Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_RecordingMarkerWidget_C", "CalcScale");

	Params::WB_RecordingMarkerWidget_C_CalcScale Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Scale != nullptr)
		*Scale = std::move(Parms.Scale);
}


// Function WB_RecordingMarkerWidget.WB_RecordingMarkerWidget_C.CalcCharacterCheckPoint
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         Point1                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Point2                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_RecordingMarkerWidget_C::CalcCharacterCheckPoint(struct FVector* Point1, struct FVector* Point2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_RecordingMarkerWidget_C", "CalcCharacterCheckPoint");

	Params::WB_RecordingMarkerWidget_C_CalcCharacterCheckPoint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Point1 != nullptr)
		*Point1 = std::move(Parms.Point1);

	if (Point2 != nullptr)
		*Point2 = std::move(Parms.Point2);
}


// Function WB_RecordingMarkerWidget.WB_RecordingMarkerWidget_C.PauseCurrentAnimation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bPause                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_RecordingMarkerWidget_C::PauseCurrentAnimation(bool bPause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_RecordingMarkerWidget_C", "PauseCurrentAnimation");

	Params::WB_RecordingMarkerWidget_C_PauseCurrentAnimation Parms{};

	Parms.bPause = bPause;

	UObject::ProcessEvent(Func, &Parms);
}

}

