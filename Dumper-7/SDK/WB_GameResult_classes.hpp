#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_GameResult

#include "Basic.hpp"

#include "EGameResultUIInnerState_structs.hpp"
#include "AJB_structs.hpp"
#include "AJB_classes.hpp"
#include "Engine_structs.hpp"
#include "FlowState_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_GameResult.WB_GameResult_C
// 0x03F8 (0x06B8 - 0x02C0)
class UWB_GameResult_C final : public UAJBWindowWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(Transient, DuplicateTransient)
	class UVerticalBox*                           BonusPointDetail_2;                                // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_CommonButton_C*                     ButtonGameEnd;                                     // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_CommonButton_C*                     ButtonHighlight;                                   // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         ButtonRoot;                                        // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          CurrentAndMaxExp;                                  // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ExpBar;                                            // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          GameScore;                                         // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          PlayerLevel;                                       // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_GameResultBonusPoint_C*             ResultBonusPoint_1;                                // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_GameResultBonusPoint_C*             ResultBonusPoint_2;                                // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_GameResultBonusPoint_C*             ResultBonusPoint_3;                                // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_GameResultBonusPoint_C*             ResultBonusPoint_4;                                // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_GameResultBonusPoint_C*             ResultBonusPoint_5;                                // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_GameResultBonusPoint_C*             ResultBonusPoint_6;                                // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_GameResultBonusPoint_C*             ResultBonusPoint_7;                                // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_GameResultBonusPoint_C*             ResultBonusPoint_8;                                // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_GameResultBonusPoint_C*             ResultBonusPoint_9;                                // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_BG_Animation_C*                     WB_BG_Animation;                                   // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_GameModeView_C*                     WB_GameModeView;                                   // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         BarSpeed;                                          // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CountDownTimer;                                    // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAJBGameResult                         ReceiveGameResult;                                 // 0x0368(0x0190)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         ReceiveTargetUserRank;                             // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DisplayCurrentUserRank;                            // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bStartCountDown;                                   // 0x0500(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bLoadedMenuBGLevel;                                // 0x0501(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bOpenLevelupWindow;                                // 0x0502(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_503[0x1];                                      // 0x0503(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CountDownElapsedTime;                              // 0x0504(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DMI_ExpBar;                                        // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentExpBarPercent;                              // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetExpBarPercent;                               // 0x0514(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bStartEXPAnimation;                                // 0x0518(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_519[0x7];                                      // 0x0519(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           LastCreateAkComponent;                             // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 ReceiveNextExpList;                                // 0x0528(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         ReceiveAfterExp;                                   // 0x0538(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentNextExpListIndex;                           // 0x053C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUnitTestMode;                                     // 0x0540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_541[0x7];                                      // 0x0541(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAJBGameRecord                         TestGameRecord;                                    // 0x0548(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bOutputGameresultLog;                              // 0x0588(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bOutputRequestParamLog;                            // 0x0589(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_58A[0x2];                                      // 0x058A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OutputLogTime;                                     // 0x058C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BonusPointDelayTime;                               // 0x0590(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DisplayBeforeExp;                                  // 0x0594(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DisplayNextExp;                                    // 0x0598(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DisplayAfterExp;                                   // 0x059C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FAJBGameRewardInfo>             CachedParsedLevelUpRewardInfos;                    // 0x05A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FAJBGameRewardInfo>             CachedParsedAchieveRewardInfos;                    // 0x05B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	EGameResultUIInnerState                       CurrentState;                                      // 0x05C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C1[0x7];                                      // 0x05C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAJBLimitedAchievements                CachedParsedLimitedAchievement;                    // 0x05C8(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UWB_LimitedAchievement_C*               RefLimitedAchievement;                             // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_CommonWIndow_S_C*                   WaitOtherPlayers;                                  // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             EmoteIconBG;                                       // 0x0608(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             IconBG;                                            // 0x0610(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_CharacterAchievement_C*             RefCharacterAchievement;                           // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PreGameTicket;                                     // 0x0620(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_624[0x4];                                      // 0x0624(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_GameResultTicket_C*                 RefGameResultTicket;                               // 0x0628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UWB_GameResultBonusPoint_C*>     BonusPoints;                                       // 0x0630(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FFlowStateHandler                      AchievementStateHandler;                           // 0x0640(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UWB_PairAchievement_C*                  RefPairAchievement;                                // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         VictoryCountLimitForDisplayingCharaAchievementWindow; // 0x06A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6AC[0x4];                                      // 0x06AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_ChallengeEventProgressWindow_C*     RefChallengeEventProgress;                         // 0x06B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WB_GameResult(int32 EntryPoint);
	void OnClosedChallengeEventWindow(class UAJBWindowWidget* TargetWidget);
	void OnClosedPairAchievement(class UAJBWindowWidget* TargetWidget);
	void OnClosedPairProfileCardDetail();
	void OnClosedResultTicket(class UAJBWindowWidget* TargetWidget);
	void OnClosedProfileCardDetail();
	void OnClosedCharacterAchievement(class UAJBWindowWidget* TargetWidget);
	void OnClosedLimitedAchievement(class UAJBWindowWidget* TargetWidget);
	void OnRecievedAllLevelupReward();
	void OnRecievedAllAchieveReward();
	void OnClosedOfflineWindow(class UAJBWindowWidget* TargetWidget);
	void FinalizeGameResult();
	void UnbindCloseLevelUpWindow();
	void ForceFinishExpAnimation();
	void UpdateStopCountupSE();
	void UpdatePlayCountupSE();
	void OnClosingLevelup(class UAJBWindowWidget* TargetWidget);
	void Construct();
	void SetupDisplay();
	void OnStartHighlight();
	void OnGameEnd();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void BndEvt__WB_CommonButton_C_1_K2Node_ComponentBoundEvent_1_OnAJBButtonEvent__DelegateSignature(class UAJBButtonWidget* OwnerWidget, class UAJBButton* TargetButton);
	void BndEvt__WB_CommonButton_0_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature(class UAJBButtonWidget* OwnerWidget, class UAJBButton* TargetButton);
	void OnClosingWindow();
	void OnOpeningWindow();
	void OnSuccess_E09ADCBB4C470303612BEBBFBCDFD992(EAJBNetAPIResult Result, const struct FAJBGameResult& GameResultData);
	void OnFailed_E09ADCBB4C470303612BEBBFBCDFD992(EAJBNetAPIResult Result, const struct FAJBGameResult& GameResultData);
	void Finished_E59942174515E7C9E6BACEA065510D00();
	void Finished_BAAA99D44104AA64E36304A96A97478B();
	void Finished_ACEB57994FFC4DDFA0406391D0A5F1C4();
	void ParseGameResultData(struct FAJBGameResult& Result);
	void CreateGameRecord(struct FAJBGameRecord* AJBGameRecord);
	void SetVisivleHighlightButton();
	void OutputRequestParamLog(struct FAJBGameRecord& GameRecord);
	void GetCurrentTicket(int32* Ticket_Num);
	void DevOutputLog();
	void PopLevelupRewardTIcket(bool* bSuccess, int32* Ticket_Num);
	void IsLastSurvivor(bool* bReturnValue);
	void BuildBonusPointList(struct FAJBGameRecord& GameRecord);
	void PlayBonusPointsAnimation();
	void SetupBonusPointWidget(const class FText& Title, EAJBLimitedBounusSign Sign, float Value);
	void GetRewardAchieveTicketNum(int32* TicketCount);
	bool IsTop3();
	bool OnInputTurnRate(float Value);
	bool OnInputReleasedUp();
	bool OnInputReleasedTouch();
	bool OnInputReleasedRight();
	bool OnInputReleasedLeft();
	bool OnInputReleasedDown();
	bool OnInputReleasedDecide();
	bool OnInputReleasedCancel();
	bool OnInputPressedUp();
	bool OnInputPressedTouch(const float LocationX, const float LocationY);
	bool OnInputPressedRight();
	bool OnInputPressedLeft();
	bool OnInputPressedDown();
	bool OnInputPressedDecide();
	bool OnInputPressedCancel();
	bool OnInputMoveRight(float Value);
	bool OnInputMoveForward(float Value);
	bool OnInputLookupRate(float Value);
	bool IsModeless();
	bool OnInputReleasedR2();
	bool OnInputReleasedR1();
	bool OnInputReleasedL2();
	bool OnInputReleasedL1();
	bool OnInputPressedR2();
	bool OnInputPressedR1();
	bool OnInputPressedL2();
	bool OnInputPressedL1();
	bool OnInputReleasedL3();
	bool OnInputPressedL3();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_GameResult_C">();
	}
	static class UWB_GameResult_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_GameResult_C>();
	}
};
static_assert(alignof(UWB_GameResult_C) == 0x000008, "Wrong alignment on UWB_GameResult_C");
static_assert(sizeof(UWB_GameResult_C) == 0x0006B8, "Wrong size on UWB_GameResult_C");
static_assert(offsetof(UWB_GameResult_C, UberGraphFrame) == 0x0002C0, "Member 'UWB_GameResult_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, BonusPointDetail_2) == 0x0002C8, "Member 'UWB_GameResult_C::BonusPointDetail_2' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, ButtonGameEnd) == 0x0002D0, "Member 'UWB_GameResult_C::ButtonGameEnd' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, ButtonHighlight) == 0x0002D8, "Member 'UWB_GameResult_C::ButtonHighlight' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, ButtonRoot) == 0x0002E0, "Member 'UWB_GameResult_C::ButtonRoot' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, CurrentAndMaxExp) == 0x0002E8, "Member 'UWB_GameResult_C::CurrentAndMaxExp' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, ExpBar) == 0x0002F0, "Member 'UWB_GameResult_C::ExpBar' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, GameScore) == 0x0002F8, "Member 'UWB_GameResult_C::GameScore' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, PlayerLevel) == 0x000300, "Member 'UWB_GameResult_C::PlayerLevel' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, ResultBonusPoint_1) == 0x000308, "Member 'UWB_GameResult_C::ResultBonusPoint_1' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, ResultBonusPoint_2) == 0x000310, "Member 'UWB_GameResult_C::ResultBonusPoint_2' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, ResultBonusPoint_3) == 0x000318, "Member 'UWB_GameResult_C::ResultBonusPoint_3' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, ResultBonusPoint_4) == 0x000320, "Member 'UWB_GameResult_C::ResultBonusPoint_4' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, ResultBonusPoint_5) == 0x000328, "Member 'UWB_GameResult_C::ResultBonusPoint_5' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, ResultBonusPoint_6) == 0x000330, "Member 'UWB_GameResult_C::ResultBonusPoint_6' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, ResultBonusPoint_7) == 0x000338, "Member 'UWB_GameResult_C::ResultBonusPoint_7' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, ResultBonusPoint_8) == 0x000340, "Member 'UWB_GameResult_C::ResultBonusPoint_8' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, ResultBonusPoint_9) == 0x000348, "Member 'UWB_GameResult_C::ResultBonusPoint_9' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, WB_BG_Animation) == 0x000350, "Member 'UWB_GameResult_C::WB_BG_Animation' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, WB_GameModeView) == 0x000358, "Member 'UWB_GameResult_C::WB_GameModeView' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, BarSpeed) == 0x000360, "Member 'UWB_GameResult_C::BarSpeed' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, CountDownTimer) == 0x000364, "Member 'UWB_GameResult_C::CountDownTimer' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, ReceiveGameResult) == 0x000368, "Member 'UWB_GameResult_C::ReceiveGameResult' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, ReceiveTargetUserRank) == 0x0004F8, "Member 'UWB_GameResult_C::ReceiveTargetUserRank' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, DisplayCurrentUserRank) == 0x0004FC, "Member 'UWB_GameResult_C::DisplayCurrentUserRank' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, bStartCountDown) == 0x000500, "Member 'UWB_GameResult_C::bStartCountDown' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, bLoadedMenuBGLevel) == 0x000501, "Member 'UWB_GameResult_C::bLoadedMenuBGLevel' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, bOpenLevelupWindow) == 0x000502, "Member 'UWB_GameResult_C::bOpenLevelupWindow' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, CountDownElapsedTime) == 0x000504, "Member 'UWB_GameResult_C::CountDownElapsedTime' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, DMI_ExpBar) == 0x000508, "Member 'UWB_GameResult_C::DMI_ExpBar' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, CurrentExpBarPercent) == 0x000510, "Member 'UWB_GameResult_C::CurrentExpBarPercent' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, TargetExpBarPercent) == 0x000514, "Member 'UWB_GameResult_C::TargetExpBarPercent' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, bStartEXPAnimation) == 0x000518, "Member 'UWB_GameResult_C::bStartEXPAnimation' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, LastCreateAkComponent) == 0x000520, "Member 'UWB_GameResult_C::LastCreateAkComponent' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, ReceiveNextExpList) == 0x000528, "Member 'UWB_GameResult_C::ReceiveNextExpList' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, ReceiveAfterExp) == 0x000538, "Member 'UWB_GameResult_C::ReceiveAfterExp' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, CurrentNextExpListIndex) == 0x00053C, "Member 'UWB_GameResult_C::CurrentNextExpListIndex' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, bUnitTestMode) == 0x000540, "Member 'UWB_GameResult_C::bUnitTestMode' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, TestGameRecord) == 0x000548, "Member 'UWB_GameResult_C::TestGameRecord' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, bOutputGameresultLog) == 0x000588, "Member 'UWB_GameResult_C::bOutputGameresultLog' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, bOutputRequestParamLog) == 0x000589, "Member 'UWB_GameResult_C::bOutputRequestParamLog' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, OutputLogTime) == 0x00058C, "Member 'UWB_GameResult_C::OutputLogTime' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, BonusPointDelayTime) == 0x000590, "Member 'UWB_GameResult_C::BonusPointDelayTime' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, DisplayBeforeExp) == 0x000594, "Member 'UWB_GameResult_C::DisplayBeforeExp' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, DisplayNextExp) == 0x000598, "Member 'UWB_GameResult_C::DisplayNextExp' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, DisplayAfterExp) == 0x00059C, "Member 'UWB_GameResult_C::DisplayAfterExp' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, CachedParsedLevelUpRewardInfos) == 0x0005A0, "Member 'UWB_GameResult_C::CachedParsedLevelUpRewardInfos' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, CachedParsedAchieveRewardInfos) == 0x0005B0, "Member 'UWB_GameResult_C::CachedParsedAchieveRewardInfos' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, CurrentState) == 0x0005C0, "Member 'UWB_GameResult_C::CurrentState' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, CachedParsedLimitedAchievement) == 0x0005C8, "Member 'UWB_GameResult_C::CachedParsedLimitedAchievement' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, RefLimitedAchievement) == 0x0005F8, "Member 'UWB_GameResult_C::RefLimitedAchievement' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, WaitOtherPlayers) == 0x000600, "Member 'UWB_GameResult_C::WaitOtherPlayers' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, EmoteIconBG) == 0x000608, "Member 'UWB_GameResult_C::EmoteIconBG' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, IconBG) == 0x000610, "Member 'UWB_GameResult_C::IconBG' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, RefCharacterAchievement) == 0x000618, "Member 'UWB_GameResult_C::RefCharacterAchievement' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, PreGameTicket) == 0x000620, "Member 'UWB_GameResult_C::PreGameTicket' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, RefGameResultTicket) == 0x000628, "Member 'UWB_GameResult_C::RefGameResultTicket' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, BonusPoints) == 0x000630, "Member 'UWB_GameResult_C::BonusPoints' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, AchievementStateHandler) == 0x000640, "Member 'UWB_GameResult_C::AchievementStateHandler' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, RefPairAchievement) == 0x0006A0, "Member 'UWB_GameResult_C::RefPairAchievement' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, VictoryCountLimitForDisplayingCharaAchievementWindow) == 0x0006A8, "Member 'UWB_GameResult_C::VictoryCountLimitForDisplayingCharaAchievementWindow' has a wrong offset!");
static_assert(offsetof(UWB_GameResult_C, RefChallengeEventProgress) == 0x0006B0, "Member 'UWB_GameResult_C::RefChallengeEventProgress' has a wrong offset!");

}

