#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AJBInGameStageFunctionLibrary

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass AJBInGameStageFunctionLibrary.AJBInGameStageFunctionLibrary_C
// 0x0000 (0x0028 - 0x0028)
class UAJBInGameStageFunctionLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void GetStageName_StartPoint(class UObject* __WorldContext, class FName* LevelName);
	static void GetStageNameBase(class UObject* __WorldContext, class FName* LevelName);
	static void GetStageName_Persistent(class UObject* __WorldContext, class FName* LevelName);
	static void GetStageIDByAreaType(int32 AreaType, class UObject* __WorldContext, int32* StageId);
	static void GetDamegeAreaFileNameBase(class UObject* __WorldContext, class FString* File_Name_Base);
	static void GetPreLoadLevelList(class UObject* __WorldContext, TArray<struct FPrimaryAssetId>* Pre_Load_Level_Primary_Asset_Id_List);
	static void GetLevelListNeedUnloadDuringOutGame(class UObject* __WorldContext, TArray<struct FPrimaryAssetId>* Un_Load_Level_Primary_Asset_Id_List);
	static void GetStageMapTexture(class UObject* __WorldContext, TSoftObjectPtr<class UTexture2D>* Map_Texture);
	static void GetInGameDefaultBGMGameplayTag(class UObject* __WorldContext, struct FGameplayTag* BGMGameplayTag);
	static void GetInGameClimaxBGMGameplayTag(class UObject* __WorldContext, struct FGameplayTag* BGMGameplayTag);
	static void RandomAreaNo(bool bIsTraining, class UObject* __WorldContext, int32* AreaNo);
	static void GetDamageAreaFXActorClass(class UObject* __WorldContext, class UClass** FXActorClass);
	static void GetStageMaxSize(class UObject* __WorldContext, float* MaxSize);
	static void GetDamageAreaInsideSEGameplayTag(class UObject* __WorldContext, struct FGameplayTag* Inside_Damage_Area_SE);
	static void GetDamageAreaOutsideSEGameplayTag(class UObject* __WorldContext, struct FGameplayTag* Inside_Damage_Area_SE);
	static void GetDamageAreaDamageSEGameplayTag(class UObject* __WorldContext, struct FGameplayTag* Inside_Damage_Area_SE);
	static void GetStageDarkPlaceParameter(class UObject* __WorldContext, float* DarkPlaceParam);
	static void GetStageDistanceLimitParameter(class UObject* __WorldContext, float* DistanceLimitParam);
	static void GetExistsUnderwater(class UObject* __WorldContext, bool* Is_Exists_Underwater);
	static bool IsStageDark(class UObject* __WorldContext);
	static void GetStageMiniMapScale(class UObject* __WorldContext, float* Scale);
	static void GetStageIsNight(class UObject* __WorldContext, bool* bIsNight);
	static void GetStageUnderwaterMaskingCylinderRadiusScale(class UObject* __WorldContext, float* Scale);
	static void GetStageUnderwaterMaskingCylinderHeightScale(class UObject* __WorldContext, float* Scale);
	static void FindUnderWaterVisibleRadius(class UObject* __WorldContext, bool* WasFound, float* Radius);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AJBInGameStageFunctionLibrary_C">();
	}
	static class UAJBInGameStageFunctionLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAJBInGameStageFunctionLibrary_C>();
	}
};
static_assert(alignof(UAJBInGameStageFunctionLibrary_C) == 0x000008, "Wrong alignment on UAJBInGameStageFunctionLibrary_C");
static_assert(sizeof(UAJBInGameStageFunctionLibrary_C) == 0x000028, "Wrong size on UAJBInGameStageFunctionLibrary_C");

}

