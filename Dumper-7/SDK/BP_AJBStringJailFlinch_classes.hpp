#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBStringJailFlinch

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BP_AJBFlinchBase_classes.hpp"
#include "AJB_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBStringJailFlinch.BP_AJBStringJailFlinch_C
// 0x0028 (0x0250 - 0x0228)
class UBP_AJBStringJailFlinch_C final : public UBP_AJBFlinchBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBStringJailFlinch_C;           // 0x0228(0x0008)(Transient, DuplicateTransient)
	float                                         GionStartDelay_Sec_;                               // 0x0230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_234[0x4];                                      // 0x0234(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ContinuousGionTag;                                 // 0x0238(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         GionDelayInterval;                                 // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_244[0x4];                                      // 0x0244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           RestraintSE;                                       // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBStringJailFlinch(int32 EntryPoint);
	void StopContinuousGion();
	void BeginContinuousGion(bool TriggeredByStand);
	void MC_SetShouldUpdateLectActiveTime(bool bShouldUpdateLeftActiveTime);
	void OnActionInactivate(bool bTriggeredByStand);
	void OnActionActivate(bool bTriggeredByStand);
	void ChangeParticleVisibility(bool bNewVisibility);
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBStringJailFlinch_C">();
	}
	static class UBP_AJBStringJailFlinch_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBStringJailFlinch_C>();
	}
};
static_assert(alignof(UBP_AJBStringJailFlinch_C) == 0x000008, "Wrong alignment on UBP_AJBStringJailFlinch_C");
static_assert(sizeof(UBP_AJBStringJailFlinch_C) == 0x000250, "Wrong size on UBP_AJBStringJailFlinch_C");
static_assert(offsetof(UBP_AJBStringJailFlinch_C, UberGraphFrame_BP_AJBStringJailFlinch_C) == 0x000228, "Member 'UBP_AJBStringJailFlinch_C::UberGraphFrame_BP_AJBStringJailFlinch_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBStringJailFlinch_C, GionStartDelay_Sec_) == 0x000230, "Member 'UBP_AJBStringJailFlinch_C::GionStartDelay_Sec_' has a wrong offset!");
static_assert(offsetof(UBP_AJBStringJailFlinch_C, ContinuousGionTag) == 0x000238, "Member 'UBP_AJBStringJailFlinch_C::ContinuousGionTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBStringJailFlinch_C, GionDelayInterval) == 0x000240, "Member 'UBP_AJBStringJailFlinch_C::GionDelayInterval' has a wrong offset!");
static_assert(offsetof(UBP_AJBStringJailFlinch_C, RestraintSE) == 0x000248, "Member 'UBP_AJBStringJailFlinch_C::RestraintSE' has a wrong offset!");

}

