#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BI_Barrier

#include "Basic.hpp"

#include "BI_Barrier_classes.hpp"
#include "BI_Barrier_parameters.hpp"


namespace SDK
{

// Function BI_Barrier.BI_Barrier_C.IsIgnitionBySpecialProjectile
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   bIgnition                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBI_Barrier_C::IsIgnitionBySpecialProjectile(bool* bIgnition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BI_Barrier_C", "IsIgnitionBySpecialProjectile");

	Params::BI_Barrier_C_IsIgnitionBySpecialProjectile Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (bIgnition != nullptr)
		*bIgnition = Parms.bIgnition;
}


// Function BI_Barrier.BI_Barrier_C.IsIgnoreImpulseVoice
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   bInclude                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBI_Barrier_C::IsIgnoreImpulseVoice(bool* bInclude)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BI_Barrier_C", "IsIgnoreImpulseVoice");

	Params::BI_Barrier_C_IsIgnoreImpulseVoice Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (bInclude != nullptr)
		*bInclude = Parms.bInclude;
}


// Function BI_Barrier.BI_Barrier_C.IsStopPenetrateProjectile
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   bStop                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBI_Barrier_C::IsStopPenetrateProjectile(bool* bStop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BI_Barrier_C", "IsStopPenetrateProjectile");

	Params::BI_Barrier_C_IsStopPenetrateProjectile Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (bStop != nullptr)
		*bStop = Parms.bStop;
}


// Function BI_Barrier.BI_Barrier_C.IsHitPenetrateAttack
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   bHit                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBI_Barrier_C::IsHitPenetrateAttack(bool* bHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BI_Barrier_C", "IsHitPenetrateAttack");

	Params::BI_Barrier_C_IsHitPenetrateAttack Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (bHit != nullptr)
		*bHit = Parms.bHit;
}


// Function BI_Barrier.BI_Barrier_C.IsStopDirectAttackGuide
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Owner                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bIsStop                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBI_Barrier_C::IsStopDirectAttackGuide(class AActor* Owner, bool* bIsStop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BI_Barrier_C", "IsStopDirectAttackGuide");

	Params::BI_Barrier_C_IsStopDirectAttackGuide Parms{};

	Parms.Owner = Owner;

	AsUObject()->ProcessEvent(Func, &Parms);

	if (bIsStop != nullptr)
		*bIsStop = Parms.bIsStop;
}


// Function BI_Barrier.BI_Barrier_C.DamageLocal
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_Barrier_C::DamageLocal(int32 Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BI_Barrier_C", "DamageLocal");

	Params::BI_Barrier_C_DamageLocal Parms{};

	Parms.Damage = Damage;

	AsUObject()->ProcessEvent(Func, &Parms);
}

}

