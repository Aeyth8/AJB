#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameAIObservedCharacter

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBInGameAIObservedCharacter.BP_AJBInGameAIObservedCharacter_C
// 0x0040 (0x0368 - 0x0328)
class ABP_AJBInGameAIObservedCharacter_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(Transient, DuplicateTransient)
	class UBP_AJBInGameLifeTime_C*                BP_AJBInGameLifeTime;                              // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          bObserverCanSee;                                   // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_341[0x7];                                      // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameAIImaginaryCharacter_C*    ObservedImaginaryCharacter;                        // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnLifeTimeElapsed;                                 // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         LifeTimeTickInterval;                              // 0x0360(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBInGameAIObservedCharacter(int32 EntryPoint);
	void OnInGameLifeTimeElapsed(class AActor* DestroyingActor);
	void UpdateLifeTime();
	void UpdateObserverCanSee(bool bCanSee);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	class ABP_AJBInGameAIImaginaryCharacter_C* GetImaginaryCharacter();
	class APawn* GetObservedPawn();
	void Invalidate();
	bool IsObservable();
	void ActivateObject(class ABP_AJBInGameAIImaginaryCharacter_C* ImaginaryCharacter);
	void DeactivateObject();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBInGameAIObservedCharacter_C">();
	}
	static class ABP_AJBInGameAIObservedCharacter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBInGameAIObservedCharacter_C>();
	}
};
static_assert(alignof(ABP_AJBInGameAIObservedCharacter_C) == 0x000008, "Wrong alignment on ABP_AJBInGameAIObservedCharacter_C");
static_assert(sizeof(ABP_AJBInGameAIObservedCharacter_C) == 0x000368, "Wrong size on ABP_AJBInGameAIObservedCharacter_C");
static_assert(offsetof(ABP_AJBInGameAIObservedCharacter_C, UberGraphFrame) == 0x000328, "Member 'ABP_AJBInGameAIObservedCharacter_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameAIObservedCharacter_C, BP_AJBInGameLifeTime) == 0x000330, "Member 'ABP_AJBInGameAIObservedCharacter_C::BP_AJBInGameLifeTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameAIObservedCharacter_C, DefaultSceneRoot) == 0x000338, "Member 'ABP_AJBInGameAIObservedCharacter_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameAIObservedCharacter_C, bObserverCanSee) == 0x000340, "Member 'ABP_AJBInGameAIObservedCharacter_C::bObserverCanSee' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameAIObservedCharacter_C, ObservedImaginaryCharacter) == 0x000348, "Member 'ABP_AJBInGameAIObservedCharacter_C::ObservedImaginaryCharacter' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameAIObservedCharacter_C, OnLifeTimeElapsed) == 0x000350, "Member 'ABP_AJBInGameAIObservedCharacter_C::OnLifeTimeElapsed' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameAIObservedCharacter_C, LifeTimeTickInterval) == 0x000360, "Member 'ABP_AJBInGameAIObservedCharacter_C::LifeTimeTickInterval' has a wrong offset!");

}

