#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBSnipeSkill

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BP_AJBSkillBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBSnipeSkill.BP_AJBSnipeSkill_C
// 0x00A0 (0x0288 - 0x01E8)
class UBP_AJBSnipeSkill_C : public UBP_AJBSkillBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBSnipeSkill_C;                 // 0x01E8(0x0008)(Transient, DuplicateTransient)
	class UClass*                                 BulletClass;                                       // 0x01F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ShotParticle;                                      // 0x01F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ShotGion;                                          // 0x0200(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         TraceLength;                                       // 0x0208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20C[0x4];                                      // 0x020C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ShotMontage;                                       // 0x0210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LowerSpread;                                       // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LowerSpreadOnAim;                                  // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpreadHealStopTime;                                // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpreadHealStopTimeOnAim;                           // 0x0224(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAutoInactive;                                     // 0x0228(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_229[0x3];                                      // 0x0229(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AdditionalGravityPower;                            // 0x022C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InitialAdditionalGravityPower;                     // 0x0230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IrregularAngleThresould_Deg_;                      // 0x0234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIgnoreTarget;                                     // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_239[0x7];                                      // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ShotVoiceTag;                                      // 0x0240(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           HitVoiceTag;                                       // 0x0248(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         ProjectileSpeedScale;                              // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreCharacterSpread;                             // 0x0254(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_255[0x3];                                      // 0x0255(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           HeadshotVoiceTag;                                  // 0x0258(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           DefendedVoiceTag;                                  // 0x0260(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bSpeakAvoidedVoice;                                // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_269[0x7];                                      // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           AvoidedVoiceTag;                                   // 0x0270(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ShotParticleDarkPlace;                             // 0x0278(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameProjectile_C*              Rep_Bullet;                                        // 0x0280(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBSnipeSkill(int32 EntryPoint);
	void OnGiveDamage(int32 Damage_0, const struct FGameplayTag& DamageType, class AActor* DamageReceiver, bool bRemainHP, bool bDamageIsCut, int32 SerialNumber_0, bool DamageReceiverIsPlayer, bool bWithSeparatedStandAttack, bool bEnemysSeparateStand, bool bSelfDamage, bool IsEndured);
	void EndState();
	void OnBlocked(const struct FGameplayTag& SkillTag_0, bool bAvoidSkill);
	void BindCharacterDispatcher(class ABP_AJBInGameCharacter_C* CharacterBP);
	void OnHeadShot(const struct FGameplayTag& SkillTag_0);
	void OnOutOfAmmo();
	void OnStateChargeUp();
	void OnStateReady();
	void OnStateAction();
	void ConfigureBullet(class ABP_AJBInGameProjectile_C* Bullet);
	void OnShot(const struct FVector& Location, const struct FRotator& Rotation);
	void OnMCShot(const struct FVector& Location, const struct FRotator& Rotation);
	void OnROSShot(const struct FVector& Location, const struct FRotator& Rotation);
	void ChangeSpread();
	void MC_Shot(const struct FVector& Location, const struct FRotator& Rotation);
	void AppearEffect(const struct FVector& Location, const struct FRotator& Rotation);
	void SpawnBullet(const struct FVector& Location, const struct FRotator& Rotation, bool WithAddSerialNumber);
	void ROS_Shot(const struct FVector& Location, const struct FRotator& Rotation);
	void Shot();
	void TickStateAction();
	void TickStateChargeUp(float DeltaSeconds);
	void ChangeProjectileSpeedScale(float SpeedScale);
	void ChangeAdditionalProjectileGravityPower(float Power);
	void OnCompleted_7DDD297442D7CC4375E0C99B834BFDEC(class FName NotifyName);
	void OnBlendOut_7DDD297442D7CC4375E0C99B834BFDEC(class FName NotifyName);
	void OnInterrupted_7DDD297442D7CC4375E0C99B834BFDEC(class FName NotifyName);
	void OnNotifyBegin_7DDD297442D7CC4375E0C99B834BFDEC(class FName NotifyName);
	void OnNotifyEnd_7DDD297442D7CC4375E0C99B834BFDEC(class FName NotifyName);
	void GetPoliticSpreadParam(float* LowerSpread_0, float* SpreadHealStopTime_0);
	void ProcessingShotTransform(const struct FVector& InLocation, struct FVector* OutLocation);
	void GetShotParticleTag(struct FGameplayTag* ShotParticleTag);
	void OnRep_Rep_Bullet();
	void ReplicatedBullet();
	float GetSkillAttackRange();
	void ReceiveBeginPlay();
	void OnActive();
	void ReceiveTick(float DeltaSeconds);
	void ChangeState(uint8 NextState);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBSnipeSkill_C">();
	}
	static class UBP_AJBSnipeSkill_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBSnipeSkill_C>();
	}
};
static_assert(alignof(UBP_AJBSnipeSkill_C) == 0x000008, "Wrong alignment on UBP_AJBSnipeSkill_C");
static_assert(sizeof(UBP_AJBSnipeSkill_C) == 0x000288, "Wrong size on UBP_AJBSnipeSkill_C");
static_assert(offsetof(UBP_AJBSnipeSkill_C, UberGraphFrame_BP_AJBSnipeSkill_C) == 0x0001E8, "Member 'UBP_AJBSnipeSkill_C::UberGraphFrame_BP_AJBSnipeSkill_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBSnipeSkill_C, BulletClass) == 0x0001F0, "Member 'UBP_AJBSnipeSkill_C::BulletClass' has a wrong offset!");
static_assert(offsetof(UBP_AJBSnipeSkill_C, ShotParticle) == 0x0001F8, "Member 'UBP_AJBSnipeSkill_C::ShotParticle' has a wrong offset!");
static_assert(offsetof(UBP_AJBSnipeSkill_C, ShotGion) == 0x000200, "Member 'UBP_AJBSnipeSkill_C::ShotGion' has a wrong offset!");
static_assert(offsetof(UBP_AJBSnipeSkill_C, TraceLength) == 0x000208, "Member 'UBP_AJBSnipeSkill_C::TraceLength' has a wrong offset!");
static_assert(offsetof(UBP_AJBSnipeSkill_C, ShotMontage) == 0x000210, "Member 'UBP_AJBSnipeSkill_C::ShotMontage' has a wrong offset!");
static_assert(offsetof(UBP_AJBSnipeSkill_C, LowerSpread) == 0x000218, "Member 'UBP_AJBSnipeSkill_C::LowerSpread' has a wrong offset!");
static_assert(offsetof(UBP_AJBSnipeSkill_C, LowerSpreadOnAim) == 0x00021C, "Member 'UBP_AJBSnipeSkill_C::LowerSpreadOnAim' has a wrong offset!");
static_assert(offsetof(UBP_AJBSnipeSkill_C, SpreadHealStopTime) == 0x000220, "Member 'UBP_AJBSnipeSkill_C::SpreadHealStopTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBSnipeSkill_C, SpreadHealStopTimeOnAim) == 0x000224, "Member 'UBP_AJBSnipeSkill_C::SpreadHealStopTimeOnAim' has a wrong offset!");
static_assert(offsetof(UBP_AJBSnipeSkill_C, bAutoInactive) == 0x000228, "Member 'UBP_AJBSnipeSkill_C::bAutoInactive' has a wrong offset!");
static_assert(offsetof(UBP_AJBSnipeSkill_C, AdditionalGravityPower) == 0x00022C, "Member 'UBP_AJBSnipeSkill_C::AdditionalGravityPower' has a wrong offset!");
static_assert(offsetof(UBP_AJBSnipeSkill_C, InitialAdditionalGravityPower) == 0x000230, "Member 'UBP_AJBSnipeSkill_C::InitialAdditionalGravityPower' has a wrong offset!");
static_assert(offsetof(UBP_AJBSnipeSkill_C, IrregularAngleThresould_Deg_) == 0x000234, "Member 'UBP_AJBSnipeSkill_C::IrregularAngleThresould_Deg_' has a wrong offset!");
static_assert(offsetof(UBP_AJBSnipeSkill_C, bIgnoreTarget) == 0x000238, "Member 'UBP_AJBSnipeSkill_C::bIgnoreTarget' has a wrong offset!");
static_assert(offsetof(UBP_AJBSnipeSkill_C, ShotVoiceTag) == 0x000240, "Member 'UBP_AJBSnipeSkill_C::ShotVoiceTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBSnipeSkill_C, HitVoiceTag) == 0x000248, "Member 'UBP_AJBSnipeSkill_C::HitVoiceTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBSnipeSkill_C, ProjectileSpeedScale) == 0x000250, "Member 'UBP_AJBSnipeSkill_C::ProjectileSpeedScale' has a wrong offset!");
static_assert(offsetof(UBP_AJBSnipeSkill_C, IgnoreCharacterSpread) == 0x000254, "Member 'UBP_AJBSnipeSkill_C::IgnoreCharacterSpread' has a wrong offset!");
static_assert(offsetof(UBP_AJBSnipeSkill_C, HeadshotVoiceTag) == 0x000258, "Member 'UBP_AJBSnipeSkill_C::HeadshotVoiceTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBSnipeSkill_C, DefendedVoiceTag) == 0x000260, "Member 'UBP_AJBSnipeSkill_C::DefendedVoiceTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBSnipeSkill_C, bSpeakAvoidedVoice) == 0x000268, "Member 'UBP_AJBSnipeSkill_C::bSpeakAvoidedVoice' has a wrong offset!");
static_assert(offsetof(UBP_AJBSnipeSkill_C, AvoidedVoiceTag) == 0x000270, "Member 'UBP_AJBSnipeSkill_C::AvoidedVoiceTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBSnipeSkill_C, ShotParticleDarkPlace) == 0x000278, "Member 'UBP_AJBSnipeSkill_C::ShotParticleDarkPlace' has a wrong offset!");
static_assert(offsetof(UBP_AJBSnipeSkill_C, Rep_Bullet) == 0x000280, "Member 'UBP_AJBSnipeSkill_C::Rep_Bullet' has a wrong offset!");

}

