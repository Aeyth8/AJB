#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBBlockingRushSkill

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "AJB_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_AJBSkillBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBBlockingRushSkill.BP_AJBBlockingRushSkill_C
// 0x00E8 (0x02D0 - 0x01E8)
class UBP_AJBBlockingRushSkill_C : public UBP_AJBSkillBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBBlockingRushSkill_C;          // 0x01E8(0x0008)(Transient, DuplicateTransient)
	struct FGameplayTag                           BlockingRunningParticleTag;                        // 0x01F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           BlockingRunningParticleDarkPlaceTag;               // 0x01F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           BlockingSuccessParticleTag;                        // 0x0200(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           BlockingRunningSETag;                              // 0x0208(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         YawToPlayer_deg_;                                  // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceToPlayer_cm_;                              // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OffsetZToPlayer_cm_;                               // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bReflectProjectile;                                // 0x021C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21D[0x3];                                      // 0x021D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBoxComponent*                          BlockCollision;                                    // 0x0220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CuttingProjectile___;                              // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CuttingOther___;                                   // 0x022C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ValidRange_deg_;                                   // 0x0230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_234[0x4];                                      // 0x0234(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameParticleEffect_C*          BlockingRunningParticleEffect;                     // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           BlockingRunningSE;                                 // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bReserveInactive_BlockingRush;                     // 0x0248(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_249[0x7];                                      // 0x0249(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           AM_BlockingRush;                                   // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceLength_OnBlocking_;                           // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25C[0x4];                                      // 0x025C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ReflectProjectileSETag;                            // 0x0260(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         RecoveryMPOnSuccess;                               // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IrregularAngleThresould_Deg_;                      // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CollisionOffset;                                   // 0x0270(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CollisionSize;                                     // 0x027C(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CacheHitLocation;                                  // 0x0288(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           BlockingStartVoiceTag;                             // 0x0298(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           BlockingBlockVoiceTag;                             // 0x02A0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           BlockingReflectVoiceTag;                           // 0x02A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bAvoidSkill;                                       // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDoesNotBlockingPassiveOnly;                       // 0x02B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B2[0x2];                                      // 0x02B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RemainMPToActive;                                  // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KnockbackIntensity;                                // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                KockbackZVelocity;                                 // 0x02BC(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bKnockback;                                        // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_AJBBlockingRushSkill(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ROS_NotifyBlocking(class UObject* Target, class AActor* BlockedActor, class AActor* OtherActor, const struct FVector& HitLocation, int32 CuttingProjectile____0, int32 CuttingOther____0, bool bInvincible, bool bReflectProjectile_0, const struct FRotator& ReflectRotation, bool bSeparateStandAttack);
	void OnBlocking(bool bReflect, bool bIsPairAttack, class AActor* DamageOwner, bool bSeparateStandAttack);
	void OnBeginOverlap_BlockCollision(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool FromSweep, const struct FHitResult& SweepResult);
	void SetCollisionEnabled(bool Enable);
	void TickState_Waiting();
	void OnBeginState_Waiting_OneShot();
	void OnBeginState_Waiting();
	void OnStateEnd_OneShot(bool bCancel);
	void OnBeginState_Blocking_OneShot();
	void MC_BeginState_Blocking();
	void ROS_BeginState_Blocking();
	void BeginState_Blocking();
	void MC_EndState(bool bCancel);
	void ROS_EndState(bool bCancel);
	void StateEnd(bool bCancel);
	void BeginOverlap_BlockCollision(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnStateEnd(bool bCancel);
	void OnBeginState_Blocking();
	void TickState_Blocking(float DeltaSeconds);
	void StateTick(float DeltaSeconds);
	void OnCompleted_BA0F5D9641BCE4230CC79B96D645A2FB(class FName NotifyName);
	void OnBlendOut_BA0F5D9641BCE4230CC79B96D645A2FB(class FName NotifyName);
	void OnInterrupted_BA0F5D9641BCE4230CC79B96D645A2FB(class FName NotifyName);
	void OnNotifyBegin_BA0F5D9641BCE4230CC79B96D645A2FB(class FName NotifyName);
	void OnNotifyEnd_BA0F5D9641BCE4230CC79B96D645A2FB(class FName NotifyName);
	void GetBlockingLocation(struct FVector* Location);
	void CheckBlockingValid(class AActor* DamageCauser, bool* bValid);
	void SettingBlockingCollision();
	void TryDestroyRunningParticle();
	void GetBlockingRunningParticleTag(struct FGameplayTag* BlockingRunningTag);
	void EndBlockingProcess();
	void CheckSeparateStandAttack(class AActor* DamageOwner, bool* bSeparateStandAttack);
	void CanReadyBlocking(bool* IsSatisfied);
	void CalcKnockbackVelocity(const struct FVector& Direction, struct FVector* Velocity);
	void OnDisconnected();
	void ReceiveBeginPlay();
	void StateBeginPlay(bool bShouldRestore);
	void OnCancel();
	void OnActive();
	void ReceiveTick(float DeltaSeconds);
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);
	void InitializeVariables();
	void UnreserveInactive();
	void ReserveInactive();
	void CheckStateCanAccompany(bool* bCanAccompany);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBBlockingRushSkill_C">();
	}
	static class UBP_AJBBlockingRushSkill_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBBlockingRushSkill_C>();
	}
};
static_assert(alignof(UBP_AJBBlockingRushSkill_C) == 0x000008, "Wrong alignment on UBP_AJBBlockingRushSkill_C");
static_assert(sizeof(UBP_AJBBlockingRushSkill_C) == 0x0002D0, "Wrong size on UBP_AJBBlockingRushSkill_C");
static_assert(offsetof(UBP_AJBBlockingRushSkill_C, UberGraphFrame_BP_AJBBlockingRushSkill_C) == 0x0001E8, "Member 'UBP_AJBBlockingRushSkill_C::UberGraphFrame_BP_AJBBlockingRushSkill_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBBlockingRushSkill_C, BlockingRunningParticleTag) == 0x0001F0, "Member 'UBP_AJBBlockingRushSkill_C::BlockingRunningParticleTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBBlockingRushSkill_C, BlockingRunningParticleDarkPlaceTag) == 0x0001F8, "Member 'UBP_AJBBlockingRushSkill_C::BlockingRunningParticleDarkPlaceTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBBlockingRushSkill_C, BlockingSuccessParticleTag) == 0x000200, "Member 'UBP_AJBBlockingRushSkill_C::BlockingSuccessParticleTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBBlockingRushSkill_C, BlockingRunningSETag) == 0x000208, "Member 'UBP_AJBBlockingRushSkill_C::BlockingRunningSETag' has a wrong offset!");
static_assert(offsetof(UBP_AJBBlockingRushSkill_C, YawToPlayer_deg_) == 0x000210, "Member 'UBP_AJBBlockingRushSkill_C::YawToPlayer_deg_' has a wrong offset!");
static_assert(offsetof(UBP_AJBBlockingRushSkill_C, DistanceToPlayer_cm_) == 0x000214, "Member 'UBP_AJBBlockingRushSkill_C::DistanceToPlayer_cm_' has a wrong offset!");
static_assert(offsetof(UBP_AJBBlockingRushSkill_C, OffsetZToPlayer_cm_) == 0x000218, "Member 'UBP_AJBBlockingRushSkill_C::OffsetZToPlayer_cm_' has a wrong offset!");
static_assert(offsetof(UBP_AJBBlockingRushSkill_C, bReflectProjectile) == 0x00021C, "Member 'UBP_AJBBlockingRushSkill_C::bReflectProjectile' has a wrong offset!");
static_assert(offsetof(UBP_AJBBlockingRushSkill_C, BlockCollision) == 0x000220, "Member 'UBP_AJBBlockingRushSkill_C::BlockCollision' has a wrong offset!");
static_assert(offsetof(UBP_AJBBlockingRushSkill_C, CuttingProjectile___) == 0x000228, "Member 'UBP_AJBBlockingRushSkill_C::CuttingProjectile___' has a wrong offset!");
static_assert(offsetof(UBP_AJBBlockingRushSkill_C, CuttingOther___) == 0x00022C, "Member 'UBP_AJBBlockingRushSkill_C::CuttingOther___' has a wrong offset!");
static_assert(offsetof(UBP_AJBBlockingRushSkill_C, ValidRange_deg_) == 0x000230, "Member 'UBP_AJBBlockingRushSkill_C::ValidRange_deg_' has a wrong offset!");
static_assert(offsetof(UBP_AJBBlockingRushSkill_C, BlockingRunningParticleEffect) == 0x000238, "Member 'UBP_AJBBlockingRushSkill_C::BlockingRunningParticleEffect' has a wrong offset!");
static_assert(offsetof(UBP_AJBBlockingRushSkill_C, BlockingRunningSE) == 0x000240, "Member 'UBP_AJBBlockingRushSkill_C::BlockingRunningSE' has a wrong offset!");
static_assert(offsetof(UBP_AJBBlockingRushSkill_C, bReserveInactive_BlockingRush) == 0x000248, "Member 'UBP_AJBBlockingRushSkill_C::bReserveInactive_BlockingRush' has a wrong offset!");
static_assert(offsetof(UBP_AJBBlockingRushSkill_C, AM_BlockingRush) == 0x000250, "Member 'UBP_AJBBlockingRushSkill_C::AM_BlockingRush' has a wrong offset!");
static_assert(offsetof(UBP_AJBBlockingRushSkill_C, TraceLength_OnBlocking_) == 0x000258, "Member 'UBP_AJBBlockingRushSkill_C::TraceLength_OnBlocking_' has a wrong offset!");
static_assert(offsetof(UBP_AJBBlockingRushSkill_C, ReflectProjectileSETag) == 0x000260, "Member 'UBP_AJBBlockingRushSkill_C::ReflectProjectileSETag' has a wrong offset!");
static_assert(offsetof(UBP_AJBBlockingRushSkill_C, RecoveryMPOnSuccess) == 0x000268, "Member 'UBP_AJBBlockingRushSkill_C::RecoveryMPOnSuccess' has a wrong offset!");
static_assert(offsetof(UBP_AJBBlockingRushSkill_C, IrregularAngleThresould_Deg_) == 0x00026C, "Member 'UBP_AJBBlockingRushSkill_C::IrregularAngleThresould_Deg_' has a wrong offset!");
static_assert(offsetof(UBP_AJBBlockingRushSkill_C, CollisionOffset) == 0x000270, "Member 'UBP_AJBBlockingRushSkill_C::CollisionOffset' has a wrong offset!");
static_assert(offsetof(UBP_AJBBlockingRushSkill_C, CollisionSize) == 0x00027C, "Member 'UBP_AJBBlockingRushSkill_C::CollisionSize' has a wrong offset!");
static_assert(offsetof(UBP_AJBBlockingRushSkill_C, CacheHitLocation) == 0x000288, "Member 'UBP_AJBBlockingRushSkill_C::CacheHitLocation' has a wrong offset!");
static_assert(offsetof(UBP_AJBBlockingRushSkill_C, BlockingStartVoiceTag) == 0x000298, "Member 'UBP_AJBBlockingRushSkill_C::BlockingStartVoiceTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBBlockingRushSkill_C, BlockingBlockVoiceTag) == 0x0002A0, "Member 'UBP_AJBBlockingRushSkill_C::BlockingBlockVoiceTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBBlockingRushSkill_C, BlockingReflectVoiceTag) == 0x0002A8, "Member 'UBP_AJBBlockingRushSkill_C::BlockingReflectVoiceTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBBlockingRushSkill_C, bAvoidSkill) == 0x0002B0, "Member 'UBP_AJBBlockingRushSkill_C::bAvoidSkill' has a wrong offset!");
static_assert(offsetof(UBP_AJBBlockingRushSkill_C, bDoesNotBlockingPassiveOnly) == 0x0002B1, "Member 'UBP_AJBBlockingRushSkill_C::bDoesNotBlockingPassiveOnly' has a wrong offset!");
static_assert(offsetof(UBP_AJBBlockingRushSkill_C, RemainMPToActive) == 0x0002B4, "Member 'UBP_AJBBlockingRushSkill_C::RemainMPToActive' has a wrong offset!");
static_assert(offsetof(UBP_AJBBlockingRushSkill_C, KnockbackIntensity) == 0x0002B8, "Member 'UBP_AJBBlockingRushSkill_C::KnockbackIntensity' has a wrong offset!");
static_assert(offsetof(UBP_AJBBlockingRushSkill_C, KockbackZVelocity) == 0x0002BC, "Member 'UBP_AJBBlockingRushSkill_C::KockbackZVelocity' has a wrong offset!");
static_assert(offsetof(UBP_AJBBlockingRushSkill_C, bKnockback) == 0x0002C8, "Member 'UBP_AJBBlockingRushSkill_C::bKnockback' has a wrong offset!");

}

