#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_RecordingReticleWidget

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WB_RecordingReticleWidget.WB_RecordingReticleWidget_C.ExecuteUbergraph_WB_RecordingReticleWidget
// 0x0044 (0x0044 - 0x0000)
struct WB_RecordingReticleWidget_C_ExecuteUbergraph_WB_RecordingReticleWidget final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetLeftTime_Time;                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_RecordingReticleWidget_C_ExecuteUbergraph_WB_RecordingReticleWidget) == 0x000004, "Wrong alignment on WB_RecordingReticleWidget_C_ExecuteUbergraph_WB_RecordingReticleWidget");
static_assert(sizeof(WB_RecordingReticleWidget_C_ExecuteUbergraph_WB_RecordingReticleWidget) == 0x000044, "Wrong size on WB_RecordingReticleWidget_C_ExecuteUbergraph_WB_RecordingReticleWidget");
static_assert(offsetof(WB_RecordingReticleWidget_C_ExecuteUbergraph_WB_RecordingReticleWidget, EntryPoint) == 0x000000, "Member 'WB_RecordingReticleWidget_C_ExecuteUbergraph_WB_RecordingReticleWidget::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_ExecuteUbergraph_WB_RecordingReticleWidget, K2Node_Event_MyGeometry) == 0x000004, "Member 'WB_RecordingReticleWidget_C_ExecuteUbergraph_WB_RecordingReticleWidget::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_ExecuteUbergraph_WB_RecordingReticleWidget, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'WB_RecordingReticleWidget_C_ExecuteUbergraph_WB_RecordingReticleWidget::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_ExecuteUbergraph_WB_RecordingReticleWidget, CallFunc_GetLeftTime_Time) == 0x000040, "Member 'WB_RecordingReticleWidget_C_ExecuteUbergraph_WB_RecordingReticleWidget::CallFunc_GetLeftTime_Time' has a wrong offset!");

// Function WB_RecordingReticleWidget.WB_RecordingReticleWidget_C.Tick
// 0x003C (0x003C - 0x0000)
struct WB_RecordingReticleWidget_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_RecordingReticleWidget_C_Tick) == 0x000004, "Wrong alignment on WB_RecordingReticleWidget_C_Tick");
static_assert(sizeof(WB_RecordingReticleWidget_C_Tick) == 0x00003C, "Wrong size on WB_RecordingReticleWidget_C_Tick");
static_assert(offsetof(WB_RecordingReticleWidget_C_Tick, MyGeometry) == 0x000000, "Member 'WB_RecordingReticleWidget_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_Tick, InDeltaTime) == 0x000038, "Member 'WB_RecordingReticleWidget_C_Tick::InDeltaTime' has a wrong offset!");

// Function WB_RecordingReticleWidget.WB_RecordingReticleWidget_C.PlayVanishFade
// 0x0030 (0x0030 - 0x0000)
struct WB_RecordingReticleWidget_C_PlayVanishFade final
{
public:
	bool                                          bIsFadeOut;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable1;                               // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       K2Node_Select_Default;                             // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       K2Node_Select1_Default;                            // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_RecordingReticleWidget_C_PlayVanishFade) == 0x000008, "Wrong alignment on WB_RecordingReticleWidget_C_PlayVanishFade");
static_assert(sizeof(WB_RecordingReticleWidget_C_PlayVanishFade) == 0x000030, "Wrong size on WB_RecordingReticleWidget_C_PlayVanishFade");
static_assert(offsetof(WB_RecordingReticleWidget_C_PlayVanishFade, bIsFadeOut) == 0x000000, "Member 'WB_RecordingReticleWidget_C_PlayVanishFade::bIsFadeOut' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_PlayVanishFade, ReturnValue) == 0x000004, "Member 'WB_RecordingReticleWidget_C_PlayVanishFade::ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_PlayVanishFade, Temp_bool_Variable) == 0x000008, "Member 'WB_RecordingReticleWidget_C_PlayVanishFade::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_PlayVanishFade, Temp_bool_Variable1) == 0x000009, "Member 'WB_RecordingReticleWidget_C_PlayVanishFade::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_PlayVanishFade, CallFunc_Not_PreBool_ReturnValue) == 0x00000A, "Member 'WB_RecordingReticleWidget_C_PlayVanishFade::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_PlayVanishFade, K2Node_Select_Default) == 0x000010, "Member 'WB_RecordingReticleWidget_C_PlayVanishFade::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_PlayVanishFade, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000018, "Member 'WB_RecordingReticleWidget_C_PlayVanishFade::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_PlayVanishFade, K2Node_Select1_Default) == 0x000020, "Member 'WB_RecordingReticleWidget_C_PlayVanishFade::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_PlayVanishFade, CallFunc_GetEndTime_ReturnValue) == 0x000028, "Member 'WB_RecordingReticleWidget_C_PlayVanishFade::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");

// Function WB_RecordingReticleWidget.WB_RecordingReticleWidget_C.ConvertTimeToText
// 0x0038 (0x0038 - 0x0000)
struct WB_RecordingReticleWidget_C_ConvertTimeToText final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text;                                              // 0x0008(0x0018)(Parm, OutParm)
	class FText                                   CallFunc_Conv_FloatToText_ReturnValue;             // 0x0020(0x0018)()
};
static_assert(alignof(WB_RecordingReticleWidget_C_ConvertTimeToText) == 0x000008, "Wrong alignment on WB_RecordingReticleWidget_C_ConvertTimeToText");
static_assert(sizeof(WB_RecordingReticleWidget_C_ConvertTimeToText) == 0x000038, "Wrong size on WB_RecordingReticleWidget_C_ConvertTimeToText");
static_assert(offsetof(WB_RecordingReticleWidget_C_ConvertTimeToText, Time) == 0x000000, "Member 'WB_RecordingReticleWidget_C_ConvertTimeToText::Time' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_ConvertTimeToText, Text) == 0x000008, "Member 'WB_RecordingReticleWidget_C_ConvertTimeToText::Text' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_ConvertTimeToText, CallFunc_Conv_FloatToText_ReturnValue) == 0x000020, "Member 'WB_RecordingReticleWidget_C_ConvertTimeToText::CallFunc_Conv_FloatToText_ReturnValue' has a wrong offset!");

// Function WB_RecordingReticleWidget.WB_RecordingReticleWidget_C.GetLeftTime
// 0x0030 (0x0030 - 0x0000)
struct WB_RecordingReticleWidget_C_GetLeftTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetViewTargetActorConsiderVSCamera_ViewTargetActor; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryGetPropertyOwnerCharacterFromActor_bSucceed; // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_TryGetPropertyOwnerCharacterFromActor_OutActor; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_AJBRecording_C*                     CallFunc_GetComponentByClass_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Array_Get_Item;                           // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_RecordingReticleWidget_C_GetLeftTime) == 0x000008, "Wrong alignment on WB_RecordingReticleWidget_C_GetLeftTime");
static_assert(sizeof(WB_RecordingReticleWidget_C_GetLeftTime) == 0x000030, "Wrong size on WB_RecordingReticleWidget_C_GetLeftTime");
static_assert(offsetof(WB_RecordingReticleWidget_C_GetLeftTime, Time) == 0x000000, "Member 'WB_RecordingReticleWidget_C_GetLeftTime::Time' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_GetLeftTime, CallFunc_GetViewTargetActorConsiderVSCamera_ViewTargetActor) == 0x000008, "Member 'WB_RecordingReticleWidget_C_GetLeftTime::CallFunc_GetViewTargetActorConsiderVSCamera_ViewTargetActor' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_GetLeftTime, CallFunc_TryGetPropertyOwnerCharacterFromActor_bSucceed) == 0x000010, "Member 'WB_RecordingReticleWidget_C_GetLeftTime::CallFunc_TryGetPropertyOwnerCharacterFromActor_bSucceed' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_GetLeftTime, CallFunc_TryGetPropertyOwnerCharacterFromActor_OutActor) == 0x000018, "Member 'WB_RecordingReticleWidget_C_GetLeftTime::CallFunc_TryGetPropertyOwnerCharacterFromActor_OutActor' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_GetLeftTime, CallFunc_GetComponentByClass_ReturnValue) == 0x000020, "Member 'WB_RecordingReticleWidget_C_GetLeftTime::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_GetLeftTime, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'WB_RecordingReticleWidget_C_GetLeftTime::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_GetLeftTime, CallFunc_Array_Get_Item) == 0x00002C, "Member 'WB_RecordingReticleWidget_C_GetLeftTime::CallFunc_Array_Get_Item' has a wrong offset!");

// Function WB_RecordingReticleWidget.WB_RecordingReticleWidget_C.ApplyTime
// 0x0158 (0x0158 - 0x0000)
struct WB_RecordingReticleWidget_C_ApplyTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_ConvertTimeToText_Text;                   // 0x0008(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Split_LeftS;                              // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Split_RightS;                             // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Split_ReturnValue;                        // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Len_ReturnValue;                          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0058(0x0018)()
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0078(0x0040)(HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_Select_Default;                             // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue1;           // 0x00D8(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData1;             // 0x00F0(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0130(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0140(0x0018)()
};
static_assert(alignof(WB_RecordingReticleWidget_C_ApplyTime) == 0x000008, "Wrong alignment on WB_RecordingReticleWidget_C_ApplyTime");
static_assert(sizeof(WB_RecordingReticleWidget_C_ApplyTime) == 0x000158, "Wrong size on WB_RecordingReticleWidget_C_ApplyTime");
static_assert(offsetof(WB_RecordingReticleWidget_C_ApplyTime, Time) == 0x000000, "Member 'WB_RecordingReticleWidget_C_ApplyTime::Time' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_ApplyTime, Temp_bool_Variable) == 0x000004, "Member 'WB_RecordingReticleWidget_C_ApplyTime::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_ApplyTime, CallFunc_ConvertTimeToText_Text) == 0x000008, "Member 'WB_RecordingReticleWidget_C_ApplyTime::CallFunc_ConvertTimeToText_Text' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_ApplyTime, CallFunc_Conv_TextToString_ReturnValue) == 0x000020, "Member 'WB_RecordingReticleWidget_C_ApplyTime::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_ApplyTime, CallFunc_Split_LeftS) == 0x000030, "Member 'WB_RecordingReticleWidget_C_ApplyTime::CallFunc_Split_LeftS' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_ApplyTime, CallFunc_Split_RightS) == 0x000040, "Member 'WB_RecordingReticleWidget_C_ApplyTime::CallFunc_Split_RightS' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_ApplyTime, CallFunc_Split_ReturnValue) == 0x000050, "Member 'WB_RecordingReticleWidget_C_ApplyTime::CallFunc_Split_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_ApplyTime, CallFunc_Len_ReturnValue) == 0x000054, "Member 'WB_RecordingReticleWidget_C_ApplyTime::CallFunc_Len_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_ApplyTime, CallFunc_Conv_StringToText_ReturnValue) == 0x000058, "Member 'WB_RecordingReticleWidget_C_ApplyTime::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_ApplyTime, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000070, "Member 'WB_RecordingReticleWidget_C_ApplyTime::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_ApplyTime, K2Node_MakeStruct_FormatArgumentData) == 0x000078, "Member 'WB_RecordingReticleWidget_C_ApplyTime::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_ApplyTime, CallFunc_Concat_StrStr_ReturnValue) == 0x0000B8, "Member 'WB_RecordingReticleWidget_C_ApplyTime::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_ApplyTime, K2Node_Select_Default) == 0x0000C8, "Member 'WB_RecordingReticleWidget_C_ApplyTime::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_ApplyTime, CallFunc_Conv_StringToText_ReturnValue1) == 0x0000D8, "Member 'WB_RecordingReticleWidget_C_ApplyTime::CallFunc_Conv_StringToText_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_ApplyTime, K2Node_MakeStruct_FormatArgumentData1) == 0x0000F0, "Member 'WB_RecordingReticleWidget_C_ApplyTime::K2Node_MakeStruct_FormatArgumentData1' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_ApplyTime, K2Node_MakeArray_Array) == 0x000130, "Member 'WB_RecordingReticleWidget_C_ApplyTime::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_ApplyTime, CallFunc_Format_ReturnValue) == 0x000140, "Member 'WB_RecordingReticleWidget_C_ApplyTime::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function WB_RecordingReticleWidget.WB_RecordingReticleWidget_C.OnPaint
// 0x0060 (0x0060 - 0x0000)
struct WB_RecordingReticleWidget_C_OnPaint final
{
public:
	struct FPaintContext                          Context;                                           // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FPaintContext                          TempContext;                                       // 0x0030(0x0030)(Edit, BlueprintVisible, NoDestructor)
};
static_assert(alignof(WB_RecordingReticleWidget_C_OnPaint) == 0x000008, "Wrong alignment on WB_RecordingReticleWidget_C_OnPaint");
static_assert(sizeof(WB_RecordingReticleWidget_C_OnPaint) == 0x000060, "Wrong size on WB_RecordingReticleWidget_C_OnPaint");
static_assert(offsetof(WB_RecordingReticleWidget_C_OnPaint, Context) == 0x000000, "Member 'WB_RecordingReticleWidget_C_OnPaint::Context' has a wrong offset!");
static_assert(offsetof(WB_RecordingReticleWidget_C_OnPaint, TempContext) == 0x000030, "Member 'WB_RecordingReticleWidget_C_OnPaint::TempContext' has a wrong offset!");

}

