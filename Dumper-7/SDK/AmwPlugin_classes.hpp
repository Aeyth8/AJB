#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AmwPlugin

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "AmwPlugin_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class AmwPlugin.AmwAsyncActionBase
// 0x0010 (0x0040 - 0x0030)
class UAmwAsyncActionBase : public UBlueprintAsyncActionBase
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmwAsyncActionBase">();
	}
	static class UAmwAsyncActionBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAmwAsyncActionBase>();
	}
};
static_assert(alignof(UAmwAsyncActionBase) == 0x000008, "Wrong alignment on UAmwAsyncActionBase");
static_assert(sizeof(UAmwAsyncActionBase) == 0x000040, "Wrong size on UAmwAsyncActionBase");

// Class AmwPlugin.AmwDisplayCancelTest
// 0x0030 (0x0070 - 0x0040)
class UAmwDisplayCancelTest final : public UAmwAsyncActionBase
{
public:
	UMulticastDelegateProperty_                   OnSuccess;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnFailed;                                          // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x10];                                      // 0x0060(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAmwDisplayCancelTest* AmwDisplayCancelTest(class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmwDisplayCancelTest">();
	}
	static class UAmwDisplayCancelTest* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAmwDisplayCancelTest>();
	}
};
static_assert(alignof(UAmwDisplayCancelTest) == 0x000008, "Wrong alignment on UAmwDisplayCancelTest");
static_assert(sizeof(UAmwDisplayCancelTest) == 0x000070, "Wrong size on UAmwDisplayCancelTest");
static_assert(offsetof(UAmwDisplayCancelTest, OnSuccess) == 0x000040, "Member 'UAmwDisplayCancelTest::OnSuccess' has a wrong offset!");
static_assert(offsetof(UAmwDisplayCancelTest, OnFailed) == 0x000050, "Member 'UAmwDisplayCancelTest::OnFailed' has a wrong offset!");

// Class AmwPlugin.AmwDisplayStartTest
// 0x0030 (0x0070 - 0x0040)
class UAmwDisplayStartTest final : public UAmwAsyncActionBase
{
public:
	UMulticastDelegateProperty_                   OnSuccess;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnFailed;                                          // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x10];                                      // 0x0060(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAmwDisplayStartTest* AmwDisplayStartTest(class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmwDisplayStartTest">();
	}
	static class UAmwDisplayStartTest* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAmwDisplayStartTest>();
	}
};
static_assert(alignof(UAmwDisplayStartTest) == 0x000008, "Wrong alignment on UAmwDisplayStartTest");
static_assert(sizeof(UAmwDisplayStartTest) == 0x000070, "Wrong size on UAmwDisplayStartTest");
static_assert(offsetof(UAmwDisplayStartTest, OnSuccess) == 0x000040, "Member 'UAmwDisplayStartTest::OnSuccess' has a wrong offset!");
static_assert(offsetof(UAmwDisplayStartTest, OnFailed) == 0x000050, "Member 'UAmwDisplayStartTest::OnFailed' has a wrong offset!");

// Class AmwPlugin.AmwEmoneyAuthTerminal
// 0x0050 (0x0090 - 0x0040)
class UAmwEmoneyAuthTerminal final : public UAmwAsyncActionBase
{
public:
	UMulticastDelegateProperty_                   OnSuccess;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnFailed;                                          // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnFailedProcessingTask;                            // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnFailedNotActivate;                               // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x10];                                      // 0x0080(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAmwEmoneyAuthTerminal* AmwEmoneyAuthTerminal(class UObject* WorldContextObject, int32 TimeOutSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmwEmoneyAuthTerminal">();
	}
	static class UAmwEmoneyAuthTerminal* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAmwEmoneyAuthTerminal>();
	}
};
static_assert(alignof(UAmwEmoneyAuthTerminal) == 0x000008, "Wrong alignment on UAmwEmoneyAuthTerminal");
static_assert(sizeof(UAmwEmoneyAuthTerminal) == 0x000090, "Wrong size on UAmwEmoneyAuthTerminal");
static_assert(offsetof(UAmwEmoneyAuthTerminal, OnSuccess) == 0x000040, "Member 'UAmwEmoneyAuthTerminal::OnSuccess' has a wrong offset!");
static_assert(offsetof(UAmwEmoneyAuthTerminal, OnFailed) == 0x000050, "Member 'UAmwEmoneyAuthTerminal::OnFailed' has a wrong offset!");
static_assert(offsetof(UAmwEmoneyAuthTerminal, OnFailedProcessingTask) == 0x000060, "Member 'UAmwEmoneyAuthTerminal::OnFailedProcessingTask' has a wrong offset!");
static_assert(offsetof(UAmwEmoneyAuthTerminal, OnFailedNotActivate) == 0x000070, "Member 'UAmwEmoneyAuthTerminal::OnFailedNotActivate' has a wrong offset!");

// Class AmwPlugin.AmwEmoneyCancel
// 0x0030 (0x0070 - 0x0040)
class UAmwEmoneyCancel final : public UAmwAsyncActionBase
{
public:
	UMulticastDelegateProperty_                   OnSuccess;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnFailed;                                          // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x10];                                      // 0x0060(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAmwEmoneyCancel* AmwEmoneyCancel(class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmwEmoneyCancel">();
	}
	static class UAmwEmoneyCancel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAmwEmoneyCancel>();
	}
};
static_assert(alignof(UAmwEmoneyCancel) == 0x000008, "Wrong alignment on UAmwEmoneyCancel");
static_assert(sizeof(UAmwEmoneyCancel) == 0x000070, "Wrong size on UAmwEmoneyCancel");
static_assert(offsetof(UAmwEmoneyCancel, OnSuccess) == 0x000040, "Member 'UAmwEmoneyCancel::OnSuccess' has a wrong offset!");
static_assert(offsetof(UAmwEmoneyCancel, OnFailed) == 0x000050, "Member 'UAmwEmoneyCancel::OnFailed' has a wrong offset!");

// Class AmwPlugin.AmwEmoneyPayAmount
// 0x0038 (0x0078 - 0x0040)
class UAmwEmoneyPayAmount final : public UAmwAsyncActionBase
{
public:
	UMulticastDelegateProperty_                   OnInComplete;                                      // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnFailed;                                          // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x18];                                      // 0x0060(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAmwEmoneyPayAmount* AmwEmoneyPayAmount(class UObject* WorldContextObject, const EAmwEmoneyBrand& Brand, const int32 Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmwEmoneyPayAmount">();
	}
	static class UAmwEmoneyPayAmount* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAmwEmoneyPayAmount>();
	}
};
static_assert(alignof(UAmwEmoneyPayAmount) == 0x000008, "Wrong alignment on UAmwEmoneyPayAmount");
static_assert(sizeof(UAmwEmoneyPayAmount) == 0x000078, "Wrong size on UAmwEmoneyPayAmount");
static_assert(offsetof(UAmwEmoneyPayAmount, OnInComplete) == 0x000040, "Member 'UAmwEmoneyPayAmount::OnInComplete' has a wrong offset!");
static_assert(offsetof(UAmwEmoneyPayAmount, OnFailed) == 0x000050, "Member 'UAmwEmoneyPayAmount::OnFailed' has a wrong offset!");

// Class AmwPlugin.AmwEmoneyRemoveTerminal
// 0x0040 (0x0070 - 0x0030)
class UAmwEmoneyRemoveTerminal final : public UBlueprintAsyncActionBase
{
public:
	UMulticastDelegateProperty_                   OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnFailed;                                          // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x20];                                      // 0x0050(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAmwEmoneyRemoveTerminal* AmwEmoneyRemoveTerminal(class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmwEmoneyRemoveTerminal">();
	}
	static class UAmwEmoneyRemoveTerminal* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAmwEmoneyRemoveTerminal>();
	}
};
static_assert(alignof(UAmwEmoneyRemoveTerminal) == 0x000008, "Wrong alignment on UAmwEmoneyRemoveTerminal");
static_assert(sizeof(UAmwEmoneyRemoveTerminal) == 0x000070, "Wrong size on UAmwEmoneyRemoveTerminal");
static_assert(offsetof(UAmwEmoneyRemoveTerminal, OnSuccess) == 0x000030, "Member 'UAmwEmoneyRemoveTerminal::OnSuccess' has a wrong offset!");
static_assert(offsetof(UAmwEmoneyRemoveTerminal, OnFailed) == 0x000040, "Member 'UAmwEmoneyRemoveTerminal::OnFailed' has a wrong offset!");

// Class AmwPlugin.AmwEmoneyRequestBalance
// 0x0048 (0x0078 - 0x0030)
class UAmwEmoneyRequestBalance final : public UBlueprintAsyncActionBase
{
public:
	UMulticastDelegateProperty_                   OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnFailed;                                          // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x28];                                      // 0x0050(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAmwEmoneyRequestBalance* AmwEmoneyRequestBalance(class UObject* WorldContextObject, const EAmwEmoneyBrand& Brand);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmwEmoneyRequestBalance">();
	}
	static class UAmwEmoneyRequestBalance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAmwEmoneyRequestBalance>();
	}
};
static_assert(alignof(UAmwEmoneyRequestBalance) == 0x000008, "Wrong alignment on UAmwEmoneyRequestBalance");
static_assert(sizeof(UAmwEmoneyRequestBalance) == 0x000078, "Wrong size on UAmwEmoneyRequestBalance");
static_assert(offsetof(UAmwEmoneyRequestBalance, OnSuccess) == 0x000030, "Member 'UAmwEmoneyRequestBalance::OnSuccess' has a wrong offset!");
static_assert(offsetof(UAmwEmoneyRequestBalance, OnFailed) == 0x000040, "Member 'UAmwEmoneyRequestBalance::OnFailed' has a wrong offset!");

// Class AmwPlugin.AmwLEDTest
// 0x0038 (0x0078 - 0x0040)
class UAmwLEDTest final : public UAmwAsyncActionBase
{
public:
	UMulticastDelegateProperty_                   OnSuccess;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnFailed;                                          // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x18];                                      // 0x0060(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAmwLEDTest* AmwLEDTest(class UObject* WorldContextObject, int32 DeviceIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmwLEDTest">();
	}
	static class UAmwLEDTest* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAmwLEDTest>();
	}
};
static_assert(alignof(UAmwLEDTest) == 0x000008, "Wrong alignment on UAmwLEDTest");
static_assert(sizeof(UAmwLEDTest) == 0x000078, "Wrong size on UAmwLEDTest");
static_assert(offsetof(UAmwLEDTest, OnSuccess) == 0x000040, "Member 'UAmwLEDTest::OnSuccess' has a wrong offset!");
static_assert(offsetof(UAmwLEDTest, OnFailed) == 0x000050, "Member 'UAmwLEDTest::OnFailed' has a wrong offset!");

// Class AmwPlugin.AmwPluginEventListener
// 0x0010 (0x0038 - 0x0028)
class UAmwPluginEventListener final : public UObject
{
public:
	UMulticastDelegateProperty_                   EMoneySoundEventDispatcher;                        // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmwPluginEventListener">();
	}
	static class UAmwPluginEventListener* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAmwPluginEventListener>();
	}
};
static_assert(alignof(UAmwPluginEventListener) == 0x000008, "Wrong alignment on UAmwPluginEventListener");
static_assert(sizeof(UAmwPluginEventListener) == 0x000038, "Wrong size on UAmwPluginEventListener");
static_assert(offsetof(UAmwPluginEventListener, EMoneySoundEventDispatcher) == 0x000028, "Member 'UAmwPluginEventListener::EMoneySoundEventDispatcher' has a wrong offset!");

// Class AmwPlugin.AmwPluginFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UAmwPluginFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool AmwChangeSequenceMode(EAmwSequenceMode NewMode);
	static bool AmwEmoneyCancelNoWait();
	static EAmwBuildType AmwGetBuildType();
	static bool AmwInsertCoin(int32 Num, int32 Slot, int32 Coin);
	static bool CancelAmwCommand(int32 DeviceIndex);
	static bool CancelAmwDisplayTest();
	static bool EmoneyCompletePay();
	static void FinalizeAmwLibrary();
	static bool GetAmCardReaderProperty(int32 DeviceIndex, class FString* OutHWVersion, class FString* OutFWVersion);
	static class FString GetAmwEmoneyTerminalId();
	static class FString GetAmwMacAddressString(const class FString& Delimiter);
	static bool GetEmoneyAvailableBrandInfo(const int32 Num, EAmwEmoneyBrand* OutBrand, class FString* OutName, class FString* OutIconFilePath);
	static int32 GetEmoneyAvailableBrandTotal();
	static bool GetEmoneyDealResults(TArray<struct FAmwEmoneyDealResult>* OutDealResults);
	static bool GetEmoneyReportResults(TArray<struct FAmwEmoneyReportResult>* OutReportResults);
	static class UAmwPluginEventListener* GetEventListener();
	static EAmwTouchResult GetLastEAmwTouchResult();
	static void InitializeAmwLibrary(EAmwBuildType Type, const class FString& OverwriteMainId, const class FString& AMCUSMacAddress);
	static bool IsAmwConnect(int32 DeviceIndex);
	static bool IsAmwDisplayConnected();
	static bool IsAmwDoneTask(int32 DeviceIndex);
	static bool IsAmwEmoneyActivated();
	static bool IsAmwEmoneyAliveServer();
	static bool IsAmwEmoneyCancelCommand();
	static bool IsAmwLibraryReady();
	static bool IsAmwSystemError();
	static bool IsSuccessAmwUpdateFirmwar(int32 DeviceIndex);
	static void RequestSystemPause();
	static void RequestSystemResume();
	static void SetAmwLED(int32 DeviceIndex, EAmwLedType LedType);
	static void SetupEventListener(class UAmwPluginEventListener* EventListener);
	static bool TryGetAmwEmoneyBrandInfo(EAmwEmoneyBrand Brand, class FString* OutName, class FString* OutFilePath);
	static bool TryGetEmoneyLatestDealResult(struct FAmwEmoneyDealResult* OutResult);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmwPluginFunctionLibrary">();
	}
	static class UAmwPluginFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAmwPluginFunctionLibrary>();
	}
};
static_assert(alignof(UAmwPluginFunctionLibrary) == 0x000008, "Wrong alignment on UAmwPluginFunctionLibrary");
static_assert(sizeof(UAmwPluginFunctionLibrary) == 0x000028, "Wrong size on UAmwPluginFunctionLibrary");

// Class AmwPlugin.AmwSystemCheck
// 0x0038 (0x0078 - 0x0040)
class UAmwSystemCheck final : public UAmwAsyncActionBase
{
public:
	UMulticastDelegateProperty_                   OnSuccess;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnFailed;                                          // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x18];                                      // 0x0060(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAmwSystemCheck* AmwSystenCheck(class UObject* WorldContextObject, int32 DeviceIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmwSystemCheck">();
	}
	static class UAmwSystemCheck* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAmwSystemCheck>();
	}
};
static_assert(alignof(UAmwSystemCheck) == 0x000008, "Wrong alignment on UAmwSystemCheck");
static_assert(sizeof(UAmwSystemCheck) == 0x000078, "Wrong size on UAmwSystemCheck");
static_assert(offsetof(UAmwSystemCheck, OnSuccess) == 0x000040, "Member 'UAmwSystemCheck::OnSuccess' has a wrong offset!");
static_assert(offsetof(UAmwSystemCheck, OnFailed) == 0x000050, "Member 'UAmwSystemCheck::OnFailed' has a wrong offset!");

// Class AmwPlugin.AmwWaitTouch
// 0x0050 (0x0090 - 0x0040)
class UAmwWaitTouch final : public UAmwAsyncActionBase
{
public:
	UMulticastDelegateProperty_                   OnSuccess;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnFailed;                                          // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnCanceled;                                        // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0x20];                                      // 0x0070(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAmwWaitTouch* AmwWaitTouch(class UObject* WorldContextObject, int32 DeviceIndex, bool bMobileOnly, int32 TimeOutSeconds, bool bIsEnableLED);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmwWaitTouch">();
	}
	static class UAmwWaitTouch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAmwWaitTouch>();
	}
};
static_assert(alignof(UAmwWaitTouch) == 0x000008, "Wrong alignment on UAmwWaitTouch");
static_assert(sizeof(UAmwWaitTouch) == 0x000090, "Wrong size on UAmwWaitTouch");
static_assert(offsetof(UAmwWaitTouch, OnSuccess) == 0x000040, "Member 'UAmwWaitTouch::OnSuccess' has a wrong offset!");
static_assert(offsetof(UAmwWaitTouch, OnFailed) == 0x000050, "Member 'UAmwWaitTouch::OnFailed' has a wrong offset!");
static_assert(offsetof(UAmwWaitTouch, OnCanceled) == 0x000060, "Member 'UAmwWaitTouch::OnCanceled' has a wrong offset!");

}

