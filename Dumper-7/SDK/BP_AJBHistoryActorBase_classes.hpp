#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBHistoryActorBase

#include "Basic.hpp"

#include "BP_AJBActorBase_classes.hpp"
#include "Engine_structs.hpp"
#include "AJB_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBHistoryActorBase.BP_AJBHistoryActorBase_C
// 0x00A0 (0x03D0 - 0x0330)
class ABP_AJBHistoryActorBase_C : public ABP_AJBActorBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0330(0x0008)(Transient, DuplicateTransient)
	class UTextRenderComponent*                   Time;                                              // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   PlayerID;                                          // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   SerialNumber;                                      // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FAJBHistoryInfo                        HistoryInfo;                                       // 0x0350(0x0060)(Edit, BlueprintVisible, Net, ExposeOnSpawn)
	bool                                          bActive;                                           // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B1[0x3];                                      // 0x03B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CheckActivateTime;                                 // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIncludeOwner;                                     // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugShowInfo;                                    // 0x03B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDefaultActivate;                                  // 0x03BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BB[0x1];                                      // 0x03BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HistoryTimeFromBattleStart_Sec_;                   // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_AJBHistoryManageComponent_C*        HistoryManageComponentRef;                         // 0x03C0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bCurrentDebugShowHistoryInfo;                      // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_AJBHistoryActorBase(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void ChangeEnableTimeStop(bool bEnable);
	void DelayedDestroy(float DelayTime);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void ShouldActivate(bool* bShouldActivate);
	void ChangeActive(bool bEnable);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBHistoryActorBase_C">();
	}
	static class ABP_AJBHistoryActorBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBHistoryActorBase_C>();
	}
};
static_assert(alignof(ABP_AJBHistoryActorBase_C) == 0x000008, "Wrong alignment on ABP_AJBHistoryActorBase_C");
static_assert(sizeof(ABP_AJBHistoryActorBase_C) == 0x0003D0, "Wrong size on ABP_AJBHistoryActorBase_C");
static_assert(offsetof(ABP_AJBHistoryActorBase_C, UberGraphFrame) == 0x000330, "Member 'ABP_AJBHistoryActorBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AJBHistoryActorBase_C, Time) == 0x000338, "Member 'ABP_AJBHistoryActorBase_C::Time' has a wrong offset!");
static_assert(offsetof(ABP_AJBHistoryActorBase_C, PlayerID) == 0x000340, "Member 'ABP_AJBHistoryActorBase_C::PlayerID' has a wrong offset!");
static_assert(offsetof(ABP_AJBHistoryActorBase_C, SerialNumber) == 0x000348, "Member 'ABP_AJBHistoryActorBase_C::SerialNumber' has a wrong offset!");
static_assert(offsetof(ABP_AJBHistoryActorBase_C, HistoryInfo) == 0x000350, "Member 'ABP_AJBHistoryActorBase_C::HistoryInfo' has a wrong offset!");
static_assert(offsetof(ABP_AJBHistoryActorBase_C, bActive) == 0x0003B0, "Member 'ABP_AJBHistoryActorBase_C::bActive' has a wrong offset!");
static_assert(offsetof(ABP_AJBHistoryActorBase_C, CheckActivateTime) == 0x0003B4, "Member 'ABP_AJBHistoryActorBase_C::CheckActivateTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBHistoryActorBase_C, bIncludeOwner) == 0x0003B8, "Member 'ABP_AJBHistoryActorBase_C::bIncludeOwner' has a wrong offset!");
static_assert(offsetof(ABP_AJBHistoryActorBase_C, bDebugShowInfo) == 0x0003B9, "Member 'ABP_AJBHistoryActorBase_C::bDebugShowInfo' has a wrong offset!");
static_assert(offsetof(ABP_AJBHistoryActorBase_C, bDefaultActivate) == 0x0003BA, "Member 'ABP_AJBHistoryActorBase_C::bDefaultActivate' has a wrong offset!");
static_assert(offsetof(ABP_AJBHistoryActorBase_C, HistoryTimeFromBattleStart_Sec_) == 0x0003BC, "Member 'ABP_AJBHistoryActorBase_C::HistoryTimeFromBattleStart_Sec_' has a wrong offset!");
static_assert(offsetof(ABP_AJBHistoryActorBase_C, HistoryManageComponentRef) == 0x0003C0, "Member 'ABP_AJBHistoryActorBase_C::HistoryManageComponentRef' has a wrong offset!");
static_assert(offsetof(ABP_AJBHistoryActorBase_C, bCurrentDebugShowHistoryInfo) == 0x0003C8, "Member 'ABP_AJBHistoryActorBase_C::bCurrentDebugShowHistoryInfo' has a wrong offset!");

}

