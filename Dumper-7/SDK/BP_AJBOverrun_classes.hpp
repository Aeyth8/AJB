#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBOverrun

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "AJB_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_AJBSprintSkill_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBOverrun.BP_AJBOverrun_C
// 0x0050 (0x02D0 - 0x0280)
class UBP_AJBOverrun_C final : public UBP_AJBSprintSkill_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBOverrun_C;                    // 0x0280(0x0008)(Transient, DuplicateTransient)
	float                                         CameraPitchSpeedScale;                             // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraYawSpeedScale;                               // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Defence___;                                        // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ResistPassiveTag;                                  // 0x0298(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LaunchKnockbackConstant;                           // 0x02A0(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KnockbackIntensity_Normal;                         // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KnockbackIntensity_Hamon;                          // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KnockbackIntensity_NormalForStand;                 // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KnockbackIntensity_HamonForStand;                  // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ResistRatePhase1;                                  // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ResistRatePhase2;                                  // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ResistRatePhase3;                                  // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CenteringKnockbackDeg;                             // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CenteringKnockbackForwardLength;                   // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBOverrun(int32 EntryPoint);
	void ApplySprintDamage_Server(class AActor* HitActor, class UActorComponent* HitComponent, const struct FVector& Hit_Location, const struct FVector& HitNormal, int32 SerialNumber_0, float CuttingRate);
	void SetOverrunBuff(bool IsEnabled);
	void SetSkillMovementMode(bool IsEnabled);
	void GetKnockbackBasePower(class AActor* TargetActor, float* BasePower);
	void EndState_Local();
	void BeginState_Clearing_Local();
	void BeginState_Action_Local();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBOverrun_C">();
	}
	static class UBP_AJBOverrun_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBOverrun_C>();
	}
};
static_assert(alignof(UBP_AJBOverrun_C) == 0x000008, "Wrong alignment on UBP_AJBOverrun_C");
static_assert(sizeof(UBP_AJBOverrun_C) == 0x0002D0, "Wrong size on UBP_AJBOverrun_C");
static_assert(offsetof(UBP_AJBOverrun_C, UberGraphFrame_BP_AJBOverrun_C) == 0x000280, "Member 'UBP_AJBOverrun_C::UberGraphFrame_BP_AJBOverrun_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverrun_C, CameraPitchSpeedScale) == 0x000288, "Member 'UBP_AJBOverrun_C::CameraPitchSpeedScale' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverrun_C, CameraYawSpeedScale) == 0x00028C, "Member 'UBP_AJBOverrun_C::CameraYawSpeedScale' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverrun_C, Defence___) == 0x000290, "Member 'UBP_AJBOverrun_C::Defence___' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverrun_C, ResistPassiveTag) == 0x000298, "Member 'UBP_AJBOverrun_C::ResistPassiveTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverrun_C, LaunchKnockbackConstant) == 0x0002A0, "Member 'UBP_AJBOverrun_C::LaunchKnockbackConstant' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverrun_C, KnockbackIntensity_Normal) == 0x0002AC, "Member 'UBP_AJBOverrun_C::KnockbackIntensity_Normal' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverrun_C, KnockbackIntensity_Hamon) == 0x0002B0, "Member 'UBP_AJBOverrun_C::KnockbackIntensity_Hamon' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverrun_C, KnockbackIntensity_NormalForStand) == 0x0002B4, "Member 'UBP_AJBOverrun_C::KnockbackIntensity_NormalForStand' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverrun_C, KnockbackIntensity_HamonForStand) == 0x0002B8, "Member 'UBP_AJBOverrun_C::KnockbackIntensity_HamonForStand' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverrun_C, ResistRatePhase1) == 0x0002BC, "Member 'UBP_AJBOverrun_C::ResistRatePhase1' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverrun_C, ResistRatePhase2) == 0x0002C0, "Member 'UBP_AJBOverrun_C::ResistRatePhase2' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverrun_C, ResistRatePhase3) == 0x0002C4, "Member 'UBP_AJBOverrun_C::ResistRatePhase3' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverrun_C, CenteringKnockbackDeg) == 0x0002C8, "Member 'UBP_AJBOverrun_C::CenteringKnockbackDeg' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverrun_C, CenteringKnockbackForwardLength) == 0x0002CC, "Member 'UBP_AJBOverrun_C::CenteringKnockbackForwardLength' has a wrong offset!");

}

