#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGamePvE_PhaseManager

#include "Basic.hpp"

#include "BP_AJBInGamePvE_PhaseManager_classes.hpp"
#include "BP_AJBInGamePvE_PhaseManager_parameters.hpp"


namespace SDK
{

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGamePvE_PhaseManager_C::ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager");

	Params::BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.SetTimerPaused
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InIsPaused                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGamePvE_PhaseManager_C::SetTimerPaused(bool InIsPaused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "SetTimerPaused");

	Params::BP_AJBInGamePvE_PhaseManager_C_SetTimerPaused Parms{};

	Parms.InIsPaused = InIsPaused;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.SwitchTimerPaused
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGamePvE_PhaseManager_C::SwitchTimerPaused()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "SwitchTimerPaused");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.OnEndBitesTheDust
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_AJBBitesTheDustAffecter_C*    Affecter                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGamePvE_PhaseManager_C::OnEndBitesTheDust(class ABP_AJBBitesTheDustAffecter_C* Affecter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "OnEndBitesTheDust");

	Params::BP_AJBInGamePvE_PhaseManager_C_OnEndBitesTheDust Parms{};

	Parms.Affecter = Affecter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.OnBeginBitesTheDust
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_AJBBitesTheDustAffecter_C*    Affecter                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGamePvE_PhaseManager_C::OnBeginBitesTheDust(class ABP_AJBBitesTheDustAffecter_C* Affecter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "OnBeginBitesTheDust");

	Params::BP_AJBInGamePvE_PhaseManager_C_OnBeginBitesTheDust Parms{};

	Parms.Affecter = Affecter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.OnOpenTheGame
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGamePvE_PhaseManager_C::OnOpenTheGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "OnOpenTheGame");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_AJBInGamePvE_PhaseManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGamePvE_PhaseManager_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "ReceiveTick");

	Params::BP_AJBInGamePvE_PhaseManager_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.OnChangePhaseTo
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// E_AJBInGamePvE_GamePhase                ToPhase                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGamePvE_PhaseManager_C::OnChangePhaseTo(E_AJBInGamePvE_GamePhase ToPhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "OnChangePhaseTo");

	Params::BP_AJBInGamePvE_PhaseManager_C_OnChangePhaseTo Parms{};

	Parms.ToPhase = ToPhase;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.OnChangePhaseFrom
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// E_AJBInGamePvE_GamePhase                FromPhase                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGamePvE_PhaseManager_C::OnChangePhaseFrom(E_AJBInGamePvE_GamePhase FromPhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "OnChangePhaseFrom");

	Params::BP_AJBInGamePvE_PhaseManager_C_OnChangePhaseFrom Parms{};

	Parms.FromPhase = FromPhase;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGamePvE_PhaseManager_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.ChangePhase
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_AJBInGamePvE_GamePhase                NewPhase                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGamePvE_PhaseManager_C::ChangePhase(E_AJBInGamePvE_GamePhase NewPhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "ChangePhase");

	Params::BP_AJBInGamePvE_PhaseManager_C_ChangePhase Parms{};

	Parms.NewPhase = NewPhase;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.GetElapsedTimeInPhase
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float*                                  ElapsedTimeInPhase                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGamePvE_PhaseManager_C::GetElapsedTimeInPhase(float* ElapsedTimeInPhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "GetElapsedTimeInPhase");

	Params::BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeInPhase Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ElapsedTimeInPhase != nullptr)
		*ElapsedTimeInPhase = Parms.ElapsedTimeInPhase;
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.GetCurrentPhase
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_AJBInGamePvE_GamePhase*               CurrentPhase_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGamePvE_PhaseManager_C::GetCurrentPhase(E_AJBInGamePvE_GamePhase* CurrentPhase_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "GetCurrentPhase");

	Params::BP_AJBInGamePvE_PhaseManager_C_GetCurrentPhase Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentPhase_0 != nullptr)
		*CurrentPhase_0 = Parms.CurrentPhase_0;
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.AddTotalPastPhaseTime
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AddTime                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGamePvE_PhaseManager_C::AddTotalPastPhaseTime(float AddTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "AddTotalPastPhaseTime");

	Params::BP_AJBInGamePvE_PhaseManager_C_AddTotalPastPhaseTime Parms{};

	Parms.AddTime = AddTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.StartPvEGame
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGamePvE_PhaseManager_C::StartPvEGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "StartPvEGame");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.IncrementWaveIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32*                                  NewWaveIndex                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGamePvE_PhaseManager_C::IncrementWaveIndex(int32* NewWaveIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "IncrementWaveIndex");

	Params::BP_AJBInGamePvE_PhaseManager_C_IncrementWaveIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewWaveIndex != nullptr)
		*NewWaveIndex = Parms.NewWaveIndex;
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.HasIntervalFinished
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   HasFinished                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGamePvE_PhaseManager_C::HasIntervalFinished(bool* HasFinished)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "HasIntervalFinished");

	Params::BP_AJBInGamePvE_PhaseManager_C_HasIntervalFinished Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HasFinished != nullptr)
		*HasFinished = Parms.HasFinished;
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.HasWaveFinished
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   HasFinished                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGamePvE_PhaseManager_C::HasWaveFinished(bool* HasFinished)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "HasWaveFinished");

	Params::BP_AJBInGamePvE_PhaseManager_C_HasWaveFinished Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HasFinished != nullptr)
		*HasFinished = Parms.HasFinished;
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.GetWaveDuration
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   WaveIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  WaveDuration                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGamePvE_PhaseManager_C::GetWaveDuration(int32 WaveIndex, float* WaveDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "GetWaveDuration");

	Params::BP_AJBInGamePvE_PhaseManager_C_GetWaveDuration Parms{};

	Parms.WaveIndex = WaveIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (WaveDuration != nullptr)
		*WaveDuration = Parms.WaveDuration;
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.GetIntervalDuration
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   WaveIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  IntervalDuration                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGamePvE_PhaseManager_C::GetIntervalDuration(int32 WaveIndex, float* IntervalDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "GetIntervalDuration");

	Params::BP_AJBInGamePvE_PhaseManager_C_GetIntervalDuration Parms{};

	Parms.WaveIndex = WaveIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (IntervalDuration != nullptr)
		*IntervalDuration = Parms.IntervalDuration;
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.GetMaxWaveCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32*                                  MaxWaveCount_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGamePvE_PhaseManager_C::GetMaxWaveCount(int32* MaxWaveCount_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "GetMaxWaveCount");

	Params::BP_AJBInGamePvE_PhaseManager_C_GetMaxWaveCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MaxWaveCount_0 != nullptr)
		*MaxWaveCount_0 = Parms.MaxWaveCount_0;
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.ParseWaveInfo
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGamePvE_PhaseManager_C::ParseWaveInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "ParseWaveInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.GetCurrentWaveIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32*                                  WaveIndex                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGamePvE_PhaseManager_C::GetCurrentWaveIndex(int32* WaveIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "GetCurrentWaveIndex");

	Params::BP_AJBInGamePvE_PhaseManager_C_GetCurrentWaveIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WaveIndex != nullptr)
		*WaveIndex = Parms.WaveIndex;
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.GetCurrentWaveDuration
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float*                                  WaveDuration                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGamePvE_PhaseManager_C::GetCurrentWaveDuration(float* WaveDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "GetCurrentWaveDuration");

	Params::BP_AJBInGamePvE_PhaseManager_C_GetCurrentWaveDuration Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WaveDuration != nullptr)
		*WaveDuration = Parms.WaveDuration;
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.GetCurrentIntervalDuration
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float*                                  IntervalDuration                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGamePvE_PhaseManager_C::GetCurrentIntervalDuration(float* IntervalDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "GetCurrentIntervalDuration");

	Params::BP_AJBInGamePvE_PhaseManager_C_GetCurrentIntervalDuration Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IntervalDuration != nullptr)
		*IntervalDuration = Parms.IntervalDuration;
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.GetRemainingTimeInPhase
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float*                                  RemainingTimeInPhase                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGamePvE_PhaseManager_C::GetRemainingTimeInPhase(float* RemainingTimeInPhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "GetRemainingTimeInPhase");

	Params::BP_AJBInGamePvE_PhaseManager_C_GetRemainingTimeInPhase Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RemainingTimeInPhase != nullptr)
		*RemainingTimeInPhase = Parms.RemainingTimeInPhase;
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.GetCurrentPhaseTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float*                                  CurrentPhaseTime                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGamePvE_PhaseManager_C::GetCurrentPhaseTime(float* CurrentPhaseTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "GetCurrentPhaseTime");

	Params::BP_AJBInGamePvE_PhaseManager_C_GetCurrentPhaseTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentPhaseTime != nullptr)
		*CurrentPhaseTime = Parms.CurrentPhaseTime;
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.HasAllPhaseFinished
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   HasFinished                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGamePvE_PhaseManager_C::HasAllPhaseFinished(bool* HasFinished)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "HasAllPhaseFinished");

	Params::BP_AJBInGamePvE_PhaseManager_C_HasAllPhaseFinished Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HasFinished != nullptr)
		*HasFinished = Parms.HasFinished;
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.GetElapsedTimeFromOpenTheGame
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ABP_AJBInGamePvE_PhaseManager_C::GetElapsedTimeFromOpenTheGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "GetElapsedTimeFromOpenTheGame");

	Params::BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeFromOpenTheGame Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.GetWaveInfo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   WaveIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FST_AJBInGamePvE_PhaseInfo*      Output                                                 (Parm, OutParm, HasGetValueTypeHash)

void ABP_AJBInGamePvE_PhaseManager_C::GetWaveInfo(int32 WaveIndex, struct FST_AJBInGamePvE_PhaseInfo* Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "GetWaveInfo");

	Params::BP_AJBInGamePvE_PhaseManager_C_GetWaveInfo Parms{};

	Parms.WaveIndex = WaveIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Output != nullptr)
		*Output = std::move(Parms.Output);
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.SetTotalPhaseTime
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   NewTime                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGamePvE_PhaseManager_C::SetTotalPhaseTime(float NewTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "SetTotalPhaseTime");

	Params::BP_AJBInGamePvE_PhaseManager_C_SetTotalPhaseTime Parms{};

	Parms.NewTime = NewTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.RefreshTotalPhaseTime
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGamePvE_PhaseManager_C::RefreshTotalPhaseTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "RefreshTotalPhaseTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.GetElapsedTimeInGame
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float*                                  ElapsedTimeInGame                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGamePvE_PhaseManager_C::GetElapsedTimeInGame(float* ElapsedTimeInGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "GetElapsedTimeInGame");

	Params::BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeInGame Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ElapsedTimeInGame != nullptr)
		*ElapsedTimeInGame = Parms.ElapsedTimeInGame;
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.UpdateTimeMessage
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGamePvE_PhaseManager_C::UpdateTimeMessage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "UpdateTimeMessage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.LeftTimeCurrentPhase
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float*                                  LeftTime                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGamePvE_PhaseManager_C::LeftTimeCurrentPhase(float* LeftTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "LeftTimeCurrentPhase");

	Params::BP_AJBInGamePvE_PhaseManager_C_LeftTimeCurrentPhase Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LeftTime != nullptr)
		*LeftTime = Parms.LeftTime;
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.ResetTimeMessageInfo
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGamePvE_PhaseManager_C::ResetTimeMessageInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "ResetTimeMessageInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.IsLastWave
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   IsLastWave_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGamePvE_PhaseManager_C::IsLastWave(bool* IsLastWave_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "IsLastWave");

	Params::BP_AJBInGamePvE_PhaseManager_C_IsLastWave Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsLastWave_0 != nullptr)
		*IsLastWave_0 = Parms.IsLastWave_0;
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.Debug_ForceFinishCurrentPhase
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGamePvE_PhaseManager_C::Debug_ForceFinishCurrentPhase()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "Debug_ForceFinishCurrentPhase");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.IsInOverTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   IsInOverTime_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGamePvE_PhaseManager_C::IsInOverTime(bool* IsInOverTime_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_PhaseManager_C", "IsInOverTime");

	Params::BP_AJBInGamePvE_PhaseManager_C_IsInOverTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsInOverTime_0 != nullptr)
		*IsInOverTime_0 = Parms.IsInOverTime_0;
}

}

