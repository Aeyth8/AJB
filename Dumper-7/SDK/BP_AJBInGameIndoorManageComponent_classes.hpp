#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameIndoorManageComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBInGameIndoorManageComponent.BP_AJBInGameIndoorManageComponent_C
// 0x0040 (0x0130 - 0x00F0)
class UBP_AJBInGameIndoorManageComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00F0(0x0008)(Transient, DuplicateTransient)
	TArray<class UPrimitiveComponent*>            OverlapVolume;                                     // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	UMulticastDelegateProperty_                   OnBeginInDoorEvent;                                // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnEndInDoorEvent;                                  // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         NotSameScale;                                      // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBInGameIndoorManageComponent(int32 EntryPoint);
	void OnEndIndoor(const class UPrimitiveComponent*& Volume);
	void OnBeginIndoor(const class UPrimitiveComponent*& Volume);
	void IsInDoor(bool* Result);
	void IsSameRoom(class AActor* CheckActor, bool* Result);
	void GetEffectScaleFromSameRoom(class AActor* CheckActor, float* Scale);
	void ClearOverlapVolume();
	void GetOverlapVolumes(TArray<class UPrimitiveComponent*>* OverlapVolume_0);
	void IsInDoorCeilingHeight(bool* bResult);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBInGameIndoorManageComponent_C">();
	}
	static class UBP_AJBInGameIndoorManageComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBInGameIndoorManageComponent_C>();
	}
};
static_assert(alignof(UBP_AJBInGameIndoorManageComponent_C) == 0x000008, "Wrong alignment on UBP_AJBInGameIndoorManageComponent_C");
static_assert(sizeof(UBP_AJBInGameIndoorManageComponent_C) == 0x000130, "Wrong size on UBP_AJBInGameIndoorManageComponent_C");
static_assert(offsetof(UBP_AJBInGameIndoorManageComponent_C, UberGraphFrame) == 0x0000F0, "Member 'UBP_AJBInGameIndoorManageComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_AJBInGameIndoorManageComponent_C, OverlapVolume) == 0x0000F8, "Member 'UBP_AJBInGameIndoorManageComponent_C::OverlapVolume' has a wrong offset!");
static_assert(offsetof(UBP_AJBInGameIndoorManageComponent_C, OnBeginInDoorEvent) == 0x000108, "Member 'UBP_AJBInGameIndoorManageComponent_C::OnBeginInDoorEvent' has a wrong offset!");
static_assert(offsetof(UBP_AJBInGameIndoorManageComponent_C, OnEndInDoorEvent) == 0x000118, "Member 'UBP_AJBInGameIndoorManageComponent_C::OnEndInDoorEvent' has a wrong offset!");
static_assert(offsetof(UBP_AJBInGameIndoorManageComponent_C, NotSameScale) == 0x000128, "Member 'UBP_AJBInGameIndoorManageComponent_C::NotSameScale' has a wrong offset!");

}

