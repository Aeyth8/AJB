#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_AJBPostProcessHuman_RBControlled

#include "Basic.hpp"

#include "ELipType_structs.hpp"


namespace SDK::Params
{

// Function ABP_AJBPostProcessHuman_RBControlled.ABP_AJBPostProcessHuman_RBControlled_C.ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled
// 0x0068 (0x0068 - 0x0000)
struct ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable1;                              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELipType                                      K2Node_Event_NewType;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      K2Node_Event_Lip_A;                                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Event_Lip_I;                                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Event_Lip_U;                                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Event_Lip_E;                                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Event_Lip_O;                                // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_NewFlag;                              // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_NewBlendTime;                         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckActiveBehaviorIsEmote_bRetValue;     // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled) == 0x000008, "Wrong alignment on ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled");
static_assert(sizeof(ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled) == 0x000068, "Wrong size on ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled");
static_assert(offsetof(ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled, EntryPoint) == 0x000000, "Member 'ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled, Temp_bool_Variable) == 0x000004, "Member 'ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled, Temp_float_Variable) == 0x000008, "Member 'ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled, Temp_float_Variable1) == 0x00000C, "Member 'ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled::Temp_float_Variable1' has a wrong offset!");
static_assert(offsetof(ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled, K2Node_Event_NewType) == 0x000010, "Member 'ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled::K2Node_Event_NewType' has a wrong offset!");
static_assert(offsetof(ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled, K2Node_Event_Lip_A) == 0x000018, "Member 'ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled::K2Node_Event_Lip_A' has a wrong offset!");
static_assert(offsetof(ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled, K2Node_Event_Lip_I) == 0x000020, "Member 'ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled::K2Node_Event_Lip_I' has a wrong offset!");
static_assert(offsetof(ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled, K2Node_Event_Lip_U) == 0x000028, "Member 'ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled::K2Node_Event_Lip_U' has a wrong offset!");
static_assert(offsetof(ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled, K2Node_Event_Lip_E) == 0x000030, "Member 'ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled::K2Node_Event_Lip_E' has a wrong offset!");
static_assert(offsetof(ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled, K2Node_Event_Lip_O) == 0x000038, "Member 'ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled::K2Node_Event_Lip_O' has a wrong offset!");
static_assert(offsetof(ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled, K2Node_Event_NewFlag) == 0x000040, "Member 'ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled::K2Node_Event_NewFlag' has a wrong offset!");
static_assert(offsetof(ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled, K2Node_Event_NewBlendTime) == 0x000044, "Member 'ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled::K2Node_Event_NewBlendTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled, K2Node_Event_DeltaTimeX) == 0x000048, "Member 'ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled, K2Node_Select_Default) == 0x00004C, "Member 'ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled, CallFunc_TryGetPawnOwner_ReturnValue) == 0x000050, "Member 'ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000058, "Member 'ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled, CallFunc_CheckActiveBehaviorIsEmote_bRetValue) == 0x000061, "Member 'ABP_AJBPostProcessHuman_RBControlled_C_ExecuteUbergraph_ABP_AJBPostProcessHuman_RBControlled::CallFunc_CheckActiveBehaviorIsEmote_bRetValue' has a wrong offset!");

// Function ABP_AJBPostProcessHuman_RBControlled.ABP_AJBPostProcessHuman_RBControlled_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_AJBPostProcessHuman_RBControlled_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_AJBPostProcessHuman_RBControlled_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_AJBPostProcessHuman_RBControlled_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_AJBPostProcessHuman_RBControlled_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_AJBPostProcessHuman_RBControlled_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_AJBPostProcessHuman_RBControlled_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ABP_AJBPostProcessHuman_RBControlled_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ABP_AJBPostProcessHuman_RBControlled.ABP_AJBPostProcessHuman_RBControlled_C.UpdateLipBlendTime
// 0x0004 (0x0004 - 0x0000)
struct ABP_AJBPostProcessHuman_RBControlled_C_UpdateLipBlendTime final
{
public:
	float                                         NewBlendTime;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_AJBPostProcessHuman_RBControlled_C_UpdateLipBlendTime) == 0x000004, "Wrong alignment on ABP_AJBPostProcessHuman_RBControlled_C_UpdateLipBlendTime");
static_assert(sizeof(ABP_AJBPostProcessHuman_RBControlled_C_UpdateLipBlendTime) == 0x000004, "Wrong size on ABP_AJBPostProcessHuman_RBControlled_C_UpdateLipBlendTime");
static_assert(offsetof(ABP_AJBPostProcessHuman_RBControlled_C_UpdateLipBlendTime, NewBlendTime) == 0x000000, "Member 'ABP_AJBPostProcessHuman_RBControlled_C_UpdateLipBlendTime::NewBlendTime' has a wrong offset!");

// Function ABP_AJBPostProcessHuman_RBControlled.ABP_AJBPostProcessHuman_RBControlled_C.SetEnableLip
// 0x0001 (0x0001 - 0x0000)
struct ABP_AJBPostProcessHuman_RBControlled_C_SetEnableLip final
{
public:
	bool                                          NewFlag;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_AJBPostProcessHuman_RBControlled_C_SetEnableLip) == 0x000001, "Wrong alignment on ABP_AJBPostProcessHuman_RBControlled_C_SetEnableLip");
static_assert(sizeof(ABP_AJBPostProcessHuman_RBControlled_C_SetEnableLip) == 0x000001, "Wrong size on ABP_AJBPostProcessHuman_RBControlled_C_SetEnableLip");
static_assert(offsetof(ABP_AJBPostProcessHuman_RBControlled_C_SetEnableLip, NewFlag) == 0x000000, "Member 'ABP_AJBPostProcessHuman_RBControlled_C_SetEnableLip::NewFlag' has a wrong offset!");

// Function ABP_AJBPostProcessHuman_RBControlled.ABP_AJBPostProcessHuman_RBControlled_C.SetLipAnimSequence
// 0x0028 (0x0028 - 0x0000)
struct ABP_AJBPostProcessHuman_RBControlled_C_SetLipAnimSequence final
{
public:
	class UAnimSequenceBase*                      Lip_A;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Lip_I;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Lip_U;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Lip_E;                                             // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Lip_O;                                             // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_AJBPostProcessHuman_RBControlled_C_SetLipAnimSequence) == 0x000008, "Wrong alignment on ABP_AJBPostProcessHuman_RBControlled_C_SetLipAnimSequence");
static_assert(sizeof(ABP_AJBPostProcessHuman_RBControlled_C_SetLipAnimSequence) == 0x000028, "Wrong size on ABP_AJBPostProcessHuman_RBControlled_C_SetLipAnimSequence");
static_assert(offsetof(ABP_AJBPostProcessHuman_RBControlled_C_SetLipAnimSequence, Lip_A) == 0x000000, "Member 'ABP_AJBPostProcessHuman_RBControlled_C_SetLipAnimSequence::Lip_A' has a wrong offset!");
static_assert(offsetof(ABP_AJBPostProcessHuman_RBControlled_C_SetLipAnimSequence, Lip_I) == 0x000008, "Member 'ABP_AJBPostProcessHuman_RBControlled_C_SetLipAnimSequence::Lip_I' has a wrong offset!");
static_assert(offsetof(ABP_AJBPostProcessHuman_RBControlled_C_SetLipAnimSequence, Lip_U) == 0x000010, "Member 'ABP_AJBPostProcessHuman_RBControlled_C_SetLipAnimSequence::Lip_U' has a wrong offset!");
static_assert(offsetof(ABP_AJBPostProcessHuman_RBControlled_C_SetLipAnimSequence, Lip_E) == 0x000018, "Member 'ABP_AJBPostProcessHuman_RBControlled_C_SetLipAnimSequence::Lip_E' has a wrong offset!");
static_assert(offsetof(ABP_AJBPostProcessHuman_RBControlled_C_SetLipAnimSequence, Lip_O) == 0x000020, "Member 'ABP_AJBPostProcessHuman_RBControlled_C_SetLipAnimSequence::Lip_O' has a wrong offset!");

// Function ABP_AJBPostProcessHuman_RBControlled.ABP_AJBPostProcessHuman_RBControlled_C.UpdateLipType
// 0x0001 (0x0001 - 0x0000)
struct ABP_AJBPostProcessHuman_RBControlled_C_UpdateLipType final
{
public:
	ELipType                                      NewType;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_AJBPostProcessHuman_RBControlled_C_UpdateLipType) == 0x000001, "Wrong alignment on ABP_AJBPostProcessHuman_RBControlled_C_UpdateLipType");
static_assert(sizeof(ABP_AJBPostProcessHuman_RBControlled_C_UpdateLipType) == 0x000001, "Wrong size on ABP_AJBPostProcessHuman_RBControlled_C_UpdateLipType");
static_assert(offsetof(ABP_AJBPostProcessHuman_RBControlled_C_UpdateLipType, NewType) == 0x000000, "Member 'ABP_AJBPostProcessHuman_RBControlled_C_UpdateLipType::NewType' has a wrong offset!");

}

