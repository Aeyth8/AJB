#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBPvEGameState

#include "Basic.hpp"

#include "ST_AJBPvEScoreResult_structs.hpp"
#include "Engine_structs.hpp"
#include "EPvEGameDifficulty_structs.hpp"
#include "ST_AJBInGamePvE_ScoreSettings_structs.hpp"
#include "BP_AJBBattleGameState_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBPvEGameState.BP_AJBPvEGameState_C
// 0x00E8 (0x0600 - 0x0518)
class ABP_AJBPvEGameState_C final : public ABP_AJBBattleGameState_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBPvEGameState_C;               // 0x0518(0x0008)(Transient, DuplicateTransient)
	int32                                         MobKillScore;                                      // 0x0520(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MobKillCount;                                      // 0x0524(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugIsEnabledIncreaseSPOnWaveEnd;                 // 0x0528(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_529[0x3];                                      // 0x0529(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DebugOverrodeScoreRank;                            // 0x052C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGamePvE_PhaseManager_C*        CachePhaseManager;                                 // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGamePvE_EnemySpawnManager_C*   CachedSpawnManager;                                // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnKillScoreChanged;                                // 0x0540(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnKillCountChanged;                                // 0x0550(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UDataTable*                             DT_ScoreDetails;                                   // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RetiredCount;                                      // 0x0568(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_56C[0x4];                                      // 0x056C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EPvEGameDifficulty, struct FST_AJBInGamePvE_ScoreSettings> ScoreDetailsCache;               // 0x0570(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	UMulticastDelegateProperty_                   OnRetiredCountChanged;                             // 0x05C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         ScoreRankBorderGroup;                              // 0x05D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BossKillScore;                                     // 0x05D4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BossKillCount;                                     // 0x05D8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_AJBPvEScoreResult                  DeterminedScoreResult;                             // 0x05DC(0x0020)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBPvEGameState(int32 EntryPoint);
	void DetermineScoreResults_Internal(int32 BorderGroup, EPvEGameDifficulty Difficulty, bool IsIncludingBonus);
	void ROS_DetermineScoreResults(int32 BorderGroup, EPvEGameDifficulty Difficulty, bool IsIncludingBonus);
	void MC_DetermineScoreResults(int32 BorderGroup, EPvEGameDifficulty Difficulty, bool IsIncludingBonus);
	void DetermineScoreResults(int32 BorderGroup, EPvEGameDifficulty Difficulty, bool IsIncludingBonus);
	void InitCache();
	void OnEndWave(int32 WaveIndex, float WaveDuration);
	void InitDelegateBinds();
	void Debug_SetupPairMode();
	void SetupForEditor();
	void MC_SyncNPCMatchingInfo(const class FString& PlayerID, const struct FMatchingPlayerInfo& PlayerInfo);
	void MC_OnRetiredCountChanged(int32 OldRetiredCount, int32 NewRetiredCount);
	void MC_OnKillCountChanged(int32 OldKillCount, int32 NewKillCount);
	void MC_OnKillScoreChanged(int32 OldScore, int32 NewScore);
	void GetMobKillScore(int32* Score);
	void SetMobKillScore(int32 Value);
	void AddMobKillScore(int32 Value);
	void GiveRewardOnWaveCleared(int32 WaveIndex);
	void GetMobKillCount(int32* Count);
	void SetMobKillCount(int32 Value);
	void AddMobKillCount(int32 Value);
	void IncrementMobKillCount();
	void GetRetiredCount(int32* TotalRetiredCount);
	void SetRetiredCount(int32 Value);
	void AddRetiredCount(int32 Value);
	void IncrementRetiredCount();
	void GetScoreResults(int32 BorderGroup, EPvEGameDifficulty Difficulty, bool IsIncludingBonus, struct FST_AJBPvEScoreResult* ScoreResults);
	void GetRetiredBonusScore(EPvEGameDifficulty Difficulty, int32* BonusScore);
	void GetScoreSettings(const EPvEGameDifficulty& Difficulty, struct FST_AJBInGamePvE_ScoreSettings* ScoreSettings, bool* WasFound);
	void GetKnockDownScoreSetting(const EPvEGameDifficulty& Difficulty, int32* KnockDownScore);
	void GetScoreRank(int32 Score, int32 BorderGroup, EPvEGameDifficulty Difficulty, int32* ScoreRank);
	void GetScoreRankSettings(int32 BorderGroup, const EPvEGameDifficulty& Difficulty, struct FST_AJBInGamePvE_ScoreRankSettings* ScoreRankSettings, bool* WasFound);
	void ConvertScoreRankSettingsToArray(const struct FST_AJBInGamePvE_ScoreRankSettings& ScoreRankSettings, TArray<int32>* BorderArray);
	void DetermineScoreRankBorderGroup(int32* BorderGroup);
	void GetDifficulty(EPvEGameDifficulty* Difficulty);
	void GetScoreRankBorderGroup(int32* BorderGroup);
	void GetBossKillScore(int32* Score);
	void SetBossKillScore(int32 Value);
	void AddBossKillScore(int32 Value);
	void GetBossKillCount(int32* Count);
	void SetBossKillCount(int32 Value);
	void AddBossKillCount(int32 Value);
	void IncrementBossKillCount();
	void GetTotalKillScore(int32* Score);
	void GetTotalKillCount(int32* Count);
	void GetDeterminedScoreResults(struct FST_AJBPvEScoreResult* Results);
	void DetermineAndGetScoreResults(int32 BorderGroup, EPvEGameDifficulty Difficulty, bool IsIncludingBonus, struct FST_AJBPvEScoreResult* Results);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBPvEGameState_C">();
	}
	static class ABP_AJBPvEGameState_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBPvEGameState_C>();
	}
};
static_assert(alignof(ABP_AJBPvEGameState_C) == 0x000008, "Wrong alignment on ABP_AJBPvEGameState_C");
static_assert(sizeof(ABP_AJBPvEGameState_C) == 0x000600, "Wrong size on ABP_AJBPvEGameState_C");
static_assert(offsetof(ABP_AJBPvEGameState_C, UberGraphFrame_BP_AJBPvEGameState_C) == 0x000518, "Member 'ABP_AJBPvEGameState_C::UberGraphFrame_BP_AJBPvEGameState_C' has a wrong offset!");
static_assert(offsetof(ABP_AJBPvEGameState_C, MobKillScore) == 0x000520, "Member 'ABP_AJBPvEGameState_C::MobKillScore' has a wrong offset!");
static_assert(offsetof(ABP_AJBPvEGameState_C, MobKillCount) == 0x000524, "Member 'ABP_AJBPvEGameState_C::MobKillCount' has a wrong offset!");
static_assert(offsetof(ABP_AJBPvEGameState_C, DebugIsEnabledIncreaseSPOnWaveEnd) == 0x000528, "Member 'ABP_AJBPvEGameState_C::DebugIsEnabledIncreaseSPOnWaveEnd' has a wrong offset!");
static_assert(offsetof(ABP_AJBPvEGameState_C, DebugOverrodeScoreRank) == 0x00052C, "Member 'ABP_AJBPvEGameState_C::DebugOverrodeScoreRank' has a wrong offset!");
static_assert(offsetof(ABP_AJBPvEGameState_C, CachePhaseManager) == 0x000530, "Member 'ABP_AJBPvEGameState_C::CachePhaseManager' has a wrong offset!");
static_assert(offsetof(ABP_AJBPvEGameState_C, CachedSpawnManager) == 0x000538, "Member 'ABP_AJBPvEGameState_C::CachedSpawnManager' has a wrong offset!");
static_assert(offsetof(ABP_AJBPvEGameState_C, OnKillScoreChanged) == 0x000540, "Member 'ABP_AJBPvEGameState_C::OnKillScoreChanged' has a wrong offset!");
static_assert(offsetof(ABP_AJBPvEGameState_C, OnKillCountChanged) == 0x000550, "Member 'ABP_AJBPvEGameState_C::OnKillCountChanged' has a wrong offset!");
static_assert(offsetof(ABP_AJBPvEGameState_C, DT_ScoreDetails) == 0x000560, "Member 'ABP_AJBPvEGameState_C::DT_ScoreDetails' has a wrong offset!");
static_assert(offsetof(ABP_AJBPvEGameState_C, RetiredCount) == 0x000568, "Member 'ABP_AJBPvEGameState_C::RetiredCount' has a wrong offset!");
static_assert(offsetof(ABP_AJBPvEGameState_C, ScoreDetailsCache) == 0x000570, "Member 'ABP_AJBPvEGameState_C::ScoreDetailsCache' has a wrong offset!");
static_assert(offsetof(ABP_AJBPvEGameState_C, OnRetiredCountChanged) == 0x0005C0, "Member 'ABP_AJBPvEGameState_C::OnRetiredCountChanged' has a wrong offset!");
static_assert(offsetof(ABP_AJBPvEGameState_C, ScoreRankBorderGroup) == 0x0005D0, "Member 'ABP_AJBPvEGameState_C::ScoreRankBorderGroup' has a wrong offset!");
static_assert(offsetof(ABP_AJBPvEGameState_C, BossKillScore) == 0x0005D4, "Member 'ABP_AJBPvEGameState_C::BossKillScore' has a wrong offset!");
static_assert(offsetof(ABP_AJBPvEGameState_C, BossKillCount) == 0x0005D8, "Member 'ABP_AJBPvEGameState_C::BossKillCount' has a wrong offset!");
static_assert(offsetof(ABP_AJBPvEGameState_C, DeterminedScoreResult) == 0x0005DC, "Member 'ABP_AJBPvEGameState_C::DeterminedScoreResult' has a wrong offset!");

}

