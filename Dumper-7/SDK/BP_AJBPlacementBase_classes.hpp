#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBPlacementBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AJB_structs.hpp"
#include "AJB_classes.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBPlacementBase.BP_AJBPlacementBase_C
// 0x0050 (0x0378 - 0x0328)
class ABP_AJBPlacementBase_C : public AAJBInGamePlacementBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EPlacementState                               PlacementState;                                    // 0x0338(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_339[0x3];                                      // 0x0339(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StateTime;                                         // 0x033C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PrepareTime;                                       // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StandbyTime;                                       // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ClearingTime;                                      // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnReadyToDestroy_Server;                           // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bDuringTheWorld;                                   // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugPrintState;                                  // 0x0361(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bValidPrepareTime;                                 // 0x0362(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_363[0x5];                                      // 0x0363(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           SkillTag;                                          // 0x0368(0x0008)(Edit, BlueprintVisible, Net, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         SerialNumber;                                      // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bPlacedBySeparatedStand;                           // 0x0374(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          bClearingOnCritical;                               // 0x0375(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bClearingOnSkillProhibition;                       // 0x0376(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_AJBPlacementBase(int32 EntryPoint);
	void OnPassiveAdded(const struct FGameplayTag& AddCondition, const struct FGameplayTag& SecondTag);
	void OnCritical_Local();
	void OnBecomeLastSurvivor(bool bBitesTheDust);
	void OnDie_Local(bool bWillRessurect, bool bIsLastDefeated, bool bDiedOfKillZ);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void MC_BeginState_Clearing_Server();
	void OnBeginState_Clearing_OneShot();
	void OnStateEnd_OneShot();
	void BeginState_Clearing_Server();
	void MC_BeginStateTriggering_Server();
	void OnBeginState_Triggering_OneShot();
	void OnBeginState_Triggering_Server();
	void MC_BeginStatePrepare_Server();
	void OnBeginState_Prepare_OneShot();
	void BeginState_Prepare_Server();
	void OnBeginState_Standby_OneShot();
	void MC_StateEnd_Server();
	void ROS_BeginState_Clearing_Local();
	void MC_BeginStateStandby_Server();
	void OnStateEnd();
	void OnBeginState_Clearing();
	void OnBeginState_Triggering();
	void OnBeginState_Standby();
	void OnBeginState_Prepare();
	void StateEnd_Server();
	void BeginState_Clearing_Local();
	void BeginState_Standby_Server();
	void StateTick_Clearing(float DeltaSeconds);
	void StateTick_Triggering(float DeltaSeconds);
	void StateTick_Standby(float DeltaSeconds);
	void StateTick_Prepare(float DeltaSeconds);
	void StateTick_None(float DeltaSeconds);
	void StateTick(float DeltaSeconds);
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);
	void UserConstructionScript();
	void ChangeState_Server(EPlacementState NextState);
	void CheckValidateState(bool* bValidateState);
	void CheckState(EPlacementState State, bool* bMatch);
	void CheckActiveState(bool* bActiveState);
	void OnRep_PlacementState();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBPlacementBase_C">();
	}
	static class ABP_AJBPlacementBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBPlacementBase_C>();
	}
};
static_assert(alignof(ABP_AJBPlacementBase_C) == 0x000008, "Wrong alignment on ABP_AJBPlacementBase_C");
static_assert(sizeof(ABP_AJBPlacementBase_C) == 0x000378, "Wrong size on ABP_AJBPlacementBase_C");
static_assert(offsetof(ABP_AJBPlacementBase_C, UberGraphFrame) == 0x000328, "Member 'ABP_AJBPlacementBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementBase_C, DefaultSceneRoot) == 0x000330, "Member 'ABP_AJBPlacementBase_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementBase_C, PlacementState) == 0x000338, "Member 'ABP_AJBPlacementBase_C::PlacementState' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementBase_C, StateTime) == 0x00033C, "Member 'ABP_AJBPlacementBase_C::StateTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementBase_C, PrepareTime) == 0x000340, "Member 'ABP_AJBPlacementBase_C::PrepareTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementBase_C, StandbyTime) == 0x000344, "Member 'ABP_AJBPlacementBase_C::StandbyTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementBase_C, ClearingTime) == 0x000348, "Member 'ABP_AJBPlacementBase_C::ClearingTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementBase_C, OnReadyToDestroy_Server) == 0x000350, "Member 'ABP_AJBPlacementBase_C::OnReadyToDestroy_Server' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementBase_C, bDuringTheWorld) == 0x000360, "Member 'ABP_AJBPlacementBase_C::bDuringTheWorld' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementBase_C, bDebugPrintState) == 0x000361, "Member 'ABP_AJBPlacementBase_C::bDebugPrintState' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementBase_C, bValidPrepareTime) == 0x000362, "Member 'ABP_AJBPlacementBase_C::bValidPrepareTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementBase_C, SkillTag) == 0x000368, "Member 'ABP_AJBPlacementBase_C::SkillTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementBase_C, SerialNumber) == 0x000370, "Member 'ABP_AJBPlacementBase_C::SerialNumber' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementBase_C, bPlacedBySeparatedStand) == 0x000374, "Member 'ABP_AJBPlacementBase_C::bPlacedBySeparatedStand' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementBase_C, bClearingOnCritical) == 0x000375, "Member 'ABP_AJBPlacementBase_C::bClearingOnCritical' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementBase_C, bClearingOnSkillProhibition) == 0x000376, "Member 'ABP_AJBPlacementBase_C::bClearingOnSkillProhibition' has a wrong offset!");

}

