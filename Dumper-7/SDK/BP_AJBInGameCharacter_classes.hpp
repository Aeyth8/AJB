#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameCharacter

#include "Basic.hpp"

#include "E_VoiceProcessType_structs.hpp"
#include "Engine_structs.hpp"
#include "ST_CameraParam_structs.hpp"
#include "AJB_structs.hpp"
#include "AJB_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "ST_ContinuedDamageKeepInfo_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "ST_CustomSkinMaterials_structs.hpp"
#include "ST_GrowupInfo_Processed_structs.hpp"
#include "ST_FXVisibilityInfo_structs.hpp"
#include "E_GionSpawnedSpace_structs.hpp"
#include "E_StencilDigit_structs.hpp"
#include "EPvEGameDifficulty_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBInGameCharacter.BP_AJBInGameCharacter_C
// 0x1000 (0x17B0 - 0x07B0)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_AJBInGameCharacter_C : public AAJBInGameCharacter
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x07B0(0x0008)(Transient, DuplicateTransient)
	class UBP_AJBEmoteAccompany_C*                BP_AJBEmoteAccompany;                              // 0x07B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AJBDisallowEmoteDVManager_C*        BP_AJBDisallowEmoteDVManager;                      // 0x07C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AJBKnockbackManager_C*              BP_AJBKnockbackManager;                            // 0x07C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SD;                                                // 0x07D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        EyeCenter;                                         // 0x07D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Nose;                                              // 0x07E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AJBActionLogSender_Character_C*     BP_AJBActionLogSender_Character;                   // 0x07E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AJBSpotLightComponent_C*            BP_AJBSpotLightComponent;                          // 0x07F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_ShopCompetitionUISharingCharaParam_C* BP_ShopCompetitionUISharingCharaParam;           // 0x07F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_ShopCompetitionUIFollowerComponent_C* BP_ShopCompetitionUIFollowerComponent;           // 0x0800(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      DownedCapsule;                                     // 0x0808(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AJBPairRescue_C*                    BP_AJBPairRescue;                                  // 0x0810(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AchievementTriggerSender_Character_C* BP_AchievementTriggerSender_Character;           // 0x0818(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           AkVoice;                                           // 0x0820(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_VoiceComponent_C*                   BP_VoiceComponent;                                 // 0x0828(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AJBInGameRessurectionComponent_C*   BP_AJBInGameRessurectionComponent;                 // 0x0830(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PS_DefeatedEffect;                                 // 0x0838(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AJBTutorialTriggerSender_Character_C* BP_AJBTutorialTriggerSender_Character;           // 0x0840(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   DamageAreaArms;                                    // 0x0848(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Head;                                              // 0x0850(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm;                                         // 0x0858(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterMoveEffectEvent_C*         BP_CharacterMoveEffectEvent;                       // 0x0860(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0868(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AJBInGameIndoorManageComponent_C*   BP_AJBInGameIndoorManageComponent;                 // 0x0870(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AJBInteractAction_C*                BP_AJBInteractSkill;                               // 0x0878(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AJBDamageAreaAffecter_C*            BP_AJBDamageAreaAffecter;                          // 0x0880(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x0888(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ECameraInputMode                              CameraInputMode;                                   // 0x0890(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_891[0x3];                                      // 0x0891(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TurnedRotationMinPerSecond;                        // 0x0894(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnedRotationMaxPerSecond;                        // 0x0898(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LookupRotationMinPerSecond;                        // 0x089C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LookupRotationMaxPerSecond;                        // 0x08A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Rep_HP;                                            // 0x08A4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	int32                                         Rep_AP;                                            // 0x08A8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Rep_SP;                                            // 0x08AC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         MP;                                                // 0x08B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B4[0x4];                                      // 0x08B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, struct FST_ContinuedDamageKeepInfo> ContinuedDamageMap;                // 0x08B8(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FST_CameraParam                        DesiredCameraParam;                                // 0x0908(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         CameraInputDeadRate;                               // 0x0920(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraInputSecondRate;                             // 0x0924(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HPMax;                                             // 0x0928(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         _ForSkipOwner_MP;                                  // 0x092C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         MPMax;                                             // 0x0930(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         _ForSkipOwner_MPMax;                               // 0x0934(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 StandClass;                                        // 0x0938(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SPMax;                                             // 0x0940(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         APMax;                                             // 0x0944(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DefaultAP;                                         // 0x0948(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AddMP_s_;                                          // 0x094C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsSkipMPUpdateBySkill;                            // 0x0950(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsAutoFullMP;                                      // 0x0951(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsDamageAreaIn;                                    // 0x0952(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_953[0x5];                                      // 0x0953(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  Rep_GameplayTagContainer;                          // 0x0958(0x0020)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	bool                                          bIsSkipMPUpdateNotBySkill;                         // 0x0978(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsEnableInput;                                    // 0x0979(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ECharacterBehavior                            Rep_CharacterBehavior;                             // 0x097A(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_97B[0x1];                                      // 0x097B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultMPMax;                                      // 0x097C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsEnableInputCameraOnly;                          // 0x0980(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_981[0x3];                                      // 0x0981(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AJBMaxWalkSpeed;                                   // 0x0984(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AJBMaxCrouchSpeed;                                 // 0x0988(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_98C[0x4];                                      // 0x098C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        PS_Damage_EmeraldSplash;                           // 0x0990(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnSkillGrownup;                                    // 0x0998(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnCharacterDead_Server;                            // 0x09A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         SprinkleRange_cm_;                                 // 0x09B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SprinkleMax;                                       // 0x09BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SprinkleBonus;                                     // 0x09C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C4[0x4];                                      // 0x09C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnSkillConsumed;                                   // 0x09C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnPassiveAdded;                                    // 0x09D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnPassiveRemoved;                                  // 0x09E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         AJBMaxStepHeight;                                  // 0x09F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultMaxWalkSpeed;                               // 0x09FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultMaxRunSpeed;                                // 0x0A00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultMaxCrouchSpeed;                             // 0x0A04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovementRateToWalk;                                // 0x0A08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovementRateToRun;                                 // 0x0A0C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveSpeedScale;                                    // 0x0A10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ForwardValue;                                      // 0x0A14(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RightValue;                                        // 0x0A18(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovementRate;                                      // 0x0A1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnValue;                                         // 0x0A20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LookUpValue;                                       // 0x0A24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWalkingState                                 WalkingState;                                      // 0x0A28(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A29[0x7];                                      // 0x0A29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnCameraChanged;                                   // 0x0A30(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class ABP_AJBInGamePlayerController_C*> SpectatorControllers;                             // 0x0A40(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance)
	struct FRotator                               Rep_CameraRotation;                                // 0x0A50(0x000C)(Edit, BlueprintVisible, Net, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A5C[0x4];                                      // 0x0A5C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnSkillActivated;                                  // 0x0A60(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnSkillInactivated;                                // 0x0A70(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnCharacterActiveBehaviorChanged;                  // 0x0A80(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UAnimMontage*                           PlayingEmoteMontage;                               // 0x0A90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EmoteAnimTag;                                      // 0x0A98(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EmoteVoiceTag;                                     // 0x0AA0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         LoopEmoteBlendOutTime;                             // 0x0AA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ActiveBehaviorTime;                                // 0x0AAC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LoopEmoteCanInputTime;                             // 0x0AB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLoopEmoteCanInput;                                // 0x0AB4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AB5[0x3];                                      // 0x0AB5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraInputRate;                                   // 0x0AB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraTurnScale;                                   // 0x0ABC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraLookupScale;                                 // 0x0AC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EmoteTurnScale;                                    // 0x0AC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EmoteLookupScale;                                  // 0x0AC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ListenServerRotation;                              // 0x0ACC(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         ListenServerRotationInterSpeed;                    // 0x0AD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultGravityScale;                               // 0x0ADC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentSpread;                                     // 0x0AE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpreadMin;                                         // 0x0AE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpreadMax;                                         // 0x0AE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpreadHeal;                                        // 0x0AEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpreadHealStopCount;                               // 0x0AF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSpreadHealStop;                                   // 0x0AF4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AF5[0x3];                                      // 0x0AF5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpreadMinDefault_1080p_;                           // 0x0AF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpreadMaxDefault_1080p_;                           // 0x0AFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         s_;                                                // 0x0B00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableJump;                                       // 0x0B04(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEnableSprint;                                     // 0x0B05(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ECharacterBattleType                          BattleType;                                        // 0x0B06(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B07[0x1];                                      // 0x0B07(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnAttackHit;                                       // 0x0B08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bDebugPredictionDraw;                              // 0x0B18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B19[0x7];                                      // 0x0B19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, class UClass*>      ActionSkillData;                                   // 0x0B20(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UDataTable*                             DT_ActionSkillInfo;                                // 0x0B70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 MovableStandClass;                                 // 0x0B78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bForceFireSkill;                                   // 0x0B80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ECharacterSizeType                            SizeType;                                          // 0x0B81(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B82[0x2];                                      // 0x0B82(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinTimeUntilDeathRigor_Sec_;                       // 0x0B84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxTimeUntilDeathRigor_Sec_;                       // 0x0B88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NextLandingStopTime_Sec_;                          // 0x0B8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinLandingSoundHeight_cm_;                         // 0x0B90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinLandingStopHeight_cm_;                          // 0x0B94(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxLandingStopHeight_cm_;                          // 0x0B98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinLandingStopTime_Sec_;                           // 0x0B9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxLandingStopTime_Sec_;                           // 0x0BA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LandingStopTime_ThruWindow_Sec_;                   // 0x0BA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LandingStopTimeRate;                               // 0x0BA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BAC[0x4];                                      // 0x0BAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           LandingStopMontage_BeforeLanding;                  // 0x0BB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           LandingStopMontage_AfterLanding;                   // 0x0BB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxWorldZLocationInCurrentFall_cm_;                // 0x0BC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinWorldZLocationInCurrentFall_cm_;                // 0x0BC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentWorldZ;                                     // 0x0BC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CurrentFall;                                       // 0x0BCC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          BeforeFall;                                        // 0x0BCD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BCE[0x2];                                      // 0x0BCE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InitialMeshRelativeTransform;                      // 0x0BD0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         InitialJumpZVelocity;                              // 0x0C00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C04[0x4];                                      // 0x0C04(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, float>              StatusChangeTagFloatMap;                           // 0x0C08(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TMap<struct FGameplayTag, float>              JumpSpeedScaleReferenceMap;                        // 0x0C58(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FRotator                               CameraControlRotationWhenEmoteStart;               // 0x0CA8(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIndoor;                                           // 0x0CB4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CB5[0x3];                                      // 0x0CB5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnReceiveDamage_Local;                             // 0x0CB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnGiveDamage_Local;                                // 0x0CC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnCrouch;                                          // 0x0CD8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnJump;                                            // 0x0CE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnMoveInput;                                       // 0x0CF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnControlCamera;                                   // 0x0D08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnGetItem;                                         // 0x0D18(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnPossessTargetChenged;                            // 0x0D28(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnSkillUnlocked;                                   // 0x0D38(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnHPChanged;                                       // 0x0D48(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         MoveDistance;                                      // 0x0D58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorldLocation_LastDistanceCalculation;             // 0x0D5C(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSpecialSkillButton_R1_IsDown;                     // 0x0D68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bBaseSkillButton_R2_IsDown;                        // 0x0D69(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bBasicSkillButton_L2_IsDown;                       // 0x0D6A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUltimateSkillButton_L1_IsDown;                    // 0x0D6B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInteractButton_X_IsDown;                          // 0x0D6C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          L3ButtonIsDown;                                    // 0x0D6D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D6E[0x2];                                      // 0x0D6E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBP_AJBSkillBase_C*>             AllSkillComponents;                                // 0x0D70(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         MPReplicationFrequency;                            // 0x0D80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Cache_SpringArmPos;                                // 0x0D84(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Cache_SocketOffset;                                // 0x0D90(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Cache_TargetArmLength;                             // 0x0D9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           SE_DamageAreaOutside;                              // 0x0DA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           SE_DamageAreaInside;                               // 0x0DA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageAreaOutsideLength_cm_;                       // 0x0DB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageAreaInsideLength_cm_;                        // 0x0DB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShowDamageAreaRTPCValue;                          // 0x0DB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DB9[0x7];                                      // 0x0DB9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnSkillMissed_Local;                               // 0x0DC0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         ElapsedTimeFromLastDamageAreaGionDisplay;          // 0x0DD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageAreaGionDisplayInterval;                     // 0x0DD4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDuringTheWorld;                                   // 0x0DD8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DD9[0x7];                                      // 0x0DD9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnShotPossibilityChanged;                          // 0x0DE0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bPossibleShot;                                     // 0x0DF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsInvincibleDueForJustResurrection;               // 0x0DF1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bFootStepsMute;                                    // 0x0DF2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEnableSimpleDeathCamera;                          // 0x0DF3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         DeathCameraInterp;                                 // 0x0DF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  StatusGameplayTagContainer;                        // 0x0DF8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           RetireParticleTag;                                 // 0x0E18(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	EWalkingState                                 _ForSkipOwner_WalkingState;                        // 0x0E20(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E21[0x7];                                      // 0x0E21(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnRessurect;                                       // 0x0E28(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnEmote;                                           // 0x0E38(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         CurrentRTPC_OutsideDamageArea;                     // 0x0E48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentRTPC_InsideDamageArea;                      // 0x0E4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnKill_Local;                                      // 0x0E50(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnDie_Local;                                       // 0x0E60(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnSkillGiveHeadShot_Local;                         // 0x0E70(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnSkillBlocked_Local;                              // 0x0E80(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bDisableDamage;                                    // 0x0E90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDisablePassive;                                   // 0x0E91(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDisableAreadamage;                                // 0x0E92(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E93[0x1];                                      // 0x0E93(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BeforeLandingMontageAnimSeqLength;                 // 0x0E94(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AfterLandingMontageAnimSeqLength;                  // 0x0E98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HealingMPSpeedScale;                               // 0x0E9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentResumeTimeToRecoverMP;                      // 0x0EA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Defence___;                                        // 0x0EA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnReceiveDamage_Server;                            // 0x0EA8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bIndoorNotCeilingHeight;                           // 0x0EB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EB9[0x3];                                      // 0x0EB9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Attack___;                                         // 0x0EBC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UAnimMontage*>                   DisablePPBPMontage;                                // 0x0EC0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	UMulticastDelegateProperty_                   OnOtherGrowup;                                     // 0x0ED0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         InputShowEmoteSelectTime;                          // 0x0EE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EE4[0x4];                                      // 0x0EE4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ShowEmoteSelectTimerHandle;                        // 0x0EE8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	float                                         InputHideEmoteSelectTime;                          // 0x0EF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackScale_NPC_;                                  // 0x0EF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAJBCharacterInfo                      CharacterInfo;                                     // 0x0EF8(0x00E8)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USkeletalMeshComponent*>         Attachments;                                       // 0x0FE0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          bHasBecomeCriticalState;                           // 0x0FF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FF1[0x3];                                      // 0x0FF1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CriticalMoveSpeedScale;                            // 0x0FF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CriticalLookupScale;                               // 0x0FF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CriticalTurnScale;                                 // 0x0FFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BehaviorElapsedTime_Server_;                       // 0x1000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CriticalTime;                                      // 0x1004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rep_CriticalElapsedTime;                           // 0x1008(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_100C[0x4];                                     // 0x100C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Reserved_DamageCauser_Server_;                     // 0x1010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Reserved_DamageType_Server_;                       // 0x1018(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnCritical_Local;                                  // 0x1020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnDown_Local;                                      // 0x1030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnRevive_Local;                                    // 0x1040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnRescueSuccess_Local;                             // 0x1050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnPairDie_Local;                                   // 0x1060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnPairKill_Local;                                  // 0x1070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         UpdateVisibilityRadiusScale;                       // 0x1080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GenerateParticlePercentage___;                     // 0x1084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnWindowBroken_Local;                              // 0x1088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         ResumeTimeToRecoverMP;                             // 0x1098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InpossibleShotElapsedTime;                         // 0x109C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InpossibleShotTime;                                // 0x10A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10A4[0x4];                                     // 0x10A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnSkillNumUpdated;                                 // 0x10A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnSkillSucceeded_Local;                            // 0x10B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnSkillEffectiveTimeDetermined_Local;              // 0x10C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         Reserved_SerialNumber_Server_;                     // 0x10D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReservedAttackDistance_Server_;                    // 0x10DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         ReservedKilledCharacterId_Server_;                 // 0x10E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Reserved_WithSeparatedStandAttack_Server_;         // 0x10E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Reserved_HitEnemysSeparatedStand_Server_;          // 0x10E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10E3[0x1];                                     // 0x10E3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Reserved_DeadPlayerID_Server_;                     // 0x10E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDashInputMode                                DashInputMode;                                     // 0x10E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10E9[0x3];                                     // 0x10E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Deprecated_ForwardInputAngle_Deg_;                 // 0x10EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DashInputTime_s_;                                  // 0x10F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultMaxDashSpeed;                               // 0x10F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DashInputCount_Local_;                             // 0x10F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeCountSinceLastDashInput_Local_;                // 0x10FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultMaxWalkAcceleration;                        // 0x1100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultMaxDashAcceleration;                        // 0x1104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultMaxRunAcceleration;                         // 0x1108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultMaxCrouchAcceleration;                      // 0x110C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWalkingState                                 PreWalkingState_Local_;                            // 0x1110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1111[0x3];                                     // 0x1111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NecessaryDashInputCount;                           // 0x1114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bReserveDash_Local_;                               // 0x1118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1119[0x7];                                     // 0x1119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnSkillReady_Local;                                // 0x1120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         CameraSensitivityFirst;                            // 0x1130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraSensitivitySecond;                           // 0x1134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraSensitivityThird;                            // 0x1138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraSensitivityFourth;                           // 0x113C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraSensitivityFifth;                            // 0x1140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1144[0x4];                                     // 0x1144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnSkillEffectiveValueDetermined_Local;             // 0x1148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnCutDamage_Local;                                 // 0x1158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnSkillFailedToUse_Local;                          // 0x1168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnDash_Local;                                      // 0x1178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FGameplayTag                           AreaInNoDamageParticleTag;                         // 0x1188(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           AreaInNoDamageSETag;                               // 0x1190(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CriticalSETag;                                     // 0x1198(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           CriticalSEAkComponent;                             // 0x11A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CriticalTimeDecrement;                             // 0x11A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Reserved_UltimateSkillSerialNumberIfInEffect_Server_; // 0x11AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentCriticalTime;                               // 0x11B0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HealingHPPctOnRevive;                              // 0x11B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bForceCameraSencitivityFirst;                      // 0x11B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11B9[0x3];                                     // 0x11B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToRevive;                                      // 0x11BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsVanished;                                       // 0x11C0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_11C1[0x7];                                     // 0x11C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             CacheMovableStandmaterials;                        // 0x11C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FST_CustomSkinMaterials>        MovableStandmaterials;                             // 0x11D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         SkinItelateIndex;                                  // 0x11E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11EC[0x4];                                     // 0x11EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnUltimateSkillEffectStarted_Server;               // 0x11F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnUltimateSkillEffectFinished_Server;              // 0x1200(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         CurrentUltimateSkillSerialNumberIfInEffect_Server_; // 0x1210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1214[0x4];                                     // 0x1214(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnLastKill_Local;                                  // 0x1218(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bIsSidling;                                        // 0x1228(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bMovementInputExists;                              // 0x1229(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_122A[0x2];                                     // 0x122A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               MeshDefaultRelativeRotation;                       // 0x122C(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               CurrentMeshWorldRotation;                          // 0x1238(0x000C)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1244[0x4];                                     // 0x1244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, float>              SidlingFactorDurationMap;                          // 0x1248(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         TraceLengthToRevive;                               // 0x1298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ItemSPCollRadiusOnDrop;                            // 0x129C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TimerHandle_CheckLandingForStopThruSidling;        // 0x12A0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	float                                         Cache_FOV;                                         // 0x12A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputAccel;                                        // 0x12AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentInputSpeedRate;                             // 0x12B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputSpeed;                                        // 0x12B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_AJBInGamePlayerController_C*> WatcherControllers;                               // 0x12B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class UMaterialInstanceDynamic*>       DMI_CharacterMesh;                                 // 0x12C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          bIsNPC;                                            // 0x12D8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_12D9[0x7];                                     // 0x12D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnKill_All;                                        // 0x12E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnReceiveDamage_All;                               // 0x12F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         KillCount_Server;                                  // 0x1300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CameraSensitivity_NPC_;                            // 0x1304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FallingSecSinceDeath_Server_;                      // 0x1308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LastFallingSinceDeath_Server_;                     // 0x130C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_130D[0x3];                                     // 0x130D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FallingStateChangeNumSinceDeath_Server_;           // 0x1310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FallingStateChangeNumSinceDeathThreshold;          // 0x1314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FallingSecSinceDeathThreshold;                     // 0x1318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldCheckLandingStop;                           // 0x131C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Cache_SpringArmDoCollisionTest;                    // 0x131D(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Cache_Visibility;                                  // 0x131E(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_131F[0x1];                                     // 0x131F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_GrowupInfo_Processed               GrowupParam;                                       // 0x1320(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UCurveFloat*                            CV_CameraInputDualZoneFirst;                       // 0x1348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            CV_CameraInputDualZoneSecond;                      // 0x1350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnAddAP_Server;                                    // 0x1358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnAddHP_Server;                                    // 0x1368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnAddSP_Server;                                    // 0x1378(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FRotator                               CurrentCameraRotationForReset;                     // 0x1388(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEnableCameraRotationByController;                 // 0x1394(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAllowCameraResetProcess_Local_;                   // 0x1395(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1396[0x2];                                     // 0x1396(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraResetInterpSpeed;                            // 0x1398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraResetElapsedTimeSec;                         // 0x139C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraResetFinishTimeSec;                          // 0x13A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpringArmTargetZMargin;                            // 0x13A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultCapsuleHalfHeight;                          // 0x13A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebugSkillAnimation;                              // 0x13AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13AD[0x3];                                     // 0x13AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OpeningSequencerCameraOffsetZ;                     // 0x13B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13B4[0x4];                                     // 0x13B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnBecomeLastSurvivor_All;                          // 0x13B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bReviveReserved_Server_;                           // 0x13C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13C9[0x3];                                     // 0x13C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CriticalTimeForNPCsPair;                           // 0x13CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DashSpeedScale;                                    // 0x13D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSpecialDashAnimation;                             // 0x13D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13D5[0x3];                                     // 0x13D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnDown_All;                                        // 0x13D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FGameplayTagContainer                  ExcenptionsTagsOnRemoveConditions;                 // 0x13E8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAnimMontage*                           DebugSingleMontage;                                // 0x1408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DebugSingleEmoteVoiceID;                           // 0x1410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebugPlaySingleEmote;                             // 0x1414(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1415[0x3];                                     // 0x1415(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBP_AJBSupportSkillBase_C*>      AllSupportSkillComponents;                         // 0x1418(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	UMulticastDelegateProperty_                   OnSkillReady_All;                                  // 0x1428(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         MovementInterpSpeed;                               // 0x1438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSharedControllerSetupIsFinished;                  // 0x143C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsSidlingForGunnerAnimation;                      // 0x143D(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_143E[0x2];                                     // 0x143E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DownedCapsuleHalfHeightOnCritical;                 // 0x1440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1444[0x4];                                     // 0x1444(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   SkillAnimationTiming_Ready;                        // 0x1448(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   SkillAnimationTiming_Active;                       // 0x1458(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   SkillAnimationTiming_Inactive;                     // 0x1468(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bDebugSuperJump;                                   // 0x1478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1479[0x7];                                     // 0x1479(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnLongPressSkillActivated;                         // 0x1480(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnLongPressSkillInactivated;                       // 0x1490(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bInfinityRevive_Server_;                           // 0x14A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14A1[0x7];                                     // 0x14A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnChangeCharacterBehavior_Server;                  // 0x14A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnPlayRadioChat_Local;                             // 0x14B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnPlayDamageVoice_Local;                           // 0x14C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         FootstepType;                                      // 0x14D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14DC[0x4];                                     // 0x14DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnCritical_Server;                                 // 0x14E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnPassiveAddedAfterSetCauser;                      // 0x14F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         CalcedMaxLandingStopHeight;                        // 0x1500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CalcedMinLandingStopHeight;                        // 0x1504(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Rep_RemoveGravityStatusOnLandingTag;               // 0x1508(0x0008)(Edit, BlueprintVisible, Net, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Rep_bShouldRemoveGravityStatusOnLanding;           // 0x1510(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_1511[0x7];                                     // 0x1511(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Rep_RemoveGravityStatusImmediateTag;               // 0x1518(0x0008)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseSpecifiedRelativeMeshRotation;                 // 0x1520(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1521[0x3];                                     // 0x1521(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               SpecifiedRelativeMeshRotation;                     // 0x1524(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUseSocketBasedLocationOnUpdateVisibility;         // 0x1530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1531[0x7];                                     // 0x1531(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketNameToSocketBasedLocation;                   // 0x1538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DownedCapsuleHalfHeightOnDead;                     // 0x1540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bMeshAttachOnAttachedParticle;                     // 0x1544(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1545[0x3];                                     // 0x1545(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultDefence;                                    // 0x1548(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_154C[0x4];                                     // 0x154C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAJBCharacterActiveBehaviorInfo        Rep_CharacterActiveBehaviorInfo;                   // 0x1550(0x0028)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify)
	struct FGameplayTagContainer                  FlinchFactorGameplayTagContainerLocal;             // 0x1578(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAnimMontage*                           AM_Bind;                                           // 0x1598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             DT_CharacterActiveBehaviorFactorInfo;              // 0x15A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DownedCapsuleRadiusMargin;                         // 0x15A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15AC[0x4];                                     // 0x15AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             CustomMaterialList;                                // 0x15B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          bLandingsMute;                                     // 0x15C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FST_FXVisibilityInfo                   FXVisibility;                                      // 0x15C1(0x0002)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bDisableDirectDamage;                              // 0x15C3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         RunSpeedScale_NPC_;                                // 0x15C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldControlAnimationOnPreReplay;                // 0x15C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bControlAnimationOnPreReplay;                      // 0x15C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPredictionAttackHitConsiderPair;                  // 0x15CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15CB[0x5];                                     // 0x15CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnHitMultipleCloseRange;                           // 0x15D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bFemale;                                           // 0x15E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15E1[0x7];                                     // 0x15E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UActorComponent*                        Rep_AdditionalAPComponent;                         // 0x15E8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnSpawnSignalPin_Local;                            // 0x15F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnAddAAP_Server;                                   // 0x1600(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnPassiveGainedForAchievement;                     // 0x1610(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FST_FXVisibilityInfo                   PrevFXVisibility;                                  // 0x1620(0x0002)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	uint8                                         Pad_1622[0x2];                                     // 0x1622(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraInterpSpeedXY;                               // 0x1624(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultMaxFlyingAcceleration;                      // 0x1628(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsFlyingMode;                                     // 0x162C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EAJBWindowAccessType                          WindowAccessType;                                  // 0x162D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_162E[0x2];                                     // 0x162E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OffsetTopOfHead;                                   // 0x1630(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AJBWalkableFloorAngle;                             // 0x1634(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionChannel                             Cache_ProbeChannel;                                // 0x1638(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1639[0x7];                                     // 0x1639(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnChangeWalkingState_All;                          // 0x1640(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bControlAnimationOnLastSurvivorDirectionCut3;      // 0x1650(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bControlAnimationOnBeginDirection;                 // 0x1651(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShouldControlAnimationOnLastSurvivorDirectionCut3; // 0x1652(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShouldControlAnimationOnBeginDirection;           // 0x1653(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bEnableEasyOperation;                              // 0x1654(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1655[0x3];                                     // 0x1655(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         YawInputValueOnEasyOperation;                      // 0x1658(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         YawInterpSpeedOnEasyOperation;                     // 0x165C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         YawSpeedOnEasyOperation;                           // 0x1660(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         YawInputDeadValueOnEasyOperation;                  // 0x1664(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetYawInputValueOnEasyOperation;                // 0x1668(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         YawSpeedIndoorOnEasyOperation;                     // 0x166C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableUpdateCriticalTimeServer;                   // 0x1670(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1671[0x7];                                     // 0x1671(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CF_EeasyOperation_Movement;                        // 0x1678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            CF_EeasyOperation_Camera;                          // 0x1680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraSpeedScaleonEasyOperation;                   // 0x1688(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetCameraSpeedScaleonEasyOperation;             // 0x168C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            CF_ResetCameraPitchTarget;                         // 0x1690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveInputResetCameraPitch;                         // 0x1698(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotateSpeedResetCameraPitch;                       // 0x169C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ResetCameraPitchMin;                               // 0x16A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ResetCameraPitchMax;                               // 0x16A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldAimDrag;                                    // 0x16A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16A9[0x3];                                     // 0x16A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AimDragDistance;                                   // 0x16AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimDragRadius;                                     // 0x16B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AddYawInputByEasyOperation;                        // 0x16B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OverrideDefaultAP;                                 // 0x16B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PossibleGetItem;                                   // 0x16BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16BD[0x3];                                     // 0x16BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EndureRestoreHP;                                   // 0x16C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsVampire;                                         // 0x16C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16C5[0x3];                                     // 0x16C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CalcedMinLandingStopTime;                          // 0x16C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CalcedMaxLandingStopTime;                          // 0x16CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultBeforeLandingMontageAnimSeqLength;          // 0x16D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16D4[0x4];                                     // 0x16D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnJumpAll;                                         // 0x16D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bCallMCJumpAll;                                    // 0x16E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16E9[0x7];                                     // 0x16E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   SkillAnimationTrigger_Cancel;                      // 0x16F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   SkillAnimationTrigger_Finish;                      // 0x1700(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         HorizonalMoveAmount;                               // 0x1710(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HorizonalMoveMin;                                  // 0x1714(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HorizonalMoveMax;                                  // 0x1718(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VerticalMoveAmount;                                // 0x171C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VerticalMoveMin;                                   // 0x1720(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VerticalMoveMax;                                   // 0x1724(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSettingsBothEyes;                                 // 0x1728(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1729[0x3];                                     // 0x1729(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HorizonalMoveMinR;                                 // 0x172C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HorizonalMoveMaxR;                                 // 0x1730(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VerticalMoveMinR;                                  // 0x1734(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VerticalMoveMaxR;                                  // 0x1738(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HorizonalMoveMinL;                                 // 0x173C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HorizonalMoveMaxL;                                 // 0x1740(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VerticalMoveMinL;                                  // 0x1744(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VerticalMoveMaxL;                                  // 0x1748(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDelayedSpecialDeath;                             // 0x174C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	uint8                                         Pad_174D[0x3];                                     // 0x174D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         KnockbackRate;                                     // 0x1750(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDying;                                           // 0x1754(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	uint8                                         Pad_1755[0x3];                                     // 0x1755(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ConsumeMPRate;                                     // 0x1758(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SPLocal;                                           // 0x175C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StandAttackRate;                                   // 0x1760(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIgnoreSprinkleServer;                             // 0x1764(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsEnabledMaxSpeedOverride;                         // 0x1765(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	uint8                                         Pad_1766[0x2];                                     // 0x1766(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverriddenMaxSpeed;                                // 0x1768(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          IsEnabledMaxAccelerationOverride;                  // 0x176C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	uint8                                         Pad_176D[0x3];                                     // 0x176D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverriddenMaxAcceleration;                         // 0x1770(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          IsEnabledWalkingStateOverride;                     // 0x1774(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	uint8                                         Pad_1775[0x3];                                     // 0x1775(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           AM_DeadStartOnDowned;                              // 0x1778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           AM_DeadStart;                                      // 0x1780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CloseRangeAttackRange;                             // 0x1788(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeToReviveOnTimeStop;                            // 0x178C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnRewindBitesTheDust_Server;                       // 0x1790(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         Rep_CollectedMatchingPlayerIndex;                  // 0x17A0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Rep_CollectingMatchingPlayerIndex;                 // 0x17A4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBInGameCharacter(int32 EntryPoint);
	void OnTimer_SyncAnimationParams();
	void ROS_SyncAnimationParams(bool bIsSidling_0, float Z__Yaw_, bool bIsDidlingForGunnerAnimation);
	void MC_SyncAnimationParams(bool bIsSidling_0, float Z__Yaw_, bool bIsDidlingForGunnerAnimation);
	void OnBegin_Gameplay(const struct FGameplayTag& PrevState);
	void ROS_OnBeginGameplay();
	void MC_OnBegin_Gameplay();
	void SpawnGamePlayParticle();
	void ReplicateMP();
	void ROS_ReplicateMP(float MP_0);
	void OnStandbyEnded(const struct FGameplayTag& NextState);
	void OnBeginResult(const struct FGameplayTag& PrevState);
	void SkillActivatedCalled(class UBP_AJBSkillBase_C* ActivatedSkill);
	void SkillInactivatedCalled(class UBP_AJBSkillBase_C* InactivatedSkill);
	void SkillReadyCalled(class UBP_AJBSkillBase_C* ReadySkill);
	void LongPressSkillActivatedCalled(class UBP_AJBLongPressInteract_C* LongPressInteract);
	void LongPressSkillInactivatedCalled(class UBP_AJBLongPressInteract_C* LongPressInteract);
	void OnAreaDamageCalled(int32 Damage);
	void OnDamageAreaInCalled();
	void OnDamageAreaOutCalled();
	void OnDamageAreaVanishCalled();
	void ROS_SpawnRestorableSignalPin(const struct FVector& Location, const struct FGameplayTag& PinTypeTag, bool bIsRemove, bool bWithSound);
	void MC_SpawnRestorableSignalPin(const struct FVector& Location, const struct FGameplayTag& PinTypeTag, bool bIsRemove, bool bWithSound);
	void MC_EyeMove(const struct FVector& TargetLocation, const struct FGameplayTag& SETag);
	void ROS_EyeMove(const struct FVector& TargetLocation, const struct FGameplayTag& SETag);
	void EyeMove(const struct FVector& TargetLocation, bool bSyncOtherEnv, const struct FGameplayTag& SETagSelf, const struct FGameplayTag& SETagOther);
	void MC_Jumped();
	void MC_OnGetItem(const struct FGameplayTag& SETag);
	void SprinkleItems(class UClass* ItemClass, int32 SprinkleCount);
	void OnBeginLastSurvivorSceneCut4All();
	void OnBeginLastSurvivorSceneCut3All();
	void OnGivePassiveSkillServer(class UObject* HitTarget, const struct FGameplayTag& Tag, class UObject* Causer, const struct FGameplayTag& CauserType, int32 SerialNumber);
	void ROC_SpawnSignalPin(const struct FVector& Location, const struct FGameplayTag& PinTypeTag, bool bIsRemove, bool bWithSound);
	void ROS_SpawnSignalPin(const struct FVector& Location, const struct FGameplayTag& PinTypeTag, bool bIsRemove, bool bWithSound);
	void Request_SpawnSignalPin(const struct FVector& Location, const struct FGameplayTag& PinTypeTag, bool bIsRemove, bool bWithSound);
	void UpdateFXVisibility(const struct FST_FXVisibilityInfo& PrevFXVisibility_0);
	void EndSpecialBreakDown();
	void StartSpecialBreakDown();
	void MC_AddGravityStatusImmediate(const struct FGameplayTag& GravityScaleTag, float GravityScale);
	void ROS_AddGravityStatusImmediate(const struct FGameplayTag& GravityScaleTag, float GravityScale);
	void AddGravityStatusImmediate_Local(const struct FGameplayTag& GravityScaleTag, float GravityScale);
	void RemoveGravityStatusOnLanding_Server();
	void RemoveGravityStatusImmediateCore(const struct FGameplayTag& Tag);
	void RemoveGravityStatusImmediateReadyCore();
	void RemoveGravityStatusOnLandingCore();
	void ReserveRemoveGravityStatusOnLandingCore(const struct FGameplayTag& Tag);
	void ROS_RemoveGravityStatusImmediateReady();
	void RemoveGravityStatusImmediateReady_Local();
	void ROS_RemoveGravityStatusImmediate(const struct FGameplayTag& Tag);
	void RemoveGravityStatusImmediate_Local(const struct FGameplayTag& Tag);
	void ROS_RemoveGravityStatusOnLanding();
	void ROS_ReserveRemoveGravityStatusOnLanding(const struct FGameplayTag& Tag);
	void ReserveRemoveGravityStatusOnLanding_Local(const struct FGameplayTag& Tag);
	void RemoveGravityStatusOnLanding_Local();
	void ReceiveDestroyed();
	void OnRep_PairCharacter();
	void TryToShareMatchingPlayerIndexWithStand(int32 MatchingPlayerIndex_0);
	void ROC_DebugChangeSuperJump(bool bEnable);
	void ROS_DebugChangeSuperJump(bool bEnable);
	void ROS_DebugChangeCollisionEnable(bool bEnable);
	void ChangeRelatedMeshStencilValueByDigit(E_StencilDigit DigitToChange, bool bFlag, bool bAlsoChangeRelatedActors);
	void ChangeSkin();
	void CleanUp(bool bShouldDestroy);
	void OnPlayerControllerDestroyed();
	void OnDamageAreaVanish();
	void MC_DebugChangeSkillAnimation(bool bDebugSkillAnimation_0);
	void ROS_DebugChangeSkillAnimation(bool bDebugSkillAnimation_0);
	void DebugChangeSkillAnimation_Local(bool bSkillAnimation);
	void MC_EmoteWithoutPose(const int32 PositionNo);
	void ROS_EmoteWithoutPose(const int32 PositionNo);
	void TryToPerformEmotePose(const int32 PositionNo);
	void ResetCameraPitch();
	void TryToSpeakEmoteVoice(const int32 PositionNo);
	void RequestLandingEffect(bool bLandingStop, const struct FVector& WorldLocation);
	void SetLandingStopEnabled(bool bEnable, bool bResetRecording);
	void CancelLandingStop();
	void OnStartTrainingEndGameConfirm();
	void PreInitializeComponentsBP();
	void StartCheckLandingForStoppingThruSidling();
	void CheckLandingForStoppingThruSidling();
	void ResetRecordForLanding();
	void MC_RequestLandingEffect(const struct FGameplayTag& EffectType, bool bLandingStop, const struct FVector& WorldLocation);
	void ROS_RequestLandingEffect(const struct FGameplayTag& EffectType, bool bLandingStop, const struct FVector& WorldLocation);
	void ROC_OnSkillEffectiveTimeDetermined(const struct FGameplayTag& SkillTag, float EffectiveTimeSec);
	void ROC_OnSkillSucceeded(const struct FGameplayTag& SkillTag);
	void ReserveChangingNormalWalkingMode(const struct FGameplayTag& FactorTag, float RemainingDurationSec);
	void ChangeNormalWalkingMode(const struct FGameplayTag& FactorTag);
	void ChangeSidlingMode(const struct FGameplayTag& FactorTag, float DurationSec);
	void OnSkillEffectFinished();
	void OnSkillEffectStarted(int32 SerialNumber);
	void OnRep_MatchingPlayerIndex();
	void ROC_OnSpectated();
	void Request_StickedMarker(const struct FVector2D& NormalizedPosition, const struct FGameplayTag& PinTypeTag);
	void ROC_StickedPairMarker(const struct FVector2D& NormalizedPosition, const struct FGameplayTag& PinTypeTag);
	void ROS_StickedMarker(const struct FVector2D& NormalizedPosition, const struct FGameplayTag& PinTypeTag);
	void SetMPMax_Local(float NewValue);
	void AddPairFollowerUI(class UWB_UI_FollowPairInfo_C* PairInfoWidget, const class FText& PairName);
	void IncreaseMPMax_Local(float IncreaseValue);
	void ROS_UpdateMPMax(float NewMPMax);
	void RequestGionOnFalldown();
	void MC_BreakWindowOnAttack(class ABP_AJBInGameWindow_C* Window);
	void MC_OnDamageActorBlocked_OnServer(class AActor* BlockedActor, const struct FVector& HitLocation, bool bIsPairAttack, class AActor* DamageOwner, bool bSeparateStandAttack);
	void ROS_OnDamageActorBlocked_OnServer(class AActor* BlockedActor, const struct FVector& HitLocation, bool bSeparateStandAttack, bool bKnockback, const struct FVector& KockbackVelocity, float KockbackIntensity, const struct FGameplayTag& CauserSkillTag);
	void ROC_OnGetItem(const struct FGameplayTag& ItemTag);
	void RestoreCameraRotation(const struct FRotator& NewRotation);
	void ROS_SetCameraRotation(const struct FRotator& NewRotation);
	void SaveCameraRotation(bool bIgnorePitch);
	void ROS_BreakWindowOnAttack(class ABP_AJBInGameWindow_C* Window);
	void PlayLandingStopMontage(float LandingStopTime_Sec_);
	void MC_PlayLandingStopMontage(float LandingStopTime_Sec_);
	void ROS_PlayLandingStopMontage(float LandingStopTime_Sec_);
	void CheckFallDistance();
	void ROS_ActiveBehaviorChangedCalled(const struct FAJBCharacterActiveBehaviorInfo& BehaviorInfo);
	void ActiveBehaviorChangedCalled(const struct FAJBCharacterActiveBehaviorInfo& BehaviorInfo);
	void ROS_GivePassiveSkill(class UObject* HitTarget, const struct FGameplayTag& Tag, class UObject* Causer, const struct FGameplayTag& CauserType, int32 SerialNumber);
	void GivePassiveSkill(class UObject* HitTarget, class UAJBInGameSkillComponent* Causer, const struct FGameplayTag& CauserType, int32 SerialNumber);
	void ReceiveBeginPlay();
	void CharacterSetup();
	void OnJumped();
	void TryCrouch();
	void TryUncrouch();
	void Emote(int32 SetPositionNo);
	void K2_OnEndViewTarget(class APlayerController* PC);
	void K2_OnBecomeViewTarget(class APlayerController* PC);
	void ServerOnly_AddSpectatorController(const TArray<class ABP_AJBInGamePlayerController_C*>& SpectatorControllers_0);
	void OnChangeWalkingState(EWalkingState NewState);
	void ROS_ChangeWalkingState(EWalkingState NewState);
	void ChangeWalkingState(EWalkingState NewState);
	void SprinkleSP();
	void ROC_CheckGrowup(bool bIncrease, int32 StartSP, int32 EndSP);
	void OnDamageAreaOut();
	void OnDamageAreaIn();
	void OnAreaDamage(int32 Damage);
	void ReceiveTick(float DeltaSeconds);
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void PressedButtonCrouch();
	void OnPressedShoot();
	void UpdateMovementInput();
	void OnReleasedL3();
	void OnPressedL3();
	void OnReleasedEmote();
	void OnShowEmoteSelectUI();
	void ReleasedButtonInteract();
	void PressedButtonInteract();
	void NotifyTheWorldToInputEventGraph(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);
	void StopCallOnControlCameraDispatcher();
	void UpdateCameraInput();
	void StopCallOnMoveDispatcher();
	void ReleasedButton_ActiveBase();
	void PressedButton_ActiveBase();
	void ReleasedButton_ActiveSpecial();
	void PressedButton_ActiveSpecial();
	void ReleasedButton_Basic();
	void PressedButton_Basic();
	void ReleasedButton_Ultimate();
	void PressedButton_Ultimate();
	void OnReleasedR1();
	void OnReleasedR2();
	void OnReleasedL2();
	void OnReleasedL1();
	void OnPressedR2();
	void OnPressedR1();
	void OnPressedL2();
	void OnPressedL1();
	void OnPressedEmote();
	void OnReleasedInteract();
	void OnPressedInteract();
	void OnReleasedCrouch();
	void OnPressedCrouch();
	void OnReleasedJump();
	void OnPressedJump();
	void LookupRate(float Value);
	void TurnRate(float Value);
	void MoveRight(float Value);
	void MoveForward(float Value);
	void DebugChangeForceFireSkillCore(bool bEnable);
	void MC_DebugChangeForceFireSkill(bool bEnable);
	void ROS_DebugChangeForceFireSkill(bool bEnable);
	void DebugChangeForceFireSkill(bool bEnable);
	void OnDebugMakePair(class ABP_AJBInGameCharacter_C* OtherCharacterBP);
	void ROS_APHeal(int32 Value);
	void ROS_DebugCPMax();
	void DebugCPMax();
	void ROC_PrintString(const class FString& inString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration);
	void DebugKillPair();
	void ROS_DebugMakePair(class ABP_AJBInGameCharacter_C* OtherCharacterBP);
	void DebugMakePair();
	void Resurrection_Impl(float InvincibleTimeSec, bool bAPMax, bool bRecoveryUltimateUseCount);
	void ROS_DebugAPMax();
	void DebugAPMax();
	void ResurrectionFromServer(float InvincibleTimeSec);
	void ROS_DebugSPMax();
	void DebugSPMax();
	void ROS_Heal(int32 Value);
	void ROS_CharacterRessurection(float InvincibleTimeSec);
	void Resurrection(float InvincibleTimeSec);
	void ChangeMovementModeOnTimeStop(bool bEnable, bool bOperatorIsEmpty);
	void OnNotSpectated_Local();
	void OnSpectated_Local();
	void MC_OnReceiveDamage_All();
	void OnNoDamageChanged(class ABP_AJBInGameCharacter_C* OperaatorCharacter, bool bNewFlag, const struct FGameplayTag& EffectTag, const struct FGameplayTag& SETag);
	void ROC_CutDamage(int32 CutDamage);
	void ROC_GiveDamage(int32 Damage, const struct FGameplayTag& DamageType, class AActor* DamageReceiver, bool RemainHP, bool DamageIsCut, int32 SerialNumber, bool DamageReceiverIsPlayer, bool bWithSeparatedStandAttack, bool bHitEnemysSeparateStand, bool bSelfDamage, bool IsEndured);
	void ROC_ReceiveDamage(int32 Damage, const struct FGameplayTag& DamageType, class AActor* DamageCauser, bool RemainHP, bool bDamageIsCutByStatus, bool bDamageIsCutByAAP, bool IsEndured);
	void AddGameplayTagWithFloat(const struct FGameplayTag& Tag, float FloatValue);
	void MC_AJBDamage(const struct FGameplayTag& DamageType, EDamagePriority DamagePriority, class AActor* DamageCauser, bool bRemainHP, bool bDamageIsCut, int32 BeforeAAP, int32 AfterAAP, const struct FAJBDamageDisplayParams& DisplayParams, const struct FAJBDamageDisplayProperty& DisplayProperty);
	void AJBDamage(class AActor* DamagedActor, int32 DamageForHPAP, int32 DamageForAAP, int32 CutDamage, const struct FGameplayTag& DamageType, int32 SerialNumber, EDamagePriority DamagePriority, float AttackDistance, class AActor* DamageCauser, bool WithSeparatedStandAttack, bool HitEnemysSeparatedStand, bool bPenetrateAP, bool bNotUseCollision, bool IsEndured, const struct FAJBDamageDisplayParams& DamageDisplayParams, const struct FAJBDamageDisplayProperty& DamageDisplayProperty);
	void OnAreaOut(class ABP_AJBInGameCharacter_C* OperatorCharacter, const struct FGameplayTag& EffectTag, const struct FGameplayTag& SETag);
	void OnAreaIn(class ABP_AJBInGameCharacter_C* OperatorCharacter, const struct FGameplayTag& EffectTag, const struct FGameplayTag& SETag, bool bNoDamage);
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);
	void RemoveGameplayTag(const struct FGameplayTag& Tag);
	void AddGameplayTag(const struct FGameplayTag& Tag, class UObject* Operator, class UObject* Target, const struct FGameplayTag& CauserType, int32 SerialNumber);
	void ChangeInfinityRevive(bool bInfinityRevive);
	void ROS_ChangeInfinityRevive(bool bInfinityRevive);
	void EmoteTick(float DeltaSeconds);
	void DefaultTick(float DeltaSeconds);
	void StateTick(float DeltaSeconds);
	void ResetRessurectionGate__Server_();
	void MC_RequestDeathEffect();
	void CharacterCriticalness_TheMoment();
	void CharacterCriticalness_OnState();
	void ROC_CharacterActive();
	void TryToVanishDueToBeInDamageArea();
	void ROC_OnRescueSuccess();
	void ROC_OnRevive(class AActor* Rescuer);
	void MC_CharacterActive();
	void CharacterActive();
	void MC_CharacterCriticalness();
	void MC_CharacterCriticalnessToActive();
	void CharacterCriticalnessToActive(class AActor* Rescuer);
	void CharacterCriticalness();
	void CharacterActiveToCriticalness_TheMoment();
	void CharacterActiveToCriticalness_OnState();
	void MC_OnDown(int32 DownedMachingPlayerIndex);
	void ROC_Critical();
	void CharacterActiveToCriticalness(class AActor* ReservedDamageCauser, const struct FGameplayTag& ReservedDamageType, int32 Reserved_SerialNumber, float Reserved_AttackDistance, bool Reserved_WithSeparatedStandAttack, bool Reserved_HitEnemyesSeparatedStand, int32 Reserved_UltimateSkillSerialNumberIfInEffect);
	void MC_CharacterActiveToCriticalness();
	void MC_CharacterRessurection();
	void CharacterRessurection_OnServer(float InvincibleTimeSec);
	void MC_OnKill_All(uint8 KillCount, int32 DeadPlayerId, bool bIsLastDefeated);
	void CharacterDead_OnState(const struct FGameplayTag& DamageType);
	void CharacterDead_TheMoment(bool bWasCriticalState);
	void ROS_LastKill(const struct FGameplayTag& SkillTag);
	void SetBattleGameRankByPair_Server_(int32 Rank, int32 RankWithoutCPU);
	void ROC_PairKill();
	void ROC_PairDie();
	void ROC_Die(bool bIsLastDefeated, bool bDiedOfKillZ);
	void ROC_Kill(const struct FGameplayTag& SkillTag, int32 SerialNumber, float AttackDistance, uint8 KilledCharacterId, bool bWithSeparatedStandAttack, bool bHitEnemysSeparatedStand, bool bFirstBlood, int32 UltimateSkillSerialNumberIfInEffect, float ElapsedTime, int32 DeadPlayerId, bool bIsLastDefeated, bool bPlayerKill, bool bSpecialKill, bool bSelfKill);
	void CharacterDeadByPair_Server_();
	void MC_CharacterDead_Start(bool bWasCriticalState, const struct FGameplayTag& DamageType, bool IsDelayedSpecialDeath_0);
	void CharacterDead_Server_(class AActor* DamageCauser, const struct FGameplayTag& DamageType, int32 SerialNumber, float AttackDistance, uint8 KilledCharacterId, bool WithSeparatedStandAttack, bool HitEnemysSeparatedStand, int32 UltimateSkillSerialNumberIfInEffect, bool WasCriticalState, int32 DeadPlayerId, bool IsDelayedSpecialDeath_0);
	void ROC_CancelAllSkill();
	void MC_OnBecomeLastSurvivor();
	void ROS_NotifyBecomingLastSurvivor();
	void NotifyBecomingLastSurvivor_Local();
	void OnLostSupportSkillServer();
	void ROS_LostSupportSkill();
	void OnGainSupportSkillServer();
	void ROS_GainSupportSkill();
	void OnAreaDamageDisabled();
	void OnPassiveDisabled();
	void OnDamageDisabled();
	void DamageOverlapped(class AActor* DamageCauser, const struct FVector& HitLocation, bool bPenetrating, const struct FGameplayTag& FactorTag, bool bInvalidDamage);
	void OnInteractionBlocked(class AActor* InteractingActor);
	void OnSucceededLongPress_Local();
	void OnROSInteract(class AActor* InteractingActor, bool ServerIsInteractingPlayer);
	void OnInteract(class AActor* InteractActor);
	void OnCompleted_1D2006934D73B15E9387FCA5BFB6EE14(class FName NotifyName);
	void OnBlendOut_1D2006934D73B15E9387FCA5BFB6EE14(class FName NotifyName);
	void OnInterrupted_1D2006934D73B15E9387FCA5BFB6EE14(class FName NotifyName);
	void OnNotifyBegin_1D2006934D73B15E9387FCA5BFB6EE14(class FName NotifyName);
	void OnNotifyEnd_1D2006934D73B15E9387FCA5BFB6EE14(class FName NotifyName);
	void OnCompleted_7329B9C84390F493C487659A2D910B3A(class FName NotifyName);
	void OnBlendOut_7329B9C84390F493C487659A2D910B3A(class FName NotifyName);
	void OnInterrupted_7329B9C84390F493C487659A2D910B3A(class FName NotifyName);
	void OnNotifyBegin_7329B9C84390F493C487659A2D910B3A(class FName NotifyName);
	void OnNotifyEnd_7329B9C84390F493C487659A2D910B3A(class FName NotifyName);
	void OnCompleted_2A9A5691450DFC31DE5258B519FF6217(class FName NotifyName);
	void OnBlendOut_2A9A5691450DFC31DE5258B519FF6217(class FName NotifyName);
	void OnInterrupted_2A9A5691450DFC31DE5258B519FF6217(class FName NotifyName);
	void OnNotifyBegin_2A9A5691450DFC31DE5258B519FF6217(class FName NotifyName);
	void OnNotifyEnd_2A9A5691450DFC31DE5258B519FF6217(class FName NotifyName);
	void OnLoaded_F42AA0D940D51C3CD3F14D913272DE1D(class UObject* Loaded);
	void OnLoaded_9A53E0754B58E302E51B8792625D1F8A(class UObject* Loaded);
	void OnCompleted_0180EE26470F48C6FDC74BAC6CC6BFDB(class FName NotifyName);
	void OnBlendOut_0180EE26470F48C6FDC74BAC6CC6BFDB(class FName NotifyName);
	void OnInterrupted_0180EE26470F48C6FDC74BAC6CC6BFDB(class FName NotifyName);
	void OnNotifyBegin_0180EE26470F48C6FDC74BAC6CC6BFDB(class FName NotifyName);
	void OnNotifyEnd_0180EE26470F48C6FDC74BAC6CC6BFDB(class FName NotifyName);
	void OnLoaded_9A53E0754B58E302E51B8792F24504BA(class UObject* Loaded);
	void OnLoaded_F42AA0D940D51C3CD3F14D91042170F3(class UObject* Loaded);
	void UserConstructionScript();
	void InitializeStatus();
	void ChangeCameraType();
	void UpdateCameraParam(float DeltaTime);
	void Heal(int32 Value, int32 HealLimit, bool* bSuccess, int32* HealValue);
	void AddSP(int32 Value);
	void UseSP(int32 Value);
	void UpdateMP(float DeltaTime);
	void IsSatisfiedMP(float ConsumptionMP, bool* IsSatisfied);
	void UseMP(float ConsumptionMP);
	void IsRemainMP(bool* IsRemain);
	void DebugAutoFullMP_On();
	void DebugAutoFullMP_Off();
	void GetCapsuleHalfHeight(float* CapsuleHalfHeight);
	void GetCapsuleRadius(float* CapsuleRadius);
	void FindTraceLocationsFromCamera(float TraceDistance, struct FVector* TraceStartLocation, struct FVector* TraceEndLocation);
	void ChangeInputEnable(bool Enable);
	void IsAlive(bool bIncludeGoingToRessurect, bool bIncludeCriticalness, bool* IsAlive_0);
	void CheckEnableInput(bool* InputEnable);
	void SetCharacterCollisionEnabled(ECollisionEnabled CollisionEnabled);
	void CheckAnySkillActive(class UClass* IgnoreSkillClass, bool bIncludeReady, bool bIncludePreview, bool* IsActive);
	void CalcMaxSP(int32* MaxSP);
	void GetGrowupParam(struct FST_GrowupInfo_Processed* GrowupParam_0);
	void GetAchievedGrowup(int32 CurrentSP, bool bRewind, struct FGameplayTag* Growup, float* Value, float* TotalValue);
	void ConsumeGrowup(const struct FGameplayTag& Growup, float Value, float TotalValue, const class FText& SpecifiedText, bool bRewind, int32 CurrentSP);
	float GetDefaultMaxSpeed();
	void CharacterDamage_Server_(int32 DamageForHPAP, int32 DamageForAAP, class AActor* DamageCauser, const struct FGameplayTag& DamageType, int32 SerialNumber, float AttackDistance, bool WithSeparatedStandAttack, bool HitEnemysSeparatedStand, bool bPenetrateAP, int32* EffectiveDamage, ECharacterBehavior* CharacterBehavior, bool* bDamageIsCutByAAP, int32* BeforeAAP, int32* AfterAAP);
	void ForceCancelSkills_Deprecated(bool bRequireStandSkillOnly, TArray<class UClass*>& IgnoreSkillClass);
	void IsRemainHP(int32 Damage, bool PenetrateAP, bool* IsRemain);
	void CheckSkillActive(class UClass* SkillClass, bool bIncludeReady, bool bIncludePreview, bool* IsActive);
	void SystemEnable(bool Enable);
	void ChangeEnableSpringArm(bool bEnable);
	void BeginCondition(const struct FGameplayTag& Condition, class UObject* Causer, bool bTriggeredByStand, const struct FGameplayTag& CauserType, int32 SerialNumber, class UObject* PropagationSource);
	void EndCondition(const struct FGameplayTag& Condition);
	void UpdateMovement();
	void GetMaxMoveSpeed(float* MaxSpeed);
	void CheckRunInput(bool* bRunInput);
	void CanWalk(bool* bIsWalk);
	void UpdateMaxSpeed();
	void ResetCameraType();
	void CalcCameraParam(TArray<struct FST_CameraParam>& InParams, struct FST_CameraParam* ResultParam);
	void CalcCameraOffset(TArray<struct FST_CameraParam>& InParams, struct FVector* CameraOffset);
	void CalcCameraTargetLength(TArray<struct FST_CameraParam>& InParams, float* CameraLength);
	void CalcCameraInterpSpeed(TArray<struct FST_CameraParam>& InParams, float* CameraInterpSpeed);
	void DebugPrintCameraParam(float Duration);
	void SkillActivated(class UBP_AJBSkillBase_C* ActivatedSkill);
	void SkillInactivated(class UBP_AJBSkillBase_C* InactivatedSkill);
	void GetBasicSkill(class UBP_AJBSkillBase_C** BasicSkill);
	void ChangeViewMode(bool bEnable, bool bResetInputValue, const struct FGameplayTag& FactorTag);
	void CheckEnableInputCameraOnly(bool* bReturnValue);
	void ChangeActiveBehavior(ECharacterActiveBehavior NextBehavior, const struct FGameplayTag& FactorTag, bool bMainCharacter);
	void ActiveBehaviorChanged(const struct FAJBCharacterActiveBehaviorInfo& BehaviorInfo);
	void StopMontage(float InBlendOutTime, const class UAnimMontage* Montage);
	void SetCameraLookupSpeedScale(float LookUpScale);
	void CheckAnyActiveSkillActive(class UClass* IgnoreSkillClass, bool bIncludeReady, class UClass* IgnoredModeClass, bool* bActive);
	void CheckActiveBehavior(ECharacterActiveBehavior Behavior, bool* bRetValue);
	void TryCancelEmote(bool bForce);
	void ForceInactiveBasicSkill();
	void SetSystemEnable(bool bEnable, bool bCollision, bool bGravity, bool bSpringArm, bool bMovement);
	void ResetSystemEnable(bool bRestore);
	void ChangeSystemEnable(bool bCollision, bool bGravity, bool bSpringArm, bool bMovement, bool bRestore);
	void ChangeSystemDisable(bool bCollision, bool bGravity, bool bSpringArm, bool bMovement, bool bRestore);
	void CancelPosture(bool bShouldInactiveBasicSkill);
	void LowerSpread(float Spread, float HealStopTime);
	void RaiseSpread(float Value);
	void UpdateSpread(float DeltaSeconds);
	void ChangeSpreadParam(float SpreadMin_1080p_, float SpreadMax_1080p_, float s__0);
	void ResetSpreadParam();
	void IsAim(bool* bAim);
	void ChangeJumpEnable(bool bEnable);
	void ChangeSprintEnable(bool bEnable);
	void GetMaxCrouchedSpeed(float* MaxCrouchedSpeed);
	void PredictionAttackHit(bool* bHit);
	void ConsumeDamage(int32 DamageForHPAP, int32 DamageForAAP, bool bHitEnemysSeparatedStand, bool bPenetrateAP, const struct FGameplayTag& DamageType, int32* EffectiveDamage, bool* bDamageIsCutByAAP, int32* BeforeAAP, int32* AfterAAP);
	void AddAP(int32 Value);
	void CheckLeftAP(bool* bLeftAP);
	void SetupActionSkillInfo();
	void OnPassiveSkillDeactivated(class UActorComponent* PassiveSkill);
	void TryGenerateActionSkill(class UClass* ActionSkillClass, class UBP_AJBActionBase_C** ActionSkill);
	void DebugPrintPassiveSkillNum();
	void ChangeMovementMode(bool bEnable);
	void DebugForceFireSkill_On();
	void DebugForceFireSkill_Off();
	void CheckForceFireSkill(bool* bForceFireSkill_0);
	void CheckSmallSized(bool* bSmallSized);
	void SetupSharedController();
	void GetPoliticStandAsActor(class AActor** Actor);
	void CheckStandSeparation(bool bIncludeTransition, bool* bSeparation);
	void RemoveConditions(const struct FGameplayTagContainer& Exceptions);
	void ChangeCameraBehavior(bool bEnableOnlyCameraInput, bool bResetInputValue, bool bUseControllerRotationYaw_0, const struct FGameplayTag& FactorTag);
	float TrySetNextLandingStopTime_Sec_(float Time_Sec_);
	void CheckAnyCharacterMovementSkillActive(bool* bWithCharacterMovement);
	void ResetMeshRelativeTransform(bool IgnoreCapsuleHalfHeight);
	void ChangeStatus(bool bShouldAddNewTag, const struct FGameplayTag& NewTag, float NewFloatValue);
	void ChangeJumpZVelocityWithRate(float Rate);
	void CheckAnyActiveSkillAction(bool* bFind);
	void JudgeIndoor();
	void DamageAffecterAreaIn(class ABP_AJBInGameCharacter_C* OperatorCharacter, const struct FGameplayTag& EffectTag, const struct FGameplayTag& SETag);
	void DamageAffecterAreaOut(class ABP_AJBInGameCharacter_C* OperatorCharacter, const struct FGameplayTag& EffectTag, const struct FGameplayTag& SETag);
	void CheckPossibleInteract(bool* bPossibleInteract);
	void OnRep_Rep_HP();
	void CheckAnySkillInPreview(class UClass* IgnoreSkillClass, bool* IsActive);
	void TryGetSkillComponentByType(EAJBSkillType SkillType, bool* bSuccess, class UBP_AJBSkillBase_C** SkillComponet);
	bool IsWatched(bool bExcludesWatcherCameras);
	void TryGetGrowupSkillSPByGrowupTag(struct FGameplayTag& GrowupSkillTag, bool* bSuccess, int32* SP);
	void InitializeDamageAreaSound();
	void UpdateDamageAreaSound();
	void CheckPossibleShot(bool* bPossibleShot_0);
	void UpdateShotPossibility(float Delta);
	void IsInvincibleDueForSystemReason(bool* bIsInvincible);
	void UpdateVisibilityByCameraDistance();
	void ChangeEnableSimpleDeathCamera(bool bEnable);
	void OnRep_Rep_MP_ForSpectator();
	void IsResurrectable(bool* bResult);
	void OnRep__ForSkipOwner_WalkingState();
	void SetWalkingStateOnServer(EWalkingState WalkingState_0);
	void TryToSpeakVoice(const struct FGameplayTag& VoiceTag, E_VoiceProcessType VoiceProcessType, bool bSpeakEvenIfNotAlive, bool bSpeakEvenIfDuringTheWorld, bool bSpeakEvenIfNotLocalEnv, bool bAlsoSpeakOnPairEnv, bool bIgnoreIfDuringTheWorld, bool bSpeakIfTheSameEventIsNotQueued, bool* bWillBeSpoken);
	void ChangePostProcessBlueprintEnable();
	void InitializeCameraManager();
	void ReserveBreakVoice(const struct FGameplayTag& VoiceEventTagToStop);
	void OnRep__ForSkipOwner_MPMax();
	void ForceInactivePassiveSkills_Server(bool bNegativeOnly);
	void GetFootLocation(struct FVector* Location);
	void AddMP(float RecoveryMP);
	void CalcCuttingRate(float* CuttingsRate);
	void GiveDamageFunction(class AActor* DamagedActor, int32 Damage, const struct FGameplayTag& DamageType, EDamagePriority DamagePriority, float CuttingRate);
	void GetCapsuleDiameter(float* CapsuleDiameter);
	void ChangeSealSkills(bool bEnable);
	void CheckActiveBehaviorIsEmote(bool* bRetValue);
	void CalcDamageRate(class AActor* DamagedActor, const struct FGameplayTag& DamageType, float* DamageRate);
	void IsFullHP(int32 SpecifiedHPMax, bool* bFullHP);
	void CheckActiveInteract(bool* bActiveLongPressInteract);
	void ResetActionAndCondition(const struct FGameplayTag& DamageType);
	void IsCritical(bool* IsCritical_0);
	void Revive(int32 NewHP, class AActor* Rescuer, bool* bSuccess);
	bool CharacterBehaviorMatches(bool Active, bool ActiveToCritical, bool Critical, bool CriticalToActive, bool DeathAndEnd, bool DeathButRessurect);
	void SetCameraTurnSpeedScale(float TurnScale);
	void GetPoliticInteractAction(class ABP_AJBInGameCharacter_C* OperatorCharacter, class AActor* TargetActor, float TraceLength, bool* bSuccess, class UObject** Object);
	void UpdateBehavior_Server_(float DeltaSeconds);
	void ChangeCharacterBehavior_Server_(ECharacterBehavior NewBehavior);
	void ChangeSpectatorOnDead_Server_(class AActor* DamageCauser);
	void GetGenerateParticleLocation(struct FVector* Location);
	void GetGenerateParticleRelativeLocationFromCapsuleCenter(struct FVector* RelativeLocation);
	void CalcBattleRank_OnServer(bool* IsDetermined, int32* Rank, int32* RankWithoutCPU);
	void CanEmote(struct FGameplayTagContainer* FailureFactor, struct FGameplayTagContainer* FailureSkills, bool* bCanEmote);
	bool IsOperatingSeparatedStand(bool bIncludeTransition);
	void CanDash(bool* bIsDash);
	void UpdateDashTimeCount(float DeltaSeconds);
	void GetMaxAcceleration(float* MaxAcceleration);
	void UpdateMaxAcceleration();
	void CheckMovementChange();
	void OnWalkingStateChanged(EWalkingState PrevState, EWalkingState NextState);
	void TryDash(EWalkingState PrevState, EWalkingState NextState);
	void CheckDashInput(bool* bDashInput);
	void SkillReady_Local_(class UBP_AJBSkillBase_C* ReadySkill);
	void TryCancelDash();
	void InitializeDashVariables();
	void ReserveDash();
	void CalcCameraConfigScale(float* UpDownScale, float* RightLeftScale);
	void ForceCancelSkillsNoIgnore(bool bRequireStandSkillOnly);
	void CallOnSkillFailedToUse_Local(const struct FGameplayTagContainer& FactorTags);
	void GetPoliticAreaInNoDamageSETag(const struct FGameplayTag& AffecterSideSETag, struct FGameplayTag* SETag);
	void RevivePair(class AActor* Rescuer, bool* bSuccess);
	void SetForceCameraSencitivityFirst(bool bNewFlag);
	void ApplyCharacterParameter();
	void ApplyCharacterParameterCore(class FName ContentName);
	void GetPoliticCameraParam(const struct FGameplayTag& CameraTag, struct FST_CameraParam* CameraParam, bool* bSuccess);
	void GetCharacterName(class FName* CharacterName);
	void GetCameraParameter(class FName TempFileName, struct FST_CameraParam* CameraParam);
	void GetDefaultCameraParameter(struct FST_CameraParam* CameraParam);
	void GetUltimateMaxAvailableNum(int32* Num);
	void CountUpUltimateAvailable(int32& Count, struct FGameplayTag& GroupTag, float& Value);
	void GrowupCommon(const struct FGameplayTag& Growup, float Value, float TotalValue, bool bRewind, int32 CurrentSP);
	void TryGetSupportSkillComponent(bool* bSuccess, class UBP_AJBSupportSkillBase_C** SupportSkillComponent);
	void InitializeGrowupParam();
	void AssignGrowupInfo(class UAJBParamContent* ParamContent, int32 PhaseIndex);
	void ChangeCollision(bool bDowned, bool bDied);
	void UpdateMeshRotation();
	void UpdateWalkingMode(float DeltaTime);
	void SetMaxStepHeight(float MaxStepHeight);
	void ResetMaxStepHeight();
	void ResetInputValue();
	void CheckValidSidlingModeFactor(const struct FGameplayTag& FactorTag, bool* bValid, float* Value);
	void CanRun(bool* bIsRun);
	void OnBeforeInteract(bool* bShouldInteract);
	void CheckPossibleDash(bool* bPossible);
	void OnRep_Rep_CharacterBehavior();
	void GetDownedParticleLocation(struct FVector* Location);
	void GetRelativeDownedParticleLocation(struct FVector* RelativeLocation);
	void CalcCameraFOV(TArray<struct FST_CameraParam>& InParams, float* FOV);
	void CheckFalling(bool* bFalling);
	void SetProperVisibilityForDarbysAssassinEffect();
	void IsDarbysAssassin(bool* bResult);
	void OnRep_bIsNPC();
	void GetCharaParam(struct FGameplayTag* CharaParam);
	void GetGrowupTagTotalValue(const struct FGameplayTag& GrowupTag, float* TotalValue);
	void ForceCancelInteract();
	void IncrementKillCount_Server_(int32* Result);
	void CheckPossibleLandingStop(bool* bPossible);
	void OnRep_bIsVanished();
	void CheckDeadBody(float DeltaSeconds);
	bool IsDeathAndEnd();
	void CheckCharacterBehavior_Active(bool* bReturnValue);
	void CheckCharacterBehavior_Critical(bool* bReturnValue);
	void AddControllerInputs();
	void OnRep_Rep_SP();
	void SetResumeTimeToRecoverMP();
	void UltimateSkillNumWillBeIncreased(bool* bResult);
	void EmotePoseExists(const int32 PositionNo, bool* bResult);
	void EmoteVoiceExists(int32 PositionNo, bool* bResult);
	void StopCameraResetProcess_Local_();
	void SetControlRotationWithStopReset_Local_(class AController* Controller_0, const struct FRotator& NewRotation, bool bStopCameraResetProcess);
	bool IsNPC();
	void MakeAlwaysRelevant();
	void ReleaseSkillButtonIfPressed();
	bool IsBeingRescued();
	void NotifyBecomingLastSurvivor_Core(bool bBitesTheDust);
	void SetMeshRelatedThingsVisibility(bool bNewVisibility);
	void GetPairCharacterBP(class ABP_AJBInGameCharacter_C** PairCharacterBP);
	void IsActiveToCritical(bool* bIsActiveToCritical);
	void InitProperCriticalTime_Server_(const class FString& PairIDString);
	void ChangePassiveParticleVisibility(bool bNewVisibility);
	void SetAttachmentEffect();
	void PlayKnockdownSoundOnViewerEnv_Server_();
	void CheckSidlingForGunnerAnimation(bool* bSidlingForGunnerAnimation);
	void RequestLandingEffect_Core(const struct FGameplayTag& EffectType, bool bLandingStop, const struct FVector& WorldLocation);
	bool HasStand();
	bool HasMovableStand();
	void LongPressSkillActivated(class UBP_AJBLongPressInteract_C* LongPressInteract);
	void LongPressSkillInactivated(class UBP_AJBLongPressInteract_C* LongPressInteract);
	void CheckAnySkillCanAccompany(class UClass* IgnoreSkillClass, bool* bCanAccompany);
	void TryGetSkillComponentByTag(const struct FGameplayTag& SkillTag, bool* bSuccess, class UBP_AJBSkillBase_C** SkillComponent);
	void CheckConstantVelocity(bool* bConstantVelocity);
	void ChangeAttachedPaticleVisibility(bool bNewVisibility);
	void SortHitResultsMostNearTraceStartLocation(TArray<struct FHitResult>& InHits, float Radius, TArray<struct FHitResult>* OutHits);
	void CheckPredictionAttackHitBlocked(class AActor* TargetActor, bool* bBlocked);
	void CheckAnySkillActiveOnTiltOneDash(bool* bAnySkillActive);
	void CheckSidlingOnTiltOnce(bool* bSidling);
	void UpdateSidlingInfo();
	void IsPlayerCharacterAsGame(bool* bPlayerCharacterAsGame);
	void OnRep_Rep_bShouldRemoveGravityStatusOnLanding();
	void OnRep_Rep_RemoveGravityStatusImmediateTag();
	void ChangeEnableSpecifiedRelativeMeshRotation(bool bEnable, const struct FRotator& SpecifiedRelativeRotation);
	void ChangeEnableSocketBasedLocationOnUpdateVisibility(bool bEnable, class FName SocketName);
	void GetLocationOnUpdateVisibility(struct FVector* Location);
	void PlayDownSoundOnViewerEnv_Server_();
	void OnRep_Rep_CharacterActiveBehaviorInfo();
	void GetBreakDownInfo(ECharacterActiveBehavior OldBehavior, ECharacterActiveBehavior NewBehavior, const struct FGameplayTag& FactorTag, bool bOldMainCharacter, bool bMainCharacter, ECharacterActiveBehavior* OutNewBehavilr, bool* bSpecialBreakDown, bool* bIgnoreCheckChanging, struct FGameplayTagContainer* FactorTags, bool* bBreakDownBoth);
	void CheckActiveBehaviorBreakDown(bool* bBreakDown, bool* bSpecialBreakDown, bool* bBreakDownBoth, struct FGameplayTagContainer* Factor_Tags);
	void IsOperatingMainCharacter(bool* bReturnValue);
	void UpdateDownedCapsuleLocation(float DownedCapsuleHalfHeight);
	void UpdateDownedCapsuleHalfHeight(float DownedCapsuleHalfHeight);
	void UpdateDownedCapsuleSettings(float DownedCapsuleHalfHeight);
	void CheckPossibleDetection(bool* bPossibleDetection);
	void CacheCustomSkinData();
	void ChangeSkinMaterial(class UMaterialInterface* NewMaterial);
	void RestoreSkinMaterial();
	void CheckSpecifiedPassiveActive(TArray<class UClass*>& PassiveClassList, bool* bValid);
	void ChangeEnableControlAnimationOnPreReplay(bool Enable);
	void CheckSpecialKill(class ABP_AJBInGameCharacter_C* DeadCharacterBP, bool* bSpecialKill);
	bool CheckOnGround();
	void CalcAAPInfo(int32 Damage, bool* bDamageCutByAAP, bool* bDamageBlockByAAP);
	void ChangeAAPParticleVisibility(bool bNewVisibility);
	void SetCamraInterpSpeedXY(float SetCameraInterpSpeedXY);
	void UpdateMeshLocation();
	void CheckMeshVisibility(bool bIncludeSystemReason, bool* bVisible);
	void ChangeEnableInteract(bool bEnable);
	void SetWalkableFloorAngle(float InWalkableFloorAngle);
	void ResetWalkableFloorAngle();
	void TryChangePassiveParticleVisibility(bool bNewVisibility);
	void PreConsumeHP(int32 LeftDamageForHP, const struct FGameplayTag& DamageType, bool bPenetrateAP, int32* OverrideLeftDamageForHP);
	void ChangeEnableControlAnimationOnLastSurvivorDirectionCut3(bool bEnable);
	void ChangeEnableControlAnimationOnBeginDirection(bool bEnable);
	void IsRecordHistoryTarget(bool* bTarget);
	void ResetAPAndAAP();
	void CalcYawSpeedOnEasyOperation(bool bCheckIndoor, float InYawSpeedOnEasyOperation, float* YawSpeed);
	void ResetOxygenServer();
	void ReviveMomentarily(int32 NewHP, bool* bSuccess);
	void RemoveConditionsExceptions(const struct FGameplayTagContainer& AdditionalConditions);
	void RemovePassives(const struct FGameplayTagContainer& Exceptions);
	void LastSurvivorNotifyForComponents();
	void ApplyInputVectorOnConstantVelocity();
	void ApplyInputRotationOnEasyOperation(class UCameraComponent* InCamera, float InRightValue, class UCurveFloat* InCF_EasyOperationCamera, bool bCheckIndoor, float InYawSpeedOnEasyOperation, bool bInShouldAimDrag, float InAimDragDistance, float InAimDragRadius, float* AddYawVal);
	void OnCharacterActive();
	void CalcEasyOperationPitch(float InCameraInputRate, float InMovementRate, float InResetCameraPitchMin, float InResetCameraPitchMax, float InViewPitchMin, float InViewPitchMax, float InRotateSpeedResetCameraPitch, class UCurveFloat* InCF_ResetCameraPitchTarget, bool* bSuccess, struct FRotator* Rotation);
	void SetControlRotationLocal(const struct FRotator& Rotation);
	void CalcInputRightScaleEasyOperation(float InRightValue, class UCurveFloat* InCF_EasyOperationMovement, float* InputRightScale);
	void CalcFinalYawInputOnEasyOperation(float EasyOperationValue, float CameraControlValue, float* InputValue);
	void UpdateWorldZLocationInCurrentFall();
	void GetAchievedGrowupTotalValue(int32 GrowupIndex, const struct FGameplayTag& GrowupTag, bool bRewind, float* TotalValue);
	void GetFalldownGionTag(struct FGameplayTag* GameplayTag);
	void GetPoliticPlayerDefaultAP(int32* DefaultAP_0);
	void SettingAP();
	void TryChangeCharacterDMIParameterFloat(class FName ParameterName, float Value);
	void TryGetCharacterDMIList(TArray<class UMaterialInstanceDynamic*>* CharacterDMI);
	void TryChangeCharacterDMIParameterVector(class FName ParameterName, const struct FLinearColor& Value);
	void ShouldRecordHistoryReplayServer(bool* bShouldRecord);
	void ShouldCancelSkillsOnLandingStop(bool NewParam1, bool* bShouldCancel);
	void GetLaunchedActorTarget(class AActor** LaunchedActor);
	void SpawnDamageDisplay_Local(const struct FAJBDamageDisplayParams& DisplayParams, const struct FAJBDamageDisplayProperty& DisplayProperty);
	void GetHPRate(bool bIncludeAP, bool bIncludeAAP, float* Rate);
	void GetCapsuleBothEndPoints(struct FVector* TopPoint, struct FVector* BottomPoint);
	void IsAllowedDeathEvent(bool* IsAllowed);
	void GetMinTimeUntilDeathRigor_Sec_(float* MinTimeUntilDeathRigor_Sec__0);
	void SetMinTimeUntilDeathRigor_Sec_(float Value);
	void StopCriticalLoopSE();
	void DebugForceTerminateCriticalTime_Server();
	void EyeMoveCore(const struct FVector& TargetLocation, const struct FGameplayTag& SETag);
	void GetUltimateAvailableNum(int32 SP, int32* Num);
	void Knockback(const struct FVector& Velocity, float Intensity);
	void ShouldCallGrowupDispatcher(const struct FGameplayTag& InGrowupTag, bool bRewind, int32 CurrentSP, bool* bShouldCall, struct FGameplayTag* OutGrowupTag);
	void SetMoveSpeedOnCriticalness();
	void GetPoliticTimeToRevive(float* TimeToRevive_0);
	void OnVisibilitySet(bool NewVisibility);
	void ForceCancelSkills(bool bRequireStandSkillOnly, TArray<class UClass*>& IgnoreSkillClasses);
	void GetEmoteAccompanyStand(class ABP_AJBInGameStand_C** Stand_0);
	void GetGameplayTags(struct FGameplayTagContainer* TagContainerCopy);
	void CheckAreaIn(const struct FVector& Location, const struct FRotator& Rotation, float Radius, float Length, int32 PartitionNum, bool bCheckUnder, float ValidGroundOffsetZ, bool bUseBoxCollision, const struct FVector& BoxExtent, bool* bTarget);
	void IgnoreAttackHitNotifyOnAreaIn(bool* bIgnore);
	void CheckTargetSelf(class AActor* DamageCauser, bool bForDamageOverlap, bool bIgnoreMovableStand, bool bIncludeSelf, bool bAfterReflectShouldHitOwner, bool* bTarget);
	void OwnHitParam(bool* bCharacter, bool* bLeftAP, struct FGameplayTag* ParticleTagBlockedByAAP, struct FGameplayTag* SETagBlockedByAAP, struct FGameplayTag* ParticleTagBlocked);
	bool IfCheckDamageOverlap();
	void CheckDisableDamage(class AActor* DamageCauser, bool bIgnoreSelf, bool* bDisableDamage_0);
	void CheckDisablePassive(class AActor* PassiveCauser, const struct FGameplayTag& PassiveTag, bool bIgnoreSelf, bool* bDisablePassive_0);
	void CheckDisableAreaDamage(bool* bDisableAreadamage_0);
	void CheckNoDamage(class AActor* DamageCauser, bool* bNoDamage);
	void IsReactedByReticule(bool* bResult);
	void IgnoreTrace(class AActor* Owner_0, bool bPairOnly, bool* bIgnore);
	void CheckDisableDirectDamage(class AActor* DamageCauser, bool* bDisableDirectDamage_0);
	void CheckErrorConditionOperator(class AActor* InteractActor, bool* bErrorCondition, uint8* ErrorType);
	void InteractableOperator(class AActor* InteractActor, bool* bReturnValue);
	void CheckErrorCondition(bool* bErrorCondition, uint8* ErrorType);
	void TryGetInteractableText(class ABP_AJBInGameCharacter_C* OperatorCharacter, bool* bSuccess, class FText* InteractMessage);
	bool InteractInstantly(class ABP_AJBInGameCharacter_C* Character);
	bool Interactable(class ABP_AJBInGameCharacter_C* Character, float TraceLength);
	void OnLocalInteract(class AActor* InteractingActor, bool* bSuccess);
	void GetInteractState(uint8* InteractState);
	void GetInteractPriority(int32* Priority);
	void GetInteractBoundForCulling(class AActor* InteractingActor, struct FVector* Center, float* Radius);
	bool IfNeedsExclusiveInteractStrictly();
	bool IfBlockInteract(class AActor* InteractingActor);
	void ShouldPrioritizedThanPrepaidSkillCancel(bool* bShouldPriorirized);
	void GetOpeningCharacterCameraOffsetZ(float* OffsetZ);
	void GetPrimitivesToChangeStencil(E_StencilDigit StencilDigit, TArray<class UPrimitiveComponent*>* PrimitiveComponents);
	void GetGionOwner(class AActor** GionOwner);
	void GetSpawnedSpaceInOwnersEnv(E_GionSpawnedSpace* SpawnedSpaceInOwnersEnv);
	void GetTargetLocation(struct FVector* Location);
	void CheckTarget(class ABP_AJBInGameCharacter_C* Operator, const struct FVector& Location, float Range, bool* bTarget);
	void GetParticleLocation(class FName SocketName, struct FVector* Location);

	void CalcCurrentRotationValue(float* TurnedRotation, float* LookupRotation) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBInGameCharacter_C">();
	}
	static class ABP_AJBInGameCharacter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBInGameCharacter_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_AJBInGameCharacter_C) == 0x000010, "Wrong alignment on ABP_AJBInGameCharacter_C");
static_assert(sizeof(ABP_AJBInGameCharacter_C) == 0x0017B0, "Wrong size on ABP_AJBInGameCharacter_C");
static_assert(offsetof(ABP_AJBInGameCharacter_C, UberGraphFrame) == 0x0007B0, "Member 'ABP_AJBInGameCharacter_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, BP_AJBEmoteAccompany) == 0x0007B8, "Member 'ABP_AJBInGameCharacter_C::BP_AJBEmoteAccompany' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, BP_AJBDisallowEmoteDVManager) == 0x0007C0, "Member 'ABP_AJBInGameCharacter_C::BP_AJBDisallowEmoteDVManager' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, BP_AJBKnockbackManager) == 0x0007C8, "Member 'ABP_AJBInGameCharacter_C::BP_AJBKnockbackManager' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, SD) == 0x0007D0, "Member 'ABP_AJBInGameCharacter_C::SD' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, EyeCenter) == 0x0007D8, "Member 'ABP_AJBInGameCharacter_C::EyeCenter' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Nose) == 0x0007E0, "Member 'ABP_AJBInGameCharacter_C::Nose' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, BP_AJBActionLogSender_Character) == 0x0007E8, "Member 'ABP_AJBInGameCharacter_C::BP_AJBActionLogSender_Character' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, BP_AJBSpotLightComponent) == 0x0007F0, "Member 'ABP_AJBInGameCharacter_C::BP_AJBSpotLightComponent' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, BP_ShopCompetitionUISharingCharaParam) == 0x0007F8, "Member 'ABP_AJBInGameCharacter_C::BP_ShopCompetitionUISharingCharaParam' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, BP_ShopCompetitionUIFollowerComponent) == 0x000800, "Member 'ABP_AJBInGameCharacter_C::BP_ShopCompetitionUIFollowerComponent' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, DownedCapsule) == 0x000808, "Member 'ABP_AJBInGameCharacter_C::DownedCapsule' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, BP_AJBPairRescue) == 0x000810, "Member 'ABP_AJBInGameCharacter_C::BP_AJBPairRescue' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, BP_AchievementTriggerSender_Character) == 0x000818, "Member 'ABP_AJBInGameCharacter_C::BP_AchievementTriggerSender_Character' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, AkVoice) == 0x000820, "Member 'ABP_AJBInGameCharacter_C::AkVoice' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, BP_VoiceComponent) == 0x000828, "Member 'ABP_AJBInGameCharacter_C::BP_VoiceComponent' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, BP_AJBInGameRessurectionComponent) == 0x000830, "Member 'ABP_AJBInGameCharacter_C::BP_AJBInGameRessurectionComponent' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, PS_DefeatedEffect) == 0x000838, "Member 'ABP_AJBInGameCharacter_C::PS_DefeatedEffect' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, BP_AJBTutorialTriggerSender_Character) == 0x000840, "Member 'ABP_AJBInGameCharacter_C::BP_AJBTutorialTriggerSender_Character' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, DamageAreaArms) == 0x000848, "Member 'ABP_AJBInGameCharacter_C::DamageAreaArms' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Head) == 0x000850, "Member 'ABP_AJBInGameCharacter_C::Head' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, SpringArm) == 0x000858, "Member 'ABP_AJBInGameCharacter_C::SpringArm' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, BP_CharacterMoveEffectEvent) == 0x000860, "Member 'ABP_AJBInGameCharacter_C::BP_CharacterMoveEffectEvent' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Scene) == 0x000868, "Member 'ABP_AJBInGameCharacter_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, BP_AJBInGameIndoorManageComponent) == 0x000870, "Member 'ABP_AJBInGameCharacter_C::BP_AJBInGameIndoorManageComponent' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, BP_AJBInteractSkill) == 0x000878, "Member 'ABP_AJBInGameCharacter_C::BP_AJBInteractSkill' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, BP_AJBDamageAreaAffecter) == 0x000880, "Member 'ABP_AJBInGameCharacter_C::BP_AJBDamageAreaAffecter' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Camera) == 0x000888, "Member 'ABP_AJBInGameCharacter_C::Camera' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CameraInputMode) == 0x000890, "Member 'ABP_AJBInGameCharacter_C::CameraInputMode' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, TurnedRotationMinPerSecond) == 0x000894, "Member 'ABP_AJBInGameCharacter_C::TurnedRotationMinPerSecond' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, TurnedRotationMaxPerSecond) == 0x000898, "Member 'ABP_AJBInGameCharacter_C::TurnedRotationMaxPerSecond' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, LookupRotationMinPerSecond) == 0x00089C, "Member 'ABP_AJBInGameCharacter_C::LookupRotationMinPerSecond' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, LookupRotationMaxPerSecond) == 0x0008A0, "Member 'ABP_AJBInGameCharacter_C::LookupRotationMaxPerSecond' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Rep_HP) == 0x0008A4, "Member 'ABP_AJBInGameCharacter_C::Rep_HP' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Rep_AP) == 0x0008A8, "Member 'ABP_AJBInGameCharacter_C::Rep_AP' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Rep_SP) == 0x0008AC, "Member 'ABP_AJBInGameCharacter_C::Rep_SP' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, MP) == 0x0008B0, "Member 'ABP_AJBInGameCharacter_C::MP' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, ContinuedDamageMap) == 0x0008B8, "Member 'ABP_AJBInGameCharacter_C::ContinuedDamageMap' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, DesiredCameraParam) == 0x000908, "Member 'ABP_AJBInGameCharacter_C::DesiredCameraParam' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CameraInputDeadRate) == 0x000920, "Member 'ABP_AJBInGameCharacter_C::CameraInputDeadRate' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CameraInputSecondRate) == 0x000924, "Member 'ABP_AJBInGameCharacter_C::CameraInputSecondRate' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, HPMax) == 0x000928, "Member 'ABP_AJBInGameCharacter_C::HPMax' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, _ForSkipOwner_MP) == 0x00092C, "Member 'ABP_AJBInGameCharacter_C::_ForSkipOwner_MP' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, MPMax) == 0x000930, "Member 'ABP_AJBInGameCharacter_C::MPMax' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, _ForSkipOwner_MPMax) == 0x000934, "Member 'ABP_AJBInGameCharacter_C::_ForSkipOwner_MPMax' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, StandClass) == 0x000938, "Member 'ABP_AJBInGameCharacter_C::StandClass' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, SPMax) == 0x000940, "Member 'ABP_AJBInGameCharacter_C::SPMax' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, APMax) == 0x000944, "Member 'ABP_AJBInGameCharacter_C::APMax' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, DefaultAP) == 0x000948, "Member 'ABP_AJBInGameCharacter_C::DefaultAP' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, AddMP_s_) == 0x00094C, "Member 'ABP_AJBInGameCharacter_C::AddMP_s_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bIsSkipMPUpdateBySkill) == 0x000950, "Member 'ABP_AJBInGameCharacter_C::bIsSkipMPUpdateBySkill' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, IsAutoFullMP) == 0x000951, "Member 'ABP_AJBInGameCharacter_C::IsAutoFullMP' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, IsDamageAreaIn) == 0x000952, "Member 'ABP_AJBInGameCharacter_C::IsDamageAreaIn' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Rep_GameplayTagContainer) == 0x000958, "Member 'ABP_AJBInGameCharacter_C::Rep_GameplayTagContainer' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bIsSkipMPUpdateNotBySkill) == 0x000978, "Member 'ABP_AJBInGameCharacter_C::bIsSkipMPUpdateNotBySkill' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bIsEnableInput) == 0x000979, "Member 'ABP_AJBInGameCharacter_C::bIsEnableInput' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Rep_CharacterBehavior) == 0x00097A, "Member 'ABP_AJBInGameCharacter_C::Rep_CharacterBehavior' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, DefaultMPMax) == 0x00097C, "Member 'ABP_AJBInGameCharacter_C::DefaultMPMax' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bIsEnableInputCameraOnly) == 0x000980, "Member 'ABP_AJBInGameCharacter_C::bIsEnableInputCameraOnly' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, AJBMaxWalkSpeed) == 0x000984, "Member 'ABP_AJBInGameCharacter_C::AJBMaxWalkSpeed' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, AJBMaxCrouchSpeed) == 0x000988, "Member 'ABP_AJBInGameCharacter_C::AJBMaxCrouchSpeed' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, PS_Damage_EmeraldSplash) == 0x000990, "Member 'ABP_AJBInGameCharacter_C::PS_Damage_EmeraldSplash' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnSkillGrownup) == 0x000998, "Member 'ABP_AJBInGameCharacter_C::OnSkillGrownup' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnCharacterDead_Server) == 0x0009A8, "Member 'ABP_AJBInGameCharacter_C::OnCharacterDead_Server' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, SprinkleRange_cm_) == 0x0009B8, "Member 'ABP_AJBInGameCharacter_C::SprinkleRange_cm_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, SprinkleMax) == 0x0009BC, "Member 'ABP_AJBInGameCharacter_C::SprinkleMax' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, SprinkleBonus) == 0x0009C0, "Member 'ABP_AJBInGameCharacter_C::SprinkleBonus' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnSkillConsumed) == 0x0009C8, "Member 'ABP_AJBInGameCharacter_C::OnSkillConsumed' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnPassiveAdded) == 0x0009D8, "Member 'ABP_AJBInGameCharacter_C::OnPassiveAdded' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnPassiveRemoved) == 0x0009E8, "Member 'ABP_AJBInGameCharacter_C::OnPassiveRemoved' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, AJBMaxStepHeight) == 0x0009F8, "Member 'ABP_AJBInGameCharacter_C::AJBMaxStepHeight' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, DefaultMaxWalkSpeed) == 0x0009FC, "Member 'ABP_AJBInGameCharacter_C::DefaultMaxWalkSpeed' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, DefaultMaxRunSpeed) == 0x000A00, "Member 'ABP_AJBInGameCharacter_C::DefaultMaxRunSpeed' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, DefaultMaxCrouchSpeed) == 0x000A04, "Member 'ABP_AJBInGameCharacter_C::DefaultMaxCrouchSpeed' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, MovementRateToWalk) == 0x000A08, "Member 'ABP_AJBInGameCharacter_C::MovementRateToWalk' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, MovementRateToRun) == 0x000A0C, "Member 'ABP_AJBInGameCharacter_C::MovementRateToRun' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, MoveSpeedScale) == 0x000A10, "Member 'ABP_AJBInGameCharacter_C::MoveSpeedScale' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, ForwardValue) == 0x000A14, "Member 'ABP_AJBInGameCharacter_C::ForwardValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, RightValue) == 0x000A18, "Member 'ABP_AJBInGameCharacter_C::RightValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, MovementRate) == 0x000A1C, "Member 'ABP_AJBInGameCharacter_C::MovementRate' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, TurnValue) == 0x000A20, "Member 'ABP_AJBInGameCharacter_C::TurnValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, LookUpValue) == 0x000A24, "Member 'ABP_AJBInGameCharacter_C::LookUpValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, WalkingState) == 0x000A28, "Member 'ABP_AJBInGameCharacter_C::WalkingState' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnCameraChanged) == 0x000A30, "Member 'ABP_AJBInGameCharacter_C::OnCameraChanged' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, SpectatorControllers) == 0x000A40, "Member 'ABP_AJBInGameCharacter_C::SpectatorControllers' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Rep_CameraRotation) == 0x000A50, "Member 'ABP_AJBInGameCharacter_C::Rep_CameraRotation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnSkillActivated) == 0x000A60, "Member 'ABP_AJBInGameCharacter_C::OnSkillActivated' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnSkillInactivated) == 0x000A70, "Member 'ABP_AJBInGameCharacter_C::OnSkillInactivated' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnCharacterActiveBehaviorChanged) == 0x000A80, "Member 'ABP_AJBInGameCharacter_C::OnCharacterActiveBehaviorChanged' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, PlayingEmoteMontage) == 0x000A90, "Member 'ABP_AJBInGameCharacter_C::PlayingEmoteMontage' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, EmoteAnimTag) == 0x000A98, "Member 'ABP_AJBInGameCharacter_C::EmoteAnimTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, EmoteVoiceTag) == 0x000AA0, "Member 'ABP_AJBInGameCharacter_C::EmoteVoiceTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, LoopEmoteBlendOutTime) == 0x000AA8, "Member 'ABP_AJBInGameCharacter_C::LoopEmoteBlendOutTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, ActiveBehaviorTime) == 0x000AAC, "Member 'ABP_AJBInGameCharacter_C::ActiveBehaviorTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, LoopEmoteCanInputTime) == 0x000AB0, "Member 'ABP_AJBInGameCharacter_C::LoopEmoteCanInputTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bLoopEmoteCanInput) == 0x000AB4, "Member 'ABP_AJBInGameCharacter_C::bLoopEmoteCanInput' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CameraInputRate) == 0x000AB8, "Member 'ABP_AJBInGameCharacter_C::CameraInputRate' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CameraTurnScale) == 0x000ABC, "Member 'ABP_AJBInGameCharacter_C::CameraTurnScale' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CameraLookupScale) == 0x000AC0, "Member 'ABP_AJBInGameCharacter_C::CameraLookupScale' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, EmoteTurnScale) == 0x000AC4, "Member 'ABP_AJBInGameCharacter_C::EmoteTurnScale' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, EmoteLookupScale) == 0x000AC8, "Member 'ABP_AJBInGameCharacter_C::EmoteLookupScale' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, ListenServerRotation) == 0x000ACC, "Member 'ABP_AJBInGameCharacter_C::ListenServerRotation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, ListenServerRotationInterSpeed) == 0x000AD8, "Member 'ABP_AJBInGameCharacter_C::ListenServerRotationInterSpeed' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, DefaultGravityScale) == 0x000ADC, "Member 'ABP_AJBInGameCharacter_C::DefaultGravityScale' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CurrentSpread) == 0x000AE0, "Member 'ABP_AJBInGameCharacter_C::CurrentSpread' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, SpreadMin) == 0x000AE4, "Member 'ABP_AJBInGameCharacter_C::SpreadMin' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, SpreadMax) == 0x000AE8, "Member 'ABP_AJBInGameCharacter_C::SpreadMax' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, SpreadHeal) == 0x000AEC, "Member 'ABP_AJBInGameCharacter_C::SpreadHeal' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, SpreadHealStopCount) == 0x000AF0, "Member 'ABP_AJBInGameCharacter_C::SpreadHealStopCount' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bSpreadHealStop) == 0x000AF4, "Member 'ABP_AJBInGameCharacter_C::bSpreadHealStop' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, SpreadMinDefault_1080p_) == 0x000AF8, "Member 'ABP_AJBInGameCharacter_C::SpreadMinDefault_1080p_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, SpreadMaxDefault_1080p_) == 0x000AFC, "Member 'ABP_AJBInGameCharacter_C::SpreadMaxDefault_1080p_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, s_) == 0x000B00, "Member 'ABP_AJBInGameCharacter_C::s_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bEnableJump) == 0x000B04, "Member 'ABP_AJBInGameCharacter_C::bEnableJump' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bEnableSprint) == 0x000B05, "Member 'ABP_AJBInGameCharacter_C::bEnableSprint' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, BattleType) == 0x000B06, "Member 'ABP_AJBInGameCharacter_C::BattleType' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnAttackHit) == 0x000B08, "Member 'ABP_AJBInGameCharacter_C::OnAttackHit' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bDebugPredictionDraw) == 0x000B18, "Member 'ABP_AJBInGameCharacter_C::bDebugPredictionDraw' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, ActionSkillData) == 0x000B20, "Member 'ABP_AJBInGameCharacter_C::ActionSkillData' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, DT_ActionSkillInfo) == 0x000B70, "Member 'ABP_AJBInGameCharacter_C::DT_ActionSkillInfo' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, MovableStandClass) == 0x000B78, "Member 'ABP_AJBInGameCharacter_C::MovableStandClass' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bForceFireSkill) == 0x000B80, "Member 'ABP_AJBInGameCharacter_C::bForceFireSkill' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, SizeType) == 0x000B81, "Member 'ABP_AJBInGameCharacter_C::SizeType' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, MinTimeUntilDeathRigor_Sec_) == 0x000B84, "Member 'ABP_AJBInGameCharacter_C::MinTimeUntilDeathRigor_Sec_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, MaxTimeUntilDeathRigor_Sec_) == 0x000B88, "Member 'ABP_AJBInGameCharacter_C::MaxTimeUntilDeathRigor_Sec_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, NextLandingStopTime_Sec_) == 0x000B8C, "Member 'ABP_AJBInGameCharacter_C::NextLandingStopTime_Sec_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, MinLandingSoundHeight_cm_) == 0x000B90, "Member 'ABP_AJBInGameCharacter_C::MinLandingSoundHeight_cm_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, MinLandingStopHeight_cm_) == 0x000B94, "Member 'ABP_AJBInGameCharacter_C::MinLandingStopHeight_cm_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, MaxLandingStopHeight_cm_) == 0x000B98, "Member 'ABP_AJBInGameCharacter_C::MaxLandingStopHeight_cm_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, MinLandingStopTime_Sec_) == 0x000B9C, "Member 'ABP_AJBInGameCharacter_C::MinLandingStopTime_Sec_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, MaxLandingStopTime_Sec_) == 0x000BA0, "Member 'ABP_AJBInGameCharacter_C::MaxLandingStopTime_Sec_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, LandingStopTime_ThruWindow_Sec_) == 0x000BA4, "Member 'ABP_AJBInGameCharacter_C::LandingStopTime_ThruWindow_Sec_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, LandingStopTimeRate) == 0x000BA8, "Member 'ABP_AJBInGameCharacter_C::LandingStopTimeRate' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, LandingStopMontage_BeforeLanding) == 0x000BB0, "Member 'ABP_AJBInGameCharacter_C::LandingStopMontage_BeforeLanding' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, LandingStopMontage_AfterLanding) == 0x000BB8, "Member 'ABP_AJBInGameCharacter_C::LandingStopMontage_AfterLanding' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, MaxWorldZLocationInCurrentFall_cm_) == 0x000BC0, "Member 'ABP_AJBInGameCharacter_C::MaxWorldZLocationInCurrentFall_cm_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, MinWorldZLocationInCurrentFall_cm_) == 0x000BC4, "Member 'ABP_AJBInGameCharacter_C::MinWorldZLocationInCurrentFall_cm_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CurrentWorldZ) == 0x000BC8, "Member 'ABP_AJBInGameCharacter_C::CurrentWorldZ' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CurrentFall) == 0x000BCC, "Member 'ABP_AJBInGameCharacter_C::CurrentFall' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, BeforeFall) == 0x000BCD, "Member 'ABP_AJBInGameCharacter_C::BeforeFall' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, InitialMeshRelativeTransform) == 0x000BD0, "Member 'ABP_AJBInGameCharacter_C::InitialMeshRelativeTransform' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, InitialJumpZVelocity) == 0x000C00, "Member 'ABP_AJBInGameCharacter_C::InitialJumpZVelocity' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, StatusChangeTagFloatMap) == 0x000C08, "Member 'ABP_AJBInGameCharacter_C::StatusChangeTagFloatMap' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, JumpSpeedScaleReferenceMap) == 0x000C58, "Member 'ABP_AJBInGameCharacter_C::JumpSpeedScaleReferenceMap' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CameraControlRotationWhenEmoteStart) == 0x000CA8, "Member 'ABP_AJBInGameCharacter_C::CameraControlRotationWhenEmoteStart' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bIndoor) == 0x000CB4, "Member 'ABP_AJBInGameCharacter_C::bIndoor' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnReceiveDamage_Local) == 0x000CB8, "Member 'ABP_AJBInGameCharacter_C::OnReceiveDamage_Local' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnGiveDamage_Local) == 0x000CC8, "Member 'ABP_AJBInGameCharacter_C::OnGiveDamage_Local' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnCrouch) == 0x000CD8, "Member 'ABP_AJBInGameCharacter_C::OnCrouch' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnJump) == 0x000CE8, "Member 'ABP_AJBInGameCharacter_C::OnJump' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnMoveInput) == 0x000CF8, "Member 'ABP_AJBInGameCharacter_C::OnMoveInput' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnControlCamera) == 0x000D08, "Member 'ABP_AJBInGameCharacter_C::OnControlCamera' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnGetItem) == 0x000D18, "Member 'ABP_AJBInGameCharacter_C::OnGetItem' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnPossessTargetChenged) == 0x000D28, "Member 'ABP_AJBInGameCharacter_C::OnPossessTargetChenged' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnSkillUnlocked) == 0x000D38, "Member 'ABP_AJBInGameCharacter_C::OnSkillUnlocked' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnHPChanged) == 0x000D48, "Member 'ABP_AJBInGameCharacter_C::OnHPChanged' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, MoveDistance) == 0x000D58, "Member 'ABP_AJBInGameCharacter_C::MoveDistance' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, WorldLocation_LastDistanceCalculation) == 0x000D5C, "Member 'ABP_AJBInGameCharacter_C::WorldLocation_LastDistanceCalculation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bSpecialSkillButton_R1_IsDown) == 0x000D68, "Member 'ABP_AJBInGameCharacter_C::bSpecialSkillButton_R1_IsDown' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bBaseSkillButton_R2_IsDown) == 0x000D69, "Member 'ABP_AJBInGameCharacter_C::bBaseSkillButton_R2_IsDown' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bBasicSkillButton_L2_IsDown) == 0x000D6A, "Member 'ABP_AJBInGameCharacter_C::bBasicSkillButton_L2_IsDown' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bUltimateSkillButton_L1_IsDown) == 0x000D6B, "Member 'ABP_AJBInGameCharacter_C::bUltimateSkillButton_L1_IsDown' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bInteractButton_X_IsDown) == 0x000D6C, "Member 'ABP_AJBInGameCharacter_C::bInteractButton_X_IsDown' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, L3ButtonIsDown) == 0x000D6D, "Member 'ABP_AJBInGameCharacter_C::L3ButtonIsDown' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, AllSkillComponents) == 0x000D70, "Member 'ABP_AJBInGameCharacter_C::AllSkillComponents' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, MPReplicationFrequency) == 0x000D80, "Member 'ABP_AJBInGameCharacter_C::MPReplicationFrequency' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Cache_SpringArmPos) == 0x000D84, "Member 'ABP_AJBInGameCharacter_C::Cache_SpringArmPos' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Cache_SocketOffset) == 0x000D90, "Member 'ABP_AJBInGameCharacter_C::Cache_SocketOffset' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Cache_TargetArmLength) == 0x000D9C, "Member 'ABP_AJBInGameCharacter_C::Cache_TargetArmLength' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, SE_DamageAreaOutside) == 0x000DA0, "Member 'ABP_AJBInGameCharacter_C::SE_DamageAreaOutside' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, SE_DamageAreaInside) == 0x000DA8, "Member 'ABP_AJBInGameCharacter_C::SE_DamageAreaInside' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, DamageAreaOutsideLength_cm_) == 0x000DB0, "Member 'ABP_AJBInGameCharacter_C::DamageAreaOutsideLength_cm_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, DamageAreaInsideLength_cm_) == 0x000DB4, "Member 'ABP_AJBInGameCharacter_C::DamageAreaInsideLength_cm_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bShowDamageAreaRTPCValue) == 0x000DB8, "Member 'ABP_AJBInGameCharacter_C::bShowDamageAreaRTPCValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnSkillMissed_Local) == 0x000DC0, "Member 'ABP_AJBInGameCharacter_C::OnSkillMissed_Local' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, ElapsedTimeFromLastDamageAreaGionDisplay) == 0x000DD0, "Member 'ABP_AJBInGameCharacter_C::ElapsedTimeFromLastDamageAreaGionDisplay' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, DamageAreaGionDisplayInterval) == 0x000DD4, "Member 'ABP_AJBInGameCharacter_C::DamageAreaGionDisplayInterval' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bDuringTheWorld) == 0x000DD8, "Member 'ABP_AJBInGameCharacter_C::bDuringTheWorld' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnShotPossibilityChanged) == 0x000DE0, "Member 'ABP_AJBInGameCharacter_C::OnShotPossibilityChanged' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bPossibleShot) == 0x000DF0, "Member 'ABP_AJBInGameCharacter_C::bPossibleShot' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bIsInvincibleDueForJustResurrection) == 0x000DF1, "Member 'ABP_AJBInGameCharacter_C::bIsInvincibleDueForJustResurrection' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bFootStepsMute) == 0x000DF2, "Member 'ABP_AJBInGameCharacter_C::bFootStepsMute' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bEnableSimpleDeathCamera) == 0x000DF3, "Member 'ABP_AJBInGameCharacter_C::bEnableSimpleDeathCamera' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, DeathCameraInterp) == 0x000DF4, "Member 'ABP_AJBInGameCharacter_C::DeathCameraInterp' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, StatusGameplayTagContainer) == 0x000DF8, "Member 'ABP_AJBInGameCharacter_C::StatusGameplayTagContainer' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, RetireParticleTag) == 0x000E18, "Member 'ABP_AJBInGameCharacter_C::RetireParticleTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, _ForSkipOwner_WalkingState) == 0x000E20, "Member 'ABP_AJBInGameCharacter_C::_ForSkipOwner_WalkingState' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnRessurect) == 0x000E28, "Member 'ABP_AJBInGameCharacter_C::OnRessurect' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnEmote) == 0x000E38, "Member 'ABP_AJBInGameCharacter_C::OnEmote' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CurrentRTPC_OutsideDamageArea) == 0x000E48, "Member 'ABP_AJBInGameCharacter_C::CurrentRTPC_OutsideDamageArea' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CurrentRTPC_InsideDamageArea) == 0x000E4C, "Member 'ABP_AJBInGameCharacter_C::CurrentRTPC_InsideDamageArea' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnKill_Local) == 0x000E50, "Member 'ABP_AJBInGameCharacter_C::OnKill_Local' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnDie_Local) == 0x000E60, "Member 'ABP_AJBInGameCharacter_C::OnDie_Local' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnSkillGiveHeadShot_Local) == 0x000E70, "Member 'ABP_AJBInGameCharacter_C::OnSkillGiveHeadShot_Local' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnSkillBlocked_Local) == 0x000E80, "Member 'ABP_AJBInGameCharacter_C::OnSkillBlocked_Local' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bDisableDamage) == 0x000E90, "Member 'ABP_AJBInGameCharacter_C::bDisableDamage' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bDisablePassive) == 0x000E91, "Member 'ABP_AJBInGameCharacter_C::bDisablePassive' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bDisableAreadamage) == 0x000E92, "Member 'ABP_AJBInGameCharacter_C::bDisableAreadamage' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, BeforeLandingMontageAnimSeqLength) == 0x000E94, "Member 'ABP_AJBInGameCharacter_C::BeforeLandingMontageAnimSeqLength' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, AfterLandingMontageAnimSeqLength) == 0x000E98, "Member 'ABP_AJBInGameCharacter_C::AfterLandingMontageAnimSeqLength' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, HealingMPSpeedScale) == 0x000E9C, "Member 'ABP_AJBInGameCharacter_C::HealingMPSpeedScale' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CurrentResumeTimeToRecoverMP) == 0x000EA0, "Member 'ABP_AJBInGameCharacter_C::CurrentResumeTimeToRecoverMP' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Defence___) == 0x000EA4, "Member 'ABP_AJBInGameCharacter_C::Defence___' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnReceiveDamage_Server) == 0x000EA8, "Member 'ABP_AJBInGameCharacter_C::OnReceiveDamage_Server' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bIndoorNotCeilingHeight) == 0x000EB8, "Member 'ABP_AJBInGameCharacter_C::bIndoorNotCeilingHeight' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Attack___) == 0x000EBC, "Member 'ABP_AJBInGameCharacter_C::Attack___' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, DisablePPBPMontage) == 0x000EC0, "Member 'ABP_AJBInGameCharacter_C::DisablePPBPMontage' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnOtherGrowup) == 0x000ED0, "Member 'ABP_AJBInGameCharacter_C::OnOtherGrowup' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, InputShowEmoteSelectTime) == 0x000EE0, "Member 'ABP_AJBInGameCharacter_C::InputShowEmoteSelectTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, ShowEmoteSelectTimerHandle) == 0x000EE8, "Member 'ABP_AJBInGameCharacter_C::ShowEmoteSelectTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, InputHideEmoteSelectTime) == 0x000EF0, "Member 'ABP_AJBInGameCharacter_C::InputHideEmoteSelectTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, AttackScale_NPC_) == 0x000EF4, "Member 'ABP_AJBInGameCharacter_C::AttackScale_NPC_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CharacterInfo) == 0x000EF8, "Member 'ABP_AJBInGameCharacter_C::CharacterInfo' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Attachments) == 0x000FE0, "Member 'ABP_AJBInGameCharacter_C::Attachments' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bHasBecomeCriticalState) == 0x000FF0, "Member 'ABP_AJBInGameCharacter_C::bHasBecomeCriticalState' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CriticalMoveSpeedScale) == 0x000FF4, "Member 'ABP_AJBInGameCharacter_C::CriticalMoveSpeedScale' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CriticalLookupScale) == 0x000FF8, "Member 'ABP_AJBInGameCharacter_C::CriticalLookupScale' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CriticalTurnScale) == 0x000FFC, "Member 'ABP_AJBInGameCharacter_C::CriticalTurnScale' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, BehaviorElapsedTime_Server_) == 0x001000, "Member 'ABP_AJBInGameCharacter_C::BehaviorElapsedTime_Server_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CriticalTime) == 0x001004, "Member 'ABP_AJBInGameCharacter_C::CriticalTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Rep_CriticalElapsedTime) == 0x001008, "Member 'ABP_AJBInGameCharacter_C::Rep_CriticalElapsedTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Reserved_DamageCauser_Server_) == 0x001010, "Member 'ABP_AJBInGameCharacter_C::Reserved_DamageCauser_Server_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Reserved_DamageType_Server_) == 0x001018, "Member 'ABP_AJBInGameCharacter_C::Reserved_DamageType_Server_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnCritical_Local) == 0x001020, "Member 'ABP_AJBInGameCharacter_C::OnCritical_Local' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnDown_Local) == 0x001030, "Member 'ABP_AJBInGameCharacter_C::OnDown_Local' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnRevive_Local) == 0x001040, "Member 'ABP_AJBInGameCharacter_C::OnRevive_Local' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnRescueSuccess_Local) == 0x001050, "Member 'ABP_AJBInGameCharacter_C::OnRescueSuccess_Local' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnPairDie_Local) == 0x001060, "Member 'ABP_AJBInGameCharacter_C::OnPairDie_Local' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnPairKill_Local) == 0x001070, "Member 'ABP_AJBInGameCharacter_C::OnPairKill_Local' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, UpdateVisibilityRadiusScale) == 0x001080, "Member 'ABP_AJBInGameCharacter_C::UpdateVisibilityRadiusScale' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, GenerateParticlePercentage___) == 0x001084, "Member 'ABP_AJBInGameCharacter_C::GenerateParticlePercentage___' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnWindowBroken_Local) == 0x001088, "Member 'ABP_AJBInGameCharacter_C::OnWindowBroken_Local' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, ResumeTimeToRecoverMP) == 0x001098, "Member 'ABP_AJBInGameCharacter_C::ResumeTimeToRecoverMP' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, InpossibleShotElapsedTime) == 0x00109C, "Member 'ABP_AJBInGameCharacter_C::InpossibleShotElapsedTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, InpossibleShotTime) == 0x0010A0, "Member 'ABP_AJBInGameCharacter_C::InpossibleShotTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnSkillNumUpdated) == 0x0010A8, "Member 'ABP_AJBInGameCharacter_C::OnSkillNumUpdated' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnSkillSucceeded_Local) == 0x0010B8, "Member 'ABP_AJBInGameCharacter_C::OnSkillSucceeded_Local' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnSkillEffectiveTimeDetermined_Local) == 0x0010C8, "Member 'ABP_AJBInGameCharacter_C::OnSkillEffectiveTimeDetermined_Local' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Reserved_SerialNumber_Server_) == 0x0010D8, "Member 'ABP_AJBInGameCharacter_C::Reserved_SerialNumber_Server_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, ReservedAttackDistance_Server_) == 0x0010DC, "Member 'ABP_AJBInGameCharacter_C::ReservedAttackDistance_Server_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, ReservedKilledCharacterId_Server_) == 0x0010E0, "Member 'ABP_AJBInGameCharacter_C::ReservedKilledCharacterId_Server_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Reserved_WithSeparatedStandAttack_Server_) == 0x0010E1, "Member 'ABP_AJBInGameCharacter_C::Reserved_WithSeparatedStandAttack_Server_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Reserved_HitEnemysSeparatedStand_Server_) == 0x0010E2, "Member 'ABP_AJBInGameCharacter_C::Reserved_HitEnemysSeparatedStand_Server_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Reserved_DeadPlayerID_Server_) == 0x0010E4, "Member 'ABP_AJBInGameCharacter_C::Reserved_DeadPlayerID_Server_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, DashInputMode) == 0x0010E8, "Member 'ABP_AJBInGameCharacter_C::DashInputMode' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Deprecated_ForwardInputAngle_Deg_) == 0x0010EC, "Member 'ABP_AJBInGameCharacter_C::Deprecated_ForwardInputAngle_Deg_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, DashInputTime_s_) == 0x0010F0, "Member 'ABP_AJBInGameCharacter_C::DashInputTime_s_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, DefaultMaxDashSpeed) == 0x0010F4, "Member 'ABP_AJBInGameCharacter_C::DefaultMaxDashSpeed' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, DashInputCount_Local_) == 0x0010F8, "Member 'ABP_AJBInGameCharacter_C::DashInputCount_Local_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, TimeCountSinceLastDashInput_Local_) == 0x0010FC, "Member 'ABP_AJBInGameCharacter_C::TimeCountSinceLastDashInput_Local_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, DefaultMaxWalkAcceleration) == 0x001100, "Member 'ABP_AJBInGameCharacter_C::DefaultMaxWalkAcceleration' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, DefaultMaxDashAcceleration) == 0x001104, "Member 'ABP_AJBInGameCharacter_C::DefaultMaxDashAcceleration' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, DefaultMaxRunAcceleration) == 0x001108, "Member 'ABP_AJBInGameCharacter_C::DefaultMaxRunAcceleration' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, DefaultMaxCrouchAcceleration) == 0x00110C, "Member 'ABP_AJBInGameCharacter_C::DefaultMaxCrouchAcceleration' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, PreWalkingState_Local_) == 0x001110, "Member 'ABP_AJBInGameCharacter_C::PreWalkingState_Local_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, NecessaryDashInputCount) == 0x001114, "Member 'ABP_AJBInGameCharacter_C::NecessaryDashInputCount' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bReserveDash_Local_) == 0x001118, "Member 'ABP_AJBInGameCharacter_C::bReserveDash_Local_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnSkillReady_Local) == 0x001120, "Member 'ABP_AJBInGameCharacter_C::OnSkillReady_Local' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CameraSensitivityFirst) == 0x001130, "Member 'ABP_AJBInGameCharacter_C::CameraSensitivityFirst' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CameraSensitivitySecond) == 0x001134, "Member 'ABP_AJBInGameCharacter_C::CameraSensitivitySecond' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CameraSensitivityThird) == 0x001138, "Member 'ABP_AJBInGameCharacter_C::CameraSensitivityThird' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CameraSensitivityFourth) == 0x00113C, "Member 'ABP_AJBInGameCharacter_C::CameraSensitivityFourth' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CameraSensitivityFifth) == 0x001140, "Member 'ABP_AJBInGameCharacter_C::CameraSensitivityFifth' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnSkillEffectiveValueDetermined_Local) == 0x001148, "Member 'ABP_AJBInGameCharacter_C::OnSkillEffectiveValueDetermined_Local' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnCutDamage_Local) == 0x001158, "Member 'ABP_AJBInGameCharacter_C::OnCutDamage_Local' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnSkillFailedToUse_Local) == 0x001168, "Member 'ABP_AJBInGameCharacter_C::OnSkillFailedToUse_Local' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnDash_Local) == 0x001178, "Member 'ABP_AJBInGameCharacter_C::OnDash_Local' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, AreaInNoDamageParticleTag) == 0x001188, "Member 'ABP_AJBInGameCharacter_C::AreaInNoDamageParticleTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, AreaInNoDamageSETag) == 0x001190, "Member 'ABP_AJBInGameCharacter_C::AreaInNoDamageSETag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CriticalSETag) == 0x001198, "Member 'ABP_AJBInGameCharacter_C::CriticalSETag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CriticalSEAkComponent) == 0x0011A0, "Member 'ABP_AJBInGameCharacter_C::CriticalSEAkComponent' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CriticalTimeDecrement) == 0x0011A8, "Member 'ABP_AJBInGameCharacter_C::CriticalTimeDecrement' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Reserved_UltimateSkillSerialNumberIfInEffect_Server_) == 0x0011AC, "Member 'ABP_AJBInGameCharacter_C::Reserved_UltimateSkillSerialNumberIfInEffect_Server_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CurrentCriticalTime) == 0x0011B0, "Member 'ABP_AJBInGameCharacter_C::CurrentCriticalTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, HealingHPPctOnRevive) == 0x0011B4, "Member 'ABP_AJBInGameCharacter_C::HealingHPPctOnRevive' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bForceCameraSencitivityFirst) == 0x0011B8, "Member 'ABP_AJBInGameCharacter_C::bForceCameraSencitivityFirst' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, TimeToRevive) == 0x0011BC, "Member 'ABP_AJBInGameCharacter_C::TimeToRevive' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bIsVanished) == 0x0011C0, "Member 'ABP_AJBInGameCharacter_C::bIsVanished' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CacheMovableStandmaterials) == 0x0011C8, "Member 'ABP_AJBInGameCharacter_C::CacheMovableStandmaterials' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, MovableStandmaterials) == 0x0011D8, "Member 'ABP_AJBInGameCharacter_C::MovableStandmaterials' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, SkinItelateIndex) == 0x0011E8, "Member 'ABP_AJBInGameCharacter_C::SkinItelateIndex' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnUltimateSkillEffectStarted_Server) == 0x0011F0, "Member 'ABP_AJBInGameCharacter_C::OnUltimateSkillEffectStarted_Server' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnUltimateSkillEffectFinished_Server) == 0x001200, "Member 'ABP_AJBInGameCharacter_C::OnUltimateSkillEffectFinished_Server' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CurrentUltimateSkillSerialNumberIfInEffect_Server_) == 0x001210, "Member 'ABP_AJBInGameCharacter_C::CurrentUltimateSkillSerialNumberIfInEffect_Server_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnLastKill_Local) == 0x001218, "Member 'ABP_AJBInGameCharacter_C::OnLastKill_Local' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bIsSidling) == 0x001228, "Member 'ABP_AJBInGameCharacter_C::bIsSidling' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bMovementInputExists) == 0x001229, "Member 'ABP_AJBInGameCharacter_C::bMovementInputExists' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, MeshDefaultRelativeRotation) == 0x00122C, "Member 'ABP_AJBInGameCharacter_C::MeshDefaultRelativeRotation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CurrentMeshWorldRotation) == 0x001238, "Member 'ABP_AJBInGameCharacter_C::CurrentMeshWorldRotation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, SidlingFactorDurationMap) == 0x001248, "Member 'ABP_AJBInGameCharacter_C::SidlingFactorDurationMap' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, TraceLengthToRevive) == 0x001298, "Member 'ABP_AJBInGameCharacter_C::TraceLengthToRevive' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, ItemSPCollRadiusOnDrop) == 0x00129C, "Member 'ABP_AJBInGameCharacter_C::ItemSPCollRadiusOnDrop' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, TimerHandle_CheckLandingForStopThruSidling) == 0x0012A0, "Member 'ABP_AJBInGameCharacter_C::TimerHandle_CheckLandingForStopThruSidling' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Cache_FOV) == 0x0012A8, "Member 'ABP_AJBInGameCharacter_C::Cache_FOV' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, InputAccel) == 0x0012AC, "Member 'ABP_AJBInGameCharacter_C::InputAccel' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CurrentInputSpeedRate) == 0x0012B0, "Member 'ABP_AJBInGameCharacter_C::CurrentInputSpeedRate' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, InputSpeed) == 0x0012B4, "Member 'ABP_AJBInGameCharacter_C::InputSpeed' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, WatcherControllers) == 0x0012B8, "Member 'ABP_AJBInGameCharacter_C::WatcherControllers' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, DMI_CharacterMesh) == 0x0012C8, "Member 'ABP_AJBInGameCharacter_C::DMI_CharacterMesh' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bIsNPC) == 0x0012D8, "Member 'ABP_AJBInGameCharacter_C::bIsNPC' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnKill_All) == 0x0012E0, "Member 'ABP_AJBInGameCharacter_C::OnKill_All' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnReceiveDamage_All) == 0x0012F0, "Member 'ABP_AJBInGameCharacter_C::OnReceiveDamage_All' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, KillCount_Server) == 0x001300, "Member 'ABP_AJBInGameCharacter_C::KillCount_Server' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CameraSensitivity_NPC_) == 0x001304, "Member 'ABP_AJBInGameCharacter_C::CameraSensitivity_NPC_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, FallingSecSinceDeath_Server_) == 0x001308, "Member 'ABP_AJBInGameCharacter_C::FallingSecSinceDeath_Server_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, LastFallingSinceDeath_Server_) == 0x00130C, "Member 'ABP_AJBInGameCharacter_C::LastFallingSinceDeath_Server_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, FallingStateChangeNumSinceDeath_Server_) == 0x001310, "Member 'ABP_AJBInGameCharacter_C::FallingStateChangeNumSinceDeath_Server_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, FallingStateChangeNumSinceDeathThreshold) == 0x001314, "Member 'ABP_AJBInGameCharacter_C::FallingStateChangeNumSinceDeathThreshold' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, FallingSecSinceDeathThreshold) == 0x001318, "Member 'ABP_AJBInGameCharacter_C::FallingSecSinceDeathThreshold' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bShouldCheckLandingStop) == 0x00131C, "Member 'ABP_AJBInGameCharacter_C::bShouldCheckLandingStop' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Cache_SpringArmDoCollisionTest) == 0x00131D, "Member 'ABP_AJBInGameCharacter_C::Cache_SpringArmDoCollisionTest' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Cache_Visibility) == 0x00131E, "Member 'ABP_AJBInGameCharacter_C::Cache_Visibility' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, GrowupParam) == 0x001320, "Member 'ABP_AJBInGameCharacter_C::GrowupParam' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CV_CameraInputDualZoneFirst) == 0x001348, "Member 'ABP_AJBInGameCharacter_C::CV_CameraInputDualZoneFirst' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CV_CameraInputDualZoneSecond) == 0x001350, "Member 'ABP_AJBInGameCharacter_C::CV_CameraInputDualZoneSecond' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnAddAP_Server) == 0x001358, "Member 'ABP_AJBInGameCharacter_C::OnAddAP_Server' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnAddHP_Server) == 0x001368, "Member 'ABP_AJBInGameCharacter_C::OnAddHP_Server' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnAddSP_Server) == 0x001378, "Member 'ABP_AJBInGameCharacter_C::OnAddSP_Server' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CurrentCameraRotationForReset) == 0x001388, "Member 'ABP_AJBInGameCharacter_C::CurrentCameraRotationForReset' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bEnableCameraRotationByController) == 0x001394, "Member 'ABP_AJBInGameCharacter_C::bEnableCameraRotationByController' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bAllowCameraResetProcess_Local_) == 0x001395, "Member 'ABP_AJBInGameCharacter_C::bAllowCameraResetProcess_Local_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CameraResetInterpSpeed) == 0x001398, "Member 'ABP_AJBInGameCharacter_C::CameraResetInterpSpeed' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CameraResetElapsedTimeSec) == 0x00139C, "Member 'ABP_AJBInGameCharacter_C::CameraResetElapsedTimeSec' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CameraResetFinishTimeSec) == 0x0013A0, "Member 'ABP_AJBInGameCharacter_C::CameraResetFinishTimeSec' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, SpringArmTargetZMargin) == 0x0013A4, "Member 'ABP_AJBInGameCharacter_C::SpringArmTargetZMargin' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, DefaultCapsuleHalfHeight) == 0x0013A8, "Member 'ABP_AJBInGameCharacter_C::DefaultCapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bDebugSkillAnimation) == 0x0013AC, "Member 'ABP_AJBInGameCharacter_C::bDebugSkillAnimation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OpeningSequencerCameraOffsetZ) == 0x0013B0, "Member 'ABP_AJBInGameCharacter_C::OpeningSequencerCameraOffsetZ' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnBecomeLastSurvivor_All) == 0x0013B8, "Member 'ABP_AJBInGameCharacter_C::OnBecomeLastSurvivor_All' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bReviveReserved_Server_) == 0x0013C8, "Member 'ABP_AJBInGameCharacter_C::bReviveReserved_Server_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CriticalTimeForNPCsPair) == 0x0013CC, "Member 'ABP_AJBInGameCharacter_C::CriticalTimeForNPCsPair' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, DashSpeedScale) == 0x0013D0, "Member 'ABP_AJBInGameCharacter_C::DashSpeedScale' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bSpecialDashAnimation) == 0x0013D4, "Member 'ABP_AJBInGameCharacter_C::bSpecialDashAnimation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnDown_All) == 0x0013D8, "Member 'ABP_AJBInGameCharacter_C::OnDown_All' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, ExcenptionsTagsOnRemoveConditions) == 0x0013E8, "Member 'ABP_AJBInGameCharacter_C::ExcenptionsTagsOnRemoveConditions' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, DebugSingleMontage) == 0x001408, "Member 'ABP_AJBInGameCharacter_C::DebugSingleMontage' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, DebugSingleEmoteVoiceID) == 0x001410, "Member 'ABP_AJBInGameCharacter_C::DebugSingleEmoteVoiceID' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bDebugPlaySingleEmote) == 0x001414, "Member 'ABP_AJBInGameCharacter_C::bDebugPlaySingleEmote' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, AllSupportSkillComponents) == 0x001418, "Member 'ABP_AJBInGameCharacter_C::AllSupportSkillComponents' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnSkillReady_All) == 0x001428, "Member 'ABP_AJBInGameCharacter_C::OnSkillReady_All' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, MovementInterpSpeed) == 0x001438, "Member 'ABP_AJBInGameCharacter_C::MovementInterpSpeed' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bSharedControllerSetupIsFinished) == 0x00143C, "Member 'ABP_AJBInGameCharacter_C::bSharedControllerSetupIsFinished' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bIsSidlingForGunnerAnimation) == 0x00143D, "Member 'ABP_AJBInGameCharacter_C::bIsSidlingForGunnerAnimation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, DownedCapsuleHalfHeightOnCritical) == 0x001440, "Member 'ABP_AJBInGameCharacter_C::DownedCapsuleHalfHeightOnCritical' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, SkillAnimationTiming_Ready) == 0x001448, "Member 'ABP_AJBInGameCharacter_C::SkillAnimationTiming_Ready' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, SkillAnimationTiming_Active) == 0x001458, "Member 'ABP_AJBInGameCharacter_C::SkillAnimationTiming_Active' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, SkillAnimationTiming_Inactive) == 0x001468, "Member 'ABP_AJBInGameCharacter_C::SkillAnimationTiming_Inactive' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bDebugSuperJump) == 0x001478, "Member 'ABP_AJBInGameCharacter_C::bDebugSuperJump' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnLongPressSkillActivated) == 0x001480, "Member 'ABP_AJBInGameCharacter_C::OnLongPressSkillActivated' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnLongPressSkillInactivated) == 0x001490, "Member 'ABP_AJBInGameCharacter_C::OnLongPressSkillInactivated' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bInfinityRevive_Server_) == 0x0014A0, "Member 'ABP_AJBInGameCharacter_C::bInfinityRevive_Server_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnChangeCharacterBehavior_Server) == 0x0014A8, "Member 'ABP_AJBInGameCharacter_C::OnChangeCharacterBehavior_Server' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnPlayRadioChat_Local) == 0x0014B8, "Member 'ABP_AJBInGameCharacter_C::OnPlayRadioChat_Local' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnPlayDamageVoice_Local) == 0x0014C8, "Member 'ABP_AJBInGameCharacter_C::OnPlayDamageVoice_Local' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, FootstepType) == 0x0014D8, "Member 'ABP_AJBInGameCharacter_C::FootstepType' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnCritical_Server) == 0x0014E0, "Member 'ABP_AJBInGameCharacter_C::OnCritical_Server' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnPassiveAddedAfterSetCauser) == 0x0014F0, "Member 'ABP_AJBInGameCharacter_C::OnPassiveAddedAfterSetCauser' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CalcedMaxLandingStopHeight) == 0x001500, "Member 'ABP_AJBInGameCharacter_C::CalcedMaxLandingStopHeight' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CalcedMinLandingStopHeight) == 0x001504, "Member 'ABP_AJBInGameCharacter_C::CalcedMinLandingStopHeight' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Rep_RemoveGravityStatusOnLandingTag) == 0x001508, "Member 'ABP_AJBInGameCharacter_C::Rep_RemoveGravityStatusOnLandingTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Rep_bShouldRemoveGravityStatusOnLanding) == 0x001510, "Member 'ABP_AJBInGameCharacter_C::Rep_bShouldRemoveGravityStatusOnLanding' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Rep_RemoveGravityStatusImmediateTag) == 0x001518, "Member 'ABP_AJBInGameCharacter_C::Rep_RemoveGravityStatusImmediateTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bUseSpecifiedRelativeMeshRotation) == 0x001520, "Member 'ABP_AJBInGameCharacter_C::bUseSpecifiedRelativeMeshRotation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, SpecifiedRelativeMeshRotation) == 0x001524, "Member 'ABP_AJBInGameCharacter_C::SpecifiedRelativeMeshRotation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bUseSocketBasedLocationOnUpdateVisibility) == 0x001530, "Member 'ABP_AJBInGameCharacter_C::bUseSocketBasedLocationOnUpdateVisibility' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, SocketNameToSocketBasedLocation) == 0x001538, "Member 'ABP_AJBInGameCharacter_C::SocketNameToSocketBasedLocation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, DownedCapsuleHalfHeightOnDead) == 0x001540, "Member 'ABP_AJBInGameCharacter_C::DownedCapsuleHalfHeightOnDead' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bMeshAttachOnAttachedParticle) == 0x001544, "Member 'ABP_AJBInGameCharacter_C::bMeshAttachOnAttachedParticle' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, DefaultDefence) == 0x001548, "Member 'ABP_AJBInGameCharacter_C::DefaultDefence' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Rep_CharacterActiveBehaviorInfo) == 0x001550, "Member 'ABP_AJBInGameCharacter_C::Rep_CharacterActiveBehaviorInfo' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, FlinchFactorGameplayTagContainerLocal) == 0x001578, "Member 'ABP_AJBInGameCharacter_C::FlinchFactorGameplayTagContainerLocal' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, AM_Bind) == 0x001598, "Member 'ABP_AJBInGameCharacter_C::AM_Bind' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, DT_CharacterActiveBehaviorFactorInfo) == 0x0015A0, "Member 'ABP_AJBInGameCharacter_C::DT_CharacterActiveBehaviorFactorInfo' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, DownedCapsuleRadiusMargin) == 0x0015A8, "Member 'ABP_AJBInGameCharacter_C::DownedCapsuleRadiusMargin' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CustomMaterialList) == 0x0015B0, "Member 'ABP_AJBInGameCharacter_C::CustomMaterialList' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bLandingsMute) == 0x0015C0, "Member 'ABP_AJBInGameCharacter_C::bLandingsMute' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, FXVisibility) == 0x0015C1, "Member 'ABP_AJBInGameCharacter_C::FXVisibility' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bDisableDirectDamage) == 0x0015C3, "Member 'ABP_AJBInGameCharacter_C::bDisableDirectDamage' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, RunSpeedScale_NPC_) == 0x0015C4, "Member 'ABP_AJBInGameCharacter_C::RunSpeedScale_NPC_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bShouldControlAnimationOnPreReplay) == 0x0015C8, "Member 'ABP_AJBInGameCharacter_C::bShouldControlAnimationOnPreReplay' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bControlAnimationOnPreReplay) == 0x0015C9, "Member 'ABP_AJBInGameCharacter_C::bControlAnimationOnPreReplay' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bPredictionAttackHitConsiderPair) == 0x0015CA, "Member 'ABP_AJBInGameCharacter_C::bPredictionAttackHitConsiderPair' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnHitMultipleCloseRange) == 0x0015D0, "Member 'ABP_AJBInGameCharacter_C::OnHitMultipleCloseRange' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bFemale) == 0x0015E0, "Member 'ABP_AJBInGameCharacter_C::bFemale' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Rep_AdditionalAPComponent) == 0x0015E8, "Member 'ABP_AJBInGameCharacter_C::Rep_AdditionalAPComponent' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnSpawnSignalPin_Local) == 0x0015F0, "Member 'ABP_AJBInGameCharacter_C::OnSpawnSignalPin_Local' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnAddAAP_Server) == 0x001600, "Member 'ABP_AJBInGameCharacter_C::OnAddAAP_Server' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnPassiveGainedForAchievement) == 0x001610, "Member 'ABP_AJBInGameCharacter_C::OnPassiveGainedForAchievement' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, PrevFXVisibility) == 0x001620, "Member 'ABP_AJBInGameCharacter_C::PrevFXVisibility' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CameraInterpSpeedXY) == 0x001624, "Member 'ABP_AJBInGameCharacter_C::CameraInterpSpeedXY' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, DefaultMaxFlyingAcceleration) == 0x001628, "Member 'ABP_AJBInGameCharacter_C::DefaultMaxFlyingAcceleration' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bIsFlyingMode) == 0x00162C, "Member 'ABP_AJBInGameCharacter_C::bIsFlyingMode' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, WindowAccessType) == 0x00162D, "Member 'ABP_AJBInGameCharacter_C::WindowAccessType' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OffsetTopOfHead) == 0x001630, "Member 'ABP_AJBInGameCharacter_C::OffsetTopOfHead' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, AJBWalkableFloorAngle) == 0x001634, "Member 'ABP_AJBInGameCharacter_C::AJBWalkableFloorAngle' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Cache_ProbeChannel) == 0x001638, "Member 'ABP_AJBInGameCharacter_C::Cache_ProbeChannel' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnChangeWalkingState_All) == 0x001640, "Member 'ABP_AJBInGameCharacter_C::OnChangeWalkingState_All' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bControlAnimationOnLastSurvivorDirectionCut3) == 0x001650, "Member 'ABP_AJBInGameCharacter_C::bControlAnimationOnLastSurvivorDirectionCut3' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bControlAnimationOnBeginDirection) == 0x001651, "Member 'ABP_AJBInGameCharacter_C::bControlAnimationOnBeginDirection' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bShouldControlAnimationOnLastSurvivorDirectionCut3) == 0x001652, "Member 'ABP_AJBInGameCharacter_C::bShouldControlAnimationOnLastSurvivorDirectionCut3' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bShouldControlAnimationOnBeginDirection) == 0x001653, "Member 'ABP_AJBInGameCharacter_C::bShouldControlAnimationOnBeginDirection' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bEnableEasyOperation) == 0x001654, "Member 'ABP_AJBInGameCharacter_C::bEnableEasyOperation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, YawInputValueOnEasyOperation) == 0x001658, "Member 'ABP_AJBInGameCharacter_C::YawInputValueOnEasyOperation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, YawInterpSpeedOnEasyOperation) == 0x00165C, "Member 'ABP_AJBInGameCharacter_C::YawInterpSpeedOnEasyOperation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, YawSpeedOnEasyOperation) == 0x001660, "Member 'ABP_AJBInGameCharacter_C::YawSpeedOnEasyOperation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, YawInputDeadValueOnEasyOperation) == 0x001664, "Member 'ABP_AJBInGameCharacter_C::YawInputDeadValueOnEasyOperation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, TargetYawInputValueOnEasyOperation) == 0x001668, "Member 'ABP_AJBInGameCharacter_C::TargetYawInputValueOnEasyOperation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, YawSpeedIndoorOnEasyOperation) == 0x00166C, "Member 'ABP_AJBInGameCharacter_C::YawSpeedIndoorOnEasyOperation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bEnableUpdateCriticalTimeServer) == 0x001670, "Member 'ABP_AJBInGameCharacter_C::bEnableUpdateCriticalTimeServer' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CF_EeasyOperation_Movement) == 0x001678, "Member 'ABP_AJBInGameCharacter_C::CF_EeasyOperation_Movement' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CF_EeasyOperation_Camera) == 0x001680, "Member 'ABP_AJBInGameCharacter_C::CF_EeasyOperation_Camera' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CameraSpeedScaleonEasyOperation) == 0x001688, "Member 'ABP_AJBInGameCharacter_C::CameraSpeedScaleonEasyOperation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, TargetCameraSpeedScaleonEasyOperation) == 0x00168C, "Member 'ABP_AJBInGameCharacter_C::TargetCameraSpeedScaleonEasyOperation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CF_ResetCameraPitchTarget) == 0x001690, "Member 'ABP_AJBInGameCharacter_C::CF_ResetCameraPitchTarget' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, MoveInputResetCameraPitch) == 0x001698, "Member 'ABP_AJBInGameCharacter_C::MoveInputResetCameraPitch' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, RotateSpeedResetCameraPitch) == 0x00169C, "Member 'ABP_AJBInGameCharacter_C::RotateSpeedResetCameraPitch' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, ResetCameraPitchMin) == 0x0016A0, "Member 'ABP_AJBInGameCharacter_C::ResetCameraPitchMin' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, ResetCameraPitchMax) == 0x0016A4, "Member 'ABP_AJBInGameCharacter_C::ResetCameraPitchMax' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bShouldAimDrag) == 0x0016A8, "Member 'ABP_AJBInGameCharacter_C::bShouldAimDrag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, AimDragDistance) == 0x0016AC, "Member 'ABP_AJBInGameCharacter_C::AimDragDistance' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, AimDragRadius) == 0x0016B0, "Member 'ABP_AJBInGameCharacter_C::AimDragRadius' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, AddYawInputByEasyOperation) == 0x0016B4, "Member 'ABP_AJBInGameCharacter_C::AddYawInputByEasyOperation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OverrideDefaultAP) == 0x0016B8, "Member 'ABP_AJBInGameCharacter_C::OverrideDefaultAP' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, PossibleGetItem) == 0x0016BC, "Member 'ABP_AJBInGameCharacter_C::PossibleGetItem' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, EndureRestoreHP) == 0x0016C0, "Member 'ABP_AJBInGameCharacter_C::EndureRestoreHP' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, IsVampire) == 0x0016C4, "Member 'ABP_AJBInGameCharacter_C::IsVampire' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CalcedMinLandingStopTime) == 0x0016C8, "Member 'ABP_AJBInGameCharacter_C::CalcedMinLandingStopTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CalcedMaxLandingStopTime) == 0x0016CC, "Member 'ABP_AJBInGameCharacter_C::CalcedMaxLandingStopTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, DefaultBeforeLandingMontageAnimSeqLength) == 0x0016D0, "Member 'ABP_AJBInGameCharacter_C::DefaultBeforeLandingMontageAnimSeqLength' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnJumpAll) == 0x0016D8, "Member 'ABP_AJBInGameCharacter_C::OnJumpAll' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bCallMCJumpAll) == 0x0016E8, "Member 'ABP_AJBInGameCharacter_C::bCallMCJumpAll' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, SkillAnimationTrigger_Cancel) == 0x0016F0, "Member 'ABP_AJBInGameCharacter_C::SkillAnimationTrigger_Cancel' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, SkillAnimationTrigger_Finish) == 0x001700, "Member 'ABP_AJBInGameCharacter_C::SkillAnimationTrigger_Finish' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, HorizonalMoveAmount) == 0x001710, "Member 'ABP_AJBInGameCharacter_C::HorizonalMoveAmount' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, HorizonalMoveMin) == 0x001714, "Member 'ABP_AJBInGameCharacter_C::HorizonalMoveMin' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, HorizonalMoveMax) == 0x001718, "Member 'ABP_AJBInGameCharacter_C::HorizonalMoveMax' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, VerticalMoveAmount) == 0x00171C, "Member 'ABP_AJBInGameCharacter_C::VerticalMoveAmount' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, VerticalMoveMin) == 0x001720, "Member 'ABP_AJBInGameCharacter_C::VerticalMoveMin' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, VerticalMoveMax) == 0x001724, "Member 'ABP_AJBInGameCharacter_C::VerticalMoveMax' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bSettingsBothEyes) == 0x001728, "Member 'ABP_AJBInGameCharacter_C::bSettingsBothEyes' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, HorizonalMoveMinR) == 0x00172C, "Member 'ABP_AJBInGameCharacter_C::HorizonalMoveMinR' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, HorizonalMoveMaxR) == 0x001730, "Member 'ABP_AJBInGameCharacter_C::HorizonalMoveMaxR' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, VerticalMoveMinR) == 0x001734, "Member 'ABP_AJBInGameCharacter_C::VerticalMoveMinR' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, VerticalMoveMaxR) == 0x001738, "Member 'ABP_AJBInGameCharacter_C::VerticalMoveMaxR' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, HorizonalMoveMinL) == 0x00173C, "Member 'ABP_AJBInGameCharacter_C::HorizonalMoveMinL' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, HorizonalMoveMaxL) == 0x001740, "Member 'ABP_AJBInGameCharacter_C::HorizonalMoveMaxL' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, VerticalMoveMinL) == 0x001744, "Member 'ABP_AJBInGameCharacter_C::VerticalMoveMinL' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, VerticalMoveMaxL) == 0x001748, "Member 'ABP_AJBInGameCharacter_C::VerticalMoveMaxL' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, IsDelayedSpecialDeath) == 0x00174C, "Member 'ABP_AJBInGameCharacter_C::IsDelayedSpecialDeath' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, KnockbackRate) == 0x001750, "Member 'ABP_AJBInGameCharacter_C::KnockbackRate' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, IsDying) == 0x001754, "Member 'ABP_AJBInGameCharacter_C::IsDying' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, ConsumeMPRate) == 0x001758, "Member 'ABP_AJBInGameCharacter_C::ConsumeMPRate' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, SPLocal) == 0x00175C, "Member 'ABP_AJBInGameCharacter_C::SPLocal' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, StandAttackRate) == 0x001760, "Member 'ABP_AJBInGameCharacter_C::StandAttackRate' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, bIgnoreSprinkleServer) == 0x001764, "Member 'ABP_AJBInGameCharacter_C::bIgnoreSprinkleServer' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, IsEnabledMaxSpeedOverride) == 0x001765, "Member 'ABP_AJBInGameCharacter_C::IsEnabledMaxSpeedOverride' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OverriddenMaxSpeed) == 0x001768, "Member 'ABP_AJBInGameCharacter_C::OverriddenMaxSpeed' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, IsEnabledMaxAccelerationOverride) == 0x00176C, "Member 'ABP_AJBInGameCharacter_C::IsEnabledMaxAccelerationOverride' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OverriddenMaxAcceleration) == 0x001770, "Member 'ABP_AJBInGameCharacter_C::OverriddenMaxAcceleration' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, IsEnabledWalkingStateOverride) == 0x001774, "Member 'ABP_AJBInGameCharacter_C::IsEnabledWalkingStateOverride' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, AM_DeadStartOnDowned) == 0x001778, "Member 'ABP_AJBInGameCharacter_C::AM_DeadStartOnDowned' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, AM_DeadStart) == 0x001780, "Member 'ABP_AJBInGameCharacter_C::AM_DeadStart' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, CloseRangeAttackRange) == 0x001788, "Member 'ABP_AJBInGameCharacter_C::CloseRangeAttackRange' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, TimeToReviveOnTimeStop) == 0x00178C, "Member 'ABP_AJBInGameCharacter_C::TimeToReviveOnTimeStop' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, OnRewindBitesTheDust_Server) == 0x001790, "Member 'ABP_AJBInGameCharacter_C::OnRewindBitesTheDust_Server' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Rep_CollectedMatchingPlayerIndex) == 0x0017A0, "Member 'ABP_AJBInGameCharacter_C::Rep_CollectedMatchingPlayerIndex' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C, Rep_CollectingMatchingPlayerIndex) == 0x0017A4, "Member 'ABP_AJBInGameCharacter_C::Rep_CollectingMatchingPlayerIndex' has a wrong offset!");

}

