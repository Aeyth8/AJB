#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBReadiness

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BP_AJBPassiveSkillBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBReadiness.BP_AJBReadiness_C
// 0x0030 (0x0240 - 0x0210)
class UBP_AJBReadiness_C final : public UBP_AJBPassiveSkillBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBReadiness_C;                  // 0x0210(0x0008)(Transient, DuplicateTransient)
	float                                         HealingMPSpeedScale;                               // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Defence___;                                        // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EndParticleTag;                                    // 0x0220(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         CloseRangeAttackRangeScale;                        // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22C[0x4];                                      // 0x022C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           FinishedPassiveSETag;                              // 0x0230(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         DurabilityLeftHP;                                  // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KnockbackRate;                                     // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBReadiness(int32 EntryPoint);
	void ActiveReadinessUI();
	void SpawnEndEffect();
	void ChangeReadinessStatus(bool bEnable);
	void OnContinuedParticleActivated();
	void ReceiveBeginPlay();
	void OnActionInactivate(bool bTriggeredByStand);
	void OnActionActivate(bool bTriggeredByStand);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBReadiness_C">();
	}
	static class UBP_AJBReadiness_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBReadiness_C>();
	}
};
static_assert(alignof(UBP_AJBReadiness_C) == 0x000008, "Wrong alignment on UBP_AJBReadiness_C");
static_assert(sizeof(UBP_AJBReadiness_C) == 0x000240, "Wrong size on UBP_AJBReadiness_C");
static_assert(offsetof(UBP_AJBReadiness_C, UberGraphFrame_BP_AJBReadiness_C) == 0x000210, "Member 'UBP_AJBReadiness_C::UberGraphFrame_BP_AJBReadiness_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBReadiness_C, HealingMPSpeedScale) == 0x000218, "Member 'UBP_AJBReadiness_C::HealingMPSpeedScale' has a wrong offset!");
static_assert(offsetof(UBP_AJBReadiness_C, Defence___) == 0x00021C, "Member 'UBP_AJBReadiness_C::Defence___' has a wrong offset!");
static_assert(offsetof(UBP_AJBReadiness_C, EndParticleTag) == 0x000220, "Member 'UBP_AJBReadiness_C::EndParticleTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBReadiness_C, CloseRangeAttackRangeScale) == 0x000228, "Member 'UBP_AJBReadiness_C::CloseRangeAttackRangeScale' has a wrong offset!");
static_assert(offsetof(UBP_AJBReadiness_C, FinishedPassiveSETag) == 0x000230, "Member 'UBP_AJBReadiness_C::FinishedPassiveSETag' has a wrong offset!");
static_assert(offsetof(UBP_AJBReadiness_C, DurabilityLeftHP) == 0x000238, "Member 'UBP_AJBReadiness_C::DurabilityLeftHP' has a wrong offset!");
static_assert(offsetof(UBP_AJBReadiness_C, KnockbackRate) == 0x00023C, "Member 'UBP_AJBReadiness_C::KnockbackRate' has a wrong offset!");

}

