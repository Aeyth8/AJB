#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_AJBInGameStandPart_SFGArm

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AJB_structs.hpp"
#include "E_SFGArmType_structs.hpp"


namespace SDK::Params
{

// Function ABP_AJBInGameStandPart_SFGArm.ABP_AJBInGameStandPart_SFGArm_C.ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm
// 0x01A0 (0x01A0 - 0x0000)
struct ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable1;                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable2;                              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable3;                              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaTimeX;                           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloat_ReturnValue;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsStretching_Result;                      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLaunching_Result;                       // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwningActor_ReturnValue;               // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameStandPart_SFGArm_C*        K2Node_DynamicCast_AsBP_AJBIn_Game_Stand_Part_SFGArm; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameStand_SFG_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Stand_SFG;      // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SFGArmType                                  Temp_byte_Variable;                                // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_LaunchPart_PairOfOne_C*             Temp_object_Variable;                              // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SFGArmType                                  Temp_byte_Variable1;                               // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_LaunchPart_PairOfOne_C*             K2Node_Select1_Default;                            // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00A4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00B0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable4;                              // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue3;         // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select2_Default;                            // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00D0(0x000C)(IsPlainOldData, NoDestructor)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     CallFunc_CalcSplineIKPointTransforms_Result;       // 0x00E0(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F4[0xC];                                       // 0x00F4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_Array_Get_Item;                           // 0x0100(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0134(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0140(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x014C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0158(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_164[0xC];                                      // 0x0164(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0170(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm) == 0x000010, "Wrong alignment on ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm");
static_assert(sizeof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm) == 0x0001A0, "Wrong size on ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, EntryPoint) == 0x000000, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, Temp_float_Variable) == 0x000004, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, Temp_float_Variable1) == 0x000008, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::Temp_float_Variable1' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, Temp_float_Variable2) == 0x00000C, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::Temp_float_Variable2' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, Temp_float_Variable3) == 0x000010, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::Temp_float_Variable3' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, Temp_int_Array_Index_Variable) == 0x000014, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, Temp_bool_Variable) == 0x000018, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, K2Node_Event_DeltaTimeX) == 0x00001C, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, CallFunc_RandomFloat_ReturnValue) == 0x000020, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::CallFunc_RandomFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, CallFunc_Not_PreBool_ReturnValue) == 0x000024, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000028, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, CallFunc_BooleanAND_ReturnValue) == 0x00002C, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000030, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, CallFunc_IsStretching_Result) == 0x000034, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::CallFunc_IsStretching_Result' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, CallFunc_IsLaunching_Result) == 0x000035, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::CallFunc_IsLaunching_Result' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, CallFunc_GetOwningActor_ReturnValue) == 0x000038, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::CallFunc_GetOwningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, K2Node_DynamicCast_AsBP_AJBIn_Game_Stand_Part_SFGArm) == 0x000040, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::K2Node_DynamicCast_AsBP_AJBIn_Game_Stand_Part_SFGArm' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, CallFunc_GetOwner_ReturnValue) == 0x000050, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, K2Node_DynamicCast_AsBP_AJBIn_Game_Stand_SFG) == 0x000058, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::K2Node_DynamicCast_AsBP_AJBIn_Game_Stand_SFG' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, K2Node_DynamicCast_bSuccess1) == 0x000060, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, CallFunc_IsValid_ReturnValue) == 0x000061, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, CallFunc_Array_Length_ReturnValue) == 0x000064, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, Temp_byte_Variable) == 0x000068, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, Temp_object_Variable) == 0x000070, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, K2Node_Select_Default) == 0x000078, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, Temp_byte_Variable1) == 0x00007C, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, CallFunc_BreakVector_X) == 0x000080, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, CallFunc_BreakVector_Y) == 0x000084, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, CallFunc_BreakVector_Z) == 0x000088, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, K2Node_Select1_Default) == 0x000090, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x000098, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, CallFunc_IsValid_ReturnValue1) == 0x00009C, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x0000A0, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, CallFunc_MakeVector_ReturnValue) == 0x0000A4, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000B0, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, Temp_int_Loop_Counter_Variable) == 0x0000BC, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, CallFunc_Add_IntInt_ReturnValue) == 0x0000C0, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, Temp_float_Variable4) == 0x0000C4, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::Temp_float_Variable4' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, CallFunc_Multiply_FloatFloat_ReturnValue3) == 0x0000C8, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::CallFunc_Multiply_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, K2Node_Select2_Default) == 0x0000CC, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, CallFunc_MakeRotator_ReturnValue) == 0x0000D0, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, CallFunc_CalcSplineIKPointTransforms_Result) == 0x0000E0, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::CallFunc_CalcSplineIKPointTransforms_Result' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, CallFunc_Array_Length_ReturnValue1) == 0x0000F0, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, CallFunc_Array_Get_Item) == 0x000100, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, CallFunc_Less_IntInt_ReturnValue) == 0x000130, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, CallFunc_BreakTransform_Location) == 0x000134, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, CallFunc_BreakTransform_Rotation) == 0x000140, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, CallFunc_BreakTransform_Scale) == 0x00014C, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000158, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm, CallFunc_MakeTransform_ReturnValue) == 0x000170, "Member 'ABP_AJBInGameStandPart_SFGArm_C_ExecuteUbergraph_ABP_AJBInGameStandPart_SFGArm::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");

// Function ABP_AJBInGameStandPart_SFGArm.ABP_AJBInGameStandPart_SFGArm_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_AJBInGameStandPart_SFGArm_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_AJBInGameStandPart_SFGArm_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_AJBInGameStandPart_SFGArm_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_AJBInGameStandPart_SFGArm_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_AJBInGameStandPart_SFGArm_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ABP_AJBInGameStandPart_SFGArm_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ABP_AJBInGameStandPart_SFGArm.ABP_AJBInGameStandPart_SFGArm_C.IsStretching
// 0x0018 (0x0018 - 0x0000)
struct ABP_AJBInGameStandPart_SFGArm_C_IsStretching final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable1;                               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable2;                               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable3;                               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable4;                               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESkillState_CloseRange                        Temp_byte_Variable;                                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBCloseRangeSkill_C*               CallFunc_TryGetCloseRangeSkillComp_CloseRangeSkillComp; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSkillActive_ReturnValue;                // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_AJBInGameStandPart_SFGArm_C_IsStretching) == 0x000008, "Wrong alignment on ABP_AJBInGameStandPart_SFGArm_C_IsStretching");
static_assert(sizeof(ABP_AJBInGameStandPart_SFGArm_C_IsStretching) == 0x000018, "Wrong size on ABP_AJBInGameStandPart_SFGArm_C_IsStretching");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_IsStretching, Result) == 0x000000, "Member 'ABP_AJBInGameStandPart_SFGArm_C_IsStretching::Result' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_IsStretching, Temp_bool_Variable) == 0x000001, "Member 'ABP_AJBInGameStandPart_SFGArm_C_IsStretching::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_IsStretching, Temp_bool_Variable1) == 0x000002, "Member 'ABP_AJBInGameStandPart_SFGArm_C_IsStretching::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_IsStretching, Temp_bool_Variable2) == 0x000003, "Member 'ABP_AJBInGameStandPart_SFGArm_C_IsStretching::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_IsStretching, Temp_bool_Variable3) == 0x000004, "Member 'ABP_AJBInGameStandPart_SFGArm_C_IsStretching::Temp_bool_Variable3' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_IsStretching, Temp_bool_Variable4) == 0x000005, "Member 'ABP_AJBInGameStandPart_SFGArm_C_IsStretching::Temp_bool_Variable4' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_IsStretching, Temp_byte_Variable) == 0x000006, "Member 'ABP_AJBInGameStandPart_SFGArm_C_IsStretching::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_IsStretching, CallFunc_TryGetCloseRangeSkillComp_CloseRangeSkillComp) == 0x000008, "Member 'ABP_AJBInGameStandPart_SFGArm_C_IsStretching::CallFunc_TryGetCloseRangeSkillComp_CloseRangeSkillComp' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_IsStretching, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'ABP_AJBInGameStandPart_SFGArm_C_IsStretching::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_IsStretching, CallFunc_GetValidValue_ReturnValue) == 0x000011, "Member 'ABP_AJBInGameStandPart_SFGArm_C_IsStretching::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_IsStretching, CallFunc_IsSkillActive_ReturnValue) == 0x000012, "Member 'ABP_AJBInGameStandPart_SFGArm_C_IsStretching::CallFunc_IsSkillActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_IsStretching, K2Node_Select_Default) == 0x000013, "Member 'ABP_AJBInGameStandPart_SFGArm_C_IsStretching::K2Node_Select_Default' has a wrong offset!");

// Function ABP_AJBInGameStandPart_SFGArm.ABP_AJBInGameStandPart_SFGArm_C.TryGetCloseRangeSkillComp
// 0x0048 (0x0048 - 0x0000)
struct ABP_AJBInGameStandPart_SFGArm_C_TryGetCloseRangeSkillComp final
{
public:
	class UBP_AJBCloseRangeSkill_C*               CloseRangeSkillComp;                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwningActor_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBMiddleRangeSkill_C*              CallFunc_GetComponentByClass_ReturnValue;          // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue3;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_AJBInGameStandPart_SFGArm_C_TryGetCloseRangeSkillComp) == 0x000008, "Wrong alignment on ABP_AJBInGameStandPart_SFGArm_C_TryGetCloseRangeSkillComp");
static_assert(sizeof(ABP_AJBInGameStandPart_SFGArm_C_TryGetCloseRangeSkillComp) == 0x000048, "Wrong size on ABP_AJBInGameStandPart_SFGArm_C_TryGetCloseRangeSkillComp");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_TryGetCloseRangeSkillComp, CloseRangeSkillComp) == 0x000000, "Member 'ABP_AJBInGameStandPart_SFGArm_C_TryGetCloseRangeSkillComp::CloseRangeSkillComp' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_TryGetCloseRangeSkillComp, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'ABP_AJBInGameStandPart_SFGArm_C_TryGetCloseRangeSkillComp::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_TryGetCloseRangeSkillComp, CallFunc_GetOwningActor_ReturnValue) == 0x000010, "Member 'ABP_AJBInGameStandPart_SFGArm_C_TryGetCloseRangeSkillComp::CallFunc_GetOwningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_TryGetCloseRangeSkillComp, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'ABP_AJBInGameStandPart_SFGArm_C_TryGetCloseRangeSkillComp::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_TryGetCloseRangeSkillComp, CallFunc_IsValid_ReturnValue1) == 0x000020, "Member 'ABP_AJBInGameStandPart_SFGArm_C_TryGetCloseRangeSkillComp::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_TryGetCloseRangeSkillComp, CallFunc_GetOwner_ReturnValue1) == 0x000028, "Member 'ABP_AJBInGameStandPart_SFGArm_C_TryGetCloseRangeSkillComp::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_TryGetCloseRangeSkillComp, CallFunc_IsValid_ReturnValue2) == 0x000030, "Member 'ABP_AJBInGameStandPart_SFGArm_C_TryGetCloseRangeSkillComp::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_TryGetCloseRangeSkillComp, CallFunc_GetComponentByClass_ReturnValue) == 0x000038, "Member 'ABP_AJBInGameStandPart_SFGArm_C_TryGetCloseRangeSkillComp::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_TryGetCloseRangeSkillComp, CallFunc_IsValid_ReturnValue3) == 0x000040, "Member 'ABP_AJBInGameStandPart_SFGArm_C_TryGetCloseRangeSkillComp::CallFunc_IsValid_ReturnValue3' has a wrong offset!");

// Function ABP_AJBInGameStandPart_SFGArm.ABP_AJBInGameStandPart_SFGArm_C.IsLaunching
// 0x0018 (0x0018 - 0x0000)
struct ABP_AJBInGameStandPart_SFGArm_C_IsLaunching final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable1;                               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable2;                               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable3;                               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable4;                               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESkillState_CloseRange                        Temp_byte_Variable;                                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBCloseRangeSkill_C*               CallFunc_TryGetCloseRangeSkillComp_CloseRangeSkillComp; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSkillActive_ReturnValue;                // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_AJBInGameStandPart_SFGArm_C_IsLaunching) == 0x000008, "Wrong alignment on ABP_AJBInGameStandPart_SFGArm_C_IsLaunching");
static_assert(sizeof(ABP_AJBInGameStandPart_SFGArm_C_IsLaunching) == 0x000018, "Wrong size on ABP_AJBInGameStandPart_SFGArm_C_IsLaunching");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_IsLaunching, Result) == 0x000000, "Member 'ABP_AJBInGameStandPart_SFGArm_C_IsLaunching::Result' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_IsLaunching, Temp_bool_Variable) == 0x000001, "Member 'ABP_AJBInGameStandPart_SFGArm_C_IsLaunching::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_IsLaunching, Temp_bool_Variable1) == 0x000002, "Member 'ABP_AJBInGameStandPart_SFGArm_C_IsLaunching::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_IsLaunching, Temp_bool_Variable2) == 0x000003, "Member 'ABP_AJBInGameStandPart_SFGArm_C_IsLaunching::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_IsLaunching, Temp_bool_Variable3) == 0x000004, "Member 'ABP_AJBInGameStandPart_SFGArm_C_IsLaunching::Temp_bool_Variable3' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_IsLaunching, Temp_bool_Variable4) == 0x000005, "Member 'ABP_AJBInGameStandPart_SFGArm_C_IsLaunching::Temp_bool_Variable4' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_IsLaunching, Temp_byte_Variable) == 0x000006, "Member 'ABP_AJBInGameStandPart_SFGArm_C_IsLaunching::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_IsLaunching, CallFunc_TryGetCloseRangeSkillComp_CloseRangeSkillComp) == 0x000008, "Member 'ABP_AJBInGameStandPart_SFGArm_C_IsLaunching::CallFunc_TryGetCloseRangeSkillComp_CloseRangeSkillComp' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_IsLaunching, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'ABP_AJBInGameStandPart_SFGArm_C_IsLaunching::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_IsLaunching, CallFunc_GetValidValue_ReturnValue) == 0x000011, "Member 'ABP_AJBInGameStandPart_SFGArm_C_IsLaunching::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_IsLaunching, CallFunc_IsSkillActive_ReturnValue) == 0x000012, "Member 'ABP_AJBInGameStandPart_SFGArm_C_IsLaunching::CallFunc_IsSkillActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStandPart_SFGArm_C_IsLaunching, K2Node_Select_Default) == 0x000013, "Member 'ABP_AJBInGameStandPart_SFGArm_C_IsLaunching::K2Node_Select_Default' has a wrong offset!");

}

