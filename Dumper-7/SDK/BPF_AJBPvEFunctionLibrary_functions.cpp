#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPF_AJBPvEFunctionLibrary

#include "Basic.hpp"

#include "BPF_AJBPvEFunctionLibrary_classes.hpp"
#include "BPF_AJBPvEFunctionLibrary_parameters.hpp"


namespace SDK
{

// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.GetAJBPvEGameState
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ABP_AJBPvEGameState_C**           BP_AJB_PvE_GameState                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPF_AJBPvEFunctionLibrary_C::GetAJBPvEGameState(class UObject* __WorldContext, bool* IsValid, class ABP_AJBPvEGameState_C** BP_AJB_PvE_GameState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBPvEFunctionLibrary_C", "GetAJBPvEGameState");

	Params::BPF_AJBPvEFunctionLibrary_C_GetAJBPvEGameState Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;

	if (BP_AJB_PvE_GameState != nullptr)
		*BP_AJB_PvE_GameState = Parms.BP_AJB_PvE_GameState;
}


// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.IsPvENPC
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsPvENPC_0                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPF_AJBPvEFunctionLibrary_C::IsPvENPC(class AActor* Object, class UObject* __WorldContext, bool* IsPvENPC_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBPvEFunctionLibrary_C", "IsPvENPC");

	Params::BPF_AJBPvEFunctionLibrary_C_IsPvENPC Parms{};

	Parms.Object = Object;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (IsPvENPC_0 != nullptr)
		*IsPvENPC_0 = Parms.IsPvENPC_0;
}


// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.GetDroppedItemClassRandomly
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPvEGameDifficulty                      TargetDifficulty                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TargetWaveIndex                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass**                          ItemClass                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPF_AJBPvEFunctionLibrary_C::GetDroppedItemClassRandomly(EPvEGameDifficulty TargetDifficulty, int32 TargetWaveIndex, class UObject* __WorldContext, class UClass** ItemClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBPvEFunctionLibrary_C", "GetDroppedItemClassRandomly");

	Params::BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly Parms{};

	Parms.TargetDifficulty = TargetDifficulty;
	Parms.TargetWaveIndex = TargetWaveIndex;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (ItemClass != nullptr)
		*ItemClass = Parms.ItemClass;
}


// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.FindDroppedItemTable
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPvEGameDifficulty                      TargetDifficulty                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TargetWaveIndex                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FST_AJBInGamePvE_DroppedItemTableRow*Out_Row                                                (Parm, OutParm, HasGetValueTypeHash)

void UBPF_AJBPvEFunctionLibrary_C::FindDroppedItemTable(EPvEGameDifficulty TargetDifficulty, int32 TargetWaveIndex, class UObject* __WorldContext, struct FST_AJBInGamePvE_DroppedItemTableRow* Out_Row)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBPvEFunctionLibrary_C", "FindDroppedItemTable");

	Params::BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable Parms{};

	Parms.TargetDifficulty = TargetDifficulty;
	Parms.TargetWaveIndex = TargetWaveIndex;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Out_Row != nullptr)
		*Out_Row = std::move(Parms.Out_Row);
}


// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.GetRandomIndexWithProbability
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<float>&                          Probabilities                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// float                                   MaxProbability                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsHitItem                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float*                                  HitProbability                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  HitItemIndex                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPF_AJBPvEFunctionLibrary_C::GetRandomIndexWithProbability(TArray<float>& Probabilities, float MaxProbability, class UObject* __WorldContext, bool* IsHitItem, float* HitProbability, int32* HitItemIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBPvEFunctionLibrary_C", "GetRandomIndexWithProbability");

	Params::BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability Parms{};

	Parms.Probabilities = std::move(Probabilities);
	Parms.MaxProbability = MaxProbability;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Probabilities = std::move(Parms.Probabilities);

	if (IsHitItem != nullptr)
		*IsHitItem = Parms.IsHitItem;

	if (HitProbability != nullptr)
		*HitProbability = Parms.HitProbability;

	if (HitItemIndex != nullptr)
		*HitItemIndex = Parms.HitItemIndex;
}


// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.TerminateNPC
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPF_AJBPvEFunctionLibrary_C::TerminateNPC(class AActor* Target, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBPvEFunctionLibrary_C", "TerminateNPC");

	Params::BPF_AJBPvEFunctionLibrary_C_TerminateNPC Parms{};

	Parms.Target = Target;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.SuspendDeadNPC
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPF_AJBPvEFunctionLibrary_C::SuspendDeadNPC(class AActor* Target, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBPvEFunctionLibrary_C", "SuspendDeadNPC");

	Params::BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC Parms{};

	Parms.Target = Target;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.GetDelayedCleaningNPCTime
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  DelayedTime                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPF_AJBPvEFunctionLibrary_C::GetDelayedCleaningNPCTime(class UObject* __WorldContext, float* DelayedTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBPvEFunctionLibrary_C", "GetDelayedCleaningNPCTime");

	Params::BPF_AJBPvEFunctionLibrary_C_GetDelayedCleaningNPCTime Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (DelayedTime != nullptr)
		*DelayedTime = Parms.DelayedTime;
}


// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.SetPvEDifficulty
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPvEGameDifficulty                      NewDifficulty                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPF_AJBPvEFunctionLibrary_C::SetPvEDifficulty(EPvEGameDifficulty NewDifficulty, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBPvEFunctionLibrary_C", "SetPvEDifficulty");

	Params::BPF_AJBPvEFunctionLibrary_C_SetPvEDifficulty Parms{};

	Parms.NewDifficulty = NewDifficulty;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.GetPvEDifficulty
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPvEGameDifficulty*                     Difficulty                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPF_AJBPvEFunctionLibrary_C::GetPvEDifficulty(class UObject* __WorldContext, EPvEGameDifficulty* Difficulty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBPvEFunctionLibrary_C", "GetPvEDifficulty");

	Params::BPF_AJBPvEFunctionLibrary_C_GetPvEDifficulty Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Difficulty != nullptr)
		*Difficulty = Parms.Difficulty;
}


// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.GetAILevelForPvE
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EPvEGameDifficulty                      Difficulty                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8*                                  AI_Level                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPF_AJBPvEFunctionLibrary_C::GetAILevelForPvE(EPvEGameDifficulty Difficulty, class UObject* __WorldContext, uint8* AI_Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBPvEFunctionLibrary_C", "GetAILevelForPvE");

	Params::BPF_AJBPvEFunctionLibrary_C_GetAILevelForPvE Parms{};

	Parms.Difficulty = Difficulty;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (AI_Level != nullptr)
		*AI_Level = Parms.AI_Level;
}


// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.CastPvEDifficultyNumToEnum
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   DifficultyNum                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPvEGameDifficulty*                     Difficulty                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPF_AJBPvEFunctionLibrary_C::CastPvEDifficultyNumToEnum(int32 DifficultyNum, class UObject* __WorldContext, EPvEGameDifficulty* Difficulty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBPvEFunctionLibrary_C", "CastPvEDifficultyNumToEnum");

	Params::BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyNumToEnum Parms{};

	Parms.DifficultyNum = DifficultyNum;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Difficulty != nullptr)
		*Difficulty = Parms.Difficulty;
}


// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.CastPvEDifficultyToNum
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EPvEGameDifficulty                      Difficulty                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  DifficultyNum                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPF_AJBPvEFunctionLibrary_C::CastPvEDifficultyToNum(EPvEGameDifficulty Difficulty, class UObject* __WorldContext, int32* DifficultyNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBPvEFunctionLibrary_C", "CastPvEDifficultyToNum");

	Params::BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyToNum Parms{};

	Parms.Difficulty = Difficulty;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (DifficultyNum != nullptr)
		*DifficultyNum = Parms.DifficultyNum;
}


// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.GetPvECurrentPhase
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_AJBInGamePvE_GamePhase*               CurrentPhase                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPF_AJBPvEFunctionLibrary_C::GetPvECurrentPhase(class UObject* __WorldContext, E_AJBInGamePvE_GamePhase* CurrentPhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBPvEFunctionLibrary_C", "GetPvECurrentPhase");

	Params::BPF_AJBPvEFunctionLibrary_C_GetPvECurrentPhase Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (CurrentPhase != nullptr)
		*CurrentPhase = Parms.CurrentPhase;
}


// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.IsEnabledToSpawnEnemy
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsEnabled                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPF_AJBPvEFunctionLibrary_C::IsEnabledToSpawnEnemy(class UObject* __WorldContext, bool* IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBPvEFunctionLibrary_C", "IsEnabledToSpawnEnemy");

	Params::BPF_AJBPvEFunctionLibrary_C_IsEnabledToSpawnEnemy Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (IsEnabled != nullptr)
		*IsEnabled = Parms.IsEnabled;
}


// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.HasPvEGameFinished
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   HasFinished                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPF_AJBPvEFunctionLibrary_C::HasPvEGameFinished(class UObject* __WorldContext, bool* HasFinished)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBPvEFunctionLibrary_C", "HasPvEGameFinished");

	Params::BPF_AJBPvEFunctionLibrary_C_HasPvEGameFinished Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (HasFinished != nullptr)
		*HasFinished = Parms.HasFinished;
}


// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.IsPvELastWave
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsLastWave                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPF_AJBPvEFunctionLibrary_C::IsPvELastWave(class UObject* __WorldContext, bool* IsLastWave)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBPvEFunctionLibrary_C", "IsPvELastWave");

	Params::BPF_AJBPvEFunctionLibrary_C_IsPvELastWave Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (IsLastWave != nullptr)
		*IsLastWave = Parms.IsLastWave;
}


// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.GetPvECurrentWaveIndex
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  WaveIndex                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPF_AJBPvEFunctionLibrary_C::GetPvECurrentWaveIndex(class UObject* __WorldContext, int32* WaveIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBPvEFunctionLibrary_C", "GetPvECurrentWaveIndex");

	Params::BPF_AJBPvEFunctionLibrary_C_GetPvECurrentWaveIndex Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (WaveIndex != nullptr)
		*WaveIndex = Parms.WaveIndex;
}


// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.GetPvELastWaveIndex
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  LastWaveIndex                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPF_AJBPvEFunctionLibrary_C::GetPvELastWaveIndex(class UObject* __WorldContext, int32* LastWaveIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBPvEFunctionLibrary_C", "GetPvELastWaveIndex");

	Params::BPF_AJBPvEFunctionLibrary_C_GetPvELastWaveIndex Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (LastWaveIndex != nullptr)
		*LastWaveIndex = Parms.LastWaveIndex;
}


// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.GetAJBInGamePvEHUD
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ABP_AJBInGamePvEHUD_C**           InGamePvEHUD                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPF_AJBPvEFunctionLibrary_C::GetAJBInGamePvEHUD(class UObject* __WorldContext, bool* bSuccess, class ABP_AJBInGamePvEHUD_C** InGamePvEHUD)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBPvEFunctionLibrary_C", "GetAJBInGamePvEHUD");

	Params::BPF_AJBPvEFunctionLibrary_C_GetAJBInGamePvEHUD Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;

	if (InGamePvEHUD != nullptr)
		*InGamePvEHUD = Parms.InGamePvEHUD;
}


// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.GetPvEScoreRankDBIVoiceTag
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FST_AJBPvEScoreResult&     Result                                                 (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag*                    VoiceTag                                               (Parm, OutParm, NoDestructor, HasGetValueTypeHash)

void UBPF_AJBPvEFunctionLibrary_C::GetPvEScoreRankDBIVoiceTag(const struct FST_AJBPvEScoreResult& Result, class UObject* __WorldContext, struct FGameplayTag* VoiceTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBPvEFunctionLibrary_C", "GetPvEScoreRankDBIVoiceTag");

	Params::BPF_AJBPvEFunctionLibrary_C_GetPvEScoreRankDBIVoiceTag Parms{};

	Parms.Result = std::move(Result);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (VoiceTag != nullptr)
		*VoiceTag = std::move(Parms.VoiceTag);
}


// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.GetPvEBeginWaveDBIVoiceTag
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   WaveIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

struct FGameplayTag UBPF_AJBPvEFunctionLibrary_C::GetPvEBeginWaveDBIVoiceTag(int32 WaveIndex, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBPvEFunctionLibrary_C", "GetPvEBeginWaveDBIVoiceTag");

	Params::BPF_AJBPvEFunctionLibrary_C_GetPvEBeginWaveDBIVoiceTag Parms{};

	Parms.WaveIndex = WaveIndex;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.GetPvEEndWaveDBIVoiceTag
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   WaveIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)

struct FGameplayTag UBPF_AJBPvEFunctionLibrary_C::GetPvEEndWaveDBIVoiceTag(int32 WaveIndex, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBPvEFunctionLibrary_C", "GetPvEEndWaveDBIVoiceTag");

	Params::BPF_AJBPvEFunctionLibrary_C_GetPvEEndWaveDBIVoiceTag Parms{};

	Parms.WaveIndex = WaveIndex;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.GetPvERemainingTimeInPhase
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  RemainingTimeInPhase                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPF_AJBPvEFunctionLibrary_C::GetPvERemainingTimeInPhase(class UObject* __WorldContext, float* RemainingTimeInPhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBPvEFunctionLibrary_C", "GetPvERemainingTimeInPhase");

	Params::BPF_AJBPvEFunctionLibrary_C_GetPvERemainingTimeInPhase Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (RemainingTimeInPhase != nullptr)
		*RemainingTimeInPhase = Parms.RemainingTimeInPhase;
}


// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.GetPvEPhaseManager
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_AJBInGamePvE_PhaseManager_C** PhaseManager                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPF_AJBPvEFunctionLibrary_C::GetPvEPhaseManager(class UObject* __WorldContext, class ABP_AJBInGamePvE_PhaseManager_C** PhaseManager)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBPvEFunctionLibrary_C", "GetPvEPhaseManager");

	Params::BPF_AJBPvEFunctionLibrary_C_GetPvEPhaseManager Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (PhaseManager != nullptr)
		*PhaseManager = Parms.PhaseManager;
}


// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.GetPvESpawnManager
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_AJBInGamePvE_EnemySpawnManager_C**SpawnManager                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPF_AJBPvEFunctionLibrary_C::GetPvESpawnManager(class UObject* __WorldContext, class ABP_AJBInGamePvE_EnemySpawnManager_C** SpawnManager)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBPvEFunctionLibrary_C", "GetPvESpawnManager");

	Params::BPF_AJBPvEFunctionLibrary_C_GetPvESpawnManager Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (SpawnManager != nullptr)
		*SpawnManager = Parms.SpawnManager;
}


// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.Debug_GetOrDefaults_Float
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<float>&                          Array                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DefaultValue                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UBPF_AJBPvEFunctionLibrary_C::Debug_GetOrDefaults_Float(TArray<float>& Array, int32 Index_0, float DefaultValue, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBPvEFunctionLibrary_C", "Debug_GetOrDefaults_Float");

	Params::BPF_AJBPvEFunctionLibrary_C_Debug_GetOrDefaults_Float Parms{};

	Parms.Array = std::move(Array);
	Parms.Index_0 = Index_0;
	Parms.DefaultValue = DefaultValue;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Array = std::move(Parms.Array);

	return Parms.ReturnValue;
}


// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.FindBossDataByID
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   BossID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FST_AJBInGamePvE_BossInfo*       BossData                                               (Parm, OutParm, HasGetValueTypeHash)

void UBPF_AJBPvEFunctionLibrary_C::FindBossDataByID(int32 BossID, class UObject* __WorldContext, struct FST_AJBInGamePvE_BossInfo* BossData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBPvEFunctionLibrary_C", "FindBossDataByID");

	Params::BPF_AJBPvEFunctionLibrary_C_FindBossDataByID Parms{};

	Parms.BossID = BossID;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (BossData != nullptr)
		*BossData = std::move(Parms.BossData);
}


// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.MakePvEEnemyInfoByTag
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FGameplayTag&              CharacterTag                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FST_AJBInGamePvE_EnemyInfo*      PvEEnemyInfo                                           (Parm, OutParm, HasGetValueTypeHash)

void UBPF_AJBPvEFunctionLibrary_C::MakePvEEnemyInfoByTag(const struct FGameplayTag& CharacterTag, class UObject* __WorldContext, struct FST_AJBInGamePvE_EnemyInfo* PvEEnemyInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBPvEFunctionLibrary_C", "MakePvEEnemyInfoByTag");

	Params::BPF_AJBPvEFunctionLibrary_C_MakePvEEnemyInfoByTag Parms{};

	Parms.CharacterTag = std::move(CharacterTag);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (PvEEnemyInfo != nullptr)
		*PvEEnemyInfo = std::move(Parms.PvEEnemyInfo);
}


// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.CleanNPC
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Delay                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPF_AJBPvEFunctionLibrary_C::CleanNPC(class AActor* Target, float Delay, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBPvEFunctionLibrary_C", "CleanNPC");

	Params::BPF_AJBPvEFunctionLibrary_C_CleanNPC Parms{};

	Parms.Target = Target;
	Parms.Delay = Delay;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.Debug_GetPvEScoreResults
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FST_AJBPvEScoreResult*           ScoreResults                                           (Parm, OutParm, HasGetValueTypeHash)

void UBPF_AJBPvEFunctionLibrary_C::Debug_GetPvEScoreResults(class UObject* __WorldContext, struct FST_AJBPvEScoreResult* ScoreResults)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBPvEFunctionLibrary_C", "Debug_GetPvEScoreResults");

	Params::BPF_AJBPvEFunctionLibrary_C_Debug_GetPvEScoreResults Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (ScoreResults != nullptr)
		*ScoreResults = std::move(Parms.ScoreResults);
}


// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.DestroyStand
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAJBInGameCharacter*              Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPF_AJBPvEFunctionLibrary_C::DestroyStand(class AAJBInGameCharacter* Target, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBPvEFunctionLibrary_C", "DestroyStand");

	Params::BPF_AJBPvEFunctionLibrary_C_DestroyStand Parms{};

	Parms.Target = Target;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.DetermineAndGetPvEScoreResults
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsIncludingBonus                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FST_AJBPvEScoreResult*           ScoreResults                                           (Parm, OutParm, HasGetValueTypeHash)

void UBPF_AJBPvEFunctionLibrary_C::DetermineAndGetPvEScoreResults(bool IsIncludingBonus, class UObject* __WorldContext, struct FST_AJBPvEScoreResult* ScoreResults)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBPvEFunctionLibrary_C", "DetermineAndGetPvEScoreResults");

	Params::BPF_AJBPvEFunctionLibrary_C_DetermineAndGetPvEScoreResults Parms{};

	Parms.IsIncludingBonus = IsIncludingBonus;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (ScoreResults != nullptr)
		*ScoreResults = std::move(Parms.ScoreResults);
}


// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.GetPvEDeterminedScoreResults
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FST_AJBPvEScoreResult*           ScoreResults                                           (Parm, OutParm, HasGetValueTypeHash)

void UBPF_AJBPvEFunctionLibrary_C::GetPvEDeterminedScoreResults(class UObject* __WorldContext, struct FST_AJBPvEScoreResult* ScoreResults)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBPvEFunctionLibrary_C", "GetPvEDeterminedScoreResults");

	Params::BPF_AJBPvEFunctionLibrary_C_GetPvEDeterminedScoreResults Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (ScoreResults != nullptr)
		*ScoreResults = std::move(Parms.ScoreResults);
}

}

