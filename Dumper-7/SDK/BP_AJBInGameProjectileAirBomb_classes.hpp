#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameProjectileAirBomb

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AJB_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_AJBInGameProjectile_Straight_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBInGameProjectileAirBomb.BP_AJBInGameProjectileAirBomb_C
// 0x0048 (0x0520 - 0x04D8)
class ABP_AJBInGameProjectileAirBomb_C final : public ABP_AJBInGameProjectile_Straight_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBInGameProjectileAirBomb_C;    // 0x04D8(0x0008)(Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Sphere1;                                           // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      ProjectileMaterialNotOwnerSideEnv;                 // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInitialVelocity;                                  // 0x04F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4F1[0x3];                                      // 0x04F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InitialVelocityTime_s_;                            // 0x04F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebugDrawReflectionInfo;                          // 0x04F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4F9[0x3];                                      // 0x04F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReflectionVector;                                  // 0x04FC(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bReflection;                                       // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_509[0x3];                                      // 0x0509(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentReflectionTime;                             // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReflectionTime;                                    // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReflectionSpeed;                                   // 0x0514(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HomingIntensity;                                   // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBInGameProjectileAirBomb(int32 EntryPoint);
	void UpdateVisualTimer();
	void CalcReflectionVector(const struct FHitResult& HitResult, struct FVector* Vector);
	void SpawnDisappearParticle();
	void GetReflectionVelocity(struct FVector* Velocity);
	void GetReflectionTimeRate(float* Rate);
	void UpdateVisual();
	void GetScaledSpeed(float* Speed_0);
	void ReceiveBeginPlay();
	void OnProjectileHit(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool FromSweep, const struct FHitResult& SweepResult, bool bHeadShot, bool bPenetrate_0, bool bFirstHit);
	void ReceiveTick(float DeltaSeconds);
	void OnROS_ProjectileHit(class AActor* HitActor, const struct FVector& HitLocation_0, const struct FVector& HitNormal_0, bool bHeadShot, bool bPenetrate_0, bool bFirstHit, float CuttingRate, bool bDisableDamage, bool bReflect, const struct FRotator& ReflectRotation, bool bBlocking, const struct FGameplayTag& ReflectSkillTag_0, bool bAvoidSkill);
	void PlayHitSE(class AActor* HitActor, const struct FVector& HitLocation_0, bool bHeadShot, EPhysicalSurface SurfaceType, float CuttingRate, bool bBlockedByAAP);
	void UserConstructionScript();
	void ShouldCheckRange(bool* bShouldCheckRange);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBInGameProjectileAirBomb_C">();
	}
	static class ABP_AJBInGameProjectileAirBomb_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBInGameProjectileAirBomb_C>();
	}
};
static_assert(alignof(ABP_AJBInGameProjectileAirBomb_C) == 0x000008, "Wrong alignment on ABP_AJBInGameProjectileAirBomb_C");
static_assert(sizeof(ABP_AJBInGameProjectileAirBomb_C) == 0x000520, "Wrong size on ABP_AJBInGameProjectileAirBomb_C");
static_assert(offsetof(ABP_AJBInGameProjectileAirBomb_C, UberGraphFrame_BP_AJBInGameProjectileAirBomb_C) == 0x0004D8, "Member 'ABP_AJBInGameProjectileAirBomb_C::UberGraphFrame_BP_AJBInGameProjectileAirBomb_C' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectileAirBomb_C, Sphere1) == 0x0004E0, "Member 'ABP_AJBInGameProjectileAirBomb_C::Sphere1' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectileAirBomb_C, ProjectileMaterialNotOwnerSideEnv) == 0x0004E8, "Member 'ABP_AJBInGameProjectileAirBomb_C::ProjectileMaterialNotOwnerSideEnv' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectileAirBomb_C, bInitialVelocity) == 0x0004F0, "Member 'ABP_AJBInGameProjectileAirBomb_C::bInitialVelocity' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectileAirBomb_C, InitialVelocityTime_s_) == 0x0004F4, "Member 'ABP_AJBInGameProjectileAirBomb_C::InitialVelocityTime_s_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectileAirBomb_C, bDebugDrawReflectionInfo) == 0x0004F8, "Member 'ABP_AJBInGameProjectileAirBomb_C::bDebugDrawReflectionInfo' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectileAirBomb_C, ReflectionVector) == 0x0004FC, "Member 'ABP_AJBInGameProjectileAirBomb_C::ReflectionVector' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectileAirBomb_C, bReflection) == 0x000508, "Member 'ABP_AJBInGameProjectileAirBomb_C::bReflection' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectileAirBomb_C, CurrentReflectionTime) == 0x00050C, "Member 'ABP_AJBInGameProjectileAirBomb_C::CurrentReflectionTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectileAirBomb_C, ReflectionTime) == 0x000510, "Member 'ABP_AJBInGameProjectileAirBomb_C::ReflectionTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectileAirBomb_C, ReflectionSpeed) == 0x000514, "Member 'ABP_AJBInGameProjectileAirBomb_C::ReflectionSpeed' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectileAirBomb_C, HomingIntensity) == 0x000518, "Member 'ABP_AJBInGameProjectileAirBomb_C::HomingIntensity' has a wrong offset!");

}

