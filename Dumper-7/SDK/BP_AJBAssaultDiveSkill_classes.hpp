#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBAssaultDiveSkill

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "AJB_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_AJBSkillBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBAssaultDiveSkill.BP_AJBAssaultDiveSkill_C
// 0x0120 (0x0308 - 0x01E8)
class UBP_AJBAssaultDiveSkill_C final : public UBP_AJBSkillBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBAssaultDiveSkill_C;           // 0x01E8(0x0008)(Transient, DuplicateTransient)
	class UAkComponent*                           ActivatedSE;                                       // 0x01F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bReservedCancel_Local;                             // 0x01F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bWaitingReady;                                     // 0x01F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FA[0x2];                                      // 0x01FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaitTime;                                          // 0x01FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FallingLimitTime;                                  // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImpactTime;                                        // 0x0204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCompImpact;                                       // 0x0208(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_209[0x3];                                      // 0x0209(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReadyTime;                                         // 0x020C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DivingTime;                                        // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_214[0x4];                                      // 0x0214(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ActivatedSETag;                                    // 0x0218(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           AM_StandDive;                                      // 0x0220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveDistanceMeter_Float;                           // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorldLocation_LastDistanceCalculation;             // 0x022C(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ClearingTime;                                      // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBZipper_Base_C*                   TempZipper;                                        // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedScaleStealth;                                 // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxStepHeightStealth;                              // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      SafeLocationObjectTypes;                           // 0x0250(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FRotator                               Rep_PrevRotation;                                  // 0x0260(0x000C)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         RushTime;                                          // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          ParticleGround;                                    // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           DiveStartSETag;                                    // 0x0278(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           AttackStartSETag;                                  // 0x0280(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           AttackEndSETag;                                    // 0x0288(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           StartVoiceTag;                                     // 0x0290(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           HitVoiceTag;                                       // 0x0298(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bHitted;                                           // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           NotHitVoiceTag;                                    // 0x02A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           AttackStartVoiceTag;                               // 0x02B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SliceDirection;                                    // 0x02B8(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SliceOffset;                                       // 0x02C4(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPossibleAction;                                   // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShowGuide;                                        // 0x02D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D2[0x6];                                      // 0x02D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBAssaultDiveAffecter_C*           Affecter;                                          // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SafeLocationArroundtraceNum;                       // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SafeLocationArroundTraceIncScale;                  // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SafeLocationOffset;                                // 0x02E8(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F4[0x4];                                      // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           AttackSE;                                          // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bActivatePossess;                                  // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_301[0x3];                                      // 0x0301(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PossessActiveInterval;                             // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBAssaultDiveSkill(int32 EntryPoint);
	void OnGiveDamage(int32 Damage_0, const struct FGameplayTag& DamageType, class AActor* DamageReceiver, bool bRemainHP, bool bDamageIsCut, int32 SerialNumber_0, bool DamageReceiverIsPlayer, bool bWithSeparatedStandAttack, bool bEnemysSeparateStand, bool bSelfDamage, bool IsEndured);
	void OnClientMovableStandRestarted();
	void OnCharacterClientRestarted();
	void FinishMeasuringMoveDistance();
	void StartMeasuringMoveDistance();
	void OnTick_MeasureMoveDistance();
	void StopMovingSE();
	void OnBeginState_Ready_OneShot();
	void TickState_Action(float DeltaSeconds);
	void OnBeginState_Action();
	void OnBeginState_Action_OneShot();
	void MC_BeginState_Action();
	void ROS_BeginState_Action();
	void BeginState_Action();
	void StateRenaturation_ActionWaiting();
	void TickState_ActionWaiting(float DeltaSeconds);
	void MC_BeginState_ActionWaiting();
	void ROS_BeginState_ActionWaiting();
	void CustomEvent(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode);
	void OnBeginState_ActionWaiting();
	void OnBeginState_ActionWaiting_OneShot();
	void BeginState_ActionWaiting();
	void ROC_Possess();
	void StateRenaturation_Ready();
	void OnBeginState_Clearing_OneShot();
	void OnBeginState_Diving_OneShot(const struct FVector& Location, const struct FRotator& Rotation);
	void MC_StateEnd(bool bCancel);
	void ROS_StateEnd(bool bCancel);
	void StateEnd(bool bCancel);
	void MC_BeginState_Clearing();
	void ROS_BeginState_Clearing();
	void BeginState_Clearing();
	void MC_BeginState_Diving(const struct FVector& Location, const struct FRotator& Rotation);
	void ROS_BeginState_Diving(const struct FVector& Location, const struct FRotator& Rotation);
	void BeginState_Diving();
	void MC_BeginState_Ready();
	void ROS_BeginState_Ready();
	void BeginState_Ready();
	void MC_BeginState_Waiting();
	void ROS_BeginState_Waiting();
	void BeginState_Waiting();
	void OnMovementModeChanged(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode);
	void TickState_Waiting(float DeltaSeconds);
	void OnBeginState_Waiting();
	void StateTick(float DeltaSeconds);
	void TickState_Clearing(float DeltaSeconds);
	void TickState_Diving(float DeltaSeconds);
	void TickState_Ready(float DeltaSeconds);
	void OnStateEnd(bool bCancel);
	void OnBeginState_Clearing();
	void OnBeginState_Diving(bool bRenaturation);
	void OnBeginState_Ready();
	void OnCompleted_7B45FB9D406D5826C78546BC6050DE5C(class FName NotifyName);
	void OnBlendOut_7B45FB9D406D5826C78546BC6050DE5C(class FName NotifyName);
	void OnInterrupted_7B45FB9D406D5826C78546BC6050DE5C(class FName NotifyName);
	void OnNotifyBegin_7B45FB9D406D5826C78546BC6050DE5C(class FName NotifyName);
	void OnNotifyEnd_7B45FB9D406D5826C78546BC6050DE5C(class FName NotifyName);
	void AdjustTransform(const struct FVector& Location, const struct FRotator& Rotation);
	void UpdatePossibleAction(bool* bPossibleAction_0);
	void CheckPossibleAction(bool* bPossibleAction_0);
	void TryChangeShowGuide(bool bEnable);
	void UpdatePossibleActionFlow();
	void TryCancelWallClimb();
	void CheckImpossibleMovementMode(bool* bImpossibleMovementMode);
	void DestroyGroundParticle();
	void CalcTransform(struct FVector* Location, struct FRotator* Rotation);
	void ChangeEnableAdditionalShowGuide(bool bShow, const struct FAJBSkillGuideInfo& GuideInfo);
	void IsPossessState(bool* bIsPossessState);
	void ReceiveBeginPlay();
	void OnDisconnected();
	void StateBeginPlay(bool bShouldRestore);
	void OnCancel();
	void OnActive();
	void ReceiveTick(float DeltaSeconds);
	void OnRelatedCharacterBecomeLastSurvivor();
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);
	void InitializeVariables();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBAssaultDiveSkill_C">();
	}
	static class UBP_AJBAssaultDiveSkill_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBAssaultDiveSkill_C>();
	}
};
static_assert(alignof(UBP_AJBAssaultDiveSkill_C) == 0x000008, "Wrong alignment on UBP_AJBAssaultDiveSkill_C");
static_assert(sizeof(UBP_AJBAssaultDiveSkill_C) == 0x000308, "Wrong size on UBP_AJBAssaultDiveSkill_C");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, UberGraphFrame_BP_AJBAssaultDiveSkill_C) == 0x0001E8, "Member 'UBP_AJBAssaultDiveSkill_C::UberGraphFrame_BP_AJBAssaultDiveSkill_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, ActivatedSE) == 0x0001F0, "Member 'UBP_AJBAssaultDiveSkill_C::ActivatedSE' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, bReservedCancel_Local) == 0x0001F8, "Member 'UBP_AJBAssaultDiveSkill_C::bReservedCancel_Local' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, bWaitingReady) == 0x0001F9, "Member 'UBP_AJBAssaultDiveSkill_C::bWaitingReady' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, WaitTime) == 0x0001FC, "Member 'UBP_AJBAssaultDiveSkill_C::WaitTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, FallingLimitTime) == 0x000200, "Member 'UBP_AJBAssaultDiveSkill_C::FallingLimitTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, ImpactTime) == 0x000204, "Member 'UBP_AJBAssaultDiveSkill_C::ImpactTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, bCompImpact) == 0x000208, "Member 'UBP_AJBAssaultDiveSkill_C::bCompImpact' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, ReadyTime) == 0x00020C, "Member 'UBP_AJBAssaultDiveSkill_C::ReadyTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, DivingTime) == 0x000210, "Member 'UBP_AJBAssaultDiveSkill_C::DivingTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, ActivatedSETag) == 0x000218, "Member 'UBP_AJBAssaultDiveSkill_C::ActivatedSETag' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, AM_StandDive) == 0x000220, "Member 'UBP_AJBAssaultDiveSkill_C::AM_StandDive' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, MoveDistanceMeter_Float) == 0x000228, "Member 'UBP_AJBAssaultDiveSkill_C::MoveDistanceMeter_Float' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, WorldLocation_LastDistanceCalculation) == 0x00022C, "Member 'UBP_AJBAssaultDiveSkill_C::WorldLocation_LastDistanceCalculation' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, ClearingTime) == 0x000238, "Member 'UBP_AJBAssaultDiveSkill_C::ClearingTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, TempZipper) == 0x000240, "Member 'UBP_AJBAssaultDiveSkill_C::TempZipper' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, SpeedScaleStealth) == 0x000248, "Member 'UBP_AJBAssaultDiveSkill_C::SpeedScaleStealth' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, MaxStepHeightStealth) == 0x00024C, "Member 'UBP_AJBAssaultDiveSkill_C::MaxStepHeightStealth' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, SafeLocationObjectTypes) == 0x000250, "Member 'UBP_AJBAssaultDiveSkill_C::SafeLocationObjectTypes' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, Rep_PrevRotation) == 0x000260, "Member 'UBP_AJBAssaultDiveSkill_C::Rep_PrevRotation' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, RushTime) == 0x00026C, "Member 'UBP_AJBAssaultDiveSkill_C::RushTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, ParticleGround) == 0x000270, "Member 'UBP_AJBAssaultDiveSkill_C::ParticleGround' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, DiveStartSETag) == 0x000278, "Member 'UBP_AJBAssaultDiveSkill_C::DiveStartSETag' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, AttackStartSETag) == 0x000280, "Member 'UBP_AJBAssaultDiveSkill_C::AttackStartSETag' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, AttackEndSETag) == 0x000288, "Member 'UBP_AJBAssaultDiveSkill_C::AttackEndSETag' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, StartVoiceTag) == 0x000290, "Member 'UBP_AJBAssaultDiveSkill_C::StartVoiceTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, HitVoiceTag) == 0x000298, "Member 'UBP_AJBAssaultDiveSkill_C::HitVoiceTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, bHitted) == 0x0002A0, "Member 'UBP_AJBAssaultDiveSkill_C::bHitted' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, NotHitVoiceTag) == 0x0002A8, "Member 'UBP_AJBAssaultDiveSkill_C::NotHitVoiceTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, AttackStartVoiceTag) == 0x0002B0, "Member 'UBP_AJBAssaultDiveSkill_C::AttackStartVoiceTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, SliceDirection) == 0x0002B8, "Member 'UBP_AJBAssaultDiveSkill_C::SliceDirection' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, SliceOffset) == 0x0002C4, "Member 'UBP_AJBAssaultDiveSkill_C::SliceOffset' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, bPossibleAction) == 0x0002D0, "Member 'UBP_AJBAssaultDiveSkill_C::bPossibleAction' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, bShowGuide) == 0x0002D1, "Member 'UBP_AJBAssaultDiveSkill_C::bShowGuide' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, Affecter) == 0x0002D8, "Member 'UBP_AJBAssaultDiveSkill_C::Affecter' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, SafeLocationArroundtraceNum) == 0x0002E0, "Member 'UBP_AJBAssaultDiveSkill_C::SafeLocationArroundtraceNum' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, SafeLocationArroundTraceIncScale) == 0x0002E4, "Member 'UBP_AJBAssaultDiveSkill_C::SafeLocationArroundTraceIncScale' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, SafeLocationOffset) == 0x0002E8, "Member 'UBP_AJBAssaultDiveSkill_C::SafeLocationOffset' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, AttackSE) == 0x0002F8, "Member 'UBP_AJBAssaultDiveSkill_C::AttackSE' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, bActivatePossess) == 0x000300, "Member 'UBP_AJBAssaultDiveSkill_C::bActivatePossess' has a wrong offset!");
static_assert(offsetof(UBP_AJBAssaultDiveSkill_C, PossessActiveInterval) == 0x000304, "Member 'UBP_AJBAssaultDiveSkill_C::PossessActiveInterval' has a wrong offset!");

}

