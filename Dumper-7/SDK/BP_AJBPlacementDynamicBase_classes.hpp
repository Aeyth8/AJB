#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBPlacementDynamicBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BP_AJBPlacementBase_classes.hpp"
#include "AJB_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C
// 0x00A8 (0x0420 - 0x0378)
class ABP_AJBPlacementDynamicBase_C : public ABP_AJBPlacementBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBPlacementDynamicBase_C;       // 0x0378(0x0008)(Transient, DuplicateTransient)
	class USceneComponent*                        CollisionRoot;                                     // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNavModifierComponent*                  NavModifier;                                       // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAJBNetVaryFloatComponent*              AJBNetVaryFloat;                                   // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         HPMax;                                             // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultDistanceLimit;                              // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultSpeed;                                      // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A4[0x4];                                      // 0x03A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           PrepareParticleTag;                                // 0x03A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           PrepareGionTag;                                    // 0x03B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          PrepareParticle;                                   // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           StandbyParticleTag;                                // 0x03C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          StandbyParticle;                                   // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Rep_HP;                                            // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D4[0x4];                                      // 0x03D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           BeBrokenVoiceTag;                                  // 0x03D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           BeDamagedVoiceTag;                                 // 0x03E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         MeshSize;                                          // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EC[0x4];                                      // 0x03EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ClearingParticleTag;                               // 0x03F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          ClearingParticle;                                  // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCountDamageFromEnemyAsEffectiveValue;             // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_401[0x7];                                      // 0x0401(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           PrepareSETag;                                      // 0x0408(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ConsumedParticleTag;                               // 0x0410(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bCallMulticastOnDamage;                            // 0x0418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_419[0x3];                                      // 0x0419(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HPLocal;                                           // 0x041C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBPlacementDynamicBase(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void OnBeginState_Clearing_OneShot();
	void OnBeginState_Prepare_OneShot();
	void OnValueArrivedMax();
	void OnBeginState_Clearing();
	void OnBeginState_Standby();
	void MC_NotifyDamage(bool bIsBroken);
	void ROC_NotifyDamage(int32 EffectiveValue);
	void BeginStateClearing_Dynamic(bool bBeBroken, bool bOtherCharacter);
	void ROC_OnDamage(bool bBeBroken, bool bOtherCharacter);
	void AJBDamage(class AActor* DamagedActor, int32 DamageForHPAP, int32 DamageForAAP, int32 CutDamage, const struct FGameplayTag& DamageType, int32 SerialNumber_0, EDamagePriority DamagePriority, float AttackDistance, class AActor* DamageCauser, bool WithSeparatedStandAttack, bool HitEnemysSeparatedStand, bool bPenetrateAP, bool bNotUseCollision, bool IsEndured, const struct FAJBDamageDisplayParams& DamageDisplayParams, const struct FAJBDamageDisplayProperty& DamageDisplayProperty);
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);
	void OnAreaDamageDisabled();
	void OnPassiveDisabled();
	void OnDamageDisabled();
	void DamageOverlapped(class AActor* DamageCauser, const struct FVector& HitLocation, bool bPenetrating, const struct FGameplayTag& FactorTag, bool bInvalidDamage);
	void UserConstructionScript();
	void ConsumeDamage(int32 Damage, int32* EffectiveDamage);
	void InitializeStatus();
	void IsBroken(bool* bIsBroken);
	void ClearingLocal();
	void ConsumeDamageLocal(int32 Damage);
	void CheckDisableAreaDamage(bool* bDisableAreadamage);
	void CheckDisablePassive(class AActor* PassiveCauser, const struct FGameplayTag& PassiveTag, bool bIgnoreSelf, bool* bDisablePassive);
	void CheckDisableDamage(class AActor* DamageCauser, bool bIgnoreSelf, bool* bDisableDamage);
	bool IfCheckDamageOverlap();
	void OwnHitParam(bool* bCharacter, bool* bLeftAP, struct FGameplayTag* ParticleTagBlockedByAAP, struct FGameplayTag* SETagBlockedByAAP, struct FGameplayTag* ParticleTagBlocked);
	void CheckTargetSelf(class AActor* DamageCauser, bool bForDamageOverlap, bool bIgnoreMovableStand, bool bIncludeSelf, bool bAfterReflectShouldHitOwner, bool* bTarget);
	void CheckNoDamage(class AActor* DamageCauser, bool* bNoDamage);
	void IsReactedByReticule(bool* bResult);
	void IgnoreTrace(class AActor* Owner_0, bool bPairOnly, bool* bIgnore);
	void CheckDisableDirectDamage(class AActor* DamageCauser, bool* bDisableDirectDamage);
	void GetTargetLocation(struct FVector* Location);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBPlacementDynamicBase_C">();
	}
	static class ABP_AJBPlacementDynamicBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBPlacementDynamicBase_C>();
	}
};
static_assert(alignof(ABP_AJBPlacementDynamicBase_C) == 0x000008, "Wrong alignment on ABP_AJBPlacementDynamicBase_C");
static_assert(sizeof(ABP_AJBPlacementDynamicBase_C) == 0x000420, "Wrong size on ABP_AJBPlacementDynamicBase_C");
static_assert(offsetof(ABP_AJBPlacementDynamicBase_C, UberGraphFrame_BP_AJBPlacementDynamicBase_C) == 0x000378, "Member 'ABP_AJBPlacementDynamicBase_C::UberGraphFrame_BP_AJBPlacementDynamicBase_C' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementDynamicBase_C, CollisionRoot) == 0x000380, "Member 'ABP_AJBPlacementDynamicBase_C::CollisionRoot' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementDynamicBase_C, NavModifier) == 0x000388, "Member 'ABP_AJBPlacementDynamicBase_C::NavModifier' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementDynamicBase_C, AJBNetVaryFloat) == 0x000390, "Member 'ABP_AJBPlacementDynamicBase_C::AJBNetVaryFloat' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementDynamicBase_C, HPMax) == 0x000398, "Member 'ABP_AJBPlacementDynamicBase_C::HPMax' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementDynamicBase_C, DefaultDistanceLimit) == 0x00039C, "Member 'ABP_AJBPlacementDynamicBase_C::DefaultDistanceLimit' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementDynamicBase_C, DefaultSpeed) == 0x0003A0, "Member 'ABP_AJBPlacementDynamicBase_C::DefaultSpeed' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementDynamicBase_C, PrepareParticleTag) == 0x0003A8, "Member 'ABP_AJBPlacementDynamicBase_C::PrepareParticleTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementDynamicBase_C, PrepareGionTag) == 0x0003B0, "Member 'ABP_AJBPlacementDynamicBase_C::PrepareGionTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementDynamicBase_C, PrepareParticle) == 0x0003B8, "Member 'ABP_AJBPlacementDynamicBase_C::PrepareParticle' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementDynamicBase_C, StandbyParticleTag) == 0x0003C0, "Member 'ABP_AJBPlacementDynamicBase_C::StandbyParticleTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementDynamicBase_C, StandbyParticle) == 0x0003C8, "Member 'ABP_AJBPlacementDynamicBase_C::StandbyParticle' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementDynamicBase_C, Rep_HP) == 0x0003D0, "Member 'ABP_AJBPlacementDynamicBase_C::Rep_HP' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementDynamicBase_C, BeBrokenVoiceTag) == 0x0003D8, "Member 'ABP_AJBPlacementDynamicBase_C::BeBrokenVoiceTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementDynamicBase_C, BeDamagedVoiceTag) == 0x0003E0, "Member 'ABP_AJBPlacementDynamicBase_C::BeDamagedVoiceTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementDynamicBase_C, MeshSize) == 0x0003E8, "Member 'ABP_AJBPlacementDynamicBase_C::MeshSize' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementDynamicBase_C, ClearingParticleTag) == 0x0003F0, "Member 'ABP_AJBPlacementDynamicBase_C::ClearingParticleTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementDynamicBase_C, ClearingParticle) == 0x0003F8, "Member 'ABP_AJBPlacementDynamicBase_C::ClearingParticle' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementDynamicBase_C, bCountDamageFromEnemyAsEffectiveValue) == 0x000400, "Member 'ABP_AJBPlacementDynamicBase_C::bCountDamageFromEnemyAsEffectiveValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementDynamicBase_C, PrepareSETag) == 0x000408, "Member 'ABP_AJBPlacementDynamicBase_C::PrepareSETag' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementDynamicBase_C, ConsumedParticleTag) == 0x000410, "Member 'ABP_AJBPlacementDynamicBase_C::ConsumedParticleTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementDynamicBase_C, bCallMulticastOnDamage) == 0x000418, "Member 'ABP_AJBPlacementDynamicBase_C::bCallMulticastOnDamage' has a wrong offset!");
static_assert(offsetof(ABP_AJBPlacementDynamicBase_C, HPLocal) == 0x00041C, "Member 'ABP_AJBPlacementDynamicBase_C::HPLocal' has a wrong offset!");

}

