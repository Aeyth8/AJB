#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBWallClimb

#include "Basic.hpp"

#include "AJB_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.ExecuteUbergraph_BP_AJBWallClimb
// 0x0B08 (0x0B08 - 0x0000)
struct BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_DeltaSeconds1;                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_CustomEvent_Rotation7;                      // 0x0008(0x000C)(IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bRestore1;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               K2Node_CustomEvent_Rotation6;                      // 0x0018(0x000C)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBInGameCharacterBase*                K2Node_DynamicCast_AsAJBIn_Game_Character_Base;    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_DeltaSeconds;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue;     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bCancel4;                       // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               K2Node_CustomEvent_Rotation5;                      // 0x0044(0x000C)(IsPlainOldData, NoDestructor)
	struct FRotator                               K2Node_CustomEvent_Rotation4;                      // 0x0050(0x000C)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAJBGameInstance_bSuccess;              // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBGameInstance_C*                  CallFunc_GetAJBGameInstance_AJB_Game_Instance;     // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayingReplay_ReturnValue;              // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bCancel3;                       // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               K2Node_CustomEvent_Rotation3;                      // 0x006C(0x000C)(IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bCancel2;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               K2Node_CustomEvent_Rotation2;                      // 0x007C(0x000C)(IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bCancel1;                       // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               K2Node_CustomEvent_Rotation1;                      // 0x008C(0x000C)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAJBGameInstance_bSuccess1;             // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBGameInstance_C*                  CallFunc_GetAJBGameInstance_AJB_Game_Instance1;    // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayingReplay_ReturnValue1;             // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x00AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x00B0(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          K2Node_CustomEvent_bCancel;                        // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bRestore;                       // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C2[0x2];                                       // 0x00C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               K2Node_CustomEvent_Rotation;                       // 0x00C4(0x000C)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue1;                 // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue2;                 // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckWall_bCanClimb;                      // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D3[0x5];                                       // 0x00D3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_CheckWall_WallHitResult;                  // 0x00D8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_CheckWall_EffectiveHeight;                // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBInGameCharacterBase*                K2Node_DynamicCast_AsAJBIn_Game_Character_Base1;   // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x017A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17B[0x1];                                      // 0x017B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0184(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0190(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x019C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01A8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B4[0x4];                                      // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01C8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01E0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01EC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue1;    // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit1;             // 0x01F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap1;          // 0x01FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FB[0x1];                                      // 0x01FB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time1;                     // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance1;                 // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location1;                 // 0x0204(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint1;              // 0x0210(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal1;                   // 0x021C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal1;             // 0x0228(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_234[0x4];                                      // 0x0234(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat1;                  // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor1;                 // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent1;             // 0x0248(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName1;              // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem1;                  // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex1;                // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart1;               // 0x0260(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd1;                 // 0x026C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_284[0x4];                                      // 0x0284(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate1;             // 0x0288(0x0010)(ZeroConstructor, NoDestructor)
	struct FVector                                K2Node_MathExpression_ReturnValue;                 // 0x0298(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue2;                    // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBInGameCharacterBase*                K2Node_DynamicCast_AsAJBIn_Game_Character_Base2;   // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CalcAccensionDirection_bAscensionContinue; // 0x02B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BA[0x2];                                      // 0x02BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_CalcAccensionDirection_ReturnValue;       // 0x02BC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CalcAccensionDirection_bIsTouchWall;      // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CalcAccensionDirection_bIsAvoidanceEdge;  // 0x02C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue2;    // 0x02CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2CB[0x5];                                      // 0x02CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_CustomEvent_NotifyName4;                    // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D9[0x7];                                      // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue3;                    // 0x02E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue4;                    // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x02F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x02F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F9[0x7];                                      // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacterBase*                K2Node_DynamicCast_AsAJBIn_Game_Character_Base3;   // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess4;                      // 0x0308(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue3;    // 0x0309(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable1;                               // 0x030A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30B[0x5];                                      // 0x030B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue5;                    // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate2;             // 0x0318(0x0010)(ZeroConstructor, NoDestructor)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character1;     // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess5;                      // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_331[0x7];                                      // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue6;                    // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBInGameCharacterBase*                K2Node_DynamicCast_AsAJBIn_Game_Character_Base4;   // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess6;                      // 0x0348(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBGameplayTagOwnerInterface_C> CallFunc_RemoveGameplayTag_self_CastInput; // 0x0350(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue4;    // 0x0360(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckRest_bIsRest;                        // 0x0361(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_362[0x6];                                      // 0x0362(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_CustomEvent_NotifyName3;                    // 0x0368(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue7;                    // 0x0370(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0378(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_384[0x4];                                      // 0x0384(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character2;     // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess7;                      // 0x0390(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_391[0x3];                                      // 0x0391(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0394(0x000C)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x03A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x03A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x03AC(0x000C)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_GetOwner_ReturnValue8;                    // 0x03B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBInGameCharacterBase*                K2Node_DynamicCast_AsAJBIn_Game_Character_Base5;   // 0x03C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess8;                      // 0x03C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C9[0x7];                                      // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacter*                    K2Node_Event_Operator;                             // 0x03D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Time;                                 // 0x03D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGeneralTiming                                K2Node_Event_Timing;                               // 0x03DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bEnable;                              // 0x03DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bOperatorIsEmpty;                     // 0x03DE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue5;    // 0x03DF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_Value2;                               // 0x03E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Value3;                               // 0x03E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue9;                    // 0x03E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character3;     // 0x03F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess9;                      // 0x03F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x03F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FA[0x6];                                      // 0x03FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate3;             // 0x0400(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0410(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x0411(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0412(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue3;                 // 0x0413(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_414[0x4];                                      // 0x0414(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue10;                   // 0x0418(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBInGameCharacterBase*                K2Node_DynamicCast_AsAJBIn_Game_Character_Base6;   // 0x0420(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess10;                     // 0x0428(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_429[0x7];                                      // 0x0429(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_CustomEvent_NotifyName2;                    // 0x0430(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue6;    // 0x0438(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_439[0x7];                                      // 0x0439(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue11;                   // 0x0440(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character4;     // 0x0448(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess11;                     // 0x0450(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_451[0x7];                                      // 0x0451(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue12;                   // 0x0458(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character5;     // 0x0460(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess12;                     // 0x0468(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue1;                   // 0x0469(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue4;                 // 0x046A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue2;                   // 0x046B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue5;                 // 0x046C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46D[0x3];                                      // 0x046D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate4;             // 0x0470(0x0010)(ZeroConstructor, NoDestructor)
	class AActor*                                 CallFunc_GetOwner_ReturnValue13;                   // 0x0480(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character6;     // 0x0488(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess13;                     // 0x0490(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_491[0x7];                                      // 0x0491(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue;          // 0x0498(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue14;                   // 0x04A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x04A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A9[0x7];                                      // 0x04A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacterBase*                K2Node_DynamicCast_AsAJBIn_Game_Character_Base7;   // 0x04B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess14;                     // 0x04B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue7;    // 0x04B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x04BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BB[0x5];                                      // 0x04BB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_CustomEvent_NotifyName1;                    // 0x04C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue6;                 // 0x04C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue7;                 // 0x04C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CA[0x6];                                      // 0x04CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue15;                   // 0x04D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character7;     // 0x04D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess15;                     // 0x04E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsServer_ReturnValue1;                    // 0x04E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E2[0x2];                                      // 0x04E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x04E4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           CallFunc_RequestGion_AkComponent__LocalOnly_;      // 0x04F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RequestGion_bFullfilDisplayCond_LocalOnly_; // 0x04F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4F9[0x7];                                      // 0x04F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate5;             // 0x0500(0x0010)(ZeroConstructor, NoDestructor)
	class AActor*                                 CallFunc_GetOwner_ReturnValue16;                   // 0x0510(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character8;     // 0x0518(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess16;                     // 0x0520(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_521[0x7];                                      // 0x0521(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_CustomEvent_NotifyName;                     // 0x0528(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue17;                   // 0x0530(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBInGameCharacterBase*                K2Node_DynamicCast_AsAJBIn_Game_Character_Base8;   // 0x0538(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess17;                     // 0x0540(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_541[0x7];                                      // 0x0541(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue18;                   // 0x0548(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue8;    // 0x0550(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_551[0x7];                                      // 0x0551(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacterBase*                K2Node_DynamicCast_AsAJBIn_Game_Character_Base9;   // 0x0558(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess18;                     // 0x0560(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue9;    // 0x0561(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_562[0x6];                                      // 0x0562(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue19;                   // 0x0568(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character9;     // 0x0570(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess19;                     // 0x0578(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue1;           // 0x0579(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_57A[0x6];                                      // 0x057A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue20;                   // 0x0580(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character10;    // 0x0588(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess20;                     // 0x0590(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue8;                 // 0x0591(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable2;                               // 0x0592(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_593[0x5];                                      // 0x0593(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x0598(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcAscensionSpeed_AscensionSpeed;        // 0x05A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcLaunchVelocityPower_LaunchPower;      // 0x05A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckSeal_bSeal;                          // 0x05A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A9[0x7];                                      // 0x05A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue21;                   // 0x05B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue22;                   // 0x05B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character11;    // 0x05C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess21;                     // 0x05C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C9[0x7];                                      // 0x05C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character12;    // 0x05D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess22;                     // 0x05D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue2;           // 0x05D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x05DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PossibleActive_bPossibleActive;           // 0x05DB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PossibleActiveCheckWallAsAction_bPossibleActive; // 0x05DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue1;             // 0x05DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x05DE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x05DF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue9;                 // 0x05E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x05E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5E2[0x6];                                      // 0x05E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue23;                   // 0x05E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue2;             // 0x05F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F1[0x7];                                      // 0x05F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character13;    // 0x05F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess23;                     // 0x0600(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_601[0x3];                                      // 0x0601(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue1;         // 0x0604(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckCharacterInInstantObject_bInInstant; // 0x0610(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsServer_ReturnValue2;                    // 0x0611(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_612[0x6];                                      // 0x0612(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue24;                   // 0x0618(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character14;    // 0x0620(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess24;                     // 0x0628(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_629[0x3];                                      // 0x0629(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue1;        // 0x062C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue2;        // 0x0638(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue1;        // 0x0644(0x000C)(IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue2;        // 0x0650(0x000C)(IsPlainOldData, NoDestructor)
	uint8                                         Pad_65C[0x4];                                      // 0x065C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue25;                   // 0x0660(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBGameInstance_bSuccess2;             // 0x0668(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_669[0x7];                                      // 0x0669(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBGameInstance_C*                  CallFunc_GetAJBGameInstance_AJB_Game_Instance2;    // 0x0670(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character15;    // 0x0678(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess25;                     // 0x0680(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayingReplay_ReturnValue2;             // 0x0681(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue10;                // 0x0682(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_683[0x5];                                      // 0x0683(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue26;                   // 0x0688(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue3;        // 0x0690(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69C[0x4];                                      // 0x069C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacterBase*                K2Node_DynamicCast_AsAJBIn_Game_Character_Base10;  // 0x06A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess26;                     // 0x06A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6A9[0x3];                                      // 0x06A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue3;        // 0x06AC(0x000C)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue10;   // 0x06B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B9[0x7];                                      // 0x06B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue27;                   // 0x06C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBInGameCharacterBase*                K2Node_DynamicCast_AsAJBIn_Game_Character_Base11;  // 0x06C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess27;                     // 0x06D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D1[0x3];                                      // 0x06D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue4;        // 0x06D4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue11;   // 0x06E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E1[0x3];                                      // 0x06E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue4;        // 0x06E4(0x000C)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsServer_ReturnValue3;                    // 0x06F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsServer_ReturnValue4;                    // 0x06F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6F2[0x6];                                      // 0x06F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue28;                   // 0x06F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBInGameCharacterBase*                K2Node_DynamicCast_AsAJBIn_Game_Character_Base12;  // 0x0700(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess28;                     // 0x0708(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue12;   // 0x0709(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x070A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue3;             // 0x070B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x070C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckState_bMatch;                        // 0x070D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_70E[0x2];                                      // 0x070E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_CustomEvent_Location;                       // 0x0710(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71C[0x4];                                      // 0x071C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0720(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x07A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A9[0x7];                                      // 0x07A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue29;                   // 0x07B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue30;                   // 0x07B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character16;    // 0x07C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess29;                     // 0x07C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C9[0x7];                                      // 0x07C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character17;    // 0x07D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess30;                     // 0x07D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckFalling_bFalling;                    // 0x07D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue3;                  // 0x07DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7DB[0x5];                                      // 0x07DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue31;                   // 0x07E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select1_Default;                            // 0x07E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7E9[0x7];                                      // 0x07E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character18;    // 0x07F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess31;                     // 0x07F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckActiveBehaviorBreakDown_bBreakDown;  // 0x07F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckActiveBehaviorBreakDown_bSpecialBreakDown; // 0x07FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckActiveBehaviorBreakDown_bBreakDownBoth; // 0x07FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7FC[0x4];                                      // 0x07FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_CheckActiveBehaviorBreakDown_Factor_Tags; // 0x0800(0x0020)()
	bool                                          CallFunc_IsValid_ReturnValue3;                     // 0x0820(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_821[0x7];                                      // 0x0821(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue32;                   // 0x0828(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0830(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_831[0x7];                                      // 0x0831(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character19;    // 0x0838(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess32;                     // 0x0840(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckCharacterBehavior_Active_bReturnValue; // 0x0841(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_842[0x2];                                      // 0x0842(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Select2_Default;                            // 0x0844(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue11;                // 0x0850(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_851[0x3];                                      // 0x0851(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0854(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ProjectVectorOnToPlane_ReturnValue;       // 0x0858(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue4;                     // 0x0864(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_865[0x3];                                      // 0x0865(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue5;        // 0x0868(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_874[0x4];                                      // 0x0874(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable; // 0x0878(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	class AActor*                                 CallFunc_GetOwner_ReturnValue33;                   // 0x0888(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAssociatedAkEvent_ReturnValue;        // 0x0890(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_894[0x4];                                      // 0x0894(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacterBase*                K2Node_DynamicCast_AsAJBIn_Game_Character_Base13;  // 0x0898(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess33;                     // 0x08A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue13;   // 0x08A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_IsValidTimerHandle_ReturnValue;        // 0x08A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x08A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8A4[0x4];                                      // 0x08A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x08A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue4;                  // 0x08B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue5;                     // 0x08B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8BA[0x6];                                      // 0x08BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue34;                   // 0x08C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character20;    // 0x08C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess34;                     // 0x08D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8D1[0x7];                                      // 0x08D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue35;                   // 0x08D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character21;    // 0x08E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess35;                     // 0x08E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E9[0x3];                                      // 0x08E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_ProjectVectorOnToPlane_ReturnValue1;      // 0x08EC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue36;                   // 0x08F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue6;        // 0x0900(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_90C[0x4];                                      // 0x090C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacterBase*                K2Node_DynamicCast_AsAJBIn_Game_Character_Base14;  // 0x0910(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess36;                     // 0x0918(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_919[0x7];                                      // 0x0919(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue37;                   // 0x0920(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue14;   // 0x0928(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_929[0x7];                                      // 0x0929(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character22;    // 0x0930(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess37;                     // 0x0938(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryToSpeakVoice_bWillBeSpoken;            // 0x0939(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_93A[0x6];                                      // 0x093A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue38;                   // 0x0940(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character23;    // 0x0948(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess38;                     // 0x0950(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_951[0x7];                                      // 0x0951(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           CallFunc_RequestWwiseEventAttachedOnLocal_AkComponent; // 0x0958(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayMontageCallbackProxy*              CallFunc_CreateProxyObjectForPlayMontage_ReturnValue; // 0x0960(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue6;                     // 0x0968(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_969[0x3];                                      // 0x0969(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_Value1;                               // 0x096C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue39;                   // 0x0970(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character24;    // 0x0978(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess39;                     // 0x0980(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_981[0x3];                                      // 0x0981(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0984(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Value;                                // 0x0988(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcAscensionSpeed_AscensionSpeed1;       // 0x098C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue40;                   // 0x0990(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character25;    // 0x0998(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess40;                     // 0x09A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9A1[0x7];                                      // 0x09A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue41;                   // 0x09A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameStand_C*                   K2Node_DynamicCast_AsBP_AJBIn_Game_Stand;          // 0x09B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess41;                     // 0x09B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9B9[0x7];                                      // 0x09B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacterBase*                K2Node_DynamicCast_AsAJBIn_Game_Character_Base15;  // 0x09C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess42;                     // 0x09C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9C9[0x7];                                      // 0x09C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameStand_DDW_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Stand_DDW;      // 0x09D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess43;                     // 0x09D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue15;   // 0x09D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9DA[0x6];                                      // 0x09DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue42;                   // 0x09E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character26;    // 0x09E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess44;                     // 0x09F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue3;                   // 0x09F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue12;                // 0x09F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9F3[0x1];                                      // 0x09F3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x09F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue1;                  // 0x09F8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue2;         // 0x0A04(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bShouldRestore;                       // 0x0A10(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bUseNextState;                        // 0x0A11(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         K2Node_Event_NextState;                            // 0x0A12(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A13[0x1];                                      // 0x0A13(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0A14(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0A20(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue1;               // 0x0A2C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A2D[0x3];                                      // 0x0A2D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue43;                   // 0x0A30(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character27;    // 0x0A38(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess45;                     // 0x0A40(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum1_CmpSuccess;                     // 0x0A41(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsRemainMP_IsRemain;                      // 0x0A42(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue13;                // 0x0A43(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A44[0x4];                                      // 0x0A44(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue44;                   // 0x0A48(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable1;                              // 0x0A50(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A54[0x4];                                      // 0x0A54(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character28;    // 0x0A58(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess46;                     // 0x0A60(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable3;                               // 0x0A61(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A62[0x6];                                      // 0x0A62(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameStand_C*                   K2Node_DynamicCast_AsBP_AJBIn_Game_Stand1;         // 0x0A68(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess47;                     // 0x0A70(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A71[0x7];                                      // 0x0A71(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameStand_DDW_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Stand_DDW1;     // 0x0A78(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess48;                     // 0x0A80(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A81[0x3];                                      // 0x0A81(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select3_Default;                            // 0x0A84(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue45;                   // 0x0A88(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_DestroyedActor;                 // 0x0A90(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character29;    // 0x0A98(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess49;                     // 0x0AA0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AA1[0x7];                                      // 0x0AA1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameStand_DDW_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Stand_DDW2;     // 0x0AA8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess50;                     // 0x0AB0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AB1[0x7];                                      // 0x0AB1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameStand_C*                   K2Node_DynamicCast_AsBP_AJBIn_Game_Stand2;         // 0x0AB8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess51;                     // 0x0AC0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue7;                     // 0x0AC1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AC2[0x6];                                      // 0x0AC2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameStand_DDW_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Stand_DDW3;     // 0x0AC8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess52;                     // 0x0AD0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AD1[0x7];                                      // 0x0AD1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue1;         // 0x0AD8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           CallFunc_RequestWwiseEventAttachedOnLocal_AkComponent1; // 0x0AE0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue46;                   // 0x0AE8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0AF0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AF1[0x7];                                      // 0x0AF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character30;    // 0x0AF8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess53;                     // 0x0B00(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue14;                // 0x0B01(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb) == 0x000008, "Wrong alignment on BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb");
static_assert(sizeof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb) == 0x000B08, "Wrong size on BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, EntryPoint) == 0x000000, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_CustomEvent_DeltaSeconds1) == 0x000004, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_CustomEvent_DeltaSeconds1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_CustomEvent_Rotation7) == 0x000008, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_CustomEvent_Rotation7' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_CustomEvent_bRestore1) == 0x000014, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_CustomEvent_bRestore1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_CustomEvent_Rotation6) == 0x000018, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_CustomEvent_Rotation6' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_Not_PreBool_ReturnValue) == 0x000024, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue) == 0x000028, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsAJBIn_Game_Character_Base) == 0x000030, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsAJBIn_Game_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_CustomEvent_DeltaSeconds) == 0x00003C, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_CustomEvent_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_HasLocalSharedController_ReturnValue) == 0x000040, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_HasLocalSharedController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_CustomEvent_bCancel4) == 0x000041, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_CustomEvent_bCancel4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_CustomEvent_Rotation5) == 0x000044, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_CustomEvent_Rotation5' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_CustomEvent_Rotation4) == 0x000050, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_CustomEvent_Rotation4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetAJBGameInstance_bSuccess) == 0x00005C, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetAJBGameInstance_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetAJBGameInstance_AJB_Game_Instance) == 0x000060, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetAJBGameInstance_AJB_Game_Instance' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_IsPlayingReplay_ReturnValue) == 0x000068, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_IsPlayingReplay_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_CustomEvent_bCancel3) == 0x000069, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_CustomEvent_bCancel3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_CustomEvent_Rotation3) == 0x00006C, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_CustomEvent_Rotation3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_CustomEvent_bCancel2) == 0x000078, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_CustomEvent_bCancel2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_CustomEvent_Rotation2) == 0x00007C, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_CustomEvent_Rotation2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_CustomEvent_bCancel1) == 0x000088, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_CustomEvent_bCancel1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_CustomEvent_Rotation1) == 0x00008C, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_CustomEvent_Rotation1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetAJBGameInstance_bSuccess1) == 0x000098, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetAJBGameInstance_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetAJBGameInstance_AJB_Game_Instance1) == 0x0000A0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetAJBGameInstance_AJB_Game_Instance1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_IsPlayingReplay_ReturnValue1) == 0x0000A8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_IsPlayingReplay_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_IsDedicatedServer_ReturnValue) == 0x0000A9, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_IsValid_ReturnValue) == 0x0000AA, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_IsValid_ReturnValue1) == 0x0000AB, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_CreateDelegate_OutputDelegate) == 0x0000B0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_CustomEvent_bCancel) == 0x0000C0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_CustomEvent_bCancel' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_CustomEvent_bRestore) == 0x0000C1, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_CustomEvent_bRestore' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_CustomEvent_Rotation) == 0x0000C4, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_CustomEvent_Rotation' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_Not_PreBool_ReturnValue1) == 0x0000D0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_Not_PreBool_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_Not_PreBool_ReturnValue2) == 0x0000D1, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_Not_PreBool_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_CheckWall_bCanClimb) == 0x0000D2, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_CheckWall_bCanClimb' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_CheckWall_WallHitResult) == 0x0000D8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_CheckWall_WallHitResult' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_CheckWall_EffectiveHeight) == 0x000160, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_CheckWall_EffectiveHeight' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue1) == 0x000168, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsAJBIn_Game_Character_Base1) == 0x000170, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsAJBIn_Game_Character_Base1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess1) == 0x000178, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakHitResult_bBlockingHit) == 0x000179, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakHitResult_bInitialOverlap) == 0x00017A, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakHitResult_Time) == 0x00017C, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakHitResult_Distance) == 0x000180, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakHitResult_Location) == 0x000184, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakHitResult_ImpactPoint) == 0x000190, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakHitResult_Normal) == 0x00019C, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakHitResult_ImpactNormal) == 0x0001A8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakHitResult_PhysMat) == 0x0001B8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakHitResult_HitActor) == 0x0001C0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakHitResult_HitComponent) == 0x0001C8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakHitResult_HitBoneName) == 0x0001D0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakHitResult_HitItem) == 0x0001D8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakHitResult_FaceIndex) == 0x0001DC, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakHitResult_TraceStart) == 0x0001E0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakHitResult_TraceEnd) == 0x0001EC, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_HasLocalSharedController_ReturnValue1) == 0x0001F8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_HasLocalSharedController_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakHitResult_bBlockingHit1) == 0x0001F9, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakHitResult_bBlockingHit1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakHitResult_bInitialOverlap1) == 0x0001FA, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakHitResult_bInitialOverlap1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakHitResult_Time1) == 0x0001FC, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakHitResult_Time1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakHitResult_Distance1) == 0x000200, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakHitResult_Distance1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakHitResult_Location1) == 0x000204, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakHitResult_Location1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakHitResult_ImpactPoint1) == 0x000210, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakHitResult_ImpactPoint1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakHitResult_Normal1) == 0x00021C, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakHitResult_Normal1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakHitResult_ImpactNormal1) == 0x000228, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakHitResult_ImpactNormal1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakHitResult_PhysMat1) == 0x000238, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakHitResult_PhysMat1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakHitResult_HitActor1) == 0x000240, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakHitResult_HitActor1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakHitResult_HitComponent1) == 0x000248, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakHitResult_HitComponent1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakHitResult_HitBoneName1) == 0x000250, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakHitResult_HitBoneName1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakHitResult_HitItem1) == 0x000258, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakHitResult_HitItem1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakHitResult_FaceIndex1) == 0x00025C, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakHitResult_FaceIndex1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakHitResult_TraceStart1) == 0x000260, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakHitResult_TraceStart1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakHitResult_TraceEnd1) == 0x00026C, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakHitResult_TraceEnd1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakVector_X) == 0x000278, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakVector_Y) == 0x00027C, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakVector_Z) == 0x000280, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_CreateDelegate_OutputDelegate1) == 0x000288, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_MathExpression_ReturnValue) == 0x000298, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_MathExpression_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue2) == 0x0002A8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsAJBIn_Game_Character_Base2) == 0x0002B0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsAJBIn_Game_Character_Base2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess2) == 0x0002B8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_CalcAccensionDirection_bAscensionContinue) == 0x0002B9, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_CalcAccensionDirection_bAscensionContinue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_CalcAccensionDirection_ReturnValue) == 0x0002BC, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_CalcAccensionDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_CalcAccensionDirection_bIsTouchWall) == 0x0002C8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_CalcAccensionDirection_bIsTouchWall' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_CalcAccensionDirection_bIsAvoidanceEdge) == 0x0002C9, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_CalcAccensionDirection_bIsAvoidanceEdge' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_HasLocalSharedController_ReturnValue2) == 0x0002CA, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_HasLocalSharedController_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_CustomEvent_NotifyName4) == 0x0002D0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_CustomEvent_NotifyName4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, Temp_bool_Variable) == 0x0002D8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue3) == 0x0002E0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue4) == 0x0002E8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x0002F0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess3) == 0x0002F8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsAJBIn_Game_Character_Base3) == 0x000300, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsAJBIn_Game_Character_Base3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess4) == 0x000308, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_HasLocalSharedController_ReturnValue3) == 0x000309, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_HasLocalSharedController_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, Temp_bool_Variable1) == 0x00030A, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue5) == 0x000310, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_CreateDelegate_OutputDelegate2) == 0x000318, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_CreateDelegate_OutputDelegate2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Character1) == 0x000328, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Character1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess5) == 0x000330, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess5' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue6) == 0x000338, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsAJBIn_Game_Character_Base4) == 0x000340, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsAJBIn_Game_Character_Base4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess6) == 0x000348, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess6' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_RemoveGameplayTag_self_CastInput) == 0x000350, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_RemoveGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_HasLocalSharedController_ReturnValue4) == 0x000360, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_HasLocalSharedController_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_CheckRest_bIsRest) == 0x000361, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_CheckRest_bIsRest' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_CustomEvent_NotifyName3) == 0x000368, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_CustomEvent_NotifyName3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue7) == 0x000370, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000378, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Character2) == 0x000388, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Character2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess7) == 0x000390, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess7' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000394, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakRotator_Roll) == 0x0003A0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakRotator_Pitch) == 0x0003A4, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BreakRotator_Yaw) == 0x0003A8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_MakeRotator_ReturnValue) == 0x0003AC, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue8) == 0x0003B8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue8' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsAJBIn_Game_Character_Base5) == 0x0003C0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsAJBIn_Game_Character_Base5' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess8) == 0x0003C8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess8' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_Event_Operator) == 0x0003D0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_Event_Operator' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_Event_Time) == 0x0003D8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_Event_Time' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_Event_Timing) == 0x0003DC, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_Event_Timing' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_Event_bEnable) == 0x0003DD, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_Event_bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_Event_bOperatorIsEmpty) == 0x0003DE, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_Event_bOperatorIsEmpty' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_HasLocalSharedController_ReturnValue5) == 0x0003DF, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_HasLocalSharedController_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_Event_Value2) == 0x0003E0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_Event_Value2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_Event_Value3) == 0x0003E4, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_Event_Value3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue9) == 0x0003E8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue9' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Character3) == 0x0003F0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Character3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess9) == 0x0003F8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess9' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_K2_SetActorRotation_ReturnValue) == 0x0003F9, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_CreateDelegate_OutputDelegate3) == 0x000400, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_CreateDelegate_OutputDelegate3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_IsValid_ReturnValue2) == 0x000410, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_IsServer_ReturnValue) == 0x000411, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_IsServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BooleanOR_ReturnValue) == 0x000412, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_Not_PreBool_ReturnValue3) == 0x000413, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_Not_PreBool_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue10) == 0x000418, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue10' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsAJBIn_Game_Character_Base6) == 0x000420, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsAJBIn_Game_Character_Base6' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess10) == 0x000428, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess10' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_CustomEvent_NotifyName2) == 0x000430, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_CustomEvent_NotifyName2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_HasLocalSharedController_ReturnValue6) == 0x000438, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_HasLocalSharedController_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue11) == 0x000440, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue11' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Character4) == 0x000448, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Character4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess11) == 0x000450, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess11' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue12) == 0x000458, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue12' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Character5) == 0x000460, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Character5' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess12) == 0x000468, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess12' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BooleanOR_ReturnValue1) == 0x000469, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BooleanOR_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_Not_PreBool_ReturnValue4) == 0x00046A, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_Not_PreBool_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BooleanOR_ReturnValue2) == 0x00046B, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BooleanOR_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_Not_PreBool_ReturnValue5) == 0x00046C, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_Not_PreBool_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_CreateDelegate_OutputDelegate4) == 0x000470, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_CreateDelegate_OutputDelegate4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue13) == 0x000480, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue13' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Character6) == 0x000488, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Character6' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess13) == 0x000490, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess13' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_K2_GetRootComponent_ReturnValue) == 0x000498, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_K2_GetRootComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue14) == 0x0004A0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue14' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetValidValue_ReturnValue) == 0x0004A8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsAJBIn_Game_Character_Base7) == 0x0004B0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsAJBIn_Game_Character_Base7' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess14) == 0x0004B8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess14' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_HasLocalSharedController_ReturnValue7) == 0x0004B9, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_HasLocalSharedController_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_SwitchEnum_CmpSuccess) == 0x0004BA, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_CustomEvent_NotifyName1) == 0x0004C0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_CustomEvent_NotifyName1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_Not_PreBool_ReturnValue6) == 0x0004C8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_Not_PreBool_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_Not_PreBool_ReturnValue7) == 0x0004C9, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_Not_PreBool_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue15) == 0x0004D0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue15' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Character7) == 0x0004D8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Character7' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess15) == 0x0004E0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess15' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_IsServer_ReturnValue1) == 0x0004E1, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_IsServer_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0004E4, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_RequestGion_AkComponent__LocalOnly_) == 0x0004F0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_RequestGion_AkComponent__LocalOnly_' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_RequestGion_bFullfilDisplayCond_LocalOnly_) == 0x0004F8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_RequestGion_bFullfilDisplayCond_LocalOnly_' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_CreateDelegate_OutputDelegate5) == 0x000500, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_CreateDelegate_OutputDelegate5' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue16) == 0x000510, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue16' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Character8) == 0x000518, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Character8' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess16) == 0x000520, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess16' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_CustomEvent_NotifyName) == 0x000528, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_CustomEvent_NotifyName' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue17) == 0x000530, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue17' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsAJBIn_Game_Character_Base8) == 0x000538, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsAJBIn_Game_Character_Base8' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess17) == 0x000540, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess17' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue18) == 0x000548, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue18' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_HasLocalSharedController_ReturnValue8) == 0x000550, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_HasLocalSharedController_ReturnValue8' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsAJBIn_Game_Character_Base9) == 0x000558, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsAJBIn_Game_Character_Base9' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess18) == 0x000560, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess18' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_HasLocalSharedController_ReturnValue9) == 0x000561, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_HasLocalSharedController_ReturnValue9' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue19) == 0x000568, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue19' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Character9) == 0x000570, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Character9' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess19) == 0x000578, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess19' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_IsDedicatedServer_ReturnValue1) == 0x000579, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_IsDedicatedServer_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue20) == 0x000580, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue20' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Character10) == 0x000588, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Character10' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess20) == 0x000590, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess20' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_Not_PreBool_ReturnValue8) == 0x000591, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_Not_PreBool_ReturnValue8' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, Temp_bool_Variable2) == 0x000592, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, Temp_name_Variable) == 0x000598, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_CalcAscensionSpeed_AscensionSpeed) == 0x0005A0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_CalcAscensionSpeed_AscensionSpeed' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_CalcLaunchVelocityPower_LaunchPower) == 0x0005A4, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_CalcLaunchVelocityPower_LaunchPower' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_CheckSeal_bSeal) == 0x0005A8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_CheckSeal_bSeal' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue21) == 0x0005B0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue21' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue22) == 0x0005B8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue22' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Character11) == 0x0005C0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Character11' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess21) == 0x0005C8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess21' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Character12) == 0x0005D0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Character12' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess22) == 0x0005D8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess22' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_IsDedicatedServer_ReturnValue2) == 0x0005D9, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_IsDedicatedServer_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_MakeLiteralByte_ReturnValue) == 0x0005DA, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_PossibleActive_bPossibleActive) == 0x0005DB, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_PossibleActive_bPossibleActive' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_PossibleActiveCheckWallAsAction_bPossibleActive) == 0x0005DC, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_PossibleActiveCheckWallAsAction_bPossibleActive' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_MakeLiteralByte_ReturnValue1) == 0x0005DD, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_MakeLiteralByte_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_Select_Default) == 0x0005DE, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BooleanAND_ReturnValue) == 0x0005DF, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_Not_PreBool_ReturnValue9) == 0x0005E0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_Not_PreBool_ReturnValue9' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BooleanAND_ReturnValue1) == 0x0005E1, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue23) == 0x0005E8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue23' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_MakeLiteralByte_ReturnValue2) == 0x0005F0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_MakeLiteralByte_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Character13) == 0x0005F8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Character13' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess23) == 0x000600, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess23' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_K2_GetActorLocation_ReturnValue1) == 0x000604, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_K2_GetActorLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_CheckCharacterInInstantObject_bInInstant) == 0x000610, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_CheckCharacterInInstantObject_bInInstant' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_IsServer_ReturnValue2) == 0x000611, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_IsServer_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue24) == 0x000618, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue24' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Character14) == 0x000620, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Character14' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess24) == 0x000628, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess24' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_Multiply_VectorFloat_ReturnValue1) == 0x00062C, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_Multiply_VectorFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_Multiply_VectorFloat_ReturnValue2) == 0x000638, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_Multiply_VectorFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_Conv_VectorToRotator_ReturnValue1) == 0x000644, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_Conv_VectorToRotator_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_Conv_VectorToRotator_ReturnValue2) == 0x000650, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_Conv_VectorToRotator_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue25) == 0x000660, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue25' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetAJBGameInstance_bSuccess2) == 0x000668, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetAJBGameInstance_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetAJBGameInstance_AJB_Game_Instance2) == 0x000670, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetAJBGameInstance_AJB_Game_Instance2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Character15) == 0x000678, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Character15' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess25) == 0x000680, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess25' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_IsPlayingReplay_ReturnValue2) == 0x000681, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_IsPlayingReplay_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_Not_PreBool_ReturnValue10) == 0x000682, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_Not_PreBool_ReturnValue10' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue26) == 0x000688, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue26' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_Multiply_VectorFloat_ReturnValue3) == 0x000690, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_Multiply_VectorFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsAJBIn_Game_Character_Base10) == 0x0006A0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsAJBIn_Game_Character_Base10' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess26) == 0x0006A8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess26' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_Conv_VectorToRotator_ReturnValue3) == 0x0006AC, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_Conv_VectorToRotator_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_HasLocalSharedController_ReturnValue10) == 0x0006B8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_HasLocalSharedController_ReturnValue10' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue27) == 0x0006C0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue27' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsAJBIn_Game_Character_Base11) == 0x0006C8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsAJBIn_Game_Character_Base11' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess27) == 0x0006D0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess27' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_Multiply_VectorFloat_ReturnValue4) == 0x0006D4, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_Multiply_VectorFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_HasLocalSharedController_ReturnValue11) == 0x0006E0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_HasLocalSharedController_ReturnValue11' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_Conv_VectorToRotator_ReturnValue4) == 0x0006E4, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_Conv_VectorToRotator_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_IsServer_ReturnValue3) == 0x0006F0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_IsServer_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_IsServer_ReturnValue4) == 0x0006F1, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_IsServer_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue28) == 0x0006F8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue28' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsAJBIn_Game_Character_Base12) == 0x000700, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsAJBIn_Game_Character_Base12' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess28) == 0x000708, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess28' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_HasLocalSharedController_ReturnValue12) == 0x000709, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_HasLocalSharedController_ReturnValue12' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00070A, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_MakeLiteralByte_ReturnValue3) == 0x00070B, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_MakeLiteralByte_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BooleanAND_ReturnValue2) == 0x00070C, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_CheckState_bMatch) == 0x00070D, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_CheckState_bMatch' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_CustomEvent_Location) == 0x000710, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_CustomEvent_Location' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000720, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_K2_SetActorLocation_ReturnValue) == 0x0007A8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue29) == 0x0007B0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue29' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue30) == 0x0007B8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue30' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Character16) == 0x0007C0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Character16' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess29) == 0x0007C8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess29' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Character17) == 0x0007D0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Character17' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess30) == 0x0007D8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess30' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_CheckFalling_bFalling) == 0x0007D9, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_CheckFalling_bFalling' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BooleanAND_ReturnValue3) == 0x0007DA, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BooleanAND_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue31) == 0x0007E0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue31' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_Select1_Default) == 0x0007E8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Character18) == 0x0007F0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Character18' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess31) == 0x0007F8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess31' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_CheckActiveBehaviorBreakDown_bBreakDown) == 0x0007F9, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_CheckActiveBehaviorBreakDown_bBreakDown' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_CheckActiveBehaviorBreakDown_bSpecialBreakDown) == 0x0007FA, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_CheckActiveBehaviorBreakDown_bSpecialBreakDown' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_CheckActiveBehaviorBreakDown_bBreakDownBoth) == 0x0007FB, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_CheckActiveBehaviorBreakDown_bBreakDownBoth' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_CheckActiveBehaviorBreakDown_Factor_Tags) == 0x000800, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_CheckActiveBehaviorBreakDown_Factor_Tags' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_IsValid_ReturnValue3) == 0x000820, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_IsValid_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue32) == 0x000828, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue32' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_Array_Contains_ReturnValue) == 0x000830, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Character19) == 0x000838, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Character19' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess32) == 0x000840, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess32' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_CheckCharacterBehavior_Active_bReturnValue) == 0x000841, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_CheckCharacterBehavior_Active_bReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_Select2_Default) == 0x000844, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_Not_PreBool_ReturnValue11) == 0x000850, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_Not_PreBool_ReturnValue11' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_Event_DeltaSeconds) == 0x000854, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_ProjectVectorOnToPlane_ReturnValue) == 0x000858, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_ProjectVectorOnToPlane_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_IsValid_ReturnValue4) == 0x000864, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_IsValid_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_Multiply_VectorFloat_ReturnValue5) == 0x000868, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_Multiply_VectorFloat_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, Temp_delegate_Variable) == 0x000878, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue33) == 0x000888, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue33' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_PostAssociatedAkEvent_ReturnValue) == 0x000890, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_PostAssociatedAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsAJBIn_Game_Character_Base13) == 0x000898, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsAJBIn_Game_Character_Base13' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess33) == 0x0008A0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess33' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_HasLocalSharedController_ReturnValue13) == 0x0008A1, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_HasLocalSharedController_ReturnValue13' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_K2_IsValidTimerHandle_ReturnValue) == 0x0008A2, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_K2_IsValidTimerHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0008A3, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_Conv_FloatToString_ReturnValue) == 0x0008A8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BooleanAND_ReturnValue4) == 0x0008B8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BooleanAND_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_IsValid_ReturnValue5) == 0x0008B9, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_IsValid_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue34) == 0x0008C0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue34' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Character20) == 0x0008C8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Character20' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess34) == 0x0008D0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess34' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue35) == 0x0008D8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue35' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Character21) == 0x0008E0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Character21' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess35) == 0x0008E8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess35' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_ProjectVectorOnToPlane_ReturnValue1) == 0x0008EC, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_ProjectVectorOnToPlane_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue36) == 0x0008F8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue36' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_Multiply_VectorFloat_ReturnValue6) == 0x000900, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_Multiply_VectorFloat_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsAJBIn_Game_Character_Base14) == 0x000910, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsAJBIn_Game_Character_Base14' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess36) == 0x000918, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess36' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue37) == 0x000920, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue37' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_HasLocalSharedController_ReturnValue14) == 0x000928, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_HasLocalSharedController_ReturnValue14' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Character22) == 0x000930, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Character22' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess37) == 0x000938, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess37' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_TryToSpeakVoice_bWillBeSpoken) == 0x000939, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_TryToSpeakVoice_bWillBeSpoken' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue38) == 0x000940, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue38' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Character23) == 0x000948, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Character23' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess38) == 0x000950, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess38' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_RequestWwiseEventAttachedOnLocal_AkComponent) == 0x000958, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_RequestWwiseEventAttachedOnLocal_AkComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_CreateProxyObjectForPlayMontage_ReturnValue) == 0x000960, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_CreateProxyObjectForPlayMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_IsValid_ReturnValue6) == 0x000968, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_IsValid_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_Event_Value1) == 0x00096C, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_Event_Value1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue39) == 0x000970, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue39' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Character24) == 0x000978, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Character24' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess39) == 0x000980, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess39' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, Temp_float_Variable) == 0x000984, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_Event_Value) == 0x000988, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_Event_Value' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_CalcAscensionSpeed_AscensionSpeed1) == 0x00098C, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_CalcAscensionSpeed_AscensionSpeed1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue40) == 0x000990, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue40' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Character25) == 0x000998, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Character25' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess40) == 0x0009A0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess40' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue41) == 0x0009A8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue41' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Stand) == 0x0009B0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Stand' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess41) == 0x0009B8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess41' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsAJBIn_Game_Character_Base15) == 0x0009C0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsAJBIn_Game_Character_Base15' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess42) == 0x0009C8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess42' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Stand_DDW) == 0x0009D0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Stand_DDW' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess43) == 0x0009D8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess43' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_HasLocalSharedController_ReturnValue15) == 0x0009D9, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_HasLocalSharedController_ReturnValue15' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue42) == 0x0009E0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue42' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Character26) == 0x0009E8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Character26' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess44) == 0x0009F0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess44' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_BooleanOR_ReturnValue3) == 0x0009F1, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_BooleanOR_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_Not_PreBool_ReturnValue12) == 0x0009F2, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_Not_PreBool_ReturnValue12' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0009F4, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_MakeVector_ReturnValue1) == 0x0009F8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_MakeVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_K2_GetActorLocation_ReturnValue2) == 0x000A04, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_K2_GetActorLocation_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_Event_bShouldRestore) == 0x000A10, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_Event_bShouldRestore' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_Event_bUseNextState) == 0x000A11, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_Event_bUseNextState' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_Event_NextState) == 0x000A12, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_Event_NextState' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_Add_VectorVector_ReturnValue) == 0x000A14, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000A20, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetValidValue_ReturnValue1) == 0x000A2C, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetValidValue_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue43) == 0x000A30, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue43' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Character27) == 0x000A38, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Character27' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess45) == 0x000A40, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess45' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_SwitchEnum1_CmpSuccess) == 0x000A41, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_SwitchEnum1_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_IsRemainMP_IsRemain) == 0x000A42, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_IsRemainMP_IsRemain' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_Not_PreBool_ReturnValue13) == 0x000A43, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_Not_PreBool_ReturnValue13' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue44) == 0x000A48, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue44' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, Temp_float_Variable1) == 0x000A50, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::Temp_float_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Character28) == 0x000A58, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Character28' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess46) == 0x000A60, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess46' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, Temp_bool_Variable3) == 0x000A61, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::Temp_bool_Variable3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Stand1) == 0x000A68, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Stand1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess47) == 0x000A70, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess47' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Stand_DDW1) == 0x000A78, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Stand_DDW1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess48) == 0x000A80, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess48' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_Select3_Default) == 0x000A84, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_Select3_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue45) == 0x000A88, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue45' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_CustomEvent_DestroyedActor) == 0x000A90, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_CustomEvent_DestroyedActor' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Character29) == 0x000A98, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Character29' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess49) == 0x000AA0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess49' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Stand_DDW2) == 0x000AA8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Stand_DDW2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess50) == 0x000AB0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess50' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Stand2) == 0x000AB8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Stand2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess51) == 0x000AC0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess51' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_IsValid_ReturnValue7) == 0x000AC1, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_IsValid_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Stand_DDW3) == 0x000AC8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Stand_DDW3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess52) == 0x000AD0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess52' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_K2_GetRootComponent_ReturnValue1) == 0x000AD8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_K2_GetRootComponent_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_RequestWwiseEventAttachedOnLocal_AkComponent1) == 0x000AE0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_RequestWwiseEventAttachedOnLocal_AkComponent1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_GetOwner_ReturnValue46) == 0x000AE8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_GetOwner_ReturnValue46' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_Event_EndPlayReason) == 0x000AF0, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_AsBP_AJBIn_Game_Character30) == 0x000AF8, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_AsBP_AJBIn_Game_Character30' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, K2Node_DynamicCast_bSuccess53) == 0x000B00, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::K2Node_DynamicCast_bSuccess53' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb, CallFunc_Not_PreBool_ReturnValue14) == 0x000B01, "Member 'BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb::CallFunc_Not_PreBool_ReturnValue14' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBWallClimb_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBWallClimb_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_AJBWallClimb_C_ReceiveEndPlay");
static_assert(sizeof(BP_AJBWallClimb_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_AJBWallClimb_C_ReceiveEndPlay");
static_assert(offsetof(BP_AJBWallClimb_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_AJBWallClimb_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.OnStandDestroyed
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBWallClimb_C_OnStandDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBWallClimb_C_OnStandDestroyed) == 0x000008, "Wrong alignment on BP_AJBWallClimb_C_OnStandDestroyed");
static_assert(sizeof(BP_AJBWallClimb_C_OnStandDestroyed) == 0x000008, "Wrong size on BP_AJBWallClimb_C_OnStandDestroyed");
static_assert(offsetof(BP_AJBWallClimb_C_OnStandDestroyed, DestroyedActor) == 0x000000, "Member 'BP_AJBWallClimb_C_OnStandDestroyed::DestroyedActor' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.ChangeStandLaunchVelocityScale
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBWallClimb_C_ChangeStandLaunchVelocityScale final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBWallClimb_C_ChangeStandLaunchVelocityScale) == 0x000004, "Wrong alignment on BP_AJBWallClimb_C_ChangeStandLaunchVelocityScale");
static_assert(sizeof(BP_AJBWallClimb_C_ChangeStandLaunchVelocityScale) == 0x000004, "Wrong size on BP_AJBWallClimb_C_ChangeStandLaunchVelocityScale");
static_assert(offsetof(BP_AJBWallClimb_C_ChangeStandLaunchVelocityScale, Value) == 0x000000, "Member 'BP_AJBWallClimb_C_ChangeStandLaunchVelocityScale::Value' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.ChangeCharacterMoveSpeedByStand
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBWallClimb_C_ChangeCharacterMoveSpeedByStand final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBWallClimb_C_ChangeCharacterMoveSpeedByStand) == 0x000004, "Wrong alignment on BP_AJBWallClimb_C_ChangeCharacterMoveSpeedByStand");
static_assert(sizeof(BP_AJBWallClimb_C_ChangeCharacterMoveSpeedByStand) == 0x000004, "Wrong size on BP_AJBWallClimb_C_ChangeCharacterMoveSpeedByStand");
static_assert(offsetof(BP_AJBWallClimb_C_ChangeCharacterMoveSpeedByStand, Value) == 0x000000, "Member 'BP_AJBWallClimb_C_ChangeCharacterMoveSpeedByStand::Value' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.ROS_Adjust
// 0x000C (0x000C - 0x0000)
struct BP_AJBWallClimb_C_ROS_Adjust final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBWallClimb_C_ROS_Adjust) == 0x000004, "Wrong alignment on BP_AJBWallClimb_C_ROS_Adjust");
static_assert(sizeof(BP_AJBWallClimb_C_ROS_Adjust) == 0x00000C, "Wrong size on BP_AJBWallClimb_C_ROS_Adjust");
static_assert(offsetof(BP_AJBWallClimb_C_ROS_Adjust, Location) == 0x000000, "Member 'BP_AJBWallClimb_C_ROS_Adjust::Location' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.OnBeginState_End
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBWallClimb_C_OnBeginState_End final
{
public:
	bool                                          bCancel;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bRestore;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBWallClimb_C_OnBeginState_End) == 0x000004, "Wrong alignment on BP_AJBWallClimb_C_OnBeginState_End");
static_assert(sizeof(BP_AJBWallClimb_C_OnBeginState_End) == 0x000010, "Wrong size on BP_AJBWallClimb_C_OnBeginState_End");
static_assert(offsetof(BP_AJBWallClimb_C_OnBeginState_End, bCancel) == 0x000000, "Member 'BP_AJBWallClimb_C_OnBeginState_End::bCancel' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_OnBeginState_End, bRestore) == 0x000001, "Member 'BP_AJBWallClimb_C_OnBeginState_End::bRestore' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_OnBeginState_End, Rotation) == 0x000004, "Member 'BP_AJBWallClimb_C_OnBeginState_End::Rotation' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.MC_BeginState_End
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBWallClimb_C_MC_BeginState_End final
{
public:
	bool                                          bCancel;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBWallClimb_C_MC_BeginState_End) == 0x000004, "Wrong alignment on BP_AJBWallClimb_C_MC_BeginState_End");
static_assert(sizeof(BP_AJBWallClimb_C_MC_BeginState_End) == 0x000010, "Wrong size on BP_AJBWallClimb_C_MC_BeginState_End");
static_assert(offsetof(BP_AJBWallClimb_C_MC_BeginState_End, bCancel) == 0x000000, "Member 'BP_AJBWallClimb_C_MC_BeginState_End::bCancel' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_MC_BeginState_End, Rotation) == 0x000004, "Member 'BP_AJBWallClimb_C_MC_BeginState_End::Rotation' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.ROS_BeginState_End
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBWallClimb_C_ROS_BeginState_End final
{
public:
	bool                                          bCancel;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBWallClimb_C_ROS_BeginState_End) == 0x000004, "Wrong alignment on BP_AJBWallClimb_C_ROS_BeginState_End");
static_assert(sizeof(BP_AJBWallClimb_C_ROS_BeginState_End) == 0x000010, "Wrong size on BP_AJBWallClimb_C_ROS_BeginState_End");
static_assert(offsetof(BP_AJBWallClimb_C_ROS_BeginState_End, bCancel) == 0x000000, "Member 'BP_AJBWallClimb_C_ROS_BeginState_End::bCancel' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ROS_BeginState_End, Rotation) == 0x000004, "Member 'BP_AJBWallClimb_C_ROS_BeginState_End::Rotation' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.BeginState_End_OneShot
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBWallClimb_C_BeginState_End_OneShot final
{
public:
	bool                                          bCancel;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBWallClimb_C_BeginState_End_OneShot) == 0x000004, "Wrong alignment on BP_AJBWallClimb_C_BeginState_End_OneShot");
static_assert(sizeof(BP_AJBWallClimb_C_BeginState_End_OneShot) == 0x000010, "Wrong size on BP_AJBWallClimb_C_BeginState_End_OneShot");
static_assert(offsetof(BP_AJBWallClimb_C_BeginState_End_OneShot, bCancel) == 0x000000, "Member 'BP_AJBWallClimb_C_BeginState_End_OneShot::bCancel' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_BeginState_End_OneShot, Rotation) == 0x000004, "Member 'BP_AJBWallClimb_C_BeginState_End_OneShot::Rotation' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.StateBeginPlay
// 0x0003 (0x0003 - 0x0000)
struct BP_AJBWallClimb_C_StateBeginPlay final
{
public:
	bool                                          bShouldRestore;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bUseNextState;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         NextState;                                         // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBWallClimb_C_StateBeginPlay) == 0x000001, "Wrong alignment on BP_AJBWallClimb_C_StateBeginPlay");
static_assert(sizeof(BP_AJBWallClimb_C_StateBeginPlay) == 0x000003, "Wrong size on BP_AJBWallClimb_C_StateBeginPlay");
static_assert(offsetof(BP_AJBWallClimb_C_StateBeginPlay, bShouldRestore) == 0x000000, "Member 'BP_AJBWallClimb_C_StateBeginPlay::bShouldRestore' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_StateBeginPlay, bUseNextState) == 0x000001, "Member 'BP_AJBWallClimb_C_StateBeginPlay::bUseNextState' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_StateBeginPlay, NextState) == 0x000002, "Member 'BP_AJBWallClimb_C_StateBeginPlay::NextState' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBWallClimb_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBWallClimb_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_AJBWallClimb_C_ReceiveTick");
static_assert(sizeof(BP_AJBWallClimb_C_ReceiveTick) == 0x000004, "Wrong size on BP_AJBWallClimb_C_ReceiveTick");
static_assert(offsetof(BP_AJBWallClimb_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_AJBWallClimb_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.MC_BeginState_Action
// 0x000C (0x000C - 0x0000)
struct BP_AJBWallClimb_C_MC_BeginState_Action final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBWallClimb_C_MC_BeginState_Action) == 0x000004, "Wrong alignment on BP_AJBWallClimb_C_MC_BeginState_Action");
static_assert(sizeof(BP_AJBWallClimb_C_MC_BeginState_Action) == 0x00000C, "Wrong size on BP_AJBWallClimb_C_MC_BeginState_Action");
static_assert(offsetof(BP_AJBWallClimb_C_MC_BeginState_Action, Rotation) == 0x000000, "Member 'BP_AJBWallClimb_C_MC_BeginState_Action::Rotation' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.ROS_BeginState_Action
// 0x000C (0x000C - 0x0000)
struct BP_AJBWallClimb_C_ROS_BeginState_Action final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBWallClimb_C_ROS_BeginState_Action) == 0x000004, "Wrong alignment on BP_AJBWallClimb_C_ROS_BeginState_Action");
static_assert(sizeof(BP_AJBWallClimb_C_ROS_BeginState_Action) == 0x00000C, "Wrong size on BP_AJBWallClimb_C_ROS_BeginState_Action");
static_assert(offsetof(BP_AJBWallClimb_C_ROS_BeginState_Action, Rotation) == 0x000000, "Member 'BP_AJBWallClimb_C_ROS_BeginState_Action::Rotation' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.BeginState_End
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBWallClimb_C_BeginState_End final
{
public:
	bool                                          bCancel;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBWallClimb_C_BeginState_End) == 0x000001, "Wrong alignment on BP_AJBWallClimb_C_BeginState_End");
static_assert(sizeof(BP_AJBWallClimb_C_BeginState_End) == 0x000001, "Wrong size on BP_AJBWallClimb_C_BeginState_End");
static_assert(offsetof(BP_AJBWallClimb_C_BeginState_End, bCancel) == 0x000000, "Member 'BP_AJBWallClimb_C_BeginState_End::bCancel' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.StateTick_Action
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBWallClimb_C_StateTick_Action final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBWallClimb_C_StateTick_Action) == 0x000004, "Wrong alignment on BP_AJBWallClimb_C_StateTick_Action");
static_assert(sizeof(BP_AJBWallClimb_C_StateTick_Action) == 0x000004, "Wrong size on BP_AJBWallClimb_C_StateTick_Action");
static_assert(offsetof(BP_AJBWallClimb_C_StateTick_Action, DeltaSeconds) == 0x000000, "Member 'BP_AJBWallClimb_C_StateTick_Action::DeltaSeconds' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.OnBeginState_Action
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBWallClimb_C_OnBeginState_Action final
{
public:
	bool                                          bRestore;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBWallClimb_C_OnBeginState_Action) == 0x000004, "Wrong alignment on BP_AJBWallClimb_C_OnBeginState_Action");
static_assert(sizeof(BP_AJBWallClimb_C_OnBeginState_Action) == 0x000010, "Wrong size on BP_AJBWallClimb_C_OnBeginState_Action");
static_assert(offsetof(BP_AJBWallClimb_C_OnBeginState_Action, bRestore) == 0x000000, "Member 'BP_AJBWallClimb_C_OnBeginState_Action::bRestore' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_OnBeginState_Action, Rotation) == 0x000004, "Member 'BP_AJBWallClimb_C_OnBeginState_Action::Rotation' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.BeginStateActionOneShot
// 0x000C (0x000C - 0x0000)
struct BP_AJBWallClimb_C_BeginStateActionOneShot final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBWallClimb_C_BeginStateActionOneShot) == 0x000004, "Wrong alignment on BP_AJBWallClimb_C_BeginStateActionOneShot");
static_assert(sizeof(BP_AJBWallClimb_C_BeginStateActionOneShot) == 0x00000C, "Wrong size on BP_AJBWallClimb_C_BeginStateActionOneShot");
static_assert(offsetof(BP_AJBWallClimb_C_BeginStateActionOneShot, Rotation) == 0x000000, "Member 'BP_AJBWallClimb_C_BeginStateActionOneShot::Rotation' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.StateTick
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBWallClimb_C_StateTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBWallClimb_C_StateTick) == 0x000004, "Wrong alignment on BP_AJBWallClimb_C_StateTick");
static_assert(sizeof(BP_AJBWallClimb_C_StateTick) == 0x000004, "Wrong size on BP_AJBWallClimb_C_StateTick");
static_assert(offsetof(BP_AJBWallClimb_C_StateTick, DeltaSeconds) == 0x000000, "Member 'BP_AJBWallClimb_C_StateTick::DeltaSeconds' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.ChangeStandMovementDistanceScale
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBWallClimb_C_ChangeStandMovementDistanceScale final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBWallClimb_C_ChangeStandMovementDistanceScale) == 0x000004, "Wrong alignment on BP_AJBWallClimb_C_ChangeStandMovementDistanceScale");
static_assert(sizeof(BP_AJBWallClimb_C_ChangeStandMovementDistanceScale) == 0x000004, "Wrong size on BP_AJBWallClimb_C_ChangeStandMovementDistanceScale");
static_assert(offsetof(BP_AJBWallClimb_C_ChangeStandMovementDistanceScale, Value) == 0x000000, "Member 'BP_AJBWallClimb_C_ChangeStandMovementDistanceScale::Value' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.ChangeMovementDistanceScale
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBWallClimb_C_ChangeMovementDistanceScale final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBWallClimb_C_ChangeMovementDistanceScale) == 0x000004, "Wrong alignment on BP_AJBWallClimb_C_ChangeMovementDistanceScale");
static_assert(sizeof(BP_AJBWallClimb_C_ChangeMovementDistanceScale) == 0x000004, "Wrong size on BP_AJBWallClimb_C_ChangeMovementDistanceScale");
static_assert(offsetof(BP_AJBWallClimb_C_ChangeMovementDistanceScale, Value) == 0x000000, "Member 'BP_AJBWallClimb_C_ChangeMovementDistanceScale::Value' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.OnCompleted_6D9C0F5845C72D1FE2E944AEDA339B26
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) BP_AJBWallClimb_C_OnCompleted_6D9C0F5845C72D1FE2E944AEDA339B26 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBWallClimb_C_OnCompleted_6D9C0F5845C72D1FE2E944AEDA339B26) == 0x000008, "Wrong alignment on BP_AJBWallClimb_C_OnCompleted_6D9C0F5845C72D1FE2E944AEDA339B26");
static_assert(sizeof(BP_AJBWallClimb_C_OnCompleted_6D9C0F5845C72D1FE2E944AEDA339B26) == 0x000008, "Wrong size on BP_AJBWallClimb_C_OnCompleted_6D9C0F5845C72D1FE2E944AEDA339B26");
static_assert(offsetof(BP_AJBWallClimb_C_OnCompleted_6D9C0F5845C72D1FE2E944AEDA339B26, NotifyName) == 0x000000, "Member 'BP_AJBWallClimb_C_OnCompleted_6D9C0F5845C72D1FE2E944AEDA339B26::NotifyName' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.OnBlendOut_6D9C0F5845C72D1FE2E944AEDA339B26
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) BP_AJBWallClimb_C_OnBlendOut_6D9C0F5845C72D1FE2E944AEDA339B26 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBWallClimb_C_OnBlendOut_6D9C0F5845C72D1FE2E944AEDA339B26) == 0x000008, "Wrong alignment on BP_AJBWallClimb_C_OnBlendOut_6D9C0F5845C72D1FE2E944AEDA339B26");
static_assert(sizeof(BP_AJBWallClimb_C_OnBlendOut_6D9C0F5845C72D1FE2E944AEDA339B26) == 0x000008, "Wrong size on BP_AJBWallClimb_C_OnBlendOut_6D9C0F5845C72D1FE2E944AEDA339B26");
static_assert(offsetof(BP_AJBWallClimb_C_OnBlendOut_6D9C0F5845C72D1FE2E944AEDA339B26, NotifyName) == 0x000000, "Member 'BP_AJBWallClimb_C_OnBlendOut_6D9C0F5845C72D1FE2E944AEDA339B26::NotifyName' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.OnInterrupted_6D9C0F5845C72D1FE2E944AEDA339B26
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) BP_AJBWallClimb_C_OnInterrupted_6D9C0F5845C72D1FE2E944AEDA339B26 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBWallClimb_C_OnInterrupted_6D9C0F5845C72D1FE2E944AEDA339B26) == 0x000008, "Wrong alignment on BP_AJBWallClimb_C_OnInterrupted_6D9C0F5845C72D1FE2E944AEDA339B26");
static_assert(sizeof(BP_AJBWallClimb_C_OnInterrupted_6D9C0F5845C72D1FE2E944AEDA339B26) == 0x000008, "Wrong size on BP_AJBWallClimb_C_OnInterrupted_6D9C0F5845C72D1FE2E944AEDA339B26");
static_assert(offsetof(BP_AJBWallClimb_C_OnInterrupted_6D9C0F5845C72D1FE2E944AEDA339B26, NotifyName) == 0x000000, "Member 'BP_AJBWallClimb_C_OnInterrupted_6D9C0F5845C72D1FE2E944AEDA339B26::NotifyName' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.OnNotifyBegin_6D9C0F5845C72D1FE2E944AEDA339B26
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) BP_AJBWallClimb_C_OnNotifyBegin_6D9C0F5845C72D1FE2E944AEDA339B26 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBWallClimb_C_OnNotifyBegin_6D9C0F5845C72D1FE2E944AEDA339B26) == 0x000008, "Wrong alignment on BP_AJBWallClimb_C_OnNotifyBegin_6D9C0F5845C72D1FE2E944AEDA339B26");
static_assert(sizeof(BP_AJBWallClimb_C_OnNotifyBegin_6D9C0F5845C72D1FE2E944AEDA339B26) == 0x000008, "Wrong size on BP_AJBWallClimb_C_OnNotifyBegin_6D9C0F5845C72D1FE2E944AEDA339B26");
static_assert(offsetof(BP_AJBWallClimb_C_OnNotifyBegin_6D9C0F5845C72D1FE2E944AEDA339B26, NotifyName) == 0x000000, "Member 'BP_AJBWallClimb_C_OnNotifyBegin_6D9C0F5845C72D1FE2E944AEDA339B26::NotifyName' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.OnNotifyEnd_6D9C0F5845C72D1FE2E944AEDA339B26
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) BP_AJBWallClimb_C_OnNotifyEnd_6D9C0F5845C72D1FE2E944AEDA339B26 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBWallClimb_C_OnNotifyEnd_6D9C0F5845C72D1FE2E944AEDA339B26) == 0x000008, "Wrong alignment on BP_AJBWallClimb_C_OnNotifyEnd_6D9C0F5845C72D1FE2E944AEDA339B26");
static_assert(sizeof(BP_AJBWallClimb_C_OnNotifyEnd_6D9C0F5845C72D1FE2E944AEDA339B26) == 0x000008, "Wrong size on BP_AJBWallClimb_C_OnNotifyEnd_6D9C0F5845C72D1FE2E944AEDA339B26");
static_assert(offsetof(BP_AJBWallClimb_C_OnNotifyEnd_6D9C0F5845C72D1FE2E944AEDA339B26, NotifyName) == 0x000000, "Member 'BP_AJBWallClimb_C_OnNotifyEnd_6D9C0F5845C72D1FE2E944AEDA339B26::NotifyName' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.CheckWall
// 0x0B58 (0x0B58 - 0x0000)
struct BP_AJBWallClimb_C_CheckWall final
{
public:
	bool                                          bCanClimb_0;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             WallHitResult;                                     // 0x0008(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         EffectiveHeight_0;                                 // 0x0090(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TempIsIgnoredMinHeight;                            // 0x0094(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          TempShouldIgnoreWallPitch;                         // 0x0095(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_96[0x2];                                       // 0x0096(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TempTraceStartPointOffsetOrigin;                   // 0x0098(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             TempHitResultLeft;                                 // 0x00A8(0x0088)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             TempHitResultRight;                                // 0x0130(0x0088)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                TempTraceStartPointOffsetLeft;                     // 0x01B8(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempTraceStartPointOffsetRight;                    // 0x01C4(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             TempHitResultCenter;                               // 0x01D0(0x0088)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         DimpleCheckSampleLength_local;                     // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ActorLocation;                                     // 0x025C(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EffectiveHeight_local;                             // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDistanceTraceStartToBase;                       // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TraceEndLocation;                                  // 0x0270(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TraceStartLocation;                                // 0x027C(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceTraceStartToBase;                          // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceCameraToTraceStart;                        // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceCameraToBase;                              // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CameraForwardVector;                               // 0x0294(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CameraLocation;                                    // 0x02A0(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CameraToPlayerVector;                              // 0x02AC(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x02B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BA[0x2];                                      // 0x02BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x02BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x02C4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x02D0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x02DC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x02E8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F4[0x4];                                      // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0308(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x031C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0320(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x032C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0338(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_339[0x3];                                      // 0x0339(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_MathExpression_ReturnValue;                 // 0x033C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_CheckWallTraceForward_OutHit;             // 0x0348(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_CheckWallTraceForward_ReturnValue;        // 0x03D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D1[0x3];                                      // 0x03D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_MathExpression_ReturnValue1;                // 0x03D4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_CheckWallTraceForward_OutHit1;            // 0x03E0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_CheckWallTraceForward_ReturnValue1;       // 0x0468(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_469[0x3];                                      // 0x0469(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWallAngleThreshold_WallAngleThreshold; // 0x046C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegreesToRadians_ReturnValue;             // 0x0470(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0474(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_CheckWallTraceHeight2_OutHit;             // 0x0478(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_CheckWallTraceHeight2_ReturnValue;        // 0x0500(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit1;             // 0x0501(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap1;          // 0x0502(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_503[0x1];                                      // 0x0503(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time1;                     // 0x0504(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance1;                 // 0x0508(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location1;                 // 0x050C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint1;              // 0x0518(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal1;                   // 0x0524(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal1;             // 0x0530(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_53C[0x4];                                      // 0x053C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat1;                  // 0x0540(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor1;                 // 0x0548(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent1;             // 0x0550(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName1;              // 0x0558(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem1;                  // 0x0560(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex1;                // 0x0564(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart1;               // 0x0568(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd1;                 // 0x0574(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit2;             // 0x0580(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap2;          // 0x0581(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_582[0x2];                                      // 0x0582(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time2;                     // 0x0584(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance2;                 // 0x0588(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location2;                 // 0x058C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint2;              // 0x0598(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal2;                   // 0x05A4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal2;             // 0x05B0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BC[0x4];                                      // 0x05BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat2;                  // 0x05C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor2;                 // 0x05C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent2;             // 0x05D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName2;              // 0x05D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem2;                  // 0x05E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex2;                // 0x05E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart2;               // 0x05E8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd2;                 // 0x05F4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0600(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_60C[0x4];                                      // 0x060C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_CheckWallTraceHeight1_OutHit;             // 0x0610(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_CheckWallTraceHeight1_bReturnValue;       // 0x0698(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_699[0x3];                                      // 0x0699(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x069C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit3;             // 0x06A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap3;          // 0x06A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6AA[0x2];                                      // 0x06AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time3;                     // 0x06AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance3;                 // 0x06B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location3;                 // 0x06B4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint3;              // 0x06C0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal3;                   // 0x06CC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal3;             // 0x06D8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E4[0x4];                                      // 0x06E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat3;                  // 0x06E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor3;                 // 0x06F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent3;             // 0x06F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName3;              // 0x0700(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem3;                  // 0x0708(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex3;                // 0x070C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart3;               // 0x0710(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd3;                 // 0x071C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0728(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0734(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TraceForwardCheck_bSucceed;               // 0x0738(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit4;             // 0x0739(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap4;          // 0x073A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_73B[0x1];                                      // 0x073B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time4;                     // 0x073C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance4;                 // 0x0740(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location4;                 // 0x0744(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint4;              // 0x0750(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal4;                   // 0x075C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal4;             // 0x0768(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_774[0x4];                                      // 0x0774(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat4;                  // 0x0778(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor4;                 // 0x0780(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent4;             // 0x0788(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName4;              // 0x0790(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem4;                  // 0x0798(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex4;                // 0x079C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart4;               // 0x07A0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd4;                 // 0x07AC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x07B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B9[0x3];                                      // 0x07B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x07BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x07C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x07C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x07C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue1;                 // 0x07C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetCanClimbMinHeight_MinHeight;           // 0x07C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit5;             // 0x07C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap5;          // 0x07C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CA[0x2];                                      // 0x07CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time5;                     // 0x07CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance5;                 // 0x07D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location5;                 // 0x07D4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint5;              // 0x07E0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal5;                   // 0x07EC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal5;             // 0x07F8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_804[0x4];                                      // 0x0804(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat5;                  // 0x0808(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor5;                 // 0x0810(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent5;             // 0x0818(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName5;              // 0x0820(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem5;                  // 0x0828(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex5;                // 0x082C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart5;               // 0x0830(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd5;                 // 0x083C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue1;              // 0x0848(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_849[0x3];                                      // 0x0849(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x084C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0850(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0854(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPointOffsetRate_Rate;                  // 0x0858(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_85C[0x4];                                      // 0x085C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0860(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_wildcard_Variable;                            // 0x0868(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0874(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_875[0x3];                                      // 0x0875(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_CheckWallTraceForward_OutHit2;            // 0x0878(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_CheckWallTraceForward_ReturnValue2;       // 0x0900(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_901[0x3];                                      // 0x0901(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorRightVector_ReturnValue;          // 0x0904(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue1;        // 0x0910(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91C[0x4];                                      // 0x091C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_CheckWallTraceForward_OutHit3;            // 0x0920(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_CheckWallTraceForward_ReturnValue3;       // 0x09A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9A9[0x3];                                      // 0x09A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x09AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue1;           // 0x09B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9B4[0x4];                                      // 0x09B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_CheckWallTraceHeight3_OutHit;             // 0x09B8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_CheckWallTraceHeight3_ReturnValue;        // 0x0A40(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A41[0x3];                                      // 0x0A41(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0A44(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit6;             // 0x0A48(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap6;          // 0x0A49(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A4A[0x2];                                      // 0x0A4A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time6;                     // 0x0A4C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance6;                 // 0x0A50(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location6;                 // 0x0A54(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint6;              // 0x0A60(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal6;                   // 0x0A6C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal6;             // 0x0A78(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A84[0x4];                                      // 0x0A84(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat6;                  // 0x0A88(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor6;                 // 0x0A90(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent6;             // 0x0A98(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName6;              // 0x0AA0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem6;                  // 0x0AA8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex6;                // 0x0AAC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart6;               // 0x0AB0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd6;                 // 0x0ABC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0AC8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0ACC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_ACD[0x3];                                      // 0x0ACD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0AD0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0AD8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0AE0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue1;     // 0x0AE1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AE2[0x2];                                      // 0x0AE2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCapsuleRadius_CapsuleRadius;           // 0x0AE4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0AE8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AE9[0x3];                                      // 0x0AE9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x0AEC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0AF0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorRightVector_ReturnValue1;         // 0x0AF4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue2;        // 0x0B00(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue3;        // 0x0B0C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBGameInstance_bSuccess;              // 0x0B18(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B19[0x7];                                      // 0x0B19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBGameInstance_C*                  CallFunc_GetAJBGameInstance_AJB_Game_Instance;     // 0x0B20(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x0B28(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetStageID_StageTypeID;                   // 0x0B30(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B34[0x4];                                      // 0x0B34(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             K2Node_DynamicCast_AsCharacter;                    // 0x0B38(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0B40(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue2;              // 0x0B41(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B42[0x2];                                      // 0x0B42(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetScaledCapsuleHalfHeight_WithoutHemisphere_ReturnValue; // 0x0B44(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0B48(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBWallClimb_C_CheckWall) == 0x000008, "Wrong alignment on BP_AJBWallClimb_C_CheckWall");
static_assert(sizeof(BP_AJBWallClimb_C_CheckWall) == 0x000B58, "Wrong size on BP_AJBWallClimb_C_CheckWall");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, bCanClimb_0) == 0x000000, "Member 'BP_AJBWallClimb_C_CheckWall::bCanClimb_0' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, WallHitResult) == 0x000008, "Member 'BP_AJBWallClimb_C_CheckWall::WallHitResult' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, EffectiveHeight_0) == 0x000090, "Member 'BP_AJBWallClimb_C_CheckWall::EffectiveHeight_0' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, TempIsIgnoredMinHeight) == 0x000094, "Member 'BP_AJBWallClimb_C_CheckWall::TempIsIgnoredMinHeight' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, TempShouldIgnoreWallPitch) == 0x000095, "Member 'BP_AJBWallClimb_C_CheckWall::TempShouldIgnoreWallPitch' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, TempTraceStartPointOffsetOrigin) == 0x000098, "Member 'BP_AJBWallClimb_C_CheckWall::TempTraceStartPointOffsetOrigin' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, TempHitResultLeft) == 0x0000A8, "Member 'BP_AJBWallClimb_C_CheckWall::TempHitResultLeft' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, TempHitResultRight) == 0x000130, "Member 'BP_AJBWallClimb_C_CheckWall::TempHitResultRight' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, TempTraceStartPointOffsetLeft) == 0x0001B8, "Member 'BP_AJBWallClimb_C_CheckWall::TempTraceStartPointOffsetLeft' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, TempTraceStartPointOffsetRight) == 0x0001C4, "Member 'BP_AJBWallClimb_C_CheckWall::TempTraceStartPointOffsetRight' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, TempHitResultCenter) == 0x0001D0, "Member 'BP_AJBWallClimb_C_CheckWall::TempHitResultCenter' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, DimpleCheckSampleLength_local) == 0x000258, "Member 'BP_AJBWallClimb_C_CheckWall::DimpleCheckSampleLength_local' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, ActorLocation) == 0x00025C, "Member 'BP_AJBWallClimb_C_CheckWall::ActorLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, EffectiveHeight_local) == 0x000268, "Member 'BP_AJBWallClimb_C_CheckWall::EffectiveHeight_local' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, MaxDistanceTraceStartToBase) == 0x00026C, "Member 'BP_AJBWallClimb_C_CheckWall::MaxDistanceTraceStartToBase' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, TraceEndLocation) == 0x000270, "Member 'BP_AJBWallClimb_C_CheckWall::TraceEndLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, TraceStartLocation) == 0x00027C, "Member 'BP_AJBWallClimb_C_CheckWall::TraceStartLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, DistanceTraceStartToBase) == 0x000288, "Member 'BP_AJBWallClimb_C_CheckWall::DistanceTraceStartToBase' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, DistanceCameraToTraceStart) == 0x00028C, "Member 'BP_AJBWallClimb_C_CheckWall::DistanceCameraToTraceStart' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, DistanceCameraToBase) == 0x000290, "Member 'BP_AJBWallClimb_C_CheckWall::DistanceCameraToBase' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CameraForwardVector) == 0x000294, "Member 'BP_AJBWallClimb_C_CheckWall::CameraForwardVector' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CameraLocation) == 0x0002A0, "Member 'BP_AJBWallClimb_C_CheckWall::CameraLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CameraToPlayerVector) == 0x0002AC, "Member 'BP_AJBWallClimb_C_CheckWall::CameraToPlayerVector' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_bBlockingHit) == 0x0002B8, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_bInitialOverlap) == 0x0002B9, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_Time) == 0x0002BC, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_Distance) == 0x0002C0, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_Location) == 0x0002C4, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_ImpactPoint) == 0x0002D0, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_Normal) == 0x0002DC, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_ImpactNormal) == 0x0002E8, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_PhysMat) == 0x0002F8, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_HitActor) == 0x000300, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_HitComponent) == 0x000308, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_HitBoneName) == 0x000310, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_HitItem) == 0x000318, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_FaceIndex) == 0x00031C, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_TraceStart) == 0x000320, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_TraceEnd) == 0x00032C, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_Array_Contains_ReturnValue) == 0x000338, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, K2Node_MathExpression_ReturnValue) == 0x00033C, "Member 'BP_AJBWallClimb_C_CheckWall::K2Node_MathExpression_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_CheckWallTraceForward_OutHit) == 0x000348, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_CheckWallTraceForward_OutHit' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_CheckWallTraceForward_ReturnValue) == 0x0003D0, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_CheckWallTraceForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, K2Node_MathExpression_ReturnValue1) == 0x0003D4, "Member 'BP_AJBWallClimb_C_CheckWall::K2Node_MathExpression_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_CheckWallTraceForward_OutHit1) == 0x0003E0, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_CheckWallTraceForward_OutHit1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_CheckWallTraceForward_ReturnValue1) == 0x000468, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_CheckWallTraceForward_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_GetWallAngleThreshold_WallAngleThreshold) == 0x00046C, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_GetWallAngleThreshold_WallAngleThreshold' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_DegreesToRadians_ReturnValue) == 0x000470, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_DegreesToRadians_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000474, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_CheckWallTraceHeight2_OutHit) == 0x000478, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_CheckWallTraceHeight2_OutHit' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_CheckWallTraceHeight2_ReturnValue) == 0x000500, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_CheckWallTraceHeight2_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_bBlockingHit1) == 0x000501, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_bBlockingHit1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_bInitialOverlap1) == 0x000502, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_bInitialOverlap1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_Time1) == 0x000504, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_Time1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_Distance1) == 0x000508, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_Distance1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_Location1) == 0x00050C, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_Location1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_ImpactPoint1) == 0x000518, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_ImpactPoint1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_Normal1) == 0x000524, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_Normal1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_ImpactNormal1) == 0x000530, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_ImpactNormal1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_PhysMat1) == 0x000540, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_PhysMat1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_HitActor1) == 0x000548, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_HitActor1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_HitComponent1) == 0x000550, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_HitComponent1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_HitBoneName1) == 0x000558, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_HitBoneName1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_HitItem1) == 0x000560, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_HitItem1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_FaceIndex1) == 0x000564, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_FaceIndex1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_TraceStart1) == 0x000568, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_TraceStart1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_TraceEnd1) == 0x000574, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_TraceEnd1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_bBlockingHit2) == 0x000580, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_bBlockingHit2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_bInitialOverlap2) == 0x000581, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_bInitialOverlap2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_Time2) == 0x000584, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_Time2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_Distance2) == 0x000588, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_Distance2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_Location2) == 0x00058C, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_Location2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_ImpactPoint2) == 0x000598, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_ImpactPoint2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_Normal2) == 0x0005A4, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_Normal2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_ImpactNormal2) == 0x0005B0, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_ImpactNormal2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_PhysMat2) == 0x0005C0, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_PhysMat2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_HitActor2) == 0x0005C8, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_HitActor2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_HitComponent2) == 0x0005D0, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_HitComponent2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_HitBoneName2) == 0x0005D8, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_HitBoneName2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_HitItem2) == 0x0005E0, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_HitItem2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_FaceIndex2) == 0x0005E4, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_FaceIndex2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_TraceStart2) == 0x0005E8, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_TraceStart2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_TraceEnd2) == 0x0005F4, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_TraceEnd2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000600, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_CheckWallTraceHeight1_OutHit) == 0x000610, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_CheckWallTraceHeight1_OutHit' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_CheckWallTraceHeight1_bReturnValue) == 0x000698, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_CheckWallTraceHeight1_bReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_Add_VectorVector_ReturnValue) == 0x00069C, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_bBlockingHit3) == 0x0006A8, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_bBlockingHit3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_bInitialOverlap3) == 0x0006A9, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_bInitialOverlap3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_Time3) == 0x0006AC, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_Time3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_Distance3) == 0x0006B0, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_Distance3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_Location3) == 0x0006B4, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_Location3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_ImpactPoint3) == 0x0006C0, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_ImpactPoint3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_Normal3) == 0x0006CC, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_Normal3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_ImpactNormal3) == 0x0006D8, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_ImpactNormal3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_PhysMat3) == 0x0006E8, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_PhysMat3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_HitActor3) == 0x0006F0, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_HitActor3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_HitComponent3) == 0x0006F8, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_HitComponent3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_HitBoneName3) == 0x000700, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_HitBoneName3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_HitItem3) == 0x000708, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_HitItem3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_FaceIndex3) == 0x00070C, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_FaceIndex3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_TraceStart3) == 0x000710, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_TraceStart3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_TraceEnd3) == 0x00071C, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_TraceEnd3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000728, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_VSize_ReturnValue) == 0x000734, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_TraceForwardCheck_bSucceed) == 0x000738, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_TraceForwardCheck_bSucceed' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_bBlockingHit4) == 0x000739, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_bBlockingHit4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_bInitialOverlap4) == 0x00073A, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_bInitialOverlap4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_Time4) == 0x00073C, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_Time4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_Distance4) == 0x000740, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_Distance4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_Location4) == 0x000744, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_Location4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_ImpactPoint4) == 0x000750, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_ImpactPoint4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_Normal4) == 0x00075C, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_Normal4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_ImpactNormal4) == 0x000768, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_ImpactNormal4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_PhysMat4) == 0x000778, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_PhysMat4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_HitActor4) == 0x000780, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_HitActor4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_HitComponent4) == 0x000788, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_HitComponent4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_HitBoneName4) == 0x000790, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_HitBoneName4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_HitItem4) == 0x000798, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_HitItem4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_FaceIndex4) == 0x00079C, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_FaceIndex4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_TraceStart4) == 0x0007A0, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_TraceStart4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_TraceEnd4) == 0x0007AC, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_TraceEnd4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_Not_PreBool_ReturnValue) == 0x0007B8, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_Dot_VectorVector_ReturnValue) == 0x0007BC, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0007C0, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0007C1, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BooleanAND_ReturnValue) == 0x0007C2, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_Not_PreBool_ReturnValue1) == 0x0007C3, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_Not_PreBool_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_GetCanClimbMinHeight_MinHeight) == 0x0007C4, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_GetCanClimbMinHeight_MinHeight' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_bBlockingHit5) == 0x0007C8, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_bBlockingHit5' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_bInitialOverlap5) == 0x0007C9, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_bInitialOverlap5' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_Time5) == 0x0007CC, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_Time5' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_Distance5) == 0x0007D0, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_Distance5' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_Location5) == 0x0007D4, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_Location5' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_ImpactPoint5) == 0x0007E0, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_ImpactPoint5' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_Normal5) == 0x0007EC, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_Normal5' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_ImpactNormal5) == 0x0007F8, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_ImpactNormal5' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_PhysMat5) == 0x000808, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_PhysMat5' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_HitActor5) == 0x000810, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_HitActor5' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_HitComponent5) == 0x000818, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_HitComponent5' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_HitBoneName5) == 0x000820, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_HitBoneName5' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_HitItem5) == 0x000828, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_HitItem5' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_FaceIndex5) == 0x00082C, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_FaceIndex5' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_TraceStart5) == 0x000830, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_TraceStart5' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_TraceEnd5) == 0x00083C, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_TraceEnd5' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_Array_Contains_ReturnValue1) == 0x000848, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_Array_Contains_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, Temp_int_Variable) == 0x00084C, "Member 'BP_AJBWallClimb_C_CheckWall::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_Subtract_IntInt_ReturnValue) == 0x000850, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_Add_IntInt_ReturnValue) == 0x000854, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_GetPointOffsetRate_Rate) == 0x000858, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_GetPointOffsetRate_Rate' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_GetPlayerController_ReturnValue) == 0x000860, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, Temp_wildcard_Variable) == 0x000868, "Member 'BP_AJBWallClimb_C_CheckWall::Temp_wildcard_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_IsValid_ReturnValue) == 0x000874, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_CheckWallTraceForward_OutHit2) == 0x000878, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_CheckWallTraceForward_OutHit2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_CheckWallTraceForward_ReturnValue2) == 0x000900, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_CheckWallTraceForward_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_GetActorRightVector_ReturnValue) == 0x000904, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_GetActorRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_Multiply_VectorFloat_ReturnValue1) == 0x000910, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_Multiply_VectorFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_CheckWallTraceForward_OutHit3) == 0x000920, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_CheckWallTraceForward_OutHit3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_CheckWallTraceForward_ReturnValue3) == 0x0009A8, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_CheckWallTraceForward_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_Multiply_IntFloat_ReturnValue) == 0x0009AC, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_Multiply_IntFloat_ReturnValue1) == 0x0009B0, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_Multiply_IntFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_CheckWallTraceHeight3_OutHit) == 0x0009B8, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_CheckWallTraceHeight3_OutHit' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_CheckWallTraceHeight3_ReturnValue) == 0x000A40, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_CheckWallTraceHeight3_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000A44, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_bBlockingHit6) == 0x000A48, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_bBlockingHit6' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_bInitialOverlap6) == 0x000A49, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_bInitialOverlap6' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_Time6) == 0x000A4C, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_Time6' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_Distance6) == 0x000A50, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_Distance6' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_Location6) == 0x000A54, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_Location6' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_ImpactPoint6) == 0x000A60, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_ImpactPoint6' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_Normal6) == 0x000A6C, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_Normal6' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_ImpactNormal6) == 0x000A78, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_ImpactNormal6' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_PhysMat6) == 0x000A88, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_PhysMat6' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_HitActor6) == 0x000A90, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_HitActor6' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_HitComponent6) == 0x000A98, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_HitComponent6' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_HitBoneName6) == 0x000AA0, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_HitBoneName6' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_HitItem6) == 0x000AA8, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_HitItem6' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_FaceIndex6) == 0x000AAC, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_FaceIndex6' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_TraceStart6) == 0x000AB0, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_TraceStart6' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BreakHitResult_TraceEnd6) == 0x000ABC, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BreakHitResult_TraceEnd6' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_FTrunc_ReturnValue) == 0x000AC8, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000ACC, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_GetOwner_ReturnValue) == 0x000AD0, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000AD8, "Member 'BP_AJBWallClimb_C_CheckWall::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, K2Node_DynamicCast_bSuccess) == 0x000AE0, "Member 'BP_AJBWallClimb_C_CheckWall::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_GreaterEqual_FloatFloat_ReturnValue1) == 0x000AE1, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_GreaterEqual_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_GetCapsuleRadius_CapsuleRadius) == 0x000AE4, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_GetCapsuleRadius_CapsuleRadius' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_BooleanOR_ReturnValue) == 0x000AE8, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x000AEC, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_Add_FloatFloat_ReturnValue) == 0x000AF0, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_GetActorRightVector_ReturnValue1) == 0x000AF4, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_GetActorRightVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_Multiply_VectorFloat_ReturnValue2) == 0x000B00, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_Multiply_VectorFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_Multiply_VectorFloat_ReturnValue3) == 0x000B0C, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_Multiply_VectorFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_GetAJBGameInstance_bSuccess) == 0x000B18, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_GetAJBGameInstance_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_GetAJBGameInstance_AJB_Game_Instance) == 0x000B20, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_GetAJBGameInstance_AJB_Game_Instance' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_GetOwner_ReturnValue1) == 0x000B28, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_GetStageID_StageTypeID) == 0x000B30, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_GetStageID_StageTypeID' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, K2Node_DynamicCast_AsCharacter) == 0x000B38, "Member 'BP_AJBWallClimb_C_CheckWall::K2Node_DynamicCast_AsCharacter' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, K2Node_DynamicCast_bSuccess1) == 0x000B40, "Member 'BP_AJBWallClimb_C_CheckWall::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_Array_Contains_ReturnValue2) == 0x000B41, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_Array_Contains_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_GetScaledCapsuleHalfHeight_WithoutHemisphere_ReturnValue) == 0x000B44, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_GetScaledCapsuleHalfHeight_WithoutHemisphere_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWall, CallFunc_MakeVector_ReturnValue) == 0x000B48, "Member 'BP_AJBWallClimb_C_CheckWall::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.CalcAccensionDirection
// 0x0540 (0x0540 - 0x0000)
struct BP_AJBWallClimb_C_CalcAccensionDirection final
{
public:
	struct FVector                                WallNormal_0;                                      // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAscensionContinue;                                // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsTouchWall;                                      // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIsAvoidanceEdge;                                  // 0x001D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TempDistantSensorToEdge;                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempTopTraceLength;                                // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTempIsAvoidanceEdge;                              // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TempForwardTracePoint;                             // 0x002C(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempSensorMargine;                                 // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTempIsTouchWall;                                  // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TempNumOfTrace;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempSensorPoint;                                   // 0x0044(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0064(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_CheckWallTraceRouteDetect1_OutHit;        // 0x0070(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_CheckWallTraceRouteDetect1_bReturnValue;  // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00FC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10A[0x2];                                      // 0x010A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0114(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0120(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x012C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0138(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0158(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0170(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x017C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue1;              // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue2;              // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue3;              // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue4;              // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue1;        // 0x01A8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x01B4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue2;        // 0x01C0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable;                              // 0x01CC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue3;        // 0x01D8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ProjectVectorOnToPlane_ReturnValue;       // 0x01E4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable1;                               // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F1[0x3];                                      // 0x01F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0200(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x0208(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0214(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select1_Default;                            // 0x0224(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue5;              // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0234(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue6;              // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue4;        // 0x0244(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue5;        // 0x0250(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue1;         // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue6;        // 0x0264(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue1;            // 0x0270(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue7;        // 0x027C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue2;            // 0x0288(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ProjectVectorOnToPlane_ReturnValue1;      // 0x0294(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue3;            // 0x02A0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue8;        // 0x02AC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_CheckWallTraceRouteDetect3_OutHit;        // 0x02B8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_CheckWallTraceRouteDetect3_bReturnValue;  // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit1;             // 0x0341(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap1;          // 0x0342(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_343[0x1];                                      // 0x0343(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time1;                     // 0x0344(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance1;                 // 0x0348(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location1;                 // 0x034C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint1;              // 0x0358(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal1;                   // 0x0364(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal1;             // 0x0370(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37C[0x4];                                      // 0x037C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat1;                  // 0x0380(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor1;                 // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent1;             // 0x0390(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName1;              // 0x0398(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem1;                  // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex1;                // 0x03A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart1;               // 0x03A8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd1;                 // 0x03B4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue4;            // 0x03C0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X1;                           // 0x03CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y1;                           // 0x03D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z1;                           // 0x03D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_CheckWallTraceRouteDetect2_OutHit;        // 0x03D8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_CheckWallTraceRouteDetect2_bReturnValue;  // 0x0460(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_461[0x3];                                      // 0x0461(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue1;                // 0x0464(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit2;             // 0x046C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap2;          // 0x046D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46E[0x2];                                      // 0x046E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time2;                     // 0x0470(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance2;                 // 0x0474(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location2;                 // 0x0478(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint2;              // 0x0484(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal2;                   // 0x0490(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal2;             // 0x049C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat2;                  // 0x04A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor2;                 // 0x04B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent2;             // 0x04B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName2;              // 0x04C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem2;                  // 0x04C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex2;                // 0x04CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart2;               // 0x04D0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd2;                 // 0x04DC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x04E8(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize2D_ReturnValue;                      // 0x04F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x04F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4F5[0x3];                                      // 0x04F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue7;              // 0x04F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue2;         // 0x04FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue1;        // 0x0500(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_501[0x3];                                      // 0x0501(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue9;        // 0x0504(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X2;                           // 0x0510(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y2;                           // 0x0514(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z2;                           // 0x0518(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue1;                  // 0x051C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0528(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue5;            // 0x052C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0538(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBWallClimb_C_CalcAccensionDirection) == 0x000008, "Wrong alignment on BP_AJBWallClimb_C_CalcAccensionDirection");
static_assert(sizeof(BP_AJBWallClimb_C_CalcAccensionDirection) == 0x000540, "Wrong size on BP_AJBWallClimb_C_CalcAccensionDirection");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, WallNormal_0) == 0x000000, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::WallNormal_0' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, bAscensionContinue) == 0x00000C, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::bAscensionContinue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, ReturnValue) == 0x000010, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, bIsTouchWall) == 0x00001C, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::bIsTouchWall' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, bIsAvoidanceEdge) == 0x00001D, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::bIsAvoidanceEdge' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, TempDistantSensorToEdge) == 0x000020, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::TempDistantSensorToEdge' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, TempTopTraceLength) == 0x000024, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::TempTopTraceLength' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, bTempIsAvoidanceEdge) == 0x000028, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::bTempIsAvoidanceEdge' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, TempForwardTracePoint) == 0x00002C, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::TempForwardTracePoint' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, TempSensorMargine) == 0x000038, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::TempSensorMargine' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, bTempIsTouchWall) == 0x00003C, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::bTempIsTouchWall' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, TempNumOfTrace) == 0x000040, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::TempNumOfTrace' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, TempSensorPoint) == 0x000044, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::TempSensorPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_GetOwner_ReturnValue) == 0x000050, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000058, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000064, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_CheckWallTraceRouteDetect1_OutHit) == 0x000070, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_CheckWallTraceRouteDetect1_OutHit' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_CheckWallTraceRouteDetect1_bReturnValue) == 0x0000F8, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_CheckWallTraceRouteDetect1_bReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000FC, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_bBlockingHit) == 0x000108, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_bInitialOverlap) == 0x000109, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_Time) == 0x00010C, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_Distance) == 0x000110, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_Location) == 0x000114, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_ImpactPoint) == 0x000120, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_Normal) == 0x00012C, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_ImpactNormal) == 0x000138, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_PhysMat) == 0x000148, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_HitActor) == 0x000150, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_HitComponent) == 0x000158, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_HitBoneName) == 0x000160, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_HitItem) == 0x000168, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_FaceIndex) == 0x00016C, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_TraceStart) == 0x000170, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_TraceEnd) == 0x00017C, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, Temp_bool_Variable) == 0x000188, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_Add_FloatFloat_ReturnValue) == 0x00018C, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_Add_FloatFloat_ReturnValue1) == 0x000190, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_Add_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000194, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_Add_FloatFloat_ReturnValue2) == 0x000198, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_Add_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_Add_FloatFloat_ReturnValue3) == 0x00019C, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_Add_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_Add_FloatFloat_ReturnValue4) == 0x0001A0, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_Add_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_FMax_ReturnValue) == 0x0001A4, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_Multiply_VectorFloat_ReturnValue1) == 0x0001A8, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_Multiply_VectorFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_MakeVector_ReturnValue) == 0x0001B4, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_Multiply_VectorFloat_ReturnValue2) == 0x0001C0, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_Multiply_VectorFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, Temp_struct_Variable) == 0x0001CC, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_Multiply_VectorFloat_ReturnValue3) == 0x0001D8, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_Multiply_VectorFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_ProjectVectorOnToPlane_ReturnValue) == 0x0001E4, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_ProjectVectorOnToPlane_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, Temp_bool_Variable1) == 0x0001F0, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakVector_X) == 0x0001F4, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakVector_Y) == 0x0001F8, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakVector_Z) == 0x0001FC, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_MakeVector2D_ReturnValue) == 0x000200, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, K2Node_Select_Default) == 0x000208, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_Add_VectorVector_ReturnValue) == 0x000214, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000220, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, K2Node_Select1_Default) == 0x000224, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_Add_FloatFloat_ReturnValue5) == 0x000230, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_Add_FloatFloat_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_Normal_ReturnValue) == 0x000234, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_Add_FloatFloat_ReturnValue6) == 0x000240, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_Add_FloatFloat_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_Multiply_VectorFloat_ReturnValue4) == 0x000244, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_Multiply_VectorFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_Multiply_VectorFloat_ReturnValue5) == 0x000250, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_Multiply_VectorFloat_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x00025C, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_Subtract_FloatFloat_ReturnValue1) == 0x000260, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_Subtract_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_Multiply_VectorFloat_ReturnValue6) == 0x000264, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_Multiply_VectorFloat_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_Add_VectorVector_ReturnValue1) == 0x000270, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_Add_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_Multiply_VectorFloat_ReturnValue7) == 0x00027C, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_Multiply_VectorFloat_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_Add_VectorVector_ReturnValue2) == 0x000288, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_Add_VectorVector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_ProjectVectorOnToPlane_ReturnValue1) == 0x000294, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_ProjectVectorOnToPlane_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_Add_VectorVector_ReturnValue3) == 0x0002A0, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_Add_VectorVector_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_Multiply_VectorFloat_ReturnValue8) == 0x0002AC, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_Multiply_VectorFloat_ReturnValue8' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_CheckWallTraceRouteDetect3_OutHit) == 0x0002B8, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_CheckWallTraceRouteDetect3_OutHit' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_CheckWallTraceRouteDetect3_bReturnValue) == 0x000340, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_CheckWallTraceRouteDetect3_bReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_bBlockingHit1) == 0x000341, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_bBlockingHit1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_bInitialOverlap1) == 0x000342, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_bInitialOverlap1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_Time1) == 0x000344, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_Time1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_Distance1) == 0x000348, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_Distance1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_Location1) == 0x00034C, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_Location1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_ImpactPoint1) == 0x000358, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_ImpactPoint1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_Normal1) == 0x000364, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_Normal1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_ImpactNormal1) == 0x000370, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_ImpactNormal1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_PhysMat1) == 0x000380, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_PhysMat1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_HitActor1) == 0x000388, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_HitActor1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_HitComponent1) == 0x000390, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_HitComponent1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_HitBoneName1) == 0x000398, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_HitBoneName1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_HitItem1) == 0x0003A0, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_HitItem1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_FaceIndex1) == 0x0003A4, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_FaceIndex1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_TraceStart1) == 0x0003A8, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_TraceStart1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_TraceEnd1) == 0x0003B4, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_TraceEnd1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_Add_VectorVector_ReturnValue4) == 0x0003C0, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_Add_VectorVector_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakVector_X1) == 0x0003CC, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakVector_X1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakVector_Y1) == 0x0003D0, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakVector_Y1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakVector_Z1) == 0x0003D4, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakVector_Z1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_CheckWallTraceRouteDetect2_OutHit) == 0x0003D8, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_CheckWallTraceRouteDetect2_OutHit' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_CheckWallTraceRouteDetect2_bReturnValue) == 0x000460, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_CheckWallTraceRouteDetect2_bReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_MakeVector2D_ReturnValue1) == 0x000464, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_MakeVector2D_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_bBlockingHit2) == 0x00046C, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_bBlockingHit2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_bInitialOverlap2) == 0x00046D, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_bInitialOverlap2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_Time2) == 0x000470, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_Time2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_Distance2) == 0x000474, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_Distance2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_Location2) == 0x000478, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_Location2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_ImpactPoint2) == 0x000484, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_ImpactPoint2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_Normal2) == 0x000490, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_Normal2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_ImpactNormal2) == 0x00049C, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_ImpactNormal2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_PhysMat2) == 0x0004A8, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_PhysMat2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_HitActor2) == 0x0004B0, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_HitActor2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_HitComponent2) == 0x0004B8, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_HitComponent2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_HitBoneName2) == 0x0004C0, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_HitBoneName2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_HitItem2) == 0x0004C8, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_HitItem2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_FaceIndex2) == 0x0004CC, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_FaceIndex2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_TraceStart2) == 0x0004D0, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_TraceStart2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakHitResult_TraceEnd2) == 0x0004DC, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakHitResult_TraceEnd2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x0004E8, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_VSize2D_ReturnValue) == 0x0004F0, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_VSize2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0004F4, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_Add_FloatFloat_ReturnValue7) == 0x0004F8, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_Add_FloatFloat_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_Subtract_FloatFloat_ReturnValue2) == 0x0004FC, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_Subtract_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_LessEqual_FloatFloat_ReturnValue1) == 0x000500, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_LessEqual_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_Multiply_VectorFloat_ReturnValue9) == 0x000504, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_Multiply_VectorFloat_ReturnValue9' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakVector_X2) == 0x000510, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakVector_X2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakVector_Y2) == 0x000514, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakVector_Y2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_BreakVector_Z2) == 0x000518, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_BreakVector_Z2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_MakeVector_ReturnValue1) == 0x00051C, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_MakeVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_Add_IntInt_ReturnValue) == 0x000528, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_Add_VectorVector_ReturnValue5) == 0x00052C, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_Add_VectorVector_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAccensionDirection, CallFunc_Less_IntInt_ReturnValue) == 0x000538, "Member 'BP_AJBWallClimb_C_CalcAccensionDirection::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.CheckRest
// 0x0090 (0x0090 - 0x0000)
struct BP_AJBWallClimb_C_CheckRest final
{
public:
	bool                                          bIsRest;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CacheNum_local;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x002C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0044(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Array_Get_Item1;                          // 0x0058(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0064(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue2;                // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue1;              // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBWallClimb_C_CheckRest) == 0x000008, "Wrong alignment on BP_AJBWallClimb_C_CheckRest");
static_assert(sizeof(BP_AJBWallClimb_C_CheckRest) == 0x000090, "Wrong size on BP_AJBWallClimb_C_CheckRest");
static_assert(offsetof(BP_AJBWallClimb_C_CheckRest, bIsRest) == 0x000000, "Member 'BP_AJBWallClimb_C_CheckRest::bIsRest' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckRest, CacheNum_local) == 0x000004, "Member 'BP_AJBWallClimb_C_CheckRest::CacheNum_local' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckRest, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_AJBWallClimb_C_CheckRest::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckRest, CallFunc_Subtract_IntInt_ReturnValue) == 0x00000C, "Member 'BP_AJBWallClimb_C_CheckRest::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckRest, CallFunc_Greater_IntInt_ReturnValue) == 0x000010, "Member 'BP_AJBWallClimb_C_CheckRest::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckRest, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'BP_AJBWallClimb_C_CheckRest::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckRest, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000020, "Member 'BP_AJBWallClimb_C_CheckRest::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckRest, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_AJBWallClimb_C_CheckRest::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckRest, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00002C, "Member 'BP_AJBWallClimb_C_CheckRest::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckRest, Temp_int_Variable) == 0x000038, "Member 'BP_AJBWallClimb_C_CheckRest::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckRest, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'BP_AJBWallClimb_C_CheckRest::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckRest, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'BP_AJBWallClimb_C_CheckRest::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckRest, CallFunc_Array_Get_Item) == 0x000044, "Member 'BP_AJBWallClimb_C_CheckRest::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckRest, CallFunc_Add_IntInt_ReturnValue) == 0x000050, "Member 'BP_AJBWallClimb_C_CheckRest::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckRest, Temp_bool_Variable) == 0x000054, "Member 'BP_AJBWallClimb_C_CheckRest::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckRest, CallFunc_Array_Get_Item1) == 0x000058, "Member 'BP_AJBWallClimb_C_CheckRest::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckRest, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000064, "Member 'BP_AJBWallClimb_C_CheckRest::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckRest, K2Node_Select_Default) == 0x000070, "Member 'BP_AJBWallClimb_C_CheckRest::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckRest, CallFunc_VSize_ReturnValue) == 0x000074, "Member 'BP_AJBWallClimb_C_CheckRest::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckRest, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000078, "Member 'BP_AJBWallClimb_C_CheckRest::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckRest, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000079, "Member 'BP_AJBWallClimb_C_CheckRest::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckRest, CallFunc_Array_Length_ReturnValue1) == 0x00007C, "Member 'BP_AJBWallClimb_C_CheckRest::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckRest, CallFunc_Less_IntInt_ReturnValue) == 0x000080, "Member 'BP_AJBWallClimb_C_CheckRest::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckRest, CallFunc_Array_Length_ReturnValue2) == 0x000084, "Member 'BP_AJBWallClimb_C_CheckRest::CallFunc_Array_Length_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckRest, CallFunc_Greater_IntInt_ReturnValue1) == 0x000088, "Member 'BP_AJBWallClimb_C_CheckRest::CallFunc_Greater_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckRest, CallFunc_Array_Add_ReturnValue) == 0x00008C, "Member 'BP_AJBWallClimb_C_CheckRest::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.SetEnableDDWLeg
// 0x0070 (0x0070 - 0x0000)
struct BP_AJBWallClimb_C_SetEnableDDWLeg final
{
public:
	bool                                          bIsEnable;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bAnimation;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bUseSpecifiedRotation;                             // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	class FName                                   DDWLegMeshTag;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          CallFunc_RequestLegParticle_Particle;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          CallFunc_RequestLegParticle_Particle1;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameStand_C*                   K2Node_DynamicCast_AsBP_AJBIn_Game_Stand;          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameStand_DDW_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Stand_DDW;      // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameParticleEffect_C*          CallFunc_RequestLegParticle_Particle2;             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBWallClimb_C_SetEnableDDWLeg) == 0x000008, "Wrong alignment on BP_AJBWallClimb_C_SetEnableDDWLeg");
static_assert(sizeof(BP_AJBWallClimb_C_SetEnableDDWLeg) == 0x000070, "Wrong size on BP_AJBWallClimb_C_SetEnableDDWLeg");
static_assert(offsetof(BP_AJBWallClimb_C_SetEnableDDWLeg, bIsEnable) == 0x000000, "Member 'BP_AJBWallClimb_C_SetEnableDDWLeg::bIsEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_SetEnableDDWLeg, bAnimation) == 0x000001, "Member 'BP_AJBWallClimb_C_SetEnableDDWLeg::bAnimation' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_SetEnableDDWLeg, bUseSpecifiedRotation) == 0x000002, "Member 'BP_AJBWallClimb_C_SetEnableDDWLeg::bUseSpecifiedRotation' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_SetEnableDDWLeg, Rotation) == 0x000004, "Member 'BP_AJBWallClimb_C_SetEnableDDWLeg::Rotation' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_SetEnableDDWLeg, DDWLegMeshTag) == 0x000010, "Member 'BP_AJBWallClimb_C_SetEnableDDWLeg::DDWLegMeshTag' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_SetEnableDDWLeg, CallFunc_RequestLegParticle_Particle) == 0x000018, "Member 'BP_AJBWallClimb_C_SetEnableDDWLeg::CallFunc_RequestLegParticle_Particle' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_SetEnableDDWLeg, CallFunc_RequestLegParticle_Particle1) == 0x000020, "Member 'BP_AJBWallClimb_C_SetEnableDDWLeg::CallFunc_RequestLegParticle_Particle1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_SetEnableDDWLeg, CallFunc_GetOwner_ReturnValue) == 0x000028, "Member 'BP_AJBWallClimb_C_SetEnableDDWLeg::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_SetEnableDDWLeg, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000030, "Member 'BP_AJBWallClimb_C_SetEnableDDWLeg::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_SetEnableDDWLeg, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_AJBWallClimb_C_SetEnableDDWLeg::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_SetEnableDDWLeg, K2Node_DynamicCast_AsBP_AJBIn_Game_Stand) == 0x000040, "Member 'BP_AJBWallClimb_C_SetEnableDDWLeg::K2Node_DynamicCast_AsBP_AJBIn_Game_Stand' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_SetEnableDDWLeg, K2Node_DynamicCast_bSuccess1) == 0x000048, "Member 'BP_AJBWallClimb_C_SetEnableDDWLeg::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_SetEnableDDWLeg, CallFunc_IsValid_ReturnValue) == 0x000049, "Member 'BP_AJBWallClimb_C_SetEnableDDWLeg::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_SetEnableDDWLeg, K2Node_DynamicCast_AsBP_AJBIn_Game_Stand_DDW) == 0x000050, "Member 'BP_AJBWallClimb_C_SetEnableDDWLeg::K2Node_DynamicCast_AsBP_AJBIn_Game_Stand_DDW' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_SetEnableDDWLeg, K2Node_DynamicCast_bSuccess2) == 0x000058, "Member 'BP_AJBWallClimb_C_SetEnableDDWLeg::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_SetEnableDDWLeg, CallFunc_RequestLegParticle_Particle2) == 0x000060, "Member 'BP_AJBWallClimb_C_SetEnableDDWLeg::CallFunc_RequestLegParticle_Particle2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_SetEnableDDWLeg, CallFunc_IsValid_ReturnValue1) == 0x000068, "Member 'BP_AJBWallClimb_C_SetEnableDDWLeg::CallFunc_IsValid_ReturnValue1' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.CheckWallTraceForward
// 0x02B8 (0x02B8 - 0x0000)
struct BP_AJBWallClimb_C_CheckWallTraceForward final
{
public:
	struct FVector                                TraceStartPointOffset;                             // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             OutHit;                                            // 0x0010(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TraceEndLocation;                                  // 0x009C(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TraceStartLocation;                                // 0x00A8(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CameraForwardVector;                               // 0x00B4(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ActorLocation;                                     // 0x00C0(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CameraLocation;                                    // 0x00CC(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00D8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x00E8(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FHitResult>                     CallFunc_AJBMultiLineTraceForObjects_OutHits;      // 0x0100(0x0010)(ZeroConstructor, ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_AJBMultiLineTraceForObjects_ReturnValue;  // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_112[0x6];                                      // 0x0112(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_GetHitResultConsiderEntrance_HitResult;   // 0x0118(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_AJBLineTraceForObjects_OutHit;            // 0x01A0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_AJBLineTraceForObjects_ReturnValue;       // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_229[0x3];                                      // 0x0229(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetCameraRotation_ReturnValue;            // 0x022C(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0238(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue;            // 0x0244(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_261[0x3];                                      // 0x0261(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0270(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x027C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0288(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0294(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue1;            // 0x02A0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue2;            // 0x02AC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBWallClimb_C_CheckWallTraceForward) == 0x000008, "Wrong alignment on BP_AJBWallClimb_C_CheckWallTraceForward");
static_assert(sizeof(BP_AJBWallClimb_C_CheckWallTraceForward) == 0x0002B8, "Wrong size on BP_AJBWallClimb_C_CheckWallTraceForward");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceForward, TraceStartPointOffset) == 0x000000, "Member 'BP_AJBWallClimb_C_CheckWallTraceForward::TraceStartPointOffset' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceForward, OutHit) == 0x000010, "Member 'BP_AJBWallClimb_C_CheckWallTraceForward::OutHit' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceForward, ReturnValue) == 0x000098, "Member 'BP_AJBWallClimb_C_CheckWallTraceForward::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceForward, TraceEndLocation) == 0x00009C, "Member 'BP_AJBWallClimb_C_CheckWallTraceForward::TraceEndLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceForward, TraceStartLocation) == 0x0000A8, "Member 'BP_AJBWallClimb_C_CheckWallTraceForward::TraceStartLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceForward, CameraForwardVector) == 0x0000B4, "Member 'BP_AJBWallClimb_C_CheckWallTraceForward::CameraForwardVector' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceForward, ActorLocation) == 0x0000C0, "Member 'BP_AJBWallClimb_C_CheckWallTraceForward::ActorLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceForward, CameraLocation) == 0x0000CC, "Member 'BP_AJBWallClimb_C_CheckWallTraceForward::CameraLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceForward, CallFunc_Add_VectorVector_ReturnValue) == 0x0000D8, "Member 'BP_AJBWallClimb_C_CheckWallTraceForward::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceForward, K2Node_MakeArray_Array) == 0x0000E8, "Member 'BP_AJBWallClimb_C_CheckWallTraceForward::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceForward, CallFunc_GetPlayerController_ReturnValue) == 0x0000F8, "Member 'BP_AJBWallClimb_C_CheckWallTraceForward::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceForward, CallFunc_AJBMultiLineTraceForObjects_OutHits) == 0x000100, "Member 'BP_AJBWallClimb_C_CheckWallTraceForward::CallFunc_AJBMultiLineTraceForObjects_OutHits' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceForward, CallFunc_AJBMultiLineTraceForObjects_ReturnValue) == 0x000110, "Member 'BP_AJBWallClimb_C_CheckWallTraceForward::CallFunc_AJBMultiLineTraceForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceForward, CallFunc_IsValid_ReturnValue) == 0x000111, "Member 'BP_AJBWallClimb_C_CheckWallTraceForward::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceForward, CallFunc_GetHitResultConsiderEntrance_HitResult) == 0x000118, "Member 'BP_AJBWallClimb_C_CheckWallTraceForward::CallFunc_GetHitResultConsiderEntrance_HitResult' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceForward, CallFunc_AJBLineTraceForObjects_OutHit) == 0x0001A0, "Member 'BP_AJBWallClimb_C_CheckWallTraceForward::CallFunc_AJBLineTraceForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceForward, CallFunc_AJBLineTraceForObjects_ReturnValue) == 0x000228, "Member 'BP_AJBWallClimb_C_CheckWallTraceForward::CallFunc_AJBLineTraceForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceForward, CallFunc_GetCameraRotation_ReturnValue) == 0x00022C, "Member 'BP_AJBWallClimb_C_CheckWallTraceForward::CallFunc_GetCameraRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceForward, CallFunc_GetForwardVector_ReturnValue) == 0x000238, "Member 'BP_AJBWallClimb_C_CheckWallTraceForward::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceForward, CallFunc_GetCameraLocation_ReturnValue) == 0x000244, "Member 'BP_AJBWallClimb_C_CheckWallTraceForward::CallFunc_GetCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceForward, CallFunc_GetOwner_ReturnValue) == 0x000250, "Member 'BP_AJBWallClimb_C_CheckWallTraceForward::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceForward, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000258, "Member 'BP_AJBWallClimb_C_CheckWallTraceForward::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceForward, K2Node_DynamicCast_bSuccess) == 0x000260, "Member 'BP_AJBWallClimb_C_CheckWallTraceForward::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceForward, CallFunc_BreakVector_X) == 0x000264, "Member 'BP_AJBWallClimb_C_CheckWallTraceForward::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceForward, CallFunc_BreakVector_Y) == 0x000268, "Member 'BP_AJBWallClimb_C_CheckWallTraceForward::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceForward, CallFunc_BreakVector_Z) == 0x00026C, "Member 'BP_AJBWallClimb_C_CheckWallTraceForward::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceForward, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000270, "Member 'BP_AJBWallClimb_C_CheckWallTraceForward::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceForward, CallFunc_MakeVector_ReturnValue) == 0x00027C, "Member 'BP_AJBWallClimb_C_CheckWallTraceForward::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceForward, CallFunc_Normal_ReturnValue) == 0x000288, "Member 'BP_AJBWallClimb_C_CheckWallTraceForward::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceForward, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000294, "Member 'BP_AJBWallClimb_C_CheckWallTraceForward::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceForward, CallFunc_Add_VectorVector_ReturnValue1) == 0x0002A0, "Member 'BP_AJBWallClimb_C_CheckWallTraceForward::CallFunc_Add_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceForward, CallFunc_Add_VectorVector_ReturnValue2) == 0x0002AC, "Member 'BP_AJBWallClimb_C_CheckWallTraceForward::CallFunc_Add_VectorVector_ReturnValue2' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.CheckEntrance
// 0x0118 (0x0118 - 0x0000)
struct BP_AJBWallClimb_C_CheckEntrance final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          bEntrance;                                         // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B[0x1];                                       // 0x008B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0094(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00A0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00AC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00B8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x00F0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x00FC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue1;              // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBWallClimb_C_CheckEntrance) == 0x000008, "Wrong alignment on BP_AJBWallClimb_C_CheckEntrance");
static_assert(sizeof(BP_AJBWallClimb_C_CheckEntrance) == 0x000118, "Wrong size on BP_AJBWallClimb_C_CheckEntrance");
static_assert(offsetof(BP_AJBWallClimb_C_CheckEntrance, HitResult) == 0x000000, "Member 'BP_AJBWallClimb_C_CheckEntrance::HitResult' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckEntrance, bEntrance) == 0x000088, "Member 'BP_AJBWallClimb_C_CheckEntrance::bEntrance' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckEntrance, CallFunc_BreakHitResult_bBlockingHit) == 0x000089, "Member 'BP_AJBWallClimb_C_CheckEntrance::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckEntrance, CallFunc_BreakHitResult_bInitialOverlap) == 0x00008A, "Member 'BP_AJBWallClimb_C_CheckEntrance::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckEntrance, CallFunc_BreakHitResult_Time) == 0x00008C, "Member 'BP_AJBWallClimb_C_CheckEntrance::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckEntrance, CallFunc_BreakHitResult_Distance) == 0x000090, "Member 'BP_AJBWallClimb_C_CheckEntrance::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckEntrance, CallFunc_BreakHitResult_Location) == 0x000094, "Member 'BP_AJBWallClimb_C_CheckEntrance::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckEntrance, CallFunc_BreakHitResult_ImpactPoint) == 0x0000A0, "Member 'BP_AJBWallClimb_C_CheckEntrance::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckEntrance, CallFunc_BreakHitResult_Normal) == 0x0000AC, "Member 'BP_AJBWallClimb_C_CheckEntrance::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckEntrance, CallFunc_BreakHitResult_ImpactNormal) == 0x0000B8, "Member 'BP_AJBWallClimb_C_CheckEntrance::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckEntrance, CallFunc_BreakHitResult_PhysMat) == 0x0000C8, "Member 'BP_AJBWallClimb_C_CheckEntrance::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckEntrance, CallFunc_BreakHitResult_HitActor) == 0x0000D0, "Member 'BP_AJBWallClimb_C_CheckEntrance::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckEntrance, CallFunc_BreakHitResult_HitComponent) == 0x0000D8, "Member 'BP_AJBWallClimb_C_CheckEntrance::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckEntrance, CallFunc_BreakHitResult_HitBoneName) == 0x0000E0, "Member 'BP_AJBWallClimb_C_CheckEntrance::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckEntrance, CallFunc_BreakHitResult_HitItem) == 0x0000E8, "Member 'BP_AJBWallClimb_C_CheckEntrance::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckEntrance, CallFunc_BreakHitResult_FaceIndex) == 0x0000EC, "Member 'BP_AJBWallClimb_C_CheckEntrance::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckEntrance, CallFunc_BreakHitResult_TraceStart) == 0x0000F0, "Member 'BP_AJBWallClimb_C_CheckEntrance::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckEntrance, CallFunc_BreakHitResult_TraceEnd) == 0x0000FC, "Member 'BP_AJBWallClimb_C_CheckEntrance::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckEntrance, CallFunc_GetObjectClass_ReturnValue) == 0x000108, "Member 'BP_AJBWallClimb_C_CheckEntrance::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckEntrance, CallFunc_ClassIsChildOf_ReturnValue) == 0x000110, "Member 'BP_AJBWallClimb_C_CheckEntrance::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckEntrance, CallFunc_ClassIsChildOf_ReturnValue1) == 0x000111, "Member 'BP_AJBWallClimb_C_CheckEntrance::CallFunc_ClassIsChildOf_ReturnValue1' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.GetHitResultConsiderEntrance
// 0x0138 (0x0138 - 0x0000)
struct BP_AJBWallClimb_C_GetHitResultConsiderEntrance final
{
public:
	TArray<struct FHitResult>                     HitResults;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference)
	struct FHitResult                             HitResult;                                         // 0x0010(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_Array_Get_Item;                           // 0x00A0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_CheckEntrance_bEntrance;                  // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBWallClimb_C_GetHitResultConsiderEntrance) == 0x000008, "Wrong alignment on BP_AJBWallClimb_C_GetHitResultConsiderEntrance");
static_assert(sizeof(BP_AJBWallClimb_C_GetHitResultConsiderEntrance) == 0x000138, "Wrong size on BP_AJBWallClimb_C_GetHitResultConsiderEntrance");
static_assert(offsetof(BP_AJBWallClimb_C_GetHitResultConsiderEntrance, HitResults) == 0x000000, "Member 'BP_AJBWallClimb_C_GetHitResultConsiderEntrance::HitResults' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetHitResultConsiderEntrance, HitResult) == 0x000010, "Member 'BP_AJBWallClimb_C_GetHitResultConsiderEntrance::HitResult' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetHitResultConsiderEntrance, Temp_int_Array_Index_Variable) == 0x000098, "Member 'BP_AJBWallClimb_C_GetHitResultConsiderEntrance::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetHitResultConsiderEntrance, CallFunc_Array_Length_ReturnValue) == 0x00009C, "Member 'BP_AJBWallClimb_C_GetHitResultConsiderEntrance::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetHitResultConsiderEntrance, CallFunc_Array_Get_Item) == 0x0000A0, "Member 'BP_AJBWallClimb_C_GetHitResultConsiderEntrance::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetHitResultConsiderEntrance, CallFunc_CheckEntrance_bEntrance) == 0x000128, "Member 'BP_AJBWallClimb_C_GetHitResultConsiderEntrance::CallFunc_CheckEntrance_bEntrance' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetHitResultConsiderEntrance, Temp_int_Loop_Counter_Variable) == 0x00012C, "Member 'BP_AJBWallClimb_C_GetHitResultConsiderEntrance::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetHitResultConsiderEntrance, CallFunc_Less_IntInt_ReturnValue) == 0x000130, "Member 'BP_AJBWallClimb_C_GetHitResultConsiderEntrance::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetHitResultConsiderEntrance, CallFunc_Add_IntInt_ReturnValue) == 0x000134, "Member 'BP_AJBWallClimb_C_GetHitResultConsiderEntrance::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.CheckWallTraceHeight1
// 0x0328 (0x0328 - 0x0000)
struct BP_AJBWallClimb_C_CheckWallTraceHeight1 final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             OutHit;                                            // 0x0088(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          bReturnValue;                                      // 0x0110(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TempEndLocation;                                   // 0x0114(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                tempStartLocation;                                 // 0x0120(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x012D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12E[0x2];                                      // 0x012E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0138(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0144(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0150(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x015C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0178(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0190(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x019C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ProjectVectorOnToPlane_ReturnValue;       // 0x01A8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x01B4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x01C0(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue1;        // 0x01D0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     CallFunc_AJBMultiLineTraceForObjects_OutHits;      // 0x01E0(0x0010)(ZeroConstructor, ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_AJBMultiLineTraceForObjects_ReturnValue;  // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F1[0x3];                                      // 0x01F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x01F4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_GetHitResultConsiderEntrance_HitResult;   // 0x0200(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue1;            // 0x0288(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_AJBLineTraceForObjects_OutHit;            // 0x0298(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_AJBLineTraceForObjects_ReturnValue;       // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBWallClimb_C_CheckWallTraceHeight1) == 0x000008, "Wrong alignment on BP_AJBWallClimb_C_CheckWallTraceHeight1");
static_assert(sizeof(BP_AJBWallClimb_C_CheckWallTraceHeight1) == 0x000328, "Wrong size on BP_AJBWallClimb_C_CheckWallTraceHeight1");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight1, HitResult) == 0x000000, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight1::HitResult' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight1, OutHit) == 0x000088, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight1::OutHit' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight1, bReturnValue) == 0x000110, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight1::bReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight1, TempEndLocation) == 0x000114, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight1::TempEndLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight1, tempStartLocation) == 0x000120, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight1::tempStartLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight1, CallFunc_BreakHitResult_bBlockingHit) == 0x00012C, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight1::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight1, CallFunc_BreakHitResult_bInitialOverlap) == 0x00012D, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight1::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight1, CallFunc_BreakHitResult_Time) == 0x000130, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight1::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight1, CallFunc_BreakHitResult_Distance) == 0x000134, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight1::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight1, CallFunc_BreakHitResult_Location) == 0x000138, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight1::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight1, CallFunc_BreakHitResult_ImpactPoint) == 0x000144, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight1::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight1, CallFunc_BreakHitResult_Normal) == 0x000150, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight1::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight1, CallFunc_BreakHitResult_ImpactNormal) == 0x00015C, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight1::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight1, CallFunc_BreakHitResult_PhysMat) == 0x000168, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight1::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight1, CallFunc_BreakHitResult_HitActor) == 0x000170, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight1::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight1, CallFunc_BreakHitResult_HitComponent) == 0x000178, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight1::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight1, CallFunc_BreakHitResult_HitBoneName) == 0x000180, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight1::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight1, CallFunc_BreakHitResult_HitItem) == 0x000188, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight1::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight1, CallFunc_BreakHitResult_FaceIndex) == 0x00018C, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight1::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight1, CallFunc_BreakHitResult_TraceStart) == 0x000190, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight1::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight1, CallFunc_BreakHitResult_TraceEnd) == 0x00019C, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight1::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight1, CallFunc_ProjectVectorOnToPlane_ReturnValue) == 0x0001A8, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight1::CallFunc_ProjectVectorOnToPlane_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight1, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0001B4, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight1::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight1, K2Node_MakeArray_Array) == 0x0001C0, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight1::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight1, CallFunc_Multiply_VectorFloat_ReturnValue1) == 0x0001D0, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight1::CallFunc_Multiply_VectorFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight1, CallFunc_AJBMultiLineTraceForObjects_OutHits) == 0x0001E0, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight1::CallFunc_AJBMultiLineTraceForObjects_OutHits' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight1, CallFunc_AJBMultiLineTraceForObjects_ReturnValue) == 0x0001F0, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight1::CallFunc_AJBMultiLineTraceForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight1, CallFunc_Add_VectorVector_ReturnValue) == 0x0001F4, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight1::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight1, CallFunc_GetHitResultConsiderEntrance_HitResult) == 0x000200, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight1::CallFunc_GetHitResultConsiderEntrance_HitResult' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight1, CallFunc_Add_VectorVector_ReturnValue1) == 0x000288, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight1::CallFunc_Add_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight1, CallFunc_AJBLineTraceForObjects_OutHit) == 0x000298, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight1::CallFunc_AJBLineTraceForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight1, CallFunc_AJBLineTraceForObjects_ReturnValue) == 0x000320, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight1::CallFunc_AJBLineTraceForObjects_ReturnValue' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.CheckWallTraceHeight2
// 0x0328 (0x0328 - 0x0000)
struct BP_AJBWallClimb_C_CheckWallTraceHeight2 final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             OutHit;                                            // 0x0088(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x0110(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TempEndLocation;                                   // 0x0114(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                tempStartLocation;                                 // 0x0120(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x012D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12E[0x2];                                      // 0x012E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0138(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0144(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0150(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x015C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0178(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0190(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x019C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x01A8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ProjectVectorOnToPlane_ReturnValue;       // 0x01B4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x01C0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue1;        // 0x01CC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue1;            // 0x01D8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x01E8(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	struct FHitResult                             CallFunc_AJBLineTraceForObjects_OutHit;            // 0x01F8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_AJBLineTraceForObjects_ReturnValue;       // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_281[0x7];                                      // 0x0281(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     CallFunc_AJBMultiLineTraceForObjects_OutHits;      // 0x0288(0x0010)(ZeroConstructor, ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_AJBMultiLineTraceForObjects_ReturnValue;  // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_299[0x7];                                      // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_GetHitResultConsiderEntrance_HitResult;   // 0x02A0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_AJBWallClimb_C_CheckWallTraceHeight2) == 0x000008, "Wrong alignment on BP_AJBWallClimb_C_CheckWallTraceHeight2");
static_assert(sizeof(BP_AJBWallClimb_C_CheckWallTraceHeight2) == 0x000328, "Wrong size on BP_AJBWallClimb_C_CheckWallTraceHeight2");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight2, HitResult) == 0x000000, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight2::HitResult' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight2, OutHit) == 0x000088, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight2::OutHit' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight2, ReturnValue) == 0x000110, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight2::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight2, TempEndLocation) == 0x000114, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight2::TempEndLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight2, tempStartLocation) == 0x000120, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight2::tempStartLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight2, CallFunc_BreakHitResult_bBlockingHit) == 0x00012C, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight2::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight2, CallFunc_BreakHitResult_bInitialOverlap) == 0x00012D, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight2::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight2, CallFunc_BreakHitResult_Time) == 0x000130, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight2::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight2, CallFunc_BreakHitResult_Distance) == 0x000134, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight2::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight2, CallFunc_BreakHitResult_Location) == 0x000138, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight2::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight2, CallFunc_BreakHitResult_ImpactPoint) == 0x000144, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight2::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight2, CallFunc_BreakHitResult_Normal) == 0x000150, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight2::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight2, CallFunc_BreakHitResult_ImpactNormal) == 0x00015C, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight2::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight2, CallFunc_BreakHitResult_PhysMat) == 0x000168, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight2::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight2, CallFunc_BreakHitResult_HitActor) == 0x000170, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight2::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight2, CallFunc_BreakHitResult_HitComponent) == 0x000178, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight2::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight2, CallFunc_BreakHitResult_HitBoneName) == 0x000180, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight2::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight2, CallFunc_BreakHitResult_HitItem) == 0x000188, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight2::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight2, CallFunc_BreakHitResult_FaceIndex) == 0x00018C, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight2::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight2, CallFunc_BreakHitResult_TraceStart) == 0x000190, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight2::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight2, CallFunc_BreakHitResult_TraceEnd) == 0x00019C, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight2::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight2, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0001A8, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight2::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight2, CallFunc_ProjectVectorOnToPlane_ReturnValue) == 0x0001B4, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight2::CallFunc_ProjectVectorOnToPlane_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight2, CallFunc_Add_VectorVector_ReturnValue) == 0x0001C0, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight2::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight2, CallFunc_Multiply_VectorFloat_ReturnValue1) == 0x0001CC, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight2::CallFunc_Multiply_VectorFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight2, CallFunc_Add_VectorVector_ReturnValue1) == 0x0001D8, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight2::CallFunc_Add_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight2, K2Node_MakeArray_Array) == 0x0001E8, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight2::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight2, CallFunc_AJBLineTraceForObjects_OutHit) == 0x0001F8, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight2::CallFunc_AJBLineTraceForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight2, CallFunc_AJBLineTraceForObjects_ReturnValue) == 0x000280, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight2::CallFunc_AJBLineTraceForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight2, CallFunc_AJBMultiLineTraceForObjects_OutHits) == 0x000288, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight2::CallFunc_AJBMultiLineTraceForObjects_OutHits' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight2, CallFunc_AJBMultiLineTraceForObjects_ReturnValue) == 0x000298, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight2::CallFunc_AJBMultiLineTraceForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight2, CallFunc_GetHitResultConsiderEntrance_HitResult) == 0x0002A0, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight2::CallFunc_GetHitResultConsiderEntrance_HitResult' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.CheckWallTraceHeight3
// 0x0350 (0x0350 - 0x0000)
struct BP_AJBWallClimb_C_CheckWallTraceHeight3 final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         DimpleCheckSampleLength;                           // 0x0088(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             OutHit;                                            // 0x0090(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x0118(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TempEndLocation;                                   // 0x011C(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                tempStartLocation;                                 // 0x0128(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0135(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_136[0x2];                                      // 0x0136(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0140(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x014C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0158(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0164(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0180(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0198(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01A4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ProjectVectorOnToPlane_ReturnValue;       // 0x01B0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x01BC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x01C8(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue1;        // 0x01D8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     CallFunc_AJBMultiLineTraceForObjects_OutHits;      // 0x01E8(0x0010)(ZeroConstructor, ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_AJBMultiLineTraceForObjects_ReturnValue;  // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F9[0x3];                                      // 0x01F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x01FC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_GetHitResultConsiderEntrance_HitResult;   // 0x0208(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue1;            // 0x0290(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue2;        // 0x029C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_AJBLineTraceForObjects_OutHit;            // 0x02A8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_AJBLineTraceForObjects_ReturnValue;       // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_331[0x3];                                      // 0x0331(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue2;            // 0x0334(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue3;            // 0x0340(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBWallClimb_C_CheckWallTraceHeight3) == 0x000008, "Wrong alignment on BP_AJBWallClimb_C_CheckWallTraceHeight3");
static_assert(sizeof(BP_AJBWallClimb_C_CheckWallTraceHeight3) == 0x000350, "Wrong size on BP_AJBWallClimb_C_CheckWallTraceHeight3");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, HitResult) == 0x000000, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::HitResult' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, DimpleCheckSampleLength) == 0x000088, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::DimpleCheckSampleLength' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, OutHit) == 0x000090, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::OutHit' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, ReturnValue) == 0x000118, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, TempEndLocation) == 0x00011C, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::TempEndLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, tempStartLocation) == 0x000128, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::tempStartLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, CallFunc_BreakHitResult_bBlockingHit) == 0x000134, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, CallFunc_BreakHitResult_bInitialOverlap) == 0x000135, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, CallFunc_BreakHitResult_Time) == 0x000138, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, CallFunc_BreakHitResult_Distance) == 0x00013C, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, CallFunc_BreakHitResult_Location) == 0x000140, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, CallFunc_BreakHitResult_ImpactPoint) == 0x00014C, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, CallFunc_BreakHitResult_Normal) == 0x000158, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, CallFunc_BreakHitResult_ImpactNormal) == 0x000164, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, CallFunc_BreakHitResult_PhysMat) == 0x000170, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, CallFunc_BreakHitResult_HitActor) == 0x000178, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, CallFunc_BreakHitResult_HitComponent) == 0x000180, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, CallFunc_BreakHitResult_HitBoneName) == 0x000188, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, CallFunc_BreakHitResult_HitItem) == 0x000190, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, CallFunc_BreakHitResult_FaceIndex) == 0x000194, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, CallFunc_BreakHitResult_TraceStart) == 0x000198, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, CallFunc_BreakHitResult_TraceEnd) == 0x0001A4, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, CallFunc_ProjectVectorOnToPlane_ReturnValue) == 0x0001B0, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::CallFunc_ProjectVectorOnToPlane_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0001BC, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, K2Node_MakeArray_Array) == 0x0001C8, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, CallFunc_Multiply_VectorFloat_ReturnValue1) == 0x0001D8, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::CallFunc_Multiply_VectorFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, CallFunc_AJBMultiLineTraceForObjects_OutHits) == 0x0001E8, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::CallFunc_AJBMultiLineTraceForObjects_OutHits' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, CallFunc_AJBMultiLineTraceForObjects_ReturnValue) == 0x0001F8, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::CallFunc_AJBMultiLineTraceForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, CallFunc_Add_VectorVector_ReturnValue) == 0x0001FC, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, CallFunc_GetHitResultConsiderEntrance_HitResult) == 0x000208, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::CallFunc_GetHitResultConsiderEntrance_HitResult' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, CallFunc_Add_VectorVector_ReturnValue1) == 0x000290, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::CallFunc_Add_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, CallFunc_Multiply_VectorFloat_ReturnValue2) == 0x00029C, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::CallFunc_Multiply_VectorFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, CallFunc_AJBLineTraceForObjects_OutHit) == 0x0002A8, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::CallFunc_AJBLineTraceForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, CallFunc_AJBLineTraceForObjects_ReturnValue) == 0x000330, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::CallFunc_AJBLineTraceForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, CallFunc_Add_VectorVector_ReturnValue2) == 0x000334, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::CallFunc_Add_VectorVector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceHeight3, CallFunc_Add_VectorVector_ReturnValue3) == 0x000340, "Member 'BP_AJBWallClimb_C_CheckWallTraceHeight3::CallFunc_Add_VectorVector_ReturnValue3' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.CheckWallTraceRouteDetect1
// 0x0230 (0x0230 - 0x0000)
struct BP_AJBWallClimb_C_CheckWallTraceRouteDetect1 final
{
public:
	int32                                         NumOfTrace;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SensorPoint;                                       // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             OutHit;                                            // 0x0010(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          bReturnValue;                                      // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x00A0(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00B4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00C0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00CC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue1;        // 0x00D8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue1;            // 0x00E4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue2;            // 0x00F0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     CallFunc_AJBMultiSphereTraceForObjects_OutHits;    // 0x0100(0x0010)(ZeroConstructor, ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_AJBMultiSphereTraceForObjects_ReturnValue; // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_AJBSphereTraceForObjects_OutHit;          // 0x0118(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_AJBSphereTraceForObjects_ReturnValue;     // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_GetHitResultConsiderEntrance_HitResult;   // 0x01A8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect1) == 0x000008, "Wrong alignment on BP_AJBWallClimb_C_CheckWallTraceRouteDetect1");
static_assert(sizeof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect1) == 0x000230, "Wrong size on BP_AJBWallClimb_C_CheckWallTraceRouteDetect1");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect1, NumOfTrace) == 0x000000, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect1::NumOfTrace' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect1, SensorPoint) == 0x000004, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect1::SensorPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect1, OutHit) == 0x000010, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect1::OutHit' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect1, bReturnValue) == 0x000098, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect1::bReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect1, K2Node_MakeArray_Array) == 0x0000A0, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect1::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect1, CallFunc_Multiply_IntFloat_ReturnValue) == 0x0000B0, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect1::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect1, CallFunc_MakeVector_ReturnValue) == 0x0000B4, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect1::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect1, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000C0, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect1::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect1, CallFunc_Add_VectorVector_ReturnValue) == 0x0000CC, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect1::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect1, CallFunc_Multiply_VectorFloat_ReturnValue1) == 0x0000D8, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect1::CallFunc_Multiply_VectorFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect1, CallFunc_Add_VectorVector_ReturnValue1) == 0x0000E4, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect1::CallFunc_Add_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect1, CallFunc_Add_VectorVector_ReturnValue2) == 0x0000F0, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect1::CallFunc_Add_VectorVector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect1, CallFunc_AJBMultiSphereTraceForObjects_OutHits) == 0x000100, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect1::CallFunc_AJBMultiSphereTraceForObjects_OutHits' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect1, CallFunc_AJBMultiSphereTraceForObjects_ReturnValue) == 0x000110, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect1::CallFunc_AJBMultiSphereTraceForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect1, CallFunc_AJBSphereTraceForObjects_OutHit) == 0x000118, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect1::CallFunc_AJBSphereTraceForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect1, CallFunc_AJBSphereTraceForObjects_ReturnValue) == 0x0001A0, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect1::CallFunc_AJBSphereTraceForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect1, CallFunc_GetHitResultConsiderEntrance_HitResult) == 0x0001A8, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect1::CallFunc_GetHitResultConsiderEntrance_HitResult' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.CheckWallTraceRouteDetect2
// 0x01E8 (0x01E8 - 0x0000)
struct BP_AJBWallClimb_C_CheckWallTraceRouteDetect2 final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndLocation;                                       // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             OutHit;                                            // 0x0018(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          bReturnValue;                                      // 0x00A0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x00A8(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	TArray<struct FHitResult>                     CallFunc_AJBMultiLineTraceForObjects_OutHits;      // 0x00B8(0x0010)(ZeroConstructor, ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_AJBMultiLineTraceForObjects_ReturnValue;  // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_AJBLineTraceForObjects_OutHit;            // 0x00D0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_AJBLineTraceForObjects_ReturnValue;       // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_GetHitResultConsiderEntrance_HitResult;   // 0x0160(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect2) == 0x000008, "Wrong alignment on BP_AJBWallClimb_C_CheckWallTraceRouteDetect2");
static_assert(sizeof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect2) == 0x0001E8, "Wrong size on BP_AJBWallClimb_C_CheckWallTraceRouteDetect2");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect2, StartLocation) == 0x000000, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect2::StartLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect2, EndLocation) == 0x00000C, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect2::EndLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect2, OutHit) == 0x000018, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect2::OutHit' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect2, bReturnValue) == 0x0000A0, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect2::bReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect2, K2Node_MakeArray_Array) == 0x0000A8, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect2::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect2, CallFunc_AJBMultiLineTraceForObjects_OutHits) == 0x0000B8, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect2::CallFunc_AJBMultiLineTraceForObjects_OutHits' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect2, CallFunc_AJBMultiLineTraceForObjects_ReturnValue) == 0x0000C8, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect2::CallFunc_AJBMultiLineTraceForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect2, CallFunc_AJBLineTraceForObjects_OutHit) == 0x0000D0, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect2::CallFunc_AJBLineTraceForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect2, CallFunc_AJBLineTraceForObjects_ReturnValue) == 0x000158, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect2::CallFunc_AJBLineTraceForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect2, CallFunc_GetHitResultConsiderEntrance_HitResult) == 0x000160, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect2::CallFunc_GetHitResultConsiderEntrance_HitResult' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.CheckWallTraceRouteDetect3
// 0x01E8 (0x01E8 - 0x0000)
struct BP_AJBWallClimb_C_CheckWallTraceRouteDetect3 final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndLocation;                                       // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             OutHit;                                            // 0x0018(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          bReturnValue;                                      // 0x00A0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x00A8(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	struct FHitResult                             CallFunc_AJBSphereTraceForObjects_OutHit;          // 0x00B8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_AJBSphereTraceForObjects_ReturnValue;     // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     CallFunc_AJBMultiSphereTraceForObjects_OutHits;    // 0x0148(0x0010)(ZeroConstructor, ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_AJBMultiSphereTraceForObjects_ReturnValue; // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_GetHitResultConsiderEntrance_HitResult;   // 0x0160(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect3) == 0x000008, "Wrong alignment on BP_AJBWallClimb_C_CheckWallTraceRouteDetect3");
static_assert(sizeof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect3) == 0x0001E8, "Wrong size on BP_AJBWallClimb_C_CheckWallTraceRouteDetect3");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect3, StartLocation) == 0x000000, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect3::StartLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect3, EndLocation) == 0x00000C, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect3::EndLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect3, OutHit) == 0x000018, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect3::OutHit' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect3, bReturnValue) == 0x0000A0, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect3::bReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect3, K2Node_MakeArray_Array) == 0x0000A8, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect3::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect3, CallFunc_AJBSphereTraceForObjects_OutHit) == 0x0000B8, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect3::CallFunc_AJBSphereTraceForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect3, CallFunc_AJBSphereTraceForObjects_ReturnValue) == 0x000140, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect3::CallFunc_AJBSphereTraceForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect3, CallFunc_AJBMultiSphereTraceForObjects_OutHits) == 0x000148, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect3::CallFunc_AJBMultiSphereTraceForObjects_OutHits' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect3, CallFunc_AJBMultiSphereTraceForObjects_ReturnValue) == 0x000158, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect3::CallFunc_AJBMultiSphereTraceForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckWallTraceRouteDetect3, CallFunc_GetHitResultConsiderEntrance_HitResult) == 0x000160, "Member 'BP_AJBWallClimb_C_CheckWallTraceRouteDetect3::CallFunc_GetHitResultConsiderEntrance_HitResult' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.RequestLegParticle
// 0x0088 (0x0088 - 0x0000)
struct BP_AJBWallClimb_C_RequestLegParticle final
{
public:
	struct FGameplayTag                           ParticleTag;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          bAttach;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bUseSpecifiedRotation;                             // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	class ABP_AJBInGameParticleEffect_C*          Particle;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameStand_C*                   K2Node_DynamicCast_AsBP_AJBIn_Game_Stand;          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameStand_DDW_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Stand_DDW;      // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetSocketRotation_ReturnValue;            // 0x0054(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0060(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_Select_Default;                             // 0x006C(0x000C)(IsPlainOldData, NoDestructor)
	class ABP_AJBInGameParticleEffect_C*          CallFunc_RequestParticleEffectOnLocal_ParticleEffect; // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          CallFunc_RequestParticleEffectAttachedOnLocal_ParticleEffect; // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBWallClimb_C_RequestLegParticle) == 0x000008, "Wrong alignment on BP_AJBWallClimb_C_RequestLegParticle");
static_assert(sizeof(BP_AJBWallClimb_C_RequestLegParticle) == 0x000088, "Wrong size on BP_AJBWallClimb_C_RequestLegParticle");
static_assert(offsetof(BP_AJBWallClimb_C_RequestLegParticle, ParticleTag) == 0x000000, "Member 'BP_AJBWallClimb_C_RequestLegParticle::ParticleTag' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_RequestLegParticle, bAttach) == 0x000008, "Member 'BP_AJBWallClimb_C_RequestLegParticle::bAttach' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_RequestLegParticle, bUseSpecifiedRotation) == 0x000009, "Member 'BP_AJBWallClimb_C_RequestLegParticle::bUseSpecifiedRotation' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_RequestLegParticle, Rotation) == 0x00000C, "Member 'BP_AJBWallClimb_C_RequestLegParticle::Rotation' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_RequestLegParticle, Particle) == 0x000018, "Member 'BP_AJBWallClimb_C_RequestLegParticle::Particle' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_RequestLegParticle, CallFunc_GetOwner_ReturnValue) == 0x000020, "Member 'BP_AJBWallClimb_C_RequestLegParticle::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_RequestLegParticle, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000028, "Member 'BP_AJBWallClimb_C_RequestLegParticle::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_RequestLegParticle, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_AJBWallClimb_C_RequestLegParticle::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_RequestLegParticle, K2Node_DynamicCast_AsBP_AJBIn_Game_Stand) == 0x000038, "Member 'BP_AJBWallClimb_C_RequestLegParticle::K2Node_DynamicCast_AsBP_AJBIn_Game_Stand' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_RequestLegParticle, K2Node_DynamicCast_bSuccess1) == 0x000040, "Member 'BP_AJBWallClimb_C_RequestLegParticle::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_RequestLegParticle, K2Node_DynamicCast_AsBP_AJBIn_Game_Stand_DDW) == 0x000048, "Member 'BP_AJBWallClimb_C_RequestLegParticle::K2Node_DynamicCast_AsBP_AJBIn_Game_Stand_DDW' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_RequestLegParticle, K2Node_DynamicCast_bSuccess2) == 0x000050, "Member 'BP_AJBWallClimb_C_RequestLegParticle::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_RequestLegParticle, Temp_bool_Variable) == 0x000051, "Member 'BP_AJBWallClimb_C_RequestLegParticle::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_RequestLegParticle, CallFunc_GetSocketRotation_ReturnValue) == 0x000054, "Member 'BP_AJBWallClimb_C_RequestLegParticle::CallFunc_GetSocketRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_RequestLegParticle, CallFunc_GetSocketLocation_ReturnValue) == 0x000060, "Member 'BP_AJBWallClimb_C_RequestLegParticle::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_RequestLegParticle, K2Node_Select_Default) == 0x00006C, "Member 'BP_AJBWallClimb_C_RequestLegParticle::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_RequestLegParticle, CallFunc_RequestParticleEffectOnLocal_ParticleEffect) == 0x000078, "Member 'BP_AJBWallClimb_C_RequestLegParticle::CallFunc_RequestParticleEffectOnLocal_ParticleEffect' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_RequestLegParticle, CallFunc_RequestParticleEffectAttachedOnLocal_ParticleEffect) == 0x000080, "Member 'BP_AJBWallClimb_C_RequestLegParticle::CallFunc_RequestParticleEffectAttachedOnLocal_ParticleEffect' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.TraceForwardCheck
// 0x0370 (0x0370 - 0x0000)
struct BP_AJBWallClimb_C_TraceForwardCheck final
{
public:
	struct FHitResult                             HitResultCenter;                                   // 0x0000(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             HitResultRight;                                    // 0x0088(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             HitResultLeft;                                     // 0x0110(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          bSucceed;                                          // 0x0198(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_199[0x7];                                      // 0x0199(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    HitComponentLeft;                                  // 0x01A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    HitComponentRight;                                 // 0x01A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    HitComponentCenter;                                // 0x01B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempImpactNormalLeft;                              // 0x01B8(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempImpactNormalRight;                             // 0x01C4(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempImpactNormalCenter;                            // 0x01D0(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ComponentHasTag_ReturnValue;              // 0x01DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ComponentHasTag_ReturnValue1;             // 0x01DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ComponentHasTag_ReturnValue2;             // 0x01DE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x01DF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckSameWildcardObject_bMatch;           // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue1;                   // 0x01E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckSameWildcardObject_bMatch1;          // 0x01E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x01E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue1;            // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x01EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x01ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1EE[0x2];                                      // 0x01EE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x01F8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0204(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0210(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x021C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0238(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0250(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x025C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit1;             // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap1;          // 0x0269(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26A[0x2];                                      // 0x026A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time1;                     // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance1;                 // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location1;                 // 0x0274(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint1;              // 0x0280(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal1;                   // 0x028C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal1;             // 0x0298(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat1;                  // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor1;                 // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent1;             // 0x02B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName1;              // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem1;                  // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex1;                // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart1;               // 0x02D0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd1;                 // 0x02DC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit2;             // 0x02E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap2;          // 0x02E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2EA[0x2];                                      // 0x02EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time2;                     // 0x02EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance2;                 // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location2;                 // 0x02F4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint2;              // 0x0300(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal2;                   // 0x030C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal2;             // 0x0318(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat2;                  // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor2;                 // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent2;             // 0x0338(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName2;              // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem2;                  // 0x0348(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex2;                // 0x034C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart2;               // 0x0350(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd2;                 // 0x035C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0368(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue1;     // 0x0369(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x036A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBWallClimb_C_TraceForwardCheck) == 0x000008, "Wrong alignment on BP_AJBWallClimb_C_TraceForwardCheck");
static_assert(sizeof(BP_AJBWallClimb_C_TraceForwardCheck) == 0x000370, "Wrong size on BP_AJBWallClimb_C_TraceForwardCheck");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, HitResultCenter) == 0x000000, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::HitResultCenter' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, HitResultRight) == 0x000088, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::HitResultRight' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, HitResultLeft) == 0x000110, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::HitResultLeft' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, bSucceed) == 0x000198, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::bSucceed' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, HitComponentLeft) == 0x0001A0, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::HitComponentLeft' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, HitComponentRight) == 0x0001A8, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::HitComponentRight' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, HitComponentCenter) == 0x0001B0, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::HitComponentCenter' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, TempImpactNormalLeft) == 0x0001B8, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::TempImpactNormalLeft' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, TempImpactNormalRight) == 0x0001C4, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::TempImpactNormalRight' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, TempImpactNormalCenter) == 0x0001D0, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::TempImpactNormalCenter' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_ComponentHasTag_ReturnValue) == 0x0001DC, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_ComponentHasTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_ComponentHasTag_ReturnValue1) == 0x0001DD, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_ComponentHasTag_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_ComponentHasTag_ReturnValue2) == 0x0001DE, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_ComponentHasTag_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BooleanOR_ReturnValue) == 0x0001DF, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_CheckSameWildcardObject_bMatch) == 0x0001E0, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_CheckSameWildcardObject_bMatch' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BooleanOR_ReturnValue1) == 0x0001E1, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BooleanOR_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_CheckSameWildcardObject_bMatch1) == 0x0001E2, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_CheckSameWildcardObject_bMatch1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BooleanAND_ReturnValue) == 0x0001E3, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_Dot_VectorVector_ReturnValue) == 0x0001E4, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_Dot_VectorVector_ReturnValue1) == 0x0001E8, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_Dot_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_bBlockingHit) == 0x0001EC, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_bInitialOverlap) == 0x0001ED, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_Time) == 0x0001F0, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_Distance) == 0x0001F4, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_Location) == 0x0001F8, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_ImpactPoint) == 0x000204, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_Normal) == 0x000210, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_ImpactNormal) == 0x00021C, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_PhysMat) == 0x000228, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_HitActor) == 0x000230, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_HitComponent) == 0x000238, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_HitBoneName) == 0x000240, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_HitItem) == 0x000248, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_FaceIndex) == 0x00024C, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_TraceStart) == 0x000250, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_TraceEnd) == 0x00025C, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_bBlockingHit1) == 0x000268, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_bBlockingHit1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_bInitialOverlap1) == 0x000269, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_bInitialOverlap1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_Time1) == 0x00026C, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_Time1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_Distance1) == 0x000270, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_Distance1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_Location1) == 0x000274, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_Location1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_ImpactPoint1) == 0x000280, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_ImpactPoint1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_Normal1) == 0x00028C, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_Normal1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_ImpactNormal1) == 0x000298, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_ImpactNormal1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_PhysMat1) == 0x0002A8, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_PhysMat1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_HitActor1) == 0x0002B0, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_HitActor1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_HitComponent1) == 0x0002B8, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_HitComponent1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_HitBoneName1) == 0x0002C0, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_HitBoneName1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_HitItem1) == 0x0002C8, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_HitItem1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_FaceIndex1) == 0x0002CC, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_FaceIndex1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_TraceStart1) == 0x0002D0, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_TraceStart1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_TraceEnd1) == 0x0002DC, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_TraceEnd1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_bBlockingHit2) == 0x0002E8, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_bBlockingHit2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_bInitialOverlap2) == 0x0002E9, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_bInitialOverlap2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_Time2) == 0x0002EC, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_Time2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_Distance2) == 0x0002F0, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_Distance2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_Location2) == 0x0002F4, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_Location2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_ImpactPoint2) == 0x000300, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_ImpactPoint2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_Normal2) == 0x00030C, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_Normal2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_ImpactNormal2) == 0x000318, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_ImpactNormal2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_PhysMat2) == 0x000328, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_PhysMat2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_HitActor2) == 0x000330, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_HitActor2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_HitComponent2) == 0x000338, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_HitComponent2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_HitBoneName2) == 0x000340, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_HitBoneName2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_HitItem2) == 0x000348, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_HitItem2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_FaceIndex2) == 0x00034C, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_FaceIndex2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_TraceStart2) == 0x000350, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_TraceStart2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BreakHitResult_TraceEnd2) == 0x00035C, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BreakHitResult_TraceEnd2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000368, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_GreaterEqual_FloatFloat_ReturnValue1) == 0x000369, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_GreaterEqual_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_TraceForwardCheck, CallFunc_BooleanAND_ReturnValue1) == 0x00036A, "Member 'BP_AJBWallClimb_C_TraceForwardCheck::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.CheckSameWildcardObject
// 0x00A8 (0x00A8 - 0x0000)
struct BP_AJBWallClimb_C_CheckSameWildcardObject final
{
public:
	class UPrimitiveComponent*                    ComponentA;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    ComponentB;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bMatch;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue1;              // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue2;              // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_StrStr_ReturnValue;              // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Split_LeftS;                              // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Split_RightS;                             // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Split_ReturnValue;                        // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_MatchesWildcard_ReturnValue;              // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x00A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBWallClimb_C_CheckSameWildcardObject) == 0x000008, "Wrong alignment on BP_AJBWallClimb_C_CheckSameWildcardObject");
static_assert(sizeof(BP_AJBWallClimb_C_CheckSameWildcardObject) == 0x0000A8, "Wrong size on BP_AJBWallClimb_C_CheckSameWildcardObject");
static_assert(offsetof(BP_AJBWallClimb_C_CheckSameWildcardObject, ComponentA) == 0x000000, "Member 'BP_AJBWallClimb_C_CheckSameWildcardObject::ComponentA' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckSameWildcardObject, ComponentB) == 0x000008, "Member 'BP_AJBWallClimb_C_CheckSameWildcardObject::ComponentB' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckSameWildcardObject, bMatch) == 0x000010, "Member 'BP_AJBWallClimb_C_CheckSameWildcardObject::bMatch' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckSameWildcardObject, Temp_int_Array_Index_Variable) == 0x000014, "Member 'BP_AJBWallClimb_C_CheckSameWildcardObject::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckSameWildcardObject, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'BP_AJBWallClimb_C_CheckSameWildcardObject::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckSameWildcardObject, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'BP_AJBWallClimb_C_CheckSameWildcardObject::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckSameWildcardObject, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_AJBWallClimb_C_CheckSameWildcardObject::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckSameWildcardObject, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_AJBWallClimb_C_CheckSameWildcardObject::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckSameWildcardObject, CallFunc_Conv_NameToString_ReturnValue) == 0x000030, "Member 'BP_AJBWallClimb_C_CheckSameWildcardObject::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckSameWildcardObject, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'BP_AJBWallClimb_C_CheckSameWildcardObject::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckSameWildcardObject, CallFunc_GetDisplayName_ReturnValue) == 0x000048, "Member 'BP_AJBWallClimb_C_CheckSameWildcardObject::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckSameWildcardObject, CallFunc_GetDisplayName_ReturnValue1) == 0x000058, "Member 'BP_AJBWallClimb_C_CheckSameWildcardObject::CallFunc_GetDisplayName_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckSameWildcardObject, CallFunc_GetDisplayName_ReturnValue2) == 0x000068, "Member 'BP_AJBWallClimb_C_CheckSameWildcardObject::CallFunc_GetDisplayName_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckSameWildcardObject, CallFunc_NotEqual_StrStr_ReturnValue) == 0x000078, "Member 'BP_AJBWallClimb_C_CheckSameWildcardObject::CallFunc_NotEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckSameWildcardObject, CallFunc_Split_LeftS) == 0x000080, "Member 'BP_AJBWallClimb_C_CheckSameWildcardObject::CallFunc_Split_LeftS' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckSameWildcardObject, CallFunc_Split_RightS) == 0x000090, "Member 'BP_AJBWallClimb_C_CheckSameWildcardObject::CallFunc_Split_RightS' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckSameWildcardObject, CallFunc_Split_ReturnValue) == 0x0000A0, "Member 'BP_AJBWallClimb_C_CheckSameWildcardObject::CallFunc_Split_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckSameWildcardObject, CallFunc_MatchesWildcard_ReturnValue) == 0x0000A1, "Member 'BP_AJBWallClimb_C_CheckSameWildcardObject::CallFunc_MatchesWildcard_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckSameWildcardObject, CallFunc_IsValid_ReturnValue) == 0x0000A2, "Member 'BP_AJBWallClimb_C_CheckSameWildcardObject::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckSameWildcardObject, CallFunc_IsValid_ReturnValue1) == 0x0000A3, "Member 'BP_AJBWallClimb_C_CheckSameWildcardObject::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckSameWildcardObject, CallFunc_BooleanAND_ReturnValue) == 0x0000A4, "Member 'BP_AJBWallClimb_C_CheckSameWildcardObject::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CheckSameWildcardObject, CallFunc_Not_PreBool_ReturnValue) == 0x0000A5, "Member 'BP_AJBWallClimb_C_CheckSameWildcardObject::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.UpdateMP
// 0x0020 (0x0020 - 0x0000)
struct BP_AJBWallClimb_C_UpdateMP final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBWallClimb_C_UpdateMP) == 0x000008, "Wrong alignment on BP_AJBWallClimb_C_UpdateMP");
static_assert(sizeof(BP_AJBWallClimb_C_UpdateMP) == 0x000020, "Wrong size on BP_AJBWallClimb_C_UpdateMP");
static_assert(offsetof(BP_AJBWallClimb_C_UpdateMP, DeltaSeconds) == 0x000000, "Member 'BP_AJBWallClimb_C_UpdateMP::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_UpdateMP, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBWallClimb_C_UpdateMP::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_UpdateMP, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000010, "Member 'BP_AJBWallClimb_C_UpdateMP::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_UpdateMP, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AJBWallClimb_C_UpdateMP::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_UpdateMP, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_AJBWallClimb_C_UpdateMP::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.CalcAscensionSpeed
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBWallClimb_C_CalcAscensionSpeed final
{
public:
	float                                         AscensionSpeed_0;                                  // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBWallClimb_C_CalcAscensionSpeed) == 0x000004, "Wrong alignment on BP_AJBWallClimb_C_CalcAscensionSpeed");
static_assert(sizeof(BP_AJBWallClimb_C_CalcAscensionSpeed) == 0x000008, "Wrong size on BP_AJBWallClimb_C_CalcAscensionSpeed");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAscensionSpeed, AscensionSpeed_0) == 0x000000, "Member 'BP_AJBWallClimb_C_CalcAscensionSpeed::AscensionSpeed_0' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcAscensionSpeed, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_AJBWallClimb_C_CalcAscensionSpeed::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.CalcLaunchVelocityPower
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBWallClimb_C_CalcLaunchVelocityPower final
{
public:
	float                                         LaunchPower;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBWallClimb_C_CalcLaunchVelocityPower) == 0x000004, "Wrong alignment on BP_AJBWallClimb_C_CalcLaunchVelocityPower");
static_assert(sizeof(BP_AJBWallClimb_C_CalcLaunchVelocityPower) == 0x000008, "Wrong size on BP_AJBWallClimb_C_CalcLaunchVelocityPower");
static_assert(offsetof(BP_AJBWallClimb_C_CalcLaunchVelocityPower, LaunchPower) == 0x000000, "Member 'BP_AJBWallClimb_C_CalcLaunchVelocityPower::LaunchPower' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_CalcLaunchVelocityPower, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_AJBWallClimb_C_CalcLaunchVelocityPower::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.GetWallAngleThreshold
// 0x0018 (0x0018 - 0x0000)
struct BP_AJBWallClimb_C_GetWallAngleThreshold final
{
public:
	float                                         WallAngleThreshold_0;                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBWallClimb_C_GetWallAngleThreshold) == 0x000008, "Wrong alignment on BP_AJBWallClimb_C_GetWallAngleThreshold");
static_assert(sizeof(BP_AJBWallClimb_C_GetWallAngleThreshold) == 0x000018, "Wrong size on BP_AJBWallClimb_C_GetWallAngleThreshold");
static_assert(offsetof(BP_AJBWallClimb_C_GetWallAngleThreshold, WallAngleThreshold_0) == 0x000000, "Member 'BP_AJBWallClimb_C_GetWallAngleThreshold::WallAngleThreshold_0' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetWallAngleThreshold, Temp_bool_Variable) == 0x000004, "Member 'BP_AJBWallClimb_C_GetWallAngleThreshold::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetWallAngleThreshold, CallFunc_GetObjectClass_ReturnValue) == 0x000008, "Member 'BP_AJBWallClimb_C_GetWallAngleThreshold::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetWallAngleThreshold, CallFunc_ClassIsChildOf_ReturnValue) == 0x000010, "Member 'BP_AJBWallClimb_C_GetWallAngleThreshold::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetWallAngleThreshold, K2Node_Select_Default) == 0x000014, "Member 'BP_AJBWallClimb_C_GetWallAngleThreshold::K2Node_Select_Default' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.PossibleActive
// 0x0060 (0x0060 - 0x0000)
struct BP_AJBWallClimb_C_PossibleActive final
{
public:
	bool                                          bPossibleActive;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckActiveBitesTheDust_ReturnValue;      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckActiveBehaviorBreakDown_bBreakDown;  // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckActiveBehaviorBreakDown_bSpecialBreakDown; // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckActiveBehaviorBreakDown_bBreakDownBoth; // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_CheckActiveBehaviorBreakDown_Factor_Tags; // 0x0028(0x0020)()
	bool                                          CallFunc_Not_PreBool_ReturnValue1;                 // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue2;                 // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckAnyActiveSkillActive_bActive;        // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckCharacterBehavior_Active_bReturnValue; // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue3;                 // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsRemainMP_IsRemain;                      // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue4;                 // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckSeal_bSeal;                          // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSatisfiedMP_IsSatisfied;                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue5;                 // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue3;                  // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue4;                  // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue5;                  // 0x0057(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue6;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue7;                  // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue8;                  // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBWallClimb_C_PossibleActive) == 0x000008, "Wrong alignment on BP_AJBWallClimb_C_PossibleActive");
static_assert(sizeof(BP_AJBWallClimb_C_PossibleActive) == 0x000060, "Wrong size on BP_AJBWallClimb_C_PossibleActive");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActive, bPossibleActive) == 0x000000, "Member 'BP_AJBWallClimb_C_PossibleActive::bPossibleActive' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActive, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBWallClimb_C_PossibleActive::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActive, CallFunc_CheckActiveBitesTheDust_ReturnValue) == 0x000010, "Member 'BP_AJBWallClimb_C_PossibleActive::CallFunc_CheckActiveBitesTheDust_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActive, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000018, "Member 'BP_AJBWallClimb_C_PossibleActive::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActive, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_AJBWallClimb_C_PossibleActive::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActive, CallFunc_Not_PreBool_ReturnValue) == 0x000021, "Member 'BP_AJBWallClimb_C_PossibleActive::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActive, CallFunc_CheckActiveBehaviorBreakDown_bBreakDown) == 0x000022, "Member 'BP_AJBWallClimb_C_PossibleActive::CallFunc_CheckActiveBehaviorBreakDown_bBreakDown' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActive, CallFunc_CheckActiveBehaviorBreakDown_bSpecialBreakDown) == 0x000023, "Member 'BP_AJBWallClimb_C_PossibleActive::CallFunc_CheckActiveBehaviorBreakDown_bSpecialBreakDown' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActive, CallFunc_CheckActiveBehaviorBreakDown_bBreakDownBoth) == 0x000024, "Member 'BP_AJBWallClimb_C_PossibleActive::CallFunc_CheckActiveBehaviorBreakDown_bBreakDownBoth' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActive, CallFunc_CheckActiveBehaviorBreakDown_Factor_Tags) == 0x000028, "Member 'BP_AJBWallClimb_C_PossibleActive::CallFunc_CheckActiveBehaviorBreakDown_Factor_Tags' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActive, CallFunc_Not_PreBool_ReturnValue1) == 0x000048, "Member 'BP_AJBWallClimb_C_PossibleActive::CallFunc_Not_PreBool_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActive, CallFunc_Not_PreBool_ReturnValue2) == 0x000049, "Member 'BP_AJBWallClimb_C_PossibleActive::CallFunc_Not_PreBool_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActive, CallFunc_CheckAnyActiveSkillActive_bActive) == 0x00004A, "Member 'BP_AJBWallClimb_C_PossibleActive::CallFunc_CheckAnyActiveSkillActive_bActive' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActive, CallFunc_CheckCharacterBehavior_Active_bReturnValue) == 0x00004B, "Member 'BP_AJBWallClimb_C_PossibleActive::CallFunc_CheckCharacterBehavior_Active_bReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActive, CallFunc_Not_PreBool_ReturnValue3) == 0x00004C, "Member 'BP_AJBWallClimb_C_PossibleActive::CallFunc_Not_PreBool_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActive, CallFunc_IsRemainMP_IsRemain) == 0x00004D, "Member 'BP_AJBWallClimb_C_PossibleActive::CallFunc_IsRemainMP_IsRemain' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActive, CallFunc_Not_PreBool_ReturnValue4) == 0x00004E, "Member 'BP_AJBWallClimb_C_PossibleActive::CallFunc_Not_PreBool_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActive, CallFunc_CheckSeal_bSeal) == 0x00004F, "Member 'BP_AJBWallClimb_C_PossibleActive::CallFunc_CheckSeal_bSeal' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActive, CallFunc_IsSatisfiedMP_IsSatisfied) == 0x000050, "Member 'BP_AJBWallClimb_C_PossibleActive::CallFunc_IsSatisfiedMP_IsSatisfied' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActive, CallFunc_Not_PreBool_ReturnValue5) == 0x000051, "Member 'BP_AJBWallClimb_C_PossibleActive::CallFunc_Not_PreBool_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActive, CallFunc_BooleanAND_ReturnValue) == 0x000052, "Member 'BP_AJBWallClimb_C_PossibleActive::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActive, CallFunc_BooleanAND_ReturnValue1) == 0x000053, "Member 'BP_AJBWallClimb_C_PossibleActive::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActive, CallFunc_BooleanAND_ReturnValue2) == 0x000054, "Member 'BP_AJBWallClimb_C_PossibleActive::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActive, CallFunc_BooleanAND_ReturnValue3) == 0x000055, "Member 'BP_AJBWallClimb_C_PossibleActive::CallFunc_BooleanAND_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActive, CallFunc_BooleanAND_ReturnValue4) == 0x000056, "Member 'BP_AJBWallClimb_C_PossibleActive::CallFunc_BooleanAND_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActive, CallFunc_BooleanAND_ReturnValue5) == 0x000057, "Member 'BP_AJBWallClimb_C_PossibleActive::CallFunc_BooleanAND_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActive, CallFunc_BooleanAND_ReturnValue6) == 0x000058, "Member 'BP_AJBWallClimb_C_PossibleActive::CallFunc_BooleanAND_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActive, CallFunc_BooleanAND_ReturnValue7) == 0x000059, "Member 'BP_AJBWallClimb_C_PossibleActive::CallFunc_BooleanAND_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActive, CallFunc_BooleanAND_ReturnValue8) == 0x00005A, "Member 'BP_AJBWallClimb_C_PossibleActive::CallFunc_BooleanAND_ReturnValue8' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.PossibleActiveCheckWallAsAction
// 0x0058 (0x0058 - 0x0000)
struct BP_AJBWallClimb_C_PossibleActiveCheckWallAsAction final
{
public:
	bool                                          bPossibleActive;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bTempAssaultDiveDiving;                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBInGameCharacterProperty_C> K2Node_DynamicCast_AsBI_AJBIn_Game_Character_Property; // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               CallFunc_GetPropertyOwnerCharacterBP_CharacterBP;  // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBAssaultDiveSkill_C*              CallFunc_GetComponentByClass_ReturnValue;          // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckSkillState_bMatch;                   // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBWallClimb_C_PossibleActiveCheckWallAsAction) == 0x000008, "Wrong alignment on BP_AJBWallClimb_C_PossibleActiveCheckWallAsAction");
static_assert(sizeof(BP_AJBWallClimb_C_PossibleActiveCheckWallAsAction) == 0x000058, "Wrong size on BP_AJBWallClimb_C_PossibleActiveCheckWallAsAction");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActiveCheckWallAsAction, bPossibleActive) == 0x000000, "Member 'BP_AJBWallClimb_C_PossibleActiveCheckWallAsAction::bPossibleActive' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActiveCheckWallAsAction, bTempAssaultDiveDiving) == 0x000001, "Member 'BP_AJBWallClimb_C_PossibleActiveCheckWallAsAction::bTempAssaultDiveDiving' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActiveCheckWallAsAction, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBWallClimb_C_PossibleActiveCheckWallAsAction::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActiveCheckWallAsAction, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000010, "Member 'BP_AJBWallClimb_C_PossibleActiveCheckWallAsAction::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActiveCheckWallAsAction, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AJBWallClimb_C_PossibleActiveCheckWallAsAction::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActiveCheckWallAsAction, K2Node_DynamicCast_AsBI_AJBIn_Game_Character_Property) == 0x000020, "Member 'BP_AJBWallClimb_C_PossibleActiveCheckWallAsAction::K2Node_DynamicCast_AsBI_AJBIn_Game_Character_Property' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActiveCheckWallAsAction, K2Node_DynamicCast_bSuccess1) == 0x000030, "Member 'BP_AJBWallClimb_C_PossibleActiveCheckWallAsAction::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActiveCheckWallAsAction, CallFunc_GetPropertyOwnerCharacterBP_CharacterBP) == 0x000038, "Member 'BP_AJBWallClimb_C_PossibleActiveCheckWallAsAction::CallFunc_GetPropertyOwnerCharacterBP_CharacterBP' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActiveCheckWallAsAction, CallFunc_MakeLiteralByte_ReturnValue) == 0x000040, "Member 'BP_AJBWallClimb_C_PossibleActiveCheckWallAsAction::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActiveCheckWallAsAction, CallFunc_IsValid_ReturnValue) == 0x000041, "Member 'BP_AJBWallClimb_C_PossibleActiveCheckWallAsAction::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActiveCheckWallAsAction, CallFunc_GetComponentByClass_ReturnValue) == 0x000048, "Member 'BP_AJBWallClimb_C_PossibleActiveCheckWallAsAction::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_PossibleActiveCheckWallAsAction, CallFunc_CheckSkillState_bMatch) == 0x000050, "Member 'BP_AJBWallClimb_C_PossibleActiveCheckWallAsAction::CallFunc_CheckSkillState_bMatch' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.ChangeEnableShowGuide
// 0x00A8 (0x00A8 - 0x0000)
struct BP_AJBWallClimb_C_ChangeEnableShowGuide final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_AJBAssaultDiveSkill_C*              CallFunc_GetComponentByClass_ReturnValue;          // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue2;                    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue3;                    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character1;     // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacterBase*                K2Node_DynamicCast_AsAJBIn_Game_Character_Base;    // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue4;                    // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_AJBAssaultDiveSkill_C*              CallFunc_GetComponentByClass_ReturnValue1;         // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerController_ReturnValue;           // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue5;                    // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBInGameCharacterBase*                K2Node_DynamicCast_AsAJBIn_Game_Character_Base1;   // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue;     // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanXOR_ReturnValue;                   // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAJBInGameHUD_BP_bSuccess;              // 0x008B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameHUD_C*                     CallFunc_GetAJBInGameHUD_BP_In_Game_HUD;           // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBInGameHUD_BP_bSuccess1;             // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameHUD_C*                     CallFunc_GetAJBInGameHUD_BP_In_Game_HUD1;          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBWallClimb_C_ChangeEnableShowGuide) == 0x000008, "Wrong alignment on BP_AJBWallClimb_C_ChangeEnableShowGuide");
static_assert(sizeof(BP_AJBWallClimb_C_ChangeEnableShowGuide) == 0x0000A8, "Wrong size on BP_AJBWallClimb_C_ChangeEnableShowGuide");
static_assert(offsetof(BP_AJBWallClimb_C_ChangeEnableShowGuide, bEnable) == 0x000000, "Member 'BP_AJBWallClimb_C_ChangeEnableShowGuide::bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ChangeEnableShowGuide, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBWallClimb_C_ChangeEnableShowGuide::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ChangeEnableShowGuide, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000010, "Member 'BP_AJBWallClimb_C_ChangeEnableShowGuide::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ChangeEnableShowGuide, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AJBWallClimb_C_ChangeEnableShowGuide::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ChangeEnableShowGuide, CallFunc_GetOwner_ReturnValue1) == 0x000020, "Member 'BP_AJBWallClimb_C_ChangeEnableShowGuide::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ChangeEnableShowGuide, CallFunc_GetComponentByClass_ReturnValue) == 0x000028, "Member 'BP_AJBWallClimb_C_ChangeEnableShowGuide::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ChangeEnableShowGuide, CallFunc_GetOwner_ReturnValue2) == 0x000030, "Member 'BP_AJBWallClimb_C_ChangeEnableShowGuide::CallFunc_GetOwner_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ChangeEnableShowGuide, CallFunc_GetOwner_ReturnValue3) == 0x000038, "Member 'BP_AJBWallClimb_C_ChangeEnableShowGuide::CallFunc_GetOwner_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ChangeEnableShowGuide, K2Node_DynamicCast_AsBP_AJBIn_Game_Character1) == 0x000040, "Member 'BP_AJBWallClimb_C_ChangeEnableShowGuide::K2Node_DynamicCast_AsBP_AJBIn_Game_Character1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ChangeEnableShowGuide, K2Node_DynamicCast_bSuccess1) == 0x000048, "Member 'BP_AJBWallClimb_C_ChangeEnableShowGuide::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ChangeEnableShowGuide, K2Node_DynamicCast_AsAJBIn_Game_Character_Base) == 0x000050, "Member 'BP_AJBWallClimb_C_ChangeEnableShowGuide::K2Node_DynamicCast_AsAJBIn_Game_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ChangeEnableShowGuide, K2Node_DynamicCast_bSuccess2) == 0x000058, "Member 'BP_AJBWallClimb_C_ChangeEnableShowGuide::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ChangeEnableShowGuide, CallFunc_GetOwner_ReturnValue4) == 0x000060, "Member 'BP_AJBWallClimb_C_ChangeEnableShowGuide::CallFunc_GetOwner_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ChangeEnableShowGuide, CallFunc_GetComponentByClass_ReturnValue1) == 0x000068, "Member 'BP_AJBWallClimb_C_ChangeEnableShowGuide::CallFunc_GetComponentByClass_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ChangeEnableShowGuide, CallFunc_IsPlayerController_ReturnValue) == 0x000070, "Member 'BP_AJBWallClimb_C_ChangeEnableShowGuide::CallFunc_IsPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ChangeEnableShowGuide, CallFunc_GetOwner_ReturnValue5) == 0x000078, "Member 'BP_AJBWallClimb_C_ChangeEnableShowGuide::CallFunc_GetOwner_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ChangeEnableShowGuide, K2Node_DynamicCast_AsAJBIn_Game_Character_Base1) == 0x000080, "Member 'BP_AJBWallClimb_C_ChangeEnableShowGuide::K2Node_DynamicCast_AsAJBIn_Game_Character_Base1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ChangeEnableShowGuide, K2Node_DynamicCast_bSuccess3) == 0x000088, "Member 'BP_AJBWallClimb_C_ChangeEnableShowGuide::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ChangeEnableShowGuide, CallFunc_HasLocalSharedController_ReturnValue) == 0x000089, "Member 'BP_AJBWallClimb_C_ChangeEnableShowGuide::CallFunc_HasLocalSharedController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ChangeEnableShowGuide, CallFunc_BooleanXOR_ReturnValue) == 0x00008A, "Member 'BP_AJBWallClimb_C_ChangeEnableShowGuide::CallFunc_BooleanXOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ChangeEnableShowGuide, CallFunc_GetAJBInGameHUD_BP_bSuccess) == 0x00008B, "Member 'BP_AJBWallClimb_C_ChangeEnableShowGuide::CallFunc_GetAJBInGameHUD_BP_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ChangeEnableShowGuide, CallFunc_GetAJBInGameHUD_BP_In_Game_HUD) == 0x000090, "Member 'BP_AJBWallClimb_C_ChangeEnableShowGuide::CallFunc_GetAJBInGameHUD_BP_In_Game_HUD' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ChangeEnableShowGuide, CallFunc_GetAJBInGameHUD_BP_bSuccess1) == 0x000098, "Member 'BP_AJBWallClimb_C_ChangeEnableShowGuide::CallFunc_GetAJBInGameHUD_BP_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_ChangeEnableShowGuide, CallFunc_GetAJBInGameHUD_BP_In_Game_HUD1) == 0x0000A0, "Member 'BP_AJBWallClimb_C_ChangeEnableShowGuide::CallFunc_GetAJBInGameHUD_BP_In_Game_HUD1' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.GetCanClimbMinHeight
// 0x0018 (0x0018 - 0x0000)
struct BP_AJBWallClimb_C_GetCanClimbMinHeight final
{
public:
	float                                         MinHeight;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAJBGameInstance_bSuccess;              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBGameInstance_C*                  CallFunc_GetAJBGameInstance_AJB_Game_Instance;     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetStageID_StageTypeID;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBWallClimb_C_GetCanClimbMinHeight) == 0x000008, "Wrong alignment on BP_AJBWallClimb_C_GetCanClimbMinHeight");
static_assert(sizeof(BP_AJBWallClimb_C_GetCanClimbMinHeight) == 0x000018, "Wrong size on BP_AJBWallClimb_C_GetCanClimbMinHeight");
static_assert(offsetof(BP_AJBWallClimb_C_GetCanClimbMinHeight, MinHeight) == 0x000000, "Member 'BP_AJBWallClimb_C_GetCanClimbMinHeight::MinHeight' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetCanClimbMinHeight, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_AJBWallClimb_C_GetCanClimbMinHeight::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetCanClimbMinHeight, CallFunc_GetAJBGameInstance_bSuccess) == 0x000005, "Member 'BP_AJBWallClimb_C_GetCanClimbMinHeight::CallFunc_GetAJBGameInstance_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetCanClimbMinHeight, CallFunc_GetAJBGameInstance_AJB_Game_Instance) == 0x000008, "Member 'BP_AJBWallClimb_C_GetCanClimbMinHeight::CallFunc_GetAJBGameInstance_AJB_Game_Instance' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetCanClimbMinHeight, CallFunc_GetStageID_StageTypeID) == 0x000010, "Member 'BP_AJBWallClimb_C_GetCanClimbMinHeight::CallFunc_GetStageID_StageTypeID' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetCanClimbMinHeight, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000014, "Member 'BP_AJBWallClimb_C_GetCanClimbMinHeight::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.GetPointOffsetRate
// 0x0180 (0x0180 - 0x0000)
struct BP_AJBWallClimb_C_GetPointOffsetRate final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         Rate;                                              // 0x0088(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    TempHitComponent;                                  // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Split_LeftS;                              // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Split_RightS;                             // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Split_ReturnValue;                        // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Array_Get_Item;                           // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_MatchesWildcard_ReturnValue;              // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0102(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0103(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x010C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0118(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0124(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0130(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0150(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0168(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0174(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBWallClimb_C_GetPointOffsetRate) == 0x000008, "Wrong alignment on BP_AJBWallClimb_C_GetPointOffsetRate");
static_assert(sizeof(BP_AJBWallClimb_C_GetPointOffsetRate) == 0x000180, "Wrong size on BP_AJBWallClimb_C_GetPointOffsetRate");
static_assert(offsetof(BP_AJBWallClimb_C_GetPointOffsetRate, HitResult) == 0x000000, "Member 'BP_AJBWallClimb_C_GetPointOffsetRate::HitResult' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetPointOffsetRate, Rate) == 0x000088, "Member 'BP_AJBWallClimb_C_GetPointOffsetRate::Rate' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetPointOffsetRate, TempHitComponent) == 0x000090, "Member 'BP_AJBWallClimb_C_GetPointOffsetRate::TempHitComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetPointOffsetRate, Temp_int_Array_Index_Variable) == 0x000098, "Member 'BP_AJBWallClimb_C_GetPointOffsetRate::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetPointOffsetRate, Temp_int_Loop_Counter_Variable) == 0x00009C, "Member 'BP_AJBWallClimb_C_GetPointOffsetRate::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetPointOffsetRate, CallFunc_Add_IntInt_ReturnValue) == 0x0000A0, "Member 'BP_AJBWallClimb_C_GetPointOffsetRate::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetPointOffsetRate, CallFunc_GetDisplayName_ReturnValue) == 0x0000A8, "Member 'BP_AJBWallClimb_C_GetPointOffsetRate::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetPointOffsetRate, CallFunc_Split_LeftS) == 0x0000B8, "Member 'BP_AJBWallClimb_C_GetPointOffsetRate::CallFunc_Split_LeftS' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetPointOffsetRate, CallFunc_Split_RightS) == 0x0000C8, "Member 'BP_AJBWallClimb_C_GetPointOffsetRate::CallFunc_Split_RightS' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetPointOffsetRate, CallFunc_Split_ReturnValue) == 0x0000D8, "Member 'BP_AJBWallClimb_C_GetPointOffsetRate::CallFunc_Split_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetPointOffsetRate, CallFunc_Array_Get_Item) == 0x0000E0, "Member 'BP_AJBWallClimb_C_GetPointOffsetRate::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetPointOffsetRate, CallFunc_Array_Length_ReturnValue) == 0x0000E8, "Member 'BP_AJBWallClimb_C_GetPointOffsetRate::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetPointOffsetRate, CallFunc_Conv_NameToString_ReturnValue) == 0x0000F0, "Member 'BP_AJBWallClimb_C_GetPointOffsetRate::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetPointOffsetRate, CallFunc_Less_IntInt_ReturnValue) == 0x000100, "Member 'BP_AJBWallClimb_C_GetPointOffsetRate::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetPointOffsetRate, CallFunc_MatchesWildcard_ReturnValue) == 0x000101, "Member 'BP_AJBWallClimb_C_GetPointOffsetRate::CallFunc_MatchesWildcard_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetPointOffsetRate, CallFunc_BreakHitResult_bBlockingHit) == 0x000102, "Member 'BP_AJBWallClimb_C_GetPointOffsetRate::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetPointOffsetRate, CallFunc_BreakHitResult_bInitialOverlap) == 0x000103, "Member 'BP_AJBWallClimb_C_GetPointOffsetRate::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetPointOffsetRate, CallFunc_BreakHitResult_Time) == 0x000104, "Member 'BP_AJBWallClimb_C_GetPointOffsetRate::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetPointOffsetRate, CallFunc_BreakHitResult_Distance) == 0x000108, "Member 'BP_AJBWallClimb_C_GetPointOffsetRate::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetPointOffsetRate, CallFunc_BreakHitResult_Location) == 0x00010C, "Member 'BP_AJBWallClimb_C_GetPointOffsetRate::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetPointOffsetRate, CallFunc_BreakHitResult_ImpactPoint) == 0x000118, "Member 'BP_AJBWallClimb_C_GetPointOffsetRate::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetPointOffsetRate, CallFunc_BreakHitResult_Normal) == 0x000124, "Member 'BP_AJBWallClimb_C_GetPointOffsetRate::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetPointOffsetRate, CallFunc_BreakHitResult_ImpactNormal) == 0x000130, "Member 'BP_AJBWallClimb_C_GetPointOffsetRate::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetPointOffsetRate, CallFunc_BreakHitResult_PhysMat) == 0x000140, "Member 'BP_AJBWallClimb_C_GetPointOffsetRate::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetPointOffsetRate, CallFunc_BreakHitResult_HitActor) == 0x000148, "Member 'BP_AJBWallClimb_C_GetPointOffsetRate::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetPointOffsetRate, CallFunc_BreakHitResult_HitComponent) == 0x000150, "Member 'BP_AJBWallClimb_C_GetPointOffsetRate::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetPointOffsetRate, CallFunc_BreakHitResult_HitBoneName) == 0x000158, "Member 'BP_AJBWallClimb_C_GetPointOffsetRate::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetPointOffsetRate, CallFunc_BreakHitResult_HitItem) == 0x000160, "Member 'BP_AJBWallClimb_C_GetPointOffsetRate::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetPointOffsetRate, CallFunc_BreakHitResult_FaceIndex) == 0x000164, "Member 'BP_AJBWallClimb_C_GetPointOffsetRate::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetPointOffsetRate, CallFunc_BreakHitResult_TraceStart) == 0x000168, "Member 'BP_AJBWallClimb_C_GetPointOffsetRate::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_GetPointOffsetRate, CallFunc_BreakHitResult_TraceEnd) == 0x000174, "Member 'BP_AJBWallClimb_C_GetPointOffsetRate::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.NotifyTheWorld
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBWallClimb_C_NotifyTheWorld final
{
public:
	class AAJBInGameCharacter*                    Operator;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGeneralTiming                                Timing;                                            // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnable;                                           // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bOperatorIsEmpty;                                  // 0x000E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBWallClimb_C_NotifyTheWorld) == 0x000008, "Wrong alignment on BP_AJBWallClimb_C_NotifyTheWorld");
static_assert(sizeof(BP_AJBWallClimb_C_NotifyTheWorld) == 0x000010, "Wrong size on BP_AJBWallClimb_C_NotifyTheWorld");
static_assert(offsetof(BP_AJBWallClimb_C_NotifyTheWorld, Operator) == 0x000000, "Member 'BP_AJBWallClimb_C_NotifyTheWorld::Operator' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_NotifyTheWorld, Time) == 0x000008, "Member 'BP_AJBWallClimb_C_NotifyTheWorld::Time' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_NotifyTheWorld, Timing) == 0x00000C, "Member 'BP_AJBWallClimb_C_NotifyTheWorld::Timing' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_NotifyTheWorld, bEnable) == 0x00000D, "Member 'BP_AJBWallClimb_C_NotifyTheWorld::bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBWallClimb_C_NotifyTheWorld, bOperatorIsEmpty) == 0x00000E, "Member 'BP_AJBWallClimb_C_NotifyTheWorld::bOperatorIsEmpty' has a wrong offset!");

}

