#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BI_AdditionalAP

#include "Basic.hpp"

#include "BI_AdditionalAP_classes.hpp"
#include "BI_AdditionalAP_parameters.hpp"


namespace SDK
{

// Function BI_AdditionalAP.BI_AdditionalAP_C.Initialize
// (Public, BlueprintCallable, BlueprintEvent)

void IBI_AdditionalAP_C::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BI_AdditionalAP_C", "Initialize");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BI_AdditionalAP.BI_AdditionalAP_C.GetValue
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32*                                  AAPValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_AdditionalAP_C::GetValue(int32* AAPValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BI_AdditionalAP_C", "GetValue");

	Params::BI_AdditionalAP_C_GetValue Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (AAPValue != nullptr)
		*AAPValue = Parms.AAPValue;
}


// Function BI_AdditionalAP.BI_AdditionalAP_C.Consume
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  LeftDamage                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  BeforeValue                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  AfterValue                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_AdditionalAP_C::Consume(int32 Damage, int32* LeftDamage, int32* BeforeValue, int32* AfterValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BI_AdditionalAP_C", "Consume");

	Params::BI_AdditionalAP_C_Consume Parms{};

	Parms.Damage = Damage;

	AsUObject()->ProcessEvent(Func, &Parms);

	if (LeftDamage != nullptr)
		*LeftDamage = Parms.LeftDamage;

	if (BeforeValue != nullptr)
		*BeforeValue = Parms.BeforeValue;

	if (AfterValue != nullptr)
		*AfterValue = Parms.AfterValue;
}


// Function BI_AdditionalAP.BI_AdditionalAP_C.GetValueMax
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32*                                  AAPValueMax                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_AdditionalAP_C::GetValueMax(int32* AAPValueMax)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BI_AdditionalAP_C", "GetValueMax");

	Params::BI_AdditionalAP_C_GetValueMax Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (AAPValueMax != nullptr)
		*AAPValueMax = Parms.AAPValueMax;
}


// Function BI_AdditionalAP.BI_AdditionalAP_C.OnConsumed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   BeforeValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AfterValue                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_AdditionalAP_C::OnConsumed(int32 BeforeValue, int32 AfterValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BI_AdditionalAP_C", "OnConsumed");

	Params::BI_AdditionalAP_C_OnConsumed Parms{};

	Parms.BeforeValue = BeforeValue;
	Parms.AfterValue = AfterValue;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BI_AdditionalAP.BI_AdditionalAP_C.GetParticleTagBlocked
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag*                    ParticleTag                                            (Parm, OutParm, NoDestructor, HasGetValueTypeHash)

void IBI_AdditionalAP_C::GetParticleTagBlocked(struct FGameplayTag* ParticleTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BI_AdditionalAP_C", "GetParticleTagBlocked");

	Params::BI_AdditionalAP_C_GetParticleTagBlocked Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (ParticleTag != nullptr)
		*ParticleTag = std::move(Parms.ParticleTag);
}


// Function BI_AdditionalAP.BI_AdditionalAP_C.AddValue
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Point                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Causer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_AdditionalAP_C::AddValue(int32 Point, class AActor* Causer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BI_AdditionalAP_C", "AddValue");

	Params::BI_AdditionalAP_C_AddValue Parms{};

	Parms.Point = Point;
	Parms.Causer = Causer;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BI_AdditionalAP.BI_AdditionalAP_C.GetSETagBlocked
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag*                    SETag                                                  (Parm, OutParm, NoDestructor, HasGetValueTypeHash)

void IBI_AdditionalAP_C::GetSETagBlocked(struct FGameplayTag* SETag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BI_AdditionalAP_C", "GetSETagBlocked");

	Params::BI_AdditionalAP_C_GetSETagBlocked Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (SETag != nullptr)
		*SETag = std::move(Parms.SETag);
}


// Function BI_AdditionalAP.BI_AdditionalAP_C.ConsumeSimulated
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  LeftDamage                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  BeforeValue                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  AfterValue                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_AdditionalAP_C::ConsumeSimulated(int32 Damage, int32* LeftDamage, int32* BeforeValue, int32* AfterValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BI_AdditionalAP_C", "ConsumeSimulated");

	Params::BI_AdditionalAP_C_ConsumeSimulated Parms{};

	Parms.Damage = Damage;

	AsUObject()->ProcessEvent(Func, &Parms);

	if (LeftDamage != nullptr)
		*LeftDamage = Parms.LeftDamage;

	if (BeforeValue != nullptr)
		*BeforeValue = Parms.BeforeValue;

	if (AfterValue != nullptr)
		*AfterValue = Parms.AfterValue;
}


// Function BI_AdditionalAP.BI_AdditionalAP_C.ChangeParticleVisibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewVisibility                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBI_AdditionalAP_C::ChangeParticleVisibility(bool NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BI_AdditionalAP_C", "ChangeParticleVisibility");

	Params::BI_AdditionalAP_C_ChangeParticleVisibility Parms{};

	Parms.NewVisibility = NewVisibility;

	AsUObject()->ProcessEvent(Func, &Parms);
}

}

