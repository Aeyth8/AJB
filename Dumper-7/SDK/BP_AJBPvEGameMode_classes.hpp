#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBPvEGameMode

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "ST_AJBInGamePvE_EnemyInfo_structs.hpp"
#include "BP_AJBBattleGameMode_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBPvEGameMode.BP_AJBPvEGameMode_C
// 0x0050 (0x05C0 - 0x0570)
class ABP_AJBPvEGameMode_C final : public ABP_AJBBattleGameMode_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBPvEGameMode_C;                // 0x0568(0x0008)(Transient, DuplicateTransient)
	struct FST_AJBInGamePvE_EnemyInfo             DefaultEnemyInfo;                                  // 0x0570(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<struct FGameplayTag>                   DefaultBannedEnemies;                              // 0x05A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	float                                         DefaultDeadNPCCleaningTime;                        // 0x05B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBPvEGameMode(int32 EntryPoint);
	void Debug_RefreshMatchingPlayers();
	void Debug_SetupCharacters(const struct FGameplayTag& NextState);
	void OnCharacterDead(const struct FGameplayTag& DamageType, class AActor* DeadActor, class AActor* DamageCauser);
	void SetupForEditor();
	void OnBegin_Gameplay(const struct FGameplayTag& PrevState);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBPvEGameMode_C">();
	}
	static class ABP_AJBPvEGameMode_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBPvEGameMode_C>();
	}
};
static_assert(alignof(ABP_AJBPvEGameMode_C) == 0x000010, "Wrong alignment on ABP_AJBPvEGameMode_C");
static_assert(sizeof(ABP_AJBPvEGameMode_C) == 0x0005C0, "Wrong size on ABP_AJBPvEGameMode_C");
static_assert(offsetof(ABP_AJBPvEGameMode_C, UberGraphFrame_BP_AJBPvEGameMode_C) == 0x000568, "Member 'ABP_AJBPvEGameMode_C::UberGraphFrame_BP_AJBPvEGameMode_C' has a wrong offset!");
static_assert(offsetof(ABP_AJBPvEGameMode_C, DefaultEnemyInfo) == 0x000570, "Member 'ABP_AJBPvEGameMode_C::DefaultEnemyInfo' has a wrong offset!");
static_assert(offsetof(ABP_AJBPvEGameMode_C, DefaultBannedEnemies) == 0x0005A0, "Member 'ABP_AJBPvEGameMode_C::DefaultBannedEnemies' has a wrong offset!");
static_assert(offsetof(ABP_AJBPvEGameMode_C, DefaultDeadNPCCleaningTime) == 0x0005B0, "Member 'ABP_AJBPvEGameMode_C::DefaultDeadNPCCleaningTime' has a wrong offset!");

}

