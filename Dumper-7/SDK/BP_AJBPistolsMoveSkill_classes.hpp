#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBPistolsMoveSkill

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AJB_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BP_AJBSnipeSkill_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBPistolsMoveSkill.BP_AJBPistolsMoveSkill_C
// 0x00D0 (0x0358 - 0x0288)
class UBP_AJBPistolsMoveSkill_C : public UBP_AJBSnipeSkill_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBPistolsMoveSkill_C;           // 0x0288(0x0008)(Transient, DuplicateTransient)
	struct FRotator                               Rep_PrevRotation;                                  // 0x0290(0x000C)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMesh*>                  SXPMeshList;                                       // 0x02A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          bEnableHeadShot_Only_RodeoShot_;                   // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B1[0x3];                                      // 0x02B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxHP;                                             // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UAnimMontage*>                   SXPLoiteringAnimList;                              // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UAnimMontage*                           SXPKickingAnim_Only_PistolsStrike_;                // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           SXPSpecialBreakDownAnim;                           // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EffectLoiteringTag;                                // 0x02D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EffectHitTag;                                      // 0x02E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SELoiteringTag;                                    // 0x02E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SEHitTag;                                          // 0x02F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSpeedOnAccel;                                   // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSpeedDefault;                                   // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSpeedOnDeaccel;                                 // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LoiteringTime;                                     // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KickingTime_Only_PistolsStrike_;                   // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaitingTime;                                       // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HitDamage_Only_RodeoShot_;                         // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HitDamageOnHeadShot_Only_RodeoShot_;               // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeadShotTraceLength_Only_RodeoShot_;               // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31C[0x4];                                      // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           GionHitTag;                                        // 0x0320(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     PostProcessMaterial;                               // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PostProcessIndex;                                  // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IntencityOnAccel;                                  // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IntencityDefault;                                  // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IntencityOnDeaccel;                                // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DMI_SpeedDst;                                      // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   DMIParam_IntencityName;                            // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCompletedStandPossess;                            // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCompletedCharacterPossess;                        // 0x0351(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_352[0x2];                                      // 0x0352(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PPMaterialIndex;                                   // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBPistolsMoveSkill(int32 EntryPoint);
	void ROS_CheckCancelFlinch();
	void TryEndSkill_Local();
	void OnPawnClientRestarted();
	void ROS_EndSkill();
	void BindEventToOnMaxSpeedChanged();
	void OnMaxSpeedChanged(EMovableSXPFlyingState FlyingState);
	void OnStateChanged(EMovableStandSXPState PrevState, EMovableStandSXPState NextState);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void OnClientMovableStandRestarted();
	void OnCharacterClientRestarted();
	void MC_EndSkill();
	void EndSkill_Server();
	void OnCompleted();
	void AdjustStandTransform(const struct FVector& Loation, const struct FRotator& Rotation);
	void GetMeshAndAnimSeq(class USkeletalMesh** Mesh, class UAnimMontage** AnimSeq);
	void SetEnablePostProcess(bool bEnable);
	void ChengePPParam(float Intencity);
	void ApplySkillSettings();
	void OnMCShot(const struct FVector& Location, const struct FRotator& Rotation);
	void OnROSShot(const struct FVector& Location, const struct FRotator& Rotation);
	void OnShot(const struct FVector& Location, const struct FRotator& Rotation);
	void OnDisconnected();
	void ReceiveBeginPlay();
	void OnCancel();
	void OnActive();
	void OnInactive();
	void InitializeVariables();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBPistolsMoveSkill_C">();
	}
	static class UBP_AJBPistolsMoveSkill_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBPistolsMoveSkill_C>();
	}
};
static_assert(alignof(UBP_AJBPistolsMoveSkill_C) == 0x000008, "Wrong alignment on UBP_AJBPistolsMoveSkill_C");
static_assert(sizeof(UBP_AJBPistolsMoveSkill_C) == 0x000358, "Wrong size on UBP_AJBPistolsMoveSkill_C");
static_assert(offsetof(UBP_AJBPistolsMoveSkill_C, UberGraphFrame_BP_AJBPistolsMoveSkill_C) == 0x000288, "Member 'UBP_AJBPistolsMoveSkill_C::UberGraphFrame_BP_AJBPistolsMoveSkill_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBPistolsMoveSkill_C, Rep_PrevRotation) == 0x000290, "Member 'UBP_AJBPistolsMoveSkill_C::Rep_PrevRotation' has a wrong offset!");
static_assert(offsetof(UBP_AJBPistolsMoveSkill_C, SXPMeshList) == 0x0002A0, "Member 'UBP_AJBPistolsMoveSkill_C::SXPMeshList' has a wrong offset!");
static_assert(offsetof(UBP_AJBPistolsMoveSkill_C, bEnableHeadShot_Only_RodeoShot_) == 0x0002B0, "Member 'UBP_AJBPistolsMoveSkill_C::bEnableHeadShot_Only_RodeoShot_' has a wrong offset!");
static_assert(offsetof(UBP_AJBPistolsMoveSkill_C, MaxHP) == 0x0002B4, "Member 'UBP_AJBPistolsMoveSkill_C::MaxHP' has a wrong offset!");
static_assert(offsetof(UBP_AJBPistolsMoveSkill_C, SXPLoiteringAnimList) == 0x0002B8, "Member 'UBP_AJBPistolsMoveSkill_C::SXPLoiteringAnimList' has a wrong offset!");
static_assert(offsetof(UBP_AJBPistolsMoveSkill_C, SXPKickingAnim_Only_PistolsStrike_) == 0x0002C8, "Member 'UBP_AJBPistolsMoveSkill_C::SXPKickingAnim_Only_PistolsStrike_' has a wrong offset!");
static_assert(offsetof(UBP_AJBPistolsMoveSkill_C, SXPSpecialBreakDownAnim) == 0x0002D0, "Member 'UBP_AJBPistolsMoveSkill_C::SXPSpecialBreakDownAnim' has a wrong offset!");
static_assert(offsetof(UBP_AJBPistolsMoveSkill_C, EffectLoiteringTag) == 0x0002D8, "Member 'UBP_AJBPistolsMoveSkill_C::EffectLoiteringTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBPistolsMoveSkill_C, EffectHitTag) == 0x0002E0, "Member 'UBP_AJBPistolsMoveSkill_C::EffectHitTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBPistolsMoveSkill_C, SELoiteringTag) == 0x0002E8, "Member 'UBP_AJBPistolsMoveSkill_C::SELoiteringTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBPistolsMoveSkill_C, SEHitTag) == 0x0002F0, "Member 'UBP_AJBPistolsMoveSkill_C::SEHitTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBPistolsMoveSkill_C, MaxSpeedOnAccel) == 0x0002F8, "Member 'UBP_AJBPistolsMoveSkill_C::MaxSpeedOnAccel' has a wrong offset!");
static_assert(offsetof(UBP_AJBPistolsMoveSkill_C, MaxSpeedDefault) == 0x0002FC, "Member 'UBP_AJBPistolsMoveSkill_C::MaxSpeedDefault' has a wrong offset!");
static_assert(offsetof(UBP_AJBPistolsMoveSkill_C, MaxSpeedOnDeaccel) == 0x000300, "Member 'UBP_AJBPistolsMoveSkill_C::MaxSpeedOnDeaccel' has a wrong offset!");
static_assert(offsetof(UBP_AJBPistolsMoveSkill_C, LoiteringTime) == 0x000304, "Member 'UBP_AJBPistolsMoveSkill_C::LoiteringTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBPistolsMoveSkill_C, KickingTime_Only_PistolsStrike_) == 0x000308, "Member 'UBP_AJBPistolsMoveSkill_C::KickingTime_Only_PistolsStrike_' has a wrong offset!");
static_assert(offsetof(UBP_AJBPistolsMoveSkill_C, WaitingTime) == 0x00030C, "Member 'UBP_AJBPistolsMoveSkill_C::WaitingTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBPistolsMoveSkill_C, HitDamage_Only_RodeoShot_) == 0x000310, "Member 'UBP_AJBPistolsMoveSkill_C::HitDamage_Only_RodeoShot_' has a wrong offset!");
static_assert(offsetof(UBP_AJBPistolsMoveSkill_C, HitDamageOnHeadShot_Only_RodeoShot_) == 0x000314, "Member 'UBP_AJBPistolsMoveSkill_C::HitDamageOnHeadShot_Only_RodeoShot_' has a wrong offset!");
static_assert(offsetof(UBP_AJBPistolsMoveSkill_C, HeadShotTraceLength_Only_RodeoShot_) == 0x000318, "Member 'UBP_AJBPistolsMoveSkill_C::HeadShotTraceLength_Only_RodeoShot_' has a wrong offset!");
static_assert(offsetof(UBP_AJBPistolsMoveSkill_C, GionHitTag) == 0x000320, "Member 'UBP_AJBPistolsMoveSkill_C::GionHitTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBPistolsMoveSkill_C, PostProcessMaterial) == 0x000328, "Member 'UBP_AJBPistolsMoveSkill_C::PostProcessMaterial' has a wrong offset!");
static_assert(offsetof(UBP_AJBPistolsMoveSkill_C, PostProcessIndex) == 0x000330, "Member 'UBP_AJBPistolsMoveSkill_C::PostProcessIndex' has a wrong offset!");
static_assert(offsetof(UBP_AJBPistolsMoveSkill_C, IntencityOnAccel) == 0x000334, "Member 'UBP_AJBPistolsMoveSkill_C::IntencityOnAccel' has a wrong offset!");
static_assert(offsetof(UBP_AJBPistolsMoveSkill_C, IntencityDefault) == 0x000338, "Member 'UBP_AJBPistolsMoveSkill_C::IntencityDefault' has a wrong offset!");
static_assert(offsetof(UBP_AJBPistolsMoveSkill_C, IntencityOnDeaccel) == 0x00033C, "Member 'UBP_AJBPistolsMoveSkill_C::IntencityOnDeaccel' has a wrong offset!");
static_assert(offsetof(UBP_AJBPistolsMoveSkill_C, DMI_SpeedDst) == 0x000340, "Member 'UBP_AJBPistolsMoveSkill_C::DMI_SpeedDst' has a wrong offset!");
static_assert(offsetof(UBP_AJBPistolsMoveSkill_C, DMIParam_IntencityName) == 0x000348, "Member 'UBP_AJBPistolsMoveSkill_C::DMIParam_IntencityName' has a wrong offset!");
static_assert(offsetof(UBP_AJBPistolsMoveSkill_C, bCompletedStandPossess) == 0x000350, "Member 'UBP_AJBPistolsMoveSkill_C::bCompletedStandPossess' has a wrong offset!");
static_assert(offsetof(UBP_AJBPistolsMoveSkill_C, bCompletedCharacterPossess) == 0x000351, "Member 'UBP_AJBPistolsMoveSkill_C::bCompletedCharacterPossess' has a wrong offset!");
static_assert(offsetof(UBP_AJBPistolsMoveSkill_C, PPMaterialIndex) == 0x000354, "Member 'UBP_AJBPistolsMoveSkill_C::PPMaterialIndex' has a wrong offset!");

}

