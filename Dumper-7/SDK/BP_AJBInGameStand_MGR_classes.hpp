#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameStand_MGR

#include "Basic.hpp"

#include "BP_AJBInGameStand_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBInGameStand_MGR.BP_AJBInGameStand_MGR_C
// 0x0070 (0x0550 - 0x04E0)
class ABP_AJBInGameStand_MGR_C final : public ABP_AJBInGameStand_C
{
public:
	class USceneComponent*                        RedBindPoint;                                      // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Spine2;                                            // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               R_Thigh;                                           // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               L_Thigh;                                           // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Spine;                                             // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               R_Hand;                                            // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               L_Hand;                                            // 0x0510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               R_Forearm;                                         // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               L_Forearm;                                         // 0x0520(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               R_UpperArm;                                        // 0x0528(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               L_UpperArm;                                        // 0x0530(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Head;                                              // 0x0538(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ShotPointDummy;                                    // 0x0540(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ShotPoint;                                         // 0x0548(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void GetDummyShotLocation(struct FVector* Location);
	void ShouldShowNGPoint(bool* bResult);
	void GetShutTraceRadius(float* Radius);
	void GetShotLocation(bool bConsiderCharacterCapsuleRadius, const struct FGameplayTag& SkillTag, TArray<struct FVector>* Locations);
	void CheckLocallyControlled(bool* bLocallyControlled);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBInGameStand_MGR_C">();
	}
	static class ABP_AJBInGameStand_MGR_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBInGameStand_MGR_C>();
	}
};
static_assert(alignof(ABP_AJBInGameStand_MGR_C) == 0x000008, "Wrong alignment on ABP_AJBInGameStand_MGR_C");
static_assert(sizeof(ABP_AJBInGameStand_MGR_C) == 0x000550, "Wrong size on ABP_AJBInGameStand_MGR_C");
static_assert(offsetof(ABP_AJBInGameStand_MGR_C, RedBindPoint) == 0x0004E0, "Member 'ABP_AJBInGameStand_MGR_C::RedBindPoint' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_MGR_C, Spine2) == 0x0004E8, "Member 'ABP_AJBInGameStand_MGR_C::Spine2' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_MGR_C, R_Thigh) == 0x0004F0, "Member 'ABP_AJBInGameStand_MGR_C::R_Thigh' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_MGR_C, L_Thigh) == 0x0004F8, "Member 'ABP_AJBInGameStand_MGR_C::L_Thigh' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_MGR_C, Spine) == 0x000500, "Member 'ABP_AJBInGameStand_MGR_C::Spine' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_MGR_C, R_Hand) == 0x000508, "Member 'ABP_AJBInGameStand_MGR_C::R_Hand' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_MGR_C, L_Hand) == 0x000510, "Member 'ABP_AJBInGameStand_MGR_C::L_Hand' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_MGR_C, R_Forearm) == 0x000518, "Member 'ABP_AJBInGameStand_MGR_C::R_Forearm' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_MGR_C, L_Forearm) == 0x000520, "Member 'ABP_AJBInGameStand_MGR_C::L_Forearm' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_MGR_C, R_UpperArm) == 0x000528, "Member 'ABP_AJBInGameStand_MGR_C::R_UpperArm' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_MGR_C, L_UpperArm) == 0x000530, "Member 'ABP_AJBInGameStand_MGR_C::L_UpperArm' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_MGR_C, Head) == 0x000538, "Member 'ABP_AJBInGameStand_MGR_C::Head' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_MGR_C, ShotPointDummy) == 0x000540, "Member 'ABP_AJBInGameStand_MGR_C::ShotPointDummy' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_MGR_C, ShotPoint) == 0x000548, "Member 'ABP_AJBInGameStand_MGR_C::ShotPoint' has a wrong offset!");

}

