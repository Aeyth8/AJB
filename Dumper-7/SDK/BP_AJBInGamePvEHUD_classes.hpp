#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGamePvEHUD

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "EPvEGameDifficulty_structs.hpp"
#include "BP_AJBInGameHUD_classes.hpp"
#include "E_AJBInGamePvE_GamePhase_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBInGamePvEHUD.BP_AJBInGamePvEHUD_C
// 0x0010 (0x07C0 - 0x07B0)
class ABP_AJBInGamePvEHUD_C final : public ABP_AJBInGameHUD_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBInGamePvEHUD_C;               // 0x07B0(0x0008)(Transient, DuplicateTransient)
	float                                         DelayTimeAfterFinalEndWaveEffect;                  // 0x07B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DelayTimeAfterScoreResultWindow;                   // 0x07BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBInGamePvEHUD(int32 EntryPoint);
	void ShowTimeMessage(E_AJBInGamePvE_GamePhase CurrentPhase, int32 ShowValue);
	void Debug_CloseResultWindow();
	void Debug_ShowResultWindow();
	void OnKillScoreChanged(int32 OldScore, int32 NewScore);
	void OnRetiredCountChanged(int32 OldRetiredCount, int32 NewRetiredCount);
	void OnKillCountChanged(int32 OldKillCount, int32 NewKillCount);
	void OnEndOverTime();
	void OnBeginOverTime();
	void OnEndWave(int32 WaveIndex, float WaveDuration);
	void OnBeginWave(int32 NewWaveIndex, float NewWaveDuration);
	void BindPvEEvents();
	void OnInterruptPvE();
	void OnClosed_ScoreResultWindow(class UAJBWindowWidget* TargetWidget);
	void OnBegin_PvE_ScoreResultWindow(const struct FGameplayTag& PrevState);
	void OnAnimationFinished_FinalEndWave(int32 WaveIndex, float WaveDuration);
	void OnBegin_PvE_AllWaveCleared(const struct FGameplayTag& PrevState);
	void OpenScoreResultWindow(class UWB_PvE_ScoreWindow_C** OutWidget);
	void DetermineAndStoreScoreResults(bool IsIncludingBonus);
	void ReceiveBeginPlay();
	void OnClosedWindEffect(class UAJBWindowWidget* TargetWidget);
	void OnBegin_VictoryPosing(const struct FGameplayTag& PrevState);
	void BindFlowStateEvents();
	void BndEvt__BP_AJBTrainingSequence_K2Node_ComponentBoundEvent_7_OnRequestGameResultDispatcher__DelegateSignature();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBInGamePvEHUD_C">();
	}
	static class ABP_AJBInGamePvEHUD_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBInGamePvEHUD_C>();
	}
};
static_assert(alignof(ABP_AJBInGamePvEHUD_C) == 0x000008, "Wrong alignment on ABP_AJBInGamePvEHUD_C");
static_assert(sizeof(ABP_AJBInGamePvEHUD_C) == 0x0007C0, "Wrong size on ABP_AJBInGamePvEHUD_C");
static_assert(offsetof(ABP_AJBInGamePvEHUD_C, UberGraphFrame_BP_AJBInGamePvEHUD_C) == 0x0007B0, "Member 'ABP_AJBInGamePvEHUD_C::UberGraphFrame_BP_AJBInGamePvEHUD_C' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvEHUD_C, DelayTimeAfterFinalEndWaveEffect) == 0x0007B8, "Member 'ABP_AJBInGamePvEHUD_C::DelayTimeAfterFinalEndWaveEffect' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvEHUD_C, DelayTimeAfterScoreResultWindow) == 0x0007BC, "Member 'ABP_AJBInGamePvEHUD_C::DelayTimeAfterScoreResultWindow' has a wrong offset!");

}

