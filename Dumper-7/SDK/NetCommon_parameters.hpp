#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NetCommon

#include "Basic.hpp"

#include "NetCommon_structs.hpp"


namespace SDK::Params
{

// Function NetCommon.NetHttp.Create
// 0x0010 (0x0010 - 0x0000)
struct NetHttp_Create final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetHttp*                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetHttp_Create) == 0x000008, "Wrong alignment on NetHttp_Create");
static_assert(sizeof(NetHttp_Create) == 0x000010, "Wrong size on NetHttp_Create");
static_assert(offsetof(NetHttp_Create, WorldContextObject) == 0x000000, "Member 'NetHttp_Create::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NetHttp_Create, ReturnValue) == 0x000008, "Member 'NetHttp_Create::ReturnValue' has a wrong offset!");

// Function NetCommon.NetHttp.PostRequest
// 0x0030 (0x0030 - 0x0000)
struct NetHttp_PostRequest final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetMessage*                            Data;                                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         limitSec;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SendMaxSpeed;                                      // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetHttp*                               ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetHttp_PostRequest) == 0x000008, "Wrong alignment on NetHttp_PostRequest");
static_assert(sizeof(NetHttp_PostRequest) == 0x000030, "Wrong size on NetHttp_PostRequest");
static_assert(offsetof(NetHttp_PostRequest, WorldContextObject) == 0x000000, "Member 'NetHttp_PostRequest::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NetHttp_PostRequest, URL) == 0x000008, "Member 'NetHttp_PostRequest::URL' has a wrong offset!");
static_assert(offsetof(NetHttp_PostRequest, Data) == 0x000018, "Member 'NetHttp_PostRequest::Data' has a wrong offset!");
static_assert(offsetof(NetHttp_PostRequest, limitSec) == 0x000020, "Member 'NetHttp_PostRequest::limitSec' has a wrong offset!");
static_assert(offsetof(NetHttp_PostRequest, SendMaxSpeed) == 0x000024, "Member 'NetHttp_PostRequest::SendMaxSpeed' has a wrong offset!");
static_assert(offsetof(NetHttp_PostRequest, ReturnValue) == 0x000028, "Member 'NetHttp_PostRequest::ReturnValue' has a wrong offset!");

// Function NetCommon.NetHttp.SetHeader
// 0x0060 (0x0060 - 0x0000)
struct NetHttp_SetHeader final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 hashKey;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserID;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 session;                                           // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Language;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Version;                                           // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Platform;                                          // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNetHttp*                               ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetHttp_SetHeader) == 0x000008, "Wrong alignment on NetHttp_SetHeader");
static_assert(sizeof(NetHttp_SetHeader) == 0x000060, "Wrong size on NetHttp_SetHeader");
static_assert(offsetof(NetHttp_SetHeader, WorldContextObject) == 0x000000, "Member 'NetHttp_SetHeader::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NetHttp_SetHeader, hashKey) == 0x000008, "Member 'NetHttp_SetHeader::hashKey' has a wrong offset!");
static_assert(offsetof(NetHttp_SetHeader, UserID) == 0x000018, "Member 'NetHttp_SetHeader::UserID' has a wrong offset!");
static_assert(offsetof(NetHttp_SetHeader, session) == 0x000028, "Member 'NetHttp_SetHeader::session' has a wrong offset!");
static_assert(offsetof(NetHttp_SetHeader, Language) == 0x000038, "Member 'NetHttp_SetHeader::Language' has a wrong offset!");
static_assert(offsetof(NetHttp_SetHeader, Version) == 0x000040, "Member 'NetHttp_SetHeader::Version' has a wrong offset!");
static_assert(offsetof(NetHttp_SetHeader, Platform) == 0x000050, "Member 'NetHttp_SetHeader::Platform' has a wrong offset!");
static_assert(offsetof(NetHttp_SetHeader, ReturnValue) == 0x000058, "Member 'NetHttp_SetHeader::ReturnValue' has a wrong offset!");

// Function NetCommon.NetMessage.Create
// 0x0010 (0x0010 - 0x0000)
struct NetMessage_Create final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetMessage*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetMessage_Create) == 0x000008, "Wrong alignment on NetMessage_Create");
static_assert(sizeof(NetMessage_Create) == 0x000010, "Wrong size on NetMessage_Create");
static_assert(offsetof(NetMessage_Create, WorldContextObject) == 0x000000, "Member 'NetMessage_Create::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NetMessage_Create, ReturnValue) == 0x000008, "Member 'NetMessage_Create::ReturnValue' has a wrong offset!");

// Function NetCommon.NetMessage.Dump
// 0x0020 (0x0020 - 0x0000)
struct NetMessage_Dump final
{
public:
	class FString                                 prefix;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetMessage_Dump) == 0x000008, "Wrong alignment on NetMessage_Dump");
static_assert(sizeof(NetMessage_Dump) == 0x000020, "Wrong size on NetMessage_Dump");
static_assert(offsetof(NetMessage_Dump, prefix) == 0x000000, "Member 'NetMessage_Dump::prefix' has a wrong offset!");
static_assert(offsetof(NetMessage_Dump, ReturnValue) == 0x000010, "Member 'NetMessage_Dump::ReturnValue' has a wrong offset!");

// Function NetCommon.NetMessage.DumpHttp
// 0x0020 (0x0020 - 0x0000)
struct NetMessage_DumpHttp final
{
public:
	class FString                                 prefix;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetMessage_DumpHttp) == 0x000008, "Wrong alignment on NetMessage_DumpHttp");
static_assert(sizeof(NetMessage_DumpHttp) == 0x000020, "Wrong size on NetMessage_DumpHttp");
static_assert(offsetof(NetMessage_DumpHttp, prefix) == 0x000000, "Member 'NetMessage_DumpHttp::prefix' has a wrong offset!");
static_assert(offsetof(NetMessage_DumpHttp, ReturnValue) == 0x000010, "Member 'NetMessage_DumpHttp::ReturnValue' has a wrong offset!");

// Function NetCommon.NetMessage.Set
// 0x0020 (0x0020 - 0x0000)
struct NetMessage_Set final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Data;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UNetMessage*                            ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetMessage_Set) == 0x000008, "Wrong alignment on NetMessage_Set");
static_assert(sizeof(NetMessage_Set) == 0x000020, "Wrong size on NetMessage_Set");
static_assert(offsetof(NetMessage_Set, ID) == 0x000000, "Member 'NetMessage_Set::ID' has a wrong offset!");
static_assert(offsetof(NetMessage_Set, Data) == 0x000008, "Member 'NetMessage_Set::Data' has a wrong offset!");
static_assert(offsetof(NetMessage_Set, ReturnValue) == 0x000018, "Member 'NetMessage_Set::ReturnValue' has a wrong offset!");

// Function NetCommon.NetSocket.Create
// 0x0010 (0x0010 - 0x0000)
struct NetSocket_Create final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetSocket*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSocket_Create) == 0x000008, "Wrong alignment on NetSocket_Create");
static_assert(sizeof(NetSocket_Create) == 0x000010, "Wrong size on NetSocket_Create");
static_assert(offsetof(NetSocket_Create, WorldContextObject) == 0x000000, "Member 'NetSocket_Create::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NetSocket_Create, ReturnValue) == 0x000008, "Member 'NetSocket_Create::ReturnValue' has a wrong offset!");

// Function NetCommon.NetSocket.Connect
// 0x0030 (0x0030 - 0x0000)
struct NetSocket_Connect final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IP;                                                // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Port;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         limitSec;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NetSocket_Connect) == 0x000008, "Wrong alignment on NetSocket_Connect");
static_assert(sizeof(NetSocket_Connect) == 0x000030, "Wrong size on NetSocket_Connect");
static_assert(offsetof(NetSocket_Connect, WorldContextObject) == 0x000000, "Member 'NetSocket_Connect::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NetSocket_Connect, IP) == 0x000008, "Member 'NetSocket_Connect::IP' has a wrong offset!");
static_assert(offsetof(NetSocket_Connect, Port) == 0x000018, "Member 'NetSocket_Connect::Port' has a wrong offset!");
static_assert(offsetof(NetSocket_Connect, limitSec) == 0x000028, "Member 'NetSocket_Connect::limitSec' has a wrong offset!");

// Function NetCommon.NetSocket.Disconnect
// 0x0008 (0x0008 - 0x0000)
struct NetSocket_Disconnect final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSocket_Disconnect) == 0x000008, "Wrong alignment on NetSocket_Disconnect");
static_assert(sizeof(NetSocket_Disconnect) == 0x000008, "Wrong size on NetSocket_Disconnect");
static_assert(offsetof(NetSocket_Disconnect, WorldContextObject) == 0x000000, "Member 'NetSocket_Disconnect::WorldContextObject' has a wrong offset!");

// Function NetCommon.NetSocket.GetCipherKey
// 0x0010 (0x0010 - 0x0000)
struct NetSocket_GetCipherKey final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSocket_GetCipherKey) == 0x000008, "Wrong alignment on NetSocket_GetCipherKey");
static_assert(sizeof(NetSocket_GetCipherKey) == 0x000010, "Wrong size on NetSocket_GetCipherKey");
static_assert(offsetof(NetSocket_GetCipherKey, ReturnValue) == 0x000000, "Member 'NetSocket_GetCipherKey::ReturnValue' has a wrong offset!");

// Function NetCommon.NetSocket.GetCipherMode
// 0x0001 (0x0001 - 0x0000)
struct NetSocket_GetCipherMode final
{
public:
	ENetSocketCipherMode                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSocket_GetCipherMode) == 0x000001, "Wrong alignment on NetSocket_GetCipherMode");
static_assert(sizeof(NetSocket_GetCipherMode) == 0x000001, "Wrong size on NetSocket_GetCipherMode");
static_assert(offsetof(NetSocket_GetCipherMode, ReturnValue) == 0x000000, "Member 'NetSocket_GetCipherMode::ReturnValue' has a wrong offset!");

// Function NetCommon.NetSocket.IsConnected
// 0x0001 (0x0001 - 0x0000)
struct NetSocket_IsConnected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSocket_IsConnected) == 0x000001, "Wrong alignment on NetSocket_IsConnected");
static_assert(sizeof(NetSocket_IsConnected) == 0x000001, "Wrong size on NetSocket_IsConnected");
static_assert(offsetof(NetSocket_IsConnected, ReturnValue) == 0x000000, "Member 'NetSocket_IsConnected::ReturnValue' has a wrong offset!");

// Function NetCommon.NetSocket.Send
// 0x0010 (0x0010 - 0x0000)
struct NetSocket_Send final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetMessage*                            Data;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSocket_Send) == 0x000008, "Wrong alignment on NetSocket_Send");
static_assert(sizeof(NetSocket_Send) == 0x000010, "Wrong size on NetSocket_Send");
static_assert(offsetof(NetSocket_Send, WorldContextObject) == 0x000000, "Member 'NetSocket_Send::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NetSocket_Send, Data) == 0x000008, "Member 'NetSocket_Send::Data' has a wrong offset!");

// Function NetCommon.NetSocket.SetCipherMode
// 0x0020 (0x0020 - 0x0000)
struct NetSocket_SetCipherMode final
{
public:
	ENetSocketCipherMode                          Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetSocket*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSocket_SetCipherMode) == 0x000008, "Wrong alignment on NetSocket_SetCipherMode");
static_assert(sizeof(NetSocket_SetCipherMode) == 0x000020, "Wrong size on NetSocket_SetCipherMode");
static_assert(offsetof(NetSocket_SetCipherMode, Mode) == 0x000000, "Member 'NetSocket_SetCipherMode::Mode' has a wrong offset!");
static_assert(offsetof(NetSocket_SetCipherMode, Key) == 0x000008, "Member 'NetSocket_SetCipherMode::Key' has a wrong offset!");
static_assert(offsetof(NetSocket_SetCipherMode, ReturnValue) == 0x000018, "Member 'NetSocket_SetCipherMode::ReturnValue' has a wrong offset!");

// Function NetCommon.NetSocket.SetHeader
// 0x0048 (0x0048 - 0x0000)
struct NetSocket_SetHeader final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 marker;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Version;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Platform;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserID;                                            // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetSocket*                             ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSocket_SetHeader) == 0x000008, "Wrong alignment on NetSocket_SetHeader");
static_assert(sizeof(NetSocket_SetHeader) == 0x000048, "Wrong size on NetSocket_SetHeader");
static_assert(offsetof(NetSocket_SetHeader, WorldContextObject) == 0x000000, "Member 'NetSocket_SetHeader::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NetSocket_SetHeader, marker) == 0x000008, "Member 'NetSocket_SetHeader::marker' has a wrong offset!");
static_assert(offsetof(NetSocket_SetHeader, Version) == 0x000018, "Member 'NetSocket_SetHeader::Version' has a wrong offset!");
static_assert(offsetof(NetSocket_SetHeader, Platform) == 0x000028, "Member 'NetSocket_SetHeader::Platform' has a wrong offset!");
static_assert(offsetof(NetSocket_SetHeader, UserID) == 0x000030, "Member 'NetSocket_SetHeader::UserID' has a wrong offset!");
static_assert(offsetof(NetSocket_SetHeader, ReturnValue) == 0x000040, "Member 'NetSocket_SetHeader::ReturnValue' has a wrong offset!");

// Function NetCommon.NetSocket.SetUseTickReceive
// 0x0010 (0x0010 - 0x0000)
struct NetSocket_SetUseTickReceive final
{
public:
	bool                                          use;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNetSocket*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSocket_SetUseTickReceive) == 0x000008, "Wrong alignment on NetSocket_SetUseTickReceive");
static_assert(sizeof(NetSocket_SetUseTickReceive) == 0x000010, "Wrong size on NetSocket_SetUseTickReceive");
static_assert(offsetof(NetSocket_SetUseTickReceive, use) == 0x000000, "Member 'NetSocket_SetUseTickReceive::use' has a wrong offset!");
static_assert(offsetof(NetSocket_SetUseTickReceive, ReturnValue) == 0x000008, "Member 'NetSocket_SetUseTickReceive::ReturnValue' has a wrong offset!");

// Function NetCommon.NetSocketEvent.Create
// 0x0010 (0x0010 - 0x0000)
struct NetSocketEvent_Create final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetSocketEvent*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSocketEvent_Create) == 0x000008, "Wrong alignment on NetSocketEvent_Create");
static_assert(sizeof(NetSocketEvent_Create) == 0x000010, "Wrong size on NetSocketEvent_Create");
static_assert(offsetof(NetSocketEvent_Create, WorldContextObject) == 0x000000, "Member 'NetSocketEvent_Create::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NetSocketEvent_Create, ReturnValue) == 0x000008, "Member 'NetSocketEvent_Create::ReturnValue' has a wrong offset!");

// Function NetCommon.NetSocketEvent.GetData
// 0x0008 (0x0008 - 0x0000)
struct NetSocketEvent_GetData final
{
public:
	class UNetMessage*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSocketEvent_GetData) == 0x000008, "Wrong alignment on NetSocketEvent_GetData");
static_assert(sizeof(NetSocketEvent_GetData) == 0x000008, "Wrong size on NetSocketEvent_GetData");
static_assert(offsetof(NetSocketEvent_GetData, ReturnValue) == 0x000000, "Member 'NetSocketEvent_GetData::ReturnValue' has a wrong offset!");

// Function NetCommon.NetSocketEvent.GetEventID
// 0x0001 (0x0001 - 0x0000)
struct NetSocketEvent_GetEventID final
{
public:
	ENetSocketEventID                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSocketEvent_GetEventID) == 0x000001, "Wrong alignment on NetSocketEvent_GetEventID");
static_assert(sizeof(NetSocketEvent_GetEventID) == 0x000001, "Wrong size on NetSocketEvent_GetEventID");
static_assert(offsetof(NetSocketEvent_GetEventID, ReturnValue) == 0x000000, "Member 'NetSocketEvent_GetEventID::ReturnValue' has a wrong offset!");

}

