#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTD_AJBLockEvent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTD_AJBLockEvent.BTD_AJBLockEvent_C
// 0x0018 (0x00B8 - 0x00A0)
class UBTD_AJBLockEvent_C final : public UBTDecorator_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(Transient, DuplicateTransient)
	struct FGameplayTag                           EventTag;                                          // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash)
	class AEventTagLocker*                        EventTagLocker;                                    // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BTD_AJBLockEvent(int32 EntryPoint);
	void ReceiveExecutionFinishAI(class AAIController* OwnerController, class APawn* ControlledPawn, EBTNodeResult NodeResult);
	void ReceiveExecutionStartAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	bool PerformConditionCheckAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTD_AJBLockEvent_C">();
	}
	static class UBTD_AJBLockEvent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTD_AJBLockEvent_C>();
	}
};
static_assert(alignof(UBTD_AJBLockEvent_C) == 0x000008, "Wrong alignment on UBTD_AJBLockEvent_C");
static_assert(sizeof(UBTD_AJBLockEvent_C) == 0x0000B8, "Wrong size on UBTD_AJBLockEvent_C");
static_assert(offsetof(UBTD_AJBLockEvent_C, UberGraphFrame) == 0x0000A0, "Member 'UBTD_AJBLockEvent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTD_AJBLockEvent_C, EventTag) == 0x0000A8, "Member 'UBTD_AJBLockEvent_C::EventTag' has a wrong offset!");
static_assert(offsetof(UBTD_AJBLockEvent_C, EventTagLocker) == 0x0000B0, "Member 'UBTD_AJBLockEvent_C::EventTagLocker' has a wrong offset!");

}

