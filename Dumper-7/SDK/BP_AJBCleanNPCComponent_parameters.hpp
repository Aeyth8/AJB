#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBCleanNPCComponent

#include "Basic.hpp"

#include "E_AJBInGamePvE_GamePhase_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_AJBCleanNPCComponent.BP_AJBCleanNPCComponent_C.ExecuteUbergraph_BP_AJBCleanNPCComponent
// 0x0060 (0x0060 - 0x0000)
struct BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsTimerPaused_IsPaused;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UActorComponent*                        K2Node_Event_Component;                            // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bReset;                               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAlive_IsAlive;                          // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSeparating_ReturnValue;                 // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNotAccompany_ReturnValue;               // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNPC_ReturnValue;                        // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character1;     // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x004C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          CallFunc_RequestParticleEffectOnLocal_ParticleEffect; // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent) == 0x000008, "Wrong alignment on BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent");
static_assert(sizeof(BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent) == 0x000060, "Wrong size on BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent, EntryPoint) == 0x000000, "Member 'BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent, CallFunc_IsTimerPaused_IsPaused) == 0x000004, "Member 'BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent::CallFunc_IsTimerPaused_IsPaused' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000010, "Member 'BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent, K2Node_Event_Component) == 0x000020, "Member 'BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent::K2Node_Event_Component' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent, K2Node_Event_bReset) == 0x000028, "Member 'BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent::K2Node_Event_bReset' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent, CallFunc_IsAlive_IsAlive) == 0x000029, "Member 'BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent::CallFunc_IsAlive_IsAlive' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent, CallFunc_IsValid_ReturnValue) == 0x00002A, "Member 'BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent, CallFunc_IsSeparating_ReturnValue) == 0x00002B, "Member 'BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent::CallFunc_IsSeparating_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00002C, "Member 'BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent, CallFunc_Not_PreBool_ReturnValue) == 0x00002D, "Member 'BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent, CallFunc_IsNotAccompany_ReturnValue) == 0x00002E, "Member 'BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent::CallFunc_IsNotAccompany_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent, CallFunc_IsValid_ReturnValue1) == 0x00002F, "Member 'BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent, CallFunc_BooleanAND_ReturnValue) == 0x000030, "Member 'BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent, CallFunc_BooleanAND_ReturnValue1) == 0x000031, "Member 'BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent, CallFunc_IsNPC_ReturnValue) == 0x000032, "Member 'BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent::CallFunc_IsNPC_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent, CallFunc_GetOwner_ReturnValue1) == 0x000038, "Member 'BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent, K2Node_DynamicCast_AsBP_AJBIn_Game_Character1) == 0x000040, "Member 'BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent::K2Node_DynamicCast_AsBP_AJBIn_Game_Character1' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent, K2Node_DynamicCast_bSuccess1) == 0x000048, "Member 'BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00004C, "Member 'BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent, CallFunc_RequestParticleEffectOnLocal_ParticleEffect) == 0x000058, "Member 'BP_AJBCleanNPCComponent_C_ExecuteUbergraph_BP_AJBCleanNPCComponent::CallFunc_RequestParticleEffectOnLocal_ParticleEffect' has a wrong offset!");

// Function BP_AJBCleanNPCComponent.BP_AJBCleanNPCComponent_C.OnActivated
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBCleanNPCComponent_C_OnActivated final
{
public:
	class UActorComponent*                        Component;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bReset;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBCleanNPCComponent_C_OnActivated) == 0x000008, "Wrong alignment on BP_AJBCleanNPCComponent_C_OnActivated");
static_assert(sizeof(BP_AJBCleanNPCComponent_C_OnActivated) == 0x000010, "Wrong size on BP_AJBCleanNPCComponent_C_OnActivated");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_OnActivated, Component) == 0x000000, "Member 'BP_AJBCleanNPCComponent_C_OnActivated::Component' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_OnActivated, bReset) == 0x000008, "Member 'BP_AJBCleanNPCComponent_C_OnActivated::bReset' has a wrong offset!");

// Function BP_AJBCleanNPCComponent.BP_AJBCleanNPCComponent_C.IsBlockedToExpiredEvent
// 0x0006 (0x0006 - 0x0000)
struct BP_AJBCleanNPCComponent_C_IsBlockedToExpiredEvent final
{
public:
	bool                                          IsBlocked;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp;                                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_AJBInGamePvE_GamePhase                      CallFunc_GetPvECurrentPhase_CurrentPhase;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsBlockedToExpiredEvent_IsBlocked;        // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBCleanNPCComponent_C_IsBlockedToExpiredEvent) == 0x000001, "Wrong alignment on BP_AJBCleanNPCComponent_C_IsBlockedToExpiredEvent");
static_assert(sizeof(BP_AJBCleanNPCComponent_C_IsBlockedToExpiredEvent) == 0x000006, "Wrong size on BP_AJBCleanNPCComponent_C_IsBlockedToExpiredEvent");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_IsBlockedToExpiredEvent, IsBlocked) == 0x000000, "Member 'BP_AJBCleanNPCComponent_C_IsBlockedToExpiredEvent::IsBlocked' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_IsBlockedToExpiredEvent, Temp) == 0x000001, "Member 'BP_AJBCleanNPCComponent_C_IsBlockedToExpiredEvent::Temp' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_IsBlockedToExpiredEvent, CallFunc_GetPvECurrentPhase_CurrentPhase) == 0x000002, "Member 'BP_AJBCleanNPCComponent_C_IsBlockedToExpiredEvent::CallFunc_GetPvECurrentPhase_CurrentPhase' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_IsBlockedToExpiredEvent, CallFunc_IsBlockedToExpiredEvent_IsBlocked) == 0x000003, "Member 'BP_AJBCleanNPCComponent_C_IsBlockedToExpiredEvent::CallFunc_IsBlockedToExpiredEvent_IsBlocked' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_IsBlockedToExpiredEvent, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000004, "Member 'BP_AJBCleanNPCComponent_C_IsBlockedToExpiredEvent::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_IsBlockedToExpiredEvent, CallFunc_BooleanOR_ReturnValue) == 0x000005, "Member 'BP_AJBCleanNPCComponent_C_IsBlockedToExpiredEvent::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_AJBCleanNPCComponent.BP_AJBCleanNPCComponent_C.IsTimerPaused
// 0x0030 (0x0030 - 0x0000)
struct BP_AJBCleanNPCComponent_C_IsTimerPaused final
{
public:
	bool                                          IsPaused;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp;                                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsTimerPaused_IsPaused;                   // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Montage_IsPlaying_ReturnValue;            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFalling_ReturnValue;                    // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue1;                   // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue2;                   // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBCleanNPCComponent_C_IsTimerPaused) == 0x000008, "Wrong alignment on BP_AJBCleanNPCComponent_C_IsTimerPaused");
static_assert(sizeof(BP_AJBCleanNPCComponent_C_IsTimerPaused) == 0x000030, "Wrong size on BP_AJBCleanNPCComponent_C_IsTimerPaused");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_IsTimerPaused, IsPaused) == 0x000000, "Member 'BP_AJBCleanNPCComponent_C_IsTimerPaused::IsPaused' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_IsTimerPaused, Temp) == 0x000001, "Member 'BP_AJBCleanNPCComponent_C_IsTimerPaused::Temp' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_IsTimerPaused, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBCleanNPCComponent_C_IsTimerPaused::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_IsTimerPaused, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000010, "Member 'BP_AJBCleanNPCComponent_C_IsTimerPaused::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_IsTimerPaused, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AJBCleanNPCComponent_C_IsTimerPaused::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_IsTimerPaused, CallFunc_IsTimerPaused_IsPaused) == 0x000019, "Member 'BP_AJBCleanNPCComponent_C_IsTimerPaused::CallFunc_IsTimerPaused_IsPaused' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_IsTimerPaused, CallFunc_BooleanOR_ReturnValue) == 0x00001A, "Member 'BP_AJBCleanNPCComponent_C_IsTimerPaused::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_IsTimerPaused, CallFunc_GetAnimInstance_ReturnValue) == 0x000020, "Member 'BP_AJBCleanNPCComponent_C_IsTimerPaused::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_IsTimerPaused, CallFunc_Montage_IsPlaying_ReturnValue) == 0x000028, "Member 'BP_AJBCleanNPCComponent_C_IsTimerPaused::CallFunc_Montage_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_IsTimerPaused, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000029, "Member 'BP_AJBCleanNPCComponent_C_IsTimerPaused::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_IsTimerPaused, CallFunc_IsFalling_ReturnValue) == 0x00002A, "Member 'BP_AJBCleanNPCComponent_C_IsTimerPaused::CallFunc_IsFalling_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_IsTimerPaused, CallFunc_BooleanOR_ReturnValue1) == 0x00002B, "Member 'BP_AJBCleanNPCComponent_C_IsTimerPaused::CallFunc_BooleanOR_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBCleanNPCComponent_C_IsTimerPaused, CallFunc_BooleanOR_ReturnValue2) == 0x00002C, "Member 'BP_AJBCleanNPCComponent_C_IsTimerPaused::CallFunc_BooleanOR_ReturnValue2' has a wrong offset!");

}

