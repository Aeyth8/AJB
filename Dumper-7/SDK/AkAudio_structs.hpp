#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AkAudio

#include "Basic.hpp"

#include "MovieScene_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum AkAudio.EAkCallbackType
// NumValues: 0x000E
enum class EAkCallbackType : uint8
{
	EndOfEvent                               = 0,
	Marker                                   = 2,
	Duration                                 = 3,
	Starvation                               = 5,
	MusicPlayStarted                         = 7,
	MusicSyncBeat                            = 8,
	MusicSyncBar                             = 9,
	MusicSyncEntry                           = 10,
	MusicSyncExit                            = 11,
	MusicSyncGrid                            = 12,
	MusicSyncUserCue                         = 13,
	MusicSyncPoint                           = 14,
	MIDIEvent                                = 16,
	EAkCallbackType_MAX                      = 17,
};

// Enum AkAudio.EAkResult
// NumValues: 0x005B
enum class EAkResult : uint8
{
	NotImplemented                           = 0,
	Success                                  = 1,
	Fail                                     = 2,
	PartialSuccess                           = 3,
	NotCompatible                            = 4,
	AlreadyConnected                         = 5,
	NameNotSet                               = 6,
	InvalidFile                              = 7,
	AudioFileHeaderTooLarge                  = 8,
	MaxReached                               = 9,
	InputsInUsed                             = 10,
	OutputsInUsed                            = 11,
	InvalidName                              = 12,
	NameAlreadyInUse                         = 13,
	InvalidID                                = 14,
	IDNotFound                               = 15,
	InvalidInstanceID                        = 16,
	NoMoreData                               = 17,
	NoSourceAvailable                        = 18,
	StateGroupAlreadyExists                  = 19,
	InvalidStateGroup                        = 20,
	ChildAlreadyHasAParent                   = 21,
	InvalidLanguage                          = 22,
	CannotAddItseflAsAChild                  = 23,
	Reserved1                                = 24,
	Reserved2                                = 25,
	Reserved3                                = 26,
	Reserved4                                = 27,
	Reserved5                                = 28,
	UserNotInList                            = 29,
	NoTransitionPoint                        = 30,
	InvalidParameter                         = 31,
	ParameterAdjusted                        = 32,
	IsA3DSound                               = 33,
	NotA3DSound                              = 34,
	ElementAlreadyInList                     = 35,
	PathNotFound                             = 36,
	PathNoVertices                           = 37,
	PathNotRunning                           = 38,
	PathNotPaused                            = 39,
	PathNodeAlreadyInList                    = 40,
	PathNodeNotInList                        = 41,
	VoiceNotFound                            = 42,
	DataNeeded                               = 43,
	NoDataNeeded                             = 44,
	DataReady                                = 45,
	NoDataReady                              = 46,
	NoMoreSlotAvailable                      = 47,
	SlotNotFound                             = 48,
	ProcessingOnly                           = 49,
	MemoryLeak                               = 50,
	CorruptedBlockList                       = 51,
	InsufficientMemory                       = 52,
	Cancelled                                = 53,
	UnknownBankID                            = 54,
	IsProcessing                             = 55,
	BankReadError                            = 56,
	InvalidSwitchType                        = 57,
	VoiceDone                                = 58,
	UnknownEnvironment                       = 59,
	EnvironmentInUse                         = 60,
	UnknownObject                            = 61,
	NoConversionNeeded                       = 62,
	FormatNotReady                           = 63,
	WrongBankVersion                         = 64,
	DataReadyNoProcess                       = 65,
	FileNotFound                             = 66,
	DeviceNotReady                           = 67,
	CouldNotCreateSecBuffer                  = 68,
	BankAlreadyLoaded                        = 69,
	Reserved6                                = 70,
	RenderedFX                               = 71,
	ProcessNeeded                            = 72,
	ProcessDone                              = 73,
	MemManagerNotInitialized                 = 74,
	StreamMgrNotInitialized                  = 75,
	SSEInstructionsNotSupported              = 76,
	Busy                                     = 77,
	UnsupportedChannelConfig                 = 78,
	PluginMediaNotAvailable                  = 79,
	MustBeVirtualized                        = 80,
	CommandTooLarge                          = 81,
	RejectedByFilter                         = 82,
	InvalidCustomPlatformName                = 83,
	DLLCannotLoad                            = 84,
	DLLPathNotFound                          = 85,
	NoJavaVM                                 = 86,
	OpenSLError                              = 87,
	PluginNotRegistered                      = 88,
	DataAlignmentError                       = 89,
	EAkResult_MAX                            = 90,
};

// Enum AkAudio.EReflectionFilterBits
// NumValues: 0x0004
enum class EReflectionFilterBits : uint8
{
	Wall                                     = 0,
	Ceiling                                  = 1,
	Floor                                    = 2,
	EReflectionFilterBits_MAX                = 3,
};

// Enum AkAudio.EAkMidiCcValues
// NumValues: 0x0062
enum class EAkMidiCcValues : uint8
{
	AkMidiCcBankSelectCoarse                 = 0,
	AkMidiCcModWheelCoarse                   = 1,
	AkMidiCcBreathCtrlCoarse                 = 2,
	AkMidiCcCtrl3Coarse                      = 3,
	AkMidiCcFootPedalCoarse                  = 4,
	AkMidiCcPortamentoCoarse                 = 5,
	AkMidiCcDataEntryCoarse                  = 6,
	AkMidiCcVolumeCoarse                     = 7,
	AkMidiCcBalanceCoarse                    = 8,
	AkMidiCcCtrl9Coarse                      = 9,
	AkMidiCcPanPositionCoarse                = 10,
	AkMidiCcExpressionCoarse                 = 11,
	AkMidiCcEffectCtrl1Coarse                = 12,
	AkMidiCcEffectCtrl2Coarse                = 13,
	AkMidiCcCtrl14Coarse                     = 14,
	AkMidiCcCtrl15Coarse                     = 15,
	AkMidiCcGenSlider1                       = 16,
	AkMidiCcGenSlider2                       = 17,
	AkMidiCcGenSlider3                       = 18,
	AkMidiCcGenSlider4                       = 19,
	AkMidiCcCtrl20Coarse                     = 20,
	AkMidiCcCtrl21Coarse                     = 21,
	AkMidiCcCtrl22Coarse                     = 22,
	AkMidiCcCtrl23Coarse                     = 23,
	AkMidiCcCtrl24Coarse                     = 24,
	AkMidiCcCtrl25Coarse                     = 25,
	AkMidiCcCtrl26Coarse                     = 26,
	AkMidiCcCtrl27Coarse                     = 27,
	AkMidiCcCtrl28Coarse                     = 28,
	AkMidiCcCtrl29Coarse                     = 29,
	AkMidiCcCtrl30Coarse                     = 30,
	AkMidiCcCtrl31Coarse                     = 31,
	AkMidiCcBankSelectFine                   = 32,
	AkMidiCcModWheelFine                     = 33,
	AkMidiCcBreathCtrlFine                   = 34,
	AkMidiCcCtrl3Fine                        = 35,
	AkMidiCcFootPedalFine                    = 36,
	AkMidiCcPortamentoFine                   = 37,
	AkMidiCcDataEntryFine                    = 38,
	AkMidiCcVolumeFine                       = 39,
	AkMidiCcBalanceFine                      = 40,
	AkMidiCcCtrl9Fine                        = 41,
	AkMidiCcPanPositionFine                  = 42,
	AkMidiCcExpressionFine                   = 43,
	AkMidiCcEffectCtrl1Fine                  = 44,
	AkMidiCcEffectCtrl2Fine                  = 45,
	AkMidiCcCtrl14Fine                       = 46,
	AkMidiCcCtrl15Fine                       = 47,
	AkMidiCcCtrl20Fine                       = 52,
	AkMidiCcCtrl21Fine                       = 53,
	AkMidiCcCtrl22Fine                       = 54,
	AkMidiCcCtrl23Fine                       = 55,
	AkMidiCcCtrl24Fine                       = 56,
	AkMidiCcCtrl25Fine                       = 57,
	AkMidiCcCtrl26Fine                       = 58,
	AkMidiCcCtrl27Fine                       = 59,
	AkMidiCcCtrl28Fine                       = 60,
	AkMidiCcCtrl29Fine                       = 61,
	AkMidiCcCtrl30Fine                       = 62,
	AkMidiCcCtrl31Fine                       = 63,
	AkMidiCcHoldPedal                        = 64,
	AkMidiCcPortamentoOnOff                  = 65,
	AkMidiCcSustenutoPedal                   = 66,
	AkMidiCcSoftPedal                        = 67,
	AkMidiCcLegatoPedal                      = 68,
	AkMidiCcHoldPedal2                       = 69,
	AkMidiCcSoundVariation                   = 70,
	AkMidiCcSoundTimbre                      = 71,
	AkMidiCcSoundReleaseTime                 = 72,
	AkMidiCcSoundAttackTime                  = 73,
	AkMidiCcSoundBrightness                  = 74,
	AkMidiCcSoundCtrl6                       = 75,
	AkMidiCcSoundCtrl7                       = 76,
	AkMidiCcSoundCtrl8                       = 77,
	AkMidiCcSoundCtrl9                       = 78,
	AkMidiCcSoundCtrl10                      = 79,
	AkMidiCcGeneralButton1                   = 80,
	AkMidiCcGeneralButton2                   = 81,
	AkMidiCcGeneralButton3                   = 82,
	AkMidiCcGeneralButton4                   = 83,
	AkMidiCcReverbLevel                      = 91,
	AkMidiCcTremoloLevel                     = 92,
	AkMidiCcChorusLevel                      = 93,
	AkMidiCcCelesteLevel                     = 94,
	AkMidiCcPhaserLevel                      = 95,
	AkMidiCcDataButtonP1                     = 96,
	AkMidiCcDataButtonM1                     = 97,
	AkMidiCcNonRegisterCoarse                = 98,
	AkMidiCcNonRegisterFine                  = 99,
	AkMidiCcAllSoundOff                      = 120,
	AkMidiCcAllControllersOff                = 121,
	AkMidiCcLocalKeyboard                    = 122,
	AkMidiCcAllNotesOff                      = 123,
	AkMidiCcOmniModeOff                      = 124,
	AkMidiCcOmniModeOn                       = 125,
	AkMidiCcOmniMonophonicOn                 = 126,
	AkMidiCcOmniPolyphonicOn                 = 127,
	EAkMidiCcValues_MAX                      = 128,
};

// Enum AkAudio.EAkMidiEventType
// NumValues: 0x000C
enum class EAkMidiEventType : uint8
{
	AkMidiEventTypeInvalid                   = 0,
	AkMidiEventTypeNoteOff                   = 128,
	AkMidiEventTypeNoteOn                    = 144,
	AkMidiEventTypeNoteAftertouch            = 160,
	AkMidiEventTypeController                = 176,
	AkMidiEventTypeProgramChange             = 192,
	AkMidiEventTypeChannelAftertouch         = 208,
	AkMidiEventTypePitchBend                 = 224,
	AkMidiEventTypeSysex                     = 240,
	AkMidiEventTypeEscape                    = 247,
	AkMidiEventTypeMeta                      = 255,
	EAkMidiEventType_MAX                     = 256,
};

// Enum AkAudio.EAkCurveInterpolation
// NumValues: 0x000C
enum class EAkCurveInterpolation : uint8
{
	Log3                                     = 0,
	Sine                                     = 1,
	Log1                                     = 2,
	InvSCurve                                = 3,
	Linear                                   = 4,
	SCurve                                   = 5,
	Exp1                                     = 6,
	SineRecip                                = 7,
	Exp3                                     = 8,
	LastFadeCurve                            = 8,
	Constant                                 = 9,
	EAkCurveInterpolation_MAX                = 10,
};

// Enum AkAudio.AkActionOnEventType
// NumValues: 0x0006
enum class EAkActionOnEventType : uint8
{
	Stop                                     = 0,
	Pause                                    = 1,
	Resume                                   = 2,
	Break                                    = 3,
	ReleaseEnvelope                          = 4,
	AkActionOnEventType_MAX                  = 5,
};

// Enum AkAudio.AkMultiPositionType
// NumValues: 0x0004
enum class EAkMultiPositionType : uint8
{
	SingleSource                             = 0,
	MultiSources                             = 1,
	MultiDirections                          = 2,
	AkMultiPositionType_MAX                  = 3,
};

// Enum AkAudio.AkChannelConfiguration
// NumValues: 0x0017
enum class EAkChannelConfiguration : uint8
{
	Ak_Parent                                = 0,
	Ak_LFE                                   = 1,
	Ak_1_0                                   = 2,
	Ak_2_0                                   = 3,
	Ak_2_1                                   = 4,
	Ak_3_0                                   = 5,
	Ak_3_1                                   = 6,
	Ak_4_0                                   = 7,
	Ak_4_1                                   = 8,
	Ak_5_0                                   = 9,
	Ak_5_1                                   = 10,
	Ak_7_1                                   = 11,
	Ak_5_1_2                                 = 12,
	Ak_7_1_2                                 = 13,
	Ak_7_1_4                                 = 14,
	Ak_Auro_9_1                              = 15,
	Ak_Auro_10_1                             = 16,
	Ak_Auro_11_1                             = 17,
	Ak_Auro_13_1                             = 18,
	Ak_Ambisonics_1st_order                  = 19,
	Ak_Ambisonics_2nd_order                  = 20,
	Ak_Ambisonics_3rd_order                  = 21,
	Ak_MAX                                   = 22,
};

// Enum AkAudio.AkAcousticPortalState
// NumValues: 0x0003
enum class EAkAcousticPortalState : uint8
{
	Closed                                   = 0,
	Open                                     = 1,
	AkAcousticPortalState_MAX                = 2,
};

// Enum AkAudio.PanningRule
// NumValues: 0x0003
enum class EPanningRule : uint8
{
	PanningRule_Speakers                     = 0,
	PanningRule_Headphones                   = 1,
	PanningRule_MAX                          = 2,
};

// ScriptStruct AkAudio.AKWaapiJsonObject
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FAKWaapiJsonObject final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAKWaapiJsonObject) == 0x000008, "Wrong alignment on FAKWaapiJsonObject");
static_assert(sizeof(FAKWaapiJsonObject) == 0x000010, "Wrong size on FAKWaapiJsonObject");

// ScriptStruct AkAudio.AkMidiEventBase
// 0x0002 (0x0002 - 0x0000)
struct FAkMidiEventBase
{
public:
	EAkMidiEventType                              Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Chan;                                              // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAkMidiEventBase) == 0x000001, "Wrong alignment on FAkMidiEventBase");
static_assert(sizeof(FAkMidiEventBase) == 0x000002, "Wrong size on FAkMidiEventBase");
static_assert(offsetof(FAkMidiEventBase, Type) == 0x000000, "Member 'FAkMidiEventBase::Type' has a wrong offset!");
static_assert(offsetof(FAkMidiEventBase, Chan) == 0x000001, "Member 'FAkMidiEventBase::Chan' has a wrong offset!");

// ScriptStruct AkAudio.AkMidiNoteAftertouch
// 0x0002 (0x0004 - 0x0002)
struct FAkMidiNoteAftertouch final : public FAkMidiEventBase
{
public:
	uint8                                         Note;                                              // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Value;                                             // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAkMidiNoteAftertouch) == 0x000001, "Wrong alignment on FAkMidiNoteAftertouch");
static_assert(sizeof(FAkMidiNoteAftertouch) == 0x000004, "Wrong size on FAkMidiNoteAftertouch");
static_assert(offsetof(FAkMidiNoteAftertouch, Note) == 0x000002, "Member 'FAkMidiNoteAftertouch::Note' has a wrong offset!");
static_assert(offsetof(FAkMidiNoteAftertouch, Value) == 0x000003, "Member 'FAkMidiNoteAftertouch::Value' has a wrong offset!");

// ScriptStruct AkAudio.AkWaapiSubscriptionId
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FAkWaapiSubscriptionId final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAkWaapiSubscriptionId) == 0x000008, "Wrong alignment on FAkWaapiSubscriptionId");
static_assert(sizeof(FAkWaapiSubscriptionId) == 0x000008, "Wrong size on FAkWaapiSubscriptionId");

// ScriptStruct AkAudio.AkMidiProgramChange
// 0x0001 (0x0003 - 0x0002)
struct FAkMidiProgramChange final : public FAkMidiEventBase
{
public:
	uint8                                         ProgramNum;                                        // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAkMidiProgramChange) == 0x000001, "Wrong alignment on FAkMidiProgramChange");
static_assert(sizeof(FAkMidiProgramChange) == 0x000003, "Wrong size on FAkMidiProgramChange");
static_assert(offsetof(FAkMidiProgramChange, ProgramNum) == 0x000002, "Member 'FAkMidiProgramChange::ProgramNum' has a wrong offset!");

// ScriptStruct AkAudio.MovieSceneAkAudioEventTemplate
// 0x0008 (0x0028 - 0x0020)
struct FMovieSceneAkAudioEventTemplate final : public FMovieSceneEvalTemplate
{
public:
	class UMovieSceneAkAudioEventSection*         Section;                                           // 0x0020(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneAkAudioEventTemplate) == 0x000008, "Wrong alignment on FMovieSceneAkAudioEventTemplate");
static_assert(sizeof(FMovieSceneAkAudioEventTemplate) == 0x000028, "Wrong size on FMovieSceneAkAudioEventTemplate");
static_assert(offsetof(FMovieSceneAkAudioEventTemplate, Section) == 0x000020, "Member 'FMovieSceneAkAudioEventTemplate::Section' has a wrong offset!");

// ScriptStruct AkAudio.AkAmbSoundCheckpointRecord
// 0x0001 (0x0001 - 0x0000)
struct FAkAmbSoundCheckpointRecord final
{
public:
	bool                                          bCurrentlyPlaying;                                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAkAmbSoundCheckpointRecord) == 0x000001, "Wrong alignment on FAkAmbSoundCheckpointRecord");
static_assert(sizeof(FAkAmbSoundCheckpointRecord) == 0x000001, "Wrong size on FAkAmbSoundCheckpointRecord");
static_assert(offsetof(FAkAmbSoundCheckpointRecord, bCurrentlyPlaying) == 0x000000, "Member 'FAkAmbSoundCheckpointRecord::bCurrentlyPlaying' has a wrong offset!");

// ScriptStruct AkAudio.AkMidiChannelAftertouch
// 0x0001 (0x0003 - 0x0002)
struct FAkMidiChannelAftertouch final : public FAkMidiEventBase
{
public:
	uint8                                         Value;                                             // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAkMidiChannelAftertouch) == 0x000001, "Wrong alignment on FAkMidiChannelAftertouch");
static_assert(sizeof(FAkMidiChannelAftertouch) == 0x000003, "Wrong size on FAkMidiChannelAftertouch");
static_assert(offsetof(FAkMidiChannelAftertouch, Value) == 0x000002, "Member 'FAkMidiChannelAftertouch::Value' has a wrong offset!");

// ScriptStruct AkAudio.MovieSceneAkAudioRTPCTemplate
// 0x0008 (0x0028 - 0x0020)
struct FMovieSceneAkAudioRTPCTemplate final : public FMovieSceneEvalTemplate
{
public:
	class UMovieSceneAkAudioRTPCSection*          Section;                                           // 0x0020(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneAkAudioRTPCTemplate) == 0x000008, "Wrong alignment on FMovieSceneAkAudioRTPCTemplate");
static_assert(sizeof(FMovieSceneAkAudioRTPCTemplate) == 0x000028, "Wrong size on FMovieSceneAkAudioRTPCTemplate");
static_assert(offsetof(FMovieSceneAkAudioRTPCTemplate, Section) == 0x000020, "Member 'FMovieSceneAkAudioRTPCTemplate::Section' has a wrong offset!");

// ScriptStruct AkAudio.AkSegmentInfo
// 0x0024 (0x0024 - 0x0000)
struct FAkSegmentInfo final
{
public:
	int32                                         CurrentPosition;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreEntryDuration;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActiveDuration;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PostExitDuration;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainingLookAheadTime;                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BeatDuration;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BarDuration;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GridDuration;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GridOffset;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAkSegmentInfo) == 0x000004, "Wrong alignment on FAkSegmentInfo");
static_assert(sizeof(FAkSegmentInfo) == 0x000024, "Wrong size on FAkSegmentInfo");
static_assert(offsetof(FAkSegmentInfo, CurrentPosition) == 0x000000, "Member 'FAkSegmentInfo::CurrentPosition' has a wrong offset!");
static_assert(offsetof(FAkSegmentInfo, PreEntryDuration) == 0x000004, "Member 'FAkSegmentInfo::PreEntryDuration' has a wrong offset!");
static_assert(offsetof(FAkSegmentInfo, ActiveDuration) == 0x000008, "Member 'FAkSegmentInfo::ActiveDuration' has a wrong offset!");
static_assert(offsetof(FAkSegmentInfo, PostExitDuration) == 0x00000C, "Member 'FAkSegmentInfo::PostExitDuration' has a wrong offset!");
static_assert(offsetof(FAkSegmentInfo, RemainingLookAheadTime) == 0x000010, "Member 'FAkSegmentInfo::RemainingLookAheadTime' has a wrong offset!");
static_assert(offsetof(FAkSegmentInfo, BeatDuration) == 0x000014, "Member 'FAkSegmentInfo::BeatDuration' has a wrong offset!");
static_assert(offsetof(FAkSegmentInfo, BarDuration) == 0x000018, "Member 'FAkSegmentInfo::BarDuration' has a wrong offset!");
static_assert(offsetof(FAkSegmentInfo, GridDuration) == 0x00001C, "Member 'FAkSegmentInfo::GridDuration' has a wrong offset!");
static_assert(offsetof(FAkSegmentInfo, GridOffset) == 0x000020, "Member 'FAkSegmentInfo::GridOffset' has a wrong offset!");

// ScriptStruct AkAudio.AkMidiPitchBend
// 0x0006 (0x0008 - 0x0002)
struct FAkMidiPitchBend final : public FAkMidiEventBase
{
public:
	uint8                                         ValueLsb;                                          // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ValueMsb;                                          // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FullValue;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAkMidiPitchBend) == 0x000004, "Wrong alignment on FAkMidiPitchBend");
static_assert(sizeof(FAkMidiPitchBend) == 0x000008, "Wrong size on FAkMidiPitchBend");
static_assert(offsetof(FAkMidiPitchBend, ValueLsb) == 0x000002, "Member 'FAkMidiPitchBend::ValueLsb' has a wrong offset!");
static_assert(offsetof(FAkMidiPitchBend, ValueMsb) == 0x000003, "Member 'FAkMidiPitchBend::ValueMsb' has a wrong offset!");
static_assert(offsetof(FAkMidiPitchBend, FullValue) == 0x000004, "Member 'FAkMidiPitchBend::FullValue' has a wrong offset!");

// ScriptStruct AkAudio.AkMidiCc
// 0x0002 (0x0004 - 0x0002)
struct FAkMidiCc final : public FAkMidiEventBase
{
public:
	EAkMidiCcValues                               Cc;                                                // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Value;                                             // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAkMidiCc) == 0x000001, "Wrong alignment on FAkMidiCc");
static_assert(sizeof(FAkMidiCc) == 0x000004, "Wrong size on FAkMidiCc");
static_assert(offsetof(FAkMidiCc, Cc) == 0x000002, "Member 'FAkMidiCc::Cc' has a wrong offset!");
static_assert(offsetof(FAkMidiCc, Value) == 0x000003, "Member 'FAkMidiCc::Value' has a wrong offset!");

// ScriptStruct AkAudio.AkMidiNoteOnOff
// 0x0002 (0x0004 - 0x0002)
struct FAkMidiNoteOnOff final : public FAkMidiEventBase
{
public:
	uint8                                         Note;                                              // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Velocity;                                          // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAkMidiNoteOnOff) == 0x000001, "Wrong alignment on FAkMidiNoteOnOff");
static_assert(sizeof(FAkMidiNoteOnOff) == 0x000004, "Wrong size on FAkMidiNoteOnOff");
static_assert(offsetof(FAkMidiNoteOnOff, Note) == 0x000002, "Member 'FAkMidiNoteOnOff::Note' has a wrong offset!");
static_assert(offsetof(FAkMidiNoteOnOff, Velocity) == 0x000003, "Member 'FAkMidiNoteOnOff::Velocity' has a wrong offset!");

// ScriptStruct AkAudio.AkMidiGeneric
// 0x0002 (0x0004 - 0x0002)
struct FAkMidiGeneric final : public FAkMidiEventBase
{
public:
	uint8                                         Param1;                                            // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Param2;                                            // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAkMidiGeneric) == 0x000001, "Wrong alignment on FAkMidiGeneric");
static_assert(sizeof(FAkMidiGeneric) == 0x000004, "Wrong size on FAkMidiGeneric");
static_assert(offsetof(FAkMidiGeneric, Param1) == 0x000002, "Member 'FAkMidiGeneric::Param1' has a wrong offset!");
static_assert(offsetof(FAkMidiGeneric, Param2) == 0x000003, "Member 'FAkMidiGeneric::Param2' has a wrong offset!");

// ScriptStruct AkAudio.AkBoolPropertyToControl
// 0x0010 (0x0010 - 0x0000)
struct FAkBoolPropertyToControl final
{
public:
	class FString                                 ItemProperty;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAkBoolPropertyToControl) == 0x000008, "Wrong alignment on FAkBoolPropertyToControl");
static_assert(sizeof(FAkBoolPropertyToControl) == 0x000010, "Wrong size on FAkBoolPropertyToControl");
static_assert(offsetof(FAkBoolPropertyToControl, ItemProperty) == 0x000000, "Member 'FAkBoolPropertyToControl::ItemProperty' has a wrong offset!");

// ScriptStruct AkAudio.AkPropertyToControl
// 0x0010 (0x0010 - 0x0000)
struct FAkPropertyToControl final
{
public:
	class FString                                 ItemProperty;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAkPropertyToControl) == 0x000008, "Wrong alignment on FAkPropertyToControl");
static_assert(sizeof(FAkPropertyToControl) == 0x000010, "Wrong size on FAkPropertyToControl");
static_assert(offsetof(FAkPropertyToControl, ItemProperty) == 0x000000, "Member 'FAkPropertyToControl::ItemProperty' has a wrong offset!");

// ScriptStruct AkAudio.AkWwiseObjectDetails
// 0x0030 (0x0030 - 0x0000)
struct FAkWwiseObjectDetails final
{
public:
	class FString                                 ItemName;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemPath;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemId;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAkWwiseObjectDetails) == 0x000008, "Wrong alignment on FAkWwiseObjectDetails");
static_assert(sizeof(FAkWwiseObjectDetails) == 0x000030, "Wrong size on FAkWwiseObjectDetails");
static_assert(offsetof(FAkWwiseObjectDetails, ItemName) == 0x000000, "Member 'FAkWwiseObjectDetails::ItemName' has a wrong offset!");
static_assert(offsetof(FAkWwiseObjectDetails, ItemPath) == 0x000010, "Member 'FAkWwiseObjectDetails::ItemPath' has a wrong offset!");
static_assert(offsetof(FAkWwiseObjectDetails, ItemId) == 0x000020, "Member 'FAkWwiseObjectDetails::ItemId' has a wrong offset!");

// ScriptStruct AkAudio.AkWwiseItemToControl
// 0x0040 (0x0040 - 0x0000)
struct FAkWwiseItemToControl final
{
public:
	struct FAkWwiseObjectDetails                  ItemPicked;                                        // 0x0000(0x0030)(Edit, EditConst, NativeAccessSpecifierPublic)
	class FString                                 ItemPath;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAkWwiseItemToControl) == 0x000008, "Wrong alignment on FAkWwiseItemToControl");
static_assert(sizeof(FAkWwiseItemToControl) == 0x000040, "Wrong size on FAkWwiseItemToControl");
static_assert(offsetof(FAkWwiseItemToControl, ItemPicked) == 0x000000, "Member 'FAkWwiseItemToControl::ItemPicked' has a wrong offset!");
static_assert(offsetof(FAkWwiseItemToControl, ItemPath) == 0x000030, "Member 'FAkWwiseItemToControl::ItemPath' has a wrong offset!");

// ScriptStruct AkAudio.AkPoly
// 0x0010 (0x0010 - 0x0000)
struct FAkPoly final
{
public:
	class UAkAcousticTexture*                     Texture;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableSurface;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAkPoly) == 0x000008, "Wrong alignment on FAkPoly");
static_assert(sizeof(FAkPoly) == 0x000010, "Wrong size on FAkPoly");
static_assert(offsetof(FAkPoly, Texture) == 0x000000, "Member 'FAkPoly::Texture' has a wrong offset!");
static_assert(offsetof(FAkPoly, EnableSurface) == 0x000008, "Member 'FAkPoly::EnableSurface' has a wrong offset!");

// ScriptStruct AkAudio.AkWaapiFieldNames
// 0x0010 (0x0010 - 0x0000)
struct FAkWaapiFieldNames final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAkWaapiFieldNames) == 0x000008, "Wrong alignment on FAkWaapiFieldNames");
static_assert(sizeof(FAkWaapiFieldNames) == 0x000010, "Wrong size on FAkWaapiFieldNames");
static_assert(offsetof(FAkWaapiFieldNames, FieldName) == 0x000000, "Member 'FAkWaapiFieldNames::FieldName' has a wrong offset!");

// ScriptStruct AkAudio.AkWaapiUri
// 0x0010 (0x0010 - 0x0000)
struct FAkWaapiUri final
{
public:
	class FString                                 Uri;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAkWaapiUri) == 0x000008, "Wrong alignment on FAkWaapiUri");
static_assert(sizeof(FAkWaapiUri) == 0x000010, "Wrong size on FAkWaapiUri");
static_assert(offsetof(FAkWaapiUri, Uri) == 0x000000, "Member 'FAkWaapiUri::Uri' has a wrong offset!");

// ScriptStruct AkAudio.AkAudioEventTrackKey
// 0x0020 (0x0020 - 0x0000)
struct FAkAudioEventTrackKey final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          AkAudioEvent;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAkAudioEventTrackKey) == 0x000008, "Wrong alignment on FAkAudioEventTrackKey");
static_assert(sizeof(FAkAudioEventTrackKey) == 0x000020, "Wrong size on FAkAudioEventTrackKey");
static_assert(offsetof(FAkAudioEventTrackKey, Time) == 0x000000, "Member 'FAkAudioEventTrackKey::Time' has a wrong offset!");
static_assert(offsetof(FAkAudioEventTrackKey, AkAudioEvent) == 0x000008, "Member 'FAkAudioEventTrackKey::AkAudioEvent' has a wrong offset!");
static_assert(offsetof(FAkAudioEventTrackKey, EventName) == 0x000010, "Member 'FAkAudioEventTrackKey::EventName' has a wrong offset!");

// ScriptStruct AkAudio.MovieSceneTangentDataSerializationHelper
// 0x0014 (0x0014 - 0x0000)
struct FMovieSceneTangentDataSerializationHelper final
{
public:
	float                                         ArriveTangent;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeaveTangent;                                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERichCurveTangentWeightMode                   TangentWeightMode;                                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ArriveTangentWeight;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeaveTangentWeight;                                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneTangentDataSerializationHelper) == 0x000004, "Wrong alignment on FMovieSceneTangentDataSerializationHelper");
static_assert(sizeof(FMovieSceneTangentDataSerializationHelper) == 0x000014, "Wrong size on FMovieSceneTangentDataSerializationHelper");
static_assert(offsetof(FMovieSceneTangentDataSerializationHelper, ArriveTangent) == 0x000000, "Member 'FMovieSceneTangentDataSerializationHelper::ArriveTangent' has a wrong offset!");
static_assert(offsetof(FMovieSceneTangentDataSerializationHelper, LeaveTangent) == 0x000004, "Member 'FMovieSceneTangentDataSerializationHelper::LeaveTangent' has a wrong offset!");
static_assert(offsetof(FMovieSceneTangentDataSerializationHelper, TangentWeightMode) == 0x000008, "Member 'FMovieSceneTangentDataSerializationHelper::TangentWeightMode' has a wrong offset!");
static_assert(offsetof(FMovieSceneTangentDataSerializationHelper, ArriveTangentWeight) == 0x00000C, "Member 'FMovieSceneTangentDataSerializationHelper::ArriveTangentWeight' has a wrong offset!");
static_assert(offsetof(FMovieSceneTangentDataSerializationHelper, LeaveTangentWeight) == 0x000010, "Member 'FMovieSceneTangentDataSerializationHelper::LeaveTangentWeight' has a wrong offset!");

// ScriptStruct AkAudio.MovieSceneFloatValueSerializationHelper
// 0x001C (0x001C - 0x0000)
struct FMovieSceneFloatValueSerializationHelper final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERichCurveInterpMode                          InterpMode;                                        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERichCurveTangentMode                         TangentMode;                                       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneTangentDataSerializationHelper Tangent;                                        // 0x0008(0x0014)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneFloatValueSerializationHelper) == 0x000004, "Wrong alignment on FMovieSceneFloatValueSerializationHelper");
static_assert(sizeof(FMovieSceneFloatValueSerializationHelper) == 0x00001C, "Wrong size on FMovieSceneFloatValueSerializationHelper");
static_assert(offsetof(FMovieSceneFloatValueSerializationHelper, Value) == 0x000000, "Member 'FMovieSceneFloatValueSerializationHelper::Value' has a wrong offset!");
static_assert(offsetof(FMovieSceneFloatValueSerializationHelper, InterpMode) == 0x000004, "Member 'FMovieSceneFloatValueSerializationHelper::InterpMode' has a wrong offset!");
static_assert(offsetof(FMovieSceneFloatValueSerializationHelper, TangentMode) == 0x000005, "Member 'FMovieSceneFloatValueSerializationHelper::TangentMode' has a wrong offset!");
static_assert(offsetof(FMovieSceneFloatValueSerializationHelper, Tangent) == 0x000008, "Member 'FMovieSceneFloatValueSerializationHelper::Tangent' has a wrong offset!");

// ScriptStruct AkAudio.MovieSceneFloatChannelSerializationHelper
// 0x0030 (0x0030 - 0x0000)
struct FMovieSceneFloatChannelSerializationHelper final
{
public:
	ERichCurveExtrapolation                       PreInfinityExtrap;                                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERichCurveExtrapolation                       PostInfinityExtrap;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Times;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMovieSceneFloatValueSerializationHelper> Values;                                  // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         DefaultValue;                                      // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasDefaultValue;                                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneFloatChannelSerializationHelper) == 0x000008, "Wrong alignment on FMovieSceneFloatChannelSerializationHelper");
static_assert(sizeof(FMovieSceneFloatChannelSerializationHelper) == 0x000030, "Wrong size on FMovieSceneFloatChannelSerializationHelper");
static_assert(offsetof(FMovieSceneFloatChannelSerializationHelper, PreInfinityExtrap) == 0x000000, "Member 'FMovieSceneFloatChannelSerializationHelper::PreInfinityExtrap' has a wrong offset!");
static_assert(offsetof(FMovieSceneFloatChannelSerializationHelper, PostInfinityExtrap) == 0x000001, "Member 'FMovieSceneFloatChannelSerializationHelper::PostInfinityExtrap' has a wrong offset!");
static_assert(offsetof(FMovieSceneFloatChannelSerializationHelper, Times) == 0x000008, "Member 'FMovieSceneFloatChannelSerializationHelper::Times' has a wrong offset!");
static_assert(offsetof(FMovieSceneFloatChannelSerializationHelper, Values) == 0x000018, "Member 'FMovieSceneFloatChannelSerializationHelper::Values' has a wrong offset!");
static_assert(offsetof(FMovieSceneFloatChannelSerializationHelper, DefaultValue) == 0x000028, "Member 'FMovieSceneFloatChannelSerializationHelper::DefaultValue' has a wrong offset!");
static_assert(offsetof(FMovieSceneFloatChannelSerializationHelper, bHasDefaultValue) == 0x00002C, "Member 'FMovieSceneFloatChannelSerializationHelper::bHasDefaultValue' has a wrong offset!");

}

