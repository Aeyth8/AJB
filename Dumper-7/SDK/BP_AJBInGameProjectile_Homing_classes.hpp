#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameProjectile_Homing

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "AJB_structs.hpp"
#include "BP_AJBInGameProjectile_Straight_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBInGameProjectile_Homing.BP_AJBInGameProjectile_Homing_C
// 0x0078 (0x0550 - 0x04D8)
class ABP_AJBInGameProjectile_Homing_C : public ABP_AJBInGameProjectile_Straight_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBInGameProjectile_Homing_C;    // 0x04D8(0x0008)(Transient, DuplicateTransient)
	class USphereComponent*                       HomingDetectCollision;                             // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         HomingDetectionRadius_cm_;                         // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4EC[0x4];                                      // 0x04EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetCharacter;                                   // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           BeginHomingParticleTag;                            // 0x04F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         HomingSpeed;                                       // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_504[0x4];                                      // 0x0504(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           BeginHomingGionTag;                                // 0x0508(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         BeginHomingLength_cm_;                             // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HomingIntensity;                                   // 0x0514(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           BeginHomingSETag;                                  // 0x0518(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           BeginHomingVoiceTag;                               // 0x0520(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentHomingTime;                                 // 0x0528(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HomingTimeLimit_sec_;                              // 0x052C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         HomingTargets;                                     // 0x0530(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance)
	ESnakeBulletState                             HomingState;                                       // 0x0540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnabledBeginningQuickTurn;                       // 0x0541(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsHomingBoostEnabled;                              // 0x0542(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_543[0x1];                                      // 0x0543(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FirstHomingBoostDistance_cm_;                      // 0x0544(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FirstHomingBoostedIntencity;                       // 0x0548(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBInGameProjectile_Homing(int32 EntryPoint);
	void InitProjectileMotion();
	void UpdateProjectileMotion(float DeltaSeconds);
	void RemoveHomingTarget(const class AActor*& InputPin);
	void AddHomingTarget(const class AActor*& Target);
	void BndEvt__HomingDetectCollision_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__HomingDetectCollision_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void TickState_Homing(float DeltaSeconds);
	void TickState_AdditionalCheck(float DeltaSeconds);
	void TickState_HomingDetection(float DeltaSeconds);
	void TickState_Waiting(float DeltaSeconds);
	void StateTick(float DeltaSeconds);
	void BeginState_Homing(class AActor* Target);
	void BeginState_AdditionalCheck();
	void BeginState_HomingDetection();
	void BeginState_Waiting();
	void Run_BeginHomingEffect();
	void Play_BeginHomingVoice();
	void Play_BeginHomingGion();
	void Spawn_BeginHomingParticle();
	void IsNoObstacle(class AActor* Target, bool* IsNoObstacle_0);
	void UpdateHomigTimer(float DeltaSeconds);
	void ChangeState(ESnakeBulletState NewState);
	void SetHomingCollisionEnabled(bool IsEnabled);
	void IsHomingEnabled(bool* IsEnabled);
	void IsHomingTarget(class AActor* Target, bool* IsTarget);
	void GetHomingIntensity(float TargetDistance, float* HomingIntensity_0);
	void GetScaledSpeed(float* Speed_0);
	void ReceiveBeginPlay();
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);
	void ReceiveTick(float DeltaSeconds);
	void UserConstructionScript();
	void ShouldCheckRange(bool* bShouldCheckRange);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBInGameProjectile_Homing_C">();
	}
	static class ABP_AJBInGameProjectile_Homing_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBInGameProjectile_Homing_C>();
	}
};
static_assert(alignof(ABP_AJBInGameProjectile_Homing_C) == 0x000008, "Wrong alignment on ABP_AJBInGameProjectile_Homing_C");
static_assert(sizeof(ABP_AJBInGameProjectile_Homing_C) == 0x000550, "Wrong size on ABP_AJBInGameProjectile_Homing_C");
static_assert(offsetof(ABP_AJBInGameProjectile_Homing_C, UberGraphFrame_BP_AJBInGameProjectile_Homing_C) == 0x0004D8, "Member 'ABP_AJBInGameProjectile_Homing_C::UberGraphFrame_BP_AJBInGameProjectile_Homing_C' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Homing_C, HomingDetectCollision) == 0x0004E0, "Member 'ABP_AJBInGameProjectile_Homing_C::HomingDetectCollision' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Homing_C, HomingDetectionRadius_cm_) == 0x0004E8, "Member 'ABP_AJBInGameProjectile_Homing_C::HomingDetectionRadius_cm_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Homing_C, TargetCharacter) == 0x0004F0, "Member 'ABP_AJBInGameProjectile_Homing_C::TargetCharacter' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Homing_C, BeginHomingParticleTag) == 0x0004F8, "Member 'ABP_AJBInGameProjectile_Homing_C::BeginHomingParticleTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Homing_C, HomingSpeed) == 0x000500, "Member 'ABP_AJBInGameProjectile_Homing_C::HomingSpeed' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Homing_C, BeginHomingGionTag) == 0x000508, "Member 'ABP_AJBInGameProjectile_Homing_C::BeginHomingGionTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Homing_C, BeginHomingLength_cm_) == 0x000510, "Member 'ABP_AJBInGameProjectile_Homing_C::BeginHomingLength_cm_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Homing_C, HomingIntensity) == 0x000514, "Member 'ABP_AJBInGameProjectile_Homing_C::HomingIntensity' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Homing_C, BeginHomingSETag) == 0x000518, "Member 'ABP_AJBInGameProjectile_Homing_C::BeginHomingSETag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Homing_C, BeginHomingVoiceTag) == 0x000520, "Member 'ABP_AJBInGameProjectile_Homing_C::BeginHomingVoiceTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Homing_C, CurrentHomingTime) == 0x000528, "Member 'ABP_AJBInGameProjectile_Homing_C::CurrentHomingTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Homing_C, HomingTimeLimit_sec_) == 0x00052C, "Member 'ABP_AJBInGameProjectile_Homing_C::HomingTimeLimit_sec_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Homing_C, HomingTargets) == 0x000530, "Member 'ABP_AJBInGameProjectile_Homing_C::HomingTargets' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Homing_C, HomingState) == 0x000540, "Member 'ABP_AJBInGameProjectile_Homing_C::HomingState' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Homing_C, IsEnabledBeginningQuickTurn) == 0x000541, "Member 'ABP_AJBInGameProjectile_Homing_C::IsEnabledBeginningQuickTurn' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Homing_C, IsHomingBoostEnabled) == 0x000542, "Member 'ABP_AJBInGameProjectile_Homing_C::IsHomingBoostEnabled' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Homing_C, FirstHomingBoostDistance_cm_) == 0x000544, "Member 'ABP_AJBInGameProjectile_Homing_C::FirstHomingBoostDistance_cm_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Homing_C, FirstHomingBoostedIntencity) == 0x000548, "Member 'ABP_AJBInGameProjectile_Homing_C::FirstHomingBoostedIntencity' has a wrong offset!");

}

