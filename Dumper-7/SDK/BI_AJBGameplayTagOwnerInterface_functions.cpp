#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BI_AJBGameplayTagOwnerInterface

#include "Basic.hpp"

#include "BI_AJBGameplayTagOwnerInterface_classes.hpp"
#include "BI_AJBGameplayTagOwnerInterface_parameters.hpp"


namespace SDK
{

// Function BI_AJBGameplayTagOwnerInterface.BI_AJBGameplayTagOwnerInterface_C.AddGameplayTag
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              Tag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class UObject*                          Operator                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayTag&              CauserType                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   SerialNumber                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_AJBGameplayTagOwnerInterface_C::AddGameplayTag(const struct FGameplayTag& Tag, class UObject* Operator, class UObject* Target, const struct FGameplayTag& CauserType, int32 SerialNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BI_AJBGameplayTagOwnerInterface_C", "AddGameplayTag");

	Params::BI_AJBGameplayTagOwnerInterface_C_AddGameplayTag Parms{};

	Parms.Tag = std::move(Tag);
	Parms.Operator = Operator;
	Parms.Target = Target;
	Parms.CauserType = std::move(CauserType);
	Parms.SerialNumber = SerialNumber;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BI_AJBGameplayTagOwnerInterface.BI_AJBGameplayTagOwnerInterface_C.RemoveGameplayTag
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              Tag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void IBI_AJBGameplayTagOwnerInterface_C::RemoveGameplayTag(const struct FGameplayTag& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BI_AJBGameplayTagOwnerInterface_C", "RemoveGameplayTag");

	Params::BI_AJBGameplayTagOwnerInterface_C_RemoveGameplayTag Parms{};

	Parms.Tag = std::move(Tag);

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BI_AJBGameplayTagOwnerInterface.BI_AJBGameplayTagOwnerInterface_C.GetGameplayTags
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTagContainer*           TagContainerCopy                                       (Parm, OutParm)

void IBI_AJBGameplayTagOwnerInterface_C::GetGameplayTags(struct FGameplayTagContainer* TagContainerCopy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BI_AJBGameplayTagOwnerInterface_C", "GetGameplayTags");

	Params::BI_AJBGameplayTagOwnerInterface_C_GetGameplayTags Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (TagContainerCopy != nullptr)
		*TagContainerCopy = std::move(Parms.TagContainerCopy);
}


// Function BI_AJBGameplayTagOwnerInterface.BI_AJBGameplayTagOwnerInterface_C.AddGameplayTagWithFloat
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              Tag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// float                                   FloatValue                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_AJBGameplayTagOwnerInterface_C::AddGameplayTagWithFloat(const struct FGameplayTag& Tag, float FloatValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BI_AJBGameplayTagOwnerInterface_C", "AddGameplayTagWithFloat");

	Params::BI_AJBGameplayTagOwnerInterface_C_AddGameplayTagWithFloat Parms{};

	Parms.Tag = std::move(Tag);
	Parms.FloatValue = FloatValue;

	AsUObject()->ProcessEvent(Func, &Parms);
}

}

