#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBAIPathController

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBAIPathController.BP_AJBAIPathController_C
// 0x00C8 (0x03F0 - 0x0328)
class ABP_AJBAIPathController_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNavigationPath*                        Path;                                              // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentPathIndex;                                  // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_344[0x4];                                      // 0x0344(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlackboardComponent*                   Blackboard;                                        // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FBlackboardKeySelector                 NextMovementPointKey;                              // 0x0350(0x0028)(Edit, BlueprintVisible, ExposeOnSpawn)
	struct FBlackboardKeySelector                 IsArrivedKey;                                      // 0x0378(0x0028)(Edit, BlueprintVisible, ExposeOnSpawn)
	float                                         ArrivedDistanceThresh;                             // 0x03A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A4[0x4];                                      // 0x03A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          AIController;                                      // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         ArrivedDistanceThreshLastPoint;                    // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NextMovementPoint;                                 // 0x03B4(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bArrivedPathEnd;                                   // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bMoveToLastPoint;                                  // 0x03C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C2[0x2];                                      // 0x03C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NextJumpPoint;                                     // 0x03C4(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHasJumpPoint;                                     // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bWillCollideToWall;                                // 0x03D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D2[0x2];                                      // 0x03D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox                                   PathBoundingBox;                                   // 0x03D4(0x001C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_AJBAIPathController(int32 EntryPoint);
	void OnOwnerDestroyed(class AActor* DestroyedActor);
	void ClearPath();
	void ResetPath(class UNavigationPath* Path_0);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void DebugDrawPathLineBoxAfter();
	void DebugDrawPathLineBoxLoop();
	void UserConstructionScript();
	bool IsValidPath();
	void IsArrivedPathEnd(bool* bArrivedPathEnd_0);
	bool IsNavigating();
	void FixWayToNextPointIfNeeded();
	class UNavigationPath* GetPath();
	int32 GetCurrentPathIndex();
	bool IfObstacleMayBeOnThePath(class AActor* Obstacle);
	void IsEnabled_WillCollideToWall(bool* IsEnabled);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBAIPathController_C">();
	}
	static class ABP_AJBAIPathController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBAIPathController_C>();
	}
};
static_assert(alignof(ABP_AJBAIPathController_C) == 0x000008, "Wrong alignment on ABP_AJBAIPathController_C");
static_assert(sizeof(ABP_AJBAIPathController_C) == 0x0003F0, "Wrong size on ABP_AJBAIPathController_C");
static_assert(offsetof(ABP_AJBAIPathController_C, UberGraphFrame) == 0x000328, "Member 'ABP_AJBAIPathController_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AJBAIPathController_C, DefaultSceneRoot) == 0x000330, "Member 'ABP_AJBAIPathController_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_AJBAIPathController_C, Path) == 0x000338, "Member 'ABP_AJBAIPathController_C::Path' has a wrong offset!");
static_assert(offsetof(ABP_AJBAIPathController_C, CurrentPathIndex) == 0x000340, "Member 'ABP_AJBAIPathController_C::CurrentPathIndex' has a wrong offset!");
static_assert(offsetof(ABP_AJBAIPathController_C, Blackboard) == 0x000348, "Member 'ABP_AJBAIPathController_C::Blackboard' has a wrong offset!");
static_assert(offsetof(ABP_AJBAIPathController_C, NextMovementPointKey) == 0x000350, "Member 'ABP_AJBAIPathController_C::NextMovementPointKey' has a wrong offset!");
static_assert(offsetof(ABP_AJBAIPathController_C, IsArrivedKey) == 0x000378, "Member 'ABP_AJBAIPathController_C::IsArrivedKey' has a wrong offset!");
static_assert(offsetof(ABP_AJBAIPathController_C, ArrivedDistanceThresh) == 0x0003A0, "Member 'ABP_AJBAIPathController_C::ArrivedDistanceThresh' has a wrong offset!");
static_assert(offsetof(ABP_AJBAIPathController_C, AIController) == 0x0003A8, "Member 'ABP_AJBAIPathController_C::AIController' has a wrong offset!");
static_assert(offsetof(ABP_AJBAIPathController_C, ArrivedDistanceThreshLastPoint) == 0x0003B0, "Member 'ABP_AJBAIPathController_C::ArrivedDistanceThreshLastPoint' has a wrong offset!");
static_assert(offsetof(ABP_AJBAIPathController_C, NextMovementPoint) == 0x0003B4, "Member 'ABP_AJBAIPathController_C::NextMovementPoint' has a wrong offset!");
static_assert(offsetof(ABP_AJBAIPathController_C, bArrivedPathEnd) == 0x0003C0, "Member 'ABP_AJBAIPathController_C::bArrivedPathEnd' has a wrong offset!");
static_assert(offsetof(ABP_AJBAIPathController_C, bMoveToLastPoint) == 0x0003C1, "Member 'ABP_AJBAIPathController_C::bMoveToLastPoint' has a wrong offset!");
static_assert(offsetof(ABP_AJBAIPathController_C, NextJumpPoint) == 0x0003C4, "Member 'ABP_AJBAIPathController_C::NextJumpPoint' has a wrong offset!");
static_assert(offsetof(ABP_AJBAIPathController_C, bHasJumpPoint) == 0x0003D0, "Member 'ABP_AJBAIPathController_C::bHasJumpPoint' has a wrong offset!");
static_assert(offsetof(ABP_AJBAIPathController_C, bWillCollideToWall) == 0x0003D1, "Member 'ABP_AJBAIPathController_C::bWillCollideToWall' has a wrong offset!");
static_assert(offsetof(ABP_AJBAIPathController_C, PathBoundingBox) == 0x0003D4, "Member 'ABP_AJBAIPathController_C::PathBoundingBox' has a wrong offset!");

}

