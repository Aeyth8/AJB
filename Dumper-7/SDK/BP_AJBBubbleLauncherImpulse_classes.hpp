#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBBubbleLauncherImpulse

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BP_AJBDamageImpulseBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBBubbleLauncherImpulse.BP_AJBBubbleLauncherImpulse_C
// 0x0020 (0x04D0 - 0x04B0)
class ABP_AJBBubbleLauncherImpulse_C final : public ABP_AJBDamageImpulseBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBBubbleLauncherImpulse_C;      // 0x04B0(0x0008)(Transient, DuplicateTransient)
	bool                                          IsHamonMode;                                       // 0x04B8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, AdvancedDisplay, ExposeOnSpawn)
	uint8                                         Pad_4B9[0x7];                                      // 0x04B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ActiveHamonParticleTag;                            // 0x04C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OwnerProjectile;                                   // 0x04C8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData, NoDestructor, AdvancedDisplay, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBBubbleLauncherImpulse(int32 EntryPoint);
	void GetHamonStatus(bool* IsHamonMode_0);
	void GetActiveParticleTag(struct FGameplayTag* ActiveParticleTag_0);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void CalcDamage(class AActor* DamagedActor, int32* Damage, int32* DamagedPhase);
	void GetAttackDistance(class AActor* DamagedActor, float* AttackDistance);
	void RequestImpulseGion();
	void RequestActiveParticle();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBBubbleLauncherImpulse_C">();
	}
	static class ABP_AJBBubbleLauncherImpulse_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBBubbleLauncherImpulse_C>();
	}
};
static_assert(alignof(ABP_AJBBubbleLauncherImpulse_C) == 0x000008, "Wrong alignment on ABP_AJBBubbleLauncherImpulse_C");
static_assert(sizeof(ABP_AJBBubbleLauncherImpulse_C) == 0x0004D0, "Wrong size on ABP_AJBBubbleLauncherImpulse_C");
static_assert(offsetof(ABP_AJBBubbleLauncherImpulse_C, UberGraphFrame_BP_AJBBubbleLauncherImpulse_C) == 0x0004B0, "Member 'ABP_AJBBubbleLauncherImpulse_C::UberGraphFrame_BP_AJBBubbleLauncherImpulse_C' has a wrong offset!");
static_assert(offsetof(ABP_AJBBubbleLauncherImpulse_C, IsHamonMode) == 0x0004B8, "Member 'ABP_AJBBubbleLauncherImpulse_C::IsHamonMode' has a wrong offset!");
static_assert(offsetof(ABP_AJBBubbleLauncherImpulse_C, ActiveHamonParticleTag) == 0x0004C0, "Member 'ABP_AJBBubbleLauncherImpulse_C::ActiveHamonParticleTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBBubbleLauncherImpulse_C, OwnerProjectile) == 0x0004C8, "Member 'ABP_AJBBubbleLauncherImpulse_C::OwnerProjectile' has a wrong offset!");

}

