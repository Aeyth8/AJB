#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTD_AJBTimeLimit

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BTD_AJBTimeLimit.BTD_AJBTimeLimit_C.ExecuteUbergraph_BTD_AJBTimeLimit
// 0x0098 (0x0098 - 0x0000)
struct BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController2;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn2;                      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimespan                              CallFunc_GetElapsedGameTimespan_ReturnValue;       // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBBattleGameState_C*               K2Node_DynamicCast_AsBP_AJBBattle_Game_State;      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController1;                     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn1;                      // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              CallFunc_GetElapsedGameTimespan_ReturnValue1;      // 0x0050(0x0008)(NoDestructor, HasGetValueTypeHash)
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBTNodeResult                                 K2Node_Event_NodeResult;                           // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              CallFunc_Subtract_TimespanTimespan_ReturnValue;    // 0x0070(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTotalSeconds_ReturnValue;              // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0080(0x0008)(NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit) == 0x000008, "Wrong alignment on BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit");
static_assert(sizeof(BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit) == 0x000098, "Wrong size on BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit");
static_assert(offsetof(BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit, EntryPoint) == 0x000000, "Member 'BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit::EntryPoint' has a wrong offset!");
static_assert(offsetof(BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit, K2Node_Event_OwnerController2) == 0x000008, "Member 'BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit::K2Node_Event_OwnerController2' has a wrong offset!");
static_assert(offsetof(BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit, K2Node_Event_ControlledPawn2) == 0x000010, "Member 'BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit::K2Node_Event_ControlledPawn2' has a wrong offset!");
static_assert(offsetof(BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit, CallFunc_GetElapsedGameTimespan_ReturnValue) == 0x000018, "Member 'BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit::CallFunc_GetElapsedGameTimespan_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit, CallFunc_GetGameState_ReturnValue) == 0x000020, "Member 'BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit, K2Node_DynamicCast_AsBP_AJBBattle_Game_State) == 0x000028, "Member 'BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit::K2Node_DynamicCast_AsBP_AJBBattle_Game_State' has a wrong offset!");
static_assert(offsetof(BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit, K2Node_Event_OwnerController1) == 0x000038, "Member 'BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit::K2Node_Event_OwnerController1' has a wrong offset!");
static_assert(offsetof(BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit, K2Node_Event_ControlledPawn1) == 0x000040, "Member 'BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit::K2Node_Event_ControlledPawn1' has a wrong offset!");
static_assert(offsetof(BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit, K2Node_Event_DeltaSeconds) == 0x000048, "Member 'BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit, CallFunc_IsValid_ReturnValue) == 0x00004C, "Member 'BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit, CallFunc_GetElapsedGameTimespan_ReturnValue1) == 0x000050, "Member 'BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit::CallFunc_GetElapsedGameTimespan_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit, K2Node_Event_OwnerController) == 0x000058, "Member 'BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit, K2Node_Event_ControlledPawn) == 0x000060, "Member 'BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit, K2Node_Event_NodeResult) == 0x000068, "Member 'BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit::K2Node_Event_NodeResult' has a wrong offset!");
static_assert(offsetof(BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit, CallFunc_Subtract_TimespanTimespan_ReturnValue) == 0x000070, "Member 'BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit::CallFunc_Subtract_TimespanTimespan_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit, CallFunc_GetTotalSeconds_ReturnValue) == 0x000078, "Member 'BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit::CallFunc_GetTotalSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit, CallFunc_K2_SetTimer_ReturnValue) == 0x000080, "Member 'BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000088, "Member 'BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00008C, "Member 'BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit, CallFunc_RandomFloatInRange_ReturnValue) == 0x000090, "Member 'BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit, CallFunc_Add_FloatFloat_ReturnValue) == 0x000094, "Member 'BTD_AJBTimeLimit_C_ExecuteUbergraph_BTD_AJBTimeLimit::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function BTD_AJBTimeLimit.BTD_AJBTimeLimit_C.ReceiveExecutionFinishAI
// 0x0018 (0x0018 - 0x0000)
struct BTD_AJBTimeLimit_C_ReceiveExecutionFinishAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBTNodeResult                                 NodeResult;                                        // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTD_AJBTimeLimit_C_ReceiveExecutionFinishAI) == 0x000008, "Wrong alignment on BTD_AJBTimeLimit_C_ReceiveExecutionFinishAI");
static_assert(sizeof(BTD_AJBTimeLimit_C_ReceiveExecutionFinishAI) == 0x000018, "Wrong size on BTD_AJBTimeLimit_C_ReceiveExecutionFinishAI");
static_assert(offsetof(BTD_AJBTimeLimit_C_ReceiveExecutionFinishAI, OwnerController) == 0x000000, "Member 'BTD_AJBTimeLimit_C_ReceiveExecutionFinishAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTD_AJBTimeLimit_C_ReceiveExecutionFinishAI, ControlledPawn) == 0x000008, "Member 'BTD_AJBTimeLimit_C_ReceiveExecutionFinishAI::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTD_AJBTimeLimit_C_ReceiveExecutionFinishAI, NodeResult) == 0x000010, "Member 'BTD_AJBTimeLimit_C_ReceiveExecutionFinishAI::NodeResult' has a wrong offset!");

// Function BTD_AJBTimeLimit.BTD_AJBTimeLimit_C.ReceiveTickAI
// 0x0018 (0x0018 - 0x0000)
struct BTD_AJBTimeLimit_C_ReceiveTickAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTD_AJBTimeLimit_C_ReceiveTickAI) == 0x000008, "Wrong alignment on BTD_AJBTimeLimit_C_ReceiveTickAI");
static_assert(sizeof(BTD_AJBTimeLimit_C_ReceiveTickAI) == 0x000018, "Wrong size on BTD_AJBTimeLimit_C_ReceiveTickAI");
static_assert(offsetof(BTD_AJBTimeLimit_C_ReceiveTickAI, OwnerController) == 0x000000, "Member 'BTD_AJBTimeLimit_C_ReceiveTickAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTD_AJBTimeLimit_C_ReceiveTickAI, ControlledPawn) == 0x000008, "Member 'BTD_AJBTimeLimit_C_ReceiveTickAI::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTD_AJBTimeLimit_C_ReceiveTickAI, DeltaSeconds) == 0x000010, "Member 'BTD_AJBTimeLimit_C_ReceiveTickAI::DeltaSeconds' has a wrong offset!");

// Function BTD_AJBTimeLimit.BTD_AJBTimeLimit_C.ReceiveExecutionStartAI
// 0x0010 (0x0010 - 0x0000)
struct BTD_AJBTimeLimit_C_ReceiveExecutionStartAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTD_AJBTimeLimit_C_ReceiveExecutionStartAI) == 0x000008, "Wrong alignment on BTD_AJBTimeLimit_C_ReceiveExecutionStartAI");
static_assert(sizeof(BTD_AJBTimeLimit_C_ReceiveExecutionStartAI) == 0x000010, "Wrong size on BTD_AJBTimeLimit_C_ReceiveExecutionStartAI");
static_assert(offsetof(BTD_AJBTimeLimit_C_ReceiveExecutionStartAI, OwnerController) == 0x000000, "Member 'BTD_AJBTimeLimit_C_ReceiveExecutionStartAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTD_AJBTimeLimit_C_ReceiveExecutionStartAI, ControlledPawn) == 0x000008, "Member 'BTD_AJBTimeLimit_C_ReceiveExecutionStartAI::ControlledPawn' has a wrong offset!");

// Function BTD_AJBTimeLimit.BTD_AJBTimeLimit_C.PerformConditionCheckAI
// 0x0018 (0x0018 - 0x0000)
struct BTD_AJBTimeLimit_C_PerformConditionCheckAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BTD_AJBTimeLimit_C_PerformConditionCheckAI) == 0x000008, "Wrong alignment on BTD_AJBTimeLimit_C_PerformConditionCheckAI");
static_assert(sizeof(BTD_AJBTimeLimit_C_PerformConditionCheckAI) == 0x000018, "Wrong size on BTD_AJBTimeLimit_C_PerformConditionCheckAI");
static_assert(offsetof(BTD_AJBTimeLimit_C_PerformConditionCheckAI, OwnerController) == 0x000000, "Member 'BTD_AJBTimeLimit_C_PerformConditionCheckAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTD_AJBTimeLimit_C_PerformConditionCheckAI, ControlledPawn) == 0x000008, "Member 'BTD_AJBTimeLimit_C_PerformConditionCheckAI::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTD_AJBTimeLimit_C_PerformConditionCheckAI, ReturnValue) == 0x000010, "Member 'BTD_AJBTimeLimit_C_PerformConditionCheckAI::ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_AJBTimeLimit_C_PerformConditionCheckAI, CallFunc_Not_PreBool_ReturnValue) == 0x000011, "Member 'BTD_AJBTimeLimit_C_PerformConditionCheckAI::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

}

