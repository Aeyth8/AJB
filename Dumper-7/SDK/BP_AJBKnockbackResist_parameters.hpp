#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBKnockbackResist

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function BP_AJBKnockbackResist.BP_AJBKnockbackResist_C.ExecuteUbergraph_BP_AJBKnockbackResist
// 0x0040 (0x0040 - 0x0000)
struct BP_AJBKnockbackResist_C_ExecuteUbergraph_BP_AJBKnockbackResist final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_Event_Causer;                               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bTriggeredByStand;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Event_CauserType;                           // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_SerialNumber;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_Event_PropagationSource;                    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Min_ReturnValue;                          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBKnockbackResist_C_ExecuteUbergraph_BP_AJBKnockbackResist) == 0x000008, "Wrong alignment on BP_AJBKnockbackResist_C_ExecuteUbergraph_BP_AJBKnockbackResist");
static_assert(sizeof(BP_AJBKnockbackResist_C_ExecuteUbergraph_BP_AJBKnockbackResist) == 0x000040, "Wrong size on BP_AJBKnockbackResist_C_ExecuteUbergraph_BP_AJBKnockbackResist");
static_assert(offsetof(BP_AJBKnockbackResist_C_ExecuteUbergraph_BP_AJBKnockbackResist, EntryPoint) == 0x000000, "Member 'BP_AJBKnockbackResist_C_ExecuteUbergraph_BP_AJBKnockbackResist::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBKnockbackResist_C_ExecuteUbergraph_BP_AJBKnockbackResist, K2Node_Event_Causer) == 0x000008, "Member 'BP_AJBKnockbackResist_C_ExecuteUbergraph_BP_AJBKnockbackResist::K2Node_Event_Causer' has a wrong offset!");
static_assert(offsetof(BP_AJBKnockbackResist_C_ExecuteUbergraph_BP_AJBKnockbackResist, K2Node_Event_bTriggeredByStand) == 0x000010, "Member 'BP_AJBKnockbackResist_C_ExecuteUbergraph_BP_AJBKnockbackResist::K2Node_Event_bTriggeredByStand' has a wrong offset!");
static_assert(offsetof(BP_AJBKnockbackResist_C_ExecuteUbergraph_BP_AJBKnockbackResist, K2Node_Event_CauserType) == 0x000018, "Member 'BP_AJBKnockbackResist_C_ExecuteUbergraph_BP_AJBKnockbackResist::K2Node_Event_CauserType' has a wrong offset!");
static_assert(offsetof(BP_AJBKnockbackResist_C_ExecuteUbergraph_BP_AJBKnockbackResist, K2Node_Event_SerialNumber) == 0x000020, "Member 'BP_AJBKnockbackResist_C_ExecuteUbergraph_BP_AJBKnockbackResist::K2Node_Event_SerialNumber' has a wrong offset!");
static_assert(offsetof(BP_AJBKnockbackResist_C_ExecuteUbergraph_BP_AJBKnockbackResist, K2Node_Event_PropagationSource) == 0x000028, "Member 'BP_AJBKnockbackResist_C_ExecuteUbergraph_BP_AJBKnockbackResist::K2Node_Event_PropagationSource' has a wrong offset!");
static_assert(offsetof(BP_AJBKnockbackResist_C_ExecuteUbergraph_BP_AJBKnockbackResist, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'BP_AJBKnockbackResist_C_ExecuteUbergraph_BP_AJBKnockbackResist::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBKnockbackResist_C_ExecuteUbergraph_BP_AJBKnockbackResist, CallFunc_Min_ReturnValue) == 0x000034, "Member 'BP_AJBKnockbackResist_C_ExecuteUbergraph_BP_AJBKnockbackResist::CallFunc_Min_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBKnockbackResist_C_ExecuteUbergraph_BP_AJBKnockbackResist, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'BP_AJBKnockbackResist_C_ExecuteUbergraph_BP_AJBKnockbackResist::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AJBKnockbackResist.BP_AJBKnockbackResist_C.ActivePassive
// 0x0028 (0x0028 - 0x0000)
struct BP_AJBKnockbackResist_C_ActivePassive final
{
public:
	class UObject*                                Causer;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTriggeredByStand;                                 // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CauserType;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         SerialNumber;                                      // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                PropagationSource_0;                               // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBKnockbackResist_C_ActivePassive) == 0x000008, "Wrong alignment on BP_AJBKnockbackResist_C_ActivePassive");
static_assert(sizeof(BP_AJBKnockbackResist_C_ActivePassive) == 0x000028, "Wrong size on BP_AJBKnockbackResist_C_ActivePassive");
static_assert(offsetof(BP_AJBKnockbackResist_C_ActivePassive, Causer) == 0x000000, "Member 'BP_AJBKnockbackResist_C_ActivePassive::Causer' has a wrong offset!");
static_assert(offsetof(BP_AJBKnockbackResist_C_ActivePassive, bTriggeredByStand) == 0x000008, "Member 'BP_AJBKnockbackResist_C_ActivePassive::bTriggeredByStand' has a wrong offset!");
static_assert(offsetof(BP_AJBKnockbackResist_C_ActivePassive, CauserType) == 0x000010, "Member 'BP_AJBKnockbackResist_C_ActivePassive::CauserType' has a wrong offset!");
static_assert(offsetof(BP_AJBKnockbackResist_C_ActivePassive, SerialNumber) == 0x000018, "Member 'BP_AJBKnockbackResist_C_ActivePassive::SerialNumber' has a wrong offset!");
static_assert(offsetof(BP_AJBKnockbackResist_C_ActivePassive, PropagationSource_0) == 0x000020, "Member 'BP_AJBKnockbackResist_C_ActivePassive::PropagationSource_0' has a wrong offset!");

}

