#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBHamonBreathingSkill

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BP_AJBSkillBase_classes.hpp"
#include "AJB_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBHamonBreathingSkill.BP_AJBHamonBreathingSkill_C
// 0x0090 (0x0278 - 0x01E8)
class UBP_AJBHamonBreathingSkill_C : public UBP_AJBSkillBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBHamonBreathingSkill_C;        // 0x01E8(0x0008)(Transient, DuplicateTransient)
	float                                         s__BP_AJBHamonBreathingSkill_C;                    // 0x01F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IncreaseHamonValue;                                // 0x01F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IncreaseHamonValueJust;                            // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InRangeTime_s_;                                    // 0x01FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutRangeTime_s_;                                   // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReInputTime_s_;                                    // 0x0204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bReserveActive;                                    // 0x0208(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugLog;                                         // 0x0209(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_20A[0x2];                                      // 0x020A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimingMin_s_;                                      // 0x020C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimingMax_s_;                                      // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_214[0x4];                                      // 0x0214(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnDecideResult;                                    // 0x0218(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         JustTimingMin_s_;                                  // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         JustTimingMax_s_;                                  // 0x022C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           BreathingLoopSE;                                   // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           BreathingLoopSETag;                                // 0x0238(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           BreathingSuccessSETag;                             // 0x0240(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           BreathingCriticalSuccessSETag;                     // 0x0248(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           BreathingFailedSETag;                              // 0x0250(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           BeginBreathingVoiceTag;                            // 0x0258(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           BeginHamonModeVoiceTag;                            // 0x0260(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EndHamonModeVoiceTag;                              // 0x0268(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         BeginBreathingVoiceCooldown;                       // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBHamonBreathingSkill(int32 EntryPoint);
	void OnActiveCore();
	void OnInactivateCore();
	void MC_CallOnDecideResult(uint8 Result, float StateTimeRatio, bool bPlaySE, bool IsLastHamonModeEnabled);
	void ROS_CallOnDecideResult(uint8 Result, float StateTimeRatio, bool bPlaySE, bool IsLastHamonModeEnabled);
	void CallOnDecideResult_Local(uint8 Result, bool bPlaySE, bool IsLastHamonModeEnabled);
	void ResetGate_Play_HamonBreathVoice();
	void ReleaseButton();
	void ReserveActive();
	void Run_BreathingResultEffect(uint8 Timing, bool bPlaySE, bool IsLastHamonModeEnabled);
	void Play_HamonBreathVoice();
	void Play_BeginHamonModeVoice();
	void Play_Breathing_FailedSE();
	void Play_Breathing_CriticalSuccessSE();
	void Play_Breathing_SuccessSE();
	void End_Breathing_LoopSE();
	void Pause_Breathing_LoopSE();
	void UnlockResumeGate_Breathing_LoopSE();
	void OnEnd_Breathing_LoopSE(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo);
	void Resume_Breathing_LoopSE();
	void Play_Breathing_LoopSE();
	void IsInRangeTiming(bool* bResult);
	void IsOutRangeTiming(bool* bResult);
	void IsReInputTiming(bool* bResult);
	void GetTotalTime(float* Time);
	void RemainTime(float* Time);
	void IsTiming(bool* bResult);
	void IsJustTiming(bool* bResult);
	void GetStateTimeRatio(float* StateTimeRatio);
	void OnChangedViewTarget();
	void StateBeginPlay(bool bShouldRestore);
	void ReceiveBeginPlay();
	void OnCancel();
	void OnActive();
	void ReceiveTick(float DeltaSeconds);
	void OnInactive();
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);
	bool CanUseSkill(struct FGameplayTagContainer* TagContainer);
	void MPUpdateSettingOnActivate();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBHamonBreathingSkill_C">();
	}
	static class UBP_AJBHamonBreathingSkill_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBHamonBreathingSkill_C>();
	}
};
static_assert(alignof(UBP_AJBHamonBreathingSkill_C) == 0x000008, "Wrong alignment on UBP_AJBHamonBreathingSkill_C");
static_assert(sizeof(UBP_AJBHamonBreathingSkill_C) == 0x000278, "Wrong size on UBP_AJBHamonBreathingSkill_C");
static_assert(offsetof(UBP_AJBHamonBreathingSkill_C, UberGraphFrame_BP_AJBHamonBreathingSkill_C) == 0x0001E8, "Member 'UBP_AJBHamonBreathingSkill_C::UberGraphFrame_BP_AJBHamonBreathingSkill_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonBreathingSkill_C, s__BP_AJBHamonBreathingSkill_C) == 0x0001F0, "Member 'UBP_AJBHamonBreathingSkill_C::s__BP_AJBHamonBreathingSkill_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonBreathingSkill_C, IncreaseHamonValue) == 0x0001F4, "Member 'UBP_AJBHamonBreathingSkill_C::IncreaseHamonValue' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonBreathingSkill_C, IncreaseHamonValueJust) == 0x0001F8, "Member 'UBP_AJBHamonBreathingSkill_C::IncreaseHamonValueJust' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonBreathingSkill_C, InRangeTime_s_) == 0x0001FC, "Member 'UBP_AJBHamonBreathingSkill_C::InRangeTime_s_' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonBreathingSkill_C, OutRangeTime_s_) == 0x000200, "Member 'UBP_AJBHamonBreathingSkill_C::OutRangeTime_s_' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonBreathingSkill_C, ReInputTime_s_) == 0x000204, "Member 'UBP_AJBHamonBreathingSkill_C::ReInputTime_s_' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonBreathingSkill_C, bReserveActive) == 0x000208, "Member 'UBP_AJBHamonBreathingSkill_C::bReserveActive' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonBreathingSkill_C, bDebugLog) == 0x000209, "Member 'UBP_AJBHamonBreathingSkill_C::bDebugLog' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonBreathingSkill_C, TimingMin_s_) == 0x00020C, "Member 'UBP_AJBHamonBreathingSkill_C::TimingMin_s_' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonBreathingSkill_C, TimingMax_s_) == 0x000210, "Member 'UBP_AJBHamonBreathingSkill_C::TimingMax_s_' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonBreathingSkill_C, OnDecideResult) == 0x000218, "Member 'UBP_AJBHamonBreathingSkill_C::OnDecideResult' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonBreathingSkill_C, JustTimingMin_s_) == 0x000228, "Member 'UBP_AJBHamonBreathingSkill_C::JustTimingMin_s_' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonBreathingSkill_C, JustTimingMax_s_) == 0x00022C, "Member 'UBP_AJBHamonBreathingSkill_C::JustTimingMax_s_' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonBreathingSkill_C, BreathingLoopSE) == 0x000230, "Member 'UBP_AJBHamonBreathingSkill_C::BreathingLoopSE' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonBreathingSkill_C, BreathingLoopSETag) == 0x000238, "Member 'UBP_AJBHamonBreathingSkill_C::BreathingLoopSETag' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonBreathingSkill_C, BreathingSuccessSETag) == 0x000240, "Member 'UBP_AJBHamonBreathingSkill_C::BreathingSuccessSETag' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonBreathingSkill_C, BreathingCriticalSuccessSETag) == 0x000248, "Member 'UBP_AJBHamonBreathingSkill_C::BreathingCriticalSuccessSETag' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonBreathingSkill_C, BreathingFailedSETag) == 0x000250, "Member 'UBP_AJBHamonBreathingSkill_C::BreathingFailedSETag' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonBreathingSkill_C, BeginBreathingVoiceTag) == 0x000258, "Member 'UBP_AJBHamonBreathingSkill_C::BeginBreathingVoiceTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonBreathingSkill_C, BeginHamonModeVoiceTag) == 0x000260, "Member 'UBP_AJBHamonBreathingSkill_C::BeginHamonModeVoiceTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonBreathingSkill_C, EndHamonModeVoiceTag) == 0x000268, "Member 'UBP_AJBHamonBreathingSkill_C::EndHamonModeVoiceTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonBreathingSkill_C, BeginBreathingVoiceCooldown) == 0x000270, "Member 'UBP_AJBHamonBreathingSkill_C::BeginBreathingVoiceCooldown' has a wrong offset!");

}

