#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameWatcherCamera

#include "Basic.hpp"

#include "ST_ShopCompetitionUICharaParam_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "AJB_structs.hpp"
#include "AJB_classes.hpp"
#include "ST_ShopCompetitionTeamInfo_structs.hpp"
#include "E_WatcherCameraTargetChangeDirection_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBInGameWatcherCamera.BP_AJBInGameWatcherCamera_C
// 0x0110 (0x08A0 - 0x0790)
class ABP_AJBInGameWatcherCamera_C final : public AAJBInGameCameraman
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0790(0x0008)(Transient, DuplicateTransient)
	class UBP_AJBActionLogSender_Cameraman_C*     BP_AJBActionLogSender_Cameraman;                   // 0x0798(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  PostProcess;                                       // 0x07A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x07A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ESeparateStandInputType                       InputType;                                         // 0x07B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUpButtonPressing;                                 // 0x07B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDownButtonPressing;                               // 0x07B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B3[0x1];                                      // 0x07B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         XYSpeedRate;                                       // 0x07B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZSpeedRate;                                        // 0x07B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         s_;                                                // 0x07BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         s__0;                                              // 0x07C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LastTargetIndexListIndex;                          // 0x07C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               CurrentTargetCharacter;                            // 0x07C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<int32, class ABP_AJBInGameCharacter_C*>  CharacterBPMap_Server_;                            // 0x07D0(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<int32>                                 PlayerIndexList_Server_;                           // 0x0820(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          bIsTargetCameraMode_Local;                         // 0x0830(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCameraChangingLock_Local;                         // 0x0831(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_832[0x2];                                      // 0x0832(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CheckTargetTimeSpan;                               // 0x0834(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CheckTargetTimer;                                  // 0x0838(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	float                                         CameraChangingLockTimeSec;                         // 0x0840(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraChangingLockReleaseTimeSec;                  // 0x0844(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FST_ShopCompetitionTeamInfo>    ShopCompetitionTeamInfoList_Server_;               // 0x0848(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FGameplayTagContainer                  SkillTagContainerUsedInUltimateLog;                // 0x0858(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	UMulticastDelegateProperty_                   OnWatchTarget_Server;                              // 0x0878(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<struct FST_ShopCompetitionUICharaParam> ReservedUpdatingCharacterParams;                  // 0x0888(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance)
	bool                                          IsFinishedToSetupList;                             // 0x0898(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_AJBInGameWatcherCamera(int32 EntryPoint);
	void ROC_SyncAffecter(const class ABP_AJBDamageAffecterBase_C* Affecter, const TArray<struct FVector>& MultipleLocations, const TArray<float>& MultipleScales, TArray<float>& MultipleRadiuses, const TArray<float>& CurrentTimes);
	void ROC_StickedMarker_PairWatcher(const struct FVector2D& NormalizedPosition, const struct FGameplayTag& SignalTypeTag);
	void ROC_StickedMarker_Watcher(const struct FVector2D& NormalizedPosition, const struct FGameplayTag& SignalTypeTag);
	void ROC_SpawnSignalPin_PairWatcher(const struct FVector& Location, const struct FGameplayTag& PinTypeTag, bool bIsRemove, bool bWithSound);
	void ROC_SpawnSignalPin_Watcher(const struct FVector& Location, const struct FGameplayTag& PinTypeTag, bool bIsRemove, bool bWithSound);
	void ROC_NotifyUltimateSkillUsed(int32 PlayerID, const struct FGameplayTag& SkillTag);
	void NotifyUltimateSkillUsed_Server(int32 PlayerID, const struct FGameplayTag& SkillTag);
	void ROC_ShopCompetitionUISharingCharaPollingParam(const struct FST_ShopCompetitionUICharaPollingParam& PollingCharaParam);
	void OnShopCompetitionUISharingCharaPollingParam_Svr_(const struct FST_ShopCompetitionUICharaPollingParam& PollingCharaParam);
	void OnReleasedTouchOnPlayer(class AActor* TouchedPlayerActor);
	void ChangeCameraMode_Server_(bool bIsTargetCameraMode);
	void UnlockCameraChanging_Server_();
	void ROC_ChangeCameraMode(bool bIsTargetCameraMode, bool bIsChanging);
	void ROC_ShopCompetitionUISharingCharaParam(const struct FST_ShopCompetitionUICharaParam& CharaParam);
	void OnShopCompetitionUISharingCharaParam_Svr_(const struct FST_ShopCompetitionUICharaParam& CharaParam);
	void ROC_Init(const TArray<struct FST_ShopCompetitionTeamInfo>& TeamInfoList);
	void ROS_ChangeCameraByTouchInput(int32 TargetMatchingPlayerID, bool bIsTargetCameraMode);
	void OnChangedTargetWithPlayerListButton(int32 NewWatcherPlayerID);
	void OnStandbyEnd(const struct FGameplayTag& NextState);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void OnPressedL3();
	void OnPressedR1();
	void OnPressedL1();
	void ROS_ChangeCameraByControllerInput(bool bWantToChangeToTargetCamera, bool bCurrentIsTargetCamera, E_WatcherCameraTargetChangeDirection DirectionForTargetCamera);
	void OnPressedInteract();
	void OnPressedL2();
	void LookupRate(float Value);
	void TurnRate(float Value);
	void MoveRight(float Value);
	void OnReleasedCrouch();
	void OnReleasedJump();
	void OnPressedCrouch();
	void MoveForward(float Value);
	void OnPressedJump();
	void ROC_Debug_Print(const class FString& inString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration);
	void Debug_RequestROCPrintCurrentTarget_Server_();
	void ROS_Debug_WatchTarget(class ABP_AJBInGameCharacter_C* TargetCharacterBP);
	void ROC_Debug_PrintCharactersMap(const TArray<class FString>& Strings);
	void ROS_Debug_PrintCharactersMap();
	void ROC_Debug_PrintNewTargetInfo(class ABP_AJBInGameCharacter_C* TargetCharacterBP, int32 TargetMatchingPlayerIndex, bool bBeforeModeIsTargetCamera);
	void ROC_Debug_SyncMatchingPlayerInfo(const TArray<class FString>& KeyList, const TArray<struct FMatchingPlayerInfo>& ValueList);
	void ROS_Debug_MakeMatchingPlayerInfo(bool bPlayerOneCameraMode);
	void OnNotSpectated_Local();
	void OnSpectated_Local();
	void UserConstructionScript();
	void GetProperTargetCharacter(bool bAlsoCheckCurrentTarget, bool bForward, class ABP_AJBInGameCharacter_C** CharacterBP, int32* CharacterMatchingPlayerIndex);
	void WatchTarget_Server_(class ABP_AJBInGameCharacter_C* TargetCharacterBP, int32 TargetMatchingPlayerIndex);
	void ChangeCameraByControllerInput_Server_(bool bWantToChangeToTargetCamera, bool bCurrentIsTargetCamera, E_WatcherCameraTargetChangeDirection DirectionForTargetCamera, class ABP_AJBInGameCharacter_C** TargetCharacterBP);
	void InitCharacterList_Server_();
	void DEPRECATED_InitPostProcess_OwningClient_();
	void EnablePostProcess_OwningClient_(bool bEnable);
	void Debug_CreateCharactersMapString(TArray<class FString>* Result);
	void CheckTarget_Server_();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBInGameWatcherCamera_C">();
	}
	static class ABP_AJBInGameWatcherCamera_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBInGameWatcherCamera_C>();
	}
};
static_assert(alignof(ABP_AJBInGameWatcherCamera_C) == 0x000010, "Wrong alignment on ABP_AJBInGameWatcherCamera_C");
static_assert(sizeof(ABP_AJBInGameWatcherCamera_C) == 0x0008A0, "Wrong size on ABP_AJBInGameWatcherCamera_C");
static_assert(offsetof(ABP_AJBInGameWatcherCamera_C, UberGraphFrame) == 0x000790, "Member 'ABP_AJBInGameWatcherCamera_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameWatcherCamera_C, BP_AJBActionLogSender_Cameraman) == 0x000798, "Member 'ABP_AJBInGameWatcherCamera_C::BP_AJBActionLogSender_Cameraman' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameWatcherCamera_C, PostProcess) == 0x0007A0, "Member 'ABP_AJBInGameWatcherCamera_C::PostProcess' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameWatcherCamera_C, Camera) == 0x0007A8, "Member 'ABP_AJBInGameWatcherCamera_C::Camera' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameWatcherCamera_C, InputType) == 0x0007B0, "Member 'ABP_AJBInGameWatcherCamera_C::InputType' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameWatcherCamera_C, bUpButtonPressing) == 0x0007B1, "Member 'ABP_AJBInGameWatcherCamera_C::bUpButtonPressing' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameWatcherCamera_C, bDownButtonPressing) == 0x0007B2, "Member 'ABP_AJBInGameWatcherCamera_C::bDownButtonPressing' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameWatcherCamera_C, XYSpeedRate) == 0x0007B4, "Member 'ABP_AJBInGameWatcherCamera_C::XYSpeedRate' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameWatcherCamera_C, ZSpeedRate) == 0x0007B8, "Member 'ABP_AJBInGameWatcherCamera_C::ZSpeedRate' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameWatcherCamera_C, s_) == 0x0007BC, "Member 'ABP_AJBInGameWatcherCamera_C::s_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameWatcherCamera_C, s__0) == 0x0007C0, "Member 'ABP_AJBInGameWatcherCamera_C::s__0' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameWatcherCamera_C, LastTargetIndexListIndex) == 0x0007C4, "Member 'ABP_AJBInGameWatcherCamera_C::LastTargetIndexListIndex' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameWatcherCamera_C, CurrentTargetCharacter) == 0x0007C8, "Member 'ABP_AJBInGameWatcherCamera_C::CurrentTargetCharacter' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameWatcherCamera_C, CharacterBPMap_Server_) == 0x0007D0, "Member 'ABP_AJBInGameWatcherCamera_C::CharacterBPMap_Server_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameWatcherCamera_C, PlayerIndexList_Server_) == 0x000820, "Member 'ABP_AJBInGameWatcherCamera_C::PlayerIndexList_Server_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameWatcherCamera_C, bIsTargetCameraMode_Local) == 0x000830, "Member 'ABP_AJBInGameWatcherCamera_C::bIsTargetCameraMode_Local' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameWatcherCamera_C, bCameraChangingLock_Local) == 0x000831, "Member 'ABP_AJBInGameWatcherCamera_C::bCameraChangingLock_Local' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameWatcherCamera_C, CheckTargetTimeSpan) == 0x000834, "Member 'ABP_AJBInGameWatcherCamera_C::CheckTargetTimeSpan' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameWatcherCamera_C, CheckTargetTimer) == 0x000838, "Member 'ABP_AJBInGameWatcherCamera_C::CheckTargetTimer' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameWatcherCamera_C, CameraChangingLockTimeSec) == 0x000840, "Member 'ABP_AJBInGameWatcherCamera_C::CameraChangingLockTimeSec' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameWatcherCamera_C, CameraChangingLockReleaseTimeSec) == 0x000844, "Member 'ABP_AJBInGameWatcherCamera_C::CameraChangingLockReleaseTimeSec' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameWatcherCamera_C, ShopCompetitionTeamInfoList_Server_) == 0x000848, "Member 'ABP_AJBInGameWatcherCamera_C::ShopCompetitionTeamInfoList_Server_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameWatcherCamera_C, SkillTagContainerUsedInUltimateLog) == 0x000858, "Member 'ABP_AJBInGameWatcherCamera_C::SkillTagContainerUsedInUltimateLog' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameWatcherCamera_C, OnWatchTarget_Server) == 0x000878, "Member 'ABP_AJBInGameWatcherCamera_C::OnWatchTarget_Server' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameWatcherCamera_C, ReservedUpdatingCharacterParams) == 0x000888, "Member 'ABP_AJBInGameWatcherCamera_C::ReservedUpdatingCharacterParams' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameWatcherCamera_C, IsFinishedToSetupList) == 0x000898, "Member 'ABP_AJBInGameWatcherCamera_C::IsFinishedToSetupList' has a wrong offset!");

}

