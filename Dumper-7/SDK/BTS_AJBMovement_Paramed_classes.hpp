#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTS_AJBMovement_Paramed

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTS_AJBMovement_Paramed.BTS_AJBMovement_Paramed_C
// 0x0178 (0x0210 - 0x0098)
class UBTS_AJBMovement_Paramed_C final : public UBTService_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0098(0x0008)(Transient, DuplicateTransient)
	struct FBlackboardKeySelector                 RO_DestinationKey;                                 // 0x00A0(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 RO_IsArrivedKey;                                   // 0x00C8(0x0028)(Edit, BlueprintVisible)
	class UBP_AJBInGameAIInputProxy_C*            InputProxy;                                        // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBlackboardKeySelector                 RO_LookAtActorKey;                                 // 0x00F8(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 RO_LookForDirKey;                                  // 0x0120(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 RO_LookAtTurnDeviation;                            // 0x0148(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly)
	bool                                          bUseLookAtTurnDeviation;                           // 0x0170(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBInGameAIRecognition_C*           Recognition;                                       // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bMoveCameraOnly;                                   // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAlwaysLookAtActor;                                // 0x0181(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_182[0x6];                                      // 0x0182(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          MyAIController;                                    // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAlwaysLookForDir;                                 // 0x0190(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AEventTagLocker*                        DirFixLocker;                                      // 0x0198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSkipUpdateInput;                                  // 0x01A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A1[0x3];                                      // 0x01A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RandomInputDirection;                              // 0x01A4(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AEventTagLocker*                        ErrorCorrectionLocker;                             // 0x01B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DestinationForErrorCorrection;                     // 0x01B8(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraTurnDegreeToInputRate;                       // 0x01C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraLookUpDegreeToInputRate;                     // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PitchOffsetForLookingAtActor;                      // 0x01CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinAngleForCameraPitchParam;                       // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxAngleForCameraPitchParam;                       // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentLocation;                                   // 0x01D8(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentForwardVector;                              // 0x01E4(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIfDebugDrawOnTask;                                // 0x01F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameAIImaginaryCharacter_C*    CurrentImaginaryCharacter;                         // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CurrentRotation;                                   // 0x0200(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         YawDiffYThreshAtMovementDefault;                   // 0x020C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BTS_AJBMovement_Paramed(int32 EntryPoint);
	void UpdateInput();
	void ReceiveDeactivationAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void InputMovementOnFixedDirection();
	void InputMovementLookingForDir();
	void InputMovementLookingAtTarget(class AActor* LookAtTargetActor);
	void InputMovementDefault();
	void ReceiveActivationAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void CloseGateOpenDoorIfInteractable();
	void OpenGateOpenDoorIfInteractable();
	void OpenDoorIfInteractable();
	void CloseGateErrorCorrection();
	void AvoidCollision();
	void OpenGateErrorCorrection();
	void TestRandomInput();
	void RequestToCorrectErrors();
	float GetYawDiffNormalizedDefault(const struct FBlackboardKeySelector& DestinationKey);
	float GetYawDiffNormalizedLookAtTarget(class AActor* LookAtTargetActor);
	float GetYawDiffNormalizedLookAtDir(const struct FBlackboardKeySelector& LookAtDirKey);
	float GetPitchDiffNormalizedForward();
	float GetPitchDiffNormalizedLookAtTarget(class AActor* LookAtTargetActor);
	float GetPitchDiffNormalizedLookAtDir(const struct FBlackboardKeySelector& LookAtDirKey);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTS_AJBMovement_Paramed_C">();
	}
	static class UBTS_AJBMovement_Paramed_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTS_AJBMovement_Paramed_C>();
	}
};
static_assert(alignof(UBTS_AJBMovement_Paramed_C) == 0x000008, "Wrong alignment on UBTS_AJBMovement_Paramed_C");
static_assert(sizeof(UBTS_AJBMovement_Paramed_C) == 0x000210, "Wrong size on UBTS_AJBMovement_Paramed_C");
static_assert(offsetof(UBTS_AJBMovement_Paramed_C, UberGraphFrame) == 0x000098, "Member 'UBTS_AJBMovement_Paramed_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTS_AJBMovement_Paramed_C, RO_DestinationKey) == 0x0000A0, "Member 'UBTS_AJBMovement_Paramed_C::RO_DestinationKey' has a wrong offset!");
static_assert(offsetof(UBTS_AJBMovement_Paramed_C, RO_IsArrivedKey) == 0x0000C8, "Member 'UBTS_AJBMovement_Paramed_C::RO_IsArrivedKey' has a wrong offset!");
static_assert(offsetof(UBTS_AJBMovement_Paramed_C, InputProxy) == 0x0000F0, "Member 'UBTS_AJBMovement_Paramed_C::InputProxy' has a wrong offset!");
static_assert(offsetof(UBTS_AJBMovement_Paramed_C, RO_LookAtActorKey) == 0x0000F8, "Member 'UBTS_AJBMovement_Paramed_C::RO_LookAtActorKey' has a wrong offset!");
static_assert(offsetof(UBTS_AJBMovement_Paramed_C, RO_LookForDirKey) == 0x000120, "Member 'UBTS_AJBMovement_Paramed_C::RO_LookForDirKey' has a wrong offset!");
static_assert(offsetof(UBTS_AJBMovement_Paramed_C, RO_LookAtTurnDeviation) == 0x000148, "Member 'UBTS_AJBMovement_Paramed_C::RO_LookAtTurnDeviation' has a wrong offset!");
static_assert(offsetof(UBTS_AJBMovement_Paramed_C, bUseLookAtTurnDeviation) == 0x000170, "Member 'UBTS_AJBMovement_Paramed_C::bUseLookAtTurnDeviation' has a wrong offset!");
static_assert(offsetof(UBTS_AJBMovement_Paramed_C, Recognition) == 0x000178, "Member 'UBTS_AJBMovement_Paramed_C::Recognition' has a wrong offset!");
static_assert(offsetof(UBTS_AJBMovement_Paramed_C, bMoveCameraOnly) == 0x000180, "Member 'UBTS_AJBMovement_Paramed_C::bMoveCameraOnly' has a wrong offset!");
static_assert(offsetof(UBTS_AJBMovement_Paramed_C, bAlwaysLookAtActor) == 0x000181, "Member 'UBTS_AJBMovement_Paramed_C::bAlwaysLookAtActor' has a wrong offset!");
static_assert(offsetof(UBTS_AJBMovement_Paramed_C, MyAIController) == 0x000188, "Member 'UBTS_AJBMovement_Paramed_C::MyAIController' has a wrong offset!");
static_assert(offsetof(UBTS_AJBMovement_Paramed_C, bAlwaysLookForDir) == 0x000190, "Member 'UBTS_AJBMovement_Paramed_C::bAlwaysLookForDir' has a wrong offset!");
static_assert(offsetof(UBTS_AJBMovement_Paramed_C, DirFixLocker) == 0x000198, "Member 'UBTS_AJBMovement_Paramed_C::DirFixLocker' has a wrong offset!");
static_assert(offsetof(UBTS_AJBMovement_Paramed_C, bSkipUpdateInput) == 0x0001A0, "Member 'UBTS_AJBMovement_Paramed_C::bSkipUpdateInput' has a wrong offset!");
static_assert(offsetof(UBTS_AJBMovement_Paramed_C, RandomInputDirection) == 0x0001A4, "Member 'UBTS_AJBMovement_Paramed_C::RandomInputDirection' has a wrong offset!");
static_assert(offsetof(UBTS_AJBMovement_Paramed_C, ErrorCorrectionLocker) == 0x0001B0, "Member 'UBTS_AJBMovement_Paramed_C::ErrorCorrectionLocker' has a wrong offset!");
static_assert(offsetof(UBTS_AJBMovement_Paramed_C, DestinationForErrorCorrection) == 0x0001B8, "Member 'UBTS_AJBMovement_Paramed_C::DestinationForErrorCorrection' has a wrong offset!");
static_assert(offsetof(UBTS_AJBMovement_Paramed_C, CameraTurnDegreeToInputRate) == 0x0001C4, "Member 'UBTS_AJBMovement_Paramed_C::CameraTurnDegreeToInputRate' has a wrong offset!");
static_assert(offsetof(UBTS_AJBMovement_Paramed_C, CameraLookUpDegreeToInputRate) == 0x0001C8, "Member 'UBTS_AJBMovement_Paramed_C::CameraLookUpDegreeToInputRate' has a wrong offset!");
static_assert(offsetof(UBTS_AJBMovement_Paramed_C, PitchOffsetForLookingAtActor) == 0x0001CC, "Member 'UBTS_AJBMovement_Paramed_C::PitchOffsetForLookingAtActor' has a wrong offset!");
static_assert(offsetof(UBTS_AJBMovement_Paramed_C, MinAngleForCameraPitchParam) == 0x0001D0, "Member 'UBTS_AJBMovement_Paramed_C::MinAngleForCameraPitchParam' has a wrong offset!");
static_assert(offsetof(UBTS_AJBMovement_Paramed_C, MaxAngleForCameraPitchParam) == 0x0001D4, "Member 'UBTS_AJBMovement_Paramed_C::MaxAngleForCameraPitchParam' has a wrong offset!");
static_assert(offsetof(UBTS_AJBMovement_Paramed_C, CurrentLocation) == 0x0001D8, "Member 'UBTS_AJBMovement_Paramed_C::CurrentLocation' has a wrong offset!");
static_assert(offsetof(UBTS_AJBMovement_Paramed_C, CurrentForwardVector) == 0x0001E4, "Member 'UBTS_AJBMovement_Paramed_C::CurrentForwardVector' has a wrong offset!");
static_assert(offsetof(UBTS_AJBMovement_Paramed_C, bIfDebugDrawOnTask) == 0x0001F0, "Member 'UBTS_AJBMovement_Paramed_C::bIfDebugDrawOnTask' has a wrong offset!");
static_assert(offsetof(UBTS_AJBMovement_Paramed_C, CurrentImaginaryCharacter) == 0x0001F8, "Member 'UBTS_AJBMovement_Paramed_C::CurrentImaginaryCharacter' has a wrong offset!");
static_assert(offsetof(UBTS_AJBMovement_Paramed_C, CurrentRotation) == 0x000200, "Member 'UBTS_AJBMovement_Paramed_C::CurrentRotation' has a wrong offset!");
static_assert(offsetof(UBTS_AJBMovement_Paramed_C, YawDiffYThreshAtMovementDefault) == 0x00020C, "Member 'UBTS_AJBMovement_Paramed_C::YawDiffYThreshAtMovementDefault' has a wrong offset!");

}

