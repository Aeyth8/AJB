#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBRobMdSkill

#include "Basic.hpp"

#include "BP_AJBPlacementSkill_classes.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBRobMdSkill.BP_AJBRobMdSkill_C
// 0x0080 (0x03A0 - 0x0320)
class UBP_AJBRobMdSkill_C final : public UBP_AJBPlacementSkill_C
{
public:
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBRobMdSkill_C;                 // 0x0318(0x0008)(Transient, DuplicateTransient)
	TArray<class UClass*>                         ExclusionPassiveClassList;                         // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         DecreaseSP;                                        // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ParticleTag_Success;                               // 0x0338(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         DamagePercentage;                                  // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StandInterpSpeedOnAction;                          // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StandInterpSpeedOnBack;                            // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ActionTargetOffset;                                // 0x034C(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ActionDistanceRate;                                // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTargetIsAlreadyCollected;                         // 0x035C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bTargetIsStand;                                    // 0x035D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35E[0x2];                                      // 0x035E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActionTime;                                        // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_364[0x4];                                      // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            SM_GuideDefault;                                   // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            SM_GuideFailed;                                    // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCompleteActionEnd;                                // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAlreadyFirstAction;                               // 0x0379(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCanceledByInput;                                  // 0x037A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_37B[0x5];                                      // 0x037B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  RemovePassiveContainer;                            // 0x0380(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_AJBRobMdSkill(int32 EntryPoint);
	void TryDisableMDMove();
	void RewindMDMoveLocal();
	void ROC_RewindMDMove();
	void CancelMDMoveServer();
	void OnCheckSpawnObjectServer(const struct FTransform& Transform, class AActor* TargetActor);
	void OnSpawnObject(bool bPlacement, class AActor* Actor);
	void SpawnNewObject(const struct FTransform& Transform, class AActor* TargetActor);
	void ShouldAddPassive(class AAJBInGameCharacterBase* DamagedCharacterBase, class AActor* DamageCauser, bool* bShouldAddPassive);
	void CheckAnyExclusionPassiveActive(class AActor* Target, bool* bValid);
	void EndAction();
	void SpawnObject();
	void TickState_Action();
	void BeginState_ActionCore();
	void OnStateEnd(bool bCancel);
	void CheckPairStand(class AActor* Target, bool* bPairStand);
	void TraceObjectTransform(bool* bPossiblePlacement_0, struct FTransform* Transform, class AActor** TargetActor);
	void ChangePreviewUI(bool bPossiblePlacement_0);
	void ChangeVisual();
	void CalcTraceDistance(bool bGravityLoad, bool bSeparate, float* TraceDistance);
	void PowerUpServer(float Value);
	void PowerDown_Server(float Value);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBRobMdSkill_C">();
	}
	static class UBP_AJBRobMdSkill_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBRobMdSkill_C>();
	}
};
static_assert(alignof(UBP_AJBRobMdSkill_C) == 0x000010, "Wrong alignment on UBP_AJBRobMdSkill_C");
static_assert(sizeof(UBP_AJBRobMdSkill_C) == 0x0003A0, "Wrong size on UBP_AJBRobMdSkill_C");
static_assert(offsetof(UBP_AJBRobMdSkill_C, UberGraphFrame_BP_AJBRobMdSkill_C) == 0x000318, "Member 'UBP_AJBRobMdSkill_C::UberGraphFrame_BP_AJBRobMdSkill_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBRobMdSkill_C, ExclusionPassiveClassList) == 0x000320, "Member 'UBP_AJBRobMdSkill_C::ExclusionPassiveClassList' has a wrong offset!");
static_assert(offsetof(UBP_AJBRobMdSkill_C, DecreaseSP) == 0x000330, "Member 'UBP_AJBRobMdSkill_C::DecreaseSP' has a wrong offset!");
static_assert(offsetof(UBP_AJBRobMdSkill_C, ParticleTag_Success) == 0x000338, "Member 'UBP_AJBRobMdSkill_C::ParticleTag_Success' has a wrong offset!");
static_assert(offsetof(UBP_AJBRobMdSkill_C, DamagePercentage) == 0x000340, "Member 'UBP_AJBRobMdSkill_C::DamagePercentage' has a wrong offset!");
static_assert(offsetof(UBP_AJBRobMdSkill_C, StandInterpSpeedOnAction) == 0x000344, "Member 'UBP_AJBRobMdSkill_C::StandInterpSpeedOnAction' has a wrong offset!");
static_assert(offsetof(UBP_AJBRobMdSkill_C, StandInterpSpeedOnBack) == 0x000348, "Member 'UBP_AJBRobMdSkill_C::StandInterpSpeedOnBack' has a wrong offset!");
static_assert(offsetof(UBP_AJBRobMdSkill_C, ActionTargetOffset) == 0x00034C, "Member 'UBP_AJBRobMdSkill_C::ActionTargetOffset' has a wrong offset!");
static_assert(offsetof(UBP_AJBRobMdSkill_C, ActionDistanceRate) == 0x000358, "Member 'UBP_AJBRobMdSkill_C::ActionDistanceRate' has a wrong offset!");
static_assert(offsetof(UBP_AJBRobMdSkill_C, bTargetIsAlreadyCollected) == 0x00035C, "Member 'UBP_AJBRobMdSkill_C::bTargetIsAlreadyCollected' has a wrong offset!");
static_assert(offsetof(UBP_AJBRobMdSkill_C, bTargetIsStand) == 0x00035D, "Member 'UBP_AJBRobMdSkill_C::bTargetIsStand' has a wrong offset!");
static_assert(offsetof(UBP_AJBRobMdSkill_C, ActionTime) == 0x000360, "Member 'UBP_AJBRobMdSkill_C::ActionTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBRobMdSkill_C, SM_GuideDefault) == 0x000368, "Member 'UBP_AJBRobMdSkill_C::SM_GuideDefault' has a wrong offset!");
static_assert(offsetof(UBP_AJBRobMdSkill_C, SM_GuideFailed) == 0x000370, "Member 'UBP_AJBRobMdSkill_C::SM_GuideFailed' has a wrong offset!");
static_assert(offsetof(UBP_AJBRobMdSkill_C, bCompleteActionEnd) == 0x000378, "Member 'UBP_AJBRobMdSkill_C::bCompleteActionEnd' has a wrong offset!");
static_assert(offsetof(UBP_AJBRobMdSkill_C, bAlreadyFirstAction) == 0x000379, "Member 'UBP_AJBRobMdSkill_C::bAlreadyFirstAction' has a wrong offset!");
static_assert(offsetof(UBP_AJBRobMdSkill_C, bCanceledByInput) == 0x00037A, "Member 'UBP_AJBRobMdSkill_C::bCanceledByInput' has a wrong offset!");
static_assert(offsetof(UBP_AJBRobMdSkill_C, RemovePassiveContainer) == 0x000380, "Member 'UBP_AJBRobMdSkill_C::RemovePassiveContainer' has a wrong offset!");

}

