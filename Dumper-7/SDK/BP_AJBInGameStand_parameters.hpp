#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameStand

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "ST_CharaSkin_structs.hpp"
#include "E_StencilDigit_structs.hpp"
#include "AJB_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.ExecuteUbergraph_BP_AJBInGameStand
// 0x04D8 (0x04D8 - 0x0000)
struct BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue1;           // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue2;           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimMontage>            K2Node_Event_Montage;                              // 0x0030(0x0028)(HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_Tag2;                                 // 0x0058(0x0008)(NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_Event_Operator;                             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_Event_Target;                               // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_CauserType;                           // 0x0070(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_SerialNumber;                         // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Event_Tag1;                                 // 0x0088(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_FloatValue;                           // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Event_Tag;                                  // 0x0098(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveGameplayTag_ReturnValue;            // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_MatchesTag_ReturnValue;                   // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_MatchesTag_ReturnValue1;                  // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A3[0x1];                                       // 0x00A3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue3;           // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue4;           // 0x00AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable;                              // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     K2Node_DynamicCast_AsMaterial_Interface;           // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_CustomEvent_Loaded2;                        // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_Time;                           // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bEnable;                        // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EStandAccompanyTransition                     K2Node_Event_PrevTransition;                       // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EStandAccompanyTransition                     K2Node_Event_NextTransition;                       // 0x00E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bBySeparate;                          // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E5[0x3];                                       // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable1;                                // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue2;                  // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue1;         // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue2;         // 0x0102(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_103[0x5];                                      // 0x0103(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue1; // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue3;         // 0x011A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x011B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Variable2;                                // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue3;                  // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue4;                  // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0128(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                K2Node_CustomEvent_Loaded1;                        // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue5;           // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue2; // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable3;                                // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue5;                  // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable1;                             // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     K2Node_DynamicCast_AsMaterial_Interface1;          // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0172(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_173[0x5];                                      // 0x0173(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_CustomEvent_StandName;                      // 0x0178(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	uint8                                         K2Node_CustomEvent_SkinId;                         // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_ByteToString_ReturnValue;            // 0x0190(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x01A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable2;                             // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue1;               // 0x01B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class USkeletalMesh*                          K2Node_DynamicCast_AsSkeletal_Mesh;                // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D1[0x7];                                      // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetSubstring_ReturnValue;                 // 0x01D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetSubstring_ReturnValue1;                // 0x01E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue2;               // 0x0200(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FST_CharaSkin                          CallFunc_GetDataTableRowFromName_OutRow;           // 0x0210(0x0038)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_249[0x7];                                      // 0x0249(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue3;               // 0x0250(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue4;               // 0x0260(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue5;               // 0x0270(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInterface>      CallFunc_Array_Get_Item;                           // 0x0280(0x0028)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x02AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AD[0x3];                                      // 0x02AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Conv_StringToName_ReturnValue1;           // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_CharaSkin                          CallFunc_GetDataTableRowFromName_OutRow1;          // 0x02B8(0x0038)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue1;     // 0x02F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x02F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F2[0x6];                                      // 0x02F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      CallFunc_Array_Get_Item1;                          // 0x02F8(0x0028)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x0320(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue1;                 // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue3;                     // 0x0331(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_332[0x6];                                      // 0x0332(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_Array_Get_Item2;                          // 0x0338(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bShouldDestroy;                       // 0x0341(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue6;           // 0x0342(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayMode                                     CallFunc_GetPlayMode_PlayMode;                     // 0x0343(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_344[0x4];                                      // 0x0344(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0348(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum1_CmpSuccess;                     // 0x0358(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_359[0x7];                                      // 0x0359(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue6;               // 0x0360(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                K2Node_CustomEvent_Loaded;                         // 0x0370(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Temp_object_Variable3;                             // 0x0378(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          K2Node_DynamicCast_AsSkeletal_Mesh1;               // 0x0380(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x0388(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue1;     // 0x0389(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_38A[0x6];                                      // 0x038A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetStandInfoForChangingSkin_StandName;    // 0x0390(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetStandInfoForChangingSkin_SkinId;       // 0x03A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A1[0x7];                                      // 0x03A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue1;            // 0x03A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue7;               // 0x03B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue7;           // 0x03C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C9[0x7];                                      // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue2;                    // 0x03D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_Array_Get_Item3;                          // 0x03D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x03E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess4;                      // 0x03E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E9[0x7];                                      // 0x03E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x03F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue;     // 0x03F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F9[0x3];                                      // 0x03F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue2;                // 0x03FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue2;                 // 0x0400(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_401[0x7];                                      // 0x0401(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded3;                        // 0x0408(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable; // 0x0410(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate1;             // 0x0420(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         CallFunc_PostAssociatedAkEvent_ReturnValue;        // 0x0430(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_434[0x4];                                      // 0x0434(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate2;             // 0x0438(0x0010)(ZeroConstructor, NoDestructor)
	float                                         K2Node_CustomEvent_Value;                          // 0x0448(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x044C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_44D[0x3];                                      // 0x044D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetTransitionRate_Rate;                   // 0x0450(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0454(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue3;                    // 0x0458(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue1; // 0x0460(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character1;     // 0x0468(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess5;                      // 0x0470(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_471[0x3];                                      // 0x0471(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0474(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumMaterials_ReturnValue;              // 0x0478(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerController_ReturnValue;           // 0x047C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_47D[0x3];                                      // 0x047D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0480(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0484(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_485[0x3];                                      // 0x0485(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable1;                              // 0x0488(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48C[0x4];                                      // 0x048C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate3;             // 0x0490(0x0010)(ZeroConstructor, NoDestructor)
	float                                         K2Node_CustomEvent_DeltaSeconds;                   // 0x04A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x04A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A5[0x3];                                      // 0x04A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x04A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1;                   // 0x04AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue4;                    // 0x04B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UParticleSystemComponent*>       CallFunc_GetComponentsByTag_ReturnValue;           // 0x04B8(0x0010)(ZeroConstructor, ReferenceParm)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character2;     // 0x04C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess6;                      // 0x04D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue1;    // 0x04D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand");
static_assert(sizeof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand) == 0x0004D8, "Wrong size on BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, EntryPoint) == 0x000000, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_IsDedicatedServer_ReturnValue) == 0x000018, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_IsDedicatedServer_ReturnValue1) == 0x000019, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_IsDedicatedServer_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, Temp_int_Array_Index_Variable) == 0x000024, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_IsDedicatedServer_ReturnValue2) == 0x000028, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_IsDedicatedServer_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_Event_Montage) == 0x000030, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_Event_Montage' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_Event_Tag2) == 0x000058, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_Event_Tag2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_Event_Operator) == 0x000060, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_Event_Operator' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_Event_Target) == 0x000068, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_Event_Target' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_Event_CauserType) == 0x000070, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_Event_CauserType' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_Event_SerialNumber) == 0x000078, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_Event_SerialNumber' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, Temp_int_Variable) == 0x00007C, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_Add_IntInt_ReturnValue1) == 0x000080, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_Event_Tag1) == 0x000088, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_Event_Tag1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_Event_FloatValue) == 0x000090, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_Event_FloatValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_Event_Tag) == 0x000098, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_Event_Tag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_RemoveGameplayTag_ReturnValue) == 0x0000A0, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_RemoveGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_MatchesTag_ReturnValue) == 0x0000A1, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_MatchesTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_MatchesTag_ReturnValue1) == 0x0000A2, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_MatchesTag_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_Event_DeltaSeconds) == 0x0000A4, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_IsDedicatedServer_ReturnValue3) == 0x0000A8, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_IsDedicatedServer_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_SwitchEnum_CmpSuccess) == 0x0000A9, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_IsServer_ReturnValue) == 0x0000AA, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_IsServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_IsDedicatedServer_ReturnValue4) == 0x0000AB, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_IsDedicatedServer_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, Temp_object_Variable) == 0x0000B0, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_DynamicCast_AsMaterial_Interface) == 0x0000B8, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_DynamicCast_AsMaterial_Interface' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_DynamicCast_bSuccess) == 0x0000C0, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_GetOwner_ReturnValue) == 0x0000C8, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_CustomEvent_Loaded2) == 0x0000D0, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_CustomEvent_Loaded2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_IsValid_ReturnValue) == 0x0000D8, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_CustomEvent_Time) == 0x0000DC, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_CustomEvent_Time' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_CustomEvent_bEnable) == 0x0000E0, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_CustomEvent_bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_Not_PreBool_ReturnValue) == 0x0000E1, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_Event_PrevTransition) == 0x0000E2, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_Event_PrevTransition' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_Event_NextTransition) == 0x0000E3, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_Event_NextTransition' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_Event_bBySeparate) == 0x0000E4, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_Event_bBySeparate' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, Temp_int_Variable1) == 0x0000E8, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::Temp_int_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_Add_IntInt_ReturnValue2) == 0x0000EC, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_Add_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x0000F0, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000100, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_EqualEqual_ByteByte_ReturnValue1) == 0x000101, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_EqualEqual_ByteByte_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_EqualEqual_ByteByte_ReturnValue2) == 0x000102, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_EqualEqual_ByteByte_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue1) == 0x000108, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_BooleanOR_ReturnValue) == 0x000118, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_BooleanAND_ReturnValue) == 0x000119, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_EqualEqual_ByteByte_ReturnValue3) == 0x00011A, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_EqualEqual_ByteByte_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_BooleanAND_ReturnValue1) == 0x00011B, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, Temp_int_Variable2) == 0x00011C, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::Temp_int_Variable2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_Add_IntInt_ReturnValue3) == 0x000120, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_Add_IntInt_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_Add_IntInt_ReturnValue4) == 0x000124, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_Add_IntInt_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_Conv_IntToString_ReturnValue) == 0x000128, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_CustomEvent_Loaded1) == 0x000138, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_CustomEvent_Loaded1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_IsDedicatedServer_ReturnValue5) == 0x000140, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_IsDedicatedServer_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue2) == 0x000148, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, Temp_int_Variable3) == 0x000158, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::Temp_int_Variable3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_Add_IntInt_ReturnValue5) == 0x00015C, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_Add_IntInt_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, Temp_object_Variable1) == 0x000160, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::Temp_object_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_DynamicCast_AsMaterial_Interface1) == 0x000168, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_DynamicCast_AsMaterial_Interface1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_DynamicCast_bSuccess1) == 0x000170, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_IsValid_ReturnValue1) == 0x000171, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_IsValid_ReturnValue2) == 0x000172, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_CustomEvent_StandName) == 0x000178, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_CustomEvent_StandName' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_CustomEvent_SkinId) == 0x000188, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_CustomEvent_SkinId' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_Conv_ByteToString_ReturnValue) == 0x000190, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_Conv_ByteToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_Concat_StrStr_ReturnValue) == 0x0001A0, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, Temp_object_Variable2) == 0x0001B0, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::Temp_object_Variable2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_Concat_StrStr_ReturnValue1) == 0x0001B8, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_Concat_StrStr_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_DynamicCast_AsSkeletal_Mesh) == 0x0001C8, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_DynamicCast_AsSkeletal_Mesh' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_DynamicCast_bSuccess2) == 0x0001D0, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_GetSubstring_ReturnValue) == 0x0001D8, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_GetSubstring_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_GetSubstring_ReturnValue1) == 0x0001E8, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_GetSubstring_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_Conv_StringToName_ReturnValue) == 0x0001F8, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_Concat_StrStr_ReturnValue2) == 0x000200, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_Concat_StrStr_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_GetDataTableRowFromName_OutRow) == 0x000210, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000248, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_Concat_StrStr_ReturnValue3) == 0x000250, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_Concat_StrStr_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_Concat_StrStr_ReturnValue4) == 0x000260, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_Concat_StrStr_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_Concat_StrStr_ReturnValue5) == 0x000270, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_Concat_StrStr_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_Array_Get_Item) == 0x000280, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_Array_Length_ReturnValue) == 0x0002A8, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_Less_IntInt_ReturnValue) == 0x0002AC, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_Conv_StringToName_ReturnValue1) == 0x0002B0, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_Conv_StringToName_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_GetDataTableRowFromName_OutRow1) == 0x0002B8, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_GetDataTableRowFromName_OutRow1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_GetDataTableRowFromName_ReturnValue1) == 0x0002F0, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_GetDataTableRowFromName_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0002F1, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_Array_Get_Item1) == 0x0002F8, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_Array_Length_ReturnValue1) == 0x000320, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_GetOwner_ReturnValue1) == 0x000328, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_Less_IntInt_ReturnValue1) == 0x000330, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_Less_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_IsValid_ReturnValue3) == 0x000331, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_IsValid_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_Array_Get_Item2) == 0x000338, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_Array_Get_Item2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000340, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_Event_bShouldDestroy) == 0x000341, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_Event_bShouldDestroy' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_IsDedicatedServer_ReturnValue6) == 0x000342, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_IsDedicatedServer_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_GetPlayMode_PlayMode) == 0x000343, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_GetPlayMode_PlayMode' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_GetDisplayName_ReturnValue) == 0x000348, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_SwitchEnum1_CmpSuccess) == 0x000358, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_SwitchEnum1_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_Concat_StrStr_ReturnValue6) == 0x000360, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_Concat_StrStr_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_CustomEvent_Loaded) == 0x000370, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_CustomEvent_Loaded' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, Temp_object_Variable3) == 0x000378, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::Temp_object_Variable3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_DynamicCast_AsSkeletal_Mesh1) == 0x000380, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_DynamicCast_AsSkeletal_Mesh1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_DynamicCast_bSuccess3) == 0x000388, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_EqualEqual_ObjectObject_ReturnValue1) == 0x000389, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_EqualEqual_ObjectObject_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_GetStandInfoForChangingSkin_StandName) == 0x000390, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_GetStandInfoForChangingSkin_StandName' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_GetStandInfoForChangingSkin_SkinId) == 0x0003A0, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_GetStandInfoForChangingSkin_SkinId' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_Conv_IntToString_ReturnValue1) == 0x0003A8, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_Conv_IntToString_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_Concat_StrStr_ReturnValue7) == 0x0003B8, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_Concat_StrStr_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_IsDedicatedServer_ReturnValue7) == 0x0003C8, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_IsDedicatedServer_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_GetOwner_ReturnValue2) == 0x0003D0, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_GetOwner_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_Array_Get_Item3) == 0x0003D8, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_Array_Get_Item3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x0003E0, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_DynamicCast_bSuccess4) == 0x0003E8, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_DynamicCast_bSuccess4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x0003F0, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_HasLocalSharedController_ReturnValue) == 0x0003F8, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_HasLocalSharedController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_Array_Length_ReturnValue2) == 0x0003FC, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_Array_Length_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_Less_IntInt_ReturnValue2) == 0x000400, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_Less_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_CustomEvent_Loaded3) == 0x000408, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_CustomEvent_Loaded3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, Temp_delegate_Variable) == 0x000410, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_CreateDelegate_OutputDelegate1) == 0x000420, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_PostAssociatedAkEvent_ReturnValue) == 0x000430, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_PostAssociatedAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_CreateDelegate_OutputDelegate2) == 0x000438, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_CreateDelegate_OutputDelegate2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_CustomEvent_Value) == 0x000448, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_CustomEvent_Value' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00044C, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_GetTransitionRate_Rate) == 0x000450, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_GetTransitionRate_Rate' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, Temp_float_Variable) == 0x000454, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_GetOwner_ReturnValue3) == 0x000458, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_GetOwner_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_CreateDynamicMaterialInstance_ReturnValue1) == 0x000460, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_CreateDynamicMaterialInstance_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_DynamicCast_AsBP_AJBIn_Game_Character1) == 0x000468, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_DynamicCast_AsBP_AJBIn_Game_Character1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_DynamicCast_bSuccess5) == 0x000470, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_DynamicCast_bSuccess5' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_Array_Add_ReturnValue) == 0x000474, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_GetNumMaterials_ReturnValue) == 0x000478, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_GetNumMaterials_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_IsPlayerController_ReturnValue) == 0x00047C, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_IsPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_Subtract_IntInt_ReturnValue) == 0x000480, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000484, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, Temp_float_Variable1) == 0x000488, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::Temp_float_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_CreateDelegate_OutputDelegate3) == 0x000490, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_CreateDelegate_OutputDelegate3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_CustomEvent_DeltaSeconds) == 0x0004A0, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_CustomEvent_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, Temp_bool_Variable) == 0x0004A4, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_Select_Default) == 0x0004A8, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_Array_Add_ReturnValue1) == 0x0004AC, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_Array_Add_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_GetOwner_ReturnValue4) == 0x0004B0, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_GetOwner_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_GetComponentsByTag_ReturnValue) == 0x0004B8, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_GetComponentsByTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_DynamicCast_AsBP_AJBIn_Game_Character2) == 0x0004C8, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_DynamicCast_AsBP_AJBIn_Game_Character2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, K2Node_DynamicCast_bSuccess6) == 0x0004D0, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::K2Node_DynamicCast_bSuccess6' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand, CallFunc_HasLocalSharedController_ReturnValue1) == 0x0004D1, "Member 'BP_AJBInGameStand_C_ExecuteUbergraph_BP_AJBInGameStand::CallFunc_HasLocalSharedController_ReturnValue1' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.Tick_WithoutOwner
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBInGameStand_C_Tick_WithoutOwner final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_C_Tick_WithoutOwner) == 0x000004, "Wrong alignment on BP_AJBInGameStand_C_Tick_WithoutOwner");
static_assert(sizeof(BP_AJBInGameStand_C_Tick_WithoutOwner) == 0x000004, "Wrong size on BP_AJBInGameStand_C_Tick_WithoutOwner");
static_assert(offsetof(BP_AJBInGameStand_C_Tick_WithoutOwner, DeltaSeconds) == 0x000000, "Member 'BP_AJBInGameStand_C_Tick_WithoutOwner::DeltaSeconds' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.UpdateVisible
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBInGameStand_C_UpdateVisible final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_C_UpdateVisible) == 0x000004, "Wrong alignment on BP_AJBInGameStand_C_UpdateVisible");
static_assert(sizeof(BP_AJBInGameStand_C_UpdateVisible) == 0x000004, "Wrong size on BP_AJBInGameStand_C_UpdateVisible");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateVisible, Value) == 0x000000, "Member 'BP_AJBInGameStand_C_UpdateVisible::Value' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.CleanUp
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameStand_C_CleanUp final
{
public:
	bool                                          bShouldDestroy;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameStand_C_CleanUp) == 0x000001, "Wrong alignment on BP_AJBInGameStand_C_CleanUp");
static_assert(sizeof(BP_AJBInGameStand_C_CleanUp) == 0x000001, "Wrong size on BP_AJBInGameStand_C_CleanUp");
static_assert(offsetof(BP_AJBInGameStand_C_CleanUp, bShouldDestroy) == 0x000000, "Member 'BP_AJBInGameStand_C_CleanUp::bShouldDestroy' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.ChangeSkin
// 0x0018 (0x0018 - 0x0000)
struct BP_AJBInGameStand_C_ChangeSkin final
{
public:
	class FString                                 StandName;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         skinID;                                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_C_ChangeSkin) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_ChangeSkin");
static_assert(sizeof(BP_AJBInGameStand_C_ChangeSkin) == 0x000018, "Wrong size on BP_AJBInGameStand_C_ChangeSkin");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeSkin, StandName) == 0x000000, "Member 'BP_AJBInGameStand_C_ChangeSkin::StandName' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeSkin, skinID) == 0x000010, "Member 'BP_AJBInGameStand_C_ChangeSkin::skinID' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.OnTransitionChanged
// 0x0003 (0x0003 - 0x0000)
struct BP_AJBInGameStand_C_OnTransitionChanged final
{
public:
	EStandAccompanyTransition                     PrevTransition;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EStandAccompanyTransition                     NextTransition;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBySeparate;                                       // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameStand_C_OnTransitionChanged) == 0x000001, "Wrong alignment on BP_AJBInGameStand_C_OnTransitionChanged");
static_assert(sizeof(BP_AJBInGameStand_C_OnTransitionChanged) == 0x000003, "Wrong size on BP_AJBInGameStand_C_OnTransitionChanged");
static_assert(offsetof(BP_AJBInGameStand_C_OnTransitionChanged, PrevTransition) == 0x000000, "Member 'BP_AJBInGameStand_C_OnTransitionChanged::PrevTransition' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_OnTransitionChanged, NextTransition) == 0x000001, "Member 'BP_AJBInGameStand_C_OnTransitionChanged::NextTransition' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_OnTransitionChanged, bBySeparate) == 0x000002, "Member 'BP_AJBInGameStand_C_OnTransitionChanged::bBySeparate' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.ReceiveTheWorld
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBInGameStand_C_ReceiveTheWorld final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnable;                                           // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameStand_C_ReceiveTheWorld) == 0x000004, "Wrong alignment on BP_AJBInGameStand_C_ReceiveTheWorld");
static_assert(sizeof(BP_AJBInGameStand_C_ReceiveTheWorld) == 0x000008, "Wrong size on BP_AJBInGameStand_C_ReceiveTheWorld");
static_assert(offsetof(BP_AJBInGameStand_C_ReceiveTheWorld, Time) == 0x000000, "Member 'BP_AJBInGameStand_C_ReceiveTheWorld::Time' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ReceiveTheWorld, bEnable) == 0x000004, "Member 'BP_AJBInGameStand_C_ReceiveTheWorld::bEnable' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBInGameStand_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_AJBInGameStand_C_ReceiveTick");
static_assert(sizeof(BP_AJBInGameStand_C_ReceiveTick) == 0x000004, "Wrong size on BP_AJBInGameStand_C_ReceiveTick");
static_assert(offsetof(BP_AJBInGameStand_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_AJBInGameStand_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.RemoveGameplayTag
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBInGameStand_C_RemoveGameplayTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_C_RemoveGameplayTag) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_RemoveGameplayTag");
static_assert(sizeof(BP_AJBInGameStand_C_RemoveGameplayTag) == 0x000008, "Wrong size on BP_AJBInGameStand_C_RemoveGameplayTag");
static_assert(offsetof(BP_AJBInGameStand_C_RemoveGameplayTag, Tag) == 0x000000, "Member 'BP_AJBInGameStand_C_RemoveGameplayTag::Tag' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.AddGameplayTagWithFloat
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBInGameStand_C_AddGameplayTagWithFloat final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	float                                         FloatValue;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_C_AddGameplayTagWithFloat) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_AddGameplayTagWithFloat");
static_assert(sizeof(BP_AJBInGameStand_C_AddGameplayTagWithFloat) == 0x000010, "Wrong size on BP_AJBInGameStand_C_AddGameplayTagWithFloat");
static_assert(offsetof(BP_AJBInGameStand_C_AddGameplayTagWithFloat, Tag) == 0x000000, "Member 'BP_AJBInGameStand_C_AddGameplayTagWithFloat::Tag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_AddGameplayTagWithFloat, FloatValue) == 0x000008, "Member 'BP_AJBInGameStand_C_AddGameplayTagWithFloat::FloatValue' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.AddGameplayTag
// 0x0028 (0x0028 - 0x0000)
struct BP_AJBInGameStand_C_AddGameplayTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Operator;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Target;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CauserType;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         SerialNumber;                                      // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_C_AddGameplayTag) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_AddGameplayTag");
static_assert(sizeof(BP_AJBInGameStand_C_AddGameplayTag) == 0x000028, "Wrong size on BP_AJBInGameStand_C_AddGameplayTag");
static_assert(offsetof(BP_AJBInGameStand_C_AddGameplayTag, Tag) == 0x000000, "Member 'BP_AJBInGameStand_C_AddGameplayTag::Tag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_AddGameplayTag, Operator) == 0x000008, "Member 'BP_AJBInGameStand_C_AddGameplayTag::Operator' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_AddGameplayTag, Target) == 0x000010, "Member 'BP_AJBInGameStand_C_AddGameplayTag::Target' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_AddGameplayTag, CauserType) == 0x000018, "Member 'BP_AJBInGameStand_C_AddGameplayTag::CauserType' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_AddGameplayTag, SerialNumber) == 0x000020, "Member 'BP_AJBInGameStand_C_AddGameplayTag::SerialNumber' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.OnPreEmoteAccompany
// 0x0028 (0x0028 - 0x0000)
struct BP_AJBInGameStand_C_OnPreEmoteAccompany final
{
public:
	TSoftObjectPtr<class UAnimMontage>            Montage;                                           // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_C_OnPreEmoteAccompany) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_OnPreEmoteAccompany");
static_assert(sizeof(BP_AJBInGameStand_C_OnPreEmoteAccompany) == 0x000028, "Wrong size on BP_AJBInGameStand_C_OnPreEmoteAccompany");
static_assert(offsetof(BP_AJBInGameStand_C_OnPreEmoteAccompany, Montage) == 0x000000, "Member 'BP_AJBInGameStand_C_OnPreEmoteAccompany::Montage' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.OnLoaded_41AA3E1A4827BE19D3BF5B91704CF05F
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBInGameStand_C_OnLoaded_41AA3E1A4827BE19D3BF5B91704CF05F final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_C_OnLoaded_41AA3E1A4827BE19D3BF5B91704CF05F) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_OnLoaded_41AA3E1A4827BE19D3BF5B91704CF05F");
static_assert(sizeof(BP_AJBInGameStand_C_OnLoaded_41AA3E1A4827BE19D3BF5B91704CF05F) == 0x000008, "Wrong size on BP_AJBInGameStand_C_OnLoaded_41AA3E1A4827BE19D3BF5B91704CF05F");
static_assert(offsetof(BP_AJBInGameStand_C_OnLoaded_41AA3E1A4827BE19D3BF5B91704CF05F, Loaded) == 0x000000, "Member 'BP_AJBInGameStand_C_OnLoaded_41AA3E1A4827BE19D3BF5B91704CF05F::Loaded' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.OnLoaded_E20DA2574FB49B31E9DEF5A90663527D
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBInGameStand_C_OnLoaded_E20DA2574FB49B31E9DEF5A90663527D final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_C_OnLoaded_E20DA2574FB49B31E9DEF5A90663527D) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_OnLoaded_E20DA2574FB49B31E9DEF5A90663527D");
static_assert(sizeof(BP_AJBInGameStand_C_OnLoaded_E20DA2574FB49B31E9DEF5A90663527D) == 0x000008, "Wrong size on BP_AJBInGameStand_C_OnLoaded_E20DA2574FB49B31E9DEF5A90663527D");
static_assert(offsetof(BP_AJBInGameStand_C_OnLoaded_E20DA2574FB49B31E9DEF5A90663527D, Loaded) == 0x000000, "Member 'BP_AJBInGameStand_C_OnLoaded_E20DA2574FB49B31E9DEF5A90663527D::Loaded' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.OnLoaded_E20DA2574FB49B31E9DEF5A94242ACE2
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBInGameStand_C_OnLoaded_E20DA2574FB49B31E9DEF5A94242ACE2 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_C_OnLoaded_E20DA2574FB49B31E9DEF5A94242ACE2) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_OnLoaded_E20DA2574FB49B31E9DEF5A94242ACE2");
static_assert(sizeof(BP_AJBInGameStand_C_OnLoaded_E20DA2574FB49B31E9DEF5A94242ACE2) == 0x000008, "Wrong size on BP_AJBInGameStand_C_OnLoaded_E20DA2574FB49B31E9DEF5A94242ACE2");
static_assert(offsetof(BP_AJBInGameStand_C_OnLoaded_E20DA2574FB49B31E9DEF5A94242ACE2, Loaded) == 0x000000, "Member 'BP_AJBInGameStand_C_OnLoaded_E20DA2574FB49B31E9DEF5A94242ACE2::Loaded' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.OnLoaded_41AA3E1A4827BE19D3BF5B9104A325BF
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBInGameStand_C_OnLoaded_41AA3E1A4827BE19D3BF5B9104A325BF final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_C_OnLoaded_41AA3E1A4827BE19D3BF5B9104A325BF) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_OnLoaded_41AA3E1A4827BE19D3BF5B9104A325BF");
static_assert(sizeof(BP_AJBInGameStand_C_OnLoaded_41AA3E1A4827BE19D3BF5B9104A325BF) == 0x000008, "Wrong size on BP_AJBInGameStand_C_OnLoaded_41AA3E1A4827BE19D3BF5B9104A325BF");
static_assert(offsetof(BP_AJBInGameStand_C_OnLoaded_41AA3E1A4827BE19D3BF5B9104A325BF, Loaded) == 0x000000, "Member 'BP_AJBInGameStand_C_OnLoaded_41AA3E1A4827BE19D3BF5B9104A325BF::Loaded' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.UpdateTransform
// 0x0030 (0x0030 - 0x0000)
struct BP_AJBInGameStand_C_UpdateTransform final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameMovableStand_C*            K2Node_DynamicCast_AsBP_AJBIn_Game_Movable_Stand;  // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsForwardTransition_ReturnValue;          // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameStand_C_UpdateTransform) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_UpdateTransform");
static_assert(sizeof(BP_AJBInGameStand_C_UpdateTransform) == 0x000030, "Wrong size on BP_AJBInGameStand_C_UpdateTransform");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransform, DeltaSeconds) == 0x000000, "Member 'BP_AJBInGameStand_C_UpdateTransform::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransform, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBInGameStand_C_UpdateTransform::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransform, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000010, "Member 'BP_AJBInGameStand_C_UpdateTransform::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransform, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AJBInGameStand_C_UpdateTransform::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransform, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'BP_AJBInGameStand_C_UpdateTransform::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransform, K2Node_DynamicCast_AsBP_AJBIn_Game_Movable_Stand) == 0x000020, "Member 'BP_AJBInGameStand_C_UpdateTransform::K2Node_DynamicCast_AsBP_AJBIn_Game_Movable_Stand' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransform, K2Node_DynamicCast_bSuccess1) == 0x000028, "Member 'BP_AJBInGameStand_C_UpdateTransform::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransform, CallFunc_IsForwardTransition_ReturnValue) == 0x000029, "Member 'BP_AJBInGameStand_C_UpdateTransform::CallFunc_IsForwardTransition_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.UpdateAccompany
// 0x0080 (0x0080 - 0x0000)
struct BP_AJBInGameStand_C_UpdateAccompany final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               CallFunc_GetAJBCharacterFromActor_CharacterBP;     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBCharacterFromActor_bSuccess;        // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAlive_IsAlive;                          // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue;     // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBackwardTransition_ReturnValue;         // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue1;         // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue1;                   // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue2;                    // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character1;     // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue1;    // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5B[0x1];                                       // 0x005B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable1;                              // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue2;         // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsForwardTransition_ReturnValue;          // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue3;         // 0x0066(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_67[0x1];                                       // 0x0067(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue1;        // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue3;                  // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_C_UpdateAccompany) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_UpdateAccompany");
static_assert(sizeof(BP_AJBInGameStand_C_UpdateAccompany) == 0x000080, "Wrong size on BP_AJBInGameStand_C_UpdateAccompany");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, DeltaSeconds) == 0x000000, "Member 'BP_AJBInGameStand_C_UpdateAccompany::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBInGameStand_C_UpdateAccompany::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, CallFunc_GetOwner_ReturnValue1) == 0x000010, "Member 'BP_AJBInGameStand_C_UpdateAccompany::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000018, "Member 'BP_AJBInGameStand_C_UpdateAccompany::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_AJBInGameStand_C_UpdateAccompany::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, CallFunc_GetAJBCharacterFromActor_CharacterBP) == 0x000028, "Member 'BP_AJBInGameStand_C_UpdateAccompany::CallFunc_GetAJBCharacterFromActor_CharacterBP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, CallFunc_GetAJBCharacterFromActor_bSuccess) == 0x000030, "Member 'BP_AJBInGameStand_C_UpdateAccompany::CallFunc_GetAJBCharacterFromActor_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, CallFunc_IsAlive_IsAlive) == 0x000031, "Member 'BP_AJBInGameStand_C_UpdateAccompany::CallFunc_IsAlive_IsAlive' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, CallFunc_HasLocalSharedController_ReturnValue) == 0x000032, "Member 'BP_AJBInGameStand_C_UpdateAccompany::CallFunc_HasLocalSharedController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, CallFunc_IsValid_ReturnValue) == 0x000033, "Member 'BP_AJBInGameStand_C_UpdateAccompany::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, CallFunc_IsValid_ReturnValue1) == 0x000034, "Member 'BP_AJBInGameStand_C_UpdateAccompany::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, CallFunc_BooleanAND_ReturnValue) == 0x000035, "Member 'BP_AJBInGameStand_C_UpdateAccompany::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, CallFunc_IsBackwardTransition_ReturnValue) == 0x000036, "Member 'BP_AJBInGameStand_C_UpdateAccompany::CallFunc_IsBackwardTransition_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, CallFunc_BooleanOR_ReturnValue) == 0x000037, "Member 'BP_AJBInGameStand_C_UpdateAccompany::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, CallFunc_Not_PreBool_ReturnValue) == 0x000038, "Member 'BP_AJBInGameStand_C_UpdateAccompany::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000039, "Member 'BP_AJBInGameStand_C_UpdateAccompany::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00003A, "Member 'BP_AJBInGameStand_C_UpdateAccompany::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, CallFunc_EqualEqual_ByteByte_ReturnValue1) == 0x00003B, "Member 'BP_AJBInGameStand_C_UpdateAccompany::CallFunc_EqualEqual_ByteByte_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, CallFunc_BooleanOR_ReturnValue1) == 0x00003C, "Member 'BP_AJBInGameStand_C_UpdateAccompany::CallFunc_BooleanOR_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, CallFunc_GetOwner_ReturnValue2) == 0x000040, "Member 'BP_AJBInGameStand_C_UpdateAccompany::CallFunc_GetOwner_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, CallFunc_BooleanAND_ReturnValue1) == 0x000048, "Member 'BP_AJBInGameStand_C_UpdateAccompany::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, K2Node_DynamicCast_AsBP_AJBIn_Game_Character1) == 0x000050, "Member 'BP_AJBInGameStand_C_UpdateAccompany::K2Node_DynamicCast_AsBP_AJBIn_Game_Character1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, K2Node_DynamicCast_bSuccess1) == 0x000058, "Member 'BP_AJBInGameStand_C_UpdateAccompany::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, CallFunc_HasLocalSharedController_ReturnValue1) == 0x000059, "Member 'BP_AJBInGameStand_C_UpdateAccompany::CallFunc_HasLocalSharedController_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, Temp_bool_Variable) == 0x00005A, "Member 'BP_AJBInGameStand_C_UpdateAccompany::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, Temp_float_Variable) == 0x00005C, "Member 'BP_AJBInGameStand_C_UpdateAccompany::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, Temp_float_Variable1) == 0x000060, "Member 'BP_AJBInGameStand_C_UpdateAccompany::Temp_float_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, CallFunc_EqualEqual_ByteByte_ReturnValue2) == 0x000064, "Member 'BP_AJBInGameStand_C_UpdateAccompany::CallFunc_EqualEqual_ByteByte_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, CallFunc_IsForwardTransition_ReturnValue) == 0x000065, "Member 'BP_AJBInGameStand_C_UpdateAccompany::CallFunc_IsForwardTransition_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, CallFunc_EqualEqual_ByteByte_ReturnValue3) == 0x000066, "Member 'BP_AJBInGameStand_C_UpdateAccompany::CallFunc_EqualEqual_ByteByte_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, K2Node_Select_Default) == 0x000068, "Member 'BP_AJBInGameStand_C_UpdateAccompany::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00006C, "Member 'BP_AJBInGameStand_C_UpdateAccompany::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000070, "Member 'BP_AJBInGameStand_C_UpdateAccompany::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, CallFunc_LessEqual_FloatFloat_ReturnValue1) == 0x000071, "Member 'BP_AJBInGameStand_C_UpdateAccompany::CallFunc_LessEqual_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, CallFunc_BooleanAND_ReturnValue2) == 0x000072, "Member 'BP_AJBInGameStand_C_UpdateAccompany::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, CallFunc_BooleanAND_ReturnValue3) == 0x000073, "Member 'BP_AJBInGameStand_C_UpdateAccompany::CallFunc_BooleanAND_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, CallFunc_Add_FloatFloat_ReturnValue) == 0x000074, "Member 'BP_AJBInGameStand_C_UpdateAccompany::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAccompany, CallFunc_FClamp_ReturnValue) == 0x000078, "Member 'BP_AJBInGameStand_C_UpdateAccompany::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.GetTransitionRate
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBInGameStand_C_GetTransitionRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_C_GetTransitionRate) == 0x000004, "Wrong alignment on BP_AJBInGameStand_C_GetTransitionRate");
static_assert(sizeof(BP_AJBInGameStand_C_GetTransitionRate) == 0x000008, "Wrong size on BP_AJBInGameStand_C_GetTransitionRate");
static_assert(offsetof(BP_AJBInGameStand_C_GetTransitionRate, Rate) == 0x000000, "Member 'BP_AJBInGameStand_C_GetTransitionRate::Rate' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetTransitionRate, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_AJBInGameStand_C_GetTransitionRate::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.GetFixedLocation
// 0x0048 (0x0048 - 0x0000)
struct BP_AJBInGameStand_C_GetFixedLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetFixedRelativeLocation_RelativeLocation; // 0x000C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x002C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0038(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_C_GetFixedLocation) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_GetFixedLocation");
static_assert(sizeof(BP_AJBInGameStand_C_GetFixedLocation) == 0x000048, "Wrong size on BP_AJBInGameStand_C_GetFixedLocation");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedLocation, Location) == 0x000000, "Member 'BP_AJBInGameStand_C_GetFixedLocation::Location' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedLocation, CallFunc_GetFixedRelativeLocation_RelativeLocation) == 0x00000C, "Member 'BP_AJBInGameStand_C_GetFixedLocation::CallFunc_GetFixedRelativeLocation_RelativeLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedLocation, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'BP_AJBInGameStand_C_GetFixedLocation::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedLocation, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000020, "Member 'BP_AJBInGameStand_C_GetFixedLocation::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedLocation, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_AJBInGameStand_C_GetFixedLocation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00002C, "Member 'BP_AJBInGameStand_C_GetFixedLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedLocation, CallFunc_Add_VectorVector_ReturnValue) == 0x000038, "Member 'BP_AJBInGameStand_C_GetFixedLocation::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.StopMontage
// 0x0018 (0x0018 - 0x0000)
struct BP_AJBInGameStand_C_StopMontage final
{
public:
	float                                         InBlendOutTime;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UAnimMontage*                     Montage;                                           // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_C_StopMontage) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_StopMontage");
static_assert(sizeof(BP_AJBInGameStand_C_StopMontage) == 0x000018, "Wrong size on BP_AJBInGameStand_C_StopMontage");
static_assert(offsetof(BP_AJBInGameStand_C_StopMontage, InBlendOutTime) == 0x000000, "Member 'BP_AJBInGameStand_C_StopMontage::InBlendOutTime' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_StopMontage, Montage) == 0x000008, "Member 'BP_AJBInGameStand_C_StopMontage::Montage' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_StopMontage, CallFunc_GetAnimInstance_ReturnValue) == 0x000010, "Member 'BP_AJBInGameStand_C_StopMontage::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.CheckSeparation
// 0x0003 (0x0003 - 0x0000)
struct BP_AJBInGameStand_C_CheckSeparation final
{
public:
	bool                                          bIncludeTransition;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsSeparate;                                        // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSeparating_ReturnValue;                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameStand_C_CheckSeparation) == 0x000001, "Wrong alignment on BP_AJBInGameStand_C_CheckSeparation");
static_assert(sizeof(BP_AJBInGameStand_C_CheckSeparation) == 0x000003, "Wrong size on BP_AJBInGameStand_C_CheckSeparation");
static_assert(offsetof(BP_AJBInGameStand_C_CheckSeparation, bIncludeTransition) == 0x000000, "Member 'BP_AJBInGameStand_C_CheckSeparation::bIncludeTransition' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_CheckSeparation, IsSeparate) == 0x000001, "Member 'BP_AJBInGameStand_C_CheckSeparation::IsSeparate' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_CheckSeparation, CallFunc_IsSeparating_ReturnValue) == 0x000002, "Member 'BP_AJBInGameStand_C_CheckSeparation::CallFunc_IsSeparating_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.InitializeStatus
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameStand_C_InitializeStatus final
{
public:
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameStand_C_InitializeStatus) == 0x000001, "Wrong alignment on BP_AJBInGameStand_C_InitializeStatus");
static_assert(sizeof(BP_AJBInGameStand_C_InitializeStatus) == 0x000001, "Wrong size on BP_AJBInGameStand_C_InitializeStatus");
static_assert(offsetof(BP_AJBInGameStand_C_InitializeStatus, CallFunc_IsServer_ReturnValue) == 0x000000, "Member 'BP_AJBInGameStand_C_InitializeStatus::CallFunc_IsServer_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.GetDefaultMaxSpeed
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBInGameStand_C_GetDefaultMaxSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_C_GetDefaultMaxSpeed) == 0x000004, "Wrong alignment on BP_AJBInGameStand_C_GetDefaultMaxSpeed");
static_assert(sizeof(BP_AJBInGameStand_C_GetDefaultMaxSpeed) == 0x000004, "Wrong size on BP_AJBInGameStand_C_GetDefaultMaxSpeed");
static_assert(offsetof(BP_AJBInGameStand_C_GetDefaultMaxSpeed, ReturnValue) == 0x000000, "Member 'BP_AJBInGameStand_C_GetDefaultMaxSpeed::ReturnValue' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.SetMoveSpeedScale
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBInGameStand_C_SetMoveSpeedScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_C_SetMoveSpeedScale) == 0x000004, "Wrong alignment on BP_AJBInGameStand_C_SetMoveSpeedScale");
static_assert(sizeof(BP_AJBInGameStand_C_SetMoveSpeedScale) == 0x000008, "Wrong size on BP_AJBInGameStand_C_SetMoveSpeedScale");
static_assert(offsetof(BP_AJBInGameStand_C_SetMoveSpeedScale, Scale) == 0x000000, "Member 'BP_AJBInGameStand_C_SetMoveSpeedScale::Scale' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_SetMoveSpeedScale, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_AJBInGameStand_C_SetMoveSpeedScale::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.ChangeOffset
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBInGameStand_C_ChangeOffset final
{
public:
	float                                         YawToPlayer_deg__0;                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceToPlayer_cm__0;                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OffsetZToPlayer_cm__0;                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue1;     // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue2;     // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameStand_C_ChangeOffset) == 0x000004, "Wrong alignment on BP_AJBInGameStand_C_ChangeOffset");
static_assert(sizeof(BP_AJBInGameStand_C_ChangeOffset) == 0x000010, "Wrong size on BP_AJBInGameStand_C_ChangeOffset");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeOffset, YawToPlayer_deg__0) == 0x000000, "Member 'BP_AJBInGameStand_C_ChangeOffset::YawToPlayer_deg__0' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeOffset, DistanceToPlayer_cm__0) == 0x000004, "Member 'BP_AJBInGameStand_C_ChangeOffset::DistanceToPlayer_cm__0' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeOffset, OffsetZToPlayer_cm__0) == 0x000008, "Member 'BP_AJBInGameStand_C_ChangeOffset::OffsetZToPlayer_cm__0' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeOffset, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_AJBInGameStand_C_ChangeOffset::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeOffset, CallFunc_GreaterEqual_FloatFloat_ReturnValue1) == 0x00000D, "Member 'BP_AJBInGameStand_C_ChangeOffset::CallFunc_GreaterEqual_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeOffset, CallFunc_GreaterEqual_FloatFloat_ReturnValue2) == 0x00000E, "Member 'BP_AJBInGameStand_C_ChangeOffset::CallFunc_GreaterEqual_FloatFloat_ReturnValue2' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.ChangeAuraEnable
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameStand_C_ChangeAuraEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameStand_C_ChangeAuraEnable) == 0x000001, "Wrong alignment on BP_AJBInGameStand_C_ChangeAuraEnable");
static_assert(sizeof(BP_AJBInGameStand_C_ChangeAuraEnable) == 0x000001, "Wrong size on BP_AJBInGameStand_C_ChangeAuraEnable");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeAuraEnable, bEnable) == 0x000000, "Member 'BP_AJBInGameStand_C_ChangeAuraEnable::bEnable' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.SpawnAccompanyEmitter
// 0x00B8 (0x00B8 - 0x0000)
struct BP_AJBInGameStand_C_SpawnAccompanyEmitter final
{
public:
	EStandAccompanyTransition                     AccompanyTransition;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0004(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue1;     // 0x0010(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_LinearColorToVector_ReturnValue;     // 0x0034(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USceneComponent*>                CallFunc_GetComponentsByTag_ReturnValue;           // 0x0040(0x0010)(ZeroConstructor, ReferenceParm)
	TArray<class USceneComponent*>                CallFunc_GetComponentsByTag_ReturnValue1;          // 0x0050(0x0010)(ZeroConstructor, ReferenceParm)
	class USceneComponent*                        CallFunc_Array_Get_Item;                           // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CallFunc_Array_Get_Item1;                          // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue2;     // 0x0070(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue3;     // 0x007C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0088(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue1;       // 0x0094(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          CallFunc_RequestParticleEffectAttachedOnLocal_ParticleEffect; // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          CallFunc_RequestParticleEffectAttachedOnLocal_ParticleEffect1; // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue1;          // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameStand_C_SpawnAccompanyEmitter) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_SpawnAccompanyEmitter");
static_assert(sizeof(BP_AJBInGameStand_C_SpawnAccompanyEmitter) == 0x0000B8, "Wrong size on BP_AJBInGameStand_C_SpawnAccompanyEmitter");
static_assert(offsetof(BP_AJBInGameStand_C_SpawnAccompanyEmitter, AccompanyTransition) == 0x000000, "Member 'BP_AJBInGameStand_C_SpawnAccompanyEmitter::AccompanyTransition' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_SpawnAccompanyEmitter, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'BP_AJBInGameStand_C_SpawnAccompanyEmitter::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_SpawnAccompanyEmitter, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000004, "Member 'BP_AJBInGameStand_C_SpawnAccompanyEmitter::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_SpawnAccompanyEmitter, CallFunc_K2_GetComponentLocation_ReturnValue1) == 0x000010, "Member 'BP_AJBInGameStand_C_SpawnAccompanyEmitter::CallFunc_K2_GetComponentLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_SpawnAccompanyEmitter, CallFunc_GetOwner_ReturnValue) == 0x000020, "Member 'BP_AJBInGameStand_C_SpawnAccompanyEmitter::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_SpawnAccompanyEmitter, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000028, "Member 'BP_AJBInGameStand_C_SpawnAccompanyEmitter::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_SpawnAccompanyEmitter, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_AJBInGameStand_C_SpawnAccompanyEmitter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_SpawnAccompanyEmitter, CallFunc_Conv_LinearColorToVector_ReturnValue) == 0x000034, "Member 'BP_AJBInGameStand_C_SpawnAccompanyEmitter::CallFunc_Conv_LinearColorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_SpawnAccompanyEmitter, CallFunc_GetComponentsByTag_ReturnValue) == 0x000040, "Member 'BP_AJBInGameStand_C_SpawnAccompanyEmitter::CallFunc_GetComponentsByTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_SpawnAccompanyEmitter, CallFunc_GetComponentsByTag_ReturnValue1) == 0x000050, "Member 'BP_AJBInGameStand_C_SpawnAccompanyEmitter::CallFunc_GetComponentsByTag_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_SpawnAccompanyEmitter, CallFunc_Array_Get_Item) == 0x000060, "Member 'BP_AJBInGameStand_C_SpawnAccompanyEmitter::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_SpawnAccompanyEmitter, CallFunc_Array_Get_Item1) == 0x000068, "Member 'BP_AJBInGameStand_C_SpawnAccompanyEmitter::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_SpawnAccompanyEmitter, CallFunc_K2_GetComponentLocation_ReturnValue2) == 0x000070, "Member 'BP_AJBInGameStand_C_SpawnAccompanyEmitter::CallFunc_K2_GetComponentLocation_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_SpawnAccompanyEmitter, CallFunc_K2_GetComponentLocation_ReturnValue3) == 0x00007C, "Member 'BP_AJBInGameStand_C_SpawnAccompanyEmitter::CallFunc_K2_GetComponentLocation_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_SpawnAccompanyEmitter, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000088, "Member 'BP_AJBInGameStand_C_SpawnAccompanyEmitter::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_SpawnAccompanyEmitter, CallFunc_Subtract_VectorVector_ReturnValue1) == 0x000094, "Member 'BP_AJBInGameStand_C_SpawnAccompanyEmitter::CallFunc_Subtract_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_SpawnAccompanyEmitter, CallFunc_RequestParticleEffectAttachedOnLocal_ParticleEffect) == 0x0000A0, "Member 'BP_AJBInGameStand_C_SpawnAccompanyEmitter::CallFunc_RequestParticleEffectAttachedOnLocal_ParticleEffect' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_SpawnAccompanyEmitter, CallFunc_RequestParticleEffectAttachedOnLocal_ParticleEffect1) == 0x0000A8, "Member 'BP_AJBInGameStand_C_SpawnAccompanyEmitter::CallFunc_RequestParticleEffectAttachedOnLocal_ParticleEffect1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_SpawnAccompanyEmitter, CallFunc_IsValid_ReturnValue) == 0x0000B0, "Member 'BP_AJBInGameStand_C_SpawnAccompanyEmitter::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_SpawnAccompanyEmitter, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0000B1, "Member 'BP_AJBInGameStand_C_SpawnAccompanyEmitter::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_SpawnAccompanyEmitter, CallFunc_Array_IsValidIndex_ReturnValue1) == 0x0000B2, "Member 'BP_AJBInGameStand_C_SpawnAccompanyEmitter::CallFunc_Array_IsValidIndex_ReturnValue1' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.SetMeshInterpSpeed
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBInGameStand_C_SetMeshInterpSpeed final
{
public:
	float                                         InterpSpeed;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_C_SetMeshInterpSpeed) == 0x000004, "Wrong alignment on BP_AJBInGameStand_C_SetMeshInterpSpeed");
static_assert(sizeof(BP_AJBInGameStand_C_SetMeshInterpSpeed) == 0x000004, "Wrong size on BP_AJBInGameStand_C_SetMeshInterpSpeed");
static_assert(offsetof(BP_AJBInGameStand_C_SetMeshInterpSpeed, InterpSpeed) == 0x000000, "Member 'BP_AJBInGameStand_C_SetMeshInterpSpeed::InterpSpeed' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.UpdateTransformOnSeparation
// 0x01B0 (0x01B0 - 0x0000)
struct BP_AJBInGameStand_C_UpdateTransformOnSeparation final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue;     // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue2;                    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character1;     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character2;     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue1;    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameMovableStand_C*            K2Node_DynamicCast_AsBP_AJBIn_Game_Movable_Stand;  // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0054(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue3;                    // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0068(0x000C)(IsPlainOldData, NoDestructor)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character3;     // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess4;                      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue2;    // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0088(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0110(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AActor*                                 CallFunc_GetOwner_ReturnValue4;                    // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character4;     // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess5;                      // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue3;    // 0x01AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue1;                 // 0x01AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameStand_C_UpdateTransformOnSeparation) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_UpdateTransformOnSeparation");
static_assert(sizeof(BP_AJBInGameStand_C_UpdateTransformOnSeparation) == 0x0001B0, "Wrong size on BP_AJBInGameStand_C_UpdateTransformOnSeparation");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnSeparation, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'BP_AJBInGameStand_C_UpdateTransformOnSeparation::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnSeparation, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000008, "Member 'BP_AJBInGameStand_C_UpdateTransformOnSeparation::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnSeparation, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_AJBInGameStand_C_UpdateTransformOnSeparation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnSeparation, CallFunc_HasLocalSharedController_ReturnValue) == 0x000011, "Member 'BP_AJBInGameStand_C_UpdateTransformOnSeparation::CallFunc_HasLocalSharedController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnSeparation, CallFunc_GetOwner_ReturnValue1) == 0x000018, "Member 'BP_AJBInGameStand_C_UpdateTransformOnSeparation::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnSeparation, CallFunc_GetOwner_ReturnValue2) == 0x000020, "Member 'BP_AJBInGameStand_C_UpdateTransformOnSeparation::CallFunc_GetOwner_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnSeparation, K2Node_DynamicCast_AsBP_AJBIn_Game_Character1) == 0x000028, "Member 'BP_AJBInGameStand_C_UpdateTransformOnSeparation::K2Node_DynamicCast_AsBP_AJBIn_Game_Character1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnSeparation, K2Node_DynamicCast_bSuccess1) == 0x000030, "Member 'BP_AJBInGameStand_C_UpdateTransformOnSeparation::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnSeparation, K2Node_DynamicCast_AsBP_AJBIn_Game_Character2) == 0x000038, "Member 'BP_AJBInGameStand_C_UpdateTransformOnSeparation::K2Node_DynamicCast_AsBP_AJBIn_Game_Character2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnSeparation, K2Node_DynamicCast_bSuccess2) == 0x000040, "Member 'BP_AJBInGameStand_C_UpdateTransformOnSeparation::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnSeparation, CallFunc_HasLocalSharedController_ReturnValue1) == 0x000041, "Member 'BP_AJBInGameStand_C_UpdateTransformOnSeparation::CallFunc_HasLocalSharedController_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnSeparation, K2Node_DynamicCast_AsBP_AJBIn_Game_Movable_Stand) == 0x000048, "Member 'BP_AJBInGameStand_C_UpdateTransformOnSeparation::K2Node_DynamicCast_AsBP_AJBIn_Game_Movable_Stand' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnSeparation, K2Node_DynamicCast_bSuccess3) == 0x000050, "Member 'BP_AJBInGameStand_C_UpdateTransformOnSeparation::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnSeparation, CallFunc_IsValid_ReturnValue) == 0x000051, "Member 'BP_AJBInGameStand_C_UpdateTransformOnSeparation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnSeparation, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000054, "Member 'BP_AJBInGameStand_C_UpdateTransformOnSeparation::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnSeparation, CallFunc_GetOwner_ReturnValue3) == 0x000060, "Member 'BP_AJBInGameStand_C_UpdateTransformOnSeparation::CallFunc_GetOwner_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnSeparation, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000068, "Member 'BP_AJBInGameStand_C_UpdateTransformOnSeparation::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnSeparation, K2Node_DynamicCast_AsBP_AJBIn_Game_Character3) == 0x000078, "Member 'BP_AJBInGameStand_C_UpdateTransformOnSeparation::K2Node_DynamicCast_AsBP_AJBIn_Game_Character3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnSeparation, K2Node_DynamicCast_bSuccess4) == 0x000080, "Member 'BP_AJBInGameStand_C_UpdateTransformOnSeparation::K2Node_DynamicCast_bSuccess4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnSeparation, CallFunc_HasLocalSharedController_ReturnValue2) == 0x000081, "Member 'BP_AJBInGameStand_C_UpdateTransformOnSeparation::CallFunc_HasLocalSharedController_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnSeparation, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000088, "Member 'BP_AJBInGameStand_C_UpdateTransformOnSeparation::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnSeparation, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000110, "Member 'BP_AJBInGameStand_C_UpdateTransformOnSeparation::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnSeparation, CallFunc_GetOwner_ReturnValue4) == 0x000198, "Member 'BP_AJBInGameStand_C_UpdateTransformOnSeparation::CallFunc_GetOwner_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnSeparation, K2Node_DynamicCast_AsBP_AJBIn_Game_Character4) == 0x0001A0, "Member 'BP_AJBInGameStand_C_UpdateTransformOnSeparation::K2Node_DynamicCast_AsBP_AJBIn_Game_Character4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnSeparation, K2Node_DynamicCast_bSuccess5) == 0x0001A8, "Member 'BP_AJBInGameStand_C_UpdateTransformOnSeparation::K2Node_DynamicCast_bSuccess5' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnSeparation, CallFunc_Not_PreBool_ReturnValue) == 0x0001A9, "Member 'BP_AJBInGameStand_C_UpdateTransformOnSeparation::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnSeparation, CallFunc_HasLocalSharedController_ReturnValue3) == 0x0001AA, "Member 'BP_AJBInGameStand_C_UpdateTransformOnSeparation::CallFunc_HasLocalSharedController_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnSeparation, CallFunc_Not_PreBool_ReturnValue1) == 0x0001AB, "Member 'BP_AJBInGameStand_C_UpdateTransformOnSeparation::CallFunc_Not_PreBool_ReturnValue1' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.UpdateTransformOnNotSeparation
// 0x0180 (0x0180 - 0x0000)
struct BP_AJBInGameStand_C_UpdateTransformOnNotSeparation final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetFixedMeshLocation_Location;            // 0x0004(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x0014(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0020(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character1;     // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue;     // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D2[0x2];                                       // 0x00D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x00D4(0x000C)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x00E0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AActor*                                 CallFunc_GetOwner_ReturnValue2;                    // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character2;     // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue1;    // 0x0179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue1;                 // 0x017A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue2;                 // 0x017B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameStand_C_UpdateTransformOnNotSeparation) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_UpdateTransformOnNotSeparation");
static_assert(sizeof(BP_AJBInGameStand_C_UpdateTransformOnNotSeparation) == 0x000180, "Wrong size on BP_AJBInGameStand_C_UpdateTransformOnNotSeparation");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnNotSeparation, DeltaSeconds) == 0x000000, "Member 'BP_AJBInGameStand_C_UpdateTransformOnNotSeparation::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnNotSeparation, CallFunc_GetFixedMeshLocation_Location) == 0x000004, "Member 'BP_AJBInGameStand_C_UpdateTransformOnNotSeparation::CallFunc_GetFixedMeshLocation_Location' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnNotSeparation, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'BP_AJBInGameStand_C_UpdateTransformOnNotSeparation::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnNotSeparation, CallFunc_VInterpTo_ReturnValue) == 0x000014, "Member 'BP_AJBInGameStand_C_UpdateTransformOnNotSeparation::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnNotSeparation, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000020, "Member 'BP_AJBInGameStand_C_UpdateTransformOnNotSeparation::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnNotSeparation, CallFunc_GetOwner_ReturnValue) == 0x0000A8, "Member 'BP_AJBInGameStand_C_UpdateTransformOnNotSeparation::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnNotSeparation, CallFunc_GetOwner_ReturnValue1) == 0x0000B0, "Member 'BP_AJBInGameStand_C_UpdateTransformOnNotSeparation::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnNotSeparation, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x0000B8, "Member 'BP_AJBInGameStand_C_UpdateTransformOnNotSeparation::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnNotSeparation, K2Node_DynamicCast_bSuccess) == 0x0000C0, "Member 'BP_AJBInGameStand_C_UpdateTransformOnNotSeparation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnNotSeparation, K2Node_DynamicCast_AsBP_AJBIn_Game_Character1) == 0x0000C8, "Member 'BP_AJBInGameStand_C_UpdateTransformOnNotSeparation::K2Node_DynamicCast_AsBP_AJBIn_Game_Character1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnNotSeparation, K2Node_DynamicCast_bSuccess1) == 0x0000D0, "Member 'BP_AJBInGameStand_C_UpdateTransformOnNotSeparation::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnNotSeparation, CallFunc_HasLocalSharedController_ReturnValue) == 0x0000D1, "Member 'BP_AJBInGameStand_C_UpdateTransformOnNotSeparation::CallFunc_HasLocalSharedController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnNotSeparation, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x0000D4, "Member 'BP_AJBInGameStand_C_UpdateTransformOnNotSeparation::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnNotSeparation, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x0000E0, "Member 'BP_AJBInGameStand_C_UpdateTransformOnNotSeparation::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnNotSeparation, CallFunc_GetOwner_ReturnValue2) == 0x000168, "Member 'BP_AJBInGameStand_C_UpdateTransformOnNotSeparation::CallFunc_GetOwner_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnNotSeparation, K2Node_DynamicCast_AsBP_AJBIn_Game_Character2) == 0x000170, "Member 'BP_AJBInGameStand_C_UpdateTransformOnNotSeparation::K2Node_DynamicCast_AsBP_AJBIn_Game_Character2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnNotSeparation, K2Node_DynamicCast_bSuccess2) == 0x000178, "Member 'BP_AJBInGameStand_C_UpdateTransformOnNotSeparation::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnNotSeparation, CallFunc_HasLocalSharedController_ReturnValue1) == 0x000179, "Member 'BP_AJBInGameStand_C_UpdateTransformOnNotSeparation::CallFunc_HasLocalSharedController_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnNotSeparation, CallFunc_Not_PreBool_ReturnValue1) == 0x00017A, "Member 'BP_AJBInGameStand_C_UpdateTransformOnNotSeparation::CallFunc_Not_PreBool_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateTransformOnNotSeparation, CallFunc_Not_PreBool_ReturnValue2) == 0x00017B, "Member 'BP_AJBInGameStand_C_UpdateTransformOnNotSeparation::CallFunc_Not_PreBool_ReturnValue2' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.PlaySE
// 0x0080 (0x0080 - 0x0000)
struct BP_AJBInGameStand_C_PlaySE final
{
public:
	EStandAccompanyTransition                     PrevTransition;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EStandAccompanyTransition                     NextTransition;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAsSeparate;                                       // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue1;         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue2;         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue3;         // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue4;         // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Temp_struct_Variable;                              // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Temp_struct_Variable1;                             // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable1;                               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Temp_struct_Variable2;                             // 0x0030(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Select_Default;                             // 0x0038(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable3;                             // 0x0040(0x0008)(NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           CallFunc_RequestWwiseEventOnLocal_AkComponent;     // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable2;                               // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Temp_struct_Variable4;                             // 0x0058(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Select1_Default;                            // 0x0060(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Select2_Default;                            // 0x0068(0x0008)(NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           CallFunc_RequestWwiseEventOnLocal_AkComponent1;    // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           CallFunc_RequestWwiseEventOnLocal_AkComponent2;    // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_C_PlaySE) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_PlaySE");
static_assert(sizeof(BP_AJBInGameStand_C_PlaySE) == 0x000080, "Wrong size on BP_AJBInGameStand_C_PlaySE");
static_assert(offsetof(BP_AJBInGameStand_C_PlaySE, PrevTransition) == 0x000000, "Member 'BP_AJBInGameStand_C_PlaySE::PrevTransition' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_PlaySE, NextTransition) == 0x000001, "Member 'BP_AJBInGameStand_C_PlaySE::NextTransition' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_PlaySE, bAsSeparate) == 0x000002, "Member 'BP_AJBInGameStand_C_PlaySE::bAsSeparate' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_PlaySE, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000003, "Member 'BP_AJBInGameStand_C_PlaySE::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_PlaySE, CallFunc_EqualEqual_ByteByte_ReturnValue1) == 0x000004, "Member 'BP_AJBInGameStand_C_PlaySE::CallFunc_EqualEqual_ByteByte_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_PlaySE, CallFunc_EqualEqual_ByteByte_ReturnValue2) == 0x000005, "Member 'BP_AJBInGameStand_C_PlaySE::CallFunc_EqualEqual_ByteByte_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_PlaySE, CallFunc_EqualEqual_ByteByte_ReturnValue3) == 0x000006, "Member 'BP_AJBInGameStand_C_PlaySE::CallFunc_EqualEqual_ByteByte_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_PlaySE, CallFunc_EqualEqual_ByteByte_ReturnValue4) == 0x000007, "Member 'BP_AJBInGameStand_C_PlaySE::CallFunc_EqualEqual_ByteByte_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_PlaySE, CallFunc_BooleanAND_ReturnValue) == 0x000008, "Member 'BP_AJBInGameStand_C_PlaySE::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_PlaySE, CallFunc_BooleanAND_ReturnValue1) == 0x000009, "Member 'BP_AJBInGameStand_C_PlaySE::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_PlaySE, Temp_bool_Variable) == 0x00000A, "Member 'BP_AJBInGameStand_C_PlaySE::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_PlaySE, CallFunc_IsValid_ReturnValue) == 0x00000B, "Member 'BP_AJBInGameStand_C_PlaySE::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_PlaySE, Temp_struct_Variable) == 0x000010, "Member 'BP_AJBInGameStand_C_PlaySE::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_PlaySE, CallFunc_IsValid_ReturnValue1) == 0x000018, "Member 'BP_AJBInGameStand_C_PlaySE::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_PlaySE, Temp_struct_Variable1) == 0x000020, "Member 'BP_AJBInGameStand_C_PlaySE::Temp_struct_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_PlaySE, Temp_bool_Variable1) == 0x000028, "Member 'BP_AJBInGameStand_C_PlaySE::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_PlaySE, Temp_struct_Variable2) == 0x000030, "Member 'BP_AJBInGameStand_C_PlaySE::Temp_struct_Variable2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_PlaySE, K2Node_Select_Default) == 0x000038, "Member 'BP_AJBInGameStand_C_PlaySE::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_PlaySE, Temp_struct_Variable3) == 0x000040, "Member 'BP_AJBInGameStand_C_PlaySE::Temp_struct_Variable3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_PlaySE, CallFunc_RequestWwiseEventOnLocal_AkComponent) == 0x000048, "Member 'BP_AJBInGameStand_C_PlaySE::CallFunc_RequestWwiseEventOnLocal_AkComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_PlaySE, Temp_bool_Variable2) == 0x000050, "Member 'BP_AJBInGameStand_C_PlaySE::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_PlaySE, Temp_struct_Variable4) == 0x000058, "Member 'BP_AJBInGameStand_C_PlaySE::Temp_struct_Variable4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_PlaySE, K2Node_Select1_Default) == 0x000060, "Member 'BP_AJBInGameStand_C_PlaySE::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_PlaySE, K2Node_Select2_Default) == 0x000068, "Member 'BP_AJBInGameStand_C_PlaySE::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_PlaySE, CallFunc_RequestWwiseEventOnLocal_AkComponent1) == 0x000070, "Member 'BP_AJBInGameStand_C_PlaySE::CallFunc_RequestWwiseEventOnLocal_AkComponent1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_PlaySE, CallFunc_RequestWwiseEventOnLocal_AkComponent2) == 0x000078, "Member 'BP_AJBInGameStand_C_PlaySE::CallFunc_RequestWwiseEventOnLocal_AkComponent2' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.TryDisableTick
// 0x0018 (0x0018 - 0x0000)
struct BP_AJBInGameStand_C_TryDisableTick final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CharacterBehaviorMatches_ReturnValue;     // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameStand_C_TryDisableTick) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_TryDisableTick");
static_assert(sizeof(BP_AJBInGameStand_C_TryDisableTick) == 0x000018, "Wrong size on BP_AJBInGameStand_C_TryDisableTick");
static_assert(offsetof(BP_AJBInGameStand_C_TryDisableTick, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'BP_AJBInGameStand_C_TryDisableTick::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_TryDisableTick, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000008, "Member 'BP_AJBInGameStand_C_TryDisableTick::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_TryDisableTick, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_AJBInGameStand_C_TryDisableTick::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_TryDisableTick, CallFunc_CharacterBehaviorMatches_ReturnValue) == 0x000011, "Member 'BP_AJBInGameStand_C_TryDisableTick::CallFunc_CharacterBehaviorMatches_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.ChangeStandMeshVisibility
// 0x0003 (0x0003 - 0x0000)
struct BP_AJBInGameStand_C_ChangeStandMeshVisibility final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckVisibilityByStandTransition_bVisibility; // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanXOR_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameStand_C_ChangeStandMeshVisibility) == 0x000001, "Wrong alignment on BP_AJBInGameStand_C_ChangeStandMeshVisibility");
static_assert(sizeof(BP_AJBInGameStand_C_ChangeStandMeshVisibility) == 0x000003, "Wrong size on BP_AJBInGameStand_C_ChangeStandMeshVisibility");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeStandMeshVisibility, bEnable) == 0x000000, "Member 'BP_AJBInGameStand_C_ChangeStandMeshVisibility::bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeStandMeshVisibility, CallFunc_CheckVisibilityByStandTransition_bVisibility) == 0x000001, "Member 'BP_AJBInGameStand_C_ChangeStandMeshVisibility::CallFunc_CheckVisibilityByStandTransition_bVisibility' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeStandMeshVisibility, CallFunc_BooleanXOR_ReturnValue) == 0x000002, "Member 'BP_AJBInGameStand_C_ChangeStandMeshVisibility::CallFunc_BooleanXOR_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.SetValueDissolveAlpha
// 0x0028 (0x0028 - 0x0000)
struct BP_AJBInGameStand_C_SetValueDissolveAlpha final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameStand_C_SetValueDissolveAlpha) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_SetValueDissolveAlpha");
static_assert(sizeof(BP_AJBInGameStand_C_SetValueDissolveAlpha) == 0x000028, "Wrong size on BP_AJBInGameStand_C_SetValueDissolveAlpha");
static_assert(offsetof(BP_AJBInGameStand_C_SetValueDissolveAlpha, Value) == 0x000000, "Member 'BP_AJBInGameStand_C_SetValueDissolveAlpha::Value' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_SetValueDissolveAlpha, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_AJBInGameStand_C_SetValueDissolveAlpha::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_SetValueDissolveAlpha, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_AJBInGameStand_C_SetValueDissolveAlpha::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_SetValueDissolveAlpha, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_AJBInGameStand_C_SetValueDissolveAlpha::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_SetValueDissolveAlpha, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'BP_AJBInGameStand_C_SetValueDissolveAlpha::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_SetValueDissolveAlpha, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_AJBInGameStand_C_SetValueDissolveAlpha::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_SetValueDissolveAlpha, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'BP_AJBInGameStand_C_SetValueDissolveAlpha::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_SetValueDissolveAlpha, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'BP_AJBInGameStand_C_SetValueDissolveAlpha::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.SetSkeletalMeshWithSkin
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBInGameStand_C_SetSkeletalMeshWithSkin final
{
public:
	class USkeletalMesh*                          NewMesh;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bReintPose;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameStand_C_SetSkeletalMeshWithSkin) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_SetSkeletalMeshWithSkin");
static_assert(sizeof(BP_AJBInGameStand_C_SetSkeletalMeshWithSkin) == 0x000010, "Wrong size on BP_AJBInGameStand_C_SetSkeletalMeshWithSkin");
static_assert(offsetof(BP_AJBInGameStand_C_SetSkeletalMeshWithSkin, NewMesh) == 0x000000, "Member 'BP_AJBInGameStand_C_SetSkeletalMeshWithSkin::NewMesh' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_SetSkeletalMeshWithSkin, bReintPose) == 0x000008, "Member 'BP_AJBInGameStand_C_SetSkeletalMeshWithSkin::bReintPose' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.ApplyStandParameter
// 0x0118 (0x0118 - 0x0000)
struct BP_AJBInGameStand_C_ApplyStandParameter final
{
public:
	class FText                                   CallFunc_Conv_NameToText_ReturnValue;              // 0x0000(0x0018)()
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0020(0x0040)(HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetCharacterName_CharacterName;           // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_NameToText_ReturnValue1;             // 0x0080(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData1;             // 0x0098(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00D8(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00E8(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_C_ApplyStandParameter) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_ApplyStandParameter");
static_assert(sizeof(BP_AJBInGameStand_C_ApplyStandParameter) == 0x000118, "Wrong size on BP_AJBInGameStand_C_ApplyStandParameter");
static_assert(offsetof(BP_AJBInGameStand_C_ApplyStandParameter, CallFunc_Conv_NameToText_ReturnValue) == 0x000000, "Member 'BP_AJBInGameStand_C_ApplyStandParameter::CallFunc_Conv_NameToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ApplyStandParameter, CallFunc_GetObjectClass_ReturnValue) == 0x000018, "Member 'BP_AJBInGameStand_C_ApplyStandParameter::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ApplyStandParameter, K2Node_MakeStruct_FormatArgumentData) == 0x000020, "Member 'BP_AJBInGameStand_C_ApplyStandParameter::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ApplyStandParameter, CallFunc_GetOwner_ReturnValue) == 0x000060, "Member 'BP_AJBInGameStand_C_ApplyStandParameter::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ApplyStandParameter, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000068, "Member 'BP_AJBInGameStand_C_ApplyStandParameter::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ApplyStandParameter, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'BP_AJBInGameStand_C_ApplyStandParameter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ApplyStandParameter, CallFunc_GetCharacterName_CharacterName) == 0x000078, "Member 'BP_AJBInGameStand_C_ApplyStandParameter::CallFunc_GetCharacterName_CharacterName' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ApplyStandParameter, CallFunc_Conv_NameToText_ReturnValue1) == 0x000080, "Member 'BP_AJBInGameStand_C_ApplyStandParameter::CallFunc_Conv_NameToText_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ApplyStandParameter, K2Node_MakeStruct_FormatArgumentData1) == 0x000098, "Member 'BP_AJBInGameStand_C_ApplyStandParameter::K2Node_MakeStruct_FormatArgumentData1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ApplyStandParameter, K2Node_MakeArray_Array) == 0x0000D8, "Member 'BP_AJBInGameStand_C_ApplyStandParameter::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ApplyStandParameter, CallFunc_Format_ReturnValue) == 0x0000E8, "Member 'BP_AJBInGameStand_C_ApplyStandParameter::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ApplyStandParameter, CallFunc_Conv_TextToString_ReturnValue) == 0x000100, "Member 'BP_AJBInGameStand_C_ApplyStandParameter::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ApplyStandParameter, CallFunc_Conv_StringToName_ReturnValue) == 0x000110, "Member 'BP_AJBInGameStand_C_ApplyStandParameter::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.GetFixedRelativeLocation
// 0x00E0 (0x00E0 - 0x0000)
struct BP_AJBInGameStand_C_GetFixedRelativeLocation final
{
public:
	struct FVector                                RelativeLocation;                                  // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0018(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorUpVector_ReturnValue;             // 0x0034(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0040(0x000C)(IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0050(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0080(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_InverseTransformRotation_ReturnValue;     // 0x008C(0x000C)(IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue1;                  // 0x00A8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x00BC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00C8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00D4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_C_GetFixedRelativeLocation) == 0x000010, "Wrong alignment on BP_AJBInGameStand_C_GetFixedRelativeLocation");
static_assert(sizeof(BP_AJBInGameStand_C_GetFixedRelativeLocation) == 0x0000E0, "Wrong size on BP_AJBInGameStand_C_GetFixedRelativeLocation");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedRelativeLocation, RelativeLocation) == 0x000000, "Member 'BP_AJBInGameStand_C_GetFixedRelativeLocation::RelativeLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedRelativeLocation, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'BP_AJBInGameStand_C_GetFixedRelativeLocation::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedRelativeLocation, CallFunc_MakeVector_ReturnValue) == 0x000018, "Member 'BP_AJBInGameStand_C_GetFixedRelativeLocation::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedRelativeLocation, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000028, "Member 'BP_AJBInGameStand_C_GetFixedRelativeLocation::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedRelativeLocation, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_AJBInGameStand_C_GetFixedRelativeLocation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedRelativeLocation, CallFunc_GetActorUpVector_ReturnValue) == 0x000034, "Member 'BP_AJBInGameStand_C_GetFixedRelativeLocation::CallFunc_GetActorUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedRelativeLocation, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000040, "Member 'BP_AJBInGameStand_C_GetFixedRelativeLocation::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedRelativeLocation, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000050, "Member 'BP_AJBInGameStand_C_GetFixedRelativeLocation::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedRelativeLocation, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000080, "Member 'BP_AJBInGameStand_C_GetFixedRelativeLocation::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedRelativeLocation, CallFunc_InverseTransformRotation_ReturnValue) == 0x00008C, "Member 'BP_AJBInGameStand_C_GetFixedRelativeLocation::CallFunc_InverseTransformRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedRelativeLocation, Temp_bool_Variable) == 0x000098, "Member 'BP_AJBInGameStand_C_GetFixedRelativeLocation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedRelativeLocation, CallFunc_BreakRotator_Roll) == 0x00009C, "Member 'BP_AJBInGameStand_C_GetFixedRelativeLocation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedRelativeLocation, CallFunc_BreakRotator_Pitch) == 0x0000A0, "Member 'BP_AJBInGameStand_C_GetFixedRelativeLocation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedRelativeLocation, CallFunc_BreakRotator_Yaw) == 0x0000A4, "Member 'BP_AJBInGameStand_C_GetFixedRelativeLocation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedRelativeLocation, CallFunc_MakeVector_ReturnValue1) == 0x0000A8, "Member 'BP_AJBInGameStand_C_GetFixedRelativeLocation::CallFunc_MakeVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedRelativeLocation, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000B4, "Member 'BP_AJBInGameStand_C_GetFixedRelativeLocation::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedRelativeLocation, K2Node_Select_Default) == 0x0000B8, "Member 'BP_AJBInGameStand_C_GetFixedRelativeLocation::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedRelativeLocation, CallFunc_RotateAngleAxis_ReturnValue) == 0x0000BC, "Member 'BP_AJBInGameStand_C_GetFixedRelativeLocation::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedRelativeLocation, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000C8, "Member 'BP_AJBInGameStand_C_GetFixedRelativeLocation::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedRelativeLocation, CallFunc_Add_VectorVector_ReturnValue) == 0x0000D4, "Member 'BP_AJBInGameStand_C_GetFixedRelativeLocation::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.EnableStandLocationRootBoneRelativeYaw
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameStand_C_EnableStandLocationRootBoneRelativeYaw final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameStand_C_EnableStandLocationRootBoneRelativeYaw) == 0x000001, "Wrong alignment on BP_AJBInGameStand_C_EnableStandLocationRootBoneRelativeYaw");
static_assert(sizeof(BP_AJBInGameStand_C_EnableStandLocationRootBoneRelativeYaw) == 0x000001, "Wrong size on BP_AJBInGameStand_C_EnableStandLocationRootBoneRelativeYaw");
static_assert(offsetof(BP_AJBInGameStand_C_EnableStandLocationRootBoneRelativeYaw, bEnable) == 0x000000, "Member 'BP_AJBInGameStand_C_EnableStandLocationRootBoneRelativeYaw::bEnable' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.ChangeToTransformMesh
// 0x0060 (0x0060 - 0x0000)
struct BP_AJBInGameStand_C_ChangeToTransformMesh final
{
public:
	class USkeletalMesh*                          TransformMesh;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkeletalMaterial                      CallFunc_Array_Get_Item;                           // 0x0018(0x0030)(NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             CallFunc_GetMaterials_ReturnValue;                 // 0x0050(0x0010)(ZeroConstructor, ReferenceParm)
};
static_assert(alignof(BP_AJBInGameStand_C_ChangeToTransformMesh) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_ChangeToTransformMesh");
static_assert(sizeof(BP_AJBInGameStand_C_ChangeToTransformMesh) == 0x000060, "Wrong size on BP_AJBInGameStand_C_ChangeToTransformMesh");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeToTransformMesh, TransformMesh) == 0x000000, "Member 'BP_AJBInGameStand_C_ChangeToTransformMesh::TransformMesh' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeToTransformMesh, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_AJBInGameStand_C_ChangeToTransformMesh::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeToTransformMesh, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'BP_AJBInGameStand_C_ChangeToTransformMesh::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeToTransformMesh, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_AJBInGameStand_C_ChangeToTransformMesh::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeToTransformMesh, CallFunc_IsValid_ReturnValue) == 0x000014, "Member 'BP_AJBInGameStand_C_ChangeToTransformMesh::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeToTransformMesh, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_AJBInGameStand_C_ChangeToTransformMesh::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeToTransformMesh, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'BP_AJBInGameStand_C_ChangeToTransformMesh::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeToTransformMesh, CallFunc_Less_IntInt_ReturnValue) == 0x00004C, "Member 'BP_AJBInGameStand_C_ChangeToTransformMesh::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeToTransformMesh, CallFunc_GetMaterials_ReturnValue) == 0x000050, "Member 'BP_AJBInGameStand_C_ChangeToTransformMesh::CallFunc_GetMaterials_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.ChangeToDefaultMesh
// 0x0028 (0x0028 - 0x0000)
struct BP_AJBInGameStand_C_ChangeToDefaultMesh final
{
public:
	class USkeletalMesh*                          DefaultMesh;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameStand_C_ChangeToDefaultMesh) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_ChangeToDefaultMesh");
static_assert(sizeof(BP_AJBInGameStand_C_ChangeToDefaultMesh) == 0x000028, "Wrong size on BP_AJBInGameStand_C_ChangeToDefaultMesh");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeToDefaultMesh, DefaultMesh) == 0x000000, "Member 'BP_AJBInGameStand_C_ChangeToDefaultMesh::DefaultMesh' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeToDefaultMesh, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_AJBInGameStand_C_ChangeToDefaultMesh::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeToDefaultMesh, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'BP_AJBInGameStand_C_ChangeToDefaultMesh::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeToDefaultMesh, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_AJBInGameStand_C_ChangeToDefaultMesh::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeToDefaultMesh, CallFunc_IsValid_ReturnValue) == 0x000014, "Member 'BP_AJBInGameStand_C_ChangeToDefaultMesh::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeToDefaultMesh, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_AJBInGameStand_C_ChangeToDefaultMesh::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeToDefaultMesh, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_AJBInGameStand_C_ChangeToDefaultMesh::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeToDefaultMesh, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'BP_AJBInGameStand_C_ChangeToDefaultMesh::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.UpdateAuraParameter
// 0x0070 (0x0070 - 0x0000)
struct BP_AJBInGameStand_C_UpdateAuraParameter final
{
public:
	class UMaterialInstanceDynamic*               TempMaterialInstanceDynamic;                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               TempParticeSystem;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempAccompanyRate;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempApplyValue;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable1;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_Array_Get_Item1;                          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable1;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue1;                 // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_C_UpdateAuraParameter) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_UpdateAuraParameter");
static_assert(sizeof(BP_AJBInGameStand_C_UpdateAuraParameter) == 0x000070, "Wrong size on BP_AJBInGameStand_C_UpdateAuraParameter");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAuraParameter, TempMaterialInstanceDynamic) == 0x000000, "Member 'BP_AJBInGameStand_C_UpdateAuraParameter::TempMaterialInstanceDynamic' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAuraParameter, TempParticeSystem) == 0x000008, "Member 'BP_AJBInGameStand_C_UpdateAuraParameter::TempParticeSystem' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAuraParameter, TempAccompanyRate) == 0x000010, "Member 'BP_AJBInGameStand_C_UpdateAuraParameter::TempAccompanyRate' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAuraParameter, TempApplyValue) == 0x000014, "Member 'BP_AJBInGameStand_C_UpdateAuraParameter::TempApplyValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAuraParameter, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BP_AJBInGameStand_C_UpdateAuraParameter::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAuraParameter, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'BP_AJBInGameStand_C_UpdateAuraParameter::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAuraParameter, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BP_AJBInGameStand_C_UpdateAuraParameter::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAuraParameter, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000024, "Member 'BP_AJBInGameStand_C_UpdateAuraParameter::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAuraParameter, Temp_int_Array_Index_Variable1) == 0x000028, "Member 'BP_AJBInGameStand_C_UpdateAuraParameter::Temp_int_Array_Index_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAuraParameter, CallFunc_Ease_ReturnValue) == 0x00002C, "Member 'BP_AJBInGameStand_C_UpdateAuraParameter::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAuraParameter, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000030, "Member 'BP_AJBInGameStand_C_UpdateAuraParameter::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAuraParameter, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000034, "Member 'BP_AJBInGameStand_C_UpdateAuraParameter::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAuraParameter, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000038, "Member 'BP_AJBInGameStand_C_UpdateAuraParameter::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAuraParameter, CallFunc_Array_Get_Item) == 0x000040, "Member 'BP_AJBInGameStand_C_UpdateAuraParameter::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAuraParameter, CallFunc_Add_FloatFloat_ReturnValue) == 0x000048, "Member 'BP_AJBInGameStand_C_UpdateAuraParameter::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAuraParameter, CallFunc_Array_Length_ReturnValue) == 0x00004C, "Member 'BP_AJBInGameStand_C_UpdateAuraParameter::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAuraParameter, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'BP_AJBInGameStand_C_UpdateAuraParameter::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAuraParameter, CallFunc_Array_Get_Item1) == 0x000058, "Member 'BP_AJBInGameStand_C_UpdateAuraParameter::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAuraParameter, CallFunc_Array_Length_ReturnValue1) == 0x000060, "Member 'BP_AJBInGameStand_C_UpdateAuraParameter::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAuraParameter, Temp_int_Loop_Counter_Variable1) == 0x000064, "Member 'BP_AJBInGameStand_C_UpdateAuraParameter::Temp_int_Loop_Counter_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAuraParameter, CallFunc_Less_IntInt_ReturnValue1) == 0x000068, "Member 'BP_AJBInGameStand_C_UpdateAuraParameter::CallFunc_Less_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateAuraParameter, CallFunc_Add_IntInt_ReturnValue1) == 0x00006C, "Member 'BP_AJBInGameStand_C_UpdateAuraParameter::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.AttachSkeletalMesh
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBInGameStand_C_AttachSkeletalMesh final
{
public:
	float                                         NewInterpSpeed;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameStand_C_AttachSkeletalMesh) == 0x000004, "Wrong alignment on BP_AJBInGameStand_C_AttachSkeletalMesh");
static_assert(sizeof(BP_AJBInGameStand_C_AttachSkeletalMesh) == 0x000010, "Wrong size on BP_AJBInGameStand_C_AttachSkeletalMesh");
static_assert(offsetof(BP_AJBInGameStand_C_AttachSkeletalMesh, NewInterpSpeed) == 0x000000, "Member 'BP_AJBInGameStand_C_AttachSkeletalMesh::NewInterpSpeed' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_AttachSkeletalMesh, Temp_bool_Variable) == 0x000004, "Member 'BP_AJBInGameStand_C_AttachSkeletalMesh::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_AttachSkeletalMesh, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000005, "Member 'BP_AJBInGameStand_C_AttachSkeletalMesh::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_AttachSkeletalMesh, K2Node_Select_Default) == 0x000008, "Member 'BP_AJBInGameStand_C_AttachSkeletalMesh::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_AttachSkeletalMesh, CallFunc_K2_AttachToComponent_ReturnValue) == 0x00000C, "Member 'BP_AJBInGameStand_C_AttachSkeletalMesh::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.GetFixedMeshLocation
// 0x0080 (0x0080 - 0x0000)
struct BP_AJBInGameStand_C_GetFixedMeshLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0028(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0034(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCapsuleHalfHeight_CapsuleHalfHeight;   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetFixedRelativeLocation_RelativeLocation; // 0x0044(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue1;                  // 0x0050(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x005C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue1;            // 0x0068(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0074(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_C_GetFixedMeshLocation) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_GetFixedMeshLocation");
static_assert(sizeof(BP_AJBInGameStand_C_GetFixedMeshLocation) == 0x000080, "Wrong size on BP_AJBInGameStand_C_GetFixedMeshLocation");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedMeshLocation, Location) == 0x000000, "Member 'BP_AJBInGameStand_C_GetFixedMeshLocation::Location' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedMeshLocation, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'BP_AJBInGameStand_C_GetFixedMeshLocation::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedMeshLocation, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000018, "Member 'BP_AJBInGameStand_C_GetFixedMeshLocation::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedMeshLocation, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_AJBInGameStand_C_GetFixedMeshLocation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedMeshLocation, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000024, "Member 'BP_AJBInGameStand_C_GetFixedMeshLocation::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedMeshLocation, CallFunc_MakeVector_ReturnValue) == 0x000028, "Member 'BP_AJBInGameStand_C_GetFixedMeshLocation::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedMeshLocation, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000034, "Member 'BP_AJBInGameStand_C_GetFixedMeshLocation::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedMeshLocation, CallFunc_GetCapsuleHalfHeight_CapsuleHalfHeight) == 0x000040, "Member 'BP_AJBInGameStand_C_GetFixedMeshLocation::CallFunc_GetCapsuleHalfHeight_CapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedMeshLocation, CallFunc_GetFixedRelativeLocation_RelativeLocation) == 0x000044, "Member 'BP_AJBInGameStand_C_GetFixedMeshLocation::CallFunc_GetFixedRelativeLocation_RelativeLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedMeshLocation, CallFunc_MakeVector_ReturnValue1) == 0x000050, "Member 'BP_AJBInGameStand_C_GetFixedMeshLocation::CallFunc_MakeVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedMeshLocation, CallFunc_Add_VectorVector_ReturnValue) == 0x00005C, "Member 'BP_AJBInGameStand_C_GetFixedMeshLocation::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedMeshLocation, CallFunc_Add_VectorVector_ReturnValue1) == 0x000068, "Member 'BP_AJBInGameStand_C_GetFixedMeshLocation::CallFunc_Add_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetFixedMeshLocation, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000074, "Member 'BP_AJBInGameStand_C_GetFixedMeshLocation::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.GetStandInfoForChangingSkin
// 0x01D0 (0x01D0 - 0x0000)
struct BP_AJBInGameStand_C_GetStandInfoForChangingSkin final
{
public:
	class FString                                 StandName;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         skinID;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0020(0x0010)(ZeroConstructor, ReferenceParm)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAJBCharacterInfo                      CallFunc_GetDataTableRowFromName_OutRow;           // 0x0040(0x00E8)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAJBGameInstance_bSuccess;              // 0x012A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12B[0x5];                                      // 0x012B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBGameInstance_C*                  CallFunc_GetAJBGameInstance_AJB_Game_Instance;     // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMatchingPlayerInfo                    CallFunc_TryGetMatchingPlayerInfoByPlayerID_Out;   // 0x0138(0x0088)()
	bool                                          CallFunc_TryGetMatchingPlayerInfoByPlayerID_ReturnValue; // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C1[0x3];                                      // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameStand_C_GetStandInfoForChangingSkin) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_GetStandInfoForChangingSkin");
static_assert(sizeof(BP_AJBInGameStand_C_GetStandInfoForChangingSkin) == 0x0001D0, "Wrong size on BP_AJBInGameStand_C_GetStandInfoForChangingSkin");
static_assert(offsetof(BP_AJBInGameStand_C_GetStandInfoForChangingSkin, StandName) == 0x000000, "Member 'BP_AJBInGameStand_C_GetStandInfoForChangingSkin::StandName' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetStandInfoForChangingSkin, skinID) == 0x000010, "Member 'BP_AJBInGameStand_C_GetStandInfoForChangingSkin::skinID' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetStandInfoForChangingSkin, Temp_int_Array_Index_Variable) == 0x000014, "Member 'BP_AJBInGameStand_C_GetStandInfoForChangingSkin::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetStandInfoForChangingSkin, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'BP_AJBInGameStand_C_GetStandInfoForChangingSkin::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetStandInfoForChangingSkin, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'BP_AJBInGameStand_C_GetStandInfoForChangingSkin::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetStandInfoForChangingSkin, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000020, "Member 'BP_AJBInGameStand_C_GetStandInfoForChangingSkin::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetStandInfoForChangingSkin, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_AJBInGameStand_C_GetStandInfoForChangingSkin::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetStandInfoForChangingSkin, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BP_AJBInGameStand_C_GetStandInfoForChangingSkin::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetStandInfoForChangingSkin, CallFunc_GetDataTableRowFromName_OutRow) == 0x000040, "Member 'BP_AJBInGameStand_C_GetStandInfoForChangingSkin::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetStandInfoForChangingSkin, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000128, "Member 'BP_AJBInGameStand_C_GetStandInfoForChangingSkin::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetStandInfoForChangingSkin, CallFunc_Less_IntInt_ReturnValue) == 0x000129, "Member 'BP_AJBInGameStand_C_GetStandInfoForChangingSkin::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetStandInfoForChangingSkin, CallFunc_GetAJBGameInstance_bSuccess) == 0x00012A, "Member 'BP_AJBInGameStand_C_GetStandInfoForChangingSkin::CallFunc_GetAJBGameInstance_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetStandInfoForChangingSkin, CallFunc_GetAJBGameInstance_AJB_Game_Instance) == 0x000130, "Member 'BP_AJBInGameStand_C_GetStandInfoForChangingSkin::CallFunc_GetAJBGameInstance_AJB_Game_Instance' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetStandInfoForChangingSkin, CallFunc_TryGetMatchingPlayerInfoByPlayerID_Out) == 0x000138, "Member 'BP_AJBInGameStand_C_GetStandInfoForChangingSkin::CallFunc_TryGetMatchingPlayerInfoByPlayerID_Out' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetStandInfoForChangingSkin, CallFunc_TryGetMatchingPlayerInfoByPlayerID_ReturnValue) == 0x0001C0, "Member 'BP_AJBInGameStand_C_GetStandInfoForChangingSkin::CallFunc_TryGetMatchingPlayerInfoByPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetStandInfoForChangingSkin, CallFunc_Conv_ByteToInt_ReturnValue) == 0x0001C4, "Member 'BP_AJBInGameStand_C_GetStandInfoForChangingSkin::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetStandInfoForChangingSkin, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0001C8, "Member 'BP_AJBInGameStand_C_GetStandInfoForChangingSkin::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.GetOffsetConsiderAttachedMesh
// 0x004C (0x004C - 0x0000)
struct BP_AJBInGameStand_C_GetOffsetConsiderAttachedMesh final
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable;                              // 0x0010(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckSeparation_IsSeparate;               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0034(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x0040(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_C_GetOffsetConsiderAttachedMesh) == 0x000004, "Wrong alignment on BP_AJBInGameStand_C_GetOffsetConsiderAttachedMesh");
static_assert(sizeof(BP_AJBInGameStand_C_GetOffsetConsiderAttachedMesh) == 0x00004C, "Wrong size on BP_AJBInGameStand_C_GetOffsetConsiderAttachedMesh");
static_assert(offsetof(BP_AJBInGameStand_C_GetOffsetConsiderAttachedMesh, Offset) == 0x000000, "Member 'BP_AJBInGameStand_C_GetOffsetConsiderAttachedMesh::Offset' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetOffsetConsiderAttachedMesh, Temp_bool_Variable) == 0x00000C, "Member 'BP_AJBInGameStand_C_GetOffsetConsiderAttachedMesh::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetOffsetConsiderAttachedMesh, Temp_struct_Variable) == 0x000010, "Member 'BP_AJBInGameStand_C_GetOffsetConsiderAttachedMesh::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetOffsetConsiderAttachedMesh, CallFunc_CheckSeparation_IsSeparate) == 0x00001C, "Member 'BP_AJBInGameStand_C_GetOffsetConsiderAttachedMesh::CallFunc_CheckSeparation_IsSeparate' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetOffsetConsiderAttachedMesh, CallFunc_BreakVector_X) == 0x000020, "Member 'BP_AJBInGameStand_C_GetOffsetConsiderAttachedMesh::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetOffsetConsiderAttachedMesh, CallFunc_BreakVector_Y) == 0x000024, "Member 'BP_AJBInGameStand_C_GetOffsetConsiderAttachedMesh::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetOffsetConsiderAttachedMesh, CallFunc_BreakVector_Z) == 0x000028, "Member 'BP_AJBInGameStand_C_GetOffsetConsiderAttachedMesh::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetOffsetConsiderAttachedMesh, CallFunc_Add_FloatFloat_ReturnValue) == 0x00002C, "Member 'BP_AJBInGameStand_C_GetOffsetConsiderAttachedMesh::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetOffsetConsiderAttachedMesh, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000030, "Member 'BP_AJBInGameStand_C_GetOffsetConsiderAttachedMesh::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetOffsetConsiderAttachedMesh, CallFunc_MakeVector_ReturnValue) == 0x000034, "Member 'BP_AJBInGameStand_C_GetOffsetConsiderAttachedMesh::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetOffsetConsiderAttachedMesh, K2Node_Select_Default) == 0x000040, "Member 'BP_AJBInGameStand_C_GetOffsetConsiderAttachedMesh::K2Node_Select_Default' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.ChangeStatus
// 0x0088 (0x0088 - 0x0000)
struct BP_AJBInGameStand_C_ChangeStatus final
{
public:
	bool                                          bShouldAddNewTag;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           NewTag;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	float                                         NewFloatValue;                                     // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Temp_MatchedTag;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 Temp_ExtractedValues;                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	struct FGameplayTag                           CallFunc_MakeLiteralGameplayTag_ReturnValue;       // 0x0030(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_MatchesTag_ReturnValue;                   // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyFloatValues_ResultParam;          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_MakeLiteralGameplayTag_ReturnValue1;      // 0x0048(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_MatchesTag_ReturnValue1;                  // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MultiplyFloatValues_ResultParam1;         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue1;      // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_Array_Get_Item;                           // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue1;                 // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 CallFunc_ExtractFloatValuesFromTagValueMap_ReturnValues; // 0x0070(0x0010)(ZeroConstructor, ReferenceParm)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_C_ChangeStatus) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_ChangeStatus");
static_assert(sizeof(BP_AJBInGameStand_C_ChangeStatus) == 0x000088, "Wrong size on BP_AJBInGameStand_C_ChangeStatus");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeStatus, bShouldAddNewTag) == 0x000000, "Member 'BP_AJBInGameStand_C_ChangeStatus::bShouldAddNewTag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeStatus, NewTag) == 0x000008, "Member 'BP_AJBInGameStand_C_ChangeStatus::NewTag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeStatus, NewFloatValue) == 0x000010, "Member 'BP_AJBInGameStand_C_ChangeStatus::NewFloatValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeStatus, Temp_MatchedTag) == 0x000018, "Member 'BP_AJBInGameStand_C_ChangeStatus::Temp_MatchedTag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeStatus, Temp_ExtractedValues) == 0x000020, "Member 'BP_AJBInGameStand_C_ChangeStatus::Temp_ExtractedValues' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeStatus, CallFunc_MakeLiteralGameplayTag_ReturnValue) == 0x000030, "Member 'BP_AJBInGameStand_C_ChangeStatus::CallFunc_MakeLiteralGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeStatus, CallFunc_MatchesTag_ReturnValue) == 0x000038, "Member 'BP_AJBInGameStand_C_ChangeStatus::CallFunc_MatchesTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeStatus, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'BP_AJBInGameStand_C_ChangeStatus::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeStatus, CallFunc_MultiplyFloatValues_ResultParam) == 0x000040, "Member 'BP_AJBInGameStand_C_ChangeStatus::CallFunc_MultiplyFloatValues_ResultParam' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeStatus, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000044, "Member 'BP_AJBInGameStand_C_ChangeStatus::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeStatus, CallFunc_MakeLiteralGameplayTag_ReturnValue1) == 0x000048, "Member 'BP_AJBInGameStand_C_ChangeStatus::CallFunc_MakeLiteralGameplayTag_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeStatus, CallFunc_Not_PreBool_ReturnValue) == 0x000050, "Member 'BP_AJBInGameStand_C_ChangeStatus::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeStatus, CallFunc_MatchesTag_ReturnValue1) == 0x000051, "Member 'BP_AJBInGameStand_C_ChangeStatus::CallFunc_MatchesTag_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeStatus, CallFunc_MultiplyFloatValues_ResultParam1) == 0x000054, "Member 'BP_AJBInGameStand_C_ChangeStatus::CallFunc_MultiplyFloatValues_ResultParam1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeStatus, Temp_int_Array_Index_Variable) == 0x000058, "Member 'BP_AJBInGameStand_C_ChangeStatus::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeStatus, CallFunc_NearlyEqual_FloatFloat_ReturnValue1) == 0x00005C, "Member 'BP_AJBInGameStand_C_ChangeStatus::CallFunc_NearlyEqual_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeStatus, CallFunc_Array_Get_Item) == 0x000060, "Member 'BP_AJBInGameStand_C_ChangeStatus::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeStatus, CallFunc_Not_PreBool_ReturnValue1) == 0x000068, "Member 'BP_AJBInGameStand_C_ChangeStatus::CallFunc_Not_PreBool_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeStatus, Temp_int_Loop_Counter_Variable) == 0x00006C, "Member 'BP_AJBInGameStand_C_ChangeStatus::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeStatus, CallFunc_ExtractFloatValuesFromTagValueMap_ReturnValues) == 0x000070, "Member 'BP_AJBInGameStand_C_ChangeStatus::CallFunc_ExtractFloatValuesFromTagValueMap_ReturnValues' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeStatus, CallFunc_Less_IntInt_ReturnValue) == 0x000080, "Member 'BP_AJBInGameStand_C_ChangeStatus::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_ChangeStatus, CallFunc_Add_IntInt_ReturnValue) == 0x000084, "Member 'BP_AJBInGameStand_C_ChangeStatus::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.CheckVisibilityByStandTransition
// 0x0030 (0x0030 - 0x0000)
struct BP_AJBInGameStand_C_CheckVisibilityByStandTransition final
{
public:
	bool                                          bVisibility;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_GetGameplayTags_TagContainerCopy;         // 0x0008(0x0020)()
	bool                                          CallFunc_HasTag_ReturnValue;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameStand_C_CheckVisibilityByStandTransition) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_CheckVisibilityByStandTransition");
static_assert(sizeof(BP_AJBInGameStand_C_CheckVisibilityByStandTransition) == 0x000030, "Wrong size on BP_AJBInGameStand_C_CheckVisibilityByStandTransition");
static_assert(offsetof(BP_AJBInGameStand_C_CheckVisibilityByStandTransition, bVisibility) == 0x000000, "Member 'BP_AJBInGameStand_C_CheckVisibilityByStandTransition::bVisibility' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_CheckVisibilityByStandTransition, CallFunc_GetGameplayTags_TagContainerCopy) == 0x000008, "Member 'BP_AJBInGameStand_C_CheckVisibilityByStandTransition::CallFunc_GetGameplayTags_TagContainerCopy' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_CheckVisibilityByStandTransition, CallFunc_HasTag_ReturnValue) == 0x000028, "Member 'BP_AJBInGameStand_C_CheckVisibilityByStandTransition::CallFunc_HasTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_CheckVisibilityByStandTransition, CallFunc_Not_PreBool_ReturnValue) == 0x000029, "Member 'BP_AJBInGameStand_C_CheckVisibilityByStandTransition::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.UpdateMovementLocationOnSeparation
// 0x0030 (0x0030 - 0x0000)
struct BP_AJBInGameStand_C_UpdateMovementLocationOnSeparation final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameMovableStand_C*            K2Node_DynamicCast_AsBP_AJBIn_Game_Movable_Stand;  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0024(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_C_UpdateMovementLocationOnSeparation) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_UpdateMovementLocationOnSeparation");
static_assert(sizeof(BP_AJBInGameStand_C_UpdateMovementLocationOnSeparation) == 0x000030, "Wrong size on BP_AJBInGameStand_C_UpdateMovementLocationOnSeparation");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateMovementLocationOnSeparation, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'BP_AJBInGameStand_C_UpdateMovementLocationOnSeparation::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateMovementLocationOnSeparation, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000008, "Member 'BP_AJBInGameStand_C_UpdateMovementLocationOnSeparation::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateMovementLocationOnSeparation, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_AJBInGameStand_C_UpdateMovementLocationOnSeparation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateMovementLocationOnSeparation, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'BP_AJBInGameStand_C_UpdateMovementLocationOnSeparation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateMovementLocationOnSeparation, K2Node_DynamicCast_AsBP_AJBIn_Game_Movable_Stand) == 0x000018, "Member 'BP_AJBInGameStand_C_UpdateMovementLocationOnSeparation::K2Node_DynamicCast_AsBP_AJBIn_Game_Movable_Stand' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateMovementLocationOnSeparation, K2Node_DynamicCast_bSuccess1) == 0x000020, "Member 'BP_AJBInGameStand_C_UpdateMovementLocationOnSeparation::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateMovementLocationOnSeparation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000024, "Member 'BP_AJBInGameStand_C_UpdateMovementLocationOnSeparation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.UpdateOwnerMeshLocationOnSeparation
// 0x00E0 (0x00E0 - 0x0000)
struct BP_AJBInGameStand_C_UpdateOwnerMeshLocationOnSeparation final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameMovableStand_C*            K2Node_DynamicCast_AsBP_AJBIn_Game_Movable_Stand;  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0024(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0030(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x003C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0048(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0058(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_AJBInGameStand_C_UpdateOwnerMeshLocationOnSeparation) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_UpdateOwnerMeshLocationOnSeparation");
static_assert(sizeof(BP_AJBInGameStand_C_UpdateOwnerMeshLocationOnSeparation) == 0x0000E0, "Wrong size on BP_AJBInGameStand_C_UpdateOwnerMeshLocationOnSeparation");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateOwnerMeshLocationOnSeparation, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'BP_AJBInGameStand_C_UpdateOwnerMeshLocationOnSeparation::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateOwnerMeshLocationOnSeparation, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000008, "Member 'BP_AJBInGameStand_C_UpdateOwnerMeshLocationOnSeparation::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateOwnerMeshLocationOnSeparation, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_AJBInGameStand_C_UpdateOwnerMeshLocationOnSeparation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateOwnerMeshLocationOnSeparation, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'BP_AJBInGameStand_C_UpdateOwnerMeshLocationOnSeparation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateOwnerMeshLocationOnSeparation, K2Node_DynamicCast_AsBP_AJBIn_Game_Movable_Stand) == 0x000018, "Member 'BP_AJBInGameStand_C_UpdateOwnerMeshLocationOnSeparation::K2Node_DynamicCast_AsBP_AJBIn_Game_Movable_Stand' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateOwnerMeshLocationOnSeparation, K2Node_DynamicCast_bSuccess1) == 0x000020, "Member 'BP_AJBInGameStand_C_UpdateOwnerMeshLocationOnSeparation::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateOwnerMeshLocationOnSeparation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000024, "Member 'BP_AJBInGameStand_C_UpdateOwnerMeshLocationOnSeparation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateOwnerMeshLocationOnSeparation, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000030, "Member 'BP_AJBInGameStand_C_UpdateOwnerMeshLocationOnSeparation::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateOwnerMeshLocationOnSeparation, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x00003C, "Member 'BP_AJBInGameStand_C_UpdateOwnerMeshLocationOnSeparation::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateOwnerMeshLocationOnSeparation, CallFunc_Add_VectorVector_ReturnValue) == 0x000048, "Member 'BP_AJBInGameStand_C_UpdateOwnerMeshLocationOnSeparation::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateOwnerMeshLocationOnSeparation, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000058, "Member 'BP_AJBInGameStand_C_UpdateOwnerMeshLocationOnSeparation::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.UpdateMovementLocationOnNonSeparation
// 0x000C (0x000C - 0x0000)
struct BP_AJBInGameStand_C_UpdateMovementLocationOnNonSeparation final
{
public:
	struct FVector                                CallFunc_GetFixedLocation_Location;                // 0x0000(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameStand_C_UpdateMovementLocationOnNonSeparation) == 0x000004, "Wrong alignment on BP_AJBInGameStand_C_UpdateMovementLocationOnNonSeparation");
static_assert(sizeof(BP_AJBInGameStand_C_UpdateMovementLocationOnNonSeparation) == 0x00000C, "Wrong size on BP_AJBInGameStand_C_UpdateMovementLocationOnNonSeparation");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateMovementLocationOnNonSeparation, CallFunc_GetFixedLocation_Location) == 0x000000, "Member 'BP_AJBInGameStand_C_UpdateMovementLocationOnNonSeparation::CallFunc_GetFixedLocation_Location' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.UpdateMovementRotationOnSeparation
// 0x0030 (0x0030 - 0x0000)
struct BP_AJBInGameStand_C_UpdateMovementRotationOnSeparation final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameMovableStand_C*            K2Node_DynamicCast_AsBP_AJBIn_Game_Movable_Stand;  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0024(0x000C)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameStand_C_UpdateMovementRotationOnSeparation) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_UpdateMovementRotationOnSeparation");
static_assert(sizeof(BP_AJBInGameStand_C_UpdateMovementRotationOnSeparation) == 0x000030, "Wrong size on BP_AJBInGameStand_C_UpdateMovementRotationOnSeparation");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateMovementRotationOnSeparation, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'BP_AJBInGameStand_C_UpdateMovementRotationOnSeparation::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateMovementRotationOnSeparation, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000008, "Member 'BP_AJBInGameStand_C_UpdateMovementRotationOnSeparation::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateMovementRotationOnSeparation, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_AJBInGameStand_C_UpdateMovementRotationOnSeparation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateMovementRotationOnSeparation, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'BP_AJBInGameStand_C_UpdateMovementRotationOnSeparation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateMovementRotationOnSeparation, K2Node_DynamicCast_AsBP_AJBIn_Game_Movable_Stand) == 0x000018, "Member 'BP_AJBInGameStand_C_UpdateMovementRotationOnSeparation::K2Node_DynamicCast_AsBP_AJBIn_Game_Movable_Stand' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateMovementRotationOnSeparation, K2Node_DynamicCast_bSuccess1) == 0x000020, "Member 'BP_AJBInGameStand_C_UpdateMovementRotationOnSeparation::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateMovementRotationOnSeparation, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000024, "Member 'BP_AJBInGameStand_C_UpdateMovementRotationOnSeparation::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.UpdateOwnerMeshRotationOnSeparation
// 0x00B8 (0x00B8 - 0x0000)
struct BP_AJBInGameStand_C_UpdateOwnerMeshRotationOnSeparation final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameMovableStand_C*            K2Node_DynamicCast_AsBP_AJBIn_Game_Movable_Stand;  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0024(0x000C)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0030(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_AJBInGameStand_C_UpdateOwnerMeshRotationOnSeparation) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_UpdateOwnerMeshRotationOnSeparation");
static_assert(sizeof(BP_AJBInGameStand_C_UpdateOwnerMeshRotationOnSeparation) == 0x0000B8, "Wrong size on BP_AJBInGameStand_C_UpdateOwnerMeshRotationOnSeparation");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateOwnerMeshRotationOnSeparation, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'BP_AJBInGameStand_C_UpdateOwnerMeshRotationOnSeparation::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateOwnerMeshRotationOnSeparation, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000008, "Member 'BP_AJBInGameStand_C_UpdateOwnerMeshRotationOnSeparation::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateOwnerMeshRotationOnSeparation, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_AJBInGameStand_C_UpdateOwnerMeshRotationOnSeparation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateOwnerMeshRotationOnSeparation, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'BP_AJBInGameStand_C_UpdateOwnerMeshRotationOnSeparation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateOwnerMeshRotationOnSeparation, K2Node_DynamicCast_AsBP_AJBIn_Game_Movable_Stand) == 0x000018, "Member 'BP_AJBInGameStand_C_UpdateOwnerMeshRotationOnSeparation::K2Node_DynamicCast_AsBP_AJBIn_Game_Movable_Stand' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateOwnerMeshRotationOnSeparation, K2Node_DynamicCast_bSuccess1) == 0x000020, "Member 'BP_AJBInGameStand_C_UpdateOwnerMeshRotationOnSeparation::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateOwnerMeshRotationOnSeparation, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000024, "Member 'BP_AJBInGameStand_C_UpdateOwnerMeshRotationOnSeparation::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateOwnerMeshRotationOnSeparation, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000030, "Member 'BP_AJBInGameStand_C_UpdateOwnerMeshRotationOnSeparation::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.UpdateMovementRotationOnNonSeparation
// 0x0028 (0x0028 - 0x0000)
struct BP_AJBInGameStand_C_UpdateMovementRotationOnNonSeparation final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0010(0x000C)(IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x001C(0x000C)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameStand_C_UpdateMovementRotationOnNonSeparation) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_UpdateMovementRotationOnNonSeparation");
static_assert(sizeof(BP_AJBInGameStand_C_UpdateMovementRotationOnNonSeparation) == 0x000028, "Wrong size on BP_AJBInGameStand_C_UpdateMovementRotationOnNonSeparation");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateMovementRotationOnNonSeparation, DeltaSeconds) == 0x000000, "Member 'BP_AJBInGameStand_C_UpdateMovementRotationOnNonSeparation::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateMovementRotationOnNonSeparation, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBInGameStand_C_UpdateMovementRotationOnNonSeparation::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateMovementRotationOnNonSeparation, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000010, "Member 'BP_AJBInGameStand_C_UpdateMovementRotationOnNonSeparation::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_UpdateMovementRotationOnNonSeparation, CallFunc_RInterpTo_ReturnValue) == 0x00001C, "Member 'BP_AJBInGameStand_C_UpdateMovementRotationOnNonSeparation::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.GetPrimitivesToChangeStencil
// 0x0028 (0x0028 - 0x0000)
struct BP_AJBInGameStand_C_GetPrimitivesToChangeStencil final
{
public:
	E_StencilDigit                                StencilDigit;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            PrimitiveComponents;                               // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<class UPrimitiveComponent*>            K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ZeroConstructor, ReferenceParm)
};
static_assert(alignof(BP_AJBInGameStand_C_GetPrimitivesToChangeStencil) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_GetPrimitivesToChangeStencil");
static_assert(sizeof(BP_AJBInGameStand_C_GetPrimitivesToChangeStencil) == 0x000028, "Wrong size on BP_AJBInGameStand_C_GetPrimitivesToChangeStencil");
static_assert(offsetof(BP_AJBInGameStand_C_GetPrimitivesToChangeStencil, StencilDigit) == 0x000000, "Member 'BP_AJBInGameStand_C_GetPrimitivesToChangeStencil::StencilDigit' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetPrimitivesToChangeStencil, PrimitiveComponents) == 0x000008, "Member 'BP_AJBInGameStand_C_GetPrimitivesToChangeStencil::PrimitiveComponents' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameStand_C_GetPrimitivesToChangeStencil, K2Node_MakeArray_Array) == 0x000018, "Member 'BP_AJBInGameStand_C_GetPrimitivesToChangeStencil::K2Node_MakeArray_Array' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.GetGameplayTags
// 0x0020 (0x0020 - 0x0000)
struct BP_AJBInGameStand_C_GetGameplayTags final
{
public:
	struct FGameplayTagContainer                  TagContainerCopy;                                  // 0x0000(0x0020)(Parm, OutParm)
};
static_assert(alignof(BP_AJBInGameStand_C_GetGameplayTags) == 0x000008, "Wrong alignment on BP_AJBInGameStand_C_GetGameplayTags");
static_assert(sizeof(BP_AJBInGameStand_C_GetGameplayTags) == 0x000020, "Wrong size on BP_AJBInGameStand_C_GetGameplayTags");
static_assert(offsetof(BP_AJBInGameStand_C_GetGameplayTags, TagContainerCopy) == 0x000000, "Member 'BP_AJBInGameStand_C_GetGameplayTags::TagContainerCopy' has a wrong offset!");

// Function BP_AJBInGameStand.BP_AJBInGameStand_C.IsContinuousAccompany
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameStand_C_IsContinuousAccompany final
{
public:
	bool                                          IsContinuousAccompany_0;                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameStand_C_IsContinuousAccompany) == 0x000001, "Wrong alignment on BP_AJBInGameStand_C_IsContinuousAccompany");
static_assert(sizeof(BP_AJBInGameStand_C_IsContinuousAccompany) == 0x000001, "Wrong size on BP_AJBInGameStand_C_IsContinuousAccompany");
static_assert(offsetof(BP_AJBInGameStand_C_IsContinuousAccompany, IsContinuousAccompany_0) == 0x000000, "Member 'BP_AJBInGameStand_C_IsContinuousAccompany::IsContinuousAccompany_0' has a wrong offset!");

}

