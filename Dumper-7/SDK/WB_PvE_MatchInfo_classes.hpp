#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_PvE_MatchInfo

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AJB_classes.hpp"
#include "E_AJBInGamePvE_GamePhase_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_PvE_MatchInfo.WB_PvE_MatchInfo_C
// 0x0100 (0x0348 - 0x0248)
class UWB_PvE_MatchInfo_C final : public UAJBUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0248(0x0008)(Transient, DuplicateTransient)
	class UWidgetAnimation*                       OverTime;                                          // 0x0250(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetAnimation*                       WaveClear;                                         // 0x0258(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetAnimation*                       WaveStart;                                         // 0x0260(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              AJBImage_Belt_KnockDown;                           // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              AJBImage_Belt_Respawn;                             // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              AJBImage_Belt_WaveClear;                           // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              AJBImage_Belt_WaveStart;                           // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              AJBImage_BG;                                       // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              AJBImage_BottomBelt;                               // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              AJBImage_FlareL;                                   // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              AJBImage_FlareL_WaveClear;                         // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          AJBText_KnockDownCount;                            // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          AJBText_RemainingTime;                             // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          AJBText_RespawnCount;                              // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          AJBText_Score;                                     // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          AJBText_SurviveMessage;                            // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          AJBText_WaveClearText;                             // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          AJBText_WaveCount;                                 // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          AJBText_WaveStartText;                             // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           CanvasPanel_ScoreWindow;                           // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DMI_MatchInfo_BG;                                  // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ToAnimatedScore;                                   // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FromAnimatedScore;                                 // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScoreAnimationTimer;                               // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxScoreAnimationSeconds;                          // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnAnimationStarted_BeginWave;                      // 0x0308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnAnimationFinished_BeginWave;                     // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnAnimationStarted_EndWave;                        // 0x0328(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnAnimationFinished_EndWave;                       // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ExecuteUbergraph_WB_PvE_MatchInfo(int32 EntryPoint);
	void SetScore(int32 Value);
	void UpdateScore(float DeltaTime);
	void EventOnAnimationFinished_EndWave();
	void EventOnAnimationStarted_EndWave();
	void EventOnAnimationFinished_BeginWave();
	void EventOnAnimationStarted_BeginWave();
	void SetScoreWindowVisibility(bool IsVisible_0);
	void EndWave(int32 WaveIndex, float WaveDuration);
	void Construct();
	void BeginWave(int32 WaveIndex, float WaveDuration);
	void MakeTimeText(int32 Minutes, int32 Seconds, class FText* TimeText);
	void SetRemainingTime(int32 Minutes, int32 Seconds);
	void SetScoreImmediately(int32 Score);
	void SetProgressBar(float Ratio);
	void InitProgressBar();
	void SetRemainingTimeFromSeconds(float Seconds);
	void GetCurrentAnimatedScore(int32* AnimatedScore);
	void InitScore();
	void SetPhaseState(E_AJBInGamePvE_GamePhase Phase, int32 WaveNum, int32 MaxWaveNum);
	void MakeBeginWaveText(int32 WaveIndex, class FText* BeginWaveText);
	void MakeBeginWaveSurviveTimeText(float WaveSeconds, class FText* WaveTimeText);
	void BindAnimationDelegates();
	void MakeEndWaveText(int32 WaveIndex, class FText* EndWaveText);
	void SetKillCount(int32 Value);
	void SetRetiredCount(int32 Value);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_PvE_MatchInfo_C">();
	}
	static class UWB_PvE_MatchInfo_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_PvE_MatchInfo_C>();
	}
};
static_assert(alignof(UWB_PvE_MatchInfo_C) == 0x000008, "Wrong alignment on UWB_PvE_MatchInfo_C");
static_assert(sizeof(UWB_PvE_MatchInfo_C) == 0x000348, "Wrong size on UWB_PvE_MatchInfo_C");
static_assert(offsetof(UWB_PvE_MatchInfo_C, UberGraphFrame) == 0x000248, "Member 'UWB_PvE_MatchInfo_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_PvE_MatchInfo_C, OverTime) == 0x000250, "Member 'UWB_PvE_MatchInfo_C::OverTime' has a wrong offset!");
static_assert(offsetof(UWB_PvE_MatchInfo_C, WaveClear) == 0x000258, "Member 'UWB_PvE_MatchInfo_C::WaveClear' has a wrong offset!");
static_assert(offsetof(UWB_PvE_MatchInfo_C, WaveStart) == 0x000260, "Member 'UWB_PvE_MatchInfo_C::WaveStart' has a wrong offset!");
static_assert(offsetof(UWB_PvE_MatchInfo_C, AJBImage_Belt_KnockDown) == 0x000268, "Member 'UWB_PvE_MatchInfo_C::AJBImage_Belt_KnockDown' has a wrong offset!");
static_assert(offsetof(UWB_PvE_MatchInfo_C, AJBImage_Belt_Respawn) == 0x000270, "Member 'UWB_PvE_MatchInfo_C::AJBImage_Belt_Respawn' has a wrong offset!");
static_assert(offsetof(UWB_PvE_MatchInfo_C, AJBImage_Belt_WaveClear) == 0x000278, "Member 'UWB_PvE_MatchInfo_C::AJBImage_Belt_WaveClear' has a wrong offset!");
static_assert(offsetof(UWB_PvE_MatchInfo_C, AJBImage_Belt_WaveStart) == 0x000280, "Member 'UWB_PvE_MatchInfo_C::AJBImage_Belt_WaveStart' has a wrong offset!");
static_assert(offsetof(UWB_PvE_MatchInfo_C, AJBImage_BG) == 0x000288, "Member 'UWB_PvE_MatchInfo_C::AJBImage_BG' has a wrong offset!");
static_assert(offsetof(UWB_PvE_MatchInfo_C, AJBImage_BottomBelt) == 0x000290, "Member 'UWB_PvE_MatchInfo_C::AJBImage_BottomBelt' has a wrong offset!");
static_assert(offsetof(UWB_PvE_MatchInfo_C, AJBImage_FlareL) == 0x000298, "Member 'UWB_PvE_MatchInfo_C::AJBImage_FlareL' has a wrong offset!");
static_assert(offsetof(UWB_PvE_MatchInfo_C, AJBImage_FlareL_WaveClear) == 0x0002A0, "Member 'UWB_PvE_MatchInfo_C::AJBImage_FlareL_WaveClear' has a wrong offset!");
static_assert(offsetof(UWB_PvE_MatchInfo_C, AJBText_KnockDownCount) == 0x0002A8, "Member 'UWB_PvE_MatchInfo_C::AJBText_KnockDownCount' has a wrong offset!");
static_assert(offsetof(UWB_PvE_MatchInfo_C, AJBText_RemainingTime) == 0x0002B0, "Member 'UWB_PvE_MatchInfo_C::AJBText_RemainingTime' has a wrong offset!");
static_assert(offsetof(UWB_PvE_MatchInfo_C, AJBText_RespawnCount) == 0x0002B8, "Member 'UWB_PvE_MatchInfo_C::AJBText_RespawnCount' has a wrong offset!");
static_assert(offsetof(UWB_PvE_MatchInfo_C, AJBText_Score) == 0x0002C0, "Member 'UWB_PvE_MatchInfo_C::AJBText_Score' has a wrong offset!");
static_assert(offsetof(UWB_PvE_MatchInfo_C, AJBText_SurviveMessage) == 0x0002C8, "Member 'UWB_PvE_MatchInfo_C::AJBText_SurviveMessage' has a wrong offset!");
static_assert(offsetof(UWB_PvE_MatchInfo_C, AJBText_WaveClearText) == 0x0002D0, "Member 'UWB_PvE_MatchInfo_C::AJBText_WaveClearText' has a wrong offset!");
static_assert(offsetof(UWB_PvE_MatchInfo_C, AJBText_WaveCount) == 0x0002D8, "Member 'UWB_PvE_MatchInfo_C::AJBText_WaveCount' has a wrong offset!");
static_assert(offsetof(UWB_PvE_MatchInfo_C, AJBText_WaveStartText) == 0x0002E0, "Member 'UWB_PvE_MatchInfo_C::AJBText_WaveStartText' has a wrong offset!");
static_assert(offsetof(UWB_PvE_MatchInfo_C, CanvasPanel_ScoreWindow) == 0x0002E8, "Member 'UWB_PvE_MatchInfo_C::CanvasPanel_ScoreWindow' has a wrong offset!");
static_assert(offsetof(UWB_PvE_MatchInfo_C, DMI_MatchInfo_BG) == 0x0002F0, "Member 'UWB_PvE_MatchInfo_C::DMI_MatchInfo_BG' has a wrong offset!");
static_assert(offsetof(UWB_PvE_MatchInfo_C, ToAnimatedScore) == 0x0002F8, "Member 'UWB_PvE_MatchInfo_C::ToAnimatedScore' has a wrong offset!");
static_assert(offsetof(UWB_PvE_MatchInfo_C, FromAnimatedScore) == 0x0002FC, "Member 'UWB_PvE_MatchInfo_C::FromAnimatedScore' has a wrong offset!");
static_assert(offsetof(UWB_PvE_MatchInfo_C, ScoreAnimationTimer) == 0x000300, "Member 'UWB_PvE_MatchInfo_C::ScoreAnimationTimer' has a wrong offset!");
static_assert(offsetof(UWB_PvE_MatchInfo_C, MaxScoreAnimationSeconds) == 0x000304, "Member 'UWB_PvE_MatchInfo_C::MaxScoreAnimationSeconds' has a wrong offset!");
static_assert(offsetof(UWB_PvE_MatchInfo_C, OnAnimationStarted_BeginWave) == 0x000308, "Member 'UWB_PvE_MatchInfo_C::OnAnimationStarted_BeginWave' has a wrong offset!");
static_assert(offsetof(UWB_PvE_MatchInfo_C, OnAnimationFinished_BeginWave) == 0x000318, "Member 'UWB_PvE_MatchInfo_C::OnAnimationFinished_BeginWave' has a wrong offset!");
static_assert(offsetof(UWB_PvE_MatchInfo_C, OnAnimationStarted_EndWave) == 0x000328, "Member 'UWB_PvE_MatchInfo_C::OnAnimationStarted_EndWave' has a wrong offset!");
static_assert(offsetof(UWB_PvE_MatchInfo_C, OnAnimationFinished_EndWave) == 0x000338, "Member 'UWB_PvE_MatchInfo_C::OnAnimationFinished_EndWave' has a wrong offset!");

}

