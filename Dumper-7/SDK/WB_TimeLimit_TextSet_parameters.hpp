#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_TimeLimit_TextSet

#include "Basic.hpp"


namespace SDK::Params
{

// Function WB_TimeLimit_TextSet.WB_TimeLimit_TextSet_C.ExecuteUbergraph_WB_TimeLimit_TextSet
// 0x0014 (0x0014 - 0x0000)
struct WB_TimeLimit_TextSet_C_ExecuteUbergraph_WB_TimeLimit_TextSet final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Value;                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_MaxValue;                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FCeil_ReturnValue;                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TimeLimit_TextSet_C_ExecuteUbergraph_WB_TimeLimit_TextSet) == 0x000004, "Wrong alignment on WB_TimeLimit_TextSet_C_ExecuteUbergraph_WB_TimeLimit_TextSet");
static_assert(sizeof(WB_TimeLimit_TextSet_C_ExecuteUbergraph_WB_TimeLimit_TextSet) == 0x000014, "Wrong size on WB_TimeLimit_TextSet_C_ExecuteUbergraph_WB_TimeLimit_TextSet");
static_assert(offsetof(WB_TimeLimit_TextSet_C_ExecuteUbergraph_WB_TimeLimit_TextSet, EntryPoint) == 0x000000, "Member 'WB_TimeLimit_TextSet_C_ExecuteUbergraph_WB_TimeLimit_TextSet::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_TimeLimit_TextSet_C_ExecuteUbergraph_WB_TimeLimit_TextSet, K2Node_CustomEvent_Value) == 0x000004, "Member 'WB_TimeLimit_TextSet_C_ExecuteUbergraph_WB_TimeLimit_TextSet::K2Node_CustomEvent_Value' has a wrong offset!");
static_assert(offsetof(WB_TimeLimit_TextSet_C_ExecuteUbergraph_WB_TimeLimit_TextSet, K2Node_CustomEvent_MaxValue) == 0x000008, "Member 'WB_TimeLimit_TextSet_C_ExecuteUbergraph_WB_TimeLimit_TextSet::K2Node_CustomEvent_MaxValue' has a wrong offset!");
static_assert(offsetof(WB_TimeLimit_TextSet_C_ExecuteUbergraph_WB_TimeLimit_TextSet, CallFunc_FCeil_ReturnValue) == 0x00000C, "Member 'WB_TimeLimit_TextSet_C_ExecuteUbergraph_WB_TimeLimit_TextSet::CallFunc_FCeil_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_TimeLimit_TextSet_C_ExecuteUbergraph_WB_TimeLimit_TextSet, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000010, "Member 'WB_TimeLimit_TextSet_C_ExecuteUbergraph_WB_TimeLimit_TextSet::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");

// Function WB_TimeLimit_TextSet.WB_TimeLimit_TextSet_C.UpdateNumber
// 0x0008 (0x0008 - 0x0000)
struct WB_TimeLimit_TextSet_C_UpdateNumber final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxValue;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_TimeLimit_TextSet_C_UpdateNumber) == 0x000004, "Wrong alignment on WB_TimeLimit_TextSet_C_UpdateNumber");
static_assert(sizeof(WB_TimeLimit_TextSet_C_UpdateNumber) == 0x000008, "Wrong size on WB_TimeLimit_TextSet_C_UpdateNumber");
static_assert(offsetof(WB_TimeLimit_TextSet_C_UpdateNumber, Value) == 0x000000, "Member 'WB_TimeLimit_TextSet_C_UpdateNumber::Value' has a wrong offset!");
static_assert(offsetof(WB_TimeLimit_TextSet_C_UpdateNumber, MaxValue) == 0x000004, "Member 'WB_TimeLimit_TextSet_C_UpdateNumber::MaxValue' has a wrong offset!");

}

