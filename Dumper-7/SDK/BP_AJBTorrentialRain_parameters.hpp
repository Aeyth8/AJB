#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBTorrentialRain

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "AJB_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ST_FXVisibilityInfo_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_AJBTorrentialRain.BP_AJBTorrentialRain_C.ExecuteUbergraph_BP_AJBTorrentialRain
// 0x00F0 (0x00F0 - 0x0000)
struct BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_Event_Causer1;                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bTriggeredByStand;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Event_CauserType1;                          // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_SerialNumber1;                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_Event_PropagationSource;                    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Min_ReturnValue;                          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBTorrentialRainCloud_C*           CallFunc_TryGetTorrentialRainCloud_TorrentialRainCloud; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBTorrentialRainCloud_C*           CallFunc_TryGetTorrentialRainCloud_TorrentialRainCloud1; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bNewVisibility1;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bEnable1;                       // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBTorrentialRainCloud_C*           CallFunc_TryGetTorrentialRainCloud_TorrentialRainCloud2; // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBTorrentialRainCloud_C*           CallFunc_TryGetTorrentialRainCloud_TorrentialRainCloud3; // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckActive_bActive;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FST_FXVisibilityInfo                   K2Node_Event_PrevFXVisibility;                     // 0x0071(0x0002)(HasGetValueTypeHash)
	struct FST_FXVisibilityInfo                   K2Node_Event_FXVisibility;                         // 0x0073(0x0002)(HasGetValueTypeHash)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_Event_Causer;                               // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_CauserType;                           // 0x0080(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_SerialNumber;                         // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanXOR_ReturnValue;                   // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBTorrentialRainCloud_C*           CallFunc_TryGetTorrentialRainCloud_TorrentialRainCloud4; // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bEnable;                        // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacter*                    K2Node_Event_Operator;                             // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Time;                                 // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGeneralTiming                                K2Node_Event_Timing;                               // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bEnable;                              // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bOperatorIsEmpty;                     // 0x00AE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bNewVisibility;                       // 0x00AF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBTorrentialRainCloud_C*           CallFunc_TryGetTorrentialRainCloud_TorrentialRainCloud5; // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBGameplayTagOwnerInterface_C> K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface; // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain) == 0x000008, "Wrong alignment on BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain");
static_assert(sizeof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain) == 0x0000F0, "Wrong size on BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, EntryPoint) == 0x000000, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, CallFunc_IsDedicatedServer_ReturnValue) == 0x000004, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, K2Node_Event_Causer1) == 0x000010, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::K2Node_Event_Causer1' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, K2Node_Event_bTriggeredByStand) == 0x000018, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::K2Node_Event_bTriggeredByStand' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, K2Node_Event_CauserType1) == 0x000020, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::K2Node_Event_CauserType1' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, K2Node_Event_SerialNumber1) == 0x000028, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::K2Node_Event_SerialNumber1' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, K2Node_Event_PropagationSource) == 0x000030, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::K2Node_Event_PropagationSource' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, CallFunc_Min_ReturnValue) == 0x000038, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::CallFunc_Min_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, K2Node_Event_EndPlayReason) == 0x00003C, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, CallFunc_GetObjectClass_ReturnValue) == 0x000040, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, CallFunc_TryGetTorrentialRainCloud_TorrentialRainCloud) == 0x000048, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::CallFunc_TryGetTorrentialRainCloud_TorrentialRainCloud' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, CallFunc_TryGetTorrentialRainCloud_TorrentialRainCloud1) == 0x000050, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::CallFunc_TryGetTorrentialRainCloud_TorrentialRainCloud1' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, K2Node_Event_bNewVisibility1) == 0x000058, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::K2Node_Event_bNewVisibility1' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, K2Node_CustomEvent_bEnable1) == 0x000059, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::K2Node_CustomEvent_bEnable1' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, CallFunc_TryGetTorrentialRainCloud_TorrentialRainCloud2) == 0x000060, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::CallFunc_TryGetTorrentialRainCloud_TorrentialRainCloud2' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, CallFunc_TryGetTorrentialRainCloud_TorrentialRainCloud3) == 0x000068, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::CallFunc_TryGetTorrentialRainCloud_TorrentialRainCloud3' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, CallFunc_CheckActive_bActive) == 0x000070, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::CallFunc_CheckActive_bActive' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, K2Node_Event_PrevFXVisibility) == 0x000071, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::K2Node_Event_PrevFXVisibility' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, K2Node_Event_FXVisibility) == 0x000073, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::K2Node_Event_FXVisibility' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, K2Node_Event_Causer) == 0x000078, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::K2Node_Event_Causer' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, K2Node_Event_CauserType) == 0x000080, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::K2Node_Event_CauserType' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, K2Node_Event_SerialNumber) == 0x000088, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::K2Node_Event_SerialNumber' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, CallFunc_BooleanXOR_ReturnValue) == 0x00008C, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::CallFunc_BooleanXOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, CallFunc_TryGetTorrentialRainCloud_TorrentialRainCloud4) == 0x000090, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::CallFunc_TryGetTorrentialRainCloud_TorrentialRainCloud4' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, K2Node_CustomEvent_bEnable) == 0x000098, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::K2Node_CustomEvent_bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, K2Node_Event_Operator) == 0x0000A0, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::K2Node_Event_Operator' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, K2Node_Event_Time) == 0x0000A8, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::K2Node_Event_Time' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, K2Node_Event_Timing) == 0x0000AC, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::K2Node_Event_Timing' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, K2Node_Event_bEnable) == 0x0000AD, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::K2Node_Event_bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, K2Node_Event_bOperatorIsEmpty) == 0x0000AE, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::K2Node_Event_bOperatorIsEmpty' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, K2Node_Event_bNewVisibility) == 0x0000AF, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::K2Node_Event_bNewVisibility' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, CallFunc_Less_IntInt_ReturnValue) == 0x0000B0, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, CallFunc_GetOwner_ReturnValue) == 0x0000B8, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, CallFunc_TryGetTorrentialRainCloud_TorrentialRainCloud5) == 0x0000C0, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::CallFunc_TryGetTorrentialRainCloud_TorrentialRainCloud5' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x0000C8, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, K2Node_DynamicCast_bSuccess) == 0x0000D0, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface) == 0x0000D8, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain, K2Node_DynamicCast_bSuccess1) == 0x0000E8, "Member 'BP_AJBTorrentialRain_C_ExecuteUbergraph_BP_AJBTorrentialRain::K2Node_DynamicCast_bSuccess1' has a wrong offset!");

// Function BP_AJBTorrentialRain.BP_AJBTorrentialRain_C.ChangeEnable
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBTorrentialRain_C_ChangeEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBTorrentialRain_C_ChangeEnable) == 0x000001, "Wrong alignment on BP_AJBTorrentialRain_C_ChangeEnable");
static_assert(sizeof(BP_AJBTorrentialRain_C_ChangeEnable) == 0x000001, "Wrong size on BP_AJBTorrentialRain_C_ChangeEnable");
static_assert(offsetof(BP_AJBTorrentialRain_C_ChangeEnable, bEnable) == 0x000000, "Member 'BP_AJBTorrentialRain_C_ChangeEnable::bEnable' has a wrong offset!");

// Function BP_AJBTorrentialRain.BP_AJBTorrentialRain_C.ChangeEnableVisual
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBTorrentialRain_C_ChangeEnableVisual final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBTorrentialRain_C_ChangeEnableVisual) == 0x000001, "Wrong alignment on BP_AJBTorrentialRain_C_ChangeEnableVisual");
static_assert(sizeof(BP_AJBTorrentialRain_C_ChangeEnableVisual) == 0x000001, "Wrong size on BP_AJBTorrentialRain_C_ChangeEnableVisual");
static_assert(offsetof(BP_AJBTorrentialRain_C_ChangeEnableVisual, bEnable) == 0x000000, "Member 'BP_AJBTorrentialRain_C_ChangeEnableVisual::bEnable' has a wrong offset!");

// Function BP_AJBTorrentialRain.BP_AJBTorrentialRain_C.TryGetTorrentialRainCloud
// 0x0070 (0x0070 - 0x0000)
struct BP_AJBTorrentialRain_C_TryGetTorrentialRainCloud final
{
public:
	class ABP_AJBTorrentialRainCloud_C*           TorrentialRainCloud_0;                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0020(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBTorrentialRainCloud_C*           CallFunc_FinishSpawningActor_ReturnValue;          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBTorrentialRain_C_TryGetTorrentialRainCloud) == 0x000010, "Wrong alignment on BP_AJBTorrentialRain_C_TryGetTorrentialRainCloud");
static_assert(sizeof(BP_AJBTorrentialRain_C_TryGetTorrentialRainCloud) == 0x000070, "Wrong size on BP_AJBTorrentialRain_C_TryGetTorrentialRainCloud");
static_assert(offsetof(BP_AJBTorrentialRain_C_TryGetTorrentialRainCloud, TorrentialRainCloud_0) == 0x000000, "Member 'BP_AJBTorrentialRain_C_TryGetTorrentialRainCloud::TorrentialRainCloud_0' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_TryGetTorrentialRainCloud, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBTorrentialRain_C_TryGetTorrentialRainCloud::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_TryGetTorrentialRainCloud, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000010, "Member 'BP_AJBTorrentialRain_C_TryGetTorrentialRainCloud::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_TryGetTorrentialRainCloud, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AJBTorrentialRain_C_TryGetTorrentialRainCloud::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_TryGetTorrentialRainCloud, CallFunc_GetTransform_ReturnValue) == 0x000020, "Member 'BP_AJBTorrentialRain_C_TryGetTorrentialRainCloud::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_TryGetTorrentialRainCloud, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000050, "Member 'BP_AJBTorrentialRain_C_TryGetTorrentialRainCloud::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_TryGetTorrentialRainCloud, CallFunc_FinishSpawningActor_ReturnValue) == 0x000058, "Member 'BP_AJBTorrentialRain_C_TryGetTorrentialRainCloud::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_TryGetTorrentialRainCloud, CallFunc_IsValid_ReturnValue) == 0x000060, "Member 'BP_AJBTorrentialRain_C_TryGetTorrentialRainCloud::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_AJBTorrentialRain.BP_AJBTorrentialRain_C.OnRep_Rep_Phase(Server)
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBTorrentialRain_C_OnRep_Rep_Phase_Server_ final
{
public:
	class ABP_AJBTorrentialRainCloud_C*           CallFunc_TryGetTorrentialRainCloud_TorrentialRainCloud; // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBTorrentialRain_C_OnRep_Rep_Phase_Server_) == 0x000008, "Wrong alignment on BP_AJBTorrentialRain_C_OnRep_Rep_Phase_Server_");
static_assert(sizeof(BP_AJBTorrentialRain_C_OnRep_Rep_Phase_Server_) == 0x000010, "Wrong size on BP_AJBTorrentialRain_C_OnRep_Rep_Phase_Server_");
static_assert(offsetof(BP_AJBTorrentialRain_C_OnRep_Rep_Phase_Server_, CallFunc_TryGetTorrentialRainCloud_TorrentialRainCloud) == 0x000000, "Member 'BP_AJBTorrentialRain_C_OnRep_Rep_Phase_Server_::CallFunc_TryGetTorrentialRainCloud_TorrentialRainCloud' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_OnRep_Rep_Phase_Server_, CallFunc_IsDedicatedServer_ReturnValue) == 0x000008, "Member 'BP_AJBTorrentialRain_C_OnRep_Rep_Phase_Server_::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");

// Function BP_AJBTorrentialRain.BP_AJBTorrentialRain_C.SetPoliticMoveSpeed
// 0x0070 (0x0070 - 0x0000)
struct BP_AJBTorrentialRain_C_SetPoliticMoveSpeed final
{
public:
	float                                         Temp_float_Variable;                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBGameplayTagOwnerInterface_C> K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface; // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character1;     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBGameplayTagOwnerInterface_C> K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface1; // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBTorrentialRain_C_SetPoliticMoveSpeed) == 0x000008, "Wrong alignment on BP_AJBTorrentialRain_C_SetPoliticMoveSpeed");
static_assert(sizeof(BP_AJBTorrentialRain_C_SetPoliticMoveSpeed) == 0x000070, "Wrong size on BP_AJBTorrentialRain_C_SetPoliticMoveSpeed");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveSpeed, Temp_float_Variable) == 0x000000, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveSpeed::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveSpeed, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveSpeed::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveSpeed, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000010, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveSpeed::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveSpeed, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveSpeed::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveSpeed, K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface) == 0x000020, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveSpeed::K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveSpeed, K2Node_DynamicCast_bSuccess1) == 0x000030, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveSpeed::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveSpeed, CallFunc_GetOwner_ReturnValue1) == 0x000038, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveSpeed::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveSpeed, Temp_int_Variable) == 0x000040, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveSpeed::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveSpeed, K2Node_DynamicCast_AsBP_AJBIn_Game_Character1) == 0x000048, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveSpeed::K2Node_DynamicCast_AsBP_AJBIn_Game_Character1' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveSpeed, K2Node_DynamicCast_bSuccess2) == 0x000050, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveSpeed::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveSpeed, K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface1) == 0x000058, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveSpeed::K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface1' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveSpeed, K2Node_DynamicCast_bSuccess3) == 0x000068, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveSpeed::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveSpeed, K2Node_Select_Default) == 0x00006C, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveSpeed::K2Node_Select_Default' has a wrong offset!");

// Function BP_AJBTorrentialRain.BP_AJBTorrentialRain_C.GetGameplayTagTorrentialRain
// 0x0040 (0x0040 - 0x0000)
struct BP_AJBTorrentialRain_C_GetGameplayTagTorrentialRain final
{
public:
	int32                                         PhaseNum;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           GameplayTag;                                       // 0x0008(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_MakeGameplayTagByName_OutTag;             // 0x0030(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_MakeGameplayTagByName_ReturnValue;        // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBTorrentialRain_C_GetGameplayTagTorrentialRain) == 0x000008, "Wrong alignment on BP_AJBTorrentialRain_C_GetGameplayTagTorrentialRain");
static_assert(sizeof(BP_AJBTorrentialRain_C_GetGameplayTagTorrentialRain) == 0x000040, "Wrong size on BP_AJBTorrentialRain_C_GetGameplayTagTorrentialRain");
static_assert(offsetof(BP_AJBTorrentialRain_C_GetGameplayTagTorrentialRain, PhaseNum) == 0x000000, "Member 'BP_AJBTorrentialRain_C_GetGameplayTagTorrentialRain::PhaseNum' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_GetGameplayTagTorrentialRain, GameplayTag) == 0x000008, "Member 'BP_AJBTorrentialRain_C_GetGameplayTagTorrentialRain::GameplayTag' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_GetGameplayTagTorrentialRain, CallFunc_Conv_IntToString_ReturnValue) == 0x000010, "Member 'BP_AJBTorrentialRain_C_GetGameplayTagTorrentialRain::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_GetGameplayTagTorrentialRain, CallFunc_Concat_StrStr_ReturnValue) == 0x000020, "Member 'BP_AJBTorrentialRain_C_GetGameplayTagTorrentialRain::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_GetGameplayTagTorrentialRain, CallFunc_MakeGameplayTagByName_OutTag) == 0x000030, "Member 'BP_AJBTorrentialRain_C_GetGameplayTagTorrentialRain::CallFunc_MakeGameplayTagByName_OutTag' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_GetGameplayTagTorrentialRain, CallFunc_MakeGameplayTagByName_ReturnValue) == 0x000038, "Member 'BP_AJBTorrentialRain_C_GetGameplayTagTorrentialRain::CallFunc_MakeGameplayTagByName_ReturnValue' has a wrong offset!");

// Function BP_AJBTorrentialRain.BP_AJBTorrentialRain_C.SetPoliticMoveDistance
// 0x0070 (0x0070 - 0x0000)
struct BP_AJBTorrentialRain_C_SetPoliticMoveDistance final
{
public:
	float                                         Temp_float_Variable;                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBGameplayTagOwnerInterface_C> K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface; // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character1;     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBGameplayTagOwnerInterface_C> K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface1; // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBTorrentialRain_C_SetPoliticMoveDistance) == 0x000008, "Wrong alignment on BP_AJBTorrentialRain_C_SetPoliticMoveDistance");
static_assert(sizeof(BP_AJBTorrentialRain_C_SetPoliticMoveDistance) == 0x000070, "Wrong size on BP_AJBTorrentialRain_C_SetPoliticMoveDistance");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveDistance, Temp_float_Variable) == 0x000000, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveDistance::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveDistance, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveDistance::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveDistance, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000010, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveDistance::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveDistance, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveDistance::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveDistance, K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface) == 0x000020, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveDistance::K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveDistance, K2Node_DynamicCast_bSuccess1) == 0x000030, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveDistance::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveDistance, CallFunc_GetOwner_ReturnValue1) == 0x000038, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveDistance::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveDistance, Temp_int_Variable) == 0x000040, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveDistance::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveDistance, K2Node_DynamicCast_AsBP_AJBIn_Game_Character1) == 0x000048, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveDistance::K2Node_DynamicCast_AsBP_AJBIn_Game_Character1' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveDistance, K2Node_DynamicCast_bSuccess2) == 0x000050, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveDistance::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveDistance, K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface1) == 0x000058, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveDistance::K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface1' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveDistance, K2Node_DynamicCast_bSuccess3) == 0x000068, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveDistance::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveDistance, K2Node_Select_Default) == 0x00006C, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveDistance::K2Node_Select_Default' has a wrong offset!");

// Function BP_AJBTorrentialRain.BP_AJBTorrentialRain_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBTorrentialRain_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBTorrentialRain_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_AJBTorrentialRain_C_ReceiveEndPlay");
static_assert(sizeof(BP_AJBTorrentialRain_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_AJBTorrentialRain_C_ReceiveEndPlay");
static_assert(offsetof(BP_AJBTorrentialRain_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_AJBTorrentialRain_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_AJBTorrentialRain.BP_AJBTorrentialRain_C.SetPoliticStandLaunchVelocityScale
// 0x0070 (0x0070 - 0x0000)
struct BP_AJBTorrentialRain_C_SetPoliticStandLaunchVelocityScale final
{
public:
	float                                         Temp_float_Variable;                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBGameplayTagOwnerInterface_C> K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface; // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character1;     // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBGameplayTagOwnerInterface_C> K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface1; // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBTorrentialRain_C_SetPoliticStandLaunchVelocityScale) == 0x000008, "Wrong alignment on BP_AJBTorrentialRain_C_SetPoliticStandLaunchVelocityScale");
static_assert(sizeof(BP_AJBTorrentialRain_C_SetPoliticStandLaunchVelocityScale) == 0x000070, "Wrong size on BP_AJBTorrentialRain_C_SetPoliticStandLaunchVelocityScale");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticStandLaunchVelocityScale, Temp_float_Variable) == 0x000000, "Member 'BP_AJBTorrentialRain_C_SetPoliticStandLaunchVelocityScale::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticStandLaunchVelocityScale, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBTorrentialRain_C_SetPoliticStandLaunchVelocityScale::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticStandLaunchVelocityScale, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000010, "Member 'BP_AJBTorrentialRain_C_SetPoliticStandLaunchVelocityScale::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticStandLaunchVelocityScale, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AJBTorrentialRain_C_SetPoliticStandLaunchVelocityScale::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticStandLaunchVelocityScale, K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface) == 0x000020, "Member 'BP_AJBTorrentialRain_C_SetPoliticStandLaunchVelocityScale::K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticStandLaunchVelocityScale, K2Node_DynamicCast_bSuccess1) == 0x000030, "Member 'BP_AJBTorrentialRain_C_SetPoliticStandLaunchVelocityScale::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticStandLaunchVelocityScale, CallFunc_GetOwner_ReturnValue1) == 0x000038, "Member 'BP_AJBTorrentialRain_C_SetPoliticStandLaunchVelocityScale::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticStandLaunchVelocityScale, K2Node_DynamicCast_AsBP_AJBIn_Game_Character1) == 0x000040, "Member 'BP_AJBTorrentialRain_C_SetPoliticStandLaunchVelocityScale::K2Node_DynamicCast_AsBP_AJBIn_Game_Character1' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticStandLaunchVelocityScale, K2Node_DynamicCast_bSuccess2) == 0x000048, "Member 'BP_AJBTorrentialRain_C_SetPoliticStandLaunchVelocityScale::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticStandLaunchVelocityScale, K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface1) == 0x000050, "Member 'BP_AJBTorrentialRain_C_SetPoliticStandLaunchVelocityScale::K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface1' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticStandLaunchVelocityScale, K2Node_DynamicCast_bSuccess3) == 0x000060, "Member 'BP_AJBTorrentialRain_C_SetPoliticStandLaunchVelocityScale::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticStandLaunchVelocityScale, Temp_int_Variable) == 0x000064, "Member 'BP_AJBTorrentialRain_C_SetPoliticStandLaunchVelocityScale::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticStandLaunchVelocityScale, K2Node_Select_Default) == 0x000068, "Member 'BP_AJBTorrentialRain_C_SetPoliticStandLaunchVelocityScale::K2Node_Select_Default' has a wrong offset!");

// Function BP_AJBTorrentialRain.BP_AJBTorrentialRain_C.SetPoliticMoveSpeedByStand
// 0x0070 (0x0070 - 0x0000)
struct BP_AJBTorrentialRain_C_SetPoliticMoveSpeedByStand final
{
public:
	float                                         Temp_float_Variable;                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBGameplayTagOwnerInterface_C> K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface; // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character1;     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBGameplayTagOwnerInterface_C> K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface1; // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBTorrentialRain_C_SetPoliticMoveSpeedByStand) == 0x000008, "Wrong alignment on BP_AJBTorrentialRain_C_SetPoliticMoveSpeedByStand");
static_assert(sizeof(BP_AJBTorrentialRain_C_SetPoliticMoveSpeedByStand) == 0x000070, "Wrong size on BP_AJBTorrentialRain_C_SetPoliticMoveSpeedByStand");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveSpeedByStand, Temp_float_Variable) == 0x000000, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveSpeedByStand::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveSpeedByStand, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveSpeedByStand::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveSpeedByStand, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000010, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveSpeedByStand::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveSpeedByStand, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveSpeedByStand::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveSpeedByStand, K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface) == 0x000020, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveSpeedByStand::K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveSpeedByStand, K2Node_DynamicCast_bSuccess1) == 0x000030, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveSpeedByStand::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveSpeedByStand, CallFunc_GetOwner_ReturnValue1) == 0x000038, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveSpeedByStand::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveSpeedByStand, Temp_int_Variable) == 0x000040, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveSpeedByStand::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveSpeedByStand, K2Node_DynamicCast_AsBP_AJBIn_Game_Character1) == 0x000048, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveSpeedByStand::K2Node_DynamicCast_AsBP_AJBIn_Game_Character1' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveSpeedByStand, K2Node_DynamicCast_bSuccess2) == 0x000050, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveSpeedByStand::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveSpeedByStand, K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface1) == 0x000058, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveSpeedByStand::K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface1' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveSpeedByStand, K2Node_DynamicCast_bSuccess3) == 0x000068, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveSpeedByStand::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_SetPoliticMoveSpeedByStand, K2Node_Select_Default) == 0x00006C, "Member 'BP_AJBTorrentialRain_C_SetPoliticMoveSpeedByStand::K2Node_Select_Default' has a wrong offset!");

// Function BP_AJBTorrentialRain.BP_AJBTorrentialRain_C.OnMC_ActivePassive
// 0x0018 (0x0018 - 0x0000)
struct BP_AJBTorrentialRain_C_OnMC_ActivePassive final
{
public:
	class UObject*                                Causer;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CauserType;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         SerialNumber;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBTorrentialRain_C_OnMC_ActivePassive) == 0x000008, "Wrong alignment on BP_AJBTorrentialRain_C_OnMC_ActivePassive");
static_assert(sizeof(BP_AJBTorrentialRain_C_OnMC_ActivePassive) == 0x000018, "Wrong size on BP_AJBTorrentialRain_C_OnMC_ActivePassive");
static_assert(offsetof(BP_AJBTorrentialRain_C_OnMC_ActivePassive, Causer) == 0x000000, "Member 'BP_AJBTorrentialRain_C_OnMC_ActivePassive::Causer' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_OnMC_ActivePassive, CauserType) == 0x000008, "Member 'BP_AJBTorrentialRain_C_OnMC_ActivePassive::CauserType' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_OnMC_ActivePassive, SerialNumber) == 0x000010, "Member 'BP_AJBTorrentialRain_C_OnMC_ActivePassive::SerialNumber' has a wrong offset!");

// Function BP_AJBTorrentialRain.BP_AJBTorrentialRain_C.ActivePassive
// 0x0028 (0x0028 - 0x0000)
struct BP_AJBTorrentialRain_C_ActivePassive final
{
public:
	class UObject*                                Causer;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTriggeredByStand;                                 // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CauserType;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         SerialNumber;                                      // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                PropagationSource_0;                               // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBTorrentialRain_C_ActivePassive) == 0x000008, "Wrong alignment on BP_AJBTorrentialRain_C_ActivePassive");
static_assert(sizeof(BP_AJBTorrentialRain_C_ActivePassive) == 0x000028, "Wrong size on BP_AJBTorrentialRain_C_ActivePassive");
static_assert(offsetof(BP_AJBTorrentialRain_C_ActivePassive, Causer) == 0x000000, "Member 'BP_AJBTorrentialRain_C_ActivePassive::Causer' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ActivePassive, bTriggeredByStand) == 0x000008, "Member 'BP_AJBTorrentialRain_C_ActivePassive::bTriggeredByStand' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ActivePassive, CauserType) == 0x000010, "Member 'BP_AJBTorrentialRain_C_ActivePassive::CauserType' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ActivePassive, SerialNumber) == 0x000018, "Member 'BP_AJBTorrentialRain_C_ActivePassive::SerialNumber' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_ActivePassive, PropagationSource_0) == 0x000020, "Member 'BP_AJBTorrentialRain_C_ActivePassive::PropagationSource_0' has a wrong offset!");

// Function BP_AJBTorrentialRain.BP_AJBTorrentialRain_C.ChangeParticleVisibility
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBTorrentialRain_C_ChangeParticleVisibility final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBTorrentialRain_C_ChangeParticleVisibility) == 0x000001, "Wrong alignment on BP_AJBTorrentialRain_C_ChangeParticleVisibility");
static_assert(sizeof(BP_AJBTorrentialRain_C_ChangeParticleVisibility) == 0x000001, "Wrong size on BP_AJBTorrentialRain_C_ChangeParticleVisibility");
static_assert(offsetof(BP_AJBTorrentialRain_C_ChangeParticleVisibility, bNewVisibility) == 0x000000, "Member 'BP_AJBTorrentialRain_C_ChangeParticleVisibility::bNewVisibility' has a wrong offset!");

// Function BP_AJBTorrentialRain.BP_AJBTorrentialRain_C.NotifyChangeFXVisibility
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBTorrentialRain_C_NotifyChangeFXVisibility final
{
public:
	struct FST_FXVisibilityInfo                   PrevFXVisibility;                                  // 0x0000(0x0002)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	struct FST_FXVisibilityInfo                   FXVisibility;                                      // 0x0002(0x0002)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBTorrentialRain_C_NotifyChangeFXVisibility) == 0x000001, "Wrong alignment on BP_AJBTorrentialRain_C_NotifyChangeFXVisibility");
static_assert(sizeof(BP_AJBTorrentialRain_C_NotifyChangeFXVisibility) == 0x000004, "Wrong size on BP_AJBTorrentialRain_C_NotifyChangeFXVisibility");
static_assert(offsetof(BP_AJBTorrentialRain_C_NotifyChangeFXVisibility, PrevFXVisibility) == 0x000000, "Member 'BP_AJBTorrentialRain_C_NotifyChangeFXVisibility::PrevFXVisibility' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_NotifyChangeFXVisibility, FXVisibility) == 0x000002, "Member 'BP_AJBTorrentialRain_C_NotifyChangeFXVisibility::FXVisibility' has a wrong offset!");

// Function BP_AJBTorrentialRain.BP_AJBTorrentialRain_C.NotifyTheWorld
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBTorrentialRain_C_NotifyTheWorld final
{
public:
	class AAJBInGameCharacter*                    Operator;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGeneralTiming                                Timing;                                            // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnable;                                           // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bOperatorIsEmpty;                                  // 0x000E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBTorrentialRain_C_NotifyTheWorld) == 0x000008, "Wrong alignment on BP_AJBTorrentialRain_C_NotifyTheWorld");
static_assert(sizeof(BP_AJBTorrentialRain_C_NotifyTheWorld) == 0x000010, "Wrong size on BP_AJBTorrentialRain_C_NotifyTheWorld");
static_assert(offsetof(BP_AJBTorrentialRain_C_NotifyTheWorld, Operator) == 0x000000, "Member 'BP_AJBTorrentialRain_C_NotifyTheWorld::Operator' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_NotifyTheWorld, Time) == 0x000008, "Member 'BP_AJBTorrentialRain_C_NotifyTheWorld::Time' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_NotifyTheWorld, Timing) == 0x00000C, "Member 'BP_AJBTorrentialRain_C_NotifyTheWorld::Timing' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_NotifyTheWorld, bEnable) == 0x00000D, "Member 'BP_AJBTorrentialRain_C_NotifyTheWorld::bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBTorrentialRain_C_NotifyTheWorld, bOperatorIsEmpty) == 0x00000E, "Member 'BP_AJBTorrentialRain_C_NotifyTheWorld::bOperatorIsEmpty' has a wrong offset!");

// Function BP_AJBTorrentialRain.BP_AJBTorrentialRain_C.TryChangeParticleVisibility
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBTorrentialRain_C_TryChangeParticleVisibility final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBTorrentialRain_C_TryChangeParticleVisibility) == 0x000001, "Wrong alignment on BP_AJBTorrentialRain_C_TryChangeParticleVisibility");
static_assert(sizeof(BP_AJBTorrentialRain_C_TryChangeParticleVisibility) == 0x000001, "Wrong size on BP_AJBTorrentialRain_C_TryChangeParticleVisibility");
static_assert(offsetof(BP_AJBTorrentialRain_C_TryChangeParticleVisibility, bNewVisibility) == 0x000000, "Member 'BP_AJBTorrentialRain_C_TryChangeParticleVisibility::bNewVisibility' has a wrong offset!");

// Function BP_AJBTorrentialRain.BP_AJBTorrentialRain_C.GetCurrentPhase
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBTorrentialRain_C_GetCurrentPhase final
{
public:
	int32                                         Phase;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBTorrentialRain_C_GetCurrentPhase) == 0x000004, "Wrong alignment on BP_AJBTorrentialRain_C_GetCurrentPhase");
static_assert(sizeof(BP_AJBTorrentialRain_C_GetCurrentPhase) == 0x000004, "Wrong size on BP_AJBTorrentialRain_C_GetCurrentPhase");
static_assert(offsetof(BP_AJBTorrentialRain_C_GetCurrentPhase, Phase) == 0x000000, "Member 'BP_AJBTorrentialRain_C_GetCurrentPhase::Phase' has a wrong offset!");

}

