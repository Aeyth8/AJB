#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBPvEGameState

#include "Basic.hpp"

#include "BP_AJBPvEGameState_classes.hpp"
#include "BP_AJBPvEGameState_parameters.hpp"


namespace SDK
{

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.ExecuteUbergraph_BP_AJBPvEGameState
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPvEGameState_C::ExecuteUbergraph_BP_AJBPvEGameState(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "ExecuteUbergraph_BP_AJBPvEGameState");

	Params::BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.DetermineScoreResults_Internal
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   BorderGroup                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPvEGameDifficulty                      Difficulty                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsIncludingBonus                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBPvEGameState_C::DetermineScoreResults_Internal(int32 BorderGroup, EPvEGameDifficulty Difficulty, bool IsIncludingBonus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "DetermineScoreResults_Internal");

	Params::BP_AJBPvEGameState_C_DetermineScoreResults_Internal Parms{};

	Parms.BorderGroup = BorderGroup;
	Parms.Difficulty = Difficulty;
	Parms.IsIncludingBonus = IsIncludingBonus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.ROS_DetermineScoreResults
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   BorderGroup                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPvEGameDifficulty                      Difficulty                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsIncludingBonus                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBPvEGameState_C::ROS_DetermineScoreResults(int32 BorderGroup, EPvEGameDifficulty Difficulty, bool IsIncludingBonus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "ROS_DetermineScoreResults");

	Params::BP_AJBPvEGameState_C_ROS_DetermineScoreResults Parms{};

	Parms.BorderGroup = BorderGroup;
	Parms.Difficulty = Difficulty;
	Parms.IsIncludingBonus = IsIncludingBonus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.MC_DetermineScoreResults
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   BorderGroup                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPvEGameDifficulty                      Difficulty                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsIncludingBonus                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBPvEGameState_C::MC_DetermineScoreResults(int32 BorderGroup, EPvEGameDifficulty Difficulty, bool IsIncludingBonus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "MC_DetermineScoreResults");

	Params::BP_AJBPvEGameState_C_MC_DetermineScoreResults Parms{};

	Parms.BorderGroup = BorderGroup;
	Parms.Difficulty = Difficulty;
	Parms.IsIncludingBonus = IsIncludingBonus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.DetermineScoreResults
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   BorderGroup                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPvEGameDifficulty                      Difficulty                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsIncludingBonus                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBPvEGameState_C::DetermineScoreResults(int32 BorderGroup, EPvEGameDifficulty Difficulty, bool IsIncludingBonus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "DetermineScoreResults");

	Params::BP_AJBPvEGameState_C_DetermineScoreResults Parms{};

	Parms.BorderGroup = BorderGroup;
	Parms.Difficulty = Difficulty;
	Parms.IsIncludingBonus = IsIncludingBonus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.InitCache
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBPvEGameState_C::InitCache()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "InitCache");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.OnEndWave
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaveIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   WaveDuration                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPvEGameState_C::OnEndWave(int32 WaveIndex, float WaveDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "OnEndWave");

	Params::BP_AJBPvEGameState_C_OnEndWave Parms{};

	Parms.WaveIndex = WaveIndex;
	Parms.WaveDuration = WaveDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.InitDelegateBinds
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBPvEGameState_C::InitDelegateBinds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "InitDelegateBinds");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.Debug_SetupPairMode
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_AJBPvEGameState_C::Debug_SetupPairMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "Debug_SetupPairMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.SetupForEditor
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBPvEGameState_C::SetupForEditor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "SetupForEditor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.MC_SyncNPCMatchingInfo
// (Net, NetReliable, NetMulticast, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    PlayerID                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)
// const struct FMatchingPlayerInfo&       PlayerInfo                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_AJBPvEGameState_C::MC_SyncNPCMatchingInfo(const class FString& PlayerID, const struct FMatchingPlayerInfo& PlayerInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "MC_SyncNPCMatchingInfo");

	Params::BP_AJBPvEGameState_C_MC_SyncNPCMatchingInfo Parms{};

	Parms.PlayerID = std::move(PlayerID);
	Parms.PlayerInfo = std::move(PlayerInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.MC_OnRetiredCountChanged
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   OldRetiredCount                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NewRetiredCount                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPvEGameState_C::MC_OnRetiredCountChanged(int32 OldRetiredCount, int32 NewRetiredCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "MC_OnRetiredCountChanged");

	Params::BP_AJBPvEGameState_C_MC_OnRetiredCountChanged Parms{};

	Parms.OldRetiredCount = OldRetiredCount;
	Parms.NewRetiredCount = NewRetiredCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.MC_OnKillCountChanged
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   OldKillCount                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NewKillCount                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPvEGameState_C::MC_OnKillCountChanged(int32 OldKillCount, int32 NewKillCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "MC_OnKillCountChanged");

	Params::BP_AJBPvEGameState_C_MC_OnKillCountChanged Parms{};

	Parms.OldKillCount = OldKillCount;
	Parms.NewKillCount = NewKillCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.MC_OnKillScoreChanged
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   OldScore                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NewScore                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPvEGameState_C::MC_OnKillScoreChanged(int32 OldScore, int32 NewScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "MC_OnKillScoreChanged");

	Params::BP_AJBPvEGameState_C_MC_OnKillScoreChanged Parms{};

	Parms.OldScore = OldScore;
	Parms.NewScore = NewScore;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.GetMobKillScore
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32*                                  Score                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPvEGameState_C::GetMobKillScore(int32* Score)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "GetMobKillScore");

	Params::BP_AJBPvEGameState_C_GetMobKillScore Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Score != nullptr)
		*Score = Parms.Score;
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.SetMobKillScore
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPvEGameState_C::SetMobKillScore(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "SetMobKillScore");

	Params::BP_AJBPvEGameState_C_SetMobKillScore Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.AddMobKillScore
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPvEGameState_C::AddMobKillScore(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "AddMobKillScore");

	Params::BP_AJBPvEGameState_C_AddMobKillScore Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.GiveRewardOnWaveCleared
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WaveIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPvEGameState_C::GiveRewardOnWaveCleared(int32 WaveIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "GiveRewardOnWaveCleared");

	Params::BP_AJBPvEGameState_C_GiveRewardOnWaveCleared Parms{};

	Parms.WaveIndex = WaveIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.GetMobKillCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32*                                  Count                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPvEGameState_C::GetMobKillCount(int32* Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "GetMobKillCount");

	Params::BP_AJBPvEGameState_C_GetMobKillCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Count != nullptr)
		*Count = Parms.Count;
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.SetMobKillCount
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPvEGameState_C::SetMobKillCount(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "SetMobKillCount");

	Params::BP_AJBPvEGameState_C_SetMobKillCount Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.AddMobKillCount
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPvEGameState_C::AddMobKillCount(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "AddMobKillCount");

	Params::BP_AJBPvEGameState_C_AddMobKillCount Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.IncrementMobKillCount
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBPvEGameState_C::IncrementMobKillCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "IncrementMobKillCount");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.GetRetiredCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32*                                  TotalRetiredCount                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPvEGameState_C::GetRetiredCount(int32* TotalRetiredCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "GetRetiredCount");

	Params::BP_AJBPvEGameState_C_GetRetiredCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TotalRetiredCount != nullptr)
		*TotalRetiredCount = Parms.TotalRetiredCount;
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.SetRetiredCount
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPvEGameState_C::SetRetiredCount(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "SetRetiredCount");

	Params::BP_AJBPvEGameState_C_SetRetiredCount Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.AddRetiredCount
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPvEGameState_C::AddRetiredCount(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "AddRetiredCount");

	Params::BP_AJBPvEGameState_C_AddRetiredCount Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.IncrementRetiredCount
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBPvEGameState_C::IncrementRetiredCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "IncrementRetiredCount");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.GetScoreResults
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   BorderGroup                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPvEGameDifficulty                      Difficulty                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsIncludingBonus                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FST_AJBPvEScoreResult*           ScoreResults                                           (Parm, OutParm, HasGetValueTypeHash)

void ABP_AJBPvEGameState_C::GetScoreResults(int32 BorderGroup, EPvEGameDifficulty Difficulty, bool IsIncludingBonus, struct FST_AJBPvEScoreResult* ScoreResults)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "GetScoreResults");

	Params::BP_AJBPvEGameState_C_GetScoreResults Parms{};

	Parms.BorderGroup = BorderGroup;
	Parms.Difficulty = Difficulty;
	Parms.IsIncludingBonus = IsIncludingBonus;

	UObject::ProcessEvent(Func, &Parms);

	if (ScoreResults != nullptr)
		*ScoreResults = std::move(Parms.ScoreResults);
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.GetRetiredBonusScore
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EPvEGameDifficulty                      Difficulty                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  BonusScore                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPvEGameState_C::GetRetiredBonusScore(EPvEGameDifficulty Difficulty, int32* BonusScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "GetRetiredBonusScore");

	Params::BP_AJBPvEGameState_C_GetRetiredBonusScore Parms{};

	Parms.Difficulty = Difficulty;

	UObject::ProcessEvent(Func, &Parms);

	if (BonusScore != nullptr)
		*BonusScore = Parms.BonusScore;
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.GetScoreSettings
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const EPvEGameDifficulty&               Difficulty                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FST_AJBInGamePvE_ScoreSettings*  ScoreSettings                                          (Parm, OutParm, HasGetValueTypeHash)
// bool*                                   WasFound                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBPvEGameState_C::GetScoreSettings(const EPvEGameDifficulty& Difficulty, struct FST_AJBInGamePvE_ScoreSettings* ScoreSettings, bool* WasFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "GetScoreSettings");

	Params::BP_AJBPvEGameState_C_GetScoreSettings Parms{};

	Parms.Difficulty = Difficulty;

	UObject::ProcessEvent(Func, &Parms);

	if (ScoreSettings != nullptr)
		*ScoreSettings = std::move(Parms.ScoreSettings);

	if (WasFound != nullptr)
		*WasFound = Parms.WasFound;
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.GetKnockDownScoreSetting
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const EPvEGameDifficulty&               Difficulty                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  KnockDownScore                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPvEGameState_C::GetKnockDownScoreSetting(const EPvEGameDifficulty& Difficulty, int32* KnockDownScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "GetKnockDownScoreSetting");

	Params::BP_AJBPvEGameState_C_GetKnockDownScoreSetting Parms{};

	Parms.Difficulty = Difficulty;

	UObject::ProcessEvent(Func, &Parms);

	if (KnockDownScore != nullptr)
		*KnockDownScore = Parms.KnockDownScore;
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.GetScoreRank
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Score                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   BorderGroup                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPvEGameDifficulty                      Difficulty                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  ScoreRank                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPvEGameState_C::GetScoreRank(int32 Score, int32 BorderGroup, EPvEGameDifficulty Difficulty, int32* ScoreRank)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "GetScoreRank");

	Params::BP_AJBPvEGameState_C_GetScoreRank Parms{};

	Parms.Score = Score;
	Parms.BorderGroup = BorderGroup;
	Parms.Difficulty = Difficulty;

	UObject::ProcessEvent(Func, &Parms);

	if (ScoreRank != nullptr)
		*ScoreRank = Parms.ScoreRank;
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.GetScoreRankSettings
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   BorderGroup                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const EPvEGameDifficulty&               Difficulty                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FST_AJBInGamePvE_ScoreRankSettings*ScoreRankSettings                                      (Parm, OutParm, HasGetValueTypeHash)
// bool*                                   WasFound                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBPvEGameState_C::GetScoreRankSettings(int32 BorderGroup, const EPvEGameDifficulty& Difficulty, struct FST_AJBInGamePvE_ScoreRankSettings* ScoreRankSettings, bool* WasFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "GetScoreRankSettings");

	Params::BP_AJBPvEGameState_C_GetScoreRankSettings Parms{};

	Parms.BorderGroup = BorderGroup;
	Parms.Difficulty = Difficulty;

	UObject::ProcessEvent(Func, &Parms);

	if (ScoreRankSettings != nullptr)
		*ScoreRankSettings = std::move(Parms.ScoreRankSettings);

	if (WasFound != nullptr)
		*WasFound = Parms.WasFound;
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.ConvertScoreRankSettingsToArray
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FST_AJBInGamePvE_ScoreRankSettings&ScoreRankSettings                                      (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// TArray<int32>*                          BorderArray                                            (Parm, OutParm, ZeroConstructor)

void ABP_AJBPvEGameState_C::ConvertScoreRankSettingsToArray(const struct FST_AJBInGamePvE_ScoreRankSettings& ScoreRankSettings, TArray<int32>* BorderArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "ConvertScoreRankSettingsToArray");

	Params::BP_AJBPvEGameState_C_ConvertScoreRankSettingsToArray Parms{};

	Parms.ScoreRankSettings = std::move(ScoreRankSettings);

	UObject::ProcessEvent(Func, &Parms);

	if (BorderArray != nullptr)
		*BorderArray = std::move(Parms.BorderArray);
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.DetermineScoreRankBorderGroup
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32*                                  BorderGroup                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPvEGameState_C::DetermineScoreRankBorderGroup(int32* BorderGroup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "DetermineScoreRankBorderGroup");

	Params::BP_AJBPvEGameState_C_DetermineScoreRankBorderGroup Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BorderGroup != nullptr)
		*BorderGroup = Parms.BorderGroup;
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.GetDifficulty
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EPvEGameDifficulty*                     Difficulty                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPvEGameState_C::GetDifficulty(EPvEGameDifficulty* Difficulty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "GetDifficulty");

	Params::BP_AJBPvEGameState_C_GetDifficulty Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Difficulty != nullptr)
		*Difficulty = Parms.Difficulty;
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.GetScoreRankBorderGroup
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32*                                  BorderGroup                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPvEGameState_C::GetScoreRankBorderGroup(int32* BorderGroup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "GetScoreRankBorderGroup");

	Params::BP_AJBPvEGameState_C_GetScoreRankBorderGroup Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BorderGroup != nullptr)
		*BorderGroup = Parms.BorderGroup;
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.GetBossKillScore
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32*                                  Score                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPvEGameState_C::GetBossKillScore(int32* Score)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "GetBossKillScore");

	Params::BP_AJBPvEGameState_C_GetBossKillScore Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Score != nullptr)
		*Score = Parms.Score;
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.SetBossKillScore
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPvEGameState_C::SetBossKillScore(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "SetBossKillScore");

	Params::BP_AJBPvEGameState_C_SetBossKillScore Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.AddBossKillScore
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPvEGameState_C::AddBossKillScore(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "AddBossKillScore");

	Params::BP_AJBPvEGameState_C_AddBossKillScore Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.GetBossKillCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32*                                  Count                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPvEGameState_C::GetBossKillCount(int32* Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "GetBossKillCount");

	Params::BP_AJBPvEGameState_C_GetBossKillCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Count != nullptr)
		*Count = Parms.Count;
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.SetBossKillCount
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPvEGameState_C::SetBossKillCount(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "SetBossKillCount");

	Params::BP_AJBPvEGameState_C_SetBossKillCount Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.AddBossKillCount
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPvEGameState_C::AddBossKillCount(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "AddBossKillCount");

	Params::BP_AJBPvEGameState_C_AddBossKillCount Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.IncrementBossKillCount
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBPvEGameState_C::IncrementBossKillCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "IncrementBossKillCount");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.GetTotalKillScore
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32*                                  Score                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPvEGameState_C::GetTotalKillScore(int32* Score)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "GetTotalKillScore");

	Params::BP_AJBPvEGameState_C_GetTotalKillScore Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Score != nullptr)
		*Score = Parms.Score;
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.GetTotalKillCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32*                                  Count                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPvEGameState_C::GetTotalKillCount(int32* Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "GetTotalKillCount");

	Params::BP_AJBPvEGameState_C_GetTotalKillCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Count != nullptr)
		*Count = Parms.Count;
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.GetDeterminedScoreResults
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FST_AJBPvEScoreResult*           Results                                                (Parm, OutParm, HasGetValueTypeHash)

void ABP_AJBPvEGameState_C::GetDeterminedScoreResults(struct FST_AJBPvEScoreResult* Results)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "GetDeterminedScoreResults");

	Params::BP_AJBPvEGameState_C_GetDeterminedScoreResults Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Results != nullptr)
		*Results = std::move(Parms.Results);
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.DetermineAndGetScoreResults
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   BorderGroup                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPvEGameDifficulty                      Difficulty                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsIncludingBonus                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FST_AJBPvEScoreResult*           Results                                                (Parm, OutParm, HasGetValueTypeHash)

void ABP_AJBPvEGameState_C::DetermineAndGetScoreResults(int32 BorderGroup, EPvEGameDifficulty Difficulty, bool IsIncludingBonus, struct FST_AJBPvEScoreResult* Results)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "DetermineAndGetScoreResults");

	Params::BP_AJBPvEGameState_C_DetermineAndGetScoreResults Parms{};

	Parms.BorderGroup = BorderGroup;
	Parms.Difficulty = Difficulty;
	Parms.IsIncludingBonus = IsIncludingBonus;

	UObject::ProcessEvent(Func, &Parms);

	if (Results != nullptr)
		*Results = std::move(Parms.Results);
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_AJBPvEGameState_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBPvEGameState_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPvEGameState_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}

