#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameWindow

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AJB_structs.hpp"
#include "AJB_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBInGameWindow.BP_AJBInGameWindow_C
// 0x0038 (0x0360 - 0x0328)
class ABP_AJBInGameWindow_C final : public AAJBInGameWindow
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(Transient, DuplicateTransient)
	class USceneComponent*                        EntranceOfOrigin;                                  // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          InteractTrigger;                                   // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          bRep_TriggeredToBreak;                             // 0x0348(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          bBrokenProcessDone;                                // 0x0349(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsBrokenWithLocalAttack;                          // 0x034A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAlreadySpawnBreakEffectWithAttack;                // 0x034B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameParticleEffect_C*          BreakWindowParticle;                               // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DuringTheWorld;                                    // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_AJBInGameWindow(int32 EntryPoint);
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void SpawnBreakEffectWithAttack(class ABP_AJBInGameCharacter_C* Breaker);
	void BreakWindowOnAttack_OnAll(class ABP_AJBInGameCharacter_C* Breaker);
	void BreakWindowOnAttack_OnServer();
	void ResetWindow();
	void ResetWindowLocal();
	void OnROSInteract(class AActor* InteractingActor, bool ServerIsInteractingPlayer);
	void BreakWindowLocal();
	void NotifyToPassThruWindow(class ABP_AJBInGameCharacter_C* Character);
	void ReceiveBeginPlay();
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);
	void OnInteractionBlocked(class AActor* InteractingActor);
	void OnSucceededLongPress_Local();
	void OnInteract(class AActor* InteractActor);
	void OnAreaDamageDisabled();
	void OnPassiveDisabled();
	void OnDamageDisabled();
	void DamageOverlapped(class AActor* DamageCauser, const struct FVector& HitLocation, bool bPenetrating, const struct FGameplayTag& FactorTag, bool bInvalidDamage);
	void AJBDamage(class AActor* DamagedActor, int32 DamageForHPAP, int32 DamageForAAP, int32 CutDamage, const struct FGameplayTag& DamageType, int32 SerialNumber, EDamagePriority DamagePriority, float AttackDistance, class AActor* DamageCauser, bool WithSeparatedStandAttack, bool HitEnemysSeparatedStand, bool bPenetrateAP, bool bNotUseCollision, bool IsEndured, const struct FAJBDamageDisplayParams& DamageDisplayParams, const struct FAJBDamageDisplayProperty& DamageDisplayProperty);
	void UserConstructionScript();
	struct FVector GetEntranceOfCounterpart();
	struct FVector GetInteractCenter();
	bool IsBroken();
	void OnRep_bRep_TriggeredToBreak();
	bool IfEnteringOriginToCounterpart(class AActor* Actor);
	struct FRotator RotationOfBreakWindowEffect(bool bOriginToCounterpart);
	void GetBreakerCharacter(class AActor* Breaker, class ABP_AJBInGameCharacter_C** BreakerCharacter);
	bool InteractInstantly(class ABP_AJBInGameCharacter_C* Character);
	bool Interactable(class ABP_AJBInGameCharacter_C* Character, float TraceLength);
	void TryGetInteractableText(class ABP_AJBInGameCharacter_C* OperatorCharacter, bool* bSuccess, class FText* InteractMessage);
	void CheckErrorCondition(bool* bErrorCondition, uint8* ErrorType);
	void OnLocalInteract(class AActor* InteractingActor, bool* bSuccess);
	void GetInteractState(uint8* InteractState);
	void GetInteractPriority(int32* Priority);
	void GetInteractBoundForCulling(class AActor* InteractingActor, struct FVector* Center, float* Radius);
	bool IfNeedsExclusiveInteractStrictly();
	bool IfBlockInteract(class AActor* InteractingActor);
	void ShouldPrioritizedThanPrepaidSkillCancel(bool* bShouldPriorirized);
	struct FVector NormalOfEntrance(bool bOriginToCounterpart);
	struct FVector LocationExitTo(bool bOriginToCounterpart);
	struct FVector LocationExitFrom(bool bOriginToCounterpart);
	struct FVector LocationEnterTo(bool bOriginToCounterpart);
	struct FVector LocationEnterFrom(class ABP_AJBInGameCharacter_C* Character, bool bOriginToCounterpart);
	void CheckNoDamage(class AActor* DamageCauser, bool* bNoDamage);
	void CheckDisableAreaDamage(bool* bDisableAreadamage);
	void CheckDisablePassive(class AActor* PassiveCauser, const struct FGameplayTag& PassiveTag, bool bIgnoreSelf, bool* bDisablePassive);
	void CheckDisableDamage(class AActor* DamageCauser, bool bIgnoreSelf, bool* bDisableDamage);
	bool IfCheckDamageOverlap();
	void OwnHitParam(bool* bCharacter, bool* bLeftAP, struct FGameplayTag* ParticleTagBlockedByAAP, struct FGameplayTag* SETagBlockedByAAP, struct FGameplayTag* ParticleTagBlocked);
	void CheckTargetSelf(class AActor* DamageCauser, bool bForDamageOverlap, bool bIgnoreMovableStand, bool bIncludeSelf, bool bAfterReflectShouldHitOwner, bool* bTarget);
	void IsReactedByReticule(bool* bResult);
	void IgnoreTrace(class AActor* Owner_0, bool bPairOnly, bool* bIgnore);
	void CheckDisableDirectDamage(class AActor* DamageCauser, bool* bDisableDirectDamage);

	bool IsSmallWindow() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBInGameWindow_C">();
	}
	static class ABP_AJBInGameWindow_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBInGameWindow_C>();
	}
};
static_assert(alignof(ABP_AJBInGameWindow_C) == 0x000008, "Wrong alignment on ABP_AJBInGameWindow_C");
static_assert(sizeof(ABP_AJBInGameWindow_C) == 0x000360, "Wrong size on ABP_AJBInGameWindow_C");
static_assert(offsetof(ABP_AJBInGameWindow_C, UberGraphFrame) == 0x000328, "Member 'ABP_AJBInGameWindow_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameWindow_C, EntranceOfOrigin) == 0x000330, "Member 'ABP_AJBInGameWindow_C::EntranceOfOrigin' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameWindow_C, InteractTrigger) == 0x000338, "Member 'ABP_AJBInGameWindow_C::InteractTrigger' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameWindow_C, DefaultSceneRoot) == 0x000340, "Member 'ABP_AJBInGameWindow_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameWindow_C, bRep_TriggeredToBreak) == 0x000348, "Member 'ABP_AJBInGameWindow_C::bRep_TriggeredToBreak' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameWindow_C, bBrokenProcessDone) == 0x000349, "Member 'ABP_AJBInGameWindow_C::bBrokenProcessDone' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameWindow_C, bIsBrokenWithLocalAttack) == 0x00034A, "Member 'ABP_AJBInGameWindow_C::bIsBrokenWithLocalAttack' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameWindow_C, bAlreadySpawnBreakEffectWithAttack) == 0x00034B, "Member 'ABP_AJBInGameWindow_C::bAlreadySpawnBreakEffectWithAttack' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameWindow_C, BreakWindowParticle) == 0x000350, "Member 'ABP_AJBInGameWindow_C::BreakWindowParticle' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameWindow_C, DuringTheWorld) == 0x000358, "Member 'ABP_AJBInGameWindow_C::DuringTheWorld' has a wrong offset!");

}

