#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameCharacter_C29

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AJB_structs.hpp"
#include "BP_AJBInGameCharacter_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBInGameCharacter_C29.BP_AJBInGameCharacter_C29_C
// 0x0050 (0x1800 - 0x17B0)
class ABP_AJBInGameCharacter_C29_C final : public ABP_AJBInGameCharacter_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBInGameCharacter_C29_C;        // 0x17A8(0x0008)(Transient, DuplicateTransient)
	class UStaticMeshComponent*                   AttachMesh;                                        // 0x17B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AJBDrawnPSSkill_C*                  BP_AJBDrawnPSSkill;                                // 0x17B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AJBOverrun_C*                       BP_AJBOverrun;                                     // 0x17C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        C29Melee_Charge_AttackPoint;                       // 0x17C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AJBC29Melee_C*                      BP_AJBC29Melee;                                    // 0x17D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AJBHamonStatus_C*                   BP_AJBHamonStatus;                                 // 0x17D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AJBHamonBreathingSkillC29_C*        BP_AJBHamonBreathingSkillC29;                      // 0x17E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_LaunchPart_C*                       Rep_LaunchPart;                                    // 0x17E8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          IsRightRush;                                       // 0x17F0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	bool                                          bIsSwordVisible;                                   // 0x17F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)

public:
	void ExecuteUbergraph_BP_AJBInGameCharacter_C29(int32 EntryPoint);
	void OnReady();
	void OnReturn();
	void OnLaunch();
	void UpdateSwordVisibility();
	void IsSwordVisible(bool* IsSwordVisible_0);
	void SetIsSwordVisible(bool Value);
	void GetLaunchedActorHomeLocation(int32 CloseRangeSkillNo, struct FVector* Location);
	void GetCloseRangeLaunchedActor(int32 CloseRangeSkillNo, class AActor** LaunchedActor);
	void GetDamageActorTargetLocation(struct FVector* Location);
	void GetStandAttackOffset(int32 CloseRangeSkillNo, struct FVector* StandAttackOffset);
	void GetAttackRange(int32 CloseRangeSkillNo, float* AttackRange);
	void GetAttackCollisionRadius(int32 CloseRangeSkillNo, float* Radius);
	void GetAttackLocation(const struct FVector& TargetLocation, struct FVector* Location);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void PressedButton_ActiveSpecial();
	void ReleasedButton_ActiveBase();
	void PressedButton_ActiveBase();
	void ReleasedButton_Basic();
	void PressedButton_Ultimate();
	void PressedButton_Basic();
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);
	void UserConstructionScript();
	void OnBeforeInteract(bool* bShouldInteract);
	void CheckAnySkillActiveOnTiltOneDash(bool* bAnySkillActive);
	void GetLaunchedActorTarget(class AActor** LaunchedActor);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBInGameCharacter_C29_C">();
	}
	static class ABP_AJBInGameCharacter_C29_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBInGameCharacter_C29_C>();
	}
};
static_assert(alignof(ABP_AJBInGameCharacter_C29_C) == 0x000010, "Wrong alignment on ABP_AJBInGameCharacter_C29_C");
static_assert(sizeof(ABP_AJBInGameCharacter_C29_C) == 0x001800, "Wrong size on ABP_AJBInGameCharacter_C29_C");
static_assert(offsetof(ABP_AJBInGameCharacter_C29_C, UberGraphFrame_BP_AJBInGameCharacter_C29_C) == 0x0017A8, "Member 'ABP_AJBInGameCharacter_C29_C::UberGraphFrame_BP_AJBInGameCharacter_C29_C' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C29_C, AttachMesh) == 0x0017B0, "Member 'ABP_AJBInGameCharacter_C29_C::AttachMesh' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C29_C, BP_AJBDrawnPSSkill) == 0x0017B8, "Member 'ABP_AJBInGameCharacter_C29_C::BP_AJBDrawnPSSkill' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C29_C, BP_AJBOverrun) == 0x0017C0, "Member 'ABP_AJBInGameCharacter_C29_C::BP_AJBOverrun' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C29_C, C29Melee_Charge_AttackPoint) == 0x0017C8, "Member 'ABP_AJBInGameCharacter_C29_C::C29Melee_Charge_AttackPoint' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C29_C, BP_AJBC29Melee) == 0x0017D0, "Member 'ABP_AJBInGameCharacter_C29_C::BP_AJBC29Melee' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C29_C, BP_AJBHamonStatus) == 0x0017D8, "Member 'ABP_AJBInGameCharacter_C29_C::BP_AJBHamonStatus' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C29_C, BP_AJBHamonBreathingSkillC29) == 0x0017E0, "Member 'ABP_AJBInGameCharacter_C29_C::BP_AJBHamonBreathingSkillC29' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C29_C, Rep_LaunchPart) == 0x0017E8, "Member 'ABP_AJBInGameCharacter_C29_C::Rep_LaunchPart' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C29_C, IsRightRush) == 0x0017F0, "Member 'ABP_AJBInGameCharacter_C29_C::IsRightRush' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_C29_C, bIsSwordVisible) == 0x0017F1, "Member 'ABP_AJBInGameCharacter_C29_C::bIsSwordVisible' has a wrong offset!");

}

