#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBAIMessenger

#include "Basic.hpp"

#include "BP_AJBAIMessenger_classes.hpp"
#include "BP_AJBAIMessenger_parameters.hpp"


namespace SDK
{

// Function BP_AJBAIMessenger.BP_AJBAIMessenger_C.ExecuteUbergraph_BP_AJBAIMessenger
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBAIMessenger_C::ExecuteUbergraph_BP_AJBAIMessenger(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBAIMessenger_C", "ExecuteUbergraph_BP_AJBAIMessenger");

	Params::BP_AJBAIMessenger_C_ExecuteUbergraph_BP_AJBAIMessenger Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBAIMessenger.BP_AJBAIMessenger_C.ROS_RequestAIGion
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              GionEffectType                                         (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class AActor*                           GionOwner                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBAIMessenger_C::ROS_RequestAIGion(const struct FGameplayTag& GionEffectType, class AActor* GionOwner, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBAIMessenger_C", "ROS_RequestAIGion");

	Params::BP_AJBAIMessenger_C_ROS_RequestAIGion Parms{};

	Parms.GionEffectType = std::move(GionEffectType);
	Parms.GionOwner = GionOwner;
	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBAIMessenger.BP_AJBAIMessenger_C.RequestAIGion
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              GionEffectType                                         (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class AActor*                           GionOwner                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBAIMessenger_C::RequestAIGion(const struct FGameplayTag& GionEffectType, class AActor* GionOwner, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBAIMessenger_C", "RequestAIGion");

	Params::BP_AJBAIMessenger_C_RequestAIGion Parms{};

	Parms.GionEffectType = std::move(GionEffectType);
	Parms.GionOwner = GionOwner;
	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBAIMessenger.BP_AJBAIMessenger_C.ROC_SendEventReplayToClientForImmediate
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              Tag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   VectorIn                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBAIMessenger_C::ROC_SendEventReplayToClientForImmediate(const struct FGameplayTag& Tag, const struct FVector& VectorIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBAIMessenger_C", "ROC_SendEventReplayToClientForImmediate");

	Params::BP_AJBAIMessenger_C_ROC_SendEventReplayToClientForImmediate Parms{};

	Parms.Tag = std::move(Tag);
	Parms.VectorIn = std::move(VectorIn);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBAIMessenger.BP_AJBAIMessenger_C.DebugDrawPathLocations
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBAIMessenger_C::DebugDrawPathLocations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBAIMessenger_C", "DebugDrawPathLocations");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBAIMessenger.BP_AJBAIMessenger_C.DebugDumpEventReplayLastTarget
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBAIMessenger_C::DebugDumpEventReplayLastTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBAIMessenger_C", "DebugDumpEventReplayLastTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBAIMessenger.BP_AJBAIMessenger_C.ROC_SendEventReplayToClient
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayTag&              Tag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   VectorIn                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBAIMessenger_C::ROC_SendEventReplayToClient(int32 Index_0, float ElapsedTime, const struct FGameplayTag& Tag, const struct FVector& VectorIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBAIMessenger_C", "ROC_SendEventReplayToClient");

	Params::BP_AJBAIMessenger_C_ROC_SendEventReplayToClient Parms{};

	Parms.Index_0 = Index_0;
	Parms.ElapsedTime = ElapsedTime;
	Parms.Tag = std::move(Tag);
	Parms.VectorIn = std::move(VectorIn);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBAIMessenger.BP_AJBAIMessenger_C.ROC_SendEventReplayV2ToClient
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayTag&              Tag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   v1                                                     (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   v2                                                     (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBAIMessenger_C::ROC_SendEventReplayV2ToClient(int32 Index_0, float ElapsedTime, const struct FGameplayTag& Tag, const struct FVector& v1, const struct FVector& v2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBAIMessenger_C", "ROC_SendEventReplayV2ToClient");

	Params::BP_AJBAIMessenger_C_ROC_SendEventReplayV2ToClient Parms{};

	Parms.Index_0 = Index_0;
	Parms.ElapsedTime = ElapsedTime;
	Parms.Tag = std::move(Tag);
	Parms.v1 = std::move(v1);
	Parms.v2 = std::move(v2);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBAIMessenger.BP_AJBAIMessenger_C.ROS_DebugRequestToAIDirectorByGameplayTags
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTagContainer&     Tags                                                   (BlueprintVisible, BlueprintReadOnly, Parm)
// const struct FVector&                   VectorIn                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBAIMessenger_C::ROS_DebugRequestToAIDirectorByGameplayTags(const struct FGameplayTagContainer& Tags, const struct FVector& VectorIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBAIMessenger_C", "ROS_DebugRequestToAIDirectorByGameplayTags");

	Params::BP_AJBAIMessenger_C_ROS_DebugRequestToAIDirectorByGameplayTags Parms{};

	Parms.Tags = std::move(Tags);
	Parms.VectorIn = std::move(VectorIn);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBAIMessenger.BP_AJBAIMessenger_C.ROC_SendNavMesh
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bNavMesh                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBAIMessenger_C::ROC_SendNavMesh(const struct FVector& Location, bool bNavMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBAIMessenger_C", "ROC_SendNavMesh");

	Params::BP_AJBAIMessenger_C_ROC_SendNavMesh Parms{};

	Parms.Location = std::move(Location);
	Parms.bNavMesh = bNavMesh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBAIMessenger.BP_AJBAIMessenger_C.ROS_SpawnIdleNPCAtLocation
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// int32                                   AILevel                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBAIMessenger_C::ROS_SpawnIdleNPCAtLocation(const struct FVector& Location, const struct FRotator& Rotation, int32 AILevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBAIMessenger_C", "ROS_SpawnIdleNPCAtLocation");

	Params::BP_AJBAIMessenger_C_ROS_SpawnIdleNPCAtLocation Parms{};

	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.AILevel = AILevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBAIMessenger.BP_AJBAIMessenger_C.SpawnIdleNPCByNPCSpawnerComponent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   AILevel                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBAIMessenger_C::SpawnIdleNPCByNPCSpawnerComponent(int32 AILevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBAIMessenger_C", "SpawnIdleNPCByNPCSpawnerComponent");

	Params::BP_AJBAIMessenger_C_SpawnIdleNPCByNPCSpawnerComponent Parms{};

	Parms.AILevel = AILevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBAIMessenger.BP_AJBAIMessenger_C.ToggleDebugNPCSpawnPreview
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBAIMessenger_C::ToggleDebugNPCSpawnPreview()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBAIMessenger_C", "ToggleDebugNPCSpawnPreview");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBAIMessenger.BP_AJBAIMessenger_C.ROC_DebugSaveNPCAllLogByString
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NPC_Id                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString&                    Log                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_AJBAIMessenger_C::ROC_DebugSaveNPCAllLogByString(int32 NPC_Id, const class FString& Log)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBAIMessenger_C", "ROC_DebugSaveNPCAllLogByString");

	Params::BP_AJBAIMessenger_C_ROC_DebugSaveNPCAllLogByString Parms{};

	Parms.NPC_Id = NPC_Id;
	Parms.Log = std::move(Log);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBAIMessenger.BP_AJBAIMessenger_C.ROS_DebugRequestSaveNPCAllLogByString
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NPC_Id                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBAIMessenger_C::ROS_DebugRequestSaveNPCAllLogByString(int32 NPC_Id)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBAIMessenger_C", "ROS_DebugRequestSaveNPCAllLogByString");

	Params::BP_AJBAIMessenger_C_ROS_DebugRequestSaveNPCAllLogByString Parms{};

	Parms.NPC_Id = NPC_Id;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBAIMessenger.BP_AJBAIMessenger_C.ROS_DebugRestartBehavior
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DebugMenuIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBAIMessenger_C::ROS_DebugRestartBehavior(int32 DebugMenuIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBAIMessenger_C", "ROS_DebugRestartBehavior");

	Params::BP_AJBAIMessenger_C_ROS_DebugRestartBehavior Parms{};

	Parms.DebugMenuIndex = DebugMenuIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBAIMessenger.BP_AJBAIMessenger_C.DebugRestartBehavior
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DebugMenuIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBAIMessenger_C::DebugRestartBehavior(int32 DebugMenuIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBAIMessenger_C", "DebugRestartBehavior");

	Params::BP_AJBAIMessenger_C_DebugRestartBehavior Parms{};

	Parms.DebugMenuIndex = DebugMenuIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBAIMessenger.BP_AJBAIMessenger_C.ROC_UpdateServerSafeArea
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   SafeAreaLocation                                       (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SafeAreaRadius                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBAIMessenger_C::ROC_UpdateServerSafeArea(const struct FVector& SafeAreaLocation, float SafeAreaRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBAIMessenger_C", "ROC_UpdateServerSafeArea");

	Params::BP_AJBAIMessenger_C_ROC_UpdateServerSafeArea Parms{};

	Parms.SafeAreaLocation = std::move(SafeAreaLocation);
	Parms.SafeAreaRadius = SafeAreaRadius;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBAIMessenger.BP_AJBAIMessenger_C.ROC_UpdateSaferArea
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   SaferAreaLocation                                      (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SaferAreaRadius                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBAIMessenger_C::ROC_UpdateSaferArea(const struct FVector& SaferAreaLocation, float SaferAreaRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBAIMessenger_C", "ROC_UpdateSaferArea");

	Params::BP_AJBAIMessenger_C_ROC_UpdateSaferArea Parms{};

	Parms.SaferAreaLocation = std::move(SaferAreaLocation);
	Parms.SaferAreaRadius = SaferAreaRadius;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBAIMessenger.BP_AJBAIMessenger_C.ROC_OnNPCDead
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PlayerID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayTag&              DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void UBP_AJBAIMessenger_C::ROC_OnNPCDead(int32 PlayerID, const struct FGameplayTag& DamageType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBAIMessenger_C", "ROC_OnNPCDead");

	Params::BP_AJBAIMessenger_C_ROC_OnNPCDead Parms{};

	Parms.PlayerID = PlayerID;
	Parms.DamageType = std::move(DamageType);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBAIMessenger.BP_AJBAIMessenger_C.ROC_ShowNPCDebugInfo
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PlayerID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString&                    ControllerName                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_AJBAIMessenger_C::ROC_ShowNPCDebugInfo(int32 PlayerID, const struct FVector& Location, const class FString& ControllerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBAIMessenger_C", "ROC_ShowNPCDebugInfo");

	Params::BP_AJBAIMessenger_C_ROC_ShowNPCDebugInfo Parms{};

	Parms.PlayerID = PlayerID;
	Parms.Location = std::move(Location);
	Parms.ControllerName = std::move(ControllerName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBAIMessenger.BP_AJBAIMessenger_C.ROC_UpdateNPCStatus
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PlayerID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString&                    StatusLabel                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    bInputMoveClear                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bInSaferArea                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   InputDestination                                       (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   FinalDestination                                       (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayTagContainer&     LockedTags                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// class APawn*                            Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBAIMessenger_C::ROC_UpdateNPCStatus(int32 PlayerID, const class FString& StatusLabel, bool bInputMoveClear, bool bInSaferArea, const struct FVector& Location, const struct FVector& InputDestination, const struct FVector& FinalDestination, const struct FGameplayTagContainer& LockedTags, class APawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBAIMessenger_C", "ROC_UpdateNPCStatus");

	Params::BP_AJBAIMessenger_C_ROC_UpdateNPCStatus Parms{};

	Parms.PlayerID = PlayerID;
	Parms.StatusLabel = std::move(StatusLabel);
	Parms.bInputMoveClear = bInputMoveClear;
	Parms.bInSaferArea = bInSaferArea;
	Parms.Location = std::move(Location);
	Parms.InputDestination = std::move(InputDestination);
	Parms.FinalDestination = std::move(FinalDestination);
	Parms.LockedTags = std::move(LockedTags);
	Parms.Pawn = Pawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBAIMessenger.BP_AJBAIMessenger_C.ROS_DebugSetShowDebugInfo
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bShow                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBAIMessenger_C::ROS_DebugSetShowDebugInfo(bool bShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBAIMessenger_C", "ROS_DebugSetShowDebugInfo");

	Params::BP_AJBAIMessenger_C_ROS_DebugSetShowDebugInfo Parms{};

	Parms.bShow = bShow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBAIMessenger.BP_AJBAIMessenger_C.DebugSetShowDebugInfo
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bShow                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBAIMessenger_C::DebugSetShowDebugInfo(bool bShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBAIMessenger_C", "DebugSetShowDebugInfo");

	Params::BP_AJBAIMessenger_C_DebugSetShowDebugInfo Parms{};

	Parms.bShow = bShow;

	UObject::ProcessEvent(Func, &Parms);
}

}

