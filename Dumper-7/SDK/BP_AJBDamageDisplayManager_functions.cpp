#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBDamageDisplayManager

#include "Basic.hpp"

#include "BP_AJBDamageDisplayManager_classes.hpp"
#include "BP_AJBDamageDisplayManager_parameters.hpp"


namespace SDK
{

// Function BP_AJBDamageDisplayManager.BP_AJBDamageDisplayManager_C.ExecuteUbergraph_BP_AJBDamageDisplayManager
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBDamageDisplayManager_C::ExecuteUbergraph_BP_AJBDamageDisplayManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageDisplayManager_C", "ExecuteUbergraph_BP_AJBDamageDisplayManager");

	Params::BP_AJBDamageDisplayManager_C_ExecuteUbergraph_BP_AJBDamageDisplayManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBDamageDisplayManager.BP_AJBDamageDisplayManager_C.RequestDamageDisplay
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FAJBDamageDisplayParams&   Params_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void ABP_AJBDamageDisplayManager_C::RequestDamageDisplay(const struct FAJBDamageDisplayParams& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageDisplayManager_C", "RequestDamageDisplay");

	Params::BP_AJBDamageDisplayManager_C_RequestDamageDisplay Parms{};

	Parms.Params_0 = std::move(Params_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBDamageDisplayManager.BP_AJBDamageDisplayManager_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBDamageDisplayManager_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageDisplayManager_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBDamageDisplayManager.BP_AJBDamageDisplayManager_C.SpawnDamageDisplay
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FAJBDamageDisplayParams&   Params_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void ABP_AJBDamageDisplayManager_C::SpawnDamageDisplay(const struct FAJBDamageDisplayParams& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageDisplayManager_C", "SpawnDamageDisplay");

	Params::BP_AJBDamageDisplayManager_C_SpawnDamageDisplay Parms{};

	Parms.Params_0 = std::move(Params_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBDamageDisplayManager.BP_AJBDamageDisplayManager_C.MakeDisplayLocation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FAJBDamageDisplayParams&   Params_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FVector*                         Location                                               (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBDamageDisplayManager_C::MakeDisplayLocation(const struct FAJBDamageDisplayParams& Params_0, struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageDisplayManager_C", "MakeDisplayLocation");

	Params::BP_AJBDamageDisplayManager_C_MakeDisplayLocation Parms{};

	Parms.Params_0 = std::move(Params_0);

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function BP_AJBDamageDisplayManager.BP_AJBDamageDisplayManager_C.IsDamageDisplayEnabled
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bException                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool*                                   IsEnabled                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBDamageDisplayManager_C::IsDamageDisplayEnabled(bool bException, bool* IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageDisplayManager_C", "IsDamageDisplayEnabled");

	Params::BP_AJBDamageDisplayManager_C_IsDamageDisplayEnabled Parms{};

	Parms.bException = bException;

	UObject::ProcessEvent(Func, &Parms);

	if (IsEnabled != nullptr)
		*IsEnabled = Parms.IsEnabled;
}


// Function BP_AJBDamageDisplayManager.BP_AJBDamageDisplayManager_C.ShouldDisplayZeroDamage
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   ShouldDisplay                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBDamageDisplayManager_C::ShouldDisplayZeroDamage(class UObject* Target, bool* ShouldDisplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageDisplayManager_C", "ShouldDisplayZeroDamage");

	Params::BP_AJBDamageDisplayManager_C_ShouldDisplayZeroDamage Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);

	if (ShouldDisplay != nullptr)
		*ShouldDisplay = Parms.ShouldDisplay;
}


// Function BP_AJBDamageDisplayManager.BP_AJBDamageDisplayManager_C.IsDamageDisplayTarget
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           DamagedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsTarget                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBDamageDisplayManager_C::IsDamageDisplayTarget(class AActor* DamagedActor, class AActor* DamageCauser, int32 Damage, bool* IsTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageDisplayManager_C", "IsDamageDisplayTarget");

	Params::BP_AJBDamageDisplayManager_C_IsDamageDisplayTarget Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.DamageCauser = DamageCauser;
	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);

	if (IsTarget != nullptr)
		*IsTarget = Parms.IsTarget;
}


// Function BP_AJBDamageDisplayManager.BP_AJBDamageDisplayManager_C.FindOverrideSetting
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FST_DamageDisplayOverrideSetting*OverrideSetting                                        (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

void ABP_AJBDamageDisplayManager_C::FindOverrideSetting(const struct FGameplayTag& DamageType, bool* Success, struct FST_DamageDisplayOverrideSetting* OverrideSetting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBDamageDisplayManager_C", "FindOverrideSetting");

	Params::BP_AJBDamageDisplayManager_C_FindOverrideSetting Parms{};

	Parms.DamageType = std::move(DamageType);

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;

	if (OverrideSetting != nullptr)
		*OverrideSetting = std::move(Parms.OverrideSetting);
}

}

