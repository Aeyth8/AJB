#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBChargeSnipeSkill

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BP_AJBSnipeSkill_classes.hpp"
#include "AJB_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBChargeSnipeSkill.BP_AJBChargeSnipeSkill_C
// 0x00C0 (0x0348 - 0x0288)
class UBP_AJBChargeSnipeSkill_C : public UBP_AJBSnipeSkill_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBChargeSnipeSkill_C;           // 0x0288(0x0008)(Transient, DuplicateTransient)
	float                                         StateTime_Action;                                  // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChargeTime;                                        // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShootingTimer_Local;                               // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShootingInterval;                                  // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsShootingReserved_Local;                          // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ShootProjectileGionTag;                            // 0x02A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         RepVisibleProjectileCount;                         // 0x02B0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B4[0x4];                                      // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameParticleEffect_C*          ChargingParticleComponent;                         // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChargeTimeFirst;                                   // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           BeginChargingVoiceTag;                             // 0x02C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ChargingProjectileParticleTag;                     // 0x02D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ChargingProjectileSETag;                           // 0x02D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           ChargingProjectileSEComponent;                     // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChargedTime_Local;                                 // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ChargingCompletedParticleTag;                      // 0x02F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ChargingCompletedSETag;                            // 0x02F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         ChargedProjectileCount_Local;                      // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ShotProjectileCount_Local;                         // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ShootProjectileParticleTag;                        // 0x0308(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ShootProjectileSETag;                              // 0x0310(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ShootProjectileVoiceTag;                           // 0x0318(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CancelProjectileParticleTag;                       // 0x0320(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CancelChargeSETag;                                 // 0x0328(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CancelChargeVoiceTag;                              // 0x0330(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ShootProjectileContinuousGionTag;                  // 0x0338(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnabledShootContinuousGion;                      // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShouldUseContinuousShootGion;                      // 0x0341(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)

public:
	void ExecuteUbergraph_BP_AJBChargeSnipeSkill(int32 EntryPoint);
	void ROS_CancelProjectile(int32 ShootProjectileIndex, int32 LeftProjectileCount);
	void MC_CancelProjectile(int32 ShootProjectileIndex);
	void ROS_ShootProjectile(int32 ShootProjectileIndex, int32 LeftProjectileCount);
	void MC_ShootProjectile(int32 ShootProjectileIndex);
	void BindEvents();
	void OnOwnerDead_Server(const struct FGameplayTag& DamageType, class AActor* DeadActor, class AActor* DamageCauser);
	void CancelProjectile(int32 ShotProjectileIndex, int32 LeftProjectileCount);
	void ChangeProjectilePreviewVisibility(class USceneComponent* ChargingPoint, int32 Index_0, bool IsVisible);
	void ShootProjectile(int32 ShotProjectileIndex, int32 LeftProjectileCount);
	void ROS_SpawnProjectile(const struct FVector& Location, const struct FRotator& Rotation, int32 ProjectileIndex);
	void SpawnProjectile_All(const struct FVector& Location, const struct FRotator& Rotation, int32 ProjectileIndex);
	void ROS_CompleteCharge(int32 ChargingPointCount, bool bPossibleChargeNext);
	void MC_CompleteCharge(int32 ChargingPointCount, bool bPossibleChargeNext);
	void MC_EndState();
	void ROS_EndState();
	void EndState_All();
	void MC_BeginState_Action();
	void ROS_BeginState_Action();
	void BeginState_Action();
	void Play_CancelChargeVoice();
	void Play_CancelChargeSE();
	void Run_CancelChargeSound();
	void Run_CancelProjectileEffect(class USceneComponent* ChargingPoint);
	void Play_CancelProjectileParticle(class USceneComponent* ChargingPoint);
	void Run_ShootProjectileEffect(class USceneComponent* ChargingPoint);
	void Play_ShootProjectileVoice();
	void Play_ShootProjectileParticle(class USceneComponent* ChargingPoint);
	void Play_ShootProjectileGion(class USceneComponent* ChargingPoint);
	void Play_ChargingCompletedSE(class USceneComponent* ChargingPoint);
	void End_ChargingProjectileEffect();
	void Play_ChargingCompletedParticle(class USceneComponent* ChargingPoint);
	void Run_ChargingCompletedEffect(class USceneComponent* ChargingPoint);
	void Stop_ChargingProjectileSE();
	void Stop_ChargingProjectileParticle();
	void Play_ChargingProjectileParticle(class USceneComponent* ChargingPoint);
	void Play_ChargingProjectileSE(class USceneComponent* ChargingPoint);
	void Run_ChargingProjectileEffect(class USceneComponent* ChargingPoint);
	void Play_BeginChargingVoice();
	void OnChargeCompleted_Client(int32 ChargingPointCount, bool ShouldShowNextEffect);
	void OnChargeCompleted_Server(int32 ChargingPointCount);
	void OnActionProjectile_Server(int32 LeftProjectileCount);
	void UpdateProjectileVisibility(int32 ChargedProjectileCount);
	void InitChargeProperty();
	void OnRep_RepVisibleProjectileCount();
	void GetChargePoint(int32 Index_0, class USceneComponent** ChargingPoint);
	void GetChargePoints(TArray<class USceneComponent*>* ChargingPoints);
	void GetChargePointCount(int32* ChargingPointCount);
	void GetChargeTime(int32 ChargedProjectileCount, float* ChargingTime);
	void CanChargeNextProjectile_Local(bool* CanCharge);
	void ShootProjectile_Local(bool* IsFinished);
	void ShootProjectileEffect_Local(int32 ShootProjectileIndex);
	void CancelProjectileEffect_Local(int32 ShootProjectileIndex);
	void AddChargedProjectileCount_Local(int32 Value);
	void AddShotProjectileCount_Local(int32 Value);
	void GetChargedProjectileCount_Local(int32* ChargedProjectileCount);
	void GetLeftProjectileCount_Local(int32* LeftProjectileCount);
	void GetShotProjectileCount_Local(int32* ShotProjectileCount);
	void Hide_ChargeSnipeSkillGuideUI();
	void SetChargedProjectileCount_Local(int32 Value);
	void SetShotProjectileCount_Local(int32 Value);
	void Show_ChargeSnipeSkillGuideUI();
	void OnGiveDamage(int32 Damage_0, const struct FGameplayTag& DamageType, class AActor* DamageReceiver, bool bRemainHP, bool bDamageIsCut, int32 SerialNumber_0, bool DamageReceiverIsPlayer, bool bWithSeparatedStandAttack, bool bEnemysSeparateStand, bool bSelfDamage, bool IsEndured);
	void EndState();
	void OnStateChargeUp();
	void OnStateAction();
	void TickStateChargeUp(float DeltaSeconds);
	void TickStateAction();
	void StateBeginPlay(bool bShouldRestore);
	void ReceiveBeginPlay();
	void OnCancel();
	void OnActive();
	void InitializeVariables();
	void CheckStateCanAccompany(bool* bCanAccompany);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBChargeSnipeSkill_C">();
	}
	static class UBP_AJBChargeSnipeSkill_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBChargeSnipeSkill_C>();
	}
};
static_assert(alignof(UBP_AJBChargeSnipeSkill_C) == 0x000008, "Wrong alignment on UBP_AJBChargeSnipeSkill_C");
static_assert(sizeof(UBP_AJBChargeSnipeSkill_C) == 0x000348, "Wrong size on UBP_AJBChargeSnipeSkill_C");
static_assert(offsetof(UBP_AJBChargeSnipeSkill_C, UberGraphFrame_BP_AJBChargeSnipeSkill_C) == 0x000288, "Member 'UBP_AJBChargeSnipeSkill_C::UberGraphFrame_BP_AJBChargeSnipeSkill_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBChargeSnipeSkill_C, StateTime_Action) == 0x000290, "Member 'UBP_AJBChargeSnipeSkill_C::StateTime_Action' has a wrong offset!");
static_assert(offsetof(UBP_AJBChargeSnipeSkill_C, ChargeTime) == 0x000294, "Member 'UBP_AJBChargeSnipeSkill_C::ChargeTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBChargeSnipeSkill_C, ShootingTimer_Local) == 0x000298, "Member 'UBP_AJBChargeSnipeSkill_C::ShootingTimer_Local' has a wrong offset!");
static_assert(offsetof(UBP_AJBChargeSnipeSkill_C, ShootingInterval) == 0x00029C, "Member 'UBP_AJBChargeSnipeSkill_C::ShootingInterval' has a wrong offset!");
static_assert(offsetof(UBP_AJBChargeSnipeSkill_C, IsShootingReserved_Local) == 0x0002A0, "Member 'UBP_AJBChargeSnipeSkill_C::IsShootingReserved_Local' has a wrong offset!");
static_assert(offsetof(UBP_AJBChargeSnipeSkill_C, ShootProjectileGionTag) == 0x0002A8, "Member 'UBP_AJBChargeSnipeSkill_C::ShootProjectileGionTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBChargeSnipeSkill_C, RepVisibleProjectileCount) == 0x0002B0, "Member 'UBP_AJBChargeSnipeSkill_C::RepVisibleProjectileCount' has a wrong offset!");
static_assert(offsetof(UBP_AJBChargeSnipeSkill_C, ChargingParticleComponent) == 0x0002B8, "Member 'UBP_AJBChargeSnipeSkill_C::ChargingParticleComponent' has a wrong offset!");
static_assert(offsetof(UBP_AJBChargeSnipeSkill_C, ChargeTimeFirst) == 0x0002C0, "Member 'UBP_AJBChargeSnipeSkill_C::ChargeTimeFirst' has a wrong offset!");
static_assert(offsetof(UBP_AJBChargeSnipeSkill_C, BeginChargingVoiceTag) == 0x0002C8, "Member 'UBP_AJBChargeSnipeSkill_C::BeginChargingVoiceTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBChargeSnipeSkill_C, ChargingProjectileParticleTag) == 0x0002D0, "Member 'UBP_AJBChargeSnipeSkill_C::ChargingProjectileParticleTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBChargeSnipeSkill_C, ChargingProjectileSETag) == 0x0002D8, "Member 'UBP_AJBChargeSnipeSkill_C::ChargingProjectileSETag' has a wrong offset!");
static_assert(offsetof(UBP_AJBChargeSnipeSkill_C, ChargingProjectileSEComponent) == 0x0002E0, "Member 'UBP_AJBChargeSnipeSkill_C::ChargingProjectileSEComponent' has a wrong offset!");
static_assert(offsetof(UBP_AJBChargeSnipeSkill_C, ChargedTime_Local) == 0x0002E8, "Member 'UBP_AJBChargeSnipeSkill_C::ChargedTime_Local' has a wrong offset!");
static_assert(offsetof(UBP_AJBChargeSnipeSkill_C, ChargingCompletedParticleTag) == 0x0002F0, "Member 'UBP_AJBChargeSnipeSkill_C::ChargingCompletedParticleTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBChargeSnipeSkill_C, ChargingCompletedSETag) == 0x0002F8, "Member 'UBP_AJBChargeSnipeSkill_C::ChargingCompletedSETag' has a wrong offset!");
static_assert(offsetof(UBP_AJBChargeSnipeSkill_C, ChargedProjectileCount_Local) == 0x000300, "Member 'UBP_AJBChargeSnipeSkill_C::ChargedProjectileCount_Local' has a wrong offset!");
static_assert(offsetof(UBP_AJBChargeSnipeSkill_C, ShotProjectileCount_Local) == 0x000304, "Member 'UBP_AJBChargeSnipeSkill_C::ShotProjectileCount_Local' has a wrong offset!");
static_assert(offsetof(UBP_AJBChargeSnipeSkill_C, ShootProjectileParticleTag) == 0x000308, "Member 'UBP_AJBChargeSnipeSkill_C::ShootProjectileParticleTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBChargeSnipeSkill_C, ShootProjectileSETag) == 0x000310, "Member 'UBP_AJBChargeSnipeSkill_C::ShootProjectileSETag' has a wrong offset!");
static_assert(offsetof(UBP_AJBChargeSnipeSkill_C, ShootProjectileVoiceTag) == 0x000318, "Member 'UBP_AJBChargeSnipeSkill_C::ShootProjectileVoiceTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBChargeSnipeSkill_C, CancelProjectileParticleTag) == 0x000320, "Member 'UBP_AJBChargeSnipeSkill_C::CancelProjectileParticleTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBChargeSnipeSkill_C, CancelChargeSETag) == 0x000328, "Member 'UBP_AJBChargeSnipeSkill_C::CancelChargeSETag' has a wrong offset!");
static_assert(offsetof(UBP_AJBChargeSnipeSkill_C, CancelChargeVoiceTag) == 0x000330, "Member 'UBP_AJBChargeSnipeSkill_C::CancelChargeVoiceTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBChargeSnipeSkill_C, ShootProjectileContinuousGionTag) == 0x000338, "Member 'UBP_AJBChargeSnipeSkill_C::ShootProjectileContinuousGionTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBChargeSnipeSkill_C, IsEnabledShootContinuousGion) == 0x000340, "Member 'UBP_AJBChargeSnipeSkill_C::IsEnabledShootContinuousGion' has a wrong offset!");
static_assert(offsetof(UBP_AJBChargeSnipeSkill_C, ShouldUseContinuousShootGion) == 0x000341, "Member 'UBP_AJBChargeSnipeSkill_C::ShouldUseContinuousShootGion' has a wrong offset!");

}

