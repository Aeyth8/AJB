#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBDamageActor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AJB_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBDamageActor.BP_AJBDamageActor_C
// 0x0190 (0x04B8 - 0x0328)
class ABP_AJBDamageActor_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(Transient, DuplicateTransient)
	class UArrowComponent*                        Arrow;                                             // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Offset;                                            // 0x0340(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnTargetHit;                                       // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class AActor*                                 TargetActor;                                       // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UActorComponent*                        TargetComponent;                                   // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnBlocking;                                        // 0x0370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class AActor*                                 DestinationActor;                                  // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UClass*                                 RelativeSkillComponent;                            // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FGameplayTag                           ParticleTag;                                       // 0x0390(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetHitLocation;                                 // 0x0398(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CloseRangeSkillNo;                                 // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          ParticleEffect;                                    // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnTargetOverlap;                                   // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bCollisionDisableByTheWorld;                       // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C1[0x3];                                      // 0x03C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BaseDamage;                                        // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bDebugShowCollision;                               // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C9[0x3];                                      // 0x03C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BaseDamageInCalcDamage;                            // 0x03CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsPenetration;                                    // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_3D1[0x7];                                      // 0x03D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         HittedActor;                                       // 0x03D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          bImprovementWallThrough;                           // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E9[0x3];                                      // 0x03E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PreLocation;                                       // 0x03EC(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitTraceInterval;                                  // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FC[0x4];                                      // 0x03FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypesCharacterHit;                           // 0x0400(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class AActor*>                         BlockedActor;                                      // 0x0410(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AActor*>                         AvoidedActor;                                      // 0x0420(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AActor*>                         InvalidatedActor;                                  // 0x0430(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          bValidDamageProcessOnPenetrate;                    // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          bPenetrateObject;                                  // 0x0441(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_442[0x6];                                      // 0x0442(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnPenetrateHit;                                    // 0x0448(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class AActor*                                 CollisionDetector;                                 // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CollisionDetectorClass;                            // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bIgnoreBreakWindow;                                // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_469[0x3];                                      // 0x0469(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FirstLocation;                                     // 0x046C(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldGivePassive;                                // 0x0478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_479[0x7];                                      // 0x0479(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           AddPassiveVoiceTag;                                // 0x0480(0x0008)(Edit, BlueprintVisible, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<struct FGameplayTag>                   CheckQueuedVoiceTagsOnPassiveAdded;                // 0x0488(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn)
	bool                                          bTempQueued;                                       // 0x0498(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bHitBarrier;                                       // 0x0499(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_49A[0x6];                                      // 0x049A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ECharacterBattleType>                  CharacterTypeIgnorePassiveAdded;                   // 0x04A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn)
	bool                                          bIgnoreAddPassiveForMovableStand;                  // 0x04B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)

public:
	void ExecuteUbergraph_BP_AJBDamageActor(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void UpdateTransform();
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnHit(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveTick(float DeltaSeconds);
	void TryGivePassive(class UObject* Target, const struct FGameplayTag& CauserType, int32 SerialNumber);
	void StopParticle();
	void StartParticle();
	void ReceiveBeginPlay();
	void OnOverlapped(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Blocking(class AActor* BlockedActor_0, class AActor* OtherActor, const struct FVector& HitLocation, const struct FVector& HitNormal, int32 CuttingProjectile___, int32 CuttingOther___, bool bInvincible, bool bReflectProjectile, const struct FRotator& ReflectRotation, bool bAvoidSkill, bool bSeparateStandAttack, const struct FGameplayTag& ReflectSkillTag, const struct FVector& KnockbackVelocity, float KnockbackIntensity);
	void UserConstructionScript();
	void ChangeEnable(bool bEnable, class AActor* TargetActor_0, class UActorComponent* TargetComponent_0, const struct FVector& TargetActorHitLocation, int32 CloseRangeSkillNo_0);
	void CheckTargetMatch(class AActor* HitActor, class UActorComponent* HitComponent, bool* bMatch);
	void TrackingStandPoint();
	void TrackingStandRotation();
	void ChangeCollisionEnable(bool bEnable);
	void CheckCollisionEnable(bool* bEnable);
	void DebugShowCollision(bool bNeedEnableCheck, const struct FLinearColor& LineColor);
	void DebugShowLine(const struct FVector& NextLocation);
	void TryChangeDisable(bool bIsCharacter);
	void UpdateLocationPreTick();
	void CheckShouldCharacterHit(const struct FHitResult& HitResult, bool* bShouldCharacterHit);
	void CheckHit();
	void HitTrace(const struct FVector& StartLocation, const struct FVector& Direction, float Distance, bool* bContinued);
	void CheckCharacterHitOwner(const struct FHitResult& HitResult, bool* bHit);
	void CheckCharacterHitTarget(const struct FHitResult& HitResult, bool* bHit);
	void NotifyEndMultipleHit();
	bool IsPassiveOnly();
	bool RemoveFromHittedActor(const class AActor*& TargetActor_0);
	void IsHittableCharacter(class AActor* Actor, bool* bIsHittable);
	void GetSkillInfoOnPassiveAdded(struct FGameplayTag* SkillTag, int32* SerialNumber);
	void ShouldHitCheck(const struct FHitResult& HitResult, bool* bShouldHit);
	void ChangeShouldGivePassive(bool bEnable);
	void GetLaunchedActorTarget(class AActor** LaunchedActor);
	void CheckPenetrateTarget(class AActor* TargetActor_0, bool* bIsTarget);
	void ShouldGivePassiveStatic(class UObject* Target, bool* bShouldAdd);
	void CheckIgnoreBlocking(class AActor* TargetActor_0, bool* bIgnore);
	void CheckPassiveOnly(bool* bIsPassiveOnly);
	void GetDuration(float* Duration);
	void GetPassiveSkillTag(struct FGameplayTag* PassiveSkillTag);
	void GetCauserOwnerCharacterBP(class ABP_AJBInGameCharacter_C** CharacterBP);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBDamageActor_C">();
	}
	static class ABP_AJBDamageActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBDamageActor_C>();
	}
};
static_assert(alignof(ABP_AJBDamageActor_C) == 0x000008, "Wrong alignment on ABP_AJBDamageActor_C");
static_assert(sizeof(ABP_AJBDamageActor_C) == 0x0004B8, "Wrong size on ABP_AJBDamageActor_C");
static_assert(offsetof(ABP_AJBDamageActor_C, UberGraphFrame) == 0x000328, "Member 'ABP_AJBDamageActor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, Arrow) == 0x000330, "Member 'ABP_AJBDamageActor_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, Sphere) == 0x000338, "Member 'ABP_AJBDamageActor_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, Offset) == 0x000340, "Member 'ABP_AJBDamageActor_C::Offset' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, Radius) == 0x00034C, "Member 'ABP_AJBDamageActor_C::Radius' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, OnTargetHit) == 0x000350, "Member 'ABP_AJBDamageActor_C::OnTargetHit' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, TargetActor) == 0x000360, "Member 'ABP_AJBDamageActor_C::TargetActor' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, TargetComponent) == 0x000368, "Member 'ABP_AJBDamageActor_C::TargetComponent' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, OnBlocking) == 0x000370, "Member 'ABP_AJBDamageActor_C::OnBlocking' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, DestinationActor) == 0x000380, "Member 'ABP_AJBDamageActor_C::DestinationActor' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, RelativeSkillComponent) == 0x000388, "Member 'ABP_AJBDamageActor_C::RelativeSkillComponent' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, ParticleTag) == 0x000390, "Member 'ABP_AJBDamageActor_C::ParticleTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, TargetHitLocation) == 0x000398, "Member 'ABP_AJBDamageActor_C::TargetHitLocation' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, CloseRangeSkillNo) == 0x0003A4, "Member 'ABP_AJBDamageActor_C::CloseRangeSkillNo' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, ParticleEffect) == 0x0003A8, "Member 'ABP_AJBDamageActor_C::ParticleEffect' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, OnTargetOverlap) == 0x0003B0, "Member 'ABP_AJBDamageActor_C::OnTargetOverlap' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, bCollisionDisableByTheWorld) == 0x0003C0, "Member 'ABP_AJBDamageActor_C::bCollisionDisableByTheWorld' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, BaseDamage) == 0x0003C4, "Member 'ABP_AJBDamageActor_C::BaseDamage' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, bDebugShowCollision) == 0x0003C8, "Member 'ABP_AJBDamageActor_C::bDebugShowCollision' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, BaseDamageInCalcDamage) == 0x0003CC, "Member 'ABP_AJBDamageActor_C::BaseDamageInCalcDamage' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, bIsPenetration) == 0x0003D0, "Member 'ABP_AJBDamageActor_C::bIsPenetration' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, HittedActor) == 0x0003D8, "Member 'ABP_AJBDamageActor_C::HittedActor' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, bImprovementWallThrough) == 0x0003E8, "Member 'ABP_AJBDamageActor_C::bImprovementWallThrough' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, PreLocation) == 0x0003EC, "Member 'ABP_AJBDamageActor_C::PreLocation' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, HitTraceInterval) == 0x0003F8, "Member 'ABP_AJBDamageActor_C::HitTraceInterval' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, ObjectTypesCharacterHit) == 0x000400, "Member 'ABP_AJBDamageActor_C::ObjectTypesCharacterHit' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, BlockedActor) == 0x000410, "Member 'ABP_AJBDamageActor_C::BlockedActor' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, AvoidedActor) == 0x000420, "Member 'ABP_AJBDamageActor_C::AvoidedActor' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, InvalidatedActor) == 0x000430, "Member 'ABP_AJBDamageActor_C::InvalidatedActor' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, bValidDamageProcessOnPenetrate) == 0x000440, "Member 'ABP_AJBDamageActor_C::bValidDamageProcessOnPenetrate' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, bPenetrateObject) == 0x000441, "Member 'ABP_AJBDamageActor_C::bPenetrateObject' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, OnPenetrateHit) == 0x000448, "Member 'ABP_AJBDamageActor_C::OnPenetrateHit' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, CollisionDetector) == 0x000458, "Member 'ABP_AJBDamageActor_C::CollisionDetector' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, CollisionDetectorClass) == 0x000460, "Member 'ABP_AJBDamageActor_C::CollisionDetectorClass' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, bIgnoreBreakWindow) == 0x000468, "Member 'ABP_AJBDamageActor_C::bIgnoreBreakWindow' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, FirstLocation) == 0x00046C, "Member 'ABP_AJBDamageActor_C::FirstLocation' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, bShouldGivePassive) == 0x000478, "Member 'ABP_AJBDamageActor_C::bShouldGivePassive' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, AddPassiveVoiceTag) == 0x000480, "Member 'ABP_AJBDamageActor_C::AddPassiveVoiceTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, CheckQueuedVoiceTagsOnPassiveAdded) == 0x000488, "Member 'ABP_AJBDamageActor_C::CheckQueuedVoiceTagsOnPassiveAdded' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, bTempQueued) == 0x000498, "Member 'ABP_AJBDamageActor_C::bTempQueued' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, bHitBarrier) == 0x000499, "Member 'ABP_AJBDamageActor_C::bHitBarrier' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, CharacterTypeIgnorePassiveAdded) == 0x0004A0, "Member 'ABP_AJBDamageActor_C::CharacterTypeIgnorePassiveAdded' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageActor_C, bIgnoreAddPassiveForMovableStand) == 0x0004B0, "Member 'ABP_AJBDamageActor_C::bIgnoreAddPassiveForMovableStand' has a wrong offset!");

}

