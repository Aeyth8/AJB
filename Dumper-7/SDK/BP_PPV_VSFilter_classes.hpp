#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PPV_VSFilter

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_VSFilterType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PPV_VSFilter.BP_PPV_VSFilter_C
// 0x0078 (0x03A0 - 0x0328)
class ABP_PPV_VSFilter_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(Transient, DuplicateTransient)
	class UPostProcessComponent*                  PostProcess;                                       // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             DT_VSFilter;                                       // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<E_VSFilterType, class UMaterialInstance*> VSFilterMap;                                      // 0x0348(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	E_VSFilterType                                CurrentType;                                       // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_PPV_VSFilter(int32 EntryPoint);
	void PrevFilter();
	void NextFilter();
	void ReceiveBeginPlay();
	void SetFilter(E_VSFilterType Type);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PPV_VSFilter_C">();
	}
	static class ABP_PPV_VSFilter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PPV_VSFilter_C>();
	}
};
static_assert(alignof(ABP_PPV_VSFilter_C) == 0x000008, "Wrong alignment on ABP_PPV_VSFilter_C");
static_assert(sizeof(ABP_PPV_VSFilter_C) == 0x0003A0, "Wrong size on ABP_PPV_VSFilter_C");
static_assert(offsetof(ABP_PPV_VSFilter_C, UberGraphFrame) == 0x000328, "Member 'ABP_PPV_VSFilter_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PPV_VSFilter_C, PostProcess) == 0x000330, "Member 'ABP_PPV_VSFilter_C::PostProcess' has a wrong offset!");
static_assert(offsetof(ABP_PPV_VSFilter_C, DefaultSceneRoot) == 0x000338, "Member 'ABP_PPV_VSFilter_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_PPV_VSFilter_C, DT_VSFilter) == 0x000340, "Member 'ABP_PPV_VSFilter_C::DT_VSFilter' has a wrong offset!");
static_assert(offsetof(ABP_PPV_VSFilter_C, VSFilterMap) == 0x000348, "Member 'ABP_PPV_VSFilter_C::VSFilterMap' has a wrong offset!");
static_assert(offsetof(ABP_PPV_VSFilter_C, CurrentType) == 0x000398, "Member 'ABP_PPV_VSFilter_C::CurrentType' has a wrong offset!");

}

