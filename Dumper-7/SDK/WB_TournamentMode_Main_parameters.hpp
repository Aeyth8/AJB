#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_TournamentMode_Main

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "AJB_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ST_ShopCompetitionTeamInfo_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "ST_ShopCompetitionUITeamInfo_structs.hpp"


namespace SDK::Params
{

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.ExecuteUbergraph_WB_TournamentMode_Main
// 0x01F0 (0x01F0 - 0x0000)
struct WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(int32 PlayerID)>               K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue1;         // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue2;         // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_PlayerID2;                      // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue3;         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBWindowWidget*                       K2Node_CustomEvent_TargetWidget1;                  // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UAJBWindowWidget* TargetWidget)> K2Node_CreateDelegate_OutputDelegate1;     // 0x0030(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_GetAJBGameInstance_bSuccess;              // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBGameInstance_C*                  CallFunc_GetAJBGameInstance_AJB_Game_Instance;     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatchingPlayerInfo                    CallFunc_TryGetMatchingPlayerInfoByPlayerID_Out;   // 0x0058(0x0088)()
	bool                                          CallFunc_TryGetMatchingPlayerInfoByPlayerID_ReturnValue; // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x00E8(0x0018)()
	class UAJBWindowWidget*                       K2Node_CustomEvent_TargetWidget;                   // 0x0100(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_SelectedWatcherPlayerID;        // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UAJBWindowWidget* TargetWidget)> K2Node_CreateDelegate_OutputDelegate2;     // 0x0110(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_FindAJBViewportWidgetOfClass_bSuccess;    // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_FullMap_C*                          CallFunc_FindAJBViewportWidgetOfClass_OutWidget;   // 0x0128(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue4;         // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue5;         // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_132[0x6];                                      // 0x0132(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate3;             // 0x0138(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue1;                 // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x014B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_ShopCompetitionTeamInfo>    K2Node_CustomEvent_TeamInfoList;                   // 0x0150(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	bool                                          CallFunc_GetAJBInGameHUD_BP_bSuccess;              // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameHUD_C*                     CallFunc_GetAJBInGameHUD_BP_In_Game_HUD;           // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(int32 PlayerID)>               K2Node_CreateDelegate_OutputDelegate4;             // 0x0170(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_GetShopCompetitionUITeamInfoByPlayerID_bSuccess; // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_ShopCompetitionUITeamInfo          CallFunc_GetShopCompetitionUITeamInfoByPlayerID_ReturnValue; // 0x0188(0x0028)(HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x01B0(0x0028)()
	int32                                         K2Node_CustomEvent_PlayerID1;                      // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_CustomEvent_SkillTag;                       // 0x01E0(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_PlayerID;                       // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main) == 0x000008, "Wrong alignment on WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main");
static_assert(sizeof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main) == 0x0001F0, "Wrong size on WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, EntryPoint) == 0x000000, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000018, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, CallFunc_EqualEqual_ByteByte_ReturnValue1) == 0x000019, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::CallFunc_EqualEqual_ByteByte_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, CallFunc_EqualEqual_ByteByte_ReturnValue2) == 0x00001A, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::CallFunc_EqualEqual_ByteByte_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, K2Node_CustomEvent_PlayerID2) == 0x00001C, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::K2Node_CustomEvent_PlayerID2' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, CallFunc_EqualEqual_ByteByte_ReturnValue3) == 0x000020, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::CallFunc_EqualEqual_ByteByte_ReturnValue3' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, K2Node_CustomEvent_TargetWidget1) == 0x000028, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::K2Node_CustomEvent_TargetWidget1' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, K2Node_CreateDelegate_OutputDelegate1) == 0x000030, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, CallFunc_GetAJBGameInstance_bSuccess) == 0x000040, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::CallFunc_GetAJBGameInstance_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, CallFunc_GetAJBGameInstance_AJB_Game_Instance) == 0x000048, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::CallFunc_GetAJBGameInstance_AJB_Game_Instance' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000050, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, CallFunc_TryGetMatchingPlayerInfoByPlayerID_Out) == 0x000058, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::CallFunc_TryGetMatchingPlayerInfoByPlayerID_Out' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, CallFunc_TryGetMatchingPlayerInfoByPlayerID_ReturnValue) == 0x0000E0, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::CallFunc_TryGetMatchingPlayerInfoByPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, CallFunc_Conv_StringToText_ReturnValue) == 0x0000E8, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, K2Node_CustomEvent_TargetWidget) == 0x000100, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::K2Node_CustomEvent_TargetWidget' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, K2Node_CustomEvent_SelectedWatcherPlayerID) == 0x000108, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::K2Node_CustomEvent_SelectedWatcherPlayerID' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, K2Node_CreateDelegate_OutputDelegate2) == 0x000110, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::K2Node_CreateDelegate_OutputDelegate2' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, CallFunc_FindAJBViewportWidgetOfClass_bSuccess) == 0x000120, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::CallFunc_FindAJBViewportWidgetOfClass_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, CallFunc_FindAJBViewportWidgetOfClass_OutWidget) == 0x000128, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::CallFunc_FindAJBViewportWidgetOfClass_OutWidget' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, CallFunc_EqualEqual_ByteByte_ReturnValue4) == 0x000130, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::CallFunc_EqualEqual_ByteByte_ReturnValue4' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, CallFunc_EqualEqual_ByteByte_ReturnValue5) == 0x000131, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::CallFunc_EqualEqual_ByteByte_ReturnValue5' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, K2Node_CreateDelegate_OutputDelegate3) == 0x000138, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::K2Node_CreateDelegate_OutputDelegate3' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, CallFunc_Not_PreBool_ReturnValue) == 0x000148, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, CallFunc_BooleanAND_ReturnValue) == 0x000149, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, CallFunc_Not_PreBool_ReturnValue1) == 0x00014A, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::CallFunc_Not_PreBool_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, CallFunc_BooleanAND_ReturnValue1) == 0x00014B, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, K2Node_CustomEvent_TeamInfoList) == 0x000150, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::K2Node_CustomEvent_TeamInfoList' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, CallFunc_GetAJBInGameHUD_BP_bSuccess) == 0x000160, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::CallFunc_GetAJBInGameHUD_BP_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, CallFunc_GetAJBInGameHUD_BP_In_Game_HUD) == 0x000168, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::CallFunc_GetAJBInGameHUD_BP_In_Game_HUD' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, K2Node_CreateDelegate_OutputDelegate4) == 0x000170, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::K2Node_CreateDelegate_OutputDelegate4' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, CallFunc_GetShopCompetitionUITeamInfoByPlayerID_bSuccess) == 0x000180, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::CallFunc_GetShopCompetitionUITeamInfoByPlayerID_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, CallFunc_GetShopCompetitionUITeamInfoByPlayerID_ReturnValue) == 0x000188, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::CallFunc_GetShopCompetitionUITeamInfoByPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, K2Node_MakeStruct_SlateColor) == 0x0001B0, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, K2Node_CustomEvent_PlayerID1) == 0x0001D8, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::K2Node_CustomEvent_PlayerID1' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, K2Node_CustomEvent_SkillTag) == 0x0001E0, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::K2Node_CustomEvent_SkillTag' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main, K2Node_CustomEvent_PlayerID) == 0x0001E8, "Member 'WB_TournamentMode_Main_C_ExecuteUbergraph_WB_TournamentMode_Main::K2Node_CustomEvent_PlayerID' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.OnGotoWatcherPlayerByUltimateWindowButton
// 0x0004 (0x0004 - 0x0000)
struct WB_TournamentMode_Main_C_OnGotoWatcherPlayerByUltimateWindowButton final
{
public:
	int32                                         PlayerID;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_TournamentMode_Main_C_OnGotoWatcherPlayerByUltimateWindowButton) == 0x000004, "Wrong alignment on WB_TournamentMode_Main_C_OnGotoWatcherPlayerByUltimateWindowButton");
static_assert(sizeof(WB_TournamentMode_Main_C_OnGotoWatcherPlayerByUltimateWindowButton) == 0x000004, "Wrong size on WB_TournamentMode_Main_C_OnGotoWatcherPlayerByUltimateWindowButton");
static_assert(offsetof(WB_TournamentMode_Main_C_OnGotoWatcherPlayerByUltimateWindowButton, PlayerID) == 0x000000, "Member 'WB_TournamentMode_Main_C_OnGotoWatcherPlayerByUltimateWindowButton::PlayerID' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.RequestShopCompetition_UltimateLog
// 0x0010 (0x0010 - 0x0000)
struct WB_TournamentMode_Main_C_RequestShopCompetition_UltimateLog final
{
public:
	int32                                         PlayerID;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           SkillTag;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_TournamentMode_Main_C_RequestShopCompetition_UltimateLog) == 0x000008, "Wrong alignment on WB_TournamentMode_Main_C_RequestShopCompetition_UltimateLog");
static_assert(sizeof(WB_TournamentMode_Main_C_RequestShopCompetition_UltimateLog) == 0x000010, "Wrong size on WB_TournamentMode_Main_C_RequestShopCompetition_UltimateLog");
static_assert(offsetof(WB_TournamentMode_Main_C_RequestShopCompetition_UltimateLog, PlayerID) == 0x000000, "Member 'WB_TournamentMode_Main_C_RequestShopCompetition_UltimateLog::PlayerID' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_RequestShopCompetition_UltimateLog, SkillTag) == 0x000008, "Member 'WB_TournamentMode_Main_C_RequestShopCompetition_UltimateLog::SkillTag' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.SetupValidMatchingPlayerIndexList
// 0x0010 (0x0010 - 0x0000)
struct WB_TournamentMode_Main_C_SetupValidMatchingPlayerIndexList final
{
public:
	TArray<struct FST_ShopCompetitionTeamInfo>    TeamInfoList;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
};
static_assert(alignof(WB_TournamentMode_Main_C_SetupValidMatchingPlayerIndexList) == 0x000008, "Wrong alignment on WB_TournamentMode_Main_C_SetupValidMatchingPlayerIndexList");
static_assert(sizeof(WB_TournamentMode_Main_C_SetupValidMatchingPlayerIndexList) == 0x000010, "Wrong size on WB_TournamentMode_Main_C_SetupValidMatchingPlayerIndexList");
static_assert(offsetof(WB_TournamentMode_Main_C_SetupValidMatchingPlayerIndexList, TeamInfoList) == 0x000000, "Member 'WB_TournamentMode_Main_C_SetupValidMatchingPlayerIndexList::TeamInfoList' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.ChangedWatcherPlayerID
// 0x0004 (0x0004 - 0x0000)
struct WB_TournamentMode_Main_C_ChangedWatcherPlayerID final
{
public:
	int32                                         SelectedWatcherPlayerID;                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_TournamentMode_Main_C_ChangedWatcherPlayerID) == 0x000004, "Wrong alignment on WB_TournamentMode_Main_C_ChangedWatcherPlayerID");
static_assert(sizeof(WB_TournamentMode_Main_C_ChangedWatcherPlayerID) == 0x000004, "Wrong size on WB_TournamentMode_Main_C_ChangedWatcherPlayerID");
static_assert(offsetof(WB_TournamentMode_Main_C_ChangedWatcherPlayerID, SelectedWatcherPlayerID) == 0x000000, "Member 'WB_TournamentMode_Main_C_ChangedWatcherPlayerID::SelectedWatcherPlayerID' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.OnOpeningFullMap
// 0x0008 (0x0008 - 0x0000)
struct WB_TournamentMode_Main_C_OnOpeningFullMap final
{
public:
	class UAJBWindowWidget*                       TargetWidget;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_TournamentMode_Main_C_OnOpeningFullMap) == 0x000008, "Wrong alignment on WB_TournamentMode_Main_C_OnOpeningFullMap");
static_assert(sizeof(WB_TournamentMode_Main_C_OnOpeningFullMap) == 0x000008, "Wrong size on WB_TournamentMode_Main_C_OnOpeningFullMap");
static_assert(offsetof(WB_TournamentMode_Main_C_OnOpeningFullMap, TargetWidget) == 0x000000, "Member 'WB_TournamentMode_Main_C_OnOpeningFullMap::TargetWidget' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.OnClosedFullMap
// 0x0008 (0x0008 - 0x0000)
struct WB_TournamentMode_Main_C_OnClosedFullMap final
{
public:
	class UAJBWindowWidget*                       TargetWidget;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_TournamentMode_Main_C_OnClosedFullMap) == 0x000008, "Wrong alignment on WB_TournamentMode_Main_C_OnClosedFullMap");
static_assert(sizeof(WB_TournamentMode_Main_C_OnClosedFullMap) == 0x000008, "Wrong size on WB_TournamentMode_Main_C_OnClosedFullMap");
static_assert(offsetof(WB_TournamentMode_Main_C_OnClosedFullMap, TargetWidget) == 0x000000, "Member 'WB_TournamentMode_Main_C_OnClosedFullMap::TargetWidget' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.OnGotoWatcherPlayerByPlayerDetailButton
// 0x0004 (0x0004 - 0x0000)
struct WB_TournamentMode_Main_C_OnGotoWatcherPlayerByPlayerDetailButton final
{
public:
	int32                                         PlayerID;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_TournamentMode_Main_C_OnGotoWatcherPlayerByPlayerDetailButton) == 0x000004, "Wrong alignment on WB_TournamentMode_Main_C_OnGotoWatcherPlayerByPlayerDetailButton");
static_assert(sizeof(WB_TournamentMode_Main_C_OnGotoWatcherPlayerByPlayerDetailButton) == 0x000004, "Wrong size on WB_TournamentMode_Main_C_OnGotoWatcherPlayerByPlayerDetailButton");
static_assert(offsetof(WB_TournamentMode_Main_C_OnGotoWatcherPlayerByPlayerDetailButton, PlayerID) == 0x000000, "Member 'WB_TournamentMode_Main_C_OnGotoWatcherPlayerByPlayerDetailButton::PlayerID' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.IsDisplayWatcherMode
// 0x0001 (0x0001 - 0x0000)
struct WB_TournamentMode_Main_C_IsDisplayWatcherMode final
{
public:
	bool                                          bDisplayWatcherMode_0;                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TournamentMode_Main_C_IsDisplayWatcherMode) == 0x000001, "Wrong alignment on WB_TournamentMode_Main_C_IsDisplayWatcherMode");
static_assert(sizeof(WB_TournamentMode_Main_C_IsDisplayWatcherMode) == 0x000001, "Wrong size on WB_TournamentMode_Main_C_IsDisplayWatcherMode");
static_assert(offsetof(WB_TournamentMode_Main_C_IsDisplayWatcherMode, bDisplayWatcherMode_0) == 0x000000, "Member 'WB_TournamentMode_Main_C_IsDisplayWatcherMode::bDisplayWatcherMode_0' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.OnInputTurnRate
// 0x0008 (0x0008 - 0x0000)
struct WB_TournamentMode_Main_C_OnInputTurnRate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TournamentMode_Main_C_OnInputTurnRate) == 0x000004, "Wrong alignment on WB_TournamentMode_Main_C_OnInputTurnRate");
static_assert(sizeof(WB_TournamentMode_Main_C_OnInputTurnRate) == 0x000008, "Wrong size on WB_TournamentMode_Main_C_OnInputTurnRate");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputTurnRate, Value) == 0x000000, "Member 'WB_TournamentMode_Main_C_OnInputTurnRate::Value' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputTurnRate, ReturnValue) == 0x000004, "Member 'WB_TournamentMode_Main_C_OnInputTurnRate::ReturnValue' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.OnInputReleasedUp
// 0x0001 (0x0001 - 0x0000)
struct WB_TournamentMode_Main_C_OnInputReleasedUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TournamentMode_Main_C_OnInputReleasedUp) == 0x000001, "Wrong alignment on WB_TournamentMode_Main_C_OnInputReleasedUp");
static_assert(sizeof(WB_TournamentMode_Main_C_OnInputReleasedUp) == 0x000001, "Wrong size on WB_TournamentMode_Main_C_OnInputReleasedUp");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputReleasedUp, ReturnValue) == 0x000000, "Member 'WB_TournamentMode_Main_C_OnInputReleasedUp::ReturnValue' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.OnInputReleasedTouch
// 0x0128 (0x0128 - 0x0000)
struct WB_TournamentMode_Main_C_OnInputReleasedTouch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0008(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_GetHitResultUnderCursorForObjects_HitResult; // 0x0020(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_GetHitResultUnderCursorForObjects_ReturnValue; // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AB[0x1];                                       // 0x00AB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00B4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00C0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00CC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00D8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x00F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0110(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x011C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_TournamentMode_Main_C_OnInputReleasedTouch) == 0x000008, "Wrong alignment on WB_TournamentMode_Main_C_OnInputReleasedTouch");
static_assert(sizeof(WB_TournamentMode_Main_C_OnInputReleasedTouch) == 0x000128, "Wrong size on WB_TournamentMode_Main_C_OnInputReleasedTouch");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputReleasedTouch, ReturnValue) == 0x000000, "Member 'WB_TournamentMode_Main_C_OnInputReleasedTouch::ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputReleasedTouch, K2Node_MakeArray_Array) == 0x000008, "Member 'WB_TournamentMode_Main_C_OnInputReleasedTouch::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputReleasedTouch, CallFunc_GetPlayerController_ReturnValue) == 0x000018, "Member 'WB_TournamentMode_Main_C_OnInputReleasedTouch::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputReleasedTouch, CallFunc_GetHitResultUnderCursorForObjects_HitResult) == 0x000020, "Member 'WB_TournamentMode_Main_C_OnInputReleasedTouch::CallFunc_GetHitResultUnderCursorForObjects_HitResult' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputReleasedTouch, CallFunc_GetHitResultUnderCursorForObjects_ReturnValue) == 0x0000A8, "Member 'WB_TournamentMode_Main_C_OnInputReleasedTouch::CallFunc_GetHitResultUnderCursorForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputReleasedTouch, CallFunc_BreakHitResult_bBlockingHit) == 0x0000A9, "Member 'WB_TournamentMode_Main_C_OnInputReleasedTouch::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputReleasedTouch, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000AA, "Member 'WB_TournamentMode_Main_C_OnInputReleasedTouch::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputReleasedTouch, CallFunc_BreakHitResult_Time) == 0x0000AC, "Member 'WB_TournamentMode_Main_C_OnInputReleasedTouch::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputReleasedTouch, CallFunc_BreakHitResult_Distance) == 0x0000B0, "Member 'WB_TournamentMode_Main_C_OnInputReleasedTouch::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputReleasedTouch, CallFunc_BreakHitResult_Location) == 0x0000B4, "Member 'WB_TournamentMode_Main_C_OnInputReleasedTouch::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputReleasedTouch, CallFunc_BreakHitResult_ImpactPoint) == 0x0000C0, "Member 'WB_TournamentMode_Main_C_OnInputReleasedTouch::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputReleasedTouch, CallFunc_BreakHitResult_Normal) == 0x0000CC, "Member 'WB_TournamentMode_Main_C_OnInputReleasedTouch::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputReleasedTouch, CallFunc_BreakHitResult_ImpactNormal) == 0x0000D8, "Member 'WB_TournamentMode_Main_C_OnInputReleasedTouch::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputReleasedTouch, CallFunc_BreakHitResult_PhysMat) == 0x0000E8, "Member 'WB_TournamentMode_Main_C_OnInputReleasedTouch::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputReleasedTouch, CallFunc_BreakHitResult_HitActor) == 0x0000F0, "Member 'WB_TournamentMode_Main_C_OnInputReleasedTouch::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputReleasedTouch, CallFunc_BreakHitResult_HitComponent) == 0x0000F8, "Member 'WB_TournamentMode_Main_C_OnInputReleasedTouch::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputReleasedTouch, CallFunc_BreakHitResult_HitBoneName) == 0x000100, "Member 'WB_TournamentMode_Main_C_OnInputReleasedTouch::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputReleasedTouch, CallFunc_BreakHitResult_HitItem) == 0x000108, "Member 'WB_TournamentMode_Main_C_OnInputReleasedTouch::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputReleasedTouch, CallFunc_BreakHitResult_FaceIndex) == 0x00010C, "Member 'WB_TournamentMode_Main_C_OnInputReleasedTouch::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputReleasedTouch, CallFunc_BreakHitResult_TraceStart) == 0x000110, "Member 'WB_TournamentMode_Main_C_OnInputReleasedTouch::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputReleasedTouch, CallFunc_BreakHitResult_TraceEnd) == 0x00011C, "Member 'WB_TournamentMode_Main_C_OnInputReleasedTouch::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.OnInputReleasedRight
// 0x0001 (0x0001 - 0x0000)
struct WB_TournamentMode_Main_C_OnInputReleasedRight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TournamentMode_Main_C_OnInputReleasedRight) == 0x000001, "Wrong alignment on WB_TournamentMode_Main_C_OnInputReleasedRight");
static_assert(sizeof(WB_TournamentMode_Main_C_OnInputReleasedRight) == 0x000001, "Wrong size on WB_TournamentMode_Main_C_OnInputReleasedRight");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputReleasedRight, ReturnValue) == 0x000000, "Member 'WB_TournamentMode_Main_C_OnInputReleasedRight::ReturnValue' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.OnInputReleasedR2
// 0x0001 (0x0001 - 0x0000)
struct WB_TournamentMode_Main_C_OnInputReleasedR2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TournamentMode_Main_C_OnInputReleasedR2) == 0x000001, "Wrong alignment on WB_TournamentMode_Main_C_OnInputReleasedR2");
static_assert(sizeof(WB_TournamentMode_Main_C_OnInputReleasedR2) == 0x000001, "Wrong size on WB_TournamentMode_Main_C_OnInputReleasedR2");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputReleasedR2, ReturnValue) == 0x000000, "Member 'WB_TournamentMode_Main_C_OnInputReleasedR2::ReturnValue' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.OnInputReleasedR1
// 0x0001 (0x0001 - 0x0000)
struct WB_TournamentMode_Main_C_OnInputReleasedR1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TournamentMode_Main_C_OnInputReleasedR1) == 0x000001, "Wrong alignment on WB_TournamentMode_Main_C_OnInputReleasedR1");
static_assert(sizeof(WB_TournamentMode_Main_C_OnInputReleasedR1) == 0x000001, "Wrong size on WB_TournamentMode_Main_C_OnInputReleasedR1");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputReleasedR1, ReturnValue) == 0x000000, "Member 'WB_TournamentMode_Main_C_OnInputReleasedR1::ReturnValue' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.OnInputReleasedLeft
// 0x0001 (0x0001 - 0x0000)
struct WB_TournamentMode_Main_C_OnInputReleasedLeft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TournamentMode_Main_C_OnInputReleasedLeft) == 0x000001, "Wrong alignment on WB_TournamentMode_Main_C_OnInputReleasedLeft");
static_assert(sizeof(WB_TournamentMode_Main_C_OnInputReleasedLeft) == 0x000001, "Wrong size on WB_TournamentMode_Main_C_OnInputReleasedLeft");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputReleasedLeft, ReturnValue) == 0x000000, "Member 'WB_TournamentMode_Main_C_OnInputReleasedLeft::ReturnValue' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.OnInputReleasedL3
// 0x0001 (0x0001 - 0x0000)
struct WB_TournamentMode_Main_C_OnInputReleasedL3 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TournamentMode_Main_C_OnInputReleasedL3) == 0x000001, "Wrong alignment on WB_TournamentMode_Main_C_OnInputReleasedL3");
static_assert(sizeof(WB_TournamentMode_Main_C_OnInputReleasedL3) == 0x000001, "Wrong size on WB_TournamentMode_Main_C_OnInputReleasedL3");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputReleasedL3, ReturnValue) == 0x000000, "Member 'WB_TournamentMode_Main_C_OnInputReleasedL3::ReturnValue' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.OnInputReleasedL2
// 0x0001 (0x0001 - 0x0000)
struct WB_TournamentMode_Main_C_OnInputReleasedL2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TournamentMode_Main_C_OnInputReleasedL2) == 0x000001, "Wrong alignment on WB_TournamentMode_Main_C_OnInputReleasedL2");
static_assert(sizeof(WB_TournamentMode_Main_C_OnInputReleasedL2) == 0x000001, "Wrong size on WB_TournamentMode_Main_C_OnInputReleasedL2");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputReleasedL2, ReturnValue) == 0x000000, "Member 'WB_TournamentMode_Main_C_OnInputReleasedL2::ReturnValue' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.OnInputReleasedL1
// 0x0001 (0x0001 - 0x0000)
struct WB_TournamentMode_Main_C_OnInputReleasedL1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TournamentMode_Main_C_OnInputReleasedL1) == 0x000001, "Wrong alignment on WB_TournamentMode_Main_C_OnInputReleasedL1");
static_assert(sizeof(WB_TournamentMode_Main_C_OnInputReleasedL1) == 0x000001, "Wrong size on WB_TournamentMode_Main_C_OnInputReleasedL1");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputReleasedL1, ReturnValue) == 0x000000, "Member 'WB_TournamentMode_Main_C_OnInputReleasedL1::ReturnValue' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.OnInputReleasedDown
// 0x0001 (0x0001 - 0x0000)
struct WB_TournamentMode_Main_C_OnInputReleasedDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TournamentMode_Main_C_OnInputReleasedDown) == 0x000001, "Wrong alignment on WB_TournamentMode_Main_C_OnInputReleasedDown");
static_assert(sizeof(WB_TournamentMode_Main_C_OnInputReleasedDown) == 0x000001, "Wrong size on WB_TournamentMode_Main_C_OnInputReleasedDown");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputReleasedDown, ReturnValue) == 0x000000, "Member 'WB_TournamentMode_Main_C_OnInputReleasedDown::ReturnValue' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.OnInputReleasedDecide
// 0x0001 (0x0001 - 0x0000)
struct WB_TournamentMode_Main_C_OnInputReleasedDecide final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TournamentMode_Main_C_OnInputReleasedDecide) == 0x000001, "Wrong alignment on WB_TournamentMode_Main_C_OnInputReleasedDecide");
static_assert(sizeof(WB_TournamentMode_Main_C_OnInputReleasedDecide) == 0x000001, "Wrong size on WB_TournamentMode_Main_C_OnInputReleasedDecide");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputReleasedDecide, ReturnValue) == 0x000000, "Member 'WB_TournamentMode_Main_C_OnInputReleasedDecide::ReturnValue' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.OnInputReleasedCancel
// 0x0001 (0x0001 - 0x0000)
struct WB_TournamentMode_Main_C_OnInputReleasedCancel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TournamentMode_Main_C_OnInputReleasedCancel) == 0x000001, "Wrong alignment on WB_TournamentMode_Main_C_OnInputReleasedCancel");
static_assert(sizeof(WB_TournamentMode_Main_C_OnInputReleasedCancel) == 0x000001, "Wrong size on WB_TournamentMode_Main_C_OnInputReleasedCancel");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputReleasedCancel, ReturnValue) == 0x000000, "Member 'WB_TournamentMode_Main_C_OnInputReleasedCancel::ReturnValue' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.OnInputPressedUp
// 0x0001 (0x0001 - 0x0000)
struct WB_TournamentMode_Main_C_OnInputPressedUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TournamentMode_Main_C_OnInputPressedUp) == 0x000001, "Wrong alignment on WB_TournamentMode_Main_C_OnInputPressedUp");
static_assert(sizeof(WB_TournamentMode_Main_C_OnInputPressedUp) == 0x000001, "Wrong size on WB_TournamentMode_Main_C_OnInputPressedUp");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputPressedUp, ReturnValue) == 0x000000, "Member 'WB_TournamentMode_Main_C_OnInputPressedUp::ReturnValue' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.OnInputPressedTouch
// 0x000C (0x000C - 0x0000)
struct WB_TournamentMode_Main_C_OnInputPressedTouch final
{
public:
	float                                         LocationX;                                         // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LocationY;                                         // 0x0004(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TournamentMode_Main_C_OnInputPressedTouch) == 0x000004, "Wrong alignment on WB_TournamentMode_Main_C_OnInputPressedTouch");
static_assert(sizeof(WB_TournamentMode_Main_C_OnInputPressedTouch) == 0x00000C, "Wrong size on WB_TournamentMode_Main_C_OnInputPressedTouch");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputPressedTouch, LocationX) == 0x000000, "Member 'WB_TournamentMode_Main_C_OnInputPressedTouch::LocationX' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputPressedTouch, LocationY) == 0x000004, "Member 'WB_TournamentMode_Main_C_OnInputPressedTouch::LocationY' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputPressedTouch, ReturnValue) == 0x000008, "Member 'WB_TournamentMode_Main_C_OnInputPressedTouch::ReturnValue' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.OnInputPressedRight
// 0x0001 (0x0001 - 0x0000)
struct WB_TournamentMode_Main_C_OnInputPressedRight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TournamentMode_Main_C_OnInputPressedRight) == 0x000001, "Wrong alignment on WB_TournamentMode_Main_C_OnInputPressedRight");
static_assert(sizeof(WB_TournamentMode_Main_C_OnInputPressedRight) == 0x000001, "Wrong size on WB_TournamentMode_Main_C_OnInputPressedRight");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputPressedRight, ReturnValue) == 0x000000, "Member 'WB_TournamentMode_Main_C_OnInputPressedRight::ReturnValue' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.OnInputPressedR2
// 0x0001 (0x0001 - 0x0000)
struct WB_TournamentMode_Main_C_OnInputPressedR2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TournamentMode_Main_C_OnInputPressedR2) == 0x000001, "Wrong alignment on WB_TournamentMode_Main_C_OnInputPressedR2");
static_assert(sizeof(WB_TournamentMode_Main_C_OnInputPressedR2) == 0x000001, "Wrong size on WB_TournamentMode_Main_C_OnInputPressedR2");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputPressedR2, ReturnValue) == 0x000000, "Member 'WB_TournamentMode_Main_C_OnInputPressedR2::ReturnValue' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.OnInputPressedR1
// 0x0001 (0x0001 - 0x0000)
struct WB_TournamentMode_Main_C_OnInputPressedR1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TournamentMode_Main_C_OnInputPressedR1) == 0x000001, "Wrong alignment on WB_TournamentMode_Main_C_OnInputPressedR1");
static_assert(sizeof(WB_TournamentMode_Main_C_OnInputPressedR1) == 0x000001, "Wrong size on WB_TournamentMode_Main_C_OnInputPressedR1");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputPressedR1, ReturnValue) == 0x000000, "Member 'WB_TournamentMode_Main_C_OnInputPressedR1::ReturnValue' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.OnInputPressedLeft
// 0x0001 (0x0001 - 0x0000)
struct WB_TournamentMode_Main_C_OnInputPressedLeft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TournamentMode_Main_C_OnInputPressedLeft) == 0x000001, "Wrong alignment on WB_TournamentMode_Main_C_OnInputPressedLeft");
static_assert(sizeof(WB_TournamentMode_Main_C_OnInputPressedLeft) == 0x000001, "Wrong size on WB_TournamentMode_Main_C_OnInputPressedLeft");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputPressedLeft, ReturnValue) == 0x000000, "Member 'WB_TournamentMode_Main_C_OnInputPressedLeft::ReturnValue' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.OnInputPressedL3
// 0x0001 (0x0001 - 0x0000)
struct WB_TournamentMode_Main_C_OnInputPressedL3 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TournamentMode_Main_C_OnInputPressedL3) == 0x000001, "Wrong alignment on WB_TournamentMode_Main_C_OnInputPressedL3");
static_assert(sizeof(WB_TournamentMode_Main_C_OnInputPressedL3) == 0x000001, "Wrong size on WB_TournamentMode_Main_C_OnInputPressedL3");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputPressedL3, ReturnValue) == 0x000000, "Member 'WB_TournamentMode_Main_C_OnInputPressedL3::ReturnValue' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.OnInputPressedL2
// 0x0001 (0x0001 - 0x0000)
struct WB_TournamentMode_Main_C_OnInputPressedL2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TournamentMode_Main_C_OnInputPressedL2) == 0x000001, "Wrong alignment on WB_TournamentMode_Main_C_OnInputPressedL2");
static_assert(sizeof(WB_TournamentMode_Main_C_OnInputPressedL2) == 0x000001, "Wrong size on WB_TournamentMode_Main_C_OnInputPressedL2");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputPressedL2, ReturnValue) == 0x000000, "Member 'WB_TournamentMode_Main_C_OnInputPressedL2::ReturnValue' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.OnInputPressedL1
// 0x0001 (0x0001 - 0x0000)
struct WB_TournamentMode_Main_C_OnInputPressedL1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TournamentMode_Main_C_OnInputPressedL1) == 0x000001, "Wrong alignment on WB_TournamentMode_Main_C_OnInputPressedL1");
static_assert(sizeof(WB_TournamentMode_Main_C_OnInputPressedL1) == 0x000001, "Wrong size on WB_TournamentMode_Main_C_OnInputPressedL1");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputPressedL1, ReturnValue) == 0x000000, "Member 'WB_TournamentMode_Main_C_OnInputPressedL1::ReturnValue' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.OnInputPressedDown
// 0x0001 (0x0001 - 0x0000)
struct WB_TournamentMode_Main_C_OnInputPressedDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TournamentMode_Main_C_OnInputPressedDown) == 0x000001, "Wrong alignment on WB_TournamentMode_Main_C_OnInputPressedDown");
static_assert(sizeof(WB_TournamentMode_Main_C_OnInputPressedDown) == 0x000001, "Wrong size on WB_TournamentMode_Main_C_OnInputPressedDown");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputPressedDown, ReturnValue) == 0x000000, "Member 'WB_TournamentMode_Main_C_OnInputPressedDown::ReturnValue' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.OnInputPressedDecide
// 0x0001 (0x0001 - 0x0000)
struct WB_TournamentMode_Main_C_OnInputPressedDecide final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TournamentMode_Main_C_OnInputPressedDecide) == 0x000001, "Wrong alignment on WB_TournamentMode_Main_C_OnInputPressedDecide");
static_assert(sizeof(WB_TournamentMode_Main_C_OnInputPressedDecide) == 0x000001, "Wrong size on WB_TournamentMode_Main_C_OnInputPressedDecide");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputPressedDecide, ReturnValue) == 0x000000, "Member 'WB_TournamentMode_Main_C_OnInputPressedDecide::ReturnValue' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.OnInputPressedCancel
// 0x0001 (0x0001 - 0x0000)
struct WB_TournamentMode_Main_C_OnInputPressedCancel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TournamentMode_Main_C_OnInputPressedCancel) == 0x000001, "Wrong alignment on WB_TournamentMode_Main_C_OnInputPressedCancel");
static_assert(sizeof(WB_TournamentMode_Main_C_OnInputPressedCancel) == 0x000001, "Wrong size on WB_TournamentMode_Main_C_OnInputPressedCancel");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputPressedCancel, ReturnValue) == 0x000000, "Member 'WB_TournamentMode_Main_C_OnInputPressedCancel::ReturnValue' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.OnInputMoveRight
// 0x0008 (0x0008 - 0x0000)
struct WB_TournamentMode_Main_C_OnInputMoveRight final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TournamentMode_Main_C_OnInputMoveRight) == 0x000004, "Wrong alignment on WB_TournamentMode_Main_C_OnInputMoveRight");
static_assert(sizeof(WB_TournamentMode_Main_C_OnInputMoveRight) == 0x000008, "Wrong size on WB_TournamentMode_Main_C_OnInputMoveRight");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputMoveRight, Value) == 0x000000, "Member 'WB_TournamentMode_Main_C_OnInputMoveRight::Value' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputMoveRight, ReturnValue) == 0x000004, "Member 'WB_TournamentMode_Main_C_OnInputMoveRight::ReturnValue' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.OnInputMoveForward
// 0x0008 (0x0008 - 0x0000)
struct WB_TournamentMode_Main_C_OnInputMoveForward final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TournamentMode_Main_C_OnInputMoveForward) == 0x000004, "Wrong alignment on WB_TournamentMode_Main_C_OnInputMoveForward");
static_assert(sizeof(WB_TournamentMode_Main_C_OnInputMoveForward) == 0x000008, "Wrong size on WB_TournamentMode_Main_C_OnInputMoveForward");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputMoveForward, Value) == 0x000000, "Member 'WB_TournamentMode_Main_C_OnInputMoveForward::Value' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputMoveForward, ReturnValue) == 0x000004, "Member 'WB_TournamentMode_Main_C_OnInputMoveForward::ReturnValue' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.OnInputLookupRate
// 0x0008 (0x0008 - 0x0000)
struct WB_TournamentMode_Main_C_OnInputLookupRate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TournamentMode_Main_C_OnInputLookupRate) == 0x000004, "Wrong alignment on WB_TournamentMode_Main_C_OnInputLookupRate");
static_assert(sizeof(WB_TournamentMode_Main_C_OnInputLookupRate) == 0x000008, "Wrong size on WB_TournamentMode_Main_C_OnInputLookupRate");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputLookupRate, Value) == 0x000000, "Member 'WB_TournamentMode_Main_C_OnInputLookupRate::Value' has a wrong offset!");
static_assert(offsetof(WB_TournamentMode_Main_C_OnInputLookupRate, ReturnValue) == 0x000004, "Member 'WB_TournamentMode_Main_C_OnInputLookupRate::ReturnValue' has a wrong offset!");

// Function WB_TournamentMode_Main.WB_TournamentMode_Main_C.IsModeless
// 0x0001 (0x0001 - 0x0000)
struct WB_TournamentMode_Main_C_IsModeless final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_TournamentMode_Main_C_IsModeless) == 0x000001, "Wrong alignment on WB_TournamentMode_Main_C_IsModeless");
static_assert(sizeof(WB_TournamentMode_Main_C_IsModeless) == 0x000001, "Wrong size on WB_TournamentMode_Main_C_IsModeless");
static_assert(offsetof(WB_TournamentMode_Main_C_IsModeless, ReturnValue) == 0x000000, "Member 'WB_TournamentMode_Main_C_IsModeless::ReturnValue' has a wrong offset!");

}

