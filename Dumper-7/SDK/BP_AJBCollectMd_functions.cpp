#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBCollectMd

#include "Basic.hpp"

#include "BP_AJBCollectMd_classes.hpp"
#include "BP_AJBCollectMd_parameters.hpp"


namespace SDK
{

// Function BP_AJBCollectMd.BP_AJBCollectMd_C.ExecuteUbergraph_BP_AJBCollectMd
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBCollectMd_C::ExecuteUbergraph_BP_AJBCollectMd(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "ExecuteUbergraph_BP_AJBCollectMd");

	Params::BP_AJBCollectMd_C_ExecuteUbergraph_BP_AJBCollectMd Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.ROC_Rewind
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_AJBInGameCharacter_C*         TargetCharacterBP                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RewindMatchingPlayerIndex                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBCollectMd_C::ROC_Rewind(class ABP_AJBInGameCharacter_C* TargetCharacterBP, int32 RewindMatchingPlayerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "ROC_Rewind");

	Params::BP_AJBCollectMd_C_ROC_Rewind Parms{};

	Parms.TargetCharacterBP = TargetCharacterBP;
	Parms.RewindMatchingPlayerIndex = RewindMatchingPlayerIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.ROS_DebugShowInfo
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBCollectMd_C::ROS_DebugShowInfo(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "ROS_DebugShowInfo");

	Params::BP_AJBCollectMd_C_ROS_DebugShowInfo Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.ROC_Cancel
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void UBP_AJBCollectMd_C::ROC_Cancel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "ROC_Cancel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.OnLongPressInteractBegan
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InteractActor_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBCollectMd_C::OnLongPressInteractBegan(class AActor* InteractActor_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "OnLongPressInteractBegan");

	Params::BP_AJBCollectMd_C_OnLongPressInteractBegan Parms{};

	Parms.InteractActor_0 = InteractActor_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.OnSetViewTargetToNewSpectator_Local
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBCollectMd_C::OnSetViewTargetToNewSpectator_Local()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "OnSetViewTargetToNewSpectator_Local");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.ResetKeepServer
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBCollectMd_C::ResetKeepServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "ResetKeepServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.MC_Reset
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void UBP_AJBCollectMd_C::MC_Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "MC_Reset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.ResetServer
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBCollectMd_C::ResetServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "ResetServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.OnPassiveAdded
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              AddCondition                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayTag&              SecondTag                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void UBP_AJBCollectMd_C::OnPassiveAdded(const struct FGameplayTag& AddCondition, const struct FGameplayTag& SecondTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "OnPassiveAdded");

	Params::BP_AJBCollectMd_C_OnPassiveAdded Parms{};

	Parms.AddCondition = std::move(AddCondition);
	Parms.SecondTag = std::move(SecondTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.ROC_SendEffectiveCount
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EffectiveCount                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBCollectMd_C::ROC_SendEffectiveCount(int32 EffectiveCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "ROC_SendEffectiveCount");

	Params::BP_AJBCollectMd_C_ROC_SendEffectiveCount Parms{};

	Parms.EffectiveCount = EffectiveCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.OnBecomeLastSurvivor
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBitesTheDust                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBCollectMd_C::OnBecomeLastSurvivor(bool bBitesTheDust)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "OnBecomeLastSurvivor");

	Params::BP_AJBCollectMd_C_OnBecomeLastSurvivor Parms{};

	Parms.bBitesTheDust = bBitesTheDust;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.OnCharacterDead
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DeadActor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBCollectMd_C::OnCharacterDead(const struct FGameplayTag& DamageType, class AActor* DeadActor, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "OnCharacterDead");

	Params::BP_AJBCollectMd_C_OnCharacterDead Parms{};

	Parms.DamageType = std::move(DamageType);
	Parms.DeadActor = DeadActor;
	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.MC_MDKeepChanged
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WBIndex                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bKeep                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBCollectMd_C::MC_MDKeepChanged(int32 WBIndex, bool bKeep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "MC_MDKeepChanged");

	Params::BP_AJBCollectMd_C_MC_MDKeepChanged Parms{};

	Parms.WBIndex = WBIndex;
	Parms.bKeep = bKeep;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.ROS_MDKeepChanged
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WBIndex                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bKeep                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBCollectMd_C::ROS_MDKeepChanged(int32 WBIndex, bool bKeep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "ROS_MDKeepChanged");

	Params::BP_AJBCollectMd_C_ROS_MDKeepChanged Parms{};

	Parms.WBIndex = WBIndex;
	Parms.bKeep = bKeep;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.OnMDKeepChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WBIndex                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bKeep                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBCollectMd_C::OnMDKeepChanged(int32 WBIndex, bool bKeep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "OnMDKeepChanged");

	Params::BP_AJBCollectMd_C_OnMDKeepChanged Parms{};

	Parms.WBIndex = WBIndex;
	Parms.bKeep = bKeep;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.OnLongPressInteractEnded
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSuccess                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bForceCancel                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AActor*                           InteractActor_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFlag01                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBCollectMd_C::OnLongPressInteractEnded(bool bSuccess, bool bForceCancel, class AActor* InteractActor_0, bool bFlag01)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "OnLongPressInteractEnded");

	Params::BP_AJBCollectMd_C_OnLongPressInteractEnded Parms{};

	Parms.bSuccess = bSuccess;
	Parms.bForceCancel = bForceCancel;
	Parms.InteractActor_0 = InteractActor_0;
	Parms.bFlag01 = bFlag01;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.PlayLongInteractSE
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBCollectMd_C::PlayLongInteractSE()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "PlayLongInteractSE");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.UpdateErrorTypeUI
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   ErrorType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBCollectMd_C::UpdateErrorTypeUI(uint8 ErrorType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "UpdateErrorTypeUI");

	Params::BP_AJBCollectMd_C_UpdateErrorTypeUI Parms{};

	Parms.ErrorType = ErrorType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_AJBCollectMd_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBCollectMd_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "ReceiveTick");

	Params::BP_AJBCollectMd_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.MC_CollectMd
// (Net, NetReliable, NetMulticast, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<struct FST_CollectMdTargetInfo>&TargetList                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// const TArray<struct FST_CollectMdTargetInfo>&PrevTargetList                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int32                                   WBIndex                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAJBSkillType                           SkillType_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBCollectMd_C::MC_CollectMd(const TArray<struct FST_CollectMdTargetInfo>& TargetList, const TArray<struct FST_CollectMdTargetInfo>& PrevTargetList, int32 WBIndex, EAJBSkillType SkillType_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "MC_CollectMd");

	Params::BP_AJBCollectMd_C_MC_CollectMd Parms{};

	Parms.TargetList = std::move(TargetList);
	Parms.PrevTargetList = std::move(PrevTargetList);
	Parms.WBIndex = WBIndex;
	Parms.SkillType_0 = SkillType_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.CollectMdServer
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EAJBSkillType                           SkillType_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FST_CollectMdTargetInfo&   TargetInfo                                             (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_AJBCollectMd_C::CollectMdServer(EAJBSkillType SkillType_0, const struct FST_CollectMdTargetInfo& TargetInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "CollectMdServer");

	Params::BP_AJBCollectMd_C_CollectMdServer Parms{};

	Parms.SkillType_0 = SkillType_0;
	Parms.TargetInfo = std::move(TargetInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.TrySpawnCollectMdEmphasizeActor
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_AJBCollectMd_C::TrySpawnCollectMdEmphasizeActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "TrySpawnCollectMdEmphasizeActor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.BeginInteract
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBCollectMd_C::BeginInteract(bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "BeginInteract");

	Params::BP_AJBCollectMd_C_BeginInteract Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.GetPriority
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32*                                  Priority                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBCollectMd_C::GetPriority(int32* Priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "GetPriority");

	Params::BP_AJBCollectMd_C_GetPriority Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Priority != nullptr)
		*Priority = Parms.Priority;
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.GetText
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FText*                            Text                                                   (Parm, OutParm)

void UBP_AJBCollectMd_C::GetText(bool* bSuccess, class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "GetText");

	Params::BP_AJBCollectMd_C_GetText Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.CheckInteractable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_AJBInGameCharacter_C*         OperatorCharacter                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BaseTraceLength                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bInteractable                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBCollectMd_C::CheckInteractable(class ABP_AJBInGameCharacter_C* OperatorCharacter, class AActor* TargetActor, float BaseTraceLength, bool* bInteractable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "CheckInteractable");

	Params::BP_AJBCollectMd_C_CheckInteractable Parms{};

	Parms.OperatorCharacter = OperatorCharacter;
	Parms.TargetActor = TargetActor;
	Parms.BaseTraceLength = BaseTraceLength;

	UObject::ProcessEvent(Func, &Parms);

	if (bInteractable != nullptr)
		*bInteractable = Parms.bInteractable;
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.SelectMd
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   bShouldUpdate                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32*                                  WBIndex                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBCollectMd_C::SelectMd(bool* bShouldUpdate, int32* WBIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "SelectMd");

	Params::BP_AJBCollectMd_C_SelectMd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bShouldUpdate != nullptr)
		*bShouldUpdate = Parms.bShouldUpdate;

	if (WBIndex != nullptr)
		*WBIndex = Parms.WBIndex;
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.CheckKeepNum
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32*                                  KeepNum                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBCollectMd_C::CheckKeepNum(int32* KeepNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "CheckKeepNum");

	Params::BP_AJBCollectMd_C_CheckKeepNum Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (KeepNum != nullptr)
		*KeepNum = Parms.KeepNum;
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.CheckKeepMax
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   bKeepMax                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBCollectMd_C::CheckKeepMax(bool* bKeepMax)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "CheckKeepMax");

	Params::BP_AJBCollectMd_C_CheckKeepMax Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bKeepMax != nullptr)
		*bKeepMax = Parms.bKeepMax;
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.CheckCollectNum
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32*                                  CollectNum                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBCollectMd_C::CheckCollectNum(int32* CollectNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "CheckCollectNum");

	Params::BP_AJBCollectMd_C_CheckCollectNum Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CollectNum != nullptr)
		*CollectNum = Parms.CollectNum;
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.GetCollectLimit
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32*                                  CollectLimit                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBCollectMd_C::GetCollectLimit(int32* CollectLimit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "GetCollectLimit");

	Params::BP_AJBCollectMd_C_GetCollectLimit Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CollectLimit != nullptr)
		*CollectLimit = Parms.CollectLimit;
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.UpdateTargetInfoKeep
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WBIndex                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bKeep                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBCollectMd_C::UpdateTargetInfoKeep(int32 WBIndex, bool bKeep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "UpdateTargetInfoKeep");

	Params::BP_AJBCollectMd_C_UpdateTargetInfoKeep Parms{};

	Parms.WBIndex = WBIndex;
	Parms.bKeep = bKeep;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.PossibleMove
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FST_CollectMdTargetInfo>& InCollectInfoList                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bPossibleMove                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBCollectMd_C::PossibleMove(TArray<struct FST_CollectMdTargetInfo>& InCollectInfoList, int32 Index_0, bool* bPossibleMove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "PossibleMove");

	Params::BP_AJBCollectMd_C_PossibleMove Parms{};

	Parms.InCollectInfoList = std::move(InCollectInfoList);
	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);

	InCollectInfoList = std::move(Parms.InCollectInfoList);

	if (bPossibleMove != nullptr)
		*bPossibleMove = Parms.bPossibleMove;
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.PossibleMoveKeepCheck
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FST_CollectMdTargetInfo>& InCollectInfoList                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bPossibleMove                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBCollectMd_C::PossibleMoveKeepCheck(TArray<struct FST_CollectMdTargetInfo>& InCollectInfoList, int32 Index_0, bool* bPossibleMove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "PossibleMoveKeepCheck");

	Params::BP_AJBCollectMd_C_PossibleMoveKeepCheck Parms{};

	Parms.InCollectInfoList = std::move(InCollectInfoList);
	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);

	InCollectInfoList = std::move(Parms.InCollectInfoList);

	if (bPossibleMove != nullptr)
		*bPossibleMove = Parms.bPossibleMove;
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.UpdateCollectedDiscNumMax
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_AJBCollectMd_C::UpdateCollectedDiscNumMax()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "UpdateCollectedDiscNumMax");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.UpdateKeepInfo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WBIndex                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bKeep                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBCollectMd_C::UpdateKeepInfo(int32 WBIndex, bool bKeep)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "UpdateKeepInfo");

	Params::BP_AJBCollectMd_C_UpdateKeepInfo Parms{};

	Parms.WBIndex = WBIndex;
	Parms.bKeep = bKeep;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.RegisterCollectedCharacterBP
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_AJBInGameCharacter_C*         CharacterBP                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBCollectMd_C::RegisterCollectedCharacterBP(class ABP_AJBInGameCharacter_C* CharacterBP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "RegisterCollectedCharacterBP");

	Params::BP_AJBCollectMd_C_RegisterCollectedCharacterBP Parms{};

	Parms.CharacterBP = CharacterBP;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBCollectMd.BP_AJBCollectMd_C.EnableCollectingCharacterBP
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_AJBInGameCharacter_C*         CharacterBP                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBCollectMd_C::EnableCollectingCharacterBP(class ABP_AJBInGameCharacter_C* CharacterBP, bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBCollectMd_C", "EnableCollectingCharacterBP");

	Params::BP_AJBCollectMd_C_EnableCollectingCharacterBP Parms{};

	Parms.CharacterBP = CharacterBP;
	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}

}

