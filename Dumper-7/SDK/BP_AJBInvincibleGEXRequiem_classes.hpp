#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInvincibleGEXRequiem

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "AJB_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_AJBPassiveSkillBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBInvincibleGEXRequiem.BP_AJBInvincibleGEXRequiem_C
// 0x0068 (0x0278 - 0x0210)
class UBP_AJBInvincibleGEXRequiem_C final : public UBP_AJBPassiveSkillBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBInvincibleGEXRequiem_C;       // 0x0210(0x0008)(Transient, DuplicateTransient)
	class ABP_AJBInGameParticleEffect_C*          StartParticleEffectOnGEX;                          // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          LoopParticleEffectOnGEX;                           // 0x0220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           StandStartParticleTag;                             // 0x0228(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           StandLoopParticleTag;                              // 0x0230(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UShapeComponent*                        BlockCollision;                                    // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           StandEndParticleTag;                               // 0x0240(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           NullificationParticleTag;                          // 0x0248(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           DisableImpulseDamageParticleTag;                   // 0x0250(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           InactivateSETag;                                   // 0x0258(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           BlockingSETag;                                     // 0x0260(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CacheHitLocation;                                  // 0x0268(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBInvincibleGEXRequiem(int32 EntryPoint);
	void SetCollisionEnabled(bool bEnable);
	void OnBlocking(const struct FVector& HitLocation, bool bImpulseDamage);
	void BeginOverlap_BlockCollision(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnBeginOverlap_BlockCollision(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool FromSweep, const struct FHitResult& SweepResult);
	void ChangeInvincibleStatus(bool bEnable);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void OnContinuedParticleInactivated();
	void OnContinuedParticleActivated();
	void SpawnEndParticle();
	void TryDestroyParticleOnGEX();
	void GetCauserOwnerCharacterBP(class ABP_AJBInGameCharacter_C** CharacterBP);
	void GetPassiveSkillTag(struct FGameplayTag* PassiveSkillTag);
	void GetDuration(float* Duration);
	void ReceiveBeginPlay();
	void OnActionInactivate(bool bTriggeredByStand);
	void OnActionActivate(bool bTriggeredByStand);
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBInvincibleGEXRequiem_C">();
	}
	static class UBP_AJBInvincibleGEXRequiem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBInvincibleGEXRequiem_C>();
	}
};
static_assert(alignof(UBP_AJBInvincibleGEXRequiem_C) == 0x000008, "Wrong alignment on UBP_AJBInvincibleGEXRequiem_C");
static_assert(sizeof(UBP_AJBInvincibleGEXRequiem_C) == 0x000278, "Wrong size on UBP_AJBInvincibleGEXRequiem_C");
static_assert(offsetof(UBP_AJBInvincibleGEXRequiem_C, UberGraphFrame_BP_AJBInvincibleGEXRequiem_C) == 0x000210, "Member 'UBP_AJBInvincibleGEXRequiem_C::UberGraphFrame_BP_AJBInvincibleGEXRequiem_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBInvincibleGEXRequiem_C, StartParticleEffectOnGEX) == 0x000218, "Member 'UBP_AJBInvincibleGEXRequiem_C::StartParticleEffectOnGEX' has a wrong offset!");
static_assert(offsetof(UBP_AJBInvincibleGEXRequiem_C, LoopParticleEffectOnGEX) == 0x000220, "Member 'UBP_AJBInvincibleGEXRequiem_C::LoopParticleEffectOnGEX' has a wrong offset!");
static_assert(offsetof(UBP_AJBInvincibleGEXRequiem_C, StandStartParticleTag) == 0x000228, "Member 'UBP_AJBInvincibleGEXRequiem_C::StandStartParticleTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBInvincibleGEXRequiem_C, StandLoopParticleTag) == 0x000230, "Member 'UBP_AJBInvincibleGEXRequiem_C::StandLoopParticleTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBInvincibleGEXRequiem_C, BlockCollision) == 0x000238, "Member 'UBP_AJBInvincibleGEXRequiem_C::BlockCollision' has a wrong offset!");
static_assert(offsetof(UBP_AJBInvincibleGEXRequiem_C, StandEndParticleTag) == 0x000240, "Member 'UBP_AJBInvincibleGEXRequiem_C::StandEndParticleTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBInvincibleGEXRequiem_C, NullificationParticleTag) == 0x000248, "Member 'UBP_AJBInvincibleGEXRequiem_C::NullificationParticleTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBInvincibleGEXRequiem_C, DisableImpulseDamageParticleTag) == 0x000250, "Member 'UBP_AJBInvincibleGEXRequiem_C::DisableImpulseDamageParticleTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBInvincibleGEXRequiem_C, InactivateSETag) == 0x000258, "Member 'UBP_AJBInvincibleGEXRequiem_C::InactivateSETag' has a wrong offset!");
static_assert(offsetof(UBP_AJBInvincibleGEXRequiem_C, BlockingSETag) == 0x000260, "Member 'UBP_AJBInvincibleGEXRequiem_C::BlockingSETag' has a wrong offset!");
static_assert(offsetof(UBP_AJBInvincibleGEXRequiem_C, CacheHitLocation) == 0x000268, "Member 'UBP_AJBInvincibleGEXRequiem_C::CacheHitLocation' has a wrong offset!");

}

