#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BI_AJBInGameCharacterProperty

#include "Basic.hpp"

#include "AJB_structs.hpp"


namespace SDK::Params
{

// Function BI_AJBInGameCharacterProperty.BI_AJBInGameCharacterProperty_C.SetSerialNumber
// 0x0004 (0x0004 - 0x0000)
struct BI_AJBInGameCharacterProperty_C_SetSerialNumber final
{
public:
	int32                                         SerialNumber;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BI_AJBInGameCharacterProperty_C_SetSerialNumber) == 0x000004, "Wrong alignment on BI_AJBInGameCharacterProperty_C_SetSerialNumber");
static_assert(sizeof(BI_AJBInGameCharacterProperty_C_SetSerialNumber) == 0x000004, "Wrong size on BI_AJBInGameCharacterProperty_C_SetSerialNumber");
static_assert(offsetof(BI_AJBInGameCharacterProperty_C_SetSerialNumber, SerialNumber) == 0x000000, "Member 'BI_AJBInGameCharacterProperty_C_SetSerialNumber::SerialNumber' has a wrong offset!");

// Function BI_AJBInGameCharacterProperty.BI_AJBInGameCharacterProperty_C.GetPropertyOwnerCharacterBP
// 0x0008 (0x0008 - 0x0000)
struct BI_AJBInGameCharacterProperty_C_GetPropertyOwnerCharacterBP final
{
public:
	class ABP_AJBInGameCharacter_C*               CharacterBP;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BI_AJBInGameCharacterProperty_C_GetPropertyOwnerCharacterBP) == 0x000008, "Wrong alignment on BI_AJBInGameCharacterProperty_C_GetPropertyOwnerCharacterBP");
static_assert(sizeof(BI_AJBInGameCharacterProperty_C_GetPropertyOwnerCharacterBP) == 0x000008, "Wrong size on BI_AJBInGameCharacterProperty_C_GetPropertyOwnerCharacterBP");
static_assert(offsetof(BI_AJBInGameCharacterProperty_C_GetPropertyOwnerCharacterBP, CharacterBP) == 0x000000, "Member 'BI_AJBInGameCharacterProperty_C_GetPropertyOwnerCharacterBP::CharacterBP' has a wrong offset!");

// Function BI_AJBInGameCharacterProperty.BI_AJBInGameCharacterProperty_C.GetPropertyType
// 0x0001 (0x0001 - 0x0000)
struct BI_AJBInGameCharacterProperty_C_GetPropertyType final
{
public:
	EAJBCharacterPropertyType                     PropertyType;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BI_AJBInGameCharacterProperty_C_GetPropertyType) == 0x000001, "Wrong alignment on BI_AJBInGameCharacterProperty_C_GetPropertyType");
static_assert(sizeof(BI_AJBInGameCharacterProperty_C_GetPropertyType) == 0x000001, "Wrong size on BI_AJBInGameCharacterProperty_C_GetPropertyType");
static_assert(offsetof(BI_AJBInGameCharacterProperty_C_GetPropertyType, PropertyType) == 0x000000, "Member 'BI_AJBInGameCharacterProperty_C_GetPropertyType::PropertyType' has a wrong offset!");

// Function BI_AJBInGameCharacterProperty.BI_AJBInGameCharacterProperty_C.ChangeEnableServer
// 0x0001 (0x0001 - 0x0000)
struct BI_AJBInGameCharacterProperty_C_ChangeEnableServer final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_AJBInGameCharacterProperty_C_ChangeEnableServer) == 0x000001, "Wrong alignment on BI_AJBInGameCharacterProperty_C_ChangeEnableServer");
static_assert(sizeof(BI_AJBInGameCharacterProperty_C_ChangeEnableServer) == 0x000001, "Wrong size on BI_AJBInGameCharacterProperty_C_ChangeEnableServer");
static_assert(offsetof(BI_AJBInGameCharacterProperty_C_ChangeEnableServer, bEnable) == 0x000000, "Member 'BI_AJBInGameCharacterProperty_C_ChangeEnableServer::bEnable' has a wrong offset!");

// Function BI_AJBInGameCharacterProperty.BI_AJBInGameCharacterProperty_C.ChangeEnableCore
// 0x0001 (0x0001 - 0x0000)
struct BI_AJBInGameCharacterProperty_C_ChangeEnableCore final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_AJBInGameCharacterProperty_C_ChangeEnableCore) == 0x000001, "Wrong alignment on BI_AJBInGameCharacterProperty_C_ChangeEnableCore");
static_assert(sizeof(BI_AJBInGameCharacterProperty_C_ChangeEnableCore) == 0x000001, "Wrong size on BI_AJBInGameCharacterProperty_C_ChangeEnableCore");
static_assert(offsetof(BI_AJBInGameCharacterProperty_C_ChangeEnableCore, bEnable) == 0x000000, "Member 'BI_AJBInGameCharacterProperty_C_ChangeEnableCore::bEnable' has a wrong offset!");

// Function BI_AJBInGameCharacterProperty.BI_AJBInGameCharacterProperty_C.ChangeMeshVisibleServer
// 0x0001 (0x0001 - 0x0000)
struct BI_AJBInGameCharacterProperty_C_ChangeMeshVisibleServer final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_AJBInGameCharacterProperty_C_ChangeMeshVisibleServer) == 0x000001, "Wrong alignment on BI_AJBInGameCharacterProperty_C_ChangeMeshVisibleServer");
static_assert(sizeof(BI_AJBInGameCharacterProperty_C_ChangeMeshVisibleServer) == 0x000001, "Wrong size on BI_AJBInGameCharacterProperty_C_ChangeMeshVisibleServer");
static_assert(offsetof(BI_AJBInGameCharacterProperty_C_ChangeMeshVisibleServer, bNewVisibility) == 0x000000, "Member 'BI_AJBInGameCharacterProperty_C_ChangeMeshVisibleServer::bNewVisibility' has a wrong offset!");

// Function BI_AJBInGameCharacterProperty.BI_AJBInGameCharacterProperty_C.ChangeMeshVisibleCore
// 0x0001 (0x0001 - 0x0000)
struct BI_AJBInGameCharacterProperty_C_ChangeMeshVisibleCore final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_AJBInGameCharacterProperty_C_ChangeMeshVisibleCore) == 0x000001, "Wrong alignment on BI_AJBInGameCharacterProperty_C_ChangeMeshVisibleCore");
static_assert(sizeof(BI_AJBInGameCharacterProperty_C_ChangeMeshVisibleCore) == 0x000001, "Wrong size on BI_AJBInGameCharacterProperty_C_ChangeMeshVisibleCore");
static_assert(offsetof(BI_AJBInGameCharacterProperty_C_ChangeMeshVisibleCore, bNewVisibility) == 0x000000, "Member 'BI_AJBInGameCharacterProperty_C_ChangeMeshVisibleCore::bNewVisibility' has a wrong offset!");

// Function BI_AJBInGameCharacterProperty.BI_AJBInGameCharacterProperty_C.TracableByAI
// 0x0001 (0x0001 - 0x0000)
struct BI_AJBInGameCharacterProperty_C_TracableByAI final
{
public:
	bool                                          bTracable;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_AJBInGameCharacterProperty_C_TracableByAI) == 0x000001, "Wrong alignment on BI_AJBInGameCharacterProperty_C_TracableByAI");
static_assert(sizeof(BI_AJBInGameCharacterProperty_C_TracableByAI) == 0x000001, "Wrong size on BI_AJBInGameCharacterProperty_C_TracableByAI");
static_assert(offsetof(BI_AJBInGameCharacterProperty_C_TracableByAI, bTracable) == 0x000000, "Member 'BI_AJBInGameCharacterProperty_C_TracableByAI::bTracable' has a wrong offset!");

// Function BI_AJBInGameCharacterProperty.BI_AJBInGameCharacterProperty_C.DetectableByTrap
// 0x0001 (0x0001 - 0x0000)
struct BI_AJBInGameCharacterProperty_C_DetectableByTrap final
{
public:
	bool                                          bDetectable;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_AJBInGameCharacterProperty_C_DetectableByTrap) == 0x000001, "Wrong alignment on BI_AJBInGameCharacterProperty_C_DetectableByTrap");
static_assert(sizeof(BI_AJBInGameCharacterProperty_C_DetectableByTrap) == 0x000001, "Wrong size on BI_AJBInGameCharacterProperty_C_DetectableByTrap");
static_assert(offsetof(BI_AJBInGameCharacterProperty_C_DetectableByTrap, bDetectable) == 0x000000, "Member 'BI_AJBInGameCharacterProperty_C_DetectableByTrap::bDetectable' has a wrong offset!");

// Function BI_AJBInGameCharacterProperty.BI_AJBInGameCharacterProperty_C.IsDetectableByDirectAttackGuide
// 0x0001 (0x0001 - 0x0000)
struct BI_AJBInGameCharacterProperty_C_IsDetectableByDirectAttackGuide final
{
public:
	bool                                          bIsDetectable;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_AJBInGameCharacterProperty_C_IsDetectableByDirectAttackGuide) == 0x000001, "Wrong alignment on BI_AJBInGameCharacterProperty_C_IsDetectableByDirectAttackGuide");
static_assert(sizeof(BI_AJBInGameCharacterProperty_C_IsDetectableByDirectAttackGuide) == 0x000001, "Wrong size on BI_AJBInGameCharacterProperty_C_IsDetectableByDirectAttackGuide");
static_assert(offsetof(BI_AJBInGameCharacterProperty_C_IsDetectableByDirectAttackGuide, bIsDetectable) == 0x000000, "Member 'BI_AJBInGameCharacterProperty_C_IsDetectableByDirectAttackGuide::bIsDetectable' has a wrong offset!");

// Function BI_AJBInGameCharacterProperty.BI_AJBInGameCharacterProperty_C.TreatAsCharacterBySpecialProjectile
// 0x0001 (0x0001 - 0x0000)
struct BI_AJBInGameCharacterProperty_C_TreatAsCharacterBySpecialProjectile final
{
public:
	bool                                          bTreat;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_AJBInGameCharacterProperty_C_TreatAsCharacterBySpecialProjectile) == 0x000001, "Wrong alignment on BI_AJBInGameCharacterProperty_C_TreatAsCharacterBySpecialProjectile");
static_assert(sizeof(BI_AJBInGameCharacterProperty_C_TreatAsCharacterBySpecialProjectile) == 0x000001, "Wrong size on BI_AJBInGameCharacterProperty_C_TreatAsCharacterBySpecialProjectile");
static_assert(offsetof(BI_AJBInGameCharacterProperty_C_TreatAsCharacterBySpecialProjectile, bTreat) == 0x000000, "Member 'BI_AJBInGameCharacterProperty_C_TreatAsCharacterBySpecialProjectile::bTreat' has a wrong offset!");

// Function BI_AJBInGameCharacterProperty.BI_AJBInGameCharacterProperty_C.IsTargetCO2Scan
// 0x0001 (0x0001 - 0x0000)
struct BI_AJBInGameCharacterProperty_C_IsTargetCO2Scan final
{
public:
	bool                                          IsTarget;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_AJBInGameCharacterProperty_C_IsTargetCO2Scan) == 0x000001, "Wrong alignment on BI_AJBInGameCharacterProperty_C_IsTargetCO2Scan");
static_assert(sizeof(BI_AJBInGameCharacterProperty_C_IsTargetCO2Scan) == 0x000001, "Wrong size on BI_AJBInGameCharacterProperty_C_IsTargetCO2Scan");
static_assert(offsetof(BI_AJBInGameCharacterProperty_C_IsTargetCO2Scan, IsTarget) == 0x000000, "Member 'BI_AJBInGameCharacterProperty_C_IsTargetCO2Scan::IsTarget' has a wrong offset!");

// Function BI_AJBInGameCharacterProperty.BI_AJBInGameCharacterProperty_C.IsTargetClourBarrier
// 0x0001 (0x0001 - 0x0000)
struct BI_AJBInGameCharacterProperty_C_IsTargetClourBarrier final
{
public:
	bool                                          IsTarget;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_AJBInGameCharacterProperty_C_IsTargetClourBarrier) == 0x000001, "Wrong alignment on BI_AJBInGameCharacterProperty_C_IsTargetClourBarrier");
static_assert(sizeof(BI_AJBInGameCharacterProperty_C_IsTargetClourBarrier) == 0x000001, "Wrong size on BI_AJBInGameCharacterProperty_C_IsTargetClourBarrier");
static_assert(offsetof(BI_AJBInGameCharacterProperty_C_IsTargetClourBarrier, IsTarget) == 0x000000, "Member 'BI_AJBInGameCharacterProperty_C_IsTargetClourBarrier::IsTarget' has a wrong offset!");

// Function BI_AJBInGameCharacterProperty.BI_AJBInGameCharacterProperty_C.IsTargetOverGrow
// 0x0001 (0x0001 - 0x0000)
struct BI_AJBInGameCharacterProperty_C_IsTargetOverGrow final
{
public:
	bool                                          IsTarget;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_AJBInGameCharacterProperty_C_IsTargetOverGrow) == 0x000001, "Wrong alignment on BI_AJBInGameCharacterProperty_C_IsTargetOverGrow");
static_assert(sizeof(BI_AJBInGameCharacterProperty_C_IsTargetOverGrow) == 0x000001, "Wrong size on BI_AJBInGameCharacterProperty_C_IsTargetOverGrow");
static_assert(offsetof(BI_AJBInGameCharacterProperty_C_IsTargetOverGrow, IsTarget) == 0x000000, "Member 'BI_AJBInGameCharacterProperty_C_IsTargetOverGrow::IsTarget' has a wrong offset!");

// Function BI_AJBInGameCharacterProperty.BI_AJBInGameCharacterProperty_C.IsPlayOwnerVoiceOnGetItem
// 0x0001 (0x0001 - 0x0000)
struct BI_AJBInGameCharacterProperty_C_IsPlayOwnerVoiceOnGetItem final
{
public:
	bool                                          bIsPlay;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_AJBInGameCharacterProperty_C_IsPlayOwnerVoiceOnGetItem) == 0x000001, "Wrong alignment on BI_AJBInGameCharacterProperty_C_IsPlayOwnerVoiceOnGetItem");
static_assert(sizeof(BI_AJBInGameCharacterProperty_C_IsPlayOwnerVoiceOnGetItem) == 0x000001, "Wrong size on BI_AJBInGameCharacterProperty_C_IsPlayOwnerVoiceOnGetItem");
static_assert(offsetof(BI_AJBInGameCharacterProperty_C_IsPlayOwnerVoiceOnGetItem, bIsPlay) == 0x000000, "Member 'BI_AJBInGameCharacterProperty_C_IsPlayOwnerVoiceOnGetItem::bIsPlay' has a wrong offset!");

// Function BI_AJBInGameCharacterProperty.BI_AJBInGameCharacterProperty_C.IsPlayOwnerVoiceOnJump
// 0x0001 (0x0001 - 0x0000)
struct BI_AJBInGameCharacterProperty_C_IsPlayOwnerVoiceOnJump final
{
public:
	bool                                          bIsPlay;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_AJBInGameCharacterProperty_C_IsPlayOwnerVoiceOnJump) == 0x000001, "Wrong alignment on BI_AJBInGameCharacterProperty_C_IsPlayOwnerVoiceOnJump");
static_assert(sizeof(BI_AJBInGameCharacterProperty_C_IsPlayOwnerVoiceOnJump) == 0x000001, "Wrong size on BI_AJBInGameCharacterProperty_C_IsPlayOwnerVoiceOnJump");
static_assert(offsetof(BI_AJBInGameCharacterProperty_C_IsPlayOwnerVoiceOnJump, bIsPlay) == 0x000000, "Member 'BI_AJBInGameCharacterProperty_C_IsPlayOwnerVoiceOnJump::bIsPlay' has a wrong offset!");

// Function BI_AJBInGameCharacterProperty.BI_AJBInGameCharacterProperty_C.IsPlayOwnerVoiceOnPassThruEnter
// 0x0001 (0x0001 - 0x0000)
struct BI_AJBInGameCharacterProperty_C_IsPlayOwnerVoiceOnPassThruEnter final
{
public:
	bool                                          bIsPlay;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_AJBInGameCharacterProperty_C_IsPlayOwnerVoiceOnPassThruEnter) == 0x000001, "Wrong alignment on BI_AJBInGameCharacterProperty_C_IsPlayOwnerVoiceOnPassThruEnter");
static_assert(sizeof(BI_AJBInGameCharacterProperty_C_IsPlayOwnerVoiceOnPassThruEnter) == 0x000001, "Wrong size on BI_AJBInGameCharacterProperty_C_IsPlayOwnerVoiceOnPassThruEnter");
static_assert(offsetof(BI_AJBInGameCharacterProperty_C_IsPlayOwnerVoiceOnPassThruEnter, bIsPlay) == 0x000000, "Member 'BI_AJBInGameCharacterProperty_C_IsPlayOwnerVoiceOnPassThruEnter::bIsPlay' has a wrong offset!");

}

