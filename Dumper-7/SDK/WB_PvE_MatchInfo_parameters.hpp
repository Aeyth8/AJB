#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_PvE_MatchInfo

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "E_AJBInGamePvE_GamePhase_structs.hpp"
#include "UMG_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function WB_PvE_MatchInfo.WB_PvE_MatchInfo_C.ExecuteUbergraph_WB_PvE_MatchInfo
// 0x00F8 (0x00F8 - 0x0000)
struct WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsVisible;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           CallFunc_RequestWwiseEventOnLocal_AkComponent;     // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           CallFunc_RequestWwiseEventOnLocal_AkComponent1;    // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_WaveIndex;                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_WaveDuration;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_MakeEndWaveText_EndWaveText;              // 0x0028(0x0018)()
	struct FGameplayTag                           CallFunc_GetPvEEndWaveDBIVoiceTag_ReturnValue;     // 0x0040(0x0008)(NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           CallFunc_RequestWwiseEventOnLocal_AkComponent2;    // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_WaveIndex1;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_WaveDuration1;                  // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_MakeBeginWaveText_BeginWaveText;          // 0x0058(0x0018)()
	struct FGameplayTag                           CallFunc_GetPvEBeginWaveDBIVoiceTag_ReturnValue;   // 0x0070(0x0008)(NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           CallFunc_RequestWwiseEventOnLocal_AkComponent3;    // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0080(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate1;             // 0x0098(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         CallFunc_GetCurrentAnimatedScore_AnimatedScore;    // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate2;             // 0x00B0(0x0010)(ZeroConstructor, NoDestructor)
	float                                         K2Node_CustomEvent_DeltaTime;                      // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate3;             // 0x00C8(0x0010)(ZeroConstructor, NoDestructor)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_Value;                          // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable1;                               // 0x00E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E6[0x2];                                       // 0x00E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCurrentAnimatedScore_AnimatedScore1;   // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x00ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EE[0x2];                                       // 0x00EE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo) == 0x000008, "Wrong alignment on WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo");
static_assert(sizeof(WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo) == 0x0000F8, "Wrong size on WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo");
static_assert(offsetof(WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo, EntryPoint) == 0x000000, "Member 'WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo, Temp_bool_Variable) == 0x000004, "Member 'WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo, K2Node_CustomEvent_IsVisible) == 0x000005, "Member 'WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo::K2Node_CustomEvent_IsVisible' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo, CallFunc_RequestWwiseEventOnLocal_AkComponent) == 0x000008, "Member 'WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo::CallFunc_RequestWwiseEventOnLocal_AkComponent' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo, CallFunc_RequestWwiseEventOnLocal_AkComponent1) == 0x000010, "Member 'WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo::CallFunc_RequestWwiseEventOnLocal_AkComponent1' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo, K2Node_CustomEvent_WaveIndex) == 0x000018, "Member 'WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo::K2Node_CustomEvent_WaveIndex' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo, K2Node_CustomEvent_WaveDuration) == 0x00001C, "Member 'WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo::K2Node_CustomEvent_WaveDuration' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo, Temp_bool_Has_Been_Initd_Variable) == 0x000020, "Member 'WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo, CallFunc_MakeEndWaveText_EndWaveText) == 0x000028, "Member 'WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo::CallFunc_MakeEndWaveText_EndWaveText' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo, CallFunc_GetPvEEndWaveDBIVoiceTag_ReturnValue) == 0x000040, "Member 'WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo::CallFunc_GetPvEEndWaveDBIVoiceTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo, CallFunc_RequestWwiseEventOnLocal_AkComponent2) == 0x000048, "Member 'WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo::CallFunc_RequestWwiseEventOnLocal_AkComponent2' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo, K2Node_CustomEvent_WaveIndex1) == 0x000050, "Member 'WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo::K2Node_CustomEvent_WaveIndex1' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo, K2Node_CustomEvent_WaveDuration1) == 0x000054, "Member 'WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo::K2Node_CustomEvent_WaveDuration1' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo, CallFunc_MakeBeginWaveText_BeginWaveText) == 0x000058, "Member 'WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo::CallFunc_MakeBeginWaveText_BeginWaveText' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo, CallFunc_GetPvEBeginWaveDBIVoiceTag_ReturnValue) == 0x000070, "Member 'WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo::CallFunc_GetPvEBeginWaveDBIVoiceTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo, CallFunc_RequestWwiseEventOnLocal_AkComponent3) == 0x000078, "Member 'WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo::CallFunc_RequestWwiseEventOnLocal_AkComponent3' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo, K2Node_CreateDelegate_OutputDelegate) == 0x000080, "Member 'WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo, CallFunc_Less_FloatFloat_ReturnValue) == 0x000090, "Member 'WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo, K2Node_CreateDelegate_OutputDelegate1) == 0x000098, "Member 'WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo, CallFunc_GetCurrentAnimatedScore_AnimatedScore) == 0x0000A8, "Member 'WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo::CallFunc_GetCurrentAnimatedScore_AnimatedScore' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo, K2Node_CreateDelegate_OutputDelegate2) == 0x0000B0, "Member 'WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo::K2Node_CreateDelegate_OutputDelegate2' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo, K2Node_CustomEvent_DeltaTime) == 0x0000C0, "Member 'WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo::K2Node_CustomEvent_DeltaTime' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo, K2Node_CreateDelegate_OutputDelegate3) == 0x0000C8, "Member 'WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo::K2Node_CreateDelegate_OutputDelegate3' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000D8, "Member 'WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo, Temp_byte_Variable) == 0x0000DC, "Member 'WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo, K2Node_CustomEvent_Value) == 0x0000E0, "Member 'WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo::K2Node_CustomEvent_Value' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo, CallFunc_NotEqual_IntInt_ReturnValue) == 0x0000E4, "Member 'WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo, Temp_byte_Variable1) == 0x0000E5, "Member 'WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo, CallFunc_GetCurrentAnimatedScore_AnimatedScore1) == 0x0000E8, "Member 'WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo::CallFunc_GetCurrentAnimatedScore_AnimatedScore1' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo, K2Node_Select_Default) == 0x0000EC, "Member 'WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo, Temp_bool_IsClosed_Variable) == 0x0000ED, "Member 'WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo, CallFunc_FClamp_ReturnValue) == 0x0000F0, "Member 'WB_PvE_MatchInfo_C_ExecuteUbergraph_WB_PvE_MatchInfo::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function WB_PvE_MatchInfo.WB_PvE_MatchInfo_C.SetScore
// 0x0004 (0x0004 - 0x0000)
struct WB_PvE_MatchInfo_C_SetScore final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PvE_MatchInfo_C_SetScore) == 0x000004, "Wrong alignment on WB_PvE_MatchInfo_C_SetScore");
static_assert(sizeof(WB_PvE_MatchInfo_C_SetScore) == 0x000004, "Wrong size on WB_PvE_MatchInfo_C_SetScore");
static_assert(offsetof(WB_PvE_MatchInfo_C_SetScore, Value) == 0x000000, "Member 'WB_PvE_MatchInfo_C_SetScore::Value' has a wrong offset!");

// Function WB_PvE_MatchInfo.WB_PvE_MatchInfo_C.UpdateScore
// 0x0004 (0x0004 - 0x0000)
struct WB_PvE_MatchInfo_C_UpdateScore final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PvE_MatchInfo_C_UpdateScore) == 0x000004, "Wrong alignment on WB_PvE_MatchInfo_C_UpdateScore");
static_assert(sizeof(WB_PvE_MatchInfo_C_UpdateScore) == 0x000004, "Wrong size on WB_PvE_MatchInfo_C_UpdateScore");
static_assert(offsetof(WB_PvE_MatchInfo_C_UpdateScore, DeltaTime) == 0x000000, "Member 'WB_PvE_MatchInfo_C_UpdateScore::DeltaTime' has a wrong offset!");

// Function WB_PvE_MatchInfo.WB_PvE_MatchInfo_C.SetScoreWindowVisibility
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_MatchInfo_C_SetScoreWindowVisibility final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_MatchInfo_C_SetScoreWindowVisibility) == 0x000001, "Wrong alignment on WB_PvE_MatchInfo_C_SetScoreWindowVisibility");
static_assert(sizeof(WB_PvE_MatchInfo_C_SetScoreWindowVisibility) == 0x000001, "Wrong size on WB_PvE_MatchInfo_C_SetScoreWindowVisibility");
static_assert(offsetof(WB_PvE_MatchInfo_C_SetScoreWindowVisibility, IsVisible_0) == 0x000000, "Member 'WB_PvE_MatchInfo_C_SetScoreWindowVisibility::IsVisible_0' has a wrong offset!");

// Function WB_PvE_MatchInfo.WB_PvE_MatchInfo_C.EndWave
// 0x0008 (0x0008 - 0x0000)
struct WB_PvE_MatchInfo_C_EndWave final
{
public:
	int32                                         WaveIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaveDuration;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PvE_MatchInfo_C_EndWave) == 0x000004, "Wrong alignment on WB_PvE_MatchInfo_C_EndWave");
static_assert(sizeof(WB_PvE_MatchInfo_C_EndWave) == 0x000008, "Wrong size on WB_PvE_MatchInfo_C_EndWave");
static_assert(offsetof(WB_PvE_MatchInfo_C_EndWave, WaveIndex) == 0x000000, "Member 'WB_PvE_MatchInfo_C_EndWave::WaveIndex' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_EndWave, WaveDuration) == 0x000004, "Member 'WB_PvE_MatchInfo_C_EndWave::WaveDuration' has a wrong offset!");

// Function WB_PvE_MatchInfo.WB_PvE_MatchInfo_C.BeginWave
// 0x0008 (0x0008 - 0x0000)
struct WB_PvE_MatchInfo_C_BeginWave final
{
public:
	int32                                         WaveIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaveDuration;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PvE_MatchInfo_C_BeginWave) == 0x000004, "Wrong alignment on WB_PvE_MatchInfo_C_BeginWave");
static_assert(sizeof(WB_PvE_MatchInfo_C_BeginWave) == 0x000008, "Wrong size on WB_PvE_MatchInfo_C_BeginWave");
static_assert(offsetof(WB_PvE_MatchInfo_C_BeginWave, WaveIndex) == 0x000000, "Member 'WB_PvE_MatchInfo_C_BeginWave::WaveIndex' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_BeginWave, WaveDuration) == 0x000004, "Member 'WB_PvE_MatchInfo_C_BeginWave::WaveDuration' has a wrong offset!");

// Function WB_PvE_MatchInfo.WB_PvE_MatchInfo_C.MakeTimeText
// 0x0100 (0x0100 - 0x0000)
struct WB_PvE_MatchInfo_C_MakeTimeText final
{
public:
	int32                                         Minutes;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Seconds;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   TimeText;                                          // 0x0008(0x0018)(Parm, OutParm)
	int32                                         TimeDigitLength;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0028(0x0018)()
	class FText                                   CallFunc_Conv_IntToText_ReturnValue1;              // 0x0040(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0058(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData1;             // 0x0098(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00D8(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00E8(0x0018)()
};
static_assert(alignof(WB_PvE_MatchInfo_C_MakeTimeText) == 0x000008, "Wrong alignment on WB_PvE_MatchInfo_C_MakeTimeText");
static_assert(sizeof(WB_PvE_MatchInfo_C_MakeTimeText) == 0x000100, "Wrong size on WB_PvE_MatchInfo_C_MakeTimeText");
static_assert(offsetof(WB_PvE_MatchInfo_C_MakeTimeText, Minutes) == 0x000000, "Member 'WB_PvE_MatchInfo_C_MakeTimeText::Minutes' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_MakeTimeText, Seconds) == 0x000004, "Member 'WB_PvE_MatchInfo_C_MakeTimeText::Seconds' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_MakeTimeText, TimeText) == 0x000008, "Member 'WB_PvE_MatchInfo_C_MakeTimeText::TimeText' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_MakeTimeText, TimeDigitLength) == 0x000020, "Member 'WB_PvE_MatchInfo_C_MakeTimeText::TimeDigitLength' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_MakeTimeText, CallFunc_Conv_IntToText_ReturnValue) == 0x000028, "Member 'WB_PvE_MatchInfo_C_MakeTimeText::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_MakeTimeText, CallFunc_Conv_IntToText_ReturnValue1) == 0x000040, "Member 'WB_PvE_MatchInfo_C_MakeTimeText::CallFunc_Conv_IntToText_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_MakeTimeText, K2Node_MakeStruct_FormatArgumentData) == 0x000058, "Member 'WB_PvE_MatchInfo_C_MakeTimeText::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_MakeTimeText, K2Node_MakeStruct_FormatArgumentData1) == 0x000098, "Member 'WB_PvE_MatchInfo_C_MakeTimeText::K2Node_MakeStruct_FormatArgumentData1' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_MakeTimeText, K2Node_MakeArray_Array) == 0x0000D8, "Member 'WB_PvE_MatchInfo_C_MakeTimeText::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_MakeTimeText, CallFunc_Format_ReturnValue) == 0x0000E8, "Member 'WB_PvE_MatchInfo_C_MakeTimeText::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function WB_PvE_MatchInfo.WB_PvE_MatchInfo_C.SetRemainingTime
// 0x0020 (0x0020 - 0x0000)
struct WB_PvE_MatchInfo_C_SetRemainingTime final
{
public:
	int32                                         Minutes;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Seconds;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_MakeTimeText_TimeText;                    // 0x0008(0x0018)()
};
static_assert(alignof(WB_PvE_MatchInfo_C_SetRemainingTime) == 0x000008, "Wrong alignment on WB_PvE_MatchInfo_C_SetRemainingTime");
static_assert(sizeof(WB_PvE_MatchInfo_C_SetRemainingTime) == 0x000020, "Wrong size on WB_PvE_MatchInfo_C_SetRemainingTime");
static_assert(offsetof(WB_PvE_MatchInfo_C_SetRemainingTime, Minutes) == 0x000000, "Member 'WB_PvE_MatchInfo_C_SetRemainingTime::Minutes' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_SetRemainingTime, Seconds) == 0x000004, "Member 'WB_PvE_MatchInfo_C_SetRemainingTime::Seconds' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_SetRemainingTime, CallFunc_MakeTimeText_TimeText) == 0x000008, "Member 'WB_PvE_MatchInfo_C_SetRemainingTime::CallFunc_MakeTimeText_TimeText' has a wrong offset!");

// Function WB_PvE_MatchInfo.WB_PvE_MatchInfo_C.SetScoreImmediately
// 0x0020 (0x0020 - 0x0000)
struct WB_PvE_MatchInfo_C_SetScoreImmediately final
{
public:
	int32                                         Score;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0008(0x0018)()
};
static_assert(alignof(WB_PvE_MatchInfo_C_SetScoreImmediately) == 0x000008, "Wrong alignment on WB_PvE_MatchInfo_C_SetScoreImmediately");
static_assert(sizeof(WB_PvE_MatchInfo_C_SetScoreImmediately) == 0x000020, "Wrong size on WB_PvE_MatchInfo_C_SetScoreImmediately");
static_assert(offsetof(WB_PvE_MatchInfo_C_SetScoreImmediately, Score) == 0x000000, "Member 'WB_PvE_MatchInfo_C_SetScoreImmediately::Score' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_SetScoreImmediately, CallFunc_Conv_IntToText_ReturnValue) == 0x000008, "Member 'WB_PvE_MatchInfo_C_SetScoreImmediately::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");

// Function WB_PvE_MatchInfo.WB_PvE_MatchInfo_C.SetProgressBar
// 0x0004 (0x0004 - 0x0000)
struct WB_PvE_MatchInfo_C_SetProgressBar final
{
public:
	float                                         Ratio;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PvE_MatchInfo_C_SetProgressBar) == 0x000004, "Wrong alignment on WB_PvE_MatchInfo_C_SetProgressBar");
static_assert(sizeof(WB_PvE_MatchInfo_C_SetProgressBar) == 0x000004, "Wrong size on WB_PvE_MatchInfo_C_SetProgressBar");
static_assert(offsetof(WB_PvE_MatchInfo_C_SetProgressBar, Ratio) == 0x000000, "Member 'WB_PvE_MatchInfo_C_SetProgressBar::Ratio' has a wrong offset!");

// Function WB_PvE_MatchInfo.WB_PvE_MatchInfo_C.InitProgressBar
// 0x0090 (0x0090 - 0x0000)
struct WB_PvE_MatchInfo_C_InitProgressBar final
{
public:
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush;                      // 0x0000(0x0088)()
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PvE_MatchInfo_C_InitProgressBar) == 0x000008, "Wrong alignment on WB_PvE_MatchInfo_C_InitProgressBar");
static_assert(sizeof(WB_PvE_MatchInfo_C_InitProgressBar) == 0x000090, "Wrong size on WB_PvE_MatchInfo_C_InitProgressBar");
static_assert(offsetof(WB_PvE_MatchInfo_C_InitProgressBar, K2Node_MakeStruct_SlateBrush) == 0x000000, "Member 'WB_PvE_MatchInfo_C_InitProgressBar::K2Node_MakeStruct_SlateBrush' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_InitProgressBar, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000088, "Member 'WB_PvE_MatchInfo_C_InitProgressBar::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");

// Function WB_PvE_MatchInfo.WB_PvE_MatchInfo_C.SetRemainingTimeFromSeconds
// 0x0020 (0x0020 - 0x0000)
struct WB_PvE_MatchInfo_C_SetRemainingTimeFromSeconds final
{
public:
	float                                         Seconds;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OneMinute;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FCeil_ReturnValue;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue1;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PvE_MatchInfo_C_SetRemainingTimeFromSeconds) == 0x000004, "Wrong alignment on WB_PvE_MatchInfo_C_SetRemainingTimeFromSeconds");
static_assert(sizeof(WB_PvE_MatchInfo_C_SetRemainingTimeFromSeconds) == 0x000020, "Wrong size on WB_PvE_MatchInfo_C_SetRemainingTimeFromSeconds");
static_assert(offsetof(WB_PvE_MatchInfo_C_SetRemainingTimeFromSeconds, Seconds) == 0x000000, "Member 'WB_PvE_MatchInfo_C_SetRemainingTimeFromSeconds::Seconds' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_SetRemainingTimeFromSeconds, OneMinute) == 0x000004, "Member 'WB_PvE_MatchInfo_C_SetRemainingTimeFromSeconds::OneMinute' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_SetRemainingTimeFromSeconds, CallFunc_FCeil_ReturnValue) == 0x000008, "Member 'WB_PvE_MatchInfo_C_SetRemainingTimeFromSeconds::CallFunc_FCeil_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_SetRemainingTimeFromSeconds, CallFunc_Divide_IntInt_ReturnValue) == 0x00000C, "Member 'WB_PvE_MatchInfo_C_SetRemainingTimeFromSeconds::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_SetRemainingTimeFromSeconds, CallFunc_Subtract_IntInt_ReturnValue) == 0x000010, "Member 'WB_PvE_MatchInfo_C_SetRemainingTimeFromSeconds::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_SetRemainingTimeFromSeconds, CallFunc_Clamp_ReturnValue) == 0x000014, "Member 'WB_PvE_MatchInfo_C_SetRemainingTimeFromSeconds::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_SetRemainingTimeFromSeconds, CallFunc_Percent_IntInt_ReturnValue) == 0x000018, "Member 'WB_PvE_MatchInfo_C_SetRemainingTimeFromSeconds::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_SetRemainingTimeFromSeconds, CallFunc_Clamp_ReturnValue1) == 0x00001C, "Member 'WB_PvE_MatchInfo_C_SetRemainingTimeFromSeconds::CallFunc_Clamp_ReturnValue1' has a wrong offset!");

// Function WB_PvE_MatchInfo.WB_PvE_MatchInfo_C.GetCurrentAnimatedScore
// 0x0014 (0x0014 - 0x0000)
struct WB_PvE_MatchInfo_C_GetCurrentAnimatedScore final
{
public:
	int32                                         AnimatedScore;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue1;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FCeil_ReturnValue;                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PvE_MatchInfo_C_GetCurrentAnimatedScore) == 0x000004, "Wrong alignment on WB_PvE_MatchInfo_C_GetCurrentAnimatedScore");
static_assert(sizeof(WB_PvE_MatchInfo_C_GetCurrentAnimatedScore) == 0x000014, "Wrong size on WB_PvE_MatchInfo_C_GetCurrentAnimatedScore");
static_assert(offsetof(WB_PvE_MatchInfo_C_GetCurrentAnimatedScore, AnimatedScore) == 0x000000, "Member 'WB_PvE_MatchInfo_C_GetCurrentAnimatedScore::AnimatedScore' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_GetCurrentAnimatedScore, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000004, "Member 'WB_PvE_MatchInfo_C_GetCurrentAnimatedScore::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_GetCurrentAnimatedScore, CallFunc_Conv_IntToFloat_ReturnValue1) == 0x000008, "Member 'WB_PvE_MatchInfo_C_GetCurrentAnimatedScore::CallFunc_Conv_IntToFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_GetCurrentAnimatedScore, CallFunc_MapRangeClamped_ReturnValue) == 0x00000C, "Member 'WB_PvE_MatchInfo_C_GetCurrentAnimatedScore::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_GetCurrentAnimatedScore, CallFunc_FCeil_ReturnValue) == 0x000010, "Member 'WB_PvE_MatchInfo_C_GetCurrentAnimatedScore::CallFunc_FCeil_ReturnValue' has a wrong offset!");

// Function WB_PvE_MatchInfo.WB_PvE_MatchInfo_C.SetPhaseState
// 0x00F8 (0x00F8 - 0x0000)
struct WB_PvE_MatchInfo_C_SetPhaseState final
{
public:
	E_AJBInGamePvE_GamePhase                      Phase;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WaveNum;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxWaveNum;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AJBInGamePvE_GamePhase                      Temp_byte_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0010(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData1;             // 0x0050(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0090(0x0010)(ZeroConstructor, ReferenceParm)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array1;                           // 0x00A0(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00B0(0x0018)()
	class FText                                   CallFunc_Format_ReturnValue1;                      // 0x00C8(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x00E0(0x0018)()
};
static_assert(alignof(WB_PvE_MatchInfo_C_SetPhaseState) == 0x000008, "Wrong alignment on WB_PvE_MatchInfo_C_SetPhaseState");
static_assert(sizeof(WB_PvE_MatchInfo_C_SetPhaseState) == 0x0000F8, "Wrong size on WB_PvE_MatchInfo_C_SetPhaseState");
static_assert(offsetof(WB_PvE_MatchInfo_C_SetPhaseState, Phase) == 0x000000, "Member 'WB_PvE_MatchInfo_C_SetPhaseState::Phase' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_SetPhaseState, WaveNum) == 0x000004, "Member 'WB_PvE_MatchInfo_C_SetPhaseState::WaveNum' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_SetPhaseState, MaxWaveNum) == 0x000008, "Member 'WB_PvE_MatchInfo_C_SetPhaseState::MaxWaveNum' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_SetPhaseState, Temp_byte_Variable) == 0x00000C, "Member 'WB_PvE_MatchInfo_C_SetPhaseState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_SetPhaseState, K2Node_MakeStruct_FormatArgumentData) == 0x000010, "Member 'WB_PvE_MatchInfo_C_SetPhaseState::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_SetPhaseState, K2Node_MakeStruct_FormatArgumentData1) == 0x000050, "Member 'WB_PvE_MatchInfo_C_SetPhaseState::K2Node_MakeStruct_FormatArgumentData1' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_SetPhaseState, K2Node_MakeArray_Array) == 0x000090, "Member 'WB_PvE_MatchInfo_C_SetPhaseState::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_SetPhaseState, K2Node_MakeArray_Array1) == 0x0000A0, "Member 'WB_PvE_MatchInfo_C_SetPhaseState::K2Node_MakeArray_Array1' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_SetPhaseState, CallFunc_Format_ReturnValue) == 0x0000B0, "Member 'WB_PvE_MatchInfo_C_SetPhaseState::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_SetPhaseState, CallFunc_Format_ReturnValue1) == 0x0000C8, "Member 'WB_PvE_MatchInfo_C_SetPhaseState::CallFunc_Format_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_SetPhaseState, K2Node_Select_Default) == 0x0000E0, "Member 'WB_PvE_MatchInfo_C_SetPhaseState::K2Node_Select_Default' has a wrong offset!");

// Function WB_PvE_MatchInfo.WB_PvE_MatchInfo_C.MakeBeginWaveText
// 0x0088 (0x0088 - 0x0000)
struct WB_PvE_MatchInfo_C_MakeBeginWaveText final
{
public:
	int32                                         WaveIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   BeginWaveText;                                     // 0x0008(0x0018)(Parm, OutParm)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0020(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0060(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0070(0x0018)()
};
static_assert(alignof(WB_PvE_MatchInfo_C_MakeBeginWaveText) == 0x000008, "Wrong alignment on WB_PvE_MatchInfo_C_MakeBeginWaveText");
static_assert(sizeof(WB_PvE_MatchInfo_C_MakeBeginWaveText) == 0x000088, "Wrong size on WB_PvE_MatchInfo_C_MakeBeginWaveText");
static_assert(offsetof(WB_PvE_MatchInfo_C_MakeBeginWaveText, WaveIndex) == 0x000000, "Member 'WB_PvE_MatchInfo_C_MakeBeginWaveText::WaveIndex' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_MakeBeginWaveText, BeginWaveText) == 0x000008, "Member 'WB_PvE_MatchInfo_C_MakeBeginWaveText::BeginWaveText' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_MakeBeginWaveText, K2Node_MakeStruct_FormatArgumentData) == 0x000020, "Member 'WB_PvE_MatchInfo_C_MakeBeginWaveText::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_MakeBeginWaveText, K2Node_MakeArray_Array) == 0x000060, "Member 'WB_PvE_MatchInfo_C_MakeBeginWaveText::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_MakeBeginWaveText, CallFunc_Format_ReturnValue) == 0x000070, "Member 'WB_PvE_MatchInfo_C_MakeBeginWaveText::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function WB_PvE_MatchInfo.WB_PvE_MatchInfo_C.MakeBeginWaveSurviveTimeText
// 0x00A8 (0x00A8 - 0x0000)
struct WB_PvE_MatchInfo_C_MakeBeginWaveSurviveTimeText final
{
public:
	float                                         WaveSeconds;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   WaveTimeText;                                      // 0x0008(0x0018)(Parm, OutParm)
	int32                                         WaveSecondsDigitsLength;                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FFloor_ReturnValue;                       // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0028(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0040(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0080(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0090(0x0018)()
};
static_assert(alignof(WB_PvE_MatchInfo_C_MakeBeginWaveSurviveTimeText) == 0x000008, "Wrong alignment on WB_PvE_MatchInfo_C_MakeBeginWaveSurviveTimeText");
static_assert(sizeof(WB_PvE_MatchInfo_C_MakeBeginWaveSurviveTimeText) == 0x0000A8, "Wrong size on WB_PvE_MatchInfo_C_MakeBeginWaveSurviveTimeText");
static_assert(offsetof(WB_PvE_MatchInfo_C_MakeBeginWaveSurviveTimeText, WaveSeconds) == 0x000000, "Member 'WB_PvE_MatchInfo_C_MakeBeginWaveSurviveTimeText::WaveSeconds' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_MakeBeginWaveSurviveTimeText, WaveTimeText) == 0x000008, "Member 'WB_PvE_MatchInfo_C_MakeBeginWaveSurviveTimeText::WaveTimeText' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_MakeBeginWaveSurviveTimeText, WaveSecondsDigitsLength) == 0x000020, "Member 'WB_PvE_MatchInfo_C_MakeBeginWaveSurviveTimeText::WaveSecondsDigitsLength' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_MakeBeginWaveSurviveTimeText, CallFunc_FFloor_ReturnValue) == 0x000024, "Member 'WB_PvE_MatchInfo_C_MakeBeginWaveSurviveTimeText::CallFunc_FFloor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_MakeBeginWaveSurviveTimeText, CallFunc_Conv_IntToText_ReturnValue) == 0x000028, "Member 'WB_PvE_MatchInfo_C_MakeBeginWaveSurviveTimeText::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_MakeBeginWaveSurviveTimeText, K2Node_MakeStruct_FormatArgumentData) == 0x000040, "Member 'WB_PvE_MatchInfo_C_MakeBeginWaveSurviveTimeText::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_MakeBeginWaveSurviveTimeText, K2Node_MakeArray_Array) == 0x000080, "Member 'WB_PvE_MatchInfo_C_MakeBeginWaveSurviveTimeText::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_MakeBeginWaveSurviveTimeText, CallFunc_Format_ReturnValue) == 0x000090, "Member 'WB_PvE_MatchInfo_C_MakeBeginWaveSurviveTimeText::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function WB_PvE_MatchInfo.WB_PvE_MatchInfo_C.BindAnimationDelegates
// 0x0038 (0x0038 - 0x0000)
struct WB_PvE_MatchInfo_C_BindAnimationDelegates final
{
public:
	TDelegate<void(int32 WaveIndex, float WaveDuration)> K2Node_CreateDelegate_OutputDelegate;       // 0x0000(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(int32 NewWaveIndex, float NewWaveDuration)> K2Node_CreateDelegate_OutputDelegate1; // 0x0010(0x0010)(ZeroConstructor, NoDestructor)
	TArray<class ABP_AJBInGamePvE_PhaseManager_C*> CallFunc_GetAllActorsOfClass_OutActors;           // 0x0020(0x0010)(ZeroConstructor, ReferenceParm)
	class ABP_AJBInGamePvE_PhaseManager_C*        CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PvE_MatchInfo_C_BindAnimationDelegates) == 0x000008, "Wrong alignment on WB_PvE_MatchInfo_C_BindAnimationDelegates");
static_assert(sizeof(WB_PvE_MatchInfo_C_BindAnimationDelegates) == 0x000038, "Wrong size on WB_PvE_MatchInfo_C_BindAnimationDelegates");
static_assert(offsetof(WB_PvE_MatchInfo_C_BindAnimationDelegates, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'WB_PvE_MatchInfo_C_BindAnimationDelegates::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_BindAnimationDelegates, K2Node_CreateDelegate_OutputDelegate1) == 0x000010, "Member 'WB_PvE_MatchInfo_C_BindAnimationDelegates::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_BindAnimationDelegates, CallFunc_GetAllActorsOfClass_OutActors) == 0x000020, "Member 'WB_PvE_MatchInfo_C_BindAnimationDelegates::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_BindAnimationDelegates, CallFunc_Array_Get_Item) == 0x000030, "Member 'WB_PvE_MatchInfo_C_BindAnimationDelegates::CallFunc_Array_Get_Item' has a wrong offset!");

// Function WB_PvE_MatchInfo.WB_PvE_MatchInfo_C.MakeEndWaveText
// 0x0088 (0x0088 - 0x0000)
struct WB_PvE_MatchInfo_C_MakeEndWaveText final
{
public:
	int32                                         WaveIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   EndWaveText;                                       // 0x0008(0x0018)(Parm, OutParm)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0020(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0060(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0070(0x0018)()
};
static_assert(alignof(WB_PvE_MatchInfo_C_MakeEndWaveText) == 0x000008, "Wrong alignment on WB_PvE_MatchInfo_C_MakeEndWaveText");
static_assert(sizeof(WB_PvE_MatchInfo_C_MakeEndWaveText) == 0x000088, "Wrong size on WB_PvE_MatchInfo_C_MakeEndWaveText");
static_assert(offsetof(WB_PvE_MatchInfo_C_MakeEndWaveText, WaveIndex) == 0x000000, "Member 'WB_PvE_MatchInfo_C_MakeEndWaveText::WaveIndex' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_MakeEndWaveText, EndWaveText) == 0x000008, "Member 'WB_PvE_MatchInfo_C_MakeEndWaveText::EndWaveText' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_MakeEndWaveText, K2Node_MakeStruct_FormatArgumentData) == 0x000020, "Member 'WB_PvE_MatchInfo_C_MakeEndWaveText::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_MakeEndWaveText, K2Node_MakeArray_Array) == 0x000060, "Member 'WB_PvE_MatchInfo_C_MakeEndWaveText::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_MakeEndWaveText, CallFunc_Format_ReturnValue) == 0x000070, "Member 'WB_PvE_MatchInfo_C_MakeEndWaveText::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function WB_PvE_MatchInfo.WB_PvE_MatchInfo_C.SetKillCount
// 0x0020 (0x0020 - 0x0000)
struct WB_PvE_MatchInfo_C_SetKillCount final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0008(0x0018)()
};
static_assert(alignof(WB_PvE_MatchInfo_C_SetKillCount) == 0x000008, "Wrong alignment on WB_PvE_MatchInfo_C_SetKillCount");
static_assert(sizeof(WB_PvE_MatchInfo_C_SetKillCount) == 0x000020, "Wrong size on WB_PvE_MatchInfo_C_SetKillCount");
static_assert(offsetof(WB_PvE_MatchInfo_C_SetKillCount, Value) == 0x000000, "Member 'WB_PvE_MatchInfo_C_SetKillCount::Value' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_SetKillCount, CallFunc_Conv_IntToText_ReturnValue) == 0x000008, "Member 'WB_PvE_MatchInfo_C_SetKillCount::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");

// Function WB_PvE_MatchInfo.WB_PvE_MatchInfo_C.SetRetiredCount
// 0x0020 (0x0020 - 0x0000)
struct WB_PvE_MatchInfo_C_SetRetiredCount final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0008(0x0018)()
};
static_assert(alignof(WB_PvE_MatchInfo_C_SetRetiredCount) == 0x000008, "Wrong alignment on WB_PvE_MatchInfo_C_SetRetiredCount");
static_assert(sizeof(WB_PvE_MatchInfo_C_SetRetiredCount) == 0x000020, "Wrong size on WB_PvE_MatchInfo_C_SetRetiredCount");
static_assert(offsetof(WB_PvE_MatchInfo_C_SetRetiredCount, Value) == 0x000000, "Member 'WB_PvE_MatchInfo_C_SetRetiredCount::Value' has a wrong offset!");
static_assert(offsetof(WB_PvE_MatchInfo_C_SetRetiredCount, CallFunc_Conv_IntToText_ReturnValue) == 0x000008, "Member 'WB_PvE_MatchInfo_C_SetRetiredCount::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");

}

