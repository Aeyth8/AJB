#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBStoneHook

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AJB_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BP_AJBSkillBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBStoneHook.BP_AJBStoneHook_C
// 0x0118 (0x0300 - 0x01E8)
class UBP_AJBStoneHook_C final : public UBP_AJBSkillBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBStoneHook_C;                  // 0x01E8(0x0008)(Transient, DuplicateTransient)
	class UClass*                                 SpawnPreviewClass;                                 // 0x01F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 PreviewObject;                                     // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             HookTransform;                                     // 0x0200(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PossibleHook;                                      // 0x0230(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_231[0x3];                                      // 0x0231(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TraceDistanceMinLimit;                             // 0x0234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceDistanceStartFromCamera;                      // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceDistance;                                     // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceRadius;                                       // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_244[0x4];                                      // 0x0244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      TraceObjectType;                                   // 0x0248(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         WatingTime;                                        // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchVelocityBase;                                // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchVelocityDistanceCoef;                        // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchPitchCorrectionMin;                          // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchPitchCorrectionMax;                          // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26C[0x4];                                      // 0x026C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           FactorTag;                                         // 0x0270(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         ClearingTime;                                      // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bReserveWaiting;                                   // 0x027C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27D[0x3];                                      // 0x027D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CharacterLightVector;                              // 0x0280(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttenuationVelocityAtCancel;                       // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCalcVelocityDebugDraw;                            // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_291[0x3];                                      // 0x0291(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                VelocityBeforeTheWorld;                            // 0x0294(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bWasTheWorld;                                      // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bBeforeJump;                                       // 0x02A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A2[0x2];                                      // 0x02A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StringShrinkTime;                                  // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StringInjectionTime;                               // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AC[0x4];                                      // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ActionGionTag;                                     // 0x02B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          StringEndParticle;                                 // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          HookTargetParticle;                                // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         s__BP_AJBStoneHook_C;                              // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebugPrintStatus;                                 // 0x02CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2CD[0x3];                                      // 0x02CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StandMovementScale;                                // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaitTimeMaxLimit;                                  // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchVelocityDistanceMaxLimit;                    // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastHookDirection;                                 // 0x02DC(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PitchWhereEnableLandingStop;                       // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastLaunchVelocity;                                // 0x02EC(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StandLaunchVelocityScale;                          // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBStoneHook(int32 EntryPoint);
	void HookFailed();
	void ChangePreviewUI(bool IsPossibleHook);
	void DestroyHookTargetParticle();
	void DestroyStringEndParticle();
	void ROS_UpdateHookTransform(const struct FTransform& HookTransform_0);
	void MC_UpdateHookTransform(const struct FTransform& HookTransform_0);
	void UpdateHookTransform(const struct FTransform& HookTransform_0);
	void SetStringVisibility(bool NewVisibility);
	void ROS_ResetVelocity();
	void LaunchCharacter_ROS(const struct FVector& LaunchVelocity);
	void LaunchCharacter(const struct FVector& LaunchVelocity);
	void DestroyPreviewObject_Local();
	void SpawnPreviewObject_Local();
	void Local_StateTick_Ready();
	void ResetSuccessSE();
	void StateTick_Action();
	void MC_BeginState_Clearing();
	void ROS_BeginState_Clearing();
	void OnBeginState_Clearing_OneShot();
	void BeginState_Clearing();
	void StateTick_Clearing();
	void OnBeginState_Clearing();
	void MC_BeginState_Action();
	void ROS_BeginState_Action();
	void MC_StateEnd(bool Cancel);
	void ROS_StateEnd(bool Cancel);
	void StateEnd(bool Cancel);
	void OnBeginState_Action();
	void OnBeginState_Action_OneShot();
	void MC_BeginState_Waiting();
	void ROS_BeginState_Waiting();
	void OnBeginState_Waiting_OneShot();
	void OnBeginState_Waiting();
	void MC_BeginState_Ready();
	void ROS_BeginState_Ready();
	void OnBeginState_Ready_OneShot();
	void OnBeginStateReady();
	void StateTick_Wait();
	void BeginState_Waiting();
	void StateTick_Ready();
	void BeginState_Action();
	void BeginState_Ready();
	void OnEndState(bool Cancel);
	void StateTick(float DeltaTime);
	void ChangeStandLaunchVelocityScale(float Value);
	void ChangeStandMovementDistanceScale(float Value);
	void ROS_SetVelocity(const struct FVector& NewParam);
	void ChangeCharacterMoveSpeedByStand(float Value);
	void ChangeMovementDistanceScale(float Value);
	void OnCompleted_7B45FB9D406D5826C78546BCE7C15909(class FName NotifyName);
	void OnBlendOut_7B45FB9D406D5826C78546BCE7C15909(class FName NotifyName);
	void OnInterrupted_7B45FB9D406D5826C78546BCE7C15909(class FName NotifyName);
	void OnNotifyBegin_7B45FB9D406D5826C78546BCE7C15909(class FName NotifyName);
	void OnNotifyEnd_7B45FB9D406D5826C78546BCE7C15909(class FName NotifyName);
	void OnCompleted_7B45FB9D406D5826C78546BC5BAE37D7(class FName NotifyName);
	void OnBlendOut_7B45FB9D406D5826C78546BC5BAE37D7(class FName NotifyName);
	void OnInterrupted_7B45FB9D406D5826C78546BC5BAE37D7(class FName NotifyName);
	void OnNotifyBegin_7B45FB9D406D5826C78546BC5BAE37D7(class FName NotifyName);
	void OnNotifyEnd_7B45FB9D406D5826C78546BC5BAE37D7(class FName NotifyName);
	void SpawnPreviewObjectCore(class AActor** SpawnObject);
	void TryDestroyPreviewObject();
	void ApplyTraceInfo();
	void TraceHookPointTransform(struct FTransform* Transform, bool* PossibleHook_0);
	void UpdateTransform();
	void CalcLaunchVelocity(bool DebugDraw, struct FVector* Velocity);
	void ReserveWaiting();
	void CancelSkillSelf();
	float GetStringExtendProgress();
	void ShowPreviewGuide();
	void HidePreviewGuide();
	void GetStringTransform(struct FTransform* Result);
	float CalcWaitTime();
	float GetPoliticMovementDistance();
	bool CheckFloorDistance(float FloorDistance);
	struct FVector GetHookDirection();
	struct FRotator GetHookRotation();
	void StateBeginPlay(bool bShouldRestore);
	void OnCancel();
	void OnActive();
	void ReceiveTick(float DeltaSeconds);
	void OnInactive();
	void OnReady();
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);

	bool IsInPreview() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBStoneHook_C">();
	}
	static class UBP_AJBStoneHook_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBStoneHook_C>();
	}
};
static_assert(alignof(UBP_AJBStoneHook_C) == 0x000010, "Wrong alignment on UBP_AJBStoneHook_C");
static_assert(sizeof(UBP_AJBStoneHook_C) == 0x000300, "Wrong size on UBP_AJBStoneHook_C");
static_assert(offsetof(UBP_AJBStoneHook_C, UberGraphFrame_BP_AJBStoneHook_C) == 0x0001E8, "Member 'UBP_AJBStoneHook_C::UberGraphFrame_BP_AJBStoneHook_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, SpawnPreviewClass) == 0x0001F0, "Member 'UBP_AJBStoneHook_C::SpawnPreviewClass' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, PreviewObject) == 0x0001F8, "Member 'UBP_AJBStoneHook_C::PreviewObject' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, HookTransform) == 0x000200, "Member 'UBP_AJBStoneHook_C::HookTransform' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, PossibleHook) == 0x000230, "Member 'UBP_AJBStoneHook_C::PossibleHook' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, TraceDistanceMinLimit) == 0x000234, "Member 'UBP_AJBStoneHook_C::TraceDistanceMinLimit' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, TraceDistanceStartFromCamera) == 0x000238, "Member 'UBP_AJBStoneHook_C::TraceDistanceStartFromCamera' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, TraceDistance) == 0x00023C, "Member 'UBP_AJBStoneHook_C::TraceDistance' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, TraceRadius) == 0x000240, "Member 'UBP_AJBStoneHook_C::TraceRadius' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, TraceObjectType) == 0x000248, "Member 'UBP_AJBStoneHook_C::TraceObjectType' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, WatingTime) == 0x000258, "Member 'UBP_AJBStoneHook_C::WatingTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, LaunchVelocityBase) == 0x00025C, "Member 'UBP_AJBStoneHook_C::LaunchVelocityBase' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, LaunchVelocityDistanceCoef) == 0x000260, "Member 'UBP_AJBStoneHook_C::LaunchVelocityDistanceCoef' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, LaunchPitchCorrectionMin) == 0x000264, "Member 'UBP_AJBStoneHook_C::LaunchPitchCorrectionMin' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, LaunchPitchCorrectionMax) == 0x000268, "Member 'UBP_AJBStoneHook_C::LaunchPitchCorrectionMax' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, FactorTag) == 0x000270, "Member 'UBP_AJBStoneHook_C::FactorTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, ClearingTime) == 0x000278, "Member 'UBP_AJBStoneHook_C::ClearingTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, bReserveWaiting) == 0x00027C, "Member 'UBP_AJBStoneHook_C::bReserveWaiting' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, CharacterLightVector) == 0x000280, "Member 'UBP_AJBStoneHook_C::CharacterLightVector' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, AttenuationVelocityAtCancel) == 0x00028C, "Member 'UBP_AJBStoneHook_C::AttenuationVelocityAtCancel' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, bCalcVelocityDebugDraw) == 0x000290, "Member 'UBP_AJBStoneHook_C::bCalcVelocityDebugDraw' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, VelocityBeforeTheWorld) == 0x000294, "Member 'UBP_AJBStoneHook_C::VelocityBeforeTheWorld' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, bWasTheWorld) == 0x0002A0, "Member 'UBP_AJBStoneHook_C::bWasTheWorld' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, bBeforeJump) == 0x0002A1, "Member 'UBP_AJBStoneHook_C::bBeforeJump' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, StringShrinkTime) == 0x0002A4, "Member 'UBP_AJBStoneHook_C::StringShrinkTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, StringInjectionTime) == 0x0002A8, "Member 'UBP_AJBStoneHook_C::StringInjectionTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, ActionGionTag) == 0x0002B0, "Member 'UBP_AJBStoneHook_C::ActionGionTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, StringEndParticle) == 0x0002B8, "Member 'UBP_AJBStoneHook_C::StringEndParticle' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, HookTargetParticle) == 0x0002C0, "Member 'UBP_AJBStoneHook_C::HookTargetParticle' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, s__BP_AJBStoneHook_C) == 0x0002C8, "Member 'UBP_AJBStoneHook_C::s__BP_AJBStoneHook_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, bDebugPrintStatus) == 0x0002CC, "Member 'UBP_AJBStoneHook_C::bDebugPrintStatus' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, StandMovementScale) == 0x0002D0, "Member 'UBP_AJBStoneHook_C::StandMovementScale' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, WaitTimeMaxLimit) == 0x0002D4, "Member 'UBP_AJBStoneHook_C::WaitTimeMaxLimit' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, LaunchVelocityDistanceMaxLimit) == 0x0002D8, "Member 'UBP_AJBStoneHook_C::LaunchVelocityDistanceMaxLimit' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, LastHookDirection) == 0x0002DC, "Member 'UBP_AJBStoneHook_C::LastHookDirection' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, PitchWhereEnableLandingStop) == 0x0002E8, "Member 'UBP_AJBStoneHook_C::PitchWhereEnableLandingStop' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, LastLaunchVelocity) == 0x0002EC, "Member 'UBP_AJBStoneHook_C::LastLaunchVelocity' has a wrong offset!");
static_assert(offsetof(UBP_AJBStoneHook_C, StandLaunchVelocityScale) == 0x0002F8, "Member 'UBP_AJBStoneHook_C::StandLaunchVelocityScale' has a wrong offset!");

}

