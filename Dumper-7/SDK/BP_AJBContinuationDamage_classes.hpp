#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBContinuationDamage

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BP_AJBPassiveSkillBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBContinuationDamage.BP_AJBContinuationDamage_C
// 0x0058 (0x0268 - 0x0210)
class UBP_AJBContinuationDamage_C : public UBP_AJBPassiveSkillBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBContinuationDamage_C;         // 0x0210(0x0008)(Transient, DuplicateTransient)
	bool                                          bShowDebugDamageInterval;                          // 0x0218(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_219[0x3];                                      // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentIntervalTime;                               // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TotalTime;                                         // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageInterval_s_;                                 // 0x0224(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalDamage;                                       // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Damage;                                            // 0x022C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SkillTag;                                          // 0x0230(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldRequestEffect;                              // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_239[0x7];                                      // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           DamageParticleTag;                                 // 0x0240(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           DamageSETag;                                       // 0x0248(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          PenetrateAP;                                       // 0x0250(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_251[0x7];                                      // 0x0251(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           DamageType;                                        // 0x0258(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          TriggerByStand;                                    // 0x0260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DamageToStandWhenGivenStand;                       // 0x0261(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCurrentIntervalInitialize;                        // 0x0262(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bApplyDamageOnActive;                              // 0x0263(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsPropagatedFromStand;                             // 0x0264(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsEnabledToShowDamageDisplayFromStand;             // 0x0265(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bWithoutStand;                                     // 0x0266(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_AJBContinuationDamage(int32 EntryPoint);
	void UpdateStandDamageDisplayVisibility__Server_();
	void MC_ApplyDamage();
	void UpdateIntervalTimeServer(float DeltaSeconds, int32* DamageCount);
	void TryApplyDamage(int32 DamageCount);
	void PrintStringDamageInterval(const class FString& inString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration);
	void MakeDamageDisplayProperty(struct FAJBDamageDisplayProperty* CharacterDamageDisplayProperty);
	void OnMC_ActivePassive(class UObject* Causer, const struct FGameplayTag& CauserType, int32 SerialNumber);
	void OnActionInactivate(bool bTriggeredByStand);
	void OnActionActivate(bool bTriggeredByStand);
	void ChangeParticleVisibility(bool bNewVisibility);
	void ReceiveTick(float DeltaSeconds);
	void TryChangeParticleVisibility(bool bNewVisibility);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBContinuationDamage_C">();
	}
	static class UBP_AJBContinuationDamage_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBContinuationDamage_C>();
	}
};
static_assert(alignof(UBP_AJBContinuationDamage_C) == 0x000008, "Wrong alignment on UBP_AJBContinuationDamage_C");
static_assert(sizeof(UBP_AJBContinuationDamage_C) == 0x000268, "Wrong size on UBP_AJBContinuationDamage_C");
static_assert(offsetof(UBP_AJBContinuationDamage_C, UberGraphFrame_BP_AJBContinuationDamage_C) == 0x000210, "Member 'UBP_AJBContinuationDamage_C::UberGraphFrame_BP_AJBContinuationDamage_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBContinuationDamage_C, bShowDebugDamageInterval) == 0x000218, "Member 'UBP_AJBContinuationDamage_C::bShowDebugDamageInterval' has a wrong offset!");
static_assert(offsetof(UBP_AJBContinuationDamage_C, CurrentIntervalTime) == 0x00021C, "Member 'UBP_AJBContinuationDamage_C::CurrentIntervalTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBContinuationDamage_C, TotalTime) == 0x000220, "Member 'UBP_AJBContinuationDamage_C::TotalTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBContinuationDamage_C, DamageInterval_s_) == 0x000224, "Member 'UBP_AJBContinuationDamage_C::DamageInterval_s_' has a wrong offset!");
static_assert(offsetof(UBP_AJBContinuationDamage_C, TotalDamage) == 0x000228, "Member 'UBP_AJBContinuationDamage_C::TotalDamage' has a wrong offset!");
static_assert(offsetof(UBP_AJBContinuationDamage_C, Damage) == 0x00022C, "Member 'UBP_AJBContinuationDamage_C::Damage' has a wrong offset!");
static_assert(offsetof(UBP_AJBContinuationDamage_C, SkillTag) == 0x000230, "Member 'UBP_AJBContinuationDamage_C::SkillTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBContinuationDamage_C, bShouldRequestEffect) == 0x000238, "Member 'UBP_AJBContinuationDamage_C::bShouldRequestEffect' has a wrong offset!");
static_assert(offsetof(UBP_AJBContinuationDamage_C, DamageParticleTag) == 0x000240, "Member 'UBP_AJBContinuationDamage_C::DamageParticleTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBContinuationDamage_C, DamageSETag) == 0x000248, "Member 'UBP_AJBContinuationDamage_C::DamageSETag' has a wrong offset!");
static_assert(offsetof(UBP_AJBContinuationDamage_C, PenetrateAP) == 0x000250, "Member 'UBP_AJBContinuationDamage_C::PenetrateAP' has a wrong offset!");
static_assert(offsetof(UBP_AJBContinuationDamage_C, DamageType) == 0x000258, "Member 'UBP_AJBContinuationDamage_C::DamageType' has a wrong offset!");
static_assert(offsetof(UBP_AJBContinuationDamage_C, TriggerByStand) == 0x000260, "Member 'UBP_AJBContinuationDamage_C::TriggerByStand' has a wrong offset!");
static_assert(offsetof(UBP_AJBContinuationDamage_C, DamageToStandWhenGivenStand) == 0x000261, "Member 'UBP_AJBContinuationDamage_C::DamageToStandWhenGivenStand' has a wrong offset!");
static_assert(offsetof(UBP_AJBContinuationDamage_C, bCurrentIntervalInitialize) == 0x000262, "Member 'UBP_AJBContinuationDamage_C::bCurrentIntervalInitialize' has a wrong offset!");
static_assert(offsetof(UBP_AJBContinuationDamage_C, bApplyDamageOnActive) == 0x000263, "Member 'UBP_AJBContinuationDamage_C::bApplyDamageOnActive' has a wrong offset!");
static_assert(offsetof(UBP_AJBContinuationDamage_C, IsPropagatedFromStand) == 0x000264, "Member 'UBP_AJBContinuationDamage_C::IsPropagatedFromStand' has a wrong offset!");
static_assert(offsetof(UBP_AJBContinuationDamage_C, IsEnabledToShowDamageDisplayFromStand) == 0x000265, "Member 'UBP_AJBContinuationDamage_C::IsEnabledToShowDamageDisplayFromStand' has a wrong offset!");
static_assert(offsetof(UBP_AJBContinuationDamage_C, bWithoutStand) == 0x000266, "Member 'UBP_AJBContinuationDamage_C::bWithoutStand' has a wrong offset!");

}

