#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_AJBTryInteract

#include "Basic.hpp"

#include "BTT_AJBTryInteract_classes.hpp"
#include "BTT_AJBTryInteract_parameters.hpp"


namespace SDK
{

// Function BTT_AJBTryInteract.BTT_AJBTryInteract_C.ExecuteUbergraph_BTT_AJBTryInteract
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_AJBTryInteract_C::ExecuteUbergraph_BTT_AJBTryInteract(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_AJBTryInteract_C", "ExecuteUbergraph_BTT_AJBTryInteract");

	Params::BTT_AJBTryInteract_C_ExecuteUbergraph_BTT_AJBTryInteract Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTT_AJBTryInteract.BTT_AJBTryInteract_C.AimToLivingPlayer
// (BlueprintCallable, BlueprintEvent)

void UBTT_AJBTryInteract_C::AimToLivingPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_AJBTryInteract_C", "AimToLivingPlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BTT_AJBTryInteract.BTT_AJBTryInteract_C.AimToInteractTrigger
// (BlueprintCallable, BlueprintEvent)

void UBTT_AJBTryInteract_C::AimToInteractTrigger()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_AJBTryInteract_C", "AimToInteractTrigger");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BTT_AJBTryInteract.BTT_AJBTryInteract_C.AimToDeadCharacter
// (BlueprintCallable, BlueprintEvent)

void UBTT_AJBTryInteract_C::AimToDeadCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_AJBTryInteract_C", "AimToDeadCharacter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BTT_AJBTryInteract.BTT_AJBTryInteract_C.TryTriggerInteract
// (BlueprintCallable, BlueprintEvent)

void UBTT_AJBTryInteract_C::TryTriggerInteract()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_AJBTryInteract_C", "TryTriggerInteract");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BTT_AJBTryInteract.BTT_AJBTryInteract_C.TryLongInteract
// (BlueprintCallable, BlueprintEvent)

void UBTT_AJBTryInteract_C::TryLongInteract()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_AJBTryInteract_C", "TryLongInteract");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BTT_AJBTryInteract.BTT_AJBTryInteract_C.CloseGateMoveAround
// (BlueprintCallable, BlueprintEvent)

void UBTT_AJBTryInteract_C::CloseGateMoveAround()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_AJBTryInteract_C", "CloseGateMoveAround");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BTT_AJBTryInteract.BTT_AJBTryInteract_C.OpenGateMoveAround
// (BlueprintCallable, BlueprintEvent)

void UBTT_AJBTryInteract_C::OpenGateMoveAround()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_AJBTryInteract_C", "OpenGateMoveAround");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BTT_AJBTryInteract.BTT_AJBTryInteract_C.MoveAround
// (BlueprintCallable, BlueprintEvent)

void UBTT_AJBTryInteract_C::MoveAround()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_AJBTryInteract_C", "MoveAround");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BTT_AJBTryInteract.BTT_AJBTryInteract_C.CleanUp
// (BlueprintCallable, BlueprintEvent)

void UBTT_AJBTryInteract_C::CleanUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_AJBTryInteract_C", "CleanUp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BTT_AJBTryInteract.BTT_AJBTryInteract_C.ReceiveAbortAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_AJBTryInteract_C::ReceiveAbortAI(class AAIController* OwnerController, class APawn* ControlledPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_AJBTryInteract_C", "ReceiveAbortAI");

	Params::BTT_AJBTryInteract_C_ReceiveAbortAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTT_AJBTryInteract.BTT_AJBTryInteract_C.OnInteractActorChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InteractActor                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_AJBTryInteract_C::OnInteractActorChanged(class AActor* InteractActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_AJBTryInteract_C", "OnInteractActorChanged");

	Params::BTT_AJBTryInteract_C_OnInteractActorChanged Parms{};

	Parms.InteractActor = InteractActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTT_AJBTryInteract.BTT_AJBTryInteract_C.TryInteract
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_AJBTryInteract_C::TryInteract(class AActor* TargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_AJBTryInteract_C", "TryInteract");

	Params::BTT_AJBTryInteract_C_TryInteract Parms{};

	Parms.TargetActor = TargetActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTT_AJBTryInteract.BTT_AJBTryInteract_C.ReceiveTickAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_AJBTryInteract_C::ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_AJBTryInteract_C", "ReceiveTickAI");

	Params::BTT_AJBTryInteract_C_ReceiveTickAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;
	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTT_AJBTryInteract.BTT_AJBTryInteract_C.ReceiveExecuteAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_AJBTryInteract_C::ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_AJBTryInteract_C", "ReceiveExecuteAI");

	Params::BTT_AJBTryInteract_C_ReceiveExecuteAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);
}

}

