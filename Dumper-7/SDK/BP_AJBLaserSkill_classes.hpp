#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBLaserSkill

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "AJB_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_AJBSkillBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBLaserSkill.BP_AJBLaserSkill_C
// 0x0110 (0x02F8 - 0x01E8)
class UBP_AJBLaserSkill_C : public UBP_AJBSkillBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBLaserSkill_C;                 // 0x01E8(0x0008)(Transient, DuplicateTransient)
	float                                         ReadyTime;                                         // 0x01F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ActionTime;                                        // 0x01F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ClearingTime;                                      // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceDistance_cm_;                                 // 0x01FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceRadius;                                       // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceStartDistanceFromCamera_cm_;                  // 0x0204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      TraceObjectTypes;                                  // 0x0208(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FGameplayTag                           LaserImpactParticleTag;                            // 0x0218(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           LaserActivatedParticleTag;                         // 0x0220(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          LaserImpactParticle;                               // 0x0228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UClass*                                 LaserImpactClassClass;                             // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBLaserImpactAffecter_Base_C*      LaserImpactAffecter;                               // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FGameplayTag                           LaserReadyGionTag;                                 // 0x0240(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           LaserReadySETag;                                   // 0x0248(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           LaserBeamLoopSE;                                   // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FGameplayTag                           LaserBeamLoopSETag;                                // 0x0258(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           LaserActionGionTag;                                // 0x0260(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      TraceObjectTypesForBeam;                           // 0x0268(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class ABP_AJBInGameParticleEffect_C*          LaserActivatedParticle;                            // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UAnimMontage*                           LaserMontage;                                      // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StopMontageBlendTime;                              // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28C[0x4];                                      // 0x028C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LaserMotion_BeginSection;                          // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LaserMotion_LoopSection;                           // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LaserMotion_EndSection;                            // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           LaserClearingSETag;                                // 0x02A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           LaserImpactLoopSE;                                 // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FGameplayTag                           LaserImpactLoopSETag;                              // 0x02B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          CanBlockByVanishing;                               // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           BeginLaserVoiceTag;                                // 0x02C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldHitByLaserVisual;                            // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	bool                                          ShouldLaserAimToImpactPointOnNotOwnerEnv;          // 0x02D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D2[0x2];                                      // 0x02D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LaserVisualRadius;                                 // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          ShouldAutoCalculateLaserVisualRadius;              // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	uint8                                         Pad_2D9[0x3];                                      // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LaserCentroidLocal;                                // 0x02DC(0x000C)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector                                LaserCentroidOffset;                               // 0x02E8(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBLaserSkill(int32 EntryPoint);
	void ROS_UpdateLaser(bool IsHit, const struct FVector& Location, const struct FVector& ImpactPoint);
	void MC_UpdateLaser(bool IsHit, const struct FVector& Location, const struct FVector& ImpactPoint);
	void OnOwnerDead_Server(const struct FGameplayTag& DamageType, class AActor* DeadActor, class AActor* DamageCauser);
	void BindEvents();
	void UpdateLaser_Local(bool IsHit, const struct FVector& HitLocation, const struct FVector& ImpactPoint);
	void Hide_LaserSkillGuideUI();
	void Show_LaserSkillGuideUI();
	void ROS_UpdateLaser_ImpactDamage(bool IsHit, const struct FVector& HitLocation);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void EndLaser();
	void UpdateLaser_ImpactDamage_Owner(bool IsHit, const struct FVector& HitLocation);
	void UpdateLaser(bool IsHit, const struct FVector& HitLocation, const struct FVector& ImpactPoint);
	void ROS_EndState();
	void MC_EndState();
	void ROS_BeginState_Clearing();
	void MC_BeginState_Clearing();
	void ROS_BeginState_Action();
	void MC_BeginState_Action();
	void ROS_BeginState_Ready();
	void MC_BeginState_Ready();
	void BeginState_Action_Oneshot_Local();
	void EndState_Local();
	void EndState();
	void TickState_Clearing(float DeltaSeconds);
	void BeginState_Clearing_Local();
	void BeginState_Clearing();
	void TickState_Action(float DeltaSeconds);
	void BeginState_Action_Local();
	void BeginState_Action();
	void TickState_Ready(float DeltaSeconds);
	void BeginState_Ready_Local();
	void BeginState_Ready();
	void StateTick(float DeltaSeconds);
	void ROS_Update_LaserEffect_Beam(class USceneComponent* TargetLauncher, const struct FRotator& BeamRotation, float BeamLength);
	void MC_Update_LaserEffect_Beam(class USceneComponent* TargetLauncher, const struct FRotator& BeamRotation, float BeamLength);
	void ROS_UpdateLaserEffect_Impact(bool IsHit, const struct FVector& Location);
	void MC_UpdateLaserEffect_Impact(bool IsHit, const struct FVector& Location);
	void Pause_AllEffects();
	void Resume_AllEffects();
	void Pause_LaserParticle_Impact();
	void Resume_LaserParticle_Impact();
	void Play_BeginLaserVoice();
	void Internal_AttachComponent_LaserImpactSE();
	void End_LaserImpactSE();
	void Pause_LaserImpactSE();
	void Internal_OnEnd_LaserImpactSE(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo);
	void UnlockResumeGate_LaserImpactSE();
	void Resume_LaserImpactSE();
	void Play_LaserImpactSE();
	void Play_LaserClearingEffect();
	void Play_LaserClearingSE();
	void Play_LaserEndMotion();
	void Restore_LaserLoopMotion();
	void Stop_LaserActivatedMotion();
	void Play_LaserLoopMotion();
	void Stop_LaserActivatedParticle();
	void Restore_LaserEffect();
	void Update_LaserEffect_Beam(bool IsHit, const struct FVector& HitLocation);
	void Init_LaserLauncher(class USceneComponent* LaserLauncher);
	void OnParticleFinished_Beam(class UParticleSystemComponent* PSystem);
	void End_LaserEffect_Beam();
	void Update_LaserEffect_Beam_Local(class USceneComponent* LaserLauncher, const struct FRotator& BeamRotation, float BeamLength);
	void Play_LaserEffect_Beam();
	void Play_LaserActionGion();
	void End_LaserBeamLoopSE();
	void Pause_LaserBeamLoopSE();
	void Internal_OnEnd_LaserBeamLoopSE(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo);
	void UnlockResumeGate_LaserBeamLoopSE();
	void Resume_LaserBeamLoopSE();
	void Play_LaserBeamLoopSE();
	void Play_ReadyLaserGion();
	void SetLaserRotation(class USceneComponent* LaserLauncher, const struct FRotator& Rotation);
	void Play_LaserActivatedParticle();
	void SetBeamLength(class USceneComponent* LaserLauncher, float Value);
	void Stop_LaserParticle_Impact();
	void EndLaserEffect();
	void UpdateLaserEffect_Impact(bool IsHit, const struct FVector& Location);
	void Play_LaserParticle_Impact(const struct FVector& Location);
	void UpdateLaser_Impact_Local(bool IsHit, const struct FVector& Location);
	void UpdateLaserEffect(bool IsHit, const struct FVector& HitLocation);
	void Run_ReadyLaserEffect();
	void OnCompleted_7DDD297442D7CC4375E0C99B9F9C3226(class FName NotifyName);
	void OnBlendOut_7DDD297442D7CC4375E0C99B9F9C3226(class FName NotifyName);
	void OnInterrupted_7DDD297442D7CC4375E0C99B9F9C3226(class FName NotifyName);
	void OnNotifyBegin_7DDD297442D7CC4375E0C99B9F9C3226(class FName NotifyName);
	void OnNotifyEnd_7DDD297442D7CC4375E0C99B9F9C3226(class FName NotifyName);
	void OnCompleted_7DDD297442D7CC4375E0C99B9358C055(class FName NotifyName);
	void OnBlendOut_7DDD297442D7CC4375E0C99B9358C055(class FName NotifyName);
	void OnInterrupted_7DDD297442D7CC4375E0C99B9358C055(class FName NotifyName);
	void OnNotifyBegin_7DDD297442D7CC4375E0C99B9358C055(class FName NotifyName);
	void OnNotifyEnd_7DDD297442D7CC4375E0C99B9358C055(class FName NotifyName);
	void OnCompleted_7DDD297442D7CC4375E0C99B7B477494(class FName NotifyName);
	void OnBlendOut_7DDD297442D7CC4375E0C99B7B477494(class FName NotifyName);
	void OnInterrupted_7DDD297442D7CC4375E0C99B7B477494(class FName NotifyName);
	void OnNotifyBegin_7DDD297442D7CC4375E0C99B7B477494(class FName NotifyName);
	void OnNotifyEnd_7DDD297442D7CC4375E0C99B7B477494(class FName NotifyName);
	void TraceLaserInfo(bool* IsHit, struct FVector* HitLocation, struct FVector* ImpactPoint);
	void IsHitObject(class AActor* HitActor, class UPrimitiveComponent* HitComponent, bool* IsHit);
	void GetLaserLaunchComponents(TArray<class USceneComponent*>* LaserLaunchComponents);
	void GetLensRotation(bool IsHit, const struct FVector& Start, const struct FVector& Target, struct FRotator* LensRotation);
	void FindChildParticleComponent(class USceneComponent* Target, bool* Success, class UParticleSystemComponent** ParticleSystem);
	void GetBeamLength(const struct FVector& Start, const struct FVector& Target, float* BeamLenght);
	void ProcessBlockingEvent(const struct FVector& ImpactPoint, class AActor* HitActor);
	void FindLauncherRadius(struct FVector* CentroidWorld, float* Radius);
	void GetLaserCentroidWithOffsetWorld(struct FVector* Centroid);
	void GetLaserCentroidWorld(struct FVector* CentroidWorld);
	void ReceiveBeginPlay();
	void StateBeginPlay(bool bShouldRestore);
	void OnCancel();
	void OnActive();
	void ReceiveTick(float DeltaSeconds);
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBLaserSkill_C">();
	}
	static class UBP_AJBLaserSkill_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBLaserSkill_C>();
	}
};
static_assert(alignof(UBP_AJBLaserSkill_C) == 0x000008, "Wrong alignment on UBP_AJBLaserSkill_C");
static_assert(sizeof(UBP_AJBLaserSkill_C) == 0x0002F8, "Wrong size on UBP_AJBLaserSkill_C");
static_assert(offsetof(UBP_AJBLaserSkill_C, UberGraphFrame_BP_AJBLaserSkill_C) == 0x0001E8, "Member 'UBP_AJBLaserSkill_C::UberGraphFrame_BP_AJBLaserSkill_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBLaserSkill_C, ReadyTime) == 0x0001F0, "Member 'UBP_AJBLaserSkill_C::ReadyTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBLaserSkill_C, ActionTime) == 0x0001F4, "Member 'UBP_AJBLaserSkill_C::ActionTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBLaserSkill_C, ClearingTime) == 0x0001F8, "Member 'UBP_AJBLaserSkill_C::ClearingTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBLaserSkill_C, TraceDistance_cm_) == 0x0001FC, "Member 'UBP_AJBLaserSkill_C::TraceDistance_cm_' has a wrong offset!");
static_assert(offsetof(UBP_AJBLaserSkill_C, TraceRadius) == 0x000200, "Member 'UBP_AJBLaserSkill_C::TraceRadius' has a wrong offset!");
static_assert(offsetof(UBP_AJBLaserSkill_C, TraceStartDistanceFromCamera_cm_) == 0x000204, "Member 'UBP_AJBLaserSkill_C::TraceStartDistanceFromCamera_cm_' has a wrong offset!");
static_assert(offsetof(UBP_AJBLaserSkill_C, TraceObjectTypes) == 0x000208, "Member 'UBP_AJBLaserSkill_C::TraceObjectTypes' has a wrong offset!");
static_assert(offsetof(UBP_AJBLaserSkill_C, LaserImpactParticleTag) == 0x000218, "Member 'UBP_AJBLaserSkill_C::LaserImpactParticleTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBLaserSkill_C, LaserActivatedParticleTag) == 0x000220, "Member 'UBP_AJBLaserSkill_C::LaserActivatedParticleTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBLaserSkill_C, LaserImpactParticle) == 0x000228, "Member 'UBP_AJBLaserSkill_C::LaserImpactParticle' has a wrong offset!");
static_assert(offsetof(UBP_AJBLaserSkill_C, LaserImpactClassClass) == 0x000230, "Member 'UBP_AJBLaserSkill_C::LaserImpactClassClass' has a wrong offset!");
static_assert(offsetof(UBP_AJBLaserSkill_C, LaserImpactAffecter) == 0x000238, "Member 'UBP_AJBLaserSkill_C::LaserImpactAffecter' has a wrong offset!");
static_assert(offsetof(UBP_AJBLaserSkill_C, LaserReadyGionTag) == 0x000240, "Member 'UBP_AJBLaserSkill_C::LaserReadyGionTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBLaserSkill_C, LaserReadySETag) == 0x000248, "Member 'UBP_AJBLaserSkill_C::LaserReadySETag' has a wrong offset!");
static_assert(offsetof(UBP_AJBLaserSkill_C, LaserBeamLoopSE) == 0x000250, "Member 'UBP_AJBLaserSkill_C::LaserBeamLoopSE' has a wrong offset!");
static_assert(offsetof(UBP_AJBLaserSkill_C, LaserBeamLoopSETag) == 0x000258, "Member 'UBP_AJBLaserSkill_C::LaserBeamLoopSETag' has a wrong offset!");
static_assert(offsetof(UBP_AJBLaserSkill_C, LaserActionGionTag) == 0x000260, "Member 'UBP_AJBLaserSkill_C::LaserActionGionTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBLaserSkill_C, TraceObjectTypesForBeam) == 0x000268, "Member 'UBP_AJBLaserSkill_C::TraceObjectTypesForBeam' has a wrong offset!");
static_assert(offsetof(UBP_AJBLaserSkill_C, LaserActivatedParticle) == 0x000278, "Member 'UBP_AJBLaserSkill_C::LaserActivatedParticle' has a wrong offset!");
static_assert(offsetof(UBP_AJBLaserSkill_C, LaserMontage) == 0x000280, "Member 'UBP_AJBLaserSkill_C::LaserMontage' has a wrong offset!");
static_assert(offsetof(UBP_AJBLaserSkill_C, StopMontageBlendTime) == 0x000288, "Member 'UBP_AJBLaserSkill_C::StopMontageBlendTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBLaserSkill_C, LaserMotion_BeginSection) == 0x000290, "Member 'UBP_AJBLaserSkill_C::LaserMotion_BeginSection' has a wrong offset!");
static_assert(offsetof(UBP_AJBLaserSkill_C, LaserMotion_LoopSection) == 0x000298, "Member 'UBP_AJBLaserSkill_C::LaserMotion_LoopSection' has a wrong offset!");
static_assert(offsetof(UBP_AJBLaserSkill_C, LaserMotion_EndSection) == 0x0002A0, "Member 'UBP_AJBLaserSkill_C::LaserMotion_EndSection' has a wrong offset!");
static_assert(offsetof(UBP_AJBLaserSkill_C, LaserClearingSETag) == 0x0002A8, "Member 'UBP_AJBLaserSkill_C::LaserClearingSETag' has a wrong offset!");
static_assert(offsetof(UBP_AJBLaserSkill_C, LaserImpactLoopSE) == 0x0002B0, "Member 'UBP_AJBLaserSkill_C::LaserImpactLoopSE' has a wrong offset!");
static_assert(offsetof(UBP_AJBLaserSkill_C, LaserImpactLoopSETag) == 0x0002B8, "Member 'UBP_AJBLaserSkill_C::LaserImpactLoopSETag' has a wrong offset!");
static_assert(offsetof(UBP_AJBLaserSkill_C, CanBlockByVanishing) == 0x0002C0, "Member 'UBP_AJBLaserSkill_C::CanBlockByVanishing' has a wrong offset!");
static_assert(offsetof(UBP_AJBLaserSkill_C, BeginLaserVoiceTag) == 0x0002C8, "Member 'UBP_AJBLaserSkill_C::BeginLaserVoiceTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBLaserSkill_C, ShouldHitByLaserVisual) == 0x0002D0, "Member 'UBP_AJBLaserSkill_C::ShouldHitByLaserVisual' has a wrong offset!");
static_assert(offsetof(UBP_AJBLaserSkill_C, ShouldLaserAimToImpactPointOnNotOwnerEnv) == 0x0002D1, "Member 'UBP_AJBLaserSkill_C::ShouldLaserAimToImpactPointOnNotOwnerEnv' has a wrong offset!");
static_assert(offsetof(UBP_AJBLaserSkill_C, LaserVisualRadius) == 0x0002D4, "Member 'UBP_AJBLaserSkill_C::LaserVisualRadius' has a wrong offset!");
static_assert(offsetof(UBP_AJBLaserSkill_C, ShouldAutoCalculateLaserVisualRadius) == 0x0002D8, "Member 'UBP_AJBLaserSkill_C::ShouldAutoCalculateLaserVisualRadius' has a wrong offset!");
static_assert(offsetof(UBP_AJBLaserSkill_C, LaserCentroidLocal) == 0x0002DC, "Member 'UBP_AJBLaserSkill_C::LaserCentroidLocal' has a wrong offset!");
static_assert(offsetof(UBP_AJBLaserSkill_C, LaserCentroidOffset) == 0x0002E8, "Member 'UBP_AJBLaserSkill_C::LaserCentroidOffset' has a wrong offset!");

}

