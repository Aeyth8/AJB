#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBHamonStatus

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BP_AJBComponentBase_classes.hpp"
#include "AJB_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBHamonStatus.BP_AJBHamonStatus_C
// 0x0058 (0x0148 - 0x00F0)
class UBP_AJBHamonStatus_C final : public UBP_AJBComponentBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00F0(0x0008)(Transient, DuplicateTransient)
	float                                         Gauge;                                             // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GaugeMax;                                          // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         State;                                             // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DecreaseWaitTime_s_;                               // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StateTime;                                         // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsHamonMode;                                      // 0x010C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10D[0x3];                                      // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IncreasedValue;                                    // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         s_;                                                // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebugLog;                                         // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bForceHamonMode;                                   // 0x0119(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11A[0x2];                                      // 0x011A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EffectiveTime;                                     // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EffectiveTimeMax;                                  // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           BeginHamonModeSETag;                               // 0x0128(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EndHamonModeVoiceTag;                              // 0x0130(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         _ForSkipOwner_Gauge;                               // 0x0138(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         UIStatusReplicationFrequency;                      // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          _ForSkipOwner_bIsHamonMode;                        // 0x0140(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)

public:
	void ExecuteUbergraph_BP_AJBHamonStatus(int32 EntryPoint);
	void Replicate_SkipOwner_UIStatus();
	void ROS_Replicate_SkipOwner_UIStatus(float Gauge_0, bool bIsHamonMode_0);
	void OnPassiveAdded(const struct FGameplayTag& AddCondition, const struct FGameplayTag& SecondTag);
	void MC_ChangeHamonMode(bool bEnable);
	void Cancel();
	void OnBecomeLastSurvivor(bool bBitesTheDust);
	void OnReceiveDamage(int32 Damage, const struct FGameplayTag& DamageType, class AActor* DamageCauser, bool bRemainHP, bool bDamageIsCutByStatus, bool bDamageIsCutByAAP, bool IsEndured);
	void ReceiveBeginPlay();
	void ROS_ChangeHamonMode(bool bEnable);
	void ChangeHamonMode(bool bEnable);
	void TickStateDecrease(float DeltaSeconds);
	void TickStateDecreaseWait();
	void TickStateIncrease();
	void TickStateNone();
	void StateTick(float DeltaTime);
	void ReceiveTick(float DeltaSeconds);
	void Play_EndHamonModeVoice();
	void SpawnStartParticle();
	void Play_BeginHamonModeSE();
	void IncreaseHamonGauge(float Value, bool bIgnoreChangeState);
	void DecreaseHamonGauge(float Value);
	void ChangeEnableHamonMode(bool bEnable);
	void ChangeHamonState(uint8 NewState);
	void ForceChangeHamonMode(bool bEnable);
	void Stop();
	void StartDecrease();
	void SetHamonGauge(float NewValue);
	void StartDecreaseWait();
	void UpdateEffectiveCount(float DeltaTime);
	void TryUpdateEffectiveTimeMax();
	void OnRep__ForSkipOwner_Gauge();
	void OnRep__ForSkipOwner_bIsHamonMode();

	void IsHamonMode(bool* bIsHamonMode_0) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBHamonStatus_C">();
	}
	static class UBP_AJBHamonStatus_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBHamonStatus_C>();
	}
};
static_assert(alignof(UBP_AJBHamonStatus_C) == 0x000008, "Wrong alignment on UBP_AJBHamonStatus_C");
static_assert(sizeof(UBP_AJBHamonStatus_C) == 0x000148, "Wrong size on UBP_AJBHamonStatus_C");
static_assert(offsetof(UBP_AJBHamonStatus_C, UberGraphFrame) == 0x0000F0, "Member 'UBP_AJBHamonStatus_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonStatus_C, Gauge) == 0x0000F8, "Member 'UBP_AJBHamonStatus_C::Gauge' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonStatus_C, GaugeMax) == 0x0000FC, "Member 'UBP_AJBHamonStatus_C::GaugeMax' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonStatus_C, State) == 0x000100, "Member 'UBP_AJBHamonStatus_C::State' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonStatus_C, DecreaseWaitTime_s_) == 0x000104, "Member 'UBP_AJBHamonStatus_C::DecreaseWaitTime_s_' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonStatus_C, StateTime) == 0x000108, "Member 'UBP_AJBHamonStatus_C::StateTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonStatus_C, bIsHamonMode) == 0x00010C, "Member 'UBP_AJBHamonStatus_C::bIsHamonMode' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonStatus_C, IncreasedValue) == 0x000110, "Member 'UBP_AJBHamonStatus_C::IncreasedValue' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonStatus_C, s_) == 0x000114, "Member 'UBP_AJBHamonStatus_C::s_' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonStatus_C, bDebugLog) == 0x000118, "Member 'UBP_AJBHamonStatus_C::bDebugLog' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonStatus_C, bForceHamonMode) == 0x000119, "Member 'UBP_AJBHamonStatus_C::bForceHamonMode' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonStatus_C, EffectiveTime) == 0x00011C, "Member 'UBP_AJBHamonStatus_C::EffectiveTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonStatus_C, EffectiveTimeMax) == 0x000120, "Member 'UBP_AJBHamonStatus_C::EffectiveTimeMax' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonStatus_C, BeginHamonModeSETag) == 0x000128, "Member 'UBP_AJBHamonStatus_C::BeginHamonModeSETag' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonStatus_C, EndHamonModeVoiceTag) == 0x000130, "Member 'UBP_AJBHamonStatus_C::EndHamonModeVoiceTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonStatus_C, _ForSkipOwner_Gauge) == 0x000138, "Member 'UBP_AJBHamonStatus_C::_ForSkipOwner_Gauge' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonStatus_C, UIStatusReplicationFrequency) == 0x00013C, "Member 'UBP_AJBHamonStatus_C::UIStatusReplicationFrequency' has a wrong offset!");
static_assert(offsetof(UBP_AJBHamonStatus_C, _ForSkipOwner_bIsHamonMode) == 0x000140, "Member 'UBP_AJBHamonStatus_C::_ForSkipOwner_bIsHamonMode' has a wrong offset!");

}

