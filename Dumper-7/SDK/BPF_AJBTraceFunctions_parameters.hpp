#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPF_AJBTraceFunctions

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "ST_TraceInfo_structs.hpp"


namespace SDK::Params
{

// Function BPF_AJBTraceFunctions.BPF_AJBTraceFunctions_C.TryGetTraceInfo
// 0x0048 (0x0048 - 0x0000)
struct BPF_AJBTraceFunctions_C_TryGetTraceInfo final
{
public:
	struct FGameplayTag                           TraceInfoTag;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               DrawDebugTrace;                                    // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DrawTime;                                          // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetTagName_ReturnValue;                   // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_TraceInfo                          CallFunc_GetDataTableRowFromName_OutRow;           // 0x0020(0x0008)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBInGamePlayerController*             K2Node_DynamicCast_AsAJBIn_Game_Player_Controller; // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBTraceFunctions_C_TryGetTraceInfo) == 0x000008, "Wrong alignment on BPF_AJBTraceFunctions_C_TryGetTraceInfo");
static_assert(sizeof(BPF_AJBTraceFunctions_C_TryGetTraceInfo) == 0x000048, "Wrong size on BPF_AJBTraceFunctions_C_TryGetTraceInfo");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TryGetTraceInfo, TraceInfoTag) == 0x000000, "Member 'BPF_AJBTraceFunctions_C_TryGetTraceInfo::TraceInfoTag' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TryGetTraceInfo, __WorldContext) == 0x000008, "Member 'BPF_AJBTraceFunctions_C_TryGetTraceInfo::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TryGetTraceInfo, DrawDebugTrace) == 0x000010, "Member 'BPF_AJBTraceFunctions_C_TryGetTraceInfo::DrawDebugTrace' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TryGetTraceInfo, DrawTime) == 0x000014, "Member 'BPF_AJBTraceFunctions_C_TryGetTraceInfo::DrawTime' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TryGetTraceInfo, CallFunc_GetTagName_ReturnValue) == 0x000018, "Member 'BPF_AJBTraceFunctions_C_TryGetTraceInfo::CallFunc_GetTagName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TryGetTraceInfo, CallFunc_GetDataTableRowFromName_OutRow) == 0x000020, "Member 'BPF_AJBTraceFunctions_C_TryGetTraceInfo::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TryGetTraceInfo, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000028, "Member 'BPF_AJBTraceFunctions_C_TryGetTraceInfo::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TryGetTraceInfo, CallFunc_GetPlayerController_ReturnValue) == 0x000030, "Member 'BPF_AJBTraceFunctions_C_TryGetTraceInfo::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TryGetTraceInfo, K2Node_DynamicCast_AsAJBIn_Game_Player_Controller) == 0x000038, "Member 'BPF_AJBTraceFunctions_C_TryGetTraceInfo::K2Node_DynamicCast_AsAJBIn_Game_Player_Controller' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TryGetTraceInfo, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BPF_AJBTraceFunctions_C_TryGetTraceInfo::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TryGetTraceInfo, CallFunc_IsDedicatedServer_ReturnValue) == 0x000041, "Member 'BPF_AJBTraceFunctions_C_TryGetTraceInfo::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");

// Function BPF_AJBTraceFunctions.BPF_AJBTraceFunctions_C.AJBMultiSphereTraceForObjects
// 0x00B0 (0x00B0 - 0x0000)
struct BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects final
{
public:
	struct FGameplayTag                           TraceInfoTag;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Start;                                             // 0x0008(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x0014(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0028(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bTraceComplex;                                     // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0040(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bIgnoreSelf;                                       // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceColor;                                        // 0x0054(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TraceHitColor;                                     // 0x0064(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FHitResult>                     OutHits;                                           // 0x0080(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	EDrawDebugTrace                               CallFunc_TryGetTraceInfo_DrawDebugTrace;           // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_92[0x2];                                       // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_TryGetTraceInfo_DrawTime;                 // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FHitResult>                     CallFunc_SphereTraceMultiForObjects_OutHits;       // 0x0098(0x0010)(ZeroConstructor, ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceMultiForObjects_ReturnValue;   // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects) == 0x000008, "Wrong alignment on BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects");
static_assert(sizeof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects) == 0x0000B0, "Wrong size on BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects, TraceInfoTag) == 0x000000, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects::TraceInfoTag' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects, Start) == 0x000008, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects::Start' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects, End) == 0x000014, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects::End' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects, Radius) == 0x000020, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects::Radius' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects, ObjectTypes) == 0x000028, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects::ObjectTypes' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects, bTraceComplex) == 0x000038, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects::bTraceComplex' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects, ActorsToIgnore) == 0x000040, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects, bIgnoreSelf) == 0x000050, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects, TraceColor) == 0x000054, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects::TraceColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects, TraceHitColor) == 0x000064, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects::TraceHitColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects, __WorldContext) == 0x000078, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects, OutHits) == 0x000080, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects::OutHits' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects, ReturnValue) == 0x000090, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects, CallFunc_TryGetTraceInfo_DrawDebugTrace) == 0x000091, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects::CallFunc_TryGetTraceInfo_DrawDebugTrace' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects, CallFunc_TryGetTraceInfo_DrawTime) == 0x000094, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects::CallFunc_TryGetTraceInfo_DrawTime' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects, CallFunc_SphereTraceMultiForObjects_OutHits) == 0x000098, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects::CallFunc_SphereTraceMultiForObjects_OutHits' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects, CallFunc_SphereTraceMultiForObjects_ReturnValue) == 0x0000A8, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceForObjects::CallFunc_SphereTraceMultiForObjects_ReturnValue' has a wrong offset!");

// Function BPF_AJBTraceFunctions.BPF_AJBTraceFunctions_C.AJBLineTraceForObjects
// 0x0198 (0x0198 - 0x0000)
struct BPF_AJBTraceFunctions_C_AJBLineTraceForObjects final
{
public:
	struct FGameplayTag                           TraceInfoTag;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Start;                                             // 0x0008(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x0014(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0020(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bTraceComplex;                                     // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0038(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bIgnoreSelf;                                       // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceColor;                                        // 0x004C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TraceHitColor;                                     // 0x005C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             OutHit;                                            // 0x0078(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x0100(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	EDrawDebugTrace                               CallFunc_TryGetTraceInfo_DrawDebugTrace;           // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_102[0x2];                                      // 0x0102(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_TryGetTraceInfo_DrawTime;                 // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0108(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBTraceFunctions_C_AJBLineTraceForObjects) == 0x000008, "Wrong alignment on BPF_AJBTraceFunctions_C_AJBLineTraceForObjects");
static_assert(sizeof(BPF_AJBTraceFunctions_C_AJBLineTraceForObjects) == 0x000198, "Wrong size on BPF_AJBTraceFunctions_C_AJBLineTraceForObjects");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceForObjects, TraceInfoTag) == 0x000000, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceForObjects::TraceInfoTag' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceForObjects, Start) == 0x000008, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceForObjects::Start' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceForObjects, End) == 0x000014, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceForObjects::End' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceForObjects, ObjectTypes) == 0x000020, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceForObjects::ObjectTypes' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceForObjects, bTraceComplex) == 0x000030, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceForObjects::bTraceComplex' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceForObjects, ActorsToIgnore) == 0x000038, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceForObjects::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceForObjects, bIgnoreSelf) == 0x000048, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceForObjects::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceForObjects, TraceColor) == 0x00004C, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceForObjects::TraceColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceForObjects, TraceHitColor) == 0x00005C, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceForObjects::TraceHitColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceForObjects, __WorldContext) == 0x000070, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceForObjects::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceForObjects, OutHit) == 0x000078, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceForObjects::OutHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceForObjects, ReturnValue) == 0x000100, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceForObjects::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceForObjects, CallFunc_TryGetTraceInfo_DrawDebugTrace) == 0x000101, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceForObjects::CallFunc_TryGetTraceInfo_DrawDebugTrace' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceForObjects, CallFunc_TryGetTraceInfo_DrawTime) == 0x000104, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceForObjects::CallFunc_TryGetTraceInfo_DrawTime' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceForObjects, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000108, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceForObjects::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceForObjects, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000190, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceForObjects::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");

// Function BPF_AJBTraceFunctions.BPF_AJBTraceFunctions_C.AJBSphereTraceForObjects
// 0x01A0 (0x01A0 - 0x0000)
struct BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects final
{
public:
	struct FGameplayTag                           TraceInfoTag;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Start;                                             // 0x0008(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x0014(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0028(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bTraceComplex;                                     // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0040(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bIgnoreSelf;                                       // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceColor;                                        // 0x0054(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TraceHitColor;                                     // 0x0064(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             OutHit;                                            // 0x0080(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x0108(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	EDrawDebugTrace                               CallFunc_TryGetTraceInfo_DrawDebugTrace;           // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10A[0x2];                                      // 0x010A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_TryGetTraceInfo_DrawTime;                 // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingleForObjects_OutHit;       // 0x0110(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingleForObjects_ReturnValue;  // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects) == 0x000008, "Wrong alignment on BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects");
static_assert(sizeof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects) == 0x0001A0, "Wrong size on BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects, TraceInfoTag) == 0x000000, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects::TraceInfoTag' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects, Start) == 0x000008, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects::Start' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects, End) == 0x000014, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects::End' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects, Radius) == 0x000020, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects::Radius' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects, ObjectTypes) == 0x000028, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects::ObjectTypes' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects, bTraceComplex) == 0x000038, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects::bTraceComplex' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects, ActorsToIgnore) == 0x000040, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects, bIgnoreSelf) == 0x000050, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects, TraceColor) == 0x000054, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects::TraceColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects, TraceHitColor) == 0x000064, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects::TraceHitColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects, __WorldContext) == 0x000078, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects, OutHit) == 0x000080, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects::OutHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects, ReturnValue) == 0x000108, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects, CallFunc_TryGetTraceInfo_DrawDebugTrace) == 0x000109, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects::CallFunc_TryGetTraceInfo_DrawDebugTrace' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects, CallFunc_TryGetTraceInfo_DrawTime) == 0x00010C, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects::CallFunc_TryGetTraceInfo_DrawTime' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects, CallFunc_SphereTraceSingleForObjects_OutHit) == 0x000110, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects::CallFunc_SphereTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects, CallFunc_SphereTraceSingleForObjects_ReturnValue) == 0x000198, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjects::CallFunc_SphereTraceSingleForObjects_ReturnValue' has a wrong offset!");

// Function BPF_AJBTraceFunctions.BPF_AJBTraceFunctions_C.AJBLineTraceByChannel
// 0x0188 (0x0188 - 0x0000)
struct BPF_AJBTraceFunctions_C_AJBLineTraceByChannel final
{
public:
	struct FGameplayTag                           TraceInfoTag;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Start;                                             // 0x0008(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x0014(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETraceTypeQuery                               TraceChannel;                                      // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTraceComplex;                                     // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0028(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bIgnoreSelf;                                       // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceColor;                                        // 0x003C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TraceHitColor;                                     // 0x004C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             OutHit;                                            // 0x0068(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	EDrawDebugTrace                               CallFunc_TryGetTraceInfo_DrawDebugTrace;           // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F2[0x2];                                       // 0x00F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_TryGetTraceInfo_DrawTime;                 // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x00F8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannel) == 0x000008, "Wrong alignment on BPF_AJBTraceFunctions_C_AJBLineTraceByChannel");
static_assert(sizeof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannel) == 0x000188, "Wrong size on BPF_AJBTraceFunctions_C_AJBLineTraceByChannel");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannel, TraceInfoTag) == 0x000000, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannel::TraceInfoTag' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannel, Start) == 0x000008, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannel::Start' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannel, End) == 0x000014, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannel::End' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannel, TraceChannel) == 0x000020, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannel::TraceChannel' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannel, bTraceComplex) == 0x000021, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannel::bTraceComplex' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannel, ActorsToIgnore) == 0x000028, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannel::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannel, bIgnoreSelf) == 0x000038, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannel::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannel, TraceColor) == 0x00003C, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannel::TraceColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannel, TraceHitColor) == 0x00004C, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannel::TraceHitColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannel, __WorldContext) == 0x000060, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannel::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannel, OutHit) == 0x000068, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannel::OutHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannel, ReturnValue) == 0x0000F0, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannel::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannel, CallFunc_TryGetTraceInfo_DrawDebugTrace) == 0x0000F1, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannel::CallFunc_TryGetTraceInfo_DrawDebugTrace' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannel, CallFunc_TryGetTraceInfo_DrawTime) == 0x0000F4, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannel::CallFunc_TryGetTraceInfo_DrawTime' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannel, CallFunc_LineTraceSingle_OutHit) == 0x0000F8, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannel::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannel, CallFunc_LineTraceSingle_ReturnValue) == 0x000180, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannel::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");

// Function BPF_AJBTraceFunctions.BPF_AJBTraceFunctions_C.AJBCapsuleTraceByChannel
// 0x0190 (0x0190 - 0x0000)
struct BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel final
{
public:
	struct FGameplayTag                           TraceInfoTag;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Start;                                             // 0x0008(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x0014(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HalfHeight;                                        // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETraceTypeQuery                               TraceChannel;                                      // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTraceComplex;                                     // 0x0029(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0030(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bIgnoreSelf;                                       // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceColor;                                        // 0x0044(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TraceHitColor;                                     // 0x0054(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             OutHit;                                            // 0x0070(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x00F8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	EDrawDebugTrace                               CallFunc_TryGetTraceInfo_DrawDebugTrace;           // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FA[0x2];                                       // 0x00FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_TryGetTraceInfo_DrawTime;                 // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_CapsuleTraceSingle_OutHit;                // 0x0100(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_CapsuleTraceSingle_ReturnValue;           // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel) == 0x000008, "Wrong alignment on BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel");
static_assert(sizeof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel) == 0x000190, "Wrong size on BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel, TraceInfoTag) == 0x000000, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel::TraceInfoTag' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel, Start) == 0x000008, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel::Start' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel, End) == 0x000014, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel::End' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel, Radius) == 0x000020, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel::Radius' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel, HalfHeight) == 0x000024, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel::HalfHeight' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel, TraceChannel) == 0x000028, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel::TraceChannel' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel, bTraceComplex) == 0x000029, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel::bTraceComplex' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel, ActorsToIgnore) == 0x000030, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel, bIgnoreSelf) == 0x000040, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel, TraceColor) == 0x000044, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel::TraceColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel, TraceHitColor) == 0x000054, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel::TraceHitColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel, __WorldContext) == 0x000068, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel, OutHit) == 0x000070, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel::OutHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel, ReturnValue) == 0x0000F8, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel, CallFunc_TryGetTraceInfo_DrawDebugTrace) == 0x0000F9, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel::CallFunc_TryGetTraceInfo_DrawDebugTrace' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel, CallFunc_TryGetTraceInfo_DrawTime) == 0x0000FC, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel::CallFunc_TryGetTraceInfo_DrawTime' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel, CallFunc_CapsuleTraceSingle_OutHit) == 0x000100, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel::CallFunc_CapsuleTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel, CallFunc_CapsuleTraceSingle_ReturnValue) == 0x000188, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceByChannel::CallFunc_CapsuleTraceSingle_ReturnValue' has a wrong offset!");

// Function BPF_AJBTraceFunctions.BPF_AJBTraceFunctions_C.AJBMultiLineTraceForObjects
// 0x00A8 (0x00A8 - 0x0000)
struct BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects final
{
public:
	struct FGameplayTag                           TraceInfoTag;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Start;                                             // 0x0008(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x0014(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0020(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bTraceComplex;                                     // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0038(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bIgnoreSelf;                                       // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceColor;                                        // 0x004C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TraceHitColor;                                     // 0x005C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FHitResult>                     OutHits;                                           // 0x0078(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	EDrawDebugTrace                               CallFunc_TryGetTraceInfo_DrawDebugTrace;           // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_TryGetTraceInfo_DrawTime;                 // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FHitResult>                     CallFunc_LineTraceMultiForObjects_OutHits;         // 0x0090(0x0010)(ZeroConstructor, ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceMultiForObjects_ReturnValue;     // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects) == 0x000008, "Wrong alignment on BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects");
static_assert(sizeof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects) == 0x0000A8, "Wrong size on BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects, TraceInfoTag) == 0x000000, "Member 'BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects::TraceInfoTag' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects, Start) == 0x000008, "Member 'BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects::Start' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects, End) == 0x000014, "Member 'BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects::End' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects, ObjectTypes) == 0x000020, "Member 'BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects::ObjectTypes' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects, bTraceComplex) == 0x000030, "Member 'BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects::bTraceComplex' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects, ActorsToIgnore) == 0x000038, "Member 'BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects, bIgnoreSelf) == 0x000048, "Member 'BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects, TraceColor) == 0x00004C, "Member 'BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects::TraceColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects, TraceHitColor) == 0x00005C, "Member 'BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects::TraceHitColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects, __WorldContext) == 0x000070, "Member 'BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects, OutHits) == 0x000078, "Member 'BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects::OutHits' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects, ReturnValue) == 0x000088, "Member 'BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects, CallFunc_TryGetTraceInfo_DrawDebugTrace) == 0x000089, "Member 'BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects::CallFunc_TryGetTraceInfo_DrawDebugTrace' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects, CallFunc_TryGetTraceInfo_DrawTime) == 0x00008C, "Member 'BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects::CallFunc_TryGetTraceInfo_DrawTime' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects, CallFunc_LineTraceMultiForObjects_OutHits) == 0x000090, "Member 'BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects::CallFunc_LineTraceMultiForObjects_OutHits' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects, CallFunc_LineTraceMultiForObjects_ReturnValue) == 0x0000A0, "Member 'BPF_AJBTraceFunctions_C_AJBMultiLineTraceForObjects::CallFunc_LineTraceMultiForObjects_ReturnValue' has a wrong offset!");

// Function BPF_AJBTraceFunctions.BPF_AJBTraceFunctions_C.AJBMultiCapsuleTraceForObjects
// 0x00B0 (0x00B0 - 0x0000)
struct BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects final
{
public:
	struct FGameplayTag                           TraceInfoTag;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Start;                                             // 0x0008(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x0014(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HalfHeight;                                        // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0028(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bTraceComplex;                                     // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0040(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bIgnoreSelf;                                       // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceColor;                                        // 0x0054(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TraceHitColor;                                     // 0x0064(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FHitResult>                     OutHits;                                           // 0x0080(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	EDrawDebugTrace                               CallFunc_TryGetTraceInfo_DrawDebugTrace;           // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_92[0x2];                                       // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_TryGetTraceInfo_DrawTime;                 // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FHitResult>                     CallFunc_CapsuleTraceMultiForObjects_OutHits;      // 0x0098(0x0010)(ZeroConstructor, ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_CapsuleTraceMultiForObjects_ReturnValue;  // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects) == 0x000008, "Wrong alignment on BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects");
static_assert(sizeof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects) == 0x0000B0, "Wrong size on BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects, TraceInfoTag) == 0x000000, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects::TraceInfoTag' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects, Start) == 0x000008, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects::Start' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects, End) == 0x000014, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects::End' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects, Radius) == 0x000020, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects::Radius' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects, HalfHeight) == 0x000024, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects::HalfHeight' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects, ObjectTypes) == 0x000028, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects::ObjectTypes' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects, bTraceComplex) == 0x000038, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects::bTraceComplex' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects, ActorsToIgnore) == 0x000040, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects, bIgnoreSelf) == 0x000050, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects, TraceColor) == 0x000054, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects::TraceColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects, TraceHitColor) == 0x000064, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects::TraceHitColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects, __WorldContext) == 0x000078, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects, OutHits) == 0x000080, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects::OutHits' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects, ReturnValue) == 0x000090, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects, CallFunc_TryGetTraceInfo_DrawDebugTrace) == 0x000091, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects::CallFunc_TryGetTraceInfo_DrawDebugTrace' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects, CallFunc_TryGetTraceInfo_DrawTime) == 0x000094, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects::CallFunc_TryGetTraceInfo_DrawTime' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects, CallFunc_CapsuleTraceMultiForObjects_OutHits) == 0x000098, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects::CallFunc_CapsuleTraceMultiForObjects_OutHits' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects, CallFunc_CapsuleTraceMultiForObjects_ReturnValue) == 0x0000A8, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceForObjects::CallFunc_CapsuleTraceMultiForObjects_ReturnValue' has a wrong offset!");

// Function BPF_AJBTraceFunctions.BPF_AJBTraceFunctions_C.AJBMultiSphereTraceByProfile
// 0x00A8 (0x00A8 - 0x0000)
struct BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile final
{
public:
	struct FGameplayTag                           TraceInfoTag;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Start;                                             // 0x0008(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x0014(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ProfileName;                                       // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTraceComplex;                                     // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0038(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bIgnoreSelf;                                       // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceColor;                                        // 0x004C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TraceHitColor;                                     // 0x005C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FHitResult>                     OutHits;                                           // 0x0078(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	EDrawDebugTrace                               CallFunc_TryGetTraceInfo_DrawDebugTrace;           // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_TryGetTraceInfo_DrawTime;                 // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FHitResult>                     CallFunc_SphereTraceMultiByProfile_OutHits;        // 0x0090(0x0010)(ZeroConstructor, ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceMultiByProfile_ReturnValue;    // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile) == 0x000008, "Wrong alignment on BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile");
static_assert(sizeof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile) == 0x0000A8, "Wrong size on BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile, TraceInfoTag) == 0x000000, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile::TraceInfoTag' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile, Start) == 0x000008, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile::Start' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile, End) == 0x000014, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile::End' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile, Radius) == 0x000020, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile::Radius' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile, ProfileName) == 0x000028, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile::ProfileName' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile, bTraceComplex) == 0x000030, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile::bTraceComplex' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile, ActorsToIgnore) == 0x000038, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile, bIgnoreSelf) == 0x000048, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile, TraceColor) == 0x00004C, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile::TraceColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile, TraceHitColor) == 0x00005C, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile::TraceHitColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile, __WorldContext) == 0x000070, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile, OutHits) == 0x000078, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile::OutHits' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile, ReturnValue) == 0x000088, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile, CallFunc_TryGetTraceInfo_DrawDebugTrace) == 0x000089, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile::CallFunc_TryGetTraceInfo_DrawDebugTrace' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile, CallFunc_TryGetTraceInfo_DrawTime) == 0x00008C, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile::CallFunc_TryGetTraceInfo_DrawTime' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile, CallFunc_SphereTraceMultiByProfile_OutHits) == 0x000090, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile::CallFunc_SphereTraceMultiByProfile_OutHits' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile, CallFunc_SphereTraceMultiByProfile_ReturnValue) == 0x0000A0, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByProfile::CallFunc_SphereTraceMultiByProfile_ReturnValue' has a wrong offset!");

// Function BPF_AJBTraceFunctions.BPF_AJBTraceFunctions_C.AJBMultiLineTraceByChannel
// 0x0098 (0x0098 - 0x0000)
struct BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel final
{
public:
	struct FGameplayTag                           TraceInfoTag;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Start;                                             // 0x0008(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x0014(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETraceTypeQuery                               TraceChannel;                                      // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTraceComplex;                                     // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0028(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bIgnoreSelf;                                       // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceColor;                                        // 0x003C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TraceHitColor;                                     // 0x004C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FHitResult>                     OutHits;                                           // 0x0068(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	EDrawDebugTrace                               CallFunc_TryGetTraceInfo_DrawDebugTrace;           // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_TryGetTraceInfo_DrawTime;                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FHitResult>                     CallFunc_LineTraceMulti_OutHits;                   // 0x0080(0x0010)(ZeroConstructor, ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceMulti_ReturnValue;               // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel) == 0x000008, "Wrong alignment on BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel");
static_assert(sizeof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel) == 0x000098, "Wrong size on BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel, TraceInfoTag) == 0x000000, "Member 'BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel::TraceInfoTag' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel, Start) == 0x000008, "Member 'BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel::Start' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel, End) == 0x000014, "Member 'BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel::End' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel, TraceChannel) == 0x000020, "Member 'BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel::TraceChannel' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel, bTraceComplex) == 0x000021, "Member 'BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel::bTraceComplex' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel, ActorsToIgnore) == 0x000028, "Member 'BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel, bIgnoreSelf) == 0x000038, "Member 'BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel, TraceColor) == 0x00003C, "Member 'BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel::TraceColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel, TraceHitColor) == 0x00004C, "Member 'BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel::TraceHitColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel, __WorldContext) == 0x000060, "Member 'BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel, OutHits) == 0x000068, "Member 'BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel::OutHits' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel, ReturnValue) == 0x000078, "Member 'BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel, CallFunc_TryGetTraceInfo_DrawDebugTrace) == 0x000079, "Member 'BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel::CallFunc_TryGetTraceInfo_DrawDebugTrace' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel, CallFunc_TryGetTraceInfo_DrawTime) == 0x00007C, "Member 'BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel::CallFunc_TryGetTraceInfo_DrawTime' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel, CallFunc_LineTraceMulti_OutHits) == 0x000080, "Member 'BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel::CallFunc_LineTraceMulti_OutHits' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel, CallFunc_LineTraceMulti_ReturnValue) == 0x000090, "Member 'BPF_AJBTraceFunctions_C_AJBMultiLineTraceByChannel::CallFunc_LineTraceMulti_ReturnValue' has a wrong offset!");

// Function BPF_AJBTraceFunctions.BPF_AJBTraceFunctions_C.AJBMultiSphereTraceByChannel
// 0x0098 (0x0098 - 0x0000)
struct BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel final
{
public:
	struct FGameplayTag                           TraceInfoTag;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Start;                                             // 0x0008(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x0014(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETraceTypeQuery                               TraceChannel;                                      // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTraceComplex;                                     // 0x0025(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0028(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bIgnoreSelf;                                       // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceColor;                                        // 0x003C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TraceHitColor;                                     // 0x004C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FHitResult>                     OutHits;                                           // 0x0068(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	EDrawDebugTrace                               CallFunc_TryGetTraceInfo_DrawDebugTrace;           // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_TryGetTraceInfo_DrawTime;                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FHitResult>                     CallFunc_SphereTraceMulti_OutHits;                 // 0x0080(0x0010)(ZeroConstructor, ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceMulti_ReturnValue;             // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel) == 0x000008, "Wrong alignment on BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel");
static_assert(sizeof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel) == 0x000098, "Wrong size on BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel, TraceInfoTag) == 0x000000, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel::TraceInfoTag' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel, Start) == 0x000008, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel::Start' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel, End) == 0x000014, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel::End' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel, Radius) == 0x000020, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel::Radius' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel, TraceChannel) == 0x000024, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel::TraceChannel' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel, bTraceComplex) == 0x000025, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel::bTraceComplex' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel, ActorsToIgnore) == 0x000028, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel, bIgnoreSelf) == 0x000038, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel, TraceColor) == 0x00003C, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel::TraceColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel, TraceHitColor) == 0x00004C, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel::TraceHitColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel, __WorldContext) == 0x000060, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel, OutHits) == 0x000068, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel::OutHits' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel, ReturnValue) == 0x000078, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel, CallFunc_TryGetTraceInfo_DrawDebugTrace) == 0x000079, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel::CallFunc_TryGetTraceInfo_DrawDebugTrace' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel, CallFunc_TryGetTraceInfo_DrawTime) == 0x00007C, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel::CallFunc_TryGetTraceInfo_DrawTime' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel, CallFunc_SphereTraceMulti_OutHits) == 0x000080, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel::CallFunc_SphereTraceMulti_OutHits' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel, CallFunc_SphereTraceMulti_ReturnValue) == 0x000090, "Member 'BPF_AJBTraceFunctions_C_AJBMultiSphereTraceByChannel::CallFunc_SphereTraceMulti_ReturnValue' has a wrong offset!");

// Function BPF_AJBTraceFunctions.BPF_AJBTraceFunctions_C.AJBMultiCapsuleTraceByChannel
// 0x00A0 (0x00A0 - 0x0000)
struct BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel final
{
public:
	struct FGameplayTag                           TraceInfoTag;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Start;                                             // 0x0008(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x0014(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HalfHeight;                                        // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETraceTypeQuery                               TraceChannel;                                      // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTraceComplex;                                     // 0x0029(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0030(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bIgnoreSelf;                                       // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceColor;                                        // 0x0044(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TraceHitColor;                                     // 0x0054(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FHitResult>                     OutHits;                                           // 0x0070(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	EDrawDebugTrace                               CallFunc_TryGetTraceInfo_DrawDebugTrace;           // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_TryGetTraceInfo_DrawTime;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FHitResult>                     CallFunc_CapsuleTraceMulti_OutHits;                // 0x0088(0x0010)(ZeroConstructor, ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_CapsuleTraceMulti_ReturnValue;            // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel) == 0x000008, "Wrong alignment on BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel");
static_assert(sizeof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel) == 0x0000A0, "Wrong size on BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel, TraceInfoTag) == 0x000000, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel::TraceInfoTag' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel, Start) == 0x000008, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel::Start' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel, End) == 0x000014, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel::End' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel, Radius) == 0x000020, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel::Radius' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel, HalfHeight) == 0x000024, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel::HalfHeight' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel, TraceChannel) == 0x000028, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel::TraceChannel' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel, bTraceComplex) == 0x000029, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel::bTraceComplex' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel, ActorsToIgnore) == 0x000030, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel, bIgnoreSelf) == 0x000040, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel, TraceColor) == 0x000044, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel::TraceColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel, TraceHitColor) == 0x000054, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel::TraceHitColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel, __WorldContext) == 0x000068, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel, OutHits) == 0x000070, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel::OutHits' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel, ReturnValue) == 0x000080, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel, CallFunc_TryGetTraceInfo_DrawDebugTrace) == 0x000081, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel::CallFunc_TryGetTraceInfo_DrawDebugTrace' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel, CallFunc_TryGetTraceInfo_DrawTime) == 0x000084, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel::CallFunc_TryGetTraceInfo_DrawTime' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel, CallFunc_CapsuleTraceMulti_OutHits) == 0x000088, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel::CallFunc_CapsuleTraceMulti_OutHits' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel, CallFunc_CapsuleTraceMulti_ReturnValue) == 0x000098, "Member 'BPF_AJBTraceFunctions_C_AJBMultiCapsuleTraceByChannel::CallFunc_CapsuleTraceMulti_ReturnValue' has a wrong offset!");

// Function BPF_AJBTraceFunctions.BPF_AJBTraceFunctions_C.AJBBoxTraceByChannel
// 0x01A0 (0x01A0 - 0x0000)
struct BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel final
{
public:
	struct FGameplayTag                           TraceInfoTag;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Start;                                             // 0x0008(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x0014(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HalfSize;                                          // 0x0020(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Orientation;                                       // 0x002C(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	ETraceTypeQuery                               TraceChannel;                                      // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTraceComplex;                                     // 0x0039(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0040(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bIgnoreSelf;                                       // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceColor;                                        // 0x0054(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TraceHitColor;                                     // 0x0064(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             OutHit;                                            // 0x0080(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x0108(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	EDrawDebugTrace                               CallFunc_TryGetTraceInfo_DrawDebugTrace;           // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10A[0x2];                                      // 0x010A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_TryGetTraceInfo_DrawTime;                 // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_BoxTraceSingle_OutHit;                    // 0x0110(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BoxTraceSingle_ReturnValue;               // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel) == 0x000008, "Wrong alignment on BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel");
static_assert(sizeof(BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel) == 0x0001A0, "Wrong size on BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel, TraceInfoTag) == 0x000000, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel::TraceInfoTag' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel, Start) == 0x000008, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel::Start' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel, End) == 0x000014, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel::End' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel, HalfSize) == 0x000020, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel::HalfSize' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel, Orientation) == 0x00002C, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel::Orientation' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel, TraceChannel) == 0x000038, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel::TraceChannel' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel, bTraceComplex) == 0x000039, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel::bTraceComplex' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel, ActorsToIgnore) == 0x000040, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel, bIgnoreSelf) == 0x000050, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel, TraceColor) == 0x000054, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel::TraceColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel, TraceHitColor) == 0x000064, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel::TraceHitColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel, __WorldContext) == 0x000078, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel, OutHit) == 0x000080, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel::OutHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel, ReturnValue) == 0x000108, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel, CallFunc_TryGetTraceInfo_DrawDebugTrace) == 0x000109, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel::CallFunc_TryGetTraceInfo_DrawDebugTrace' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel, CallFunc_TryGetTraceInfo_DrawTime) == 0x00010C, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel::CallFunc_TryGetTraceInfo_DrawTime' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel, CallFunc_BoxTraceSingle_OutHit) == 0x000110, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel::CallFunc_BoxTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel, CallFunc_BoxTraceSingle_ReturnValue) == 0x000198, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceByChannel::CallFunc_BoxTraceSingle_ReturnValue' has a wrong offset!");

// Function BPF_AJBTraceFunctions.BPF_AJBTraceFunctions_C.AJBBoxTraceForObjects
// 0x01B0 (0x01B0 - 0x0000)
struct BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects final
{
public:
	struct FGameplayTag                           TraceInfoTag;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Start;                                             // 0x0008(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x0014(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HalfSize;                                          // 0x0020(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Orientation;                                       // 0x002C(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0038(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bTraceComplex;                                     // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0050(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bIgnoreSelf;                                       // 0x0060(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceColor;                                        // 0x0064(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TraceHitColor;                                     // 0x0074(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0088(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             OutHit;                                            // 0x0090(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x0118(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	EDrawDebugTrace                               CallFunc_TryGetTraceInfo_DrawDebugTrace;           // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11A[0x2];                                      // 0x011A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_TryGetTraceInfo_DrawTime;                 // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_BoxTraceSingleForObjects_OutHit;          // 0x0120(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BoxTraceSingleForObjects_ReturnValue;     // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects) == 0x000008, "Wrong alignment on BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects");
static_assert(sizeof(BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects) == 0x0001B0, "Wrong size on BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects, TraceInfoTag) == 0x000000, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects::TraceInfoTag' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects, Start) == 0x000008, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects::Start' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects, End) == 0x000014, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects::End' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects, HalfSize) == 0x000020, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects::HalfSize' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects, Orientation) == 0x00002C, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects::Orientation' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects, ObjectTypes) == 0x000038, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects::ObjectTypes' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects, bTraceComplex) == 0x000048, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects::bTraceComplex' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects, ActorsToIgnore) == 0x000050, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects, bIgnoreSelf) == 0x000060, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects, TraceColor) == 0x000064, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects::TraceColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects, TraceHitColor) == 0x000074, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects::TraceHitColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects, __WorldContext) == 0x000088, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects, OutHit) == 0x000090, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects::OutHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects, ReturnValue) == 0x000118, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects, CallFunc_TryGetTraceInfo_DrawDebugTrace) == 0x000119, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects::CallFunc_TryGetTraceInfo_DrawDebugTrace' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects, CallFunc_TryGetTraceInfo_DrawTime) == 0x00011C, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects::CallFunc_TryGetTraceInfo_DrawTime' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects, CallFunc_BoxTraceSingleForObjects_OutHit) == 0x000120, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects::CallFunc_BoxTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects, CallFunc_BoxTraceSingleForObjects_ReturnValue) == 0x0001A8, "Member 'BPF_AJBTraceFunctions_C_AJBBoxTraceForObjects::CallFunc_BoxTraceSingleForObjects_ReturnValue' has a wrong offset!");

// Function BPF_AJBTraceFunctions.BPF_AJBTraceFunctions_C.AJBCapsuleTraceForObjects
// 0x01A0 (0x01A0 - 0x0000)
struct BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects final
{
public:
	struct FGameplayTag                           TraceInfoTag;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Start;                                             // 0x0008(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x0014(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HalfHeight;                                        // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0028(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bTraceComplex;                                     // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0040(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bIgnoreSelf;                                       // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceColor;                                        // 0x0054(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TraceHitColor;                                     // 0x0064(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             OutHit;                                            // 0x0080(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x0108(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	EDrawDebugTrace                               CallFunc_TryGetTraceInfo_DrawDebugTrace;           // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10A[0x2];                                      // 0x010A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_TryGetTraceInfo_DrawTime;                 // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_CapsuleTraceSingleForObjects_OutHit;      // 0x0110(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_CapsuleTraceSingleForObjects_ReturnValue; // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects) == 0x000008, "Wrong alignment on BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects");
static_assert(sizeof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects) == 0x0001A0, "Wrong size on BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects, TraceInfoTag) == 0x000000, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects::TraceInfoTag' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects, Start) == 0x000008, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects::Start' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects, End) == 0x000014, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects::End' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects, Radius) == 0x000020, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects::Radius' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects, HalfHeight) == 0x000024, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects::HalfHeight' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects, ObjectTypes) == 0x000028, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects::ObjectTypes' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects, bTraceComplex) == 0x000038, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects::bTraceComplex' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects, ActorsToIgnore) == 0x000040, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects, bIgnoreSelf) == 0x000050, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects, TraceColor) == 0x000054, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects::TraceColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects, TraceHitColor) == 0x000064, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects::TraceHitColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects, __WorldContext) == 0x000078, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects, OutHit) == 0x000080, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects::OutHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects, ReturnValue) == 0x000108, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects, CallFunc_TryGetTraceInfo_DrawDebugTrace) == 0x000109, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects::CallFunc_TryGetTraceInfo_DrawDebugTrace' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects, CallFunc_TryGetTraceInfo_DrawTime) == 0x00010C, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects::CallFunc_TryGetTraceInfo_DrawTime' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects, CallFunc_CapsuleTraceSingleForObjects_OutHit) == 0x000110, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects::CallFunc_CapsuleTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects, CallFunc_CapsuleTraceSingleForObjects_ReturnValue) == 0x000198, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjects::CallFunc_CapsuleTraceSingleForObjects_ReturnValue' has a wrong offset!");

// Function BPF_AJBTraceFunctions.BPF_AJBTraceFunctions_C.AJBMultiBoxTraceForObjects
// 0x00C0 (0x00C0 - 0x0000)
struct BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects final
{
public:
	struct FGameplayTag                           TraceInfoTag;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Start;                                             // 0x0008(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x0014(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HalfSize;                                          // 0x0020(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Orientation;                                       // 0x002C(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0038(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bTraceComplex;                                     // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0050(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bIgnoreSelf;                                       // 0x0060(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceColor;                                        // 0x0064(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TraceHitColor;                                     // 0x0074(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0088(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FHitResult>                     OutHits;                                           // 0x0090(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x00A0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	EDrawDebugTrace                               CallFunc_TryGetTraceInfo_DrawDebugTrace;           // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_TryGetTraceInfo_DrawTime;                 // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FHitResult>                     CallFunc_BoxTraceMultiForObjects_OutHits;          // 0x00A8(0x0010)(ZeroConstructor, ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_BoxTraceMultiForObjects_ReturnValue;      // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects) == 0x000008, "Wrong alignment on BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects");
static_assert(sizeof(BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects) == 0x0000C0, "Wrong size on BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects, TraceInfoTag) == 0x000000, "Member 'BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects::TraceInfoTag' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects, Start) == 0x000008, "Member 'BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects::Start' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects, End) == 0x000014, "Member 'BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects::End' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects, HalfSize) == 0x000020, "Member 'BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects::HalfSize' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects, Orientation) == 0x00002C, "Member 'BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects::Orientation' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects, ObjectTypes) == 0x000038, "Member 'BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects::ObjectTypes' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects, bTraceComplex) == 0x000048, "Member 'BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects::bTraceComplex' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects, ActorsToIgnore) == 0x000050, "Member 'BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects, bIgnoreSelf) == 0x000060, "Member 'BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects, TraceColor) == 0x000064, "Member 'BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects::TraceColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects, TraceHitColor) == 0x000074, "Member 'BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects::TraceHitColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects, __WorldContext) == 0x000088, "Member 'BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects, OutHits) == 0x000090, "Member 'BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects::OutHits' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects, ReturnValue) == 0x0000A0, "Member 'BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects, CallFunc_TryGetTraceInfo_DrawDebugTrace) == 0x0000A1, "Member 'BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects::CallFunc_TryGetTraceInfo_DrawDebugTrace' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects, CallFunc_TryGetTraceInfo_DrawTime) == 0x0000A4, "Member 'BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects::CallFunc_TryGetTraceInfo_DrawTime' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects, CallFunc_BoxTraceMultiForObjects_OutHits) == 0x0000A8, "Member 'BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects::CallFunc_BoxTraceMultiForObjects_OutHits' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects, CallFunc_BoxTraceMultiForObjects_ReturnValue) == 0x0000B8, "Member 'BPF_AJBTraceFunctions_C_AJBMultiBoxTraceForObjects::CallFunc_BoxTraceMultiForObjects_ReturnValue' has a wrong offset!");

// Function BPF_AJBTraceFunctions.BPF_AJBTraceFunctions_C.AJBSphereTraceByChannel
// 0x0188 (0x0188 - 0x0000)
struct BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel final
{
public:
	struct FGameplayTag                           TraceInfoTag;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Start;                                             // 0x0008(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x0014(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETraceTypeQuery                               TraceChannel;                                      // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTraceComplex;                                     // 0x0025(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0028(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bIgnoreSelf;                                       // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceColor;                                        // 0x003C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TraceHitColor;                                     // 0x004C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             OutHit;                                            // 0x0068(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	EDrawDebugTrace                               CallFunc_TryGetTraceInfo_DrawDebugTrace;           // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F2[0x2];                                       // 0x00F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_TryGetTraceInfo_DrawTime;                 // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingle_OutHit;                 // 0x00F8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingle_ReturnValue;            // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel) == 0x000008, "Wrong alignment on BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel");
static_assert(sizeof(BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel) == 0x000188, "Wrong size on BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel, TraceInfoTag) == 0x000000, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel::TraceInfoTag' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel, Start) == 0x000008, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel::Start' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel, End) == 0x000014, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel::End' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel, Radius) == 0x000020, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel::Radius' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel, TraceChannel) == 0x000024, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel::TraceChannel' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel, bTraceComplex) == 0x000025, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel::bTraceComplex' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel, ActorsToIgnore) == 0x000028, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel, bIgnoreSelf) == 0x000038, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel, TraceColor) == 0x00003C, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel::TraceColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel, TraceHitColor) == 0x00004C, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel::TraceHitColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel, __WorldContext) == 0x000060, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel, OutHit) == 0x000068, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel::OutHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel, ReturnValue) == 0x0000F0, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel, CallFunc_TryGetTraceInfo_DrawDebugTrace) == 0x0000F1, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel::CallFunc_TryGetTraceInfo_DrawDebugTrace' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel, CallFunc_TryGetTraceInfo_DrawTime) == 0x0000F4, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel::CallFunc_TryGetTraceInfo_DrawTime' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel, CallFunc_SphereTraceSingle_OutHit) == 0x0000F8, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel::CallFunc_SphereTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel, CallFunc_SphereTraceSingle_ReturnValue) == 0x000180, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceByChannel::CallFunc_SphereTraceSingle_ReturnValue' has a wrong offset!");

// Function BPF_AJBTraceFunctions.BPF_AJBTraceFunctions_C.AJBCapsuleTraceForObjectsOnePlace
// 0x00F8 (0x00F8 - 0x0000)
struct BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace final
{
public:
	struct FGameplayTag                           TraceInfoTag;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ForwardDirection;                                  // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HalfHeight;                                        // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SmallAmount;                                       // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bTraceComplex;                                     // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bIgnoreSelf;                                       // 0x0058(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceColor;                                        // 0x005C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TraceHitColor;                                     // 0x006C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0080(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bReturnValue;                                      // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HitActor;                                          // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempUpVector;                                      // 0x0098(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempRightVector;                                   // 0x00A4(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AJBCapsuleTraceForObjectsBidirectional_bReturnValue; // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_AJBCapsuleTraceForObjectsBidirectional_HitActor; // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AJBCapsuleTraceForObjectsBidirectional_bReturnValue1; // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_AJBCapsuleTraceForObjectsBidirectional_HitActor1; // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AJBCapsuleTraceForObjectsBidirectional_bReturnValue2; // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_AJBCapsuleTraceForObjectsBidirectional_HitActor2; // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalcUpVectorByForwardRight_UpVector;      // 0x00E0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalcRightVectorByForward_RightVector;     // 0x00EC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace) == 0x000008, "Wrong alignment on BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace");
static_assert(sizeof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace) == 0x0000F8, "Wrong size on BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace, TraceInfoTag) == 0x000000, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace::TraceInfoTag' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace, Location) == 0x000008, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace::Location' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace, ForwardDirection) == 0x000014, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace::ForwardDirection' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace, Radius) == 0x000020, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace::Radius' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace, HalfHeight) == 0x000024, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace::HalfHeight' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace, SmallAmount) == 0x000028, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace::SmallAmount' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace, ObjectTypes) == 0x000030, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace::ObjectTypes' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace, bTraceComplex) == 0x000040, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace::bTraceComplex' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace, ActorsToIgnore) == 0x000048, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace, bIgnoreSelf) == 0x000058, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace, TraceColor) == 0x00005C, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace::TraceColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace, TraceHitColor) == 0x00006C, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace::TraceHitColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace, __WorldContext) == 0x000080, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace, bReturnValue) == 0x000088, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace::bReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace, HitActor) == 0x000090, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace::HitActor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace, TempUpVector) == 0x000098, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace::TempUpVector' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace, TempRightVector) == 0x0000A4, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace::TempRightVector' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace, CallFunc_AJBCapsuleTraceForObjectsBidirectional_bReturnValue) == 0x0000B0, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace::CallFunc_AJBCapsuleTraceForObjectsBidirectional_bReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace, CallFunc_AJBCapsuleTraceForObjectsBidirectional_HitActor) == 0x0000B8, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace::CallFunc_AJBCapsuleTraceForObjectsBidirectional_HitActor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace, CallFunc_AJBCapsuleTraceForObjectsBidirectional_bReturnValue1) == 0x0000C0, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace::CallFunc_AJBCapsuleTraceForObjectsBidirectional_bReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace, CallFunc_AJBCapsuleTraceForObjectsBidirectional_HitActor1) == 0x0000C8, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace::CallFunc_AJBCapsuleTraceForObjectsBidirectional_HitActor1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace, CallFunc_AJBCapsuleTraceForObjectsBidirectional_bReturnValue2) == 0x0000D0, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace::CallFunc_AJBCapsuleTraceForObjectsBidirectional_bReturnValue2' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace, CallFunc_AJBCapsuleTraceForObjectsBidirectional_HitActor2) == 0x0000D8, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace::CallFunc_AJBCapsuleTraceForObjectsBidirectional_HitActor2' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace, CallFunc_CalcUpVectorByForwardRight_UpVector) == 0x0000E0, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace::CallFunc_CalcUpVectorByForwardRight_UpVector' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace, CallFunc_CalcRightVectorByForward_RightVector) == 0x0000EC, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsOnePlace::CallFunc_CalcRightVectorByForward_RightVector' has a wrong offset!");

// Function BPF_AJBTraceFunctions.BPF_AJBTraceFunctions_C.AJBCapsuleTraceForObjectsBidirectional
// 0x02E8 (0x02E8 - 0x0000)
struct BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional final
{
public:
	struct FGameplayTag                           TraceInfoTag;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Direction;                                         // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HalfHeight;                                        // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SmallAmount;                                       // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bTraceComplex;                                     // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bIgnoreSelf;                                       // 0x0058(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceColor;                                        // 0x005C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TraceHitColor;                                     // 0x006C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0080(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bReturnValue;                                      // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HitActor;                                          // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_NegateVector_ReturnValue;                 // 0x0098(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalcStartAndEndLocation_Start;            // 0x00A4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalcStartAndEndLocation_End;              // 0x00B0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_AJBCapsuleTraceForObjects_OutHit;         // 0x00C0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_AJBCapsuleTraceForObjects_ReturnValue;    // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14B[0x1];                                      // 0x014B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0154(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0160(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x016C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0178(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0198(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01B0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01BC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalcStartAndEndLocation_Start1;           // 0x01C8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalcStartAndEndLocation_End1;             // 0x01D4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_AJBCapsuleTraceForObjects_OutHit1;        // 0x01E0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_AJBCapsuleTraceForObjects_ReturnValue1;   // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit1;             // 0x0269(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap1;          // 0x026A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26B[0x1];                                      // 0x026B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time1;                     // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance1;                 // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location1;                 // 0x0274(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint1;              // 0x0280(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal1;                   // 0x028C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal1;             // 0x0298(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat1;                  // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor1;                 // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent1;             // 0x02B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName1;              // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem1;                  // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex1;                // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart1;               // 0x02D0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd1;                 // 0x02DC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional) == 0x000008, "Wrong alignment on BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional");
static_assert(sizeof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional) == 0x0002E8, "Wrong size on BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, TraceInfoTag) == 0x000000, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::TraceInfoTag' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, Location) == 0x000008, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::Location' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, Direction) == 0x000014, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::Direction' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, Radius) == 0x000020, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::Radius' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, HalfHeight) == 0x000024, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::HalfHeight' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, SmallAmount) == 0x000028, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::SmallAmount' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, ObjectTypes) == 0x000030, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::ObjectTypes' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, bTraceComplex) == 0x000040, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::bTraceComplex' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, ActorsToIgnore) == 0x000048, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, bIgnoreSelf) == 0x000058, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, TraceColor) == 0x00005C, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::TraceColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, TraceHitColor) == 0x00006C, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::TraceHitColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, __WorldContext) == 0x000080, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, bReturnValue) == 0x000088, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::bReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, HitActor) == 0x000090, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::HitActor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_NegateVector_ReturnValue) == 0x000098, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_NegateVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_CalcStartAndEndLocation_Start) == 0x0000A4, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_CalcStartAndEndLocation_Start' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_CalcStartAndEndLocation_End) == 0x0000B0, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_CalcStartAndEndLocation_End' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_AJBCapsuleTraceForObjects_OutHit) == 0x0000C0, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_AJBCapsuleTraceForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_AJBCapsuleTraceForObjects_ReturnValue) == 0x000148, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_AJBCapsuleTraceForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_BreakHitResult_bBlockingHit) == 0x000149, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_BreakHitResult_bInitialOverlap) == 0x00014A, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_BreakHitResult_Time) == 0x00014C, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_BreakHitResult_Distance) == 0x000150, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_BreakHitResult_Location) == 0x000154, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_BreakHitResult_ImpactPoint) == 0x000160, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_BreakHitResult_Normal) == 0x00016C, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_BreakHitResult_ImpactNormal) == 0x000178, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_BreakHitResult_PhysMat) == 0x000188, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_BreakHitResult_HitActor) == 0x000190, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_BreakHitResult_HitComponent) == 0x000198, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_BreakHitResult_HitBoneName) == 0x0001A0, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_BreakHitResult_HitItem) == 0x0001A8, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_BreakHitResult_FaceIndex) == 0x0001AC, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_BreakHitResult_TraceStart) == 0x0001B0, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_BreakHitResult_TraceEnd) == 0x0001BC, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_CalcStartAndEndLocation_Start1) == 0x0001C8, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_CalcStartAndEndLocation_Start1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_CalcStartAndEndLocation_End1) == 0x0001D4, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_CalcStartAndEndLocation_End1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_AJBCapsuleTraceForObjects_OutHit1) == 0x0001E0, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_AJBCapsuleTraceForObjects_OutHit1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_AJBCapsuleTraceForObjects_ReturnValue1) == 0x000268, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_AJBCapsuleTraceForObjects_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_BreakHitResult_bBlockingHit1) == 0x000269, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_BreakHitResult_bBlockingHit1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_BreakHitResult_bInitialOverlap1) == 0x00026A, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_BreakHitResult_bInitialOverlap1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_BreakHitResult_Time1) == 0x00026C, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_BreakHitResult_Time1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_BreakHitResult_Distance1) == 0x000270, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_BreakHitResult_Distance1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_BreakHitResult_Location1) == 0x000274, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_BreakHitResult_Location1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_BreakHitResult_ImpactPoint1) == 0x000280, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_BreakHitResult_ImpactPoint1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_BreakHitResult_Normal1) == 0x00028C, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_BreakHitResult_Normal1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_BreakHitResult_ImpactNormal1) == 0x000298, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_BreakHitResult_ImpactNormal1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_BreakHitResult_PhysMat1) == 0x0002A8, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_BreakHitResult_PhysMat1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_BreakHitResult_HitActor1) == 0x0002B0, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_BreakHitResult_HitActor1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_BreakHitResult_HitComponent1) == 0x0002B8, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_BreakHitResult_HitComponent1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_BreakHitResult_HitBoneName1) == 0x0002C0, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_BreakHitResult_HitBoneName1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_BreakHitResult_HitItem1) == 0x0002C8, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_BreakHitResult_HitItem1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_BreakHitResult_FaceIndex1) == 0x0002CC, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_BreakHitResult_FaceIndex1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_BreakHitResult_TraceStart1) == 0x0002D0, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_BreakHitResult_TraceStart1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional, CallFunc_BreakHitResult_TraceEnd1) == 0x0002DC, "Member 'BPF_AJBTraceFunctions_C_AJBCapsuleTraceForObjectsBidirectional::CallFunc_BreakHitResult_TraceEnd1' has a wrong offset!");

// Function BPF_AJBTraceFunctions.BPF_AJBTraceFunctions_C.AJBLineTraceByChannelIgnore
// 0x0230 (0x0230 - 0x0000)
struct BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore final
{
public:
	struct FGameplayTag                           TraceInfoTag;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Start;                                             // 0x0008(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x0014(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETraceTypeQuery                               TraceChannel;                                      // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTraceComplex;                                     // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0028(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bIgnoreSelf;                                       // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceColor;                                        // 0x003C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TraceHitColor;                                     // 0x004C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             OutHit;                                            // 0x0068(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         TempActorsToIgnore;                                // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	struct FHitResult                             CallFunc_AJBLineTraceByChannel_OutHit;             // 0x0108(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_AJBLineTraceByChannel_ReturnValue;        // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0192(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_193[0x1];                                      // 0x0193(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x019C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01A8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01B4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01C0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01F8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0204(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBI_AJBInterface_C>    K2Node_DynamicCast_AsBI_AJBInterface;              // 0x0210(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_221[0x3];                                      // 0x0221(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IgnoreTrace_bIgnore;                      // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore) == 0x000008, "Wrong alignment on BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore");
static_assert(sizeof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore) == 0x000230, "Wrong size on BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore, TraceInfoTag) == 0x000000, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore::TraceInfoTag' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore, Start) == 0x000008, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore::Start' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore, End) == 0x000014, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore::End' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore, TraceChannel) == 0x000020, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore::TraceChannel' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore, bTraceComplex) == 0x000021, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore::bTraceComplex' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore, ActorsToIgnore) == 0x000028, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore, bIgnoreSelf) == 0x000038, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore, TraceColor) == 0x00003C, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore::TraceColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore, TraceHitColor) == 0x00004C, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore::TraceHitColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore, __WorldContext) == 0x000060, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore, OutHit) == 0x000068, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore::OutHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore, ReturnValue) == 0x0000F0, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore, TempActorsToIgnore) == 0x0000F8, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore::TempActorsToIgnore' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore, CallFunc_AJBLineTraceByChannel_OutHit) == 0x000108, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore::CallFunc_AJBLineTraceByChannel_OutHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore, CallFunc_AJBLineTraceByChannel_ReturnValue) == 0x000190, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore::CallFunc_AJBLineTraceByChannel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore, CallFunc_BreakHitResult_bBlockingHit) == 0x000191, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore, CallFunc_BreakHitResult_bInitialOverlap) == 0x000192, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore, CallFunc_BreakHitResult_Time) == 0x000194, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore, CallFunc_BreakHitResult_Distance) == 0x000198, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore, CallFunc_BreakHitResult_Location) == 0x00019C, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore, CallFunc_BreakHitResult_ImpactPoint) == 0x0001A8, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore, CallFunc_BreakHitResult_Normal) == 0x0001B4, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore, CallFunc_BreakHitResult_ImpactNormal) == 0x0001C0, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore, CallFunc_BreakHitResult_PhysMat) == 0x0001D0, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore, CallFunc_BreakHitResult_HitActor) == 0x0001D8, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore, CallFunc_BreakHitResult_HitComponent) == 0x0001E0, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore, CallFunc_BreakHitResult_HitBoneName) == 0x0001E8, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore, CallFunc_BreakHitResult_HitItem) == 0x0001F0, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore, CallFunc_BreakHitResult_FaceIndex) == 0x0001F4, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore, CallFunc_BreakHitResult_TraceStart) == 0x0001F8, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore, CallFunc_BreakHitResult_TraceEnd) == 0x000204, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore, K2Node_DynamicCast_AsBI_AJBInterface) == 0x000210, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore::K2Node_DynamicCast_AsBI_AJBInterface' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore, K2Node_DynamicCast_bSuccess) == 0x000220, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore, CallFunc_Array_Add_ReturnValue) == 0x000224, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore, CallFunc_IgnoreTrace_bIgnore) == 0x000228, "Member 'BPF_AJBTraceFunctions_C_AJBLineTraceByChannelIgnore::CallFunc_IgnoreTrace_bIgnore' has a wrong offset!");

// Function BPF_AJBTraceFunctions.BPF_AJBTraceFunctions_C.PredictProjectilePathByObjectTypeIgnore
// 0x01D8 (0x01D8 - 0x0000)
struct BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore final
{
public:
	struct FVector                                StartPos;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LaunchVelocity;                                    // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTracePath;                                        // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ProjectileRadius;                                  // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0020(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bTraceComplex;                                     // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0038(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	EDrawDebugTrace                               DrawDebugType;                                     // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DrawDebugTime;                                     // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SimFrequency;                                      // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSimTime;                                        // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OverrideGravityZ;                                  // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Owner;                                             // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIgnorePairOnly;                                   // 0x0068(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        OutPathPositions;                                  // 0x0078(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<class AActor*>                         TempActorsToIgnore;                                // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	struct FHitResult                             CallFunc_Blueprint_PredictProjectilePath_ByObjectType_OutHit; // 0x0098(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	TArray<struct FVector>                        CallFunc_Blueprint_PredictProjectilePath_ByObjectType_OutPathPositions; // 0x0120(0x0010)(ZeroConstructor, ReferenceParm)
	struct FVector                                CallFunc_Blueprint_PredictProjectilePath_ByObjectType_OutLastTraceDestination; // 0x0130(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Blueprint_PredictProjectilePath_ByObjectType_ReturnValue; // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x013D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x013E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13F[0x1];                                      // 0x013F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0148(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0154(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0160(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x016C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0188(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01A0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01AC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBI_AJBInterface_C>    K2Node_DynamicCast_AsBI_AJBInterface;              // 0x01B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C9[0x3];                                      // 0x01C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IgnoreTrace_bIgnore;                      // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore) == 0x000008, "Wrong alignment on BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore");
static_assert(sizeof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore) == 0x0001D8, "Wrong size on BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, StartPos) == 0x000000, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::StartPos' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, LaunchVelocity) == 0x00000C, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::LaunchVelocity' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, bTracePath) == 0x000018, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::bTracePath' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, ProjectileRadius) == 0x00001C, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::ProjectileRadius' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, ObjectTypes) == 0x000020, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::ObjectTypes' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, bTraceComplex) == 0x000030, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::bTraceComplex' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, ActorsToIgnore) == 0x000038, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, DrawDebugType) == 0x000048, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::DrawDebugType' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, DrawDebugTime) == 0x00004C, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::DrawDebugTime' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, SimFrequency) == 0x000050, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::SimFrequency' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, MaxSimTime) == 0x000054, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::MaxSimTime' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, OverrideGravityZ) == 0x000058, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::OverrideGravityZ' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, Owner) == 0x000060, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::Owner' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, bIgnorePairOnly) == 0x000068, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::bIgnorePairOnly' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, __WorldContext) == 0x000070, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, OutPathPositions) == 0x000078, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::OutPathPositions' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, TempActorsToIgnore) == 0x000088, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::TempActorsToIgnore' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, CallFunc_Blueprint_PredictProjectilePath_ByObjectType_OutHit) == 0x000098, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::CallFunc_Blueprint_PredictProjectilePath_ByObjectType_OutHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, CallFunc_Blueprint_PredictProjectilePath_ByObjectType_OutPathPositions) == 0x000120, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::CallFunc_Blueprint_PredictProjectilePath_ByObjectType_OutPathPositions' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, CallFunc_Blueprint_PredictProjectilePath_ByObjectType_OutLastTraceDestination) == 0x000130, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::CallFunc_Blueprint_PredictProjectilePath_ByObjectType_OutLastTraceDestination' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, CallFunc_Blueprint_PredictProjectilePath_ByObjectType_ReturnValue) == 0x00013C, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::CallFunc_Blueprint_PredictProjectilePath_ByObjectType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, CallFunc_BreakHitResult_bBlockingHit) == 0x00013D, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, CallFunc_BreakHitResult_bInitialOverlap) == 0x00013E, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, CallFunc_BreakHitResult_Time) == 0x000140, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, CallFunc_BreakHitResult_Distance) == 0x000144, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, CallFunc_BreakHitResult_Location) == 0x000148, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, CallFunc_BreakHitResult_ImpactPoint) == 0x000154, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, CallFunc_BreakHitResult_Normal) == 0x000160, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, CallFunc_BreakHitResult_ImpactNormal) == 0x00016C, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, CallFunc_BreakHitResult_PhysMat) == 0x000178, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, CallFunc_BreakHitResult_HitActor) == 0x000180, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, CallFunc_BreakHitResult_HitComponent) == 0x000188, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, CallFunc_BreakHitResult_HitBoneName) == 0x000190, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, CallFunc_BreakHitResult_HitItem) == 0x000198, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, CallFunc_BreakHitResult_FaceIndex) == 0x00019C, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, CallFunc_BreakHitResult_TraceStart) == 0x0001A0, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, CallFunc_BreakHitResult_TraceEnd) == 0x0001AC, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, K2Node_DynamicCast_AsBI_AJBInterface) == 0x0001B8, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::K2Node_DynamicCast_AsBI_AJBInterface' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, K2Node_DynamicCast_bSuccess) == 0x0001C8, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, CallFunc_Array_Add_ReturnValue) == 0x0001CC, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore, CallFunc_IgnoreTrace_bIgnore) == 0x0001D0, "Member 'BPF_AJBTraceFunctions_C_PredictProjectilePathByObjectTypeIgnore::CallFunc_IgnoreTrace_bIgnore' has a wrong offset!");

// Function BPF_AJBTraceFunctions.BPF_AJBTraceFunctions_C.AJBSphereTraceForObjectsIgnore
// 0x0258 (0x0258 - 0x0000)
struct BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore final
{
public:
	struct FGameplayTag                           TraceInfoTag;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Start;                                             // 0x0008(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x0014(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0028(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bTraceComplex;                                     // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0040(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bIgnoreSelf;                                       // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceColor;                                        // 0x0054(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TraceHitColor;                                     // 0x0064(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Owner;                                             // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIgnorePairOnly;                                   // 0x0080(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0088(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             OutHit;                                            // 0x0090(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x0118(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         TempActorsToIgnore;                                // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	struct FHitResult                             CallFunc_AJBSphereTraceForObjects_OutHit;          // 0x0130(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_AJBSphereTraceForObjects_ReturnValue;     // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x01B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x01BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1BB[0x1];                                      // 0x01BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x01C4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01D0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01DC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01E8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F4[0x4];                                      // 0x01F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0208(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0220(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x022C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBI_AJBInterface_C>    K2Node_DynamicCast_AsBI_AJBInterface;              // 0x0238(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_249[0x3];                                      // 0x0249(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IgnoreTrace_bIgnore;                      // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore) == 0x000008, "Wrong alignment on BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore");
static_assert(sizeof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore) == 0x000258, "Wrong size on BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, TraceInfoTag) == 0x000000, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::TraceInfoTag' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, Start) == 0x000008, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::Start' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, End) == 0x000014, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::End' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, Radius) == 0x000020, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::Radius' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, ObjectTypes) == 0x000028, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::ObjectTypes' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, bTraceComplex) == 0x000038, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::bTraceComplex' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, ActorsToIgnore) == 0x000040, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, bIgnoreSelf) == 0x000050, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, TraceColor) == 0x000054, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::TraceColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, TraceHitColor) == 0x000064, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::TraceHitColor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, Owner) == 0x000078, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::Owner' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, bIgnorePairOnly) == 0x000080, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::bIgnorePairOnly' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, __WorldContext) == 0x000088, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, OutHit) == 0x000090, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::OutHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, ReturnValue) == 0x000118, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, TempActorsToIgnore) == 0x000120, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::TempActorsToIgnore' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, CallFunc_AJBSphereTraceForObjects_OutHit) == 0x000130, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::CallFunc_AJBSphereTraceForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, CallFunc_AJBSphereTraceForObjects_ReturnValue) == 0x0001B8, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::CallFunc_AJBSphereTraceForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, CallFunc_BreakHitResult_bBlockingHit) == 0x0001B9, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, CallFunc_BreakHitResult_bInitialOverlap) == 0x0001BA, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, CallFunc_BreakHitResult_Time) == 0x0001BC, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, CallFunc_BreakHitResult_Distance) == 0x0001C0, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, CallFunc_BreakHitResult_Location) == 0x0001C4, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, CallFunc_BreakHitResult_ImpactPoint) == 0x0001D0, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, CallFunc_BreakHitResult_Normal) == 0x0001DC, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, CallFunc_BreakHitResult_ImpactNormal) == 0x0001E8, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, CallFunc_BreakHitResult_PhysMat) == 0x0001F8, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, CallFunc_BreakHitResult_HitActor) == 0x000200, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, CallFunc_BreakHitResult_HitComponent) == 0x000208, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, CallFunc_BreakHitResult_HitBoneName) == 0x000210, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, CallFunc_BreakHitResult_HitItem) == 0x000218, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, CallFunc_BreakHitResult_FaceIndex) == 0x00021C, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, CallFunc_BreakHitResult_TraceStart) == 0x000220, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, CallFunc_BreakHitResult_TraceEnd) == 0x00022C, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, K2Node_DynamicCast_AsBI_AJBInterface) == 0x000238, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::K2Node_DynamicCast_AsBI_AJBInterface' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, K2Node_DynamicCast_bSuccess) == 0x000248, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, CallFunc_Array_Add_ReturnValue) == 0x00024C, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore, CallFunc_IgnoreTrace_bIgnore) == 0x000250, "Member 'BPF_AJBTraceFunctions_C_AJBSphereTraceForObjectsIgnore::CallFunc_IgnoreTrace_bIgnore' has a wrong offset!");

// Function BPF_AJBTraceFunctions.BPF_AJBTraceFunctions_C.CheckPossibleAimDrag
// 0x01E0 (0x01E0 - 0x0000)
struct BPF_AJBTraceFunctions_C_CheckPossibleAimDrag final
{
public:
	class ABP_AJBInGameCharacter_C*               CharacterBP;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       InCamera;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InAimDragDistance;                                 // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InAimDragRadius;                                   // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPossible;                                         // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               TempHitOwnerCharacter;                             // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 TempHitActor;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               CallFunc_GetAJBCharacterFromActor_CharacterBP;     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBCharacterFromActor_bSuccess;        // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckPossibleDetection_bPossibleDetection; // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckCharacterBehavior_Active_bReturnValue; // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0058(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0068(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0074(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0080(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x008C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array1;                           // 0x0098(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	class ABP_AJBInGameWindow_C*                  K2Node_DynamicCast_AsBP_AJBIn_Game_Window;         // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     CallFunc_AJBMultiSphereTraceForObjects_OutHits;    // 0x00B8(0x0010)(ZeroConstructor, ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_AJBMultiSphereTraceForObjects_ReturnValue; // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBroken_ReturnValue;                     // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_Array_Get_Item;                           // 0x00D0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x015D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15E[0x2];                                      // 0x015E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0168(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0174(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0180(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x018C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01C0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01CC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag) == 0x000008, "Wrong alignment on BPF_AJBTraceFunctions_C_CheckPossibleAimDrag");
static_assert(sizeof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag) == 0x0001E0, "Wrong size on BPF_AJBTraceFunctions_C_CheckPossibleAimDrag");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, CharacterBP) == 0x000000, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::CharacterBP' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, InCamera) == 0x000008, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::InCamera' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, InAimDragDistance) == 0x000010, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::InAimDragDistance' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, InAimDragRadius) == 0x000014, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::InAimDragRadius' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, __WorldContext) == 0x000018, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, bPossible) == 0x000020, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::bPossible' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, TempHitOwnerCharacter) == 0x000028, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::TempHitOwnerCharacter' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, TempHitActor) == 0x000030, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::TempHitActor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, CallFunc_GetAJBCharacterFromActor_CharacterBP) == 0x000038, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::CallFunc_GetAJBCharacterFromActor_CharacterBP' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, CallFunc_GetAJBCharacterFromActor_bSuccess) == 0x000040, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::CallFunc_GetAJBCharacterFromActor_bSuccess' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, CallFunc_IsValid_ReturnValue) == 0x000041, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, CallFunc_CheckPossibleDetection_bPossibleDetection) == 0x000042, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::CallFunc_CheckPossibleDetection_bPossibleDetection' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, CallFunc_CheckCharacterBehavior_Active_bReturnValue) == 0x000043, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::CallFunc_CheckCharacterBehavior_Active_bReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000044, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, Temp_int_Loop_Counter_Variable) == 0x000048, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, Temp_int_Array_Index_Variable) == 0x000050, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, K2Node_MakeArray_Array) == 0x000058, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, CallFunc_GetForwardVector_ReturnValue) == 0x000068, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000074, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000080, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, CallFunc_Add_VectorVector_ReturnValue) == 0x00008C, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, K2Node_MakeArray_Array1) == 0x000098, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::K2Node_MakeArray_Array1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, K2Node_DynamicCast_AsBP_AJBIn_Game_Window) == 0x0000A8, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::K2Node_DynamicCast_AsBP_AJBIn_Game_Window' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, K2Node_DynamicCast_bSuccess) == 0x0000B0, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, CallFunc_AJBMultiSphereTraceForObjects_OutHits) == 0x0000B8, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::CallFunc_AJBMultiSphereTraceForObjects_OutHits' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, CallFunc_AJBMultiSphereTraceForObjects_ReturnValue) == 0x0000C8, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::CallFunc_AJBMultiSphereTraceForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, CallFunc_IsBroken_ReturnValue) == 0x0000C9, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::CallFunc_IsBroken_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, CallFunc_Array_Get_Item) == 0x0000D0, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, CallFunc_Array_Length_ReturnValue) == 0x000158, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, CallFunc_BreakHitResult_bBlockingHit) == 0x00015C, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, CallFunc_BreakHitResult_bInitialOverlap) == 0x00015D, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, CallFunc_BreakHitResult_Time) == 0x000160, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, CallFunc_BreakHitResult_Distance) == 0x000164, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, CallFunc_BreakHitResult_Location) == 0x000168, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, CallFunc_BreakHitResult_ImpactPoint) == 0x000174, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, CallFunc_BreakHitResult_Normal) == 0x000180, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, CallFunc_BreakHitResult_ImpactNormal) == 0x00018C, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, CallFunc_BreakHitResult_PhysMat) == 0x000198, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, CallFunc_BreakHitResult_HitActor) == 0x0001A0, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, CallFunc_BreakHitResult_HitComponent) == 0x0001A8, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, CallFunc_BreakHitResult_HitBoneName) == 0x0001B0, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, CallFunc_BreakHitResult_HitItem) == 0x0001B8, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, CallFunc_BreakHitResult_FaceIndex) == 0x0001BC, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, CallFunc_BreakHitResult_TraceStart) == 0x0001C0, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, CallFunc_BreakHitResult_TraceEnd) == 0x0001CC, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CheckPossibleAimDrag, CallFunc_Less_IntInt_ReturnValue) == 0x0001D8, "Member 'BPF_AJBTraceFunctions_C_CheckPossibleAimDrag::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BPF_AJBTraceFunctions.BPF_AJBTraceFunctions_C.CalcPoliticForwardTransform
// 0x01A0 (0x01A0 - 0x0000)
struct BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform final
{
public:
	class ABP_AJBInGameCharacter_C*               CharacterBP;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Length;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	float                                         GroundingTraceDistance;                            // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSucceed;                                          // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0xF];                                       // 0x0031(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0040(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
	bool                                          bTempSucceed;                                      // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TraceStartHeightBuffer;                            // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceEndHeightBuffer;                              // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_TraceNumber;                                  // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTempComplete;                                     // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TempCachedSlopeDirection;                          // 0x0084(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTempCachedFirstFlatland;                          // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TempCachedAngle;                                   // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempCachedLength;                                  // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempCachedDirection;                               // 0x009C(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempCachedDefaultDirection;                        // 0x00A8(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempCachedLocation;                                // 0x00B4(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempResultLocation;                                // 0x00C0(0x000C)(Edit, BlueprintVisible, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               TempCharacterBP;                                   // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TraceFlatland_bContinue;                  // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_TraceFlatland_NewLocation;                // 0x00DC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TraceFlatland_NewDirection;               // 0x00E8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_TraceFlatland_NewLength;                  // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_TraceFlatland_NewAngle;                   // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TraceHover_bContinue;                     // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_TraceSlope_NewLocation;                   // 0x0100(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TraceSlope_NewDirection;                  // 0x010C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_TraceSlope_NewLength;                     // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TraceSlope_NewSlopeDirection;             // 0x011C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TraceSpacing_bCanSpace;                   // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12A[0x2];                                      // 0x012A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TraceGrounding_NewLocation;               // 0x0130(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TraceGrounding_bSucceed;                  // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13D[0x3];                                      // 0x013D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0140(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_GetWalkableFloorAngle_ReturnValue;     // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0150(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x015C(0x000C)(IsPlainOldData, NoDestructor)
	uint8                                         Pad_168[0x8];                                      // 0x0168(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0170(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform) == 0x000010, "Wrong alignment on BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform");
static_assert(sizeof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform) == 0x0001A0, "Wrong size on BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, CharacterBP) == 0x000000, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::CharacterBP' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, Length) == 0x000008, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::Length' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, ObjectTypes) == 0x000010, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::ObjectTypes' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, GroundingTraceDistance) == 0x000020, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::GroundingTraceDistance' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, __WorldContext) == 0x000028, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, bSucceed) == 0x000030, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::bSucceed' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, Transform) == 0x000040, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::Transform' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, bTempSucceed) == 0x000070, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::bTempSucceed' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, TraceStartHeightBuffer) == 0x000074, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::TraceStartHeightBuffer' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, TraceEndHeightBuffer) == 0x000078, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::TraceEndHeightBuffer' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, Temp_TraceNumber) == 0x00007C, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::Temp_TraceNumber' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, bTempComplete) == 0x000080, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::bTempComplete' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, TempCachedSlopeDirection) == 0x000084, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::TempCachedSlopeDirection' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, bTempCachedFirstFlatland) == 0x000090, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::bTempCachedFirstFlatland' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, TempCachedAngle) == 0x000094, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::TempCachedAngle' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, TempCachedLength) == 0x000098, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::TempCachedLength' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, TempCachedDirection) == 0x00009C, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::TempCachedDirection' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, TempCachedDefaultDirection) == 0x0000A8, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::TempCachedDefaultDirection' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, TempCachedLocation) == 0x0000B4, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::TempCachedLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, TempResultLocation) == 0x0000C0, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::TempResultLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, TempCharacterBP) == 0x0000D0, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::TempCharacterBP' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, CallFunc_TraceFlatland_bContinue) == 0x0000D8, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::CallFunc_TraceFlatland_bContinue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, CallFunc_TraceFlatland_NewLocation) == 0x0000DC, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::CallFunc_TraceFlatland_NewLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, CallFunc_TraceFlatland_NewDirection) == 0x0000E8, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::CallFunc_TraceFlatland_NewDirection' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, CallFunc_TraceFlatland_NewLength) == 0x0000F4, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::CallFunc_TraceFlatland_NewLength' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, CallFunc_TraceFlatland_NewAngle) == 0x0000F8, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::CallFunc_TraceFlatland_NewAngle' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, CallFunc_TraceHover_bContinue) == 0x0000FC, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::CallFunc_TraceHover_bContinue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, CallFunc_TraceSlope_NewLocation) == 0x000100, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::CallFunc_TraceSlope_NewLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, CallFunc_TraceSlope_NewDirection) == 0x00010C, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::CallFunc_TraceSlope_NewDirection' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, CallFunc_TraceSlope_NewLength) == 0x000118, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::CallFunc_TraceSlope_NewLength' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, CallFunc_TraceSlope_NewSlopeDirection) == 0x00011C, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::CallFunc_TraceSlope_NewSlopeDirection' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, CallFunc_TraceSpacing_bCanSpace) == 0x000128, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::CallFunc_TraceSpacing_bCanSpace' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, CallFunc_Not_PreBool_ReturnValue) == 0x000129, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, CallFunc_Add_IntInt_ReturnValue) == 0x00012C, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, CallFunc_TraceGrounding_NewLocation) == 0x000130, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::CallFunc_TraceGrounding_NewLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, CallFunc_TraceGrounding_bSucceed) == 0x00013C, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::CallFunc_TraceGrounding_bSucceed' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, CallFunc_GetActorForwardVector_ReturnValue) == 0x000140, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, CallFunc_K2_GetWalkableFloorAngle_ReturnValue) == 0x00014C, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::CallFunc_K2_GetWalkableFloorAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000150, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, CallFunc_K2_GetActorRotation_ReturnValue) == 0x00015C, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform, CallFunc_MakeTransform_ReturnValue) == 0x000170, "Member 'BPF_AJBTraceFunctions_C_CalcPoliticForwardTransform::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");

// Function BPF_AJBTraceFunctions.BPF_AJBTraceFunctions_C.TraceHover
// 0x01C0 (0x01C0 - 0x0000)
struct BPF_AJBTraceFunctions_C_TraceHover final
{
public:
	class ABP_AJBInGameCharacter_C*               CharacterBP;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartLocation;                                     // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceEndHeightBuffer;                              // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bContinue;                                         // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCapsuleRadius_CapsuleRadius;           // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCapsuleHalfHeight_CapsuleHalfHeight;   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0040(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0050(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue1;                  // 0x0060(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0070(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue1;            // 0x0080(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     CallFunc_AJBMultiCapsuleTraceForObjects_OutHits;   // 0x0090(0x0010)(ZeroConstructor, ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_AJBMultiCapsuleTraceForObjects_ReturnValue; // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_Array_Get_Item;                           // 0x00A8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0132(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_133[0x1];                                      // 0x0133(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x013C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0148(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0154(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0160(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0180(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0198(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01A4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldIgnoreCharacterCondition_Ignore;    // 0x01B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBTraceFunctions_C_TraceHover) == 0x000008, "Wrong alignment on BPF_AJBTraceFunctions_C_TraceHover");
static_assert(sizeof(BPF_AJBTraceFunctions_C_TraceHover) == 0x0001C0, "Wrong size on BPF_AJBTraceFunctions_C_TraceHover");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, CharacterBP) == 0x000000, "Member 'BPF_AJBTraceFunctions_C_TraceHover::CharacterBP' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, StartLocation) == 0x000008, "Member 'BPF_AJBTraceFunctions_C_TraceHover::StartLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, TraceEndHeightBuffer) == 0x000014, "Member 'BPF_AJBTraceFunctions_C_TraceHover::TraceEndHeightBuffer' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, ObjectTypes) == 0x000018, "Member 'BPF_AJBTraceFunctions_C_TraceHover::ObjectTypes' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, __WorldContext) == 0x000028, "Member 'BPF_AJBTraceFunctions_C_TraceHover::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, bContinue) == 0x000030, "Member 'BPF_AJBTraceFunctions_C_TraceHover::bContinue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, CallFunc_GetCapsuleRadius_CapsuleRadius) == 0x000034, "Member 'BPF_AJBTraceFunctions_C_TraceHover::CallFunc_GetCapsuleRadius_CapsuleRadius' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, CallFunc_GetCapsuleHalfHeight_CapsuleHalfHeight) == 0x000038, "Member 'BPF_AJBTraceFunctions_C_TraceHover::CallFunc_GetCapsuleHalfHeight_CapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'BPF_AJBTraceFunctions_C_TraceHover::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, CallFunc_MakeVector_ReturnValue) == 0x000040, "Member 'BPF_AJBTraceFunctions_C_TraceHover::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'BPF_AJBTraceFunctions_C_TraceHover::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, CallFunc_Add_VectorVector_ReturnValue) == 0x000050, "Member 'BPF_AJBTraceFunctions_C_TraceHover::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, Temp_int_Array_Index_Variable) == 0x00005C, "Member 'BPF_AJBTraceFunctions_C_TraceHover::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, CallFunc_MakeVector_ReturnValue1) == 0x000060, "Member 'BPF_AJBTraceFunctions_C_TraceHover::CallFunc_MakeVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, K2Node_MakeArray_Array) == 0x000070, "Member 'BPF_AJBTraceFunctions_C_TraceHover::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, CallFunc_Add_VectorVector_ReturnValue1) == 0x000080, "Member 'BPF_AJBTraceFunctions_C_TraceHover::CallFunc_Add_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, CallFunc_AJBMultiCapsuleTraceForObjects_OutHits) == 0x000090, "Member 'BPF_AJBTraceFunctions_C_TraceHover::CallFunc_AJBMultiCapsuleTraceForObjects_OutHits' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, CallFunc_AJBMultiCapsuleTraceForObjects_ReturnValue) == 0x0000A0, "Member 'BPF_AJBTraceFunctions_C_TraceHover::CallFunc_AJBMultiCapsuleTraceForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, CallFunc_Array_Length_ReturnValue) == 0x0000A4, "Member 'BPF_AJBTraceFunctions_C_TraceHover::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, CallFunc_Array_Get_Item) == 0x0000A8, "Member 'BPF_AJBTraceFunctions_C_TraceHover::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, CallFunc_Less_IntInt_ReturnValue) == 0x000130, "Member 'BPF_AJBTraceFunctions_C_TraceHover::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, CallFunc_BreakHitResult_bBlockingHit) == 0x000131, "Member 'BPF_AJBTraceFunctions_C_TraceHover::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, CallFunc_BreakHitResult_bInitialOverlap) == 0x000132, "Member 'BPF_AJBTraceFunctions_C_TraceHover::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, CallFunc_BreakHitResult_Time) == 0x000134, "Member 'BPF_AJBTraceFunctions_C_TraceHover::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, CallFunc_BreakHitResult_Distance) == 0x000138, "Member 'BPF_AJBTraceFunctions_C_TraceHover::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, CallFunc_BreakHitResult_Location) == 0x00013C, "Member 'BPF_AJBTraceFunctions_C_TraceHover::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, CallFunc_BreakHitResult_ImpactPoint) == 0x000148, "Member 'BPF_AJBTraceFunctions_C_TraceHover::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, CallFunc_BreakHitResult_Normal) == 0x000154, "Member 'BPF_AJBTraceFunctions_C_TraceHover::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, CallFunc_BreakHitResult_ImpactNormal) == 0x000160, "Member 'BPF_AJBTraceFunctions_C_TraceHover::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, CallFunc_BreakHitResult_PhysMat) == 0x000170, "Member 'BPF_AJBTraceFunctions_C_TraceHover::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, CallFunc_BreakHitResult_HitActor) == 0x000178, "Member 'BPF_AJBTraceFunctions_C_TraceHover::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, CallFunc_BreakHitResult_HitComponent) == 0x000180, "Member 'BPF_AJBTraceFunctions_C_TraceHover::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, CallFunc_BreakHitResult_HitBoneName) == 0x000188, "Member 'BPF_AJBTraceFunctions_C_TraceHover::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, CallFunc_BreakHitResult_HitItem) == 0x000190, "Member 'BPF_AJBTraceFunctions_C_TraceHover::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, CallFunc_BreakHitResult_FaceIndex) == 0x000194, "Member 'BPF_AJBTraceFunctions_C_TraceHover::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, CallFunc_BreakHitResult_TraceStart) == 0x000198, "Member 'BPF_AJBTraceFunctions_C_TraceHover::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, CallFunc_BreakHitResult_TraceEnd) == 0x0001A4, "Member 'BPF_AJBTraceFunctions_C_TraceHover::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x0001B0, "Member 'BPF_AJBTraceFunctions_C_TraceHover::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, K2Node_DynamicCast_bSuccess) == 0x0001B8, "Member 'BPF_AJBTraceFunctions_C_TraceHover::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceHover, CallFunc_ShouldIgnoreCharacterCondition_Ignore) == 0x0001B9, "Member 'BPF_AJBTraceFunctions_C_TraceHover::CallFunc_ShouldIgnoreCharacterCondition_Ignore' has a wrong offset!");

// Function BPF_AJBTraceFunctions.BPF_AJBTraceFunctions_C.TraceFlatland
// 0x02C0 (0x02C0 - 0x0000)
struct BPF_AJBTraceFunctions_C_TraceFlatland final
{
public:
	class ABP_AJBInGameCharacter_C*               CharacterBP;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartLocation;                                     // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Direction;                                         // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Length;                                            // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Angle;                                             // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceEndHeightBuffer;                              // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bCachedFirstFlatland;                              // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CachedSlopeDirection;                              // 0x0044(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bContinue;                                         // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NewLocation;                                       // 0x005C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NewDirection;                                      // 0x0068(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewLength;                                         // 0x0074(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewAngle;                                          // 0x0078(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempNewAngle;                                      // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempConsumeAngle;                                  // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTempHit;                                          // 0x0084(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TempNewLength;                                     // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempNewDirection;                                  // 0x008C(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempHitNormal;                                     // 0x0098(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempNewLocation;                                   // 0x00A4(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempHitDistance;                                   // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempEndLocation;                                   // 0x00B4(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C2[0x2];                                       // 0x00C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00C4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue1;                  // 0x00D8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorUpVector_ReturnValue;             // 0x00E4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCapsuleHalfHeight_CapsuleHalfHeight;   // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCapsuleRadius_CapsuleRadius;           // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x00FC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue1;          // 0x0108(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0114(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0120(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0130(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue1;            // 0x0140(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue2;            // 0x0150(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     CallFunc_AJBMultiCapsuleTraceForObjects_OutHits;   // 0x0168(0x0010)(ZeroConstructor, ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_AJBMultiCapsuleTraceForObjects_ReturnValue; // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_Array_Get_Item;                           // 0x0180(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x020C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x020D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_20E[0x2];                                      // 0x020E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0218(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0224(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0230(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x023C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0258(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0270(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x027C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_289[0x7];                                      // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldIgnoreCharacterCondition_Ignore;    // 0x0299(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x029A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29B[0x1];                                      // 0x029B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue1;         // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable1;                               // 0x02A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A2[0x2];                                      // 0x02A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Select_Default;                             // 0x02A4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAcos_ReturnValue;                      // 0x02B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select1_Default;                            // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_AJBTraceFunctions_C_TraceFlatland) == 0x000008, "Wrong alignment on BPF_AJBTraceFunctions_C_TraceFlatland");
static_assert(sizeof(BPF_AJBTraceFunctions_C_TraceFlatland) == 0x0002C0, "Wrong size on BPF_AJBTraceFunctions_C_TraceFlatland");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CharacterBP) == 0x000000, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CharacterBP' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, StartLocation) == 0x000008, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::StartLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, Direction) == 0x000014, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::Direction' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, Length) == 0x000020, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::Length' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, Angle) == 0x000024, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::Angle' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, TraceEndHeightBuffer) == 0x000028, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::TraceEndHeightBuffer' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, ObjectTypes) == 0x000030, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::ObjectTypes' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, bCachedFirstFlatland) == 0x000040, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::bCachedFirstFlatland' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CachedSlopeDirection) == 0x000044, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CachedSlopeDirection' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, __WorldContext) == 0x000050, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, bContinue) == 0x000058, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::bContinue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, NewLocation) == 0x00005C, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::NewLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, NewDirection) == 0x000068, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::NewDirection' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, NewLength) == 0x000074, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::NewLength' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, NewAngle) == 0x000078, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::NewAngle' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, TempNewAngle) == 0x00007C, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::TempNewAngle' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, TempConsumeAngle) == 0x000080, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::TempConsumeAngle' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, bTempHit) == 0x000084, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::bTempHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, TempNewLength) == 0x000088, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::TempNewLength' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, TempNewDirection) == 0x00008C, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::TempNewDirection' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, TempHitNormal) == 0x000098, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::TempHitNormal' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, TempNewLocation) == 0x0000A4, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::TempNewLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, TempHitDistance) == 0x0000B0, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::TempHitDistance' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, TempEndLocation) == 0x0000B4, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::TempEndLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000C0, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_BooleanAND_ReturnValue) == 0x0000C1, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_MakeVector_ReturnValue) == 0x0000C4, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_Not_PreBool_ReturnValue) == 0x0000D0, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000D4, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_MakeVector_ReturnValue1) == 0x0000D8, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_MakeVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_GetActorUpVector_ReturnValue) == 0x0000E4, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_GetActorUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_GetCapsuleHalfHeight_CapsuleHalfHeight) == 0x0000F0, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_GetCapsuleHalfHeight_CapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_GetCapsuleRadius_CapsuleRadius) == 0x0000F4, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_GetCapsuleRadius_CapsuleRadius' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, Temp_int_Array_Index_Variable) == 0x0000F8, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_Cross_VectorVector_ReturnValue) == 0x0000FC, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_Cross_VectorVector_ReturnValue1) == 0x000108, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_Cross_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_Add_VectorVector_ReturnValue) == 0x000114, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000120, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, K2Node_MakeArray_Array) == 0x000130, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_Add_VectorVector_ReturnValue1) == 0x000140, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_Add_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, Temp_int_Loop_Counter_Variable) == 0x00014C, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_Add_VectorVector_ReturnValue2) == 0x000150, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_Add_VectorVector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_Add_IntInt_ReturnValue) == 0x00015C, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, Temp_float_Variable) == 0x000160, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_AJBMultiCapsuleTraceForObjects_OutHits) == 0x000168, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_AJBMultiCapsuleTraceForObjects_OutHits' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_AJBMultiCapsuleTraceForObjects_ReturnValue) == 0x000178, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_AJBMultiCapsuleTraceForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_Array_Get_Item) == 0x000180, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_Array_Length_ReturnValue) == 0x000208, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_BreakHitResult_bBlockingHit) == 0x00020C, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_BreakHitResult_bInitialOverlap) == 0x00020D, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_BreakHitResult_Time) == 0x000210, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_BreakHitResult_Distance) == 0x000214, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_BreakHitResult_Location) == 0x000218, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_BreakHitResult_ImpactPoint) == 0x000224, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_BreakHitResult_Normal) == 0x000230, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_BreakHitResult_ImpactNormal) == 0x00023C, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_BreakHitResult_PhysMat) == 0x000248, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_BreakHitResult_HitActor) == 0x000250, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_BreakHitResult_HitComponent) == 0x000258, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_BreakHitResult_HitBoneName) == 0x000260, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_BreakHitResult_HitItem) == 0x000268, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_BreakHitResult_FaceIndex) == 0x00026C, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_BreakHitResult_TraceStart) == 0x000270, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_BreakHitResult_TraceEnd) == 0x00027C, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_Less_IntInt_ReturnValue) == 0x000288, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000290, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, K2Node_DynamicCast_bSuccess) == 0x000298, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_ShouldIgnoreCharacterCondition_Ignore) == 0x000299, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_ShouldIgnoreCharacterCondition_Ignore' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_Less_FloatFloat_ReturnValue) == 0x00029A, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_Subtract_FloatFloat_ReturnValue1) == 0x00029C, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_Subtract_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, Temp_bool_Variable) == 0x0002A0, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, Temp_bool_Variable1) == 0x0002A1, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, K2Node_Select_Default) == 0x0002A4, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_Dot_VectorVector_ReturnValue) == 0x0002B0, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, CallFunc_DegAcos_ReturnValue) == 0x0002B4, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceFlatland, K2Node_Select1_Default) == 0x0002B8, "Member 'BPF_AJBTraceFunctions_C_TraceFlatland::K2Node_Select1_Default' has a wrong offset!");

// Function BPF_AJBTraceFunctions.BPF_AJBTraceFunctions_C.TraceSlope
// 0x0530 (0x0530 - 0x0000)
struct BPF_AJBTraceFunctions_C_TraceSlope final
{
public:
	class ABP_AJBInGameCharacter_C*               CharacterBP;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartLocation;                                     // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Direction;                                         // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Length;                                            // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	float                                         TraceStartHeightBuffer;                            // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceEndHeightBuffer;                              // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CachedDefaultDirection;                            // 0x0040(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CachedSlopeDirection;                              // 0x004C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NewLocation;                                       // 0x0060(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NewDirection;                                      // 0x006C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewLength;                                         // 0x0078(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NewSlopeDirection;                                 // 0x007C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_ProperLocation;                               // 0x0088(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_FoundProperLocation;                          // 0x0094(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_MinLengthBetweenStartAndHit;                  // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     Temp_HitResults;                                   // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00B0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue1;                  // 0x00BC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCapsuleHalfHeight_CapsuleHalfHeight;   // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCapsuleRadius_CapsuleRadius;           // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCapsuleHalfHeight_CapsuleHalfHeight1;  // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCapsuleRadius_CapsuleRadius1;          // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00D8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable1;                    // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable1;                   // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0100(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_Array_Get_Item;                           // 0x0118(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x01A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x01A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A6[0x2];                                      // 0x01A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x01B0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01BC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01C8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01D4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0208(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0214(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_221[0x3];                                      // 0x0221(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0224(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0234(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_235[0x3];                                      // 0x0235(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable2;                   // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue2;                  // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable2;                    // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_249[0x3];                                      // 0x0249(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue1;        // 0x024C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0258(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue1;            // 0x0264(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue2;            // 0x0270(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue3;            // 0x027C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue2;        // 0x0288(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array1;                           // 0x0298(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue4;            // 0x02A8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B4[0x4];                                      // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     CallFunc_AJBMultiCapsuleTraceForObjects_OutHits;   // 0x02B8(0x0010)(ZeroConstructor, ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_AJBMultiCapsuleTraceForObjects_ReturnValue; // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C9[0x3];                                      // 0x02C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue5;            // 0x02CC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_Array_Get_Item1;                          // 0x02D8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	TArray<struct FHitResult>                     CallFunc_AJBMultiCapsuleTraceForObjects_OutHits1;  // 0x0360(0x0010)(ZeroConstructor, ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_AJBMultiCapsuleTraceForObjects_ReturnValue1; // 0x0370(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_371[0x3];                                      // 0x0371(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0374(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_Array_Get_Item2;                          // 0x0378(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue2;                // 0x0400(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1;                   // 0x0404(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue1;                 // 0x0408(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit1;             // 0x0409(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap1;          // 0x040A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_40B[0x1];                                      // 0x040B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time1;                     // 0x040C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance1;                 // 0x0410(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location1;                 // 0x0414(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint1;              // 0x0420(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal1;                   // 0x042C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal1;             // 0x0438(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_444[0x4];                                      // 0x0444(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat1;                  // 0x0448(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor1;                 // 0x0450(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent1;             // 0x0458(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName1;              // 0x0460(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem1;                  // 0x0468(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex1;                // 0x046C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart1;               // 0x0470(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd1;                 // 0x047C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0488(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0490(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit2;             // 0x0491(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap2;          // 0x0492(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_493[0x1];                                      // 0x0493(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time2;                     // 0x0494(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance2;                 // 0x0498(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location2;                 // 0x049C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint2;              // 0x04A8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal2;                   // 0x04B4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal2;             // 0x04C0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CC[0x4];                                      // 0x04CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat2;                  // 0x04D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor2;                 // 0x04D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent2;             // 0x04E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName2;              // 0x04E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem2;                  // 0x04F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex2;                // 0x04F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart2;               // 0x04F8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd2;                 // 0x0504(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldIgnoreCharacterCondition_Ignore;    // 0x0510(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_511[0x7];                                      // 0x0511(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character1;     // 0x0518(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0520(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldIgnoreCharacterCondition_Ignore1;   // 0x0521(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_522[0x2];                                      // 0x0522(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue3;                // 0x0524(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue2;                 // 0x0528(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBTraceFunctions_C_TraceSlope) == 0x000008, "Wrong alignment on BPF_AJBTraceFunctions_C_TraceSlope");
static_assert(sizeof(BPF_AJBTraceFunctions_C_TraceSlope) == 0x000530, "Wrong size on BPF_AJBTraceFunctions_C_TraceSlope");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CharacterBP) == 0x000000, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CharacterBP' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, StartLocation) == 0x000008, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::StartLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, Direction) == 0x000014, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::Direction' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, Length) == 0x000020, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::Length' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, ObjectTypes) == 0x000028, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::ObjectTypes' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, TraceStartHeightBuffer) == 0x000038, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::TraceStartHeightBuffer' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, TraceEndHeightBuffer) == 0x00003C, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::TraceEndHeightBuffer' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CachedDefaultDirection) == 0x000040, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CachedDefaultDirection' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CachedSlopeDirection) == 0x00004C, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CachedSlopeDirection' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, __WorldContext) == 0x000058, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, NewLocation) == 0x000060, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::NewLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, NewDirection) == 0x00006C, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::NewDirection' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, NewLength) == 0x000078, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::NewLength' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, NewSlopeDirection) == 0x00007C, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::NewSlopeDirection' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, Temp_ProperLocation) == 0x000088, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::Temp_ProperLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, Temp_FoundProperLocation) == 0x000094, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::Temp_FoundProperLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, Temp_MinLengthBetweenStartAndHit) == 0x000098, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::Temp_MinLengthBetweenStartAndHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, Temp_HitResults) == 0x0000A0, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::Temp_HitResults' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_MakeVector_ReturnValue) == 0x0000B0, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_MakeVector_ReturnValue1) == 0x0000BC, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_MakeVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_GetCapsuleHalfHeight_CapsuleHalfHeight) == 0x0000C8, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_GetCapsuleHalfHeight_CapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_GetCapsuleRadius_CapsuleRadius) == 0x0000CC, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_GetCapsuleRadius_CapsuleRadius' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_GetCapsuleHalfHeight_CapsuleHalfHeight1) == 0x0000D0, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_GetCapsuleHalfHeight_CapsuleHalfHeight1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_GetCapsuleRadius_CapsuleRadius1) == 0x0000D4, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_GetCapsuleRadius_CapsuleRadius1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000D8, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, Temp_int_Array_Index_Variable) == 0x0000E4, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, Temp_int_Array_Index_Variable1) == 0x0000E8, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::Temp_int_Array_Index_Variable1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, Temp_int_Loop_Counter_Variable) == 0x0000EC, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, Temp_int_Loop_Counter_Variable1) == 0x0000F0, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::Temp_int_Loop_Counter_Variable1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_Add_IntInt_ReturnValue) == 0x0000F4, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_Add_IntInt_ReturnValue1) == 0x0000F8, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, K2Node_MakeArray_Array) == 0x000100, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000110, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_Array_Get_Item) == 0x000118, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_Array_Length_ReturnValue) == 0x0001A0, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_bBlockingHit) == 0x0001A4, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_bInitialOverlap) == 0x0001A5, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_Time) == 0x0001A8, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_Distance) == 0x0001AC, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_Location) == 0x0001B0, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_ImpactPoint) == 0x0001BC, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_Normal) == 0x0001C8, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_ImpactNormal) == 0x0001D4, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_PhysMat) == 0x0001E0, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_HitActor) == 0x0001E8, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_HitComponent) == 0x0001F0, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_HitBoneName) == 0x0001F8, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_HitItem) == 0x000200, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_FaceIndex) == 0x000204, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_TraceStart) == 0x000208, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_TraceEnd) == 0x000214, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_Less_IntInt_ReturnValue) == 0x000220, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000224, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_VSize_ReturnValue) == 0x000230, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000234, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, Temp_int_Loop_Counter_Variable2) == 0x000238, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::Temp_int_Loop_Counter_Variable2' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_Add_IntInt_ReturnValue2) == 0x00023C, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_Add_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, Temp_int_Array_Index_Variable2) == 0x000240, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::Temp_int_Array_Index_Variable2' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_Array_Length_ReturnValue1) == 0x000244, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_Greater_IntInt_ReturnValue) == 0x000248, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_Multiply_VectorFloat_ReturnValue1) == 0x00024C, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_Multiply_VectorFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_Add_VectorVector_ReturnValue) == 0x000258, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_Add_VectorVector_ReturnValue1) == 0x000264, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_Add_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_Add_VectorVector_ReturnValue2) == 0x000270, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_Add_VectorVector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_Add_VectorVector_ReturnValue3) == 0x00027C, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_Add_VectorVector_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_Multiply_VectorFloat_ReturnValue2) == 0x000288, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_Multiply_VectorFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, K2Node_MakeArray_Array1) == 0x000298, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::K2Node_MakeArray_Array1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_Add_VectorVector_ReturnValue4) == 0x0002A8, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_Add_VectorVector_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_AJBMultiCapsuleTraceForObjects_OutHits) == 0x0002B8, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_AJBMultiCapsuleTraceForObjects_OutHits' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_AJBMultiCapsuleTraceForObjects_ReturnValue) == 0x0002C8, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_AJBMultiCapsuleTraceForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_Add_VectorVector_ReturnValue5) == 0x0002CC, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_Add_VectorVector_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_Array_Get_Item1) == 0x0002D8, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_AJBMultiCapsuleTraceForObjects_OutHits1) == 0x000360, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_AJBMultiCapsuleTraceForObjects_OutHits1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_AJBMultiCapsuleTraceForObjects_ReturnValue1) == 0x000370, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_AJBMultiCapsuleTraceForObjects_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_Array_Add_ReturnValue) == 0x000374, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_Array_Get_Item2) == 0x000378, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_Array_Get_Item2' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_Array_Length_ReturnValue2) == 0x000400, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_Array_Length_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_Array_Add_ReturnValue1) == 0x000404, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_Array_Add_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_Less_IntInt_ReturnValue1) == 0x000408, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_Less_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_bBlockingHit1) == 0x000409, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_bBlockingHit1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_bInitialOverlap1) == 0x00040A, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_bInitialOverlap1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_Time1) == 0x00040C, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_Time1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_Distance1) == 0x000410, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_Distance1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_Location1) == 0x000414, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_Location1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_ImpactPoint1) == 0x000420, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_ImpactPoint1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_Normal1) == 0x00042C, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_Normal1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_ImpactNormal1) == 0x000438, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_ImpactNormal1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_PhysMat1) == 0x000448, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_PhysMat1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_HitActor1) == 0x000450, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_HitActor1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_HitComponent1) == 0x000458, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_HitComponent1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_HitBoneName1) == 0x000460, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_HitBoneName1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_HitItem1) == 0x000468, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_HitItem1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_FaceIndex1) == 0x00046C, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_FaceIndex1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_TraceStart1) == 0x000470, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_TraceStart1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_TraceEnd1) == 0x00047C, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_TraceEnd1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000488, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, K2Node_DynamicCast_bSuccess) == 0x000490, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_bBlockingHit2) == 0x000491, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_bBlockingHit2' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_bInitialOverlap2) == 0x000492, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_bInitialOverlap2' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_Time2) == 0x000494, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_Time2' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_Distance2) == 0x000498, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_Distance2' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_Location2) == 0x00049C, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_Location2' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_ImpactPoint2) == 0x0004A8, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_ImpactPoint2' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_Normal2) == 0x0004B4, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_Normal2' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_ImpactNormal2) == 0x0004C0, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_ImpactNormal2' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_PhysMat2) == 0x0004D0, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_PhysMat2' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_HitActor2) == 0x0004D8, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_HitActor2' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_HitComponent2) == 0x0004E0, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_HitComponent2' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_HitBoneName2) == 0x0004E8, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_HitBoneName2' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_HitItem2) == 0x0004F0, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_HitItem2' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_FaceIndex2) == 0x0004F4, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_FaceIndex2' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_TraceStart2) == 0x0004F8, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_TraceStart2' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_BreakHitResult_TraceEnd2) == 0x000504, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_BreakHitResult_TraceEnd2' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_ShouldIgnoreCharacterCondition_Ignore) == 0x000510, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_ShouldIgnoreCharacterCondition_Ignore' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, K2Node_DynamicCast_AsBP_AJBIn_Game_Character1) == 0x000518, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::K2Node_DynamicCast_AsBP_AJBIn_Game_Character1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, K2Node_DynamicCast_bSuccess1) == 0x000520, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_ShouldIgnoreCharacterCondition_Ignore1) == 0x000521, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_ShouldIgnoreCharacterCondition_Ignore1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_Array_Length_ReturnValue3) == 0x000524, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_Array_Length_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSlope, CallFunc_Less_IntInt_ReturnValue2) == 0x000528, "Member 'BPF_AJBTraceFunctions_C_TraceSlope::CallFunc_Less_IntInt_ReturnValue2' has a wrong offset!");

// Function BPF_AJBTraceFunctions.BPF_AJBTraceFunctions_C.TraceSpacing
// 0x01C0 (0x01C0 - 0x0000)
struct BPF_AJBTraceFunctions_C_TraceSpacing final
{
public:
	class ABP_AJBInGameCharacter_C*               CharacterBP;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartLocation;                                     // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DefaultDirection;                                  // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	class UObject*                                __WorldContext;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCanSpace;                                         // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCapsuleHalfHeight_CapsuleHalfHeight;   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCapsuleRadius_CapsuleRadius;           // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0048(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0058(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue1;        // 0x0064(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue1;            // 0x0070(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0080(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	TArray<struct FHitResult>                     CallFunc_AJBMultiCapsuleTraceForObjects_OutHits;   // 0x0090(0x0010)(ZeroConstructor, ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_AJBMultiCapsuleTraceForObjects_ReturnValue; // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_Array_Get_Item;                           // 0x00A8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0132(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_133[0x1];                                      // 0x0133(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x013C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0148(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0154(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0160(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0180(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0198(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01A4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldIgnoreCharacterCondition_Ignore;    // 0x01B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBTraceFunctions_C_TraceSpacing) == 0x000008, "Wrong alignment on BPF_AJBTraceFunctions_C_TraceSpacing");
static_assert(sizeof(BPF_AJBTraceFunctions_C_TraceSpacing) == 0x0001C0, "Wrong size on BPF_AJBTraceFunctions_C_TraceSpacing");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, CharacterBP) == 0x000000, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::CharacterBP' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, StartLocation) == 0x000008, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::StartLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, DefaultDirection) == 0x000014, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::DefaultDirection' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, ObjectTypes) == 0x000020, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::ObjectTypes' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, __WorldContext) == 0x000030, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, bCanSpace) == 0x000038, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::bCanSpace' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, CallFunc_GetCapsuleHalfHeight_CapsuleHalfHeight) == 0x00003C, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::CallFunc_GetCapsuleHalfHeight_CapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, CallFunc_GetCapsuleRadius_CapsuleRadius) == 0x000040, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::CallFunc_GetCapsuleRadius_CapsuleRadius' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, Temp_int_Loop_Counter_Variable) == 0x000044, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000048, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, CallFunc_Add_IntInt_ReturnValue) == 0x000054, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, CallFunc_Add_VectorVector_ReturnValue) == 0x000058, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, CallFunc_Multiply_VectorFloat_ReturnValue1) == 0x000064, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::CallFunc_Multiply_VectorFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, CallFunc_Add_VectorVector_ReturnValue1) == 0x000070, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::CallFunc_Add_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, Temp_int_Array_Index_Variable) == 0x00007C, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, K2Node_MakeArray_Array) == 0x000080, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, CallFunc_AJBMultiCapsuleTraceForObjects_OutHits) == 0x000090, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::CallFunc_AJBMultiCapsuleTraceForObjects_OutHits' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, CallFunc_AJBMultiCapsuleTraceForObjects_ReturnValue) == 0x0000A0, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::CallFunc_AJBMultiCapsuleTraceForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, CallFunc_Array_Length_ReturnValue) == 0x0000A4, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, CallFunc_Array_Get_Item) == 0x0000A8, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, CallFunc_Less_IntInt_ReturnValue) == 0x000130, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, CallFunc_BreakHitResult_bBlockingHit) == 0x000131, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, CallFunc_BreakHitResult_bInitialOverlap) == 0x000132, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, CallFunc_BreakHitResult_Time) == 0x000134, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, CallFunc_BreakHitResult_Distance) == 0x000138, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, CallFunc_BreakHitResult_Location) == 0x00013C, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, CallFunc_BreakHitResult_ImpactPoint) == 0x000148, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, CallFunc_BreakHitResult_Normal) == 0x000154, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, CallFunc_BreakHitResult_ImpactNormal) == 0x000160, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, CallFunc_BreakHitResult_PhysMat) == 0x000170, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, CallFunc_BreakHitResult_HitActor) == 0x000178, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, CallFunc_BreakHitResult_HitComponent) == 0x000180, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, CallFunc_BreakHitResult_HitBoneName) == 0x000188, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, CallFunc_BreakHitResult_HitItem) == 0x000190, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, CallFunc_BreakHitResult_FaceIndex) == 0x000194, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, CallFunc_BreakHitResult_TraceStart) == 0x000198, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, CallFunc_BreakHitResult_TraceEnd) == 0x0001A4, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x0001B0, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, K2Node_DynamicCast_bSuccess) == 0x0001B8, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceSpacing, CallFunc_ShouldIgnoreCharacterCondition_Ignore) == 0x0001B9, "Member 'BPF_AJBTraceFunctions_C_TraceSpacing::CallFunc_ShouldIgnoreCharacterCondition_Ignore' has a wrong offset!");

// Function BPF_AJBTraceFunctions.BPF_AJBTraceFunctions_C.TraceGrounding
// 0x0208 (0x0208 - 0x0000)
struct BPF_AJBTraceFunctions_C_TraceGrounding final
{
public:
	class ABP_AJBInGameCharacter_C*               CharacterBP;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartLocation;                                     // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DefaultDirection;                                  // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldSpace;                                      // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	float                                         Distance;                                          // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NewLocation;                                       // 0x0048(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSucceed;                                          // 0x0054(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bTempHit;                                          // 0x0055(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TempLocation;                                      // 0x0058(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempHitDistance;                                   // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCapsuleHalfHeight_CapsuleHalfHeight;   // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCapsuleRadius_CapsuleRadius;           // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0070(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0088(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0094(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable1;                               // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Select_Default;                             // 0x00A4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select1_Default;                            // 0x00B0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00BC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x00C8(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	TArray<struct FHitResult>                     CallFunc_AJBMultiCapsuleTraceForObjects_OutHits;   // 0x00D8(0x0010)(ZeroConstructor, ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_AJBMultiCapsuleTraceForObjects_ReturnValue; // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_Array_Get_Item;                           // 0x00F0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x017A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17B[0x1];                                      // 0x017B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0184(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0190(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x019C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01A8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B4[0x4];                                      // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01C8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01E0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01EC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldIgnoreCharacterCondition_Ignore;    // 0x0201(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0202(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBTraceFunctions_C_TraceGrounding) == 0x000008, "Wrong alignment on BPF_AJBTraceFunctions_C_TraceGrounding");
static_assert(sizeof(BPF_AJBTraceFunctions_C_TraceGrounding) == 0x000208, "Wrong size on BPF_AJBTraceFunctions_C_TraceGrounding");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, CharacterBP) == 0x000000, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::CharacterBP' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, StartLocation) == 0x000008, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::StartLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, DefaultDirection) == 0x000014, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::DefaultDirection' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, bShouldSpace) == 0x000020, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::bShouldSpace' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, ObjectTypes) == 0x000028, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::ObjectTypes' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, Distance) == 0x000038, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::Distance' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, __WorldContext) == 0x000040, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, NewLocation) == 0x000048, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::NewLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, bSucceed) == 0x000054, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::bSucceed' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, bTempHit) == 0x000055, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::bTempHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, TempLocation) == 0x000058, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::TempLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, TempHitDistance) == 0x000064, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::TempHitDistance' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, CallFunc_GetCapsuleHalfHeight_CapsuleHalfHeight) == 0x000068, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::CallFunc_GetCapsuleHalfHeight_CapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, CallFunc_GetCapsuleRadius_CapsuleRadius) == 0x00006C, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::CallFunc_GetCapsuleRadius_CapsuleRadius' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, CallFunc_MakeVector_ReturnValue) == 0x000070, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, Temp_int_Array_Index_Variable) == 0x00007C, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, Temp_int_Loop_Counter_Variable) == 0x000080, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, CallFunc_Add_IntInt_ReturnValue) == 0x000084, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000088, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, CallFunc_Add_VectorVector_ReturnValue) == 0x000094, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, Temp_bool_Variable) == 0x0000A0, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, Temp_bool_Variable1) == 0x0000A1, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, K2Node_Select_Default) == 0x0000A4, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, K2Node_Select1_Default) == 0x0000B0, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000BC, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, K2Node_MakeArray_Array) == 0x0000C8, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, CallFunc_AJBMultiCapsuleTraceForObjects_OutHits) == 0x0000D8, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::CallFunc_AJBMultiCapsuleTraceForObjects_OutHits' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, CallFunc_AJBMultiCapsuleTraceForObjects_ReturnValue) == 0x0000E8, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::CallFunc_AJBMultiCapsuleTraceForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, CallFunc_Array_Length_ReturnValue) == 0x0000EC, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, CallFunc_Array_Get_Item) == 0x0000F0, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, CallFunc_Less_IntInt_ReturnValue) == 0x000178, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, CallFunc_BreakHitResult_bBlockingHit) == 0x000179, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, CallFunc_BreakHitResult_bInitialOverlap) == 0x00017A, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, CallFunc_BreakHitResult_Time) == 0x00017C, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, CallFunc_BreakHitResult_Distance) == 0x000180, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, CallFunc_BreakHitResult_Location) == 0x000184, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, CallFunc_BreakHitResult_ImpactPoint) == 0x000190, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, CallFunc_BreakHitResult_Normal) == 0x00019C, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, CallFunc_BreakHitResult_ImpactNormal) == 0x0001A8, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, CallFunc_BreakHitResult_PhysMat) == 0x0001B8, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, CallFunc_BreakHitResult_HitActor) == 0x0001C0, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, CallFunc_BreakHitResult_HitComponent) == 0x0001C8, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, CallFunc_BreakHitResult_HitBoneName) == 0x0001D0, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, CallFunc_BreakHitResult_HitItem) == 0x0001D8, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, CallFunc_BreakHitResult_FaceIndex) == 0x0001DC, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, CallFunc_BreakHitResult_TraceStart) == 0x0001E0, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, CallFunc_BreakHitResult_TraceEnd) == 0x0001EC, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x0001F8, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, K2Node_DynamicCast_bSuccess) == 0x000200, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, CallFunc_ShouldIgnoreCharacterCondition_Ignore) == 0x000201, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::CallFunc_ShouldIgnoreCharacterCondition_Ignore' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_TraceGrounding, CallFunc_Less_FloatFloat_ReturnValue) == 0x000202, "Member 'BPF_AJBTraceFunctions_C_TraceGrounding::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");

// Function BPF_AJBTraceFunctions.BPF_AJBTraceFunctions_C.ShouldIgnoreCharacterCondition
// 0x0018 (0x0018 - 0x0000)
struct BPF_AJBTraceFunctions_C_ShouldIgnoreCharacterCondition final
{
public:
	class ABP_AJBInGameCharacter_C*               CharacterBP;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ignore;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckPossibleDetection_bPossibleDetection; // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CharacterBehaviorMatches_ReturnValue;     // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBTraceFunctions_C_ShouldIgnoreCharacterCondition) == 0x000008, "Wrong alignment on BPF_AJBTraceFunctions_C_ShouldIgnoreCharacterCondition");
static_assert(sizeof(BPF_AJBTraceFunctions_C_ShouldIgnoreCharacterCondition) == 0x000018, "Wrong size on BPF_AJBTraceFunctions_C_ShouldIgnoreCharacterCondition");
static_assert(offsetof(BPF_AJBTraceFunctions_C_ShouldIgnoreCharacterCondition, CharacterBP) == 0x000000, "Member 'BPF_AJBTraceFunctions_C_ShouldIgnoreCharacterCondition::CharacterBP' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_ShouldIgnoreCharacterCondition, __WorldContext) == 0x000008, "Member 'BPF_AJBTraceFunctions_C_ShouldIgnoreCharacterCondition::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_ShouldIgnoreCharacterCondition, Ignore) == 0x000010, "Member 'BPF_AJBTraceFunctions_C_ShouldIgnoreCharacterCondition::Ignore' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_ShouldIgnoreCharacterCondition, CallFunc_CheckPossibleDetection_bPossibleDetection) == 0x000011, "Member 'BPF_AJBTraceFunctions_C_ShouldIgnoreCharacterCondition::CallFunc_CheckPossibleDetection_bPossibleDetection' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_ShouldIgnoreCharacterCondition, CallFunc_CharacterBehaviorMatches_ReturnValue) == 0x000012, "Member 'BPF_AJBTraceFunctions_C_ShouldIgnoreCharacterCondition::CallFunc_CharacterBehaviorMatches_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_ShouldIgnoreCharacterCondition, CallFunc_Not_PreBool_ReturnValue) == 0x000013, "Member 'BPF_AJBTraceFunctions_C_ShouldIgnoreCharacterCondition::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBTraceFunctions_C_ShouldIgnoreCharacterCondition, CallFunc_BooleanOR_ReturnValue) == 0x000014, "Member 'BPF_AJBTraceFunctions_C_ShouldIgnoreCharacterCondition::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

}

