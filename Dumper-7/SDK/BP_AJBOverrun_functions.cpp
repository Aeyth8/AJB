#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBOverrun

#include "Basic.hpp"

#include "BP_AJBOverrun_classes.hpp"
#include "BP_AJBOverrun_parameters.hpp"


namespace SDK
{

// Function BP_AJBOverrun.BP_AJBOverrun_C.ExecuteUbergraph_BP_AJBOverrun
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBOverrun_C::ExecuteUbergraph_BP_AJBOverrun(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBOverrun_C", "ExecuteUbergraph_BP_AJBOverrun");

	Params::BP_AJBOverrun_C_ExecuteUbergraph_BP_AJBOverrun Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBOverrun.BP_AJBOverrun_C.ApplySprintDamage_Server
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           HitActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UActorComponent*                  HitComponent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Hit_Location                                           (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitNormal                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SerialNumber_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CuttingRate                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBOverrun_C::ApplySprintDamage_Server(class AActor* HitActor, class UActorComponent* HitComponent, const struct FVector& Hit_Location, const struct FVector& HitNormal, int32 SerialNumber_0, float CuttingRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBOverrun_C", "ApplySprintDamage_Server");

	Params::BP_AJBOverrun_C_ApplySprintDamage_Server Parms{};

	Parms.HitActor = HitActor;
	Parms.HitComponent = HitComponent;
	Parms.Hit_Location = std::move(Hit_Location);
	Parms.HitNormal = std::move(HitNormal);
	Parms.SerialNumber_0 = SerialNumber_0;
	Parms.CuttingRate = CuttingRate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBOverrun.BP_AJBOverrun_C.SetOverrunBuff
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBOverrun_C::SetOverrunBuff(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBOverrun_C", "SetOverrunBuff");

	Params::BP_AJBOverrun_C_SetOverrunBuff Parms{};

	Parms.IsEnabled = IsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBOverrun.BP_AJBOverrun_C.SetSkillMovementMode
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBOverrun_C::SetSkillMovementMode(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBOverrun_C", "SetSkillMovementMode");

	Params::BP_AJBOverrun_C_SetSkillMovementMode Parms{};

	Parms.IsEnabled = IsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBOverrun.BP_AJBOverrun_C.GetKnockbackBasePower
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  BasePower                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBOverrun_C::GetKnockbackBasePower(class AActor* TargetActor, float* BasePower)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBOverrun_C", "GetKnockbackBasePower");

	Params::BP_AJBOverrun_C_GetKnockbackBasePower Parms{};

	Parms.TargetActor = TargetActor;

	UObject::ProcessEvent(Func, &Parms);

	if (BasePower != nullptr)
		*BasePower = Parms.BasePower;
}


// Function BP_AJBOverrun.BP_AJBOverrun_C.EndState_Local
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBOverrun_C::EndState_Local()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBOverrun_C", "EndState_Local");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBOverrun.BP_AJBOverrun_C.BeginState_Clearing_Local
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBOverrun_C::BeginState_Clearing_Local()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBOverrun_C", "BeginState_Clearing_Local");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBOverrun.BP_AJBOverrun_C.BeginState_Action_Local
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBOverrun_C::BeginState_Action_Local()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBOverrun_C", "BeginState_Action_Local");

	UObject::ProcessEvent(Func, nullptr);
}

}

