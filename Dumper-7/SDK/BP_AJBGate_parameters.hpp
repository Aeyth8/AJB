#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBGate

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ST_GateState_structs.hpp"
#include "E_GateState_structs.hpp"
#include "ST_FXVisibilityInfo_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "E_GionSpawnedSpace_structs.hpp"


namespace SDK::Params
{

// Function BP_AJBGate.BP_AJBGate_C.ExecuteUbergraph_BP_AJBGate
// 0x0200 (0x0200 - 0x0000)
struct BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_GateState                                   Temp_byte_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Temp_class_Variable;                               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Temp_class_Variable1;                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Temp_class_Variable2;                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable1;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_Select_Default;                             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable2;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue2;                  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable1;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable2;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_InteractActor;                        // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_InteractingActor1;                    // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0060(0x0030)(IsPlainOldData, NoDestructor)
	E_GateState                                   Temp_byte_Variable1;                               // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBP_SimpleCurveAnimation_C*>     CallFunc_GetComponentsByClass_ReturnValue;         // 0x0098(0x0010)(ZeroConstructor, ReferenceParm)
	class UBP_SimpleCurveAnimation_C*             CallFunc_Array_Get_Item;                           // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_SimpleCurveAnimation_C*             K2Node_CustomEvent_AnimComponent1;                 // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UBP_SimpleCurveAnimation_C* AnimComponent)> K2Node_CreateDelegate_OutputDelegate; // 0x00C0(0x0010)(ZeroConstructor, NoDestructor)
	TArray<class USceneComponent*>                CallFunc_GetChildrenComponents_Children;           // 0x00D0(0x0010)(ZeroConstructor, ReferenceParm)
	class USceneComponent*                        CallFunc_Array_Get_Item1;                          // 0x00E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_DynamicCast_AsPrimitive_Component;          // 0x00F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue1;                 // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_GateState                                   Temp_byte_Variable2;                               // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FB[0x5];                                       // 0x00FB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UBP_SimpleCurveAnimation_C* AnimComponent, bool bReverse)> K2Node_CreateDelegate_OutputDelegate1; // 0x0100(0x0010)(ZeroConstructor, NoDestructor)
	class UBP_SimpleCurveAnimation_C*             K2Node_CustomEvent_AnimComponent;                  // 0x0110(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bReverse;                       // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_InteractingActor;               // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USceneComponent*>                CallFunc_GetChildrenComponents_Children1;          // 0x0128(0x0010)(ZeroConstructor, ReferenceParm)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0138(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_Array_Get_Item2;                          // 0x0148(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformLocation_ReturnValue;     // 0x0150(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_DynamicCast_AsPrimitive_Component1;         // 0x0160(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_169[0x3];                                      // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_179[0x3];                                      // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue2;                // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue2;                 // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_182[0x6];                                      // 0x0182(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_GateState                          K2Node_MakeStruct_ST_GateState;                    // 0x0188(0x0010)(HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_InteractingActor;                     // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_ServerIsInteractingPlayer;            // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x01A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x01A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_GateState                                   K2Node_Select1_Default;                            // 0x01A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A4[0x4];                                      // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_GateState                          K2Node_MakeStruct_ST_GateState1;                   // 0x01A8(0x0010)(HasGetValueTypeHash)
	struct FST_GateState                          K2Node_MakeStruct_ST_GateState2;                   // 0x01B8(0x0010)(HasGetValueTypeHash)
	struct FST_GateState                          K2Node_MakeStruct_ST_GateState3;                   // 0x01C8(0x0010)(HasGetValueTypeHash)
	struct FST_GateState                          K2Node_CustomEvent_New_GateState;                  // 0x01D8(0x0010)(ConstParm, HasGetValueTypeHash)
	struct FST_GateState                          K2Node_CustomEvent_NewGateState;                   // 0x01E8(0x0010)(HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate) == 0x000010, "Wrong alignment on BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate");
static_assert(sizeof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate) == 0x000200, "Wrong size on BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, EntryPoint) == 0x000000, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, Temp_byte_Variable) == 0x00000C, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, Temp_class_Variable) == 0x000010, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::Temp_class_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, Temp_class_Variable1) == 0x000018, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::Temp_class_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, Temp_class_Variable2) == 0x000020, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::Temp_class_Variable2' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, Temp_int_Array_Index_Variable) == 0x000028, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, Temp_int_Loop_Counter_Variable1) == 0x00002C, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::Temp_int_Loop_Counter_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, K2Node_Select_Default) == 0x000030, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, CallFunc_Add_IntInt_ReturnValue1) == 0x000038, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, Temp_int_Loop_Counter_Variable2) == 0x00003C, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::Temp_int_Loop_Counter_Variable2' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, CallFunc_Add_IntInt_ReturnValue2) == 0x000040, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::CallFunc_Add_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, Temp_int_Array_Index_Variable1) == 0x000044, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::Temp_int_Array_Index_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, Temp_int_Array_Index_Variable2) == 0x000048, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::Temp_int_Array_Index_Variable2' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, K2Node_Event_InteractActor) == 0x000050, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::K2Node_Event_InteractActor' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, K2Node_Event_InteractingActor1) == 0x000058, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::K2Node_Event_InteractingActor1' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000060, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, Temp_byte_Variable1) == 0x000090, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, CallFunc_GetComponentsByClass_ReturnValue) == 0x000098, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::CallFunc_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, CallFunc_Array_Get_Item) == 0x0000A8, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, CallFunc_Array_Length_ReturnValue) == 0x0000B0, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, CallFunc_Less_IntInt_ReturnValue) == 0x0000B4, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, K2Node_CustomEvent_AnimComponent1) == 0x0000B8, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::K2Node_CustomEvent_AnimComponent1' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, K2Node_CreateDelegate_OutputDelegate) == 0x0000C0, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, CallFunc_GetChildrenComponents_Children) == 0x0000D0, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::CallFunc_GetChildrenComponents_Children' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, CallFunc_Array_Get_Item1) == 0x0000E0, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, CallFunc_Array_Length_ReturnValue1) == 0x0000E8, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, K2Node_DynamicCast_AsPrimitive_Component) == 0x0000F0, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::K2Node_DynamicCast_AsPrimitive_Component' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, K2Node_DynamicCast_bSuccess) == 0x0000F8, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, CallFunc_Less_IntInt_ReturnValue1) == 0x0000F9, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::CallFunc_Less_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, Temp_byte_Variable2) == 0x0000FA, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, K2Node_CreateDelegate_OutputDelegate1) == 0x000100, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, K2Node_CustomEvent_AnimComponent) == 0x000110, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::K2Node_CustomEvent_AnimComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, K2Node_CustomEvent_bReverse) == 0x000118, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::K2Node_CustomEvent_bReverse' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, K2Node_CustomEvent_InteractingActor) == 0x000120, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::K2Node_CustomEvent_InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, CallFunc_GetChildrenComponents_Children1) == 0x000128, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::CallFunc_GetChildrenComponents_Children1' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000138, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, CallFunc_Array_Get_Item2) == 0x000148, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::CallFunc_Array_Get_Item2' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, CallFunc_InverseTransformLocation_ReturnValue) == 0x000150, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::CallFunc_InverseTransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, K2Node_DynamicCast_AsPrimitive_Component1) == 0x000160, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::K2Node_DynamicCast_AsPrimitive_Component1' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, K2Node_DynamicCast_bSuccess1) == 0x000168, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, CallFunc_BreakVector_X) == 0x00016C, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, CallFunc_BreakVector_Y) == 0x000170, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, CallFunc_BreakVector_Z) == 0x000174, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000178, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, CallFunc_Array_Length_ReturnValue2) == 0x00017C, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::CallFunc_Array_Length_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, CallFunc_BooleanAND_ReturnValue) == 0x000180, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, CallFunc_Less_IntInt_ReturnValue2) == 0x000181, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::CallFunc_Less_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, K2Node_MakeStruct_ST_GateState) == 0x000188, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::K2Node_MakeStruct_ST_GateState' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, K2Node_Event_InteractingActor) == 0x000198, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::K2Node_Event_InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, K2Node_Event_ServerIsInteractingPlayer) == 0x0001A0, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::K2Node_Event_ServerIsInteractingPlayer' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, Temp_bool_Variable) == 0x0001A1, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x0001A2, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, K2Node_Select1_Default) == 0x0001A3, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, K2Node_MakeStruct_ST_GateState1) == 0x0001A8, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::K2Node_MakeStruct_ST_GateState1' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, K2Node_MakeStruct_ST_GateState2) == 0x0001B8, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::K2Node_MakeStruct_ST_GateState2' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, K2Node_MakeStruct_ST_GateState3) == 0x0001C8, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::K2Node_MakeStruct_ST_GateState3' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, K2Node_CustomEvent_New_GateState) == 0x0001D8, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::K2Node_CustomEvent_New_GateState' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate, K2Node_CustomEvent_NewGateState) == 0x0001E8, "Member 'BP_AJBGate_C_ExecuteUbergraph_BP_AJBGate::K2Node_CustomEvent_NewGateState' has a wrong offset!");

// Function BP_AJBGate.BP_AJBGate_C.OpenOrClose(Server)
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBGate_C_OpenOrClose_Server_ final
{
public:
	struct FST_GateState                          NewGateState;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBGate_C_OpenOrClose_Server_) == 0x000008, "Wrong alignment on BP_AJBGate_C_OpenOrClose_Server_");
static_assert(sizeof(BP_AJBGate_C_OpenOrClose_Server_) == 0x000010, "Wrong size on BP_AJBGate_C_OpenOrClose_Server_");
static_assert(offsetof(BP_AJBGate_C_OpenOrClose_Server_, NewGateState) == 0x000000, "Member 'BP_AJBGate_C_OpenOrClose_Server_::NewGateState' has a wrong offset!");

// Function BP_AJBGate.BP_AJBGate_C.MC_OpenOrCloseTheMoment
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBGate_C_MC_OpenOrCloseTheMoment final
{
public:
	struct FST_GateState                          New_GateState;                                     // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBGate_C_MC_OpenOrCloseTheMoment) == 0x000008, "Wrong alignment on BP_AJBGate_C_MC_OpenOrCloseTheMoment");
static_assert(sizeof(BP_AJBGate_C_MC_OpenOrCloseTheMoment) == 0x000010, "Wrong size on BP_AJBGate_C_MC_OpenOrCloseTheMoment");
static_assert(offsetof(BP_AJBGate_C_MC_OpenOrCloseTheMoment, New_GateState) == 0x000000, "Member 'BP_AJBGate_C_MC_OpenOrCloseTheMoment::New_GateState' has a wrong offset!");

// Function BP_AJBGate.BP_AJBGate_C.OnROSInteract
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBGate_C_OnROSInteract final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ServerIsInteractingPlayer;                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBGate_C_OnROSInteract) == 0x000008, "Wrong alignment on BP_AJBGate_C_OnROSInteract");
static_assert(sizeof(BP_AJBGate_C_OnROSInteract) == 0x000010, "Wrong size on BP_AJBGate_C_OnROSInteract");
static_assert(offsetof(BP_AJBGate_C_OnROSInteract, InteractingActor) == 0x000000, "Member 'BP_AJBGate_C_OnROSInteract::InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_OnROSInteract, ServerIsInteractingPlayer) == 0x000008, "Member 'BP_AJBGate_C_OnROSInteract::ServerIsInteractingPlayer' has a wrong offset!");

// Function BP_AJBGate.BP_AJBGate_C.OpenOrCloseOnInteracrt(Server)
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBGate_C_OpenOrCloseOnInteracrt_Server_ final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBGate_C_OpenOrCloseOnInteracrt_Server_) == 0x000008, "Wrong alignment on BP_AJBGate_C_OpenOrCloseOnInteracrt_Server_");
static_assert(sizeof(BP_AJBGate_C_OpenOrCloseOnInteracrt_Server_) == 0x000008, "Wrong size on BP_AJBGate_C_OpenOrCloseOnInteracrt_Server_");
static_assert(offsetof(BP_AJBGate_C_OpenOrCloseOnInteracrt_Server_, InteractingActor) == 0x000000, "Member 'BP_AJBGate_C_OpenOrCloseOnInteracrt_Server_::InteractingActor' has a wrong offset!");

// Function BP_AJBGate.BP_AJBGate_C.OnStartAnim
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBGate_C_OnStartAnim final
{
public:
	class UBP_SimpleCurveAnimation_C*             AnimComponent;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bReverse;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBGate_C_OnStartAnim) == 0x000008, "Wrong alignment on BP_AJBGate_C_OnStartAnim");
static_assert(sizeof(BP_AJBGate_C_OnStartAnim) == 0x000010, "Wrong size on BP_AJBGate_C_OnStartAnim");
static_assert(offsetof(BP_AJBGate_C_OnStartAnim, AnimComponent) == 0x000000, "Member 'BP_AJBGate_C_OnStartAnim::AnimComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_OnStartAnim, bReverse) == 0x000008, "Member 'BP_AJBGate_C_OnStartAnim::bReverse' has a wrong offset!");

// Function BP_AJBGate.BP_AJBGate_C.OnFinishAnim
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBGate_C_OnFinishAnim final
{
public:
	class UBP_SimpleCurveAnimation_C*             AnimComponent;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBGate_C_OnFinishAnim) == 0x000008, "Wrong alignment on BP_AJBGate_C_OnFinishAnim");
static_assert(sizeof(BP_AJBGate_C_OnFinishAnim) == 0x000008, "Wrong size on BP_AJBGate_C_OnFinishAnim");
static_assert(offsetof(BP_AJBGate_C_OnFinishAnim, AnimComponent) == 0x000000, "Member 'BP_AJBGate_C_OnFinishAnim::AnimComponent' has a wrong offset!");

// Function BP_AJBGate.BP_AJBGate_C.OnInteractionBlocked
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBGate_C_OnInteractionBlocked final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBGate_C_OnInteractionBlocked) == 0x000008, "Wrong alignment on BP_AJBGate_C_OnInteractionBlocked");
static_assert(sizeof(BP_AJBGate_C_OnInteractionBlocked) == 0x000008, "Wrong size on BP_AJBGate_C_OnInteractionBlocked");
static_assert(offsetof(BP_AJBGate_C_OnInteractionBlocked, InteractingActor) == 0x000000, "Member 'BP_AJBGate_C_OnInteractionBlocked::InteractingActor' has a wrong offset!");

// Function BP_AJBGate.BP_AJBGate_C.OnInteract
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBGate_C_OnInteract final
{
public:
	class AActor*                                 InteractActor;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBGate_C_OnInteract) == 0x000008, "Wrong alignment on BP_AJBGate_C_OnInteract");
static_assert(sizeof(BP_AJBGate_C_OnInteract) == 0x000008, "Wrong size on BP_AJBGate_C_OnInteract");
static_assert(offsetof(BP_AJBGate_C_OnInteract, InteractActor) == 0x000000, "Member 'BP_AJBGate_C_OnInteract::InteractActor' has a wrong offset!");

// Function BP_AJBGate.BP_AJBGate_C.OnRep_Rep_GateState
// 0x0088 (0x0088 - 0x0000)
struct BP_AJBGate_C_OnRep_Rep_GateState final
{
public:
	TArray<class UBP_SimpleCurveAnimation_C*>     TempAnimComponents;                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	class FName                                   AnimTagName;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_SimpleCurveAnimation_C*             CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBP_SimpleCurveAnimation_C*>     CallFunc_GetComponentsByClass_ReturnValue;         // 0x0050(0x0010)(ZeroConstructor, ReferenceParm)
	class UBP_SimpleCurveAnimation_C*             CallFunc_Array_Get_Item1;                          // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ComponentHasTag_ReturnValue;              // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue2;                // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue1;                 // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBP_SimpleCurveAnimation_C*>     CallFunc_GetComponentsByClass_ReturnValue1;        // 0x0078(0x0010)(ZeroConstructor, ReferenceParm)
};
static_assert(alignof(BP_AJBGate_C_OnRep_Rep_GateState) == 0x000008, "Wrong alignment on BP_AJBGate_C_OnRep_Rep_GateState");
static_assert(sizeof(BP_AJBGate_C_OnRep_Rep_GateState) == 0x000088, "Wrong size on BP_AJBGate_C_OnRep_Rep_GateState");
static_assert(offsetof(BP_AJBGate_C_OnRep_Rep_GateState, TempAnimComponents) == 0x000000, "Member 'BP_AJBGate_C_OnRep_Rep_GateState::TempAnimComponents' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_OnRep_Rep_GateState, AnimTagName) == 0x000010, "Member 'BP_AJBGate_C_OnRep_Rep_GateState::AnimTagName' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_OnRep_Rep_GateState, Temp_int_Array_Index_Variable) == 0x000018, "Member 'BP_AJBGate_C_OnRep_Rep_GateState::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_OnRep_Rep_GateState, Temp_int_Variable) == 0x00001C, "Member 'BP_AJBGate_C_OnRep_Rep_GateState::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_OnRep_Rep_GateState, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BP_AJBGate_C_OnRep_Rep_GateState::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_OnRep_Rep_GateState, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'BP_AJBGate_C_OnRep_Rep_GateState::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_OnRep_Rep_GateState, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000028, "Member 'BP_AJBGate_C_OnRep_Rep_GateState::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_OnRep_Rep_GateState, CallFunc_Add_IntInt_ReturnValue1) == 0x00002C, "Member 'BP_AJBGate_C_OnRep_Rep_GateState::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_OnRep_Rep_GateState, K2Node_SwitchEnum_CmpSuccess) == 0x000030, "Member 'BP_AJBGate_C_OnRep_Rep_GateState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_OnRep_Rep_GateState, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000031, "Member 'BP_AJBGate_C_OnRep_Rep_GateState::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_OnRep_Rep_GateState, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_AJBGate_C_OnRep_Rep_GateState::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_OnRep_Rep_GateState, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'BP_AJBGate_C_OnRep_Rep_GateState::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_OnRep_Rep_GateState, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'BP_AJBGate_C_OnRep_Rep_GateState::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_OnRep_Rep_GateState, CallFunc_Array_Length_ReturnValue1) == 0x000048, "Member 'BP_AJBGate_C_OnRep_Rep_GateState::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_OnRep_Rep_GateState, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00004C, "Member 'BP_AJBGate_C_OnRep_Rep_GateState::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_OnRep_Rep_GateState, CallFunc_GetComponentsByClass_ReturnValue) == 0x000050, "Member 'BP_AJBGate_C_OnRep_Rep_GateState::CallFunc_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_OnRep_Rep_GateState, CallFunc_Array_Get_Item1) == 0x000060, "Member 'BP_AJBGate_C_OnRep_Rep_GateState::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_OnRep_Rep_GateState, CallFunc_ComponentHasTag_ReturnValue) == 0x000068, "Member 'BP_AJBGate_C_OnRep_Rep_GateState::CallFunc_ComponentHasTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_OnRep_Rep_GateState, CallFunc_BooleanOR_ReturnValue) == 0x000069, "Member 'BP_AJBGate_C_OnRep_Rep_GateState::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_OnRep_Rep_GateState, CallFunc_Array_Length_ReturnValue2) == 0x00006C, "Member 'BP_AJBGate_C_OnRep_Rep_GateState::CallFunc_Array_Length_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_OnRep_Rep_GateState, CallFunc_Less_IntInt_ReturnValue1) == 0x000070, "Member 'BP_AJBGate_C_OnRep_Rep_GateState::CallFunc_Less_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_OnRep_Rep_GateState, CallFunc_GetComponentsByClass_ReturnValue1) == 0x000078, "Member 'BP_AJBGate_C_OnRep_Rep_GateState::CallFunc_GetComponentsByClass_ReturnValue1' has a wrong offset!");

// Function BP_AJBGate.BP_AJBGate_C.PlayGionAndSoundOnSwitching
// 0x0090 (0x0090 - 0x0000)
struct BP_AJBGate_C_PlayGionAndSoundOnSwitching final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bClose;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FST_FXVisibilityInfo                   FXVisibility;                                      // 0x0009(0x0002)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Temp_struct_Variable;                              // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBI_AJBInGameGion_C>   K2Node_DynamicCast_AsBI_AJBIn_Game_Gion;           // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBInGameGion_C>   K2Node_DynamicCast_AsBI_AJBIn_Game_Gion1;          // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_GionSpawnedSpace                            CallFunc_GetSpawnedSpaceInOwnersEnv_SpawnedSpaceInOwnersEnv; // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetGionOwner_GionOwner;                   // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Temp_struct_Variable1;                             // 0x0058(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable1;                               // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0064(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Select_Default;                             // 0x0070(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Select1_Default;                            // 0x0078(0x0008)(NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           CallFunc_RequestGion_AkComponent__LocalOnly_;      // 0x0080(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RequestGion_bFullfilDisplayCond_LocalOnly_; // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBGate_C_PlayGionAndSoundOnSwitching) == 0x000008, "Wrong alignment on BP_AJBGate_C_PlayGionAndSoundOnSwitching");
static_assert(sizeof(BP_AJBGate_C_PlayGionAndSoundOnSwitching) == 0x000090, "Wrong size on BP_AJBGate_C_PlayGionAndSoundOnSwitching");
static_assert(offsetof(BP_AJBGate_C_PlayGionAndSoundOnSwitching, InteractingActor) == 0x000000, "Member 'BP_AJBGate_C_PlayGionAndSoundOnSwitching::InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_PlayGionAndSoundOnSwitching, bClose) == 0x000008, "Member 'BP_AJBGate_C_PlayGionAndSoundOnSwitching::bClose' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_PlayGionAndSoundOnSwitching, FXVisibility) == 0x000009, "Member 'BP_AJBGate_C_PlayGionAndSoundOnSwitching::FXVisibility' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_PlayGionAndSoundOnSwitching, Temp_struct_Variable) == 0x000010, "Member 'BP_AJBGate_C_PlayGionAndSoundOnSwitching::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_PlayGionAndSoundOnSwitching, K2Node_DynamicCast_AsBI_AJBIn_Game_Gion) == 0x000018, "Member 'BP_AJBGate_C_PlayGionAndSoundOnSwitching::K2Node_DynamicCast_AsBI_AJBIn_Game_Gion' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_PlayGionAndSoundOnSwitching, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_AJBGate_C_PlayGionAndSoundOnSwitching::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_PlayGionAndSoundOnSwitching, K2Node_DynamicCast_AsBI_AJBIn_Game_Gion1) == 0x000030, "Member 'BP_AJBGate_C_PlayGionAndSoundOnSwitching::K2Node_DynamicCast_AsBI_AJBIn_Game_Gion1' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_PlayGionAndSoundOnSwitching, K2Node_DynamicCast_bSuccess1) == 0x000040, "Member 'BP_AJBGate_C_PlayGionAndSoundOnSwitching::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_PlayGionAndSoundOnSwitching, CallFunc_GetSpawnedSpaceInOwnersEnv_SpawnedSpaceInOwnersEnv) == 0x000041, "Member 'BP_AJBGate_C_PlayGionAndSoundOnSwitching::CallFunc_GetSpawnedSpaceInOwnersEnv_SpawnedSpaceInOwnersEnv' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_PlayGionAndSoundOnSwitching, CallFunc_GetGionOwner_GionOwner) == 0x000048, "Member 'BP_AJBGate_C_PlayGionAndSoundOnSwitching::CallFunc_GetGionOwner_GionOwner' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_PlayGionAndSoundOnSwitching, Temp_bool_Variable) == 0x000050, "Member 'BP_AJBGate_C_PlayGionAndSoundOnSwitching::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_PlayGionAndSoundOnSwitching, Temp_struct_Variable1) == 0x000058, "Member 'BP_AJBGate_C_PlayGionAndSoundOnSwitching::Temp_struct_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_PlayGionAndSoundOnSwitching, Temp_bool_Variable1) == 0x000060, "Member 'BP_AJBGate_C_PlayGionAndSoundOnSwitching::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_PlayGionAndSoundOnSwitching, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000064, "Member 'BP_AJBGate_C_PlayGionAndSoundOnSwitching::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_PlayGionAndSoundOnSwitching, K2Node_Select_Default) == 0x000070, "Member 'BP_AJBGate_C_PlayGionAndSoundOnSwitching::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_PlayGionAndSoundOnSwitching, K2Node_Select1_Default) == 0x000078, "Member 'BP_AJBGate_C_PlayGionAndSoundOnSwitching::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_PlayGionAndSoundOnSwitching, CallFunc_RequestGion_AkComponent__LocalOnly_) == 0x000080, "Member 'BP_AJBGate_C_PlayGionAndSoundOnSwitching::CallFunc_RequestGion_AkComponent__LocalOnly_' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_PlayGionAndSoundOnSwitching, CallFunc_RequestGion_bFullfilDisplayCond_LocalOnly_) == 0x000088, "Member 'BP_AJBGate_C_PlayGionAndSoundOnSwitching::CallFunc_RequestGion_bFullfilDisplayCond_LocalOnly_' has a wrong offset!");

// Function BP_AJBGate.BP_AJBGate_C.OpenOrCloseTheMoment
// 0x0028 (0x0028 - 0x0000)
struct BP_AJBGate_C_OpenOrCloseTheMoment final
{
public:
	struct FST_GateState                          New_GateState;                                     // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable1;                               // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable2;                               // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_GateState                                   Temp_byte_Variable;                                // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBGate_C_OpenOrCloseTheMoment) == 0x000008, "Wrong alignment on BP_AJBGate_C_OpenOrCloseTheMoment");
static_assert(sizeof(BP_AJBGate_C_OpenOrCloseTheMoment) == 0x000028, "Wrong size on BP_AJBGate_C_OpenOrCloseTheMoment");
static_assert(offsetof(BP_AJBGate_C_OpenOrCloseTheMoment, New_GateState) == 0x000000, "Member 'BP_AJBGate_C_OpenOrCloseTheMoment::New_GateState' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_OpenOrCloseTheMoment, Temp_bool_Variable) == 0x000010, "Member 'BP_AJBGate_C_OpenOrCloseTheMoment::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_OpenOrCloseTheMoment, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000018, "Member 'BP_AJBGate_C_OpenOrCloseTheMoment::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_OpenOrCloseTheMoment, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_AJBGate_C_OpenOrCloseTheMoment::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_OpenOrCloseTheMoment, Temp_bool_Variable1) == 0x000021, "Member 'BP_AJBGate_C_OpenOrCloseTheMoment::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_OpenOrCloseTheMoment, CallFunc_IsDedicatedServer_ReturnValue) == 0x000022, "Member 'BP_AJBGate_C_OpenOrCloseTheMoment::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_OpenOrCloseTheMoment, Temp_bool_Variable2) == 0x000023, "Member 'BP_AJBGate_C_OpenOrCloseTheMoment::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_OpenOrCloseTheMoment, Temp_byte_Variable) == 0x000024, "Member 'BP_AJBGate_C_OpenOrCloseTheMoment::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_OpenOrCloseTheMoment, K2Node_Select_Default) == 0x000025, "Member 'BP_AJBGate_C_OpenOrCloseTheMoment::K2Node_Select_Default' has a wrong offset!");

// Function BP_AJBGate.BP_AJBGate_C.Interactable
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBGate_C_Interactable final
{
public:
	class ABP_AJBInGameCharacter_C*               Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceLength;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBGate_C_Interactable) == 0x000008, "Wrong alignment on BP_AJBGate_C_Interactable");
static_assert(sizeof(BP_AJBGate_C_Interactable) == 0x000010, "Wrong size on BP_AJBGate_C_Interactable");
static_assert(offsetof(BP_AJBGate_C_Interactable, Character) == 0x000000, "Member 'BP_AJBGate_C_Interactable::Character' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_Interactable, TraceLength) == 0x000008, "Member 'BP_AJBGate_C_Interactable::TraceLength' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_Interactable, ReturnValue) == 0x00000C, "Member 'BP_AJBGate_C_Interactable::ReturnValue' has a wrong offset!");

// Function BP_AJBGate.BP_AJBGate_C.InteractInstantly
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBGate_C_InteractInstantly final
{
public:
	class ABP_AJBInGameCharacter_C*               Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBGate_C_InteractInstantly) == 0x000008, "Wrong alignment on BP_AJBGate_C_InteractInstantly");
static_assert(sizeof(BP_AJBGate_C_InteractInstantly) == 0x000010, "Wrong size on BP_AJBGate_C_InteractInstantly");
static_assert(offsetof(BP_AJBGate_C_InteractInstantly, Character) == 0x000000, "Member 'BP_AJBGate_C_InteractInstantly::Character' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_InteractInstantly, ReturnValue) == 0x000008, "Member 'BP_AJBGate_C_InteractInstantly::ReturnValue' has a wrong offset!");

// Function BP_AJBGate.BP_AJBGate_C.TryGetInteractableText
// 0x0028 (0x0028 - 0x0000)
struct BP_AJBGate_C_TryGetInteractableText final
{
public:
	class ABP_AJBInGameCharacter_C*               OperatorCharacter;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   InteractMessage;                                   // 0x0010(0x0018)(Parm, OutParm)
};
static_assert(alignof(BP_AJBGate_C_TryGetInteractableText) == 0x000008, "Wrong alignment on BP_AJBGate_C_TryGetInteractableText");
static_assert(sizeof(BP_AJBGate_C_TryGetInteractableText) == 0x000028, "Wrong size on BP_AJBGate_C_TryGetInteractableText");
static_assert(offsetof(BP_AJBGate_C_TryGetInteractableText, OperatorCharacter) == 0x000000, "Member 'BP_AJBGate_C_TryGetInteractableText::OperatorCharacter' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_TryGetInteractableText, bSuccess) == 0x000008, "Member 'BP_AJBGate_C_TryGetInteractableText::bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_TryGetInteractableText, InteractMessage) == 0x000010, "Member 'BP_AJBGate_C_TryGetInteractableText::InteractMessage' has a wrong offset!");

// Function BP_AJBGate.BP_AJBGate_C.OnLocalInteract
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBGate_C_OnLocalInteract final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBGate_C_OnLocalInteract) == 0x000008, "Wrong alignment on BP_AJBGate_C_OnLocalInteract");
static_assert(sizeof(BP_AJBGate_C_OnLocalInteract) == 0x000010, "Wrong size on BP_AJBGate_C_OnLocalInteract");
static_assert(offsetof(BP_AJBGate_C_OnLocalInteract, InteractingActor) == 0x000000, "Member 'BP_AJBGate_C_OnLocalInteract::InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_OnLocalInteract, bSuccess) == 0x000008, "Member 'BP_AJBGate_C_OnLocalInteract::bSuccess' has a wrong offset!");

// Function BP_AJBGate.BP_AJBGate_C.CheckErrorCondition
// 0x0002 (0x0002 - 0x0000)
struct BP_AJBGate_C_CheckErrorCondition final
{
public:
	bool                                          bErrorCondition;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         ErrorType;                                         // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBGate_C_CheckErrorCondition) == 0x000001, "Wrong alignment on BP_AJBGate_C_CheckErrorCondition");
static_assert(sizeof(BP_AJBGate_C_CheckErrorCondition) == 0x000002, "Wrong size on BP_AJBGate_C_CheckErrorCondition");
static_assert(offsetof(BP_AJBGate_C_CheckErrorCondition, bErrorCondition) == 0x000000, "Member 'BP_AJBGate_C_CheckErrorCondition::bErrorCondition' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_CheckErrorCondition, ErrorType) == 0x000001, "Member 'BP_AJBGate_C_CheckErrorCondition::ErrorType' has a wrong offset!");

// Function BP_AJBGate.BP_AJBGate_C.GetInteractState
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBGate_C_GetInteractState final
{
public:
	uint8                                         InteractState;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBGate_C_GetInteractState) == 0x000001, "Wrong alignment on BP_AJBGate_C_GetInteractState");
static_assert(sizeof(BP_AJBGate_C_GetInteractState) == 0x000001, "Wrong size on BP_AJBGate_C_GetInteractState");
static_assert(offsetof(BP_AJBGate_C_GetInteractState, InteractState) == 0x000000, "Member 'BP_AJBGate_C_GetInteractState::InteractState' has a wrong offset!");

// Function BP_AJBGate.BP_AJBGate_C.GetInteractPriority
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBGate_C_GetInteractPriority final
{
public:
	int32                                         Priority;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBGate_C_GetInteractPriority) == 0x000004, "Wrong alignment on BP_AJBGate_C_GetInteractPriority");
static_assert(sizeof(BP_AJBGate_C_GetInteractPriority) == 0x000004, "Wrong size on BP_AJBGate_C_GetInteractPriority");
static_assert(offsetof(BP_AJBGate_C_GetInteractPriority, Priority) == 0x000000, "Member 'BP_AJBGate_C_GetInteractPriority::Priority' has a wrong offset!");

// Function BP_AJBGate.BP_AJBGate_C.GetInteractBoundForCulling
// 0x0038 (0x0038 - 0x0000)
struct BP_AJBGate_C_GetInteractBoundForCulling final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Center;                                            // 0x0008(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_Origin;                // 0x0018(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_BoxExtent;             // 0x0024(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetComponentBounds_SphereRadius;          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBGate_C_GetInteractBoundForCulling) == 0x000008, "Wrong alignment on BP_AJBGate_C_GetInteractBoundForCulling");
static_assert(sizeof(BP_AJBGate_C_GetInteractBoundForCulling) == 0x000038, "Wrong size on BP_AJBGate_C_GetInteractBoundForCulling");
static_assert(offsetof(BP_AJBGate_C_GetInteractBoundForCulling, InteractingActor) == 0x000000, "Member 'BP_AJBGate_C_GetInteractBoundForCulling::InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_GetInteractBoundForCulling, Center) == 0x000008, "Member 'BP_AJBGate_C_GetInteractBoundForCulling::Center' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_GetInteractBoundForCulling, Radius) == 0x000014, "Member 'BP_AJBGate_C_GetInteractBoundForCulling::Radius' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_GetInteractBoundForCulling, CallFunc_GetComponentBounds_Origin) == 0x000018, "Member 'BP_AJBGate_C_GetInteractBoundForCulling::CallFunc_GetComponentBounds_Origin' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_GetInteractBoundForCulling, CallFunc_GetComponentBounds_BoxExtent) == 0x000024, "Member 'BP_AJBGate_C_GetInteractBoundForCulling::CallFunc_GetComponentBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_GetInteractBoundForCulling, CallFunc_GetComponentBounds_SphereRadius) == 0x000030, "Member 'BP_AJBGate_C_GetInteractBoundForCulling::CallFunc_GetComponentBounds_SphereRadius' has a wrong offset!");

// Function BP_AJBGate.BP_AJBGate_C.IfNeedsExclusiveInteractStrictly
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBGate_C_IfNeedsExclusiveInteractStrictly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBGate_C_IfNeedsExclusiveInteractStrictly) == 0x000001, "Wrong alignment on BP_AJBGate_C_IfNeedsExclusiveInteractStrictly");
static_assert(sizeof(BP_AJBGate_C_IfNeedsExclusiveInteractStrictly) == 0x000001, "Wrong size on BP_AJBGate_C_IfNeedsExclusiveInteractStrictly");
static_assert(offsetof(BP_AJBGate_C_IfNeedsExclusiveInteractStrictly, ReturnValue) == 0x000000, "Member 'BP_AJBGate_C_IfNeedsExclusiveInteractStrictly::ReturnValue' has a wrong offset!");

// Function BP_AJBGate.BP_AJBGate_C.IfBlockInteract
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBGate_C_IfBlockInteract final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBGate_C_IfBlockInteract) == 0x000008, "Wrong alignment on BP_AJBGate_C_IfBlockInteract");
static_assert(sizeof(BP_AJBGate_C_IfBlockInteract) == 0x000010, "Wrong size on BP_AJBGate_C_IfBlockInteract");
static_assert(offsetof(BP_AJBGate_C_IfBlockInteract, InteractingActor) == 0x000000, "Member 'BP_AJBGate_C_IfBlockInteract::InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_AJBGate_C_IfBlockInteract, ReturnValue) == 0x000008, "Member 'BP_AJBGate_C_IfBlockInteract::ReturnValue' has a wrong offset!");

// Function BP_AJBGate.BP_AJBGate_C.ShouldPrioritizedThanPrepaidSkillCancel
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBGate_C_ShouldPrioritizedThanPrepaidSkillCancel final
{
public:
	bool                                          bShouldPriorirized;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBGate_C_ShouldPrioritizedThanPrepaidSkillCancel) == 0x000001, "Wrong alignment on BP_AJBGate_C_ShouldPrioritizedThanPrepaidSkillCancel");
static_assert(sizeof(BP_AJBGate_C_ShouldPrioritizedThanPrepaidSkillCancel) == 0x000001, "Wrong size on BP_AJBGate_C_ShouldPrioritizedThanPrepaidSkillCancel");
static_assert(offsetof(BP_AJBGate_C_ShouldPrioritizedThanPrepaidSkillCancel, bShouldPriorirized) == 0x000000, "Member 'BP_AJBGate_C_ShouldPrioritizedThanPrepaidSkillCancel::bShouldPriorirized' has a wrong offset!");

}

