#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AJBIngameUtilFunctionLibrary

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AJB_structs.hpp"
#include "AkAudio_structs.hpp"
#include "E_StencilDigit_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass AJBIngameUtilFunctionLibrary.AJBIngameUtilFunctionLibrary_C
// 0x0000 (0x0028 - 0x0028)
class UAJBIngameUtilFunctionLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void CuttingDamage(class AActor* DamagedActor, int32 BaseDamage, const struct FGameplayTag& DamageType, int32 SerialNumber, EDamagePriority DamagePriority, float AttackDistance, float CuttingRate, class AActor* DamageCauser, bool bPenetrateAP, bool WithSeparatedStandAttack, bool bNotUseCollision, const struct FAJBDamageDisplayParams& DamageDisplayParams, const struct FAJBDamageDisplayProperty& DamageDisplayProperty, bool bIgnoreCalcAttackRate, bool bWithoutStand, bool bIgnoreCalcDefense, bool bPenetrateAAP, class UObject* __WorldContext);
	static struct FVector RandomPointInCircle(const struct FVector& Origin, float Radius, class UObject* __WorldContext);
	static void GetResolutionScale(class AActor* WorldActor, class UObject* __WorldContext, struct FVector2D* Scale);
	static void GetViewRotation(class AActor* Actor, class UObject* __WorldContext, struct FRotator* Rotation);
	static void GetScreenCenterPosition(class AActor* WorldActor, class UObject* __WorldContext, float* PosX, float* PosY);
	static void GenerateHitEffect_Local(const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FRotator& HitRotation, const struct FGameplayTag& DamageType, bool bCharacter, bool bLeftAP, bool bHeadShot, EPhysicalSurface SurfaceType, bool bBlockedByAAP, const struct FGameplayTag& ParticleTagBlockedByAAP, const struct FGameplayTag& ParticleTagBlocked, bool bGenerateSurfaceParticle, bool bUseSurfaceParticleLighter, class UObject* __WorldContext);
	static void ParcentageToRatio(int32 Parcentage, class UObject* __WorldContext, float* Ratio);
	static void CalcHitLocation_Deprecated_(class AActor* OwnActor, bool bSweep, const struct FHitResult& HitResult, bool bSafety, class UObject* __WorldContext, struct FVector* HitLocation, struct FVector* HitNormal);
	static void GetHitObjectTypesByPrevTrace_Deprecated_(class UObject* __WorldContext, TArray<EObjectTypeQuery>* NewParam);
	static void AJBMultiLineTrace_Deprecated_(class AActor* DamageCauser, const struct FVector& Start, const struct FVector& End, class UObject* __WorldContext, bool* bTargetHit, class AActor** TargetActor, class UActorComponent** TargetComponent, struct FVector* TargetLocation);
	static void ChangeViewTarget(class AActor* NewViewTarget, float BlendTime, class UObject* __WorldContext);
	static void GenerateDamageEffect(class AActor* DamagedActor, const struct FGameplayTag& DamageType, bool bRemainHP, bool bDamageIsCut, class UObject* __WorldContext);
	static void ExtractFloatValuesFromTagValueMap(const struct FGameplayTagContainer& TargetTagContainer, const struct FGameplayTag& ExtractedTag, const TMap<struct FGameplayTag, float>& TagValueMapRef, class UObject* __WorldContext, TArray<float>* ReturnValues);
	static void MultiplyFloatValues(TArray<float>& Array, class UObject* __WorldContext, float* ResultParam);
	static void AddFloatValues(TArray<float>& Array, class UObject* __WorldContext, float* ResultParam);
	static void GetPlayerMatchingIndexIdByActor(class AActor* TargetActor, class UObject* __WorldContext, int32* PlayerMatchingIndex);
	static void TryGetTraceInfo_Deprecated_(const struct FGameplayTag& TraceInfoTag, class UObject* __WorldContext, EDrawDebugTrace* DrawDebugTrace, float* DrawTime);
	static bool AJBMultiSphereTraceForObjects_Deprecated_(const struct FGameplayTag& TraceInfoTag, const struct FVector& Start, const struct FVector& End, float Radius, const TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, class UObject* __WorldContext, TArray<struct FHitResult>* OutHits);
	static bool AJBLineTraceForObjects_Deprecated_(const struct FGameplayTag& TraceInfoTag, const struct FVector& Start, const struct FVector& End, const TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, class UObject* __WorldContext, struct FHitResult* OutHit);
	static bool AJBSphereTraceForObjects_Deprecated_(const struct FGameplayTag& TraceInfoTag, const struct FVector& Start, const struct FVector& End, float Radius, const TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, class UObject* __WorldContext, struct FHitResult* OutHit);
	static bool AJBLineTraceByChannel_Deprecated_(const struct FGameplayTag& TraceInfoTag, const struct FVector& Start, const struct FVector& End, ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, class UObject* __WorldContext, struct FHitResult* OutHit);
	static bool AJBCapsuleTraceByChannel_Deprecated_(const struct FGameplayTag& TraceInfoTag, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, class UObject* __WorldContext, struct FHitResult* OutHit);
	static void GetDamageInfo(const struct FGameplayTag& DamageTypeTag, class UObject* __WorldContext, bool* bResult, struct FST_DamageInfo* DamageInfo);
	static void GenerateHitSECharacter(bool bHeadShot, class USceneComponent* AttachTarget, bool bBlockedByAAP, const struct FGameplayTag& SETagBlockedByAAP, class UObject* __WorldContext);
	static void GenerateHitSENonCharacter(const struct FVector& HitLocation, const struct FGameplayTag& DamageType, const struct FGameplayTag& OverrideSETag, class UObject* __WorldContext);
	static void GenerateDamageSENonCharacter(const struct FVector& HitLocation, EPhysicalSurface SurfaceType, class UObject* __WorldContext);
	static void CalcHeadShot_Deprecated_(class AActor* HitActor, const struct FVector& HitLocation, const struct FVector& Direction, float Radius, float TraceLength, class UObject* __WorldContext, bool* bHeadShot);
	static bool AJBMultiLineTraceForObjects_Deprecated_(const struct FGameplayTag& TraceInfoTag, const struct FVector& Start, const struct FVector& End, const TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, class UObject* __WorldContext, TArray<struct FHitResult>* OutHits);
	static struct FRotator RInterpToQuaternion(const struct FRotator& Current, const struct FRotator& Target, float DeltaTime, float InterpSpeed, class UObject* __WorldContext);
	static void GetAJBCharacter(class AController* Controller, class UObject* __WorldContext, class ABP_AJBInGameCharacter_C** CharacterBP, bool* bSuccess);
	static void CalcShotTransform(class ABP_AJBInGameCharacter_C* CharacterBP, float TraceLength, float IrregularAngleThresould_Deg_, bool bIgnoreTarget, const struct FGameplayTag& SkillTag, bool bIgnoreCharacterSpread, bool bNotOwnerEnv, class UObject* __WorldContext, bool* bSuccess, TArray<struct FTransform>* Transforms);
	static bool TraceCharacterFootingInfo(class ABP_AJBInGameCharacter_C* Character, const struct FVector& CharacterWorldLocation, TArray<class AActor*>& ActorsToIgnore, bool bAccurate, class UObject* __WorldContext, struct FHitResult* OutHit);
	static void GetAJBCharacterFromActor(class AActor* Actor, class UObject* __WorldContext, class ABP_AJBInGameCharacter_C** CharacterBP, bool* bSuccess);
	static bool AJBMultiCapsuleTraceForObjects_Deprecated_(const struct FGameplayTag& TraceInfoTag, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, const TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, class UObject* __WorldContext, TArray<struct FHitResult>* OutHits);
	static bool AJBMultiSphereTraceByProfile_Deprecated_(const struct FGameplayTag& TraceInfoTag, const struct FVector& Start, const struct FVector& End, float Radius, class FName ProfileName, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, class UObject* __WorldContext, TArray<struct FHitResult>* OutHits);
	static void CheckSkillSealing(class ABP_AJBInGameCharacter_C* CharacterBP, class UClass* SkillClass, class UObject* __WorldContext, bool* bSkillSealing);
	static void CheckCharacterOnInstantObject(const struct FVector& FootLocation, class ABP_AJBInGameCharacter_C* CharacterBP, const struct FGameplayTag& TraceInfoTag, class UObject* __WorldContext, bool* bOnInstant);
	static void CalcDamage(class AActor* DamagedActor, class AActor* DamageCauser, int32 BaseDamage, float CuttingRateByBlocking, bool bPenetrateAP, bool bIgnoreCalcAttackRate, const struct FGameplayTag& DamageType, bool bWithoutStand, bool bIgnoreCalcDefense, bool bPenetrateAAP, class UObject* __WorldContext, int32* DamageForHPAP, int32* DamageForAAP, int32* CutDamage, bool* bRemainHP, bool* bDamageIsCutByAAP, bool* IsEndured);
	static void CheckCharacterByTag(class ABP_AJBInGameCharacter_C* CharacterBP, const struct FGameplayTag& CharacterTag, class UObject* __WorldContext, bool* bReturnValue);
	static void IsPair(class AActor* FirstActor, class AActor* SecondActor, bool bIgnoreSelf, class UObject* __WorldContext, bool* bPairCharacter);
	static void GetPairCount_Svr_(class UObject* __WorldContext, int32* Num);
	static bool LastSurvivorIsDetermined_OnServer(class UObject* __WorldContext);
	static void GetSkillInfo(const struct FGameplayTag& SkillTag, class UObject* __WorldContext, bool* bResult, struct FST_SkillInfo* SkillInfo);
	static void GetCharacterShortNameFromSkillTag(const struct FGameplayTag& SkillTag, class UObject* __WorldContext, bool* bResult, class FString* ShortName);
	static void GetCharacterTagFromCharacter(class ABP_AJBInGameCharacter_C* CharacterBP, class UObject* __WorldContext, struct FGameplayTag* CharacterTag);
	static void GetCharacterIdFromActor(class AActor* Actor, class UObject* __WorldContext, uint8* CharacterID);
	static void GetSkillBitmaskFromSkillTag(const struct FGameplayTag& SkillTag, class UObject* __WorldContext, int32* SkillBitmask);
	static void SetPostProcessMaterial(class UCameraComponent* CameraComponent, class UMaterialInterface* MaterialInterface, int32& Index_0, bool bEnable, class UObject* __WorldContext);
	static void SetPostProcessMaterialBlendWeight(class UCameraComponent* CameraComponent, int32 Index_0, float Weight, class UObject* __WorldContext);
	static void GetCharacterFloatParameterFromDefaultContent(class FName Filename, class FName ValueName, class UObject* __WorldContext, bool* bSuccess, float* Value);
	static void GetCharacterVectorParameterFromDefaultContent(class FName Filename, class FName ValueName, class UObject* __WorldContext, bool* bSuccess, struct FVector* Value);
	static struct FVector RandomPointInRing(const struct FVector& Origin, float RadiusMin, float RadiusMax, class UObject* __WorldContext);
	static void CalcDualZoneCameraRotate(float CameraInputRate, float CameraInputDeadRate, float CameraInputSecondRate, float RotationMinPerSecond, float RotationMaxPerSecond, class UCurveFloat* CVCameraInputDualZoneFirst, class UCurveFloat* CVCameraInputDualZoneSecond, float CurrentInputSpeedRate, class UObject* __WorldContext, float* Rotation);
	static void IsRelatedCharacterAndMovableStand(class AActor* Actor1, class AActor* Actor2, class UObject* __WorldContext, bool* bResult);
	static void ChangeStencilValueByDigit(class UPrimitiveComponent* PrimitiveComponent, E_StencilDigit DigitToChange, bool bFlag, class UObject* __WorldContext);
	static void StencilDigitToBitmask(E_StencilDigit StencilDigit, class UObject* __WorldContext, int32* BitmaskInt);
	static void CalcAdditionalGravityPower(float Speed, float AdditionalGravityPower, float GravityPowerScale, class UObject* __WorldContext, float* AddtionalGravityScale);
	static void CalcRightVectorByForward(const struct FVector& ForwardVector, class UObject* __WorldContext, struct FVector* RightVector);
	static void CalcUpVectorByForwardRight(const struct FVector& ForwardVector, const struct FVector& RightVector, class UObject* __WorldContext, struct FVector* UpVector);
	static void CalcStartAndEndLocation(const struct FVector& Location, const struct FVector& Direction, float SmallAmount, class UObject* __WorldContext, struct FVector* Start, struct FVector* End);
	static void GetViewTargetActor(class UObject* __WorldContext, class AActor** ViewTargetActor);
	static bool IsTimeUp(class UObject* __WorldContext);
	static void CompareParentMaterial(class UObject* Object1, class UObject* Object2, class UObject* __WorldContext, bool* bMatch);
	static void CalcPositionsBetweenTwoPoints(const struct FVector& Point1, const struct FVector& Point2, float Interval, bool bIncludePoint1, bool bIncludePoint2, bool bIncludeLastLessInterval, class UObject* __WorldContext, TArray<struct FVector>* PathPositions);
	static void CheckDistanceLimit(const struct FVector& Location, class UObject* __WorldContext, bool* bSuccess);
	static void ChangeEnableSkillLock(bool bEnable, class AActor* Actor, class UClass* SkillClass, class UObject* __WorldContext);
	static void GetViewTargetActorConsiderVSCamera(class UObject* __WorldContext, class AActor** ViewTargetActor);
	static void CalcCameraBaseTraceInfo(float MaxDistanceTraceStartToBase, float DistanceBaseToTraceEnd, float MinForwardZForMaxTraceDistanceRate, float MaxForawrdZForMinTraceDistanceRate, float MaxTraceDistanceRate, float MinTraceDistanceRateUp, float MinTraceDistanceRateDown, class UObject* __WorldContext, bool* bSucceed, struct FVector* TraceStart, struct FVector* TraceEnd);
	static void GetPlayerControllerConsiderHighlight(class UObject* __WorldContext, class APlayerController** PlayerController);
	static void PossibleUseStand(class ABP_AJBInGameCharacter_C* CharacterBP, class UClass* SkillClass, class UObject* __WorldContext, bool* bPossible);
	static void ChangeEnablePPMaterials(class ABP_AJBInGameCharacter_C* CharacterBP, class UMaterialInterface* MaterialInterface, bool bEnable, int32& MaterialIndexRefCharacter, bool bChangeForMovableStand, int32& MaterialIndexRefMovableStand, class UObject* __WorldContext);
	static void CheckBreakDownMovableStandOnly(class ABP_AJBInGameCharacter_C* CharacterBP, const struct FGameplayTagContainer& PassiveTags, class UObject* __WorldContext, bool* bFlinchMovableStandOnly);
	static void TryGetCloudPointTarget(class AActor* TargetOwner, class UObject* __WorldContext, class UBP_AJBCloudPointTarget_C** CloudPointTarget);
	static void CalcAAPInfo(class AActor* HitActor, int32 Damage, class UObject* __WorldContext, bool* bDamageCutByAAP, bool* bDamageBlockByAAP);
	static void DestroyAkComponent(class UAkComponent*& AkComponent, class UObject* __WorldContext);
	static void ChangeEnableAkComponent(class UAkComponent* AkComponent, bool bEnable, class UObject* __WorldContext);
	static void ChangeEnableTimerHandle(const struct FTimerHandle& TimerHandle, bool bEnable, class UObject* __WorldContext);
	static void ChangeEnableCustomTimeDilation(class AActor* Actor, bool bEnable, class UObject* __WorldContext);
	static void RecalcDamageForZipperHide(class AActor* DamageActor, class AActor* DamageCauser, int32 TotalDamage, bool bPenetrateAP, class UObject* __WorldContext, int32* DamageForHPAP, int32* DamageForAAP);
	static bool TraceActorFootingInfo(class AActor* Actor, float Radius, float Length, class UObject* __WorldContext, struct FHitResult* OutHit);
	static void TryGetPropertyOwnerCharacterFromActor(class AActor* InActor, class UObject* __WorldContext, bool* bSucceed, class AActor** OutActor);
	static void ChangeEnableSliceCut(TArray<class UMaterialInstanceDynamic*>& DMIList, bool bEnable, const struct FVector& Direction, const struct FVector& Offset, class UObject* __WorldContext);
	static void TryChangeParticleVisibility(class ABP_AJBInGameParticleEffect_C* Particle, bool bNewVisibility, bool bPropagateToChildren, class UObject* __WorldContext);
	static void CheckCharacterInInstantObject(class ABP_AJBInGameCharacter_C* CharacterBP, class UObject* __WorldContext, bool* bInInstant);
	static void GetDamageAffecterTargetActors(class UObject* __WorldContext, TArray<class AActor*>* OutActors);
	static void RegisterDamageAffecterTargetActor(class AActor* Actor, class UObject* __WorldContext);
	static void UnregisterDamageAffecterTargetActor(class AActor* Actor, class UObject* __WorldContext);
	static void DestroyParticle(class ABP_AJBInGameParticleEffect_C*& AJBParticle, class UObject* __WorldContext);
	static bool CheckActiveBitesTheDust(class UObject* __WorldContext);
	static void IsPvEPlayMode(class UObject* __WorldContext, bool* IsPvEPlayMode_0);
	static bool IsPvENPCPair(class AActor* ActorA, class AActor* ActorB, class UObject* __WorldContext);
	static void RefreshMatchingInfo(class UObject* __WorldContext);
	static void EnableTheWorldStop(bool bEnable, class UObject* __WorldContext);
	static void AJBConvertWorldLocationToScreenLocation(const struct FVector& WorldLocation, class UObject* __WorldContext, struct FVector2D* Point, bool* bReturnValue);
	static void GetStandUserCharacter(class ABP_AJBInGameCharacter_C* Target, class UObject* __WorldContext, class ABP_AJBInGameCharacter_C** UserCharacter);
	static void CheckCharacterDetection(class ABP_AJBInGameCharacter_C* TargetCharacterBP, class UObject* __WorldContext, bool* bCheckDetection);
	static void FindSkinData(class FName SkinName, class UObject* __WorldContext, struct FST_CharaSkin* SkinData, bool* Success);
	static void FindCharacterSkinDataFromMatchingPlayerInfo(const struct FMatchingPlayerInfo& MatchingPlayerInfo, class UObject* __WorldContext, struct FST_CharaSkin* SkinData, bool* Success);
	static void FindStandSkinDataFromMatchingPlayerInfo(const struct FMatchingPlayerInfo& MatchingPlayerInfo, class UObject* __WorldContext, struct FST_CharaSkin* SkinData, bool* Success);
	static void FindMatchingPlayerInfo(int32 MatchingPlayerIndex, class UObject* __WorldContext, bool* Success, class FString* PlayerName, struct FMatchingPlayerInfo* MatchingPlayerInfo);
	static void FoldMaxFloat(TArray<float>& Array, class UObject* __WorldContext, float* ResultParam);
	static void IsEndurableDamageType(const struct FGameplayTag& DamageType, bool PenetrateAP, class UObject* __WorldContext, bool* IsEndurable);
	static void IsStandWithIndividualHP(class AActor* Target, class UObject* __WorldContext, bool* IsStandWithIndividualHP_0);
	static void RequestDamageDisplay_Local(class AActor* DamagedActor, class AActor* DamageCauser, int32 BaseDamage, float CuttingRateByBlocking, bool bPenetrateAP, const struct FGameplayTag& DamageType, bool bWithoutStand, const struct FVector& HitLocation, class UObject* __WorldContext);
	static void GetSeparatedStand(class ABP_AJBInGameCharacter_C* Owner, class UObject* __WorldContext, class AAJBInGameCharacterBase** SeparatedStand);
	static void DamageLocal(class AActor* HitActor, int32 Damage, class UObject* __WorldContext);
	static void IsFriendlyFireTarget(class AActor* Target, class AActor* SelfContext, class UObject* __WorldContext, bool* IsFriendlyFireTarget_0);
	static void IsNPCEasy(class APawn* Pawn, class UObject* __WorldContext, bool* bIsNPCEasy);
	static void GetCharacterBPByMatchingPlayerIndex(int32 MatchingPlayerIndex, class UObject* __WorldContext, bool* bFound, class ABP_AJBInGameCharacter_C** CharacterBP);
	static void GetDamageImpulseTargetActors(class UObject* __WorldContext, TArray<class AActor*>* OutActors);
	static void RegisterDamageImpulseTargetActor(class AActor* Actor, class UObject* __WorldContext);
	static void UnregisterDamageImpulseTargetActor(class AActor* Actor, class UObject* __WorldContext);
	static bool WillDeterminateLastSurvivorOnThisFrame_OnServer(const TSet<class ABP_AJBInGameCharacter_C*>& IgnoredCharacter, class UObject* __WorldContext);
	static void GetCharacterType(class ABP_AJBInGameCharacter_C* CharacterBP, class UObject* __WorldContext, ECharacterBattleType* CharacterType);
	static void CheckPassiveTagProhibition(const struct FGameplayTagContainer& PassiveTagContainer, class UObject* __WorldContext, bool* bProhibitionTag);
	static void ExtractEmoteId(const TSoftObjectPtr<class UAnimMontage>& Emote, class UObject* __WorldContext, bool* Success, class FString* CharacterTag, int32* emoteId);
	static void CheckTheWorldOperator(class ABP_AJBInGameCharacter_C* CharacterBP, class UObject* __WorldContext, bool* bOperator);

	static void FindCharacterInfo(int32 CharacterID, class UObject* __WorldContext, struct FAJBCharacterInfo* CharacterInfo, bool* Success);
	static void TakeCharacterShortName(const struct FGameplayTag& GameplayTag, class UObject* __WorldContext, class FString* CharacterShortName);
	static void MakeSkinName(const class FString& ShortName, uint8 skinID, class UObject* __WorldContext, class FString* SkinName);
	static void MakeCharacterSkinName(const struct FMatchingPlayerInfo& MatchingPlayerInfo, class UObject* __WorldContext, class FString* CharacterSkinName, bool* Success);
	static void MakeStandSkinName(const struct FMatchingPlayerInfo& MatchingPlayerInfo, class UObject* __WorldContext, class FString* StandSkinName, bool* Success);
	static void IsActiveTransferState(uint8 SkillState, class UObject* __WorldContext, bool* IsActiveState);
	static void IsAppearTransferState(uint8 SkillState, class UObject* __WorldContext, bool* IsAppearState);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AJBIngameUtilFunctionLibrary_C">();
	}
	static class UAJBIngameUtilFunctionLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAJBIngameUtilFunctionLibrary_C>();
	}
};
static_assert(alignof(UAJBIngameUtilFunctionLibrary_C) == 0x000008, "Wrong alignment on UAJBIngameUtilFunctionLibrary_C");
static_assert(sizeof(UAJBIngameUtilFunctionLibrary_C) == 0x000028, "Wrong size on UAJBIngameUtilFunctionLibrary_C");

}

