#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_StartPointManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ST_ChipData_structs.hpp"
#include "AJB_structs.hpp"
#include "ST_ChipCandidateLocation_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_StartPointManager.BP_StartPointManager_C
// 0x01B0 (0x04D8 - 0x0328)
class ABP_StartPointManager_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(Transient, DuplicateTransient)
	class USimpleStateMachine_C*                  SimpleStateMachine;                                // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CollisionRoot;                                     // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   MapBoard;                                          // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           CachedDBIVoice;                                    // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UBoxComponent*>                  BoxComponents;                                     // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UMaterialInterface*                     BoardMaterial;                                     // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentX;                                          // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentY;                                          // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MapHeight;                                         // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MapWidth;                                          // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebugCollisionLog;                                // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_381[0x7];                                      // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBOutGameProxy_C*                  OutGameProxy;                                      // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFinishedMatching;                                 // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bFinishedMatchingDataUpdate;                       // 0x0391(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugDisplayLog;                                  // 0x0392(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_393[0x5];                                      // 0x0393(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DBI;                                               // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSkipMatching;                                     // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A1[0x7];                                      // 0x03A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_AJBOutGameCharacter_DBI_C*         ABP_DBI;                                           // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MapDynamicMaterial;                                // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChipCollisionSizeZ;                                // 0x03B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinChipThrowAngle;                                 // 0x03BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         MaxChipThrowAngle;                                 // 0x03C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C4[0x4];                                      // 0x03C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_ChipData>                   ChipData;                                          // 0x03C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FVector>                        RandomChipLocations;                               // 0x03D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TMap<int32, struct FST_ChipCandidateLocation> ChipLocations;                                     // 0x03E8(0x0050)(Edit, BlueprintVisible, ZeroConstructor)
	class ABP_StartPointChip_C*                   SelfChip;                                          // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayVoice_DonotPlaceChipTime;                      // 0x0440(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_444[0x4];                                      // 0x0444(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_StartPointCursor_C*                 CursorActor;                                       // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           WaitSelectedChipTimerHandle;                       // 0x0450(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          bVisibleTimeCountDown;                             // 0x0458(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_459[0x3];                                      // 0x0459(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayWaitSelectedChipTime;                         // 0x045C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelSequencePlayer*                   DBIVoiceSequencePlayer;                            // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayVoice_PlacedChipTime;                          // 0x0468(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46C[0x4];                                      // 0x046C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SequencerEventManager_C*            SequencerEventManager;                             // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bIsSkipSequencer;                                  // 0x0478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_479[0x7];                                      // 0x0479(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnFinishedSequencerEventForOuter;                  // 0x0480(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         CurrentTime;                                       // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayableVoiceTimeLimitForPutSelfChip;              // 0x0494(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MatchingWaitTransitionTime;                        // 0x0498(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DBIChipAnimWaitTransitionTime;                     // 0x049C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableInputPadAndTouch;                           // 0x04A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputPressedL1;                                   // 0x04A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputPressedL2;                                   // 0x04A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputPressedR1;                                   // 0x04A3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInputPressedR2;                                   // 0x04A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A5[0x3];                                      // 0x04A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShopCompetitionInputWaitTimer;                     // 0x04A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShopCompetitionInputTime;                          // 0x04AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TutorialAreaTypeID;                                // 0x04B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         TutorialAILevel;                                   // 0x04B4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B5[0x3];                                      // 0x04B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CachedShopEventPlayerCount;                        // 0x04B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MapFade;                                           // 0x04BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MapFadeSeconds;                                    // 0x04C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C4[0x4];                                      // 0x04C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           MapFadeTimer;                                      // 0x04C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class ABP_StartPointChip_C*                   PairChip;                                          // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_StartPointManager(int32 EntryPoint);
	void StartMapFade();
	void UpdateMapFade();
	void OnClosedShopEventConfirm(class UAJBWindowWidget* TargetWidget);
	void OnCloseShopEventOnlyInput();
	void OnOpenShopEventOnlyInput();
	void SetVisibilityTimeCountDown(bool bIsVisible);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void OnUpdateDamageArea();
	void OnLandedChip_PlaySE();
	void OnTimeOutStartLocation();
	void OnSelectedStartLocation(EResultStartLocation Result, int32 X, int32 Y, const class FString& GameServerUserID);
	void OnFinishedMatchingDataUpdate();
	void OnFinishedMatching();
	void BindOutGameProxyEvents();
	void SkipSequencerWithWaitForOuter();
	void WaitPlayingDBIVoiceForOuter();
	void PlayVoice_PlacedChip();
	void PlaySequencer(class ULevelSequence* Sequencer);
	void PlayVoice_DonotPlaceChip();
	void RequestVoicePlay_PutSelfChip();
	void OnShowWaitSelectedChip();
	void State_End(class FName State, class FName State_Machine);
	void State_Update(class FName State, class FName State_Machine);
	void State_Begin(class FName State, class FName State_Machine);
	void OnLoaded_B5F8B02F4FDFAF6C503626AAEDE82A80(class UObject* Loaded);
	void OnLoaded_0CEC02AC4C9D4B20141481A96AD1B256(class UObject* Loaded);
	void OnLoaded_DD1341714AF9586250148AAB33038E3B(class UObject* Loaded);
	void Completed_D5E453E548E2662BBD497B897A7F23B6(const TArray<class UObject*>& Loaded);
	void UserConstructionScript();
	void GetIndex(int32 Width, int32 Height, int32* Index_0);
	void CreateCollisionBox(int32 Width, int32 Height);
	int32 GetCollisionChipIndex(float ScreenX, float ScreenY, class UBoxComponent** BoxCollision);
	void GetHeightAndWidth(int32 Index_0, int32* Width, int32* Height);
	void RequestSelectStartLocation();
	void IncrementMapIndex(int32& Value, int32 Max);
	void DecrementMapIndex(int32& Value, int32 Max);
	void GetSelfPlayerID(uint8* PlayerID);
	void PutOtherPlayerChip(int32 Width, int32 Height, class FString& UserID);
	void PutSelfChip(int32 Width, int32 Height);
	void PutNPCChip(int32 Width, int32 Height);
	void SetupMapBoard();
	void UpdateMapMaterial();
	void OnDebugInput(bool* bResult);
	void GetOffsetChipAngle(const struct FVector& ChipLocation, float* Z__Yaw_);
	void ConvertChipLocation(const class UBoxComponent*& BoxComponent, struct FVector* NewLocation);
	void GetBoardOffsetZ(float* Z);
	void GetChipData(class FName Type, struct FST_ChipData* ChipData_0);
	void SetCandidateChipLocation(class ABP_StartPointChip_C* ChipActor, int32 Index_0);
	void PutChip(EResultStartLocation Result, int32 X, int32 Y, const class FString& UserID);
	void IsMaxMatchingPlayers(bool* BMax);
	void UpdateCursorLocation();
	void SetDefaultChipLocation();
	bool OnInputReleasedUp();
	bool OnInputReleasedRight();
	bool OnInputReleasedLeft();
	bool OnInputReleasedDown();
	bool OnInputReleasedDecide();
	bool OnInputReleasedCancel();
	bool OnInputPressedUp();
	bool OnInputPressedRight();
	bool OnInputPressedLeft();
	bool OnInputPressedDown();
	bool OnInputPressedDecide();
	bool OnInputPressedCancel();
	bool OnInputTurnRate(float Value);
	bool OnInputMoveRight(float Value);
	bool OnInputMoveForward(float Value);
	bool OnInputLookupRate(float Value);
	bool IsModeless();
	bool OnInputReleasedTouch();
	bool OnInputPressedTouch(const float LocationX, const float LocationY);
	bool OnInputReleasedR2();
	bool OnInputReleasedR1();
	bool OnInputReleasedL2();
	bool OnInputReleasedL1();
	bool OnInputPressedR2();
	bool OnInputPressedR1();
	bool OnInputPressedL2();
	bool OnInputPressedL1();
	bool OnInputReleasedL3();
	bool OnInputPressedL3();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_StartPointManager_C">();
	}
	static class ABP_StartPointManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_StartPointManager_C>();
	}
};
static_assert(alignof(ABP_StartPointManager_C) == 0x000008, "Wrong alignment on ABP_StartPointManager_C");
static_assert(sizeof(ABP_StartPointManager_C) == 0x0004D8, "Wrong size on ABP_StartPointManager_C");
static_assert(offsetof(ABP_StartPointManager_C, UberGraphFrame) == 0x000328, "Member 'ABP_StartPointManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, SimpleStateMachine) == 0x000330, "Member 'ABP_StartPointManager_C::SimpleStateMachine' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, CollisionRoot) == 0x000338, "Member 'ABP_StartPointManager_C::CollisionRoot' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, MapBoard) == 0x000340, "Member 'ABP_StartPointManager_C::MapBoard' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, DefaultSceneRoot) == 0x000348, "Member 'ABP_StartPointManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, CachedDBIVoice) == 0x000350, "Member 'ABP_StartPointManager_C::CachedDBIVoice' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, BoxComponents) == 0x000358, "Member 'ABP_StartPointManager_C::BoxComponents' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, BoardMaterial) == 0x000368, "Member 'ABP_StartPointManager_C::BoardMaterial' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, CurrentX) == 0x000370, "Member 'ABP_StartPointManager_C::CurrentX' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, CurrentY) == 0x000374, "Member 'ABP_StartPointManager_C::CurrentY' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, MapHeight) == 0x000378, "Member 'ABP_StartPointManager_C::MapHeight' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, MapWidth) == 0x00037C, "Member 'ABP_StartPointManager_C::MapWidth' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, bDebugCollisionLog) == 0x000380, "Member 'ABP_StartPointManager_C::bDebugCollisionLog' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, OutGameProxy) == 0x000388, "Member 'ABP_StartPointManager_C::OutGameProxy' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, bFinishedMatching) == 0x000390, "Member 'ABP_StartPointManager_C::bFinishedMatching' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, bFinishedMatchingDataUpdate) == 0x000391, "Member 'ABP_StartPointManager_C::bFinishedMatchingDataUpdate' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, bDebugDisplayLog) == 0x000392, "Member 'ABP_StartPointManager_C::bDebugDisplayLog' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, DBI) == 0x000398, "Member 'ABP_StartPointManager_C::DBI' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, bSkipMatching) == 0x0003A0, "Member 'ABP_StartPointManager_C::bSkipMatching' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, ABP_DBI) == 0x0003A8, "Member 'ABP_StartPointManager_C::ABP_DBI' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, MapDynamicMaterial) == 0x0003B0, "Member 'ABP_StartPointManager_C::MapDynamicMaterial' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, ChipCollisionSizeZ) == 0x0003B8, "Member 'ABP_StartPointManager_C::ChipCollisionSizeZ' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, MinChipThrowAngle) == 0x0003BC, "Member 'ABP_StartPointManager_C::MinChipThrowAngle' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, MaxChipThrowAngle) == 0x0003C0, "Member 'ABP_StartPointManager_C::MaxChipThrowAngle' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, ChipData) == 0x0003C8, "Member 'ABP_StartPointManager_C::ChipData' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, RandomChipLocations) == 0x0003D8, "Member 'ABP_StartPointManager_C::RandomChipLocations' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, ChipLocations) == 0x0003E8, "Member 'ABP_StartPointManager_C::ChipLocations' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, SelfChip) == 0x000438, "Member 'ABP_StartPointManager_C::SelfChip' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, PlayVoice_DonotPlaceChipTime) == 0x000440, "Member 'ABP_StartPointManager_C::PlayVoice_DonotPlaceChipTime' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, CursorActor) == 0x000448, "Member 'ABP_StartPointManager_C::CursorActor' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, WaitSelectedChipTimerHandle) == 0x000450, "Member 'ABP_StartPointManager_C::WaitSelectedChipTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, bVisibleTimeCountDown) == 0x000458, "Member 'ABP_StartPointManager_C::bVisibleTimeCountDown' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, DelayWaitSelectedChipTime) == 0x00045C, "Member 'ABP_StartPointManager_C::DelayWaitSelectedChipTime' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, DBIVoiceSequencePlayer) == 0x000460, "Member 'ABP_StartPointManager_C::DBIVoiceSequencePlayer' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, PlayVoice_PlacedChipTime) == 0x000468, "Member 'ABP_StartPointManager_C::PlayVoice_PlacedChipTime' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, SequencerEventManager) == 0x000470, "Member 'ABP_StartPointManager_C::SequencerEventManager' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, bIsSkipSequencer) == 0x000478, "Member 'ABP_StartPointManager_C::bIsSkipSequencer' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, OnFinishedSequencerEventForOuter) == 0x000480, "Member 'ABP_StartPointManager_C::OnFinishedSequencerEventForOuter' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, CurrentTime) == 0x000490, "Member 'ABP_StartPointManager_C::CurrentTime' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, PlayableVoiceTimeLimitForPutSelfChip) == 0x000494, "Member 'ABP_StartPointManager_C::PlayableVoiceTimeLimitForPutSelfChip' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, MatchingWaitTransitionTime) == 0x000498, "Member 'ABP_StartPointManager_C::MatchingWaitTransitionTime' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, DBIChipAnimWaitTransitionTime) == 0x00049C, "Member 'ABP_StartPointManager_C::DBIChipAnimWaitTransitionTime' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, bEnableInputPadAndTouch) == 0x0004A0, "Member 'ABP_StartPointManager_C::bEnableInputPadAndTouch' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, bInputPressedL1) == 0x0004A1, "Member 'ABP_StartPointManager_C::bInputPressedL1' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, bInputPressedL2) == 0x0004A2, "Member 'ABP_StartPointManager_C::bInputPressedL2' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, bInputPressedR1) == 0x0004A3, "Member 'ABP_StartPointManager_C::bInputPressedR1' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, bInputPressedR2) == 0x0004A4, "Member 'ABP_StartPointManager_C::bInputPressedR2' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, ShopCompetitionInputWaitTimer) == 0x0004A8, "Member 'ABP_StartPointManager_C::ShopCompetitionInputWaitTimer' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, ShopCompetitionInputTime) == 0x0004AC, "Member 'ABP_StartPointManager_C::ShopCompetitionInputTime' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, TutorialAreaTypeID) == 0x0004B0, "Member 'ABP_StartPointManager_C::TutorialAreaTypeID' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, TutorialAILevel) == 0x0004B4, "Member 'ABP_StartPointManager_C::TutorialAILevel' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, CachedShopEventPlayerCount) == 0x0004B8, "Member 'ABP_StartPointManager_C::CachedShopEventPlayerCount' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, MapFade) == 0x0004BC, "Member 'ABP_StartPointManager_C::MapFade' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, MapFadeSeconds) == 0x0004C0, "Member 'ABP_StartPointManager_C::MapFadeSeconds' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, MapFadeTimer) == 0x0004C8, "Member 'ABP_StartPointManager_C::MapFadeTimer' has a wrong offset!");
static_assert(offsetof(ABP_StartPointManager_C, PairChip) == 0x0004D0, "Member 'ABP_StartPointManager_C::PairChip' has a wrong offset!");

}

