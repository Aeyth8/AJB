#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DamageDetectionBase

#include "Basic.hpp"

#include "BP_AJBActorBase_classes.hpp"
#include "Engine_structs.hpp"
#include "AJB_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DamageDetectionBase.BP_DamageDetectionBase_C
// 0x0020 (0x0350 - 0x0330)
class ABP_DamageDetectionBase_C : public ABP_AJBActorBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0330(0x0008)(Transient, DuplicateTransient)
	class UCapsuleComponent*                      DetectionCollision;                                // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         CapsuleHalfHeight;                                 // 0x0340(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         CapsuleRadius;                                     // 0x0344(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bShowDebugCollision;                               // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUseROC;                                           // 0x0349(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUseMC;                                            // 0x034A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDuringTheWorld;                                   // 0x034B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_DamageDetectionBase(int32 EntryPoint);
	void OnDetectionByROC();
	void ROC_OnDetection();
	void OnDetection();
	void MC_OnDetection();
	void OnDetectionByMC();
	void DamageOverlapped(class AActor* DamageCauser, const struct FVector& HitLocation, bool bPenetrating, const struct FGameplayTag& FactorTag, bool bInvalidDamage);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);
	void OnAreaDamageDisabled();
	void OnPassiveDisabled();
	void OnDamageDisabled();
	void AJBDamage(class AActor* DamagedActor, int32 DamageForHPAP, int32 DamageForAAP, int32 CutDamage, const struct FGameplayTag& DamageType, int32 SerialNumber, EDamagePriority DamagePriority, float AttackDistance, class AActor* DamageCauser, bool WithSeparatedStandAttack, bool HitEnemysSeparatedStand, bool bPenetrateAP, bool bNotUseCollision, bool IsEndured, const struct FAJBDamageDisplayParams& DamageDisplayParams, const struct FAJBDamageDisplayProperty& DamageDisplayProperty);
	void OnNoDamageChanged(class ABP_AJBInGameCharacter_C* OperaatorCharacter, bool bNewFlag, const struct FGameplayTag& EffectTag, const struct FGameplayTag& SETag);
	void OnAreaOut(class ABP_AJBInGameCharacter_C* OperatorCharacter, const struct FGameplayTag& EffectTag, const struct FGameplayTag& SETag);
	void OnAreaIn(class ABP_AJBInGameCharacter_C* OperatorCharacter, const struct FGameplayTag& EffectTag, const struct FGameplayTag& SETag, bool bNoDamage);
	void UserConstructionScript();
	void IgnoreTrace(class AActor* Owner_0, bool bPairOnly, bool* bIgnore);
	void IsReactedByReticule(bool* bResult);
	void CheckNoDamage(class AActor* DamageCauser, bool* bNoDamage);
	void CheckDisableAreaDamage(bool* bDisableAreadamage);
	void CheckDisablePassive(class AActor* PassiveCauser, const struct FGameplayTag& PassiveTag, bool bIgnoreSelf, bool* bDisablePassive);
	void CheckDisableDamage(class AActor* DamageCauser, bool bIgnoreSelf, bool* bDisableDamage);
	bool IfCheckDamageOverlap();
	void OwnHitParam(bool* bCharacter, bool* bLeftAP, struct FGameplayTag* ParticleTagBlockedByAAP, struct FGameplayTag* SETagBlockedByAAP, struct FGameplayTag* ParticleTagBlocked);
	void CheckTargetSelf(class AActor* DamageCauser, bool bForDamageOverlap, bool bIgnoreMovableStand, bool bIncludeSelf, bool bAfterReflectShouldHitOwner, bool* bTarget);
	void CheckDisableDirectDamage(class AActor* DamageCauser, bool* bDisableDirectDamage);
	void CheckAreaIn(const struct FVector& Location, const struct FRotator& Rotation, float Radius, float Length, int32 PartitionNum, bool bCheckUnder, float ValidGroundOffsetZ, bool bUseBoxCollision, const struct FVector& BoxExtent, bool* bTarget);
	void IgnoreAttackHitNotifyOnAreaIn(bool* bIgnore);
	void GetTargetLocation(struct FVector* Location);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DamageDetectionBase_C">();
	}
	static class ABP_DamageDetectionBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DamageDetectionBase_C>();
	}
};
static_assert(alignof(ABP_DamageDetectionBase_C) == 0x000008, "Wrong alignment on ABP_DamageDetectionBase_C");
static_assert(sizeof(ABP_DamageDetectionBase_C) == 0x000350, "Wrong size on ABP_DamageDetectionBase_C");
static_assert(offsetof(ABP_DamageDetectionBase_C, UberGraphFrame) == 0x000330, "Member 'ABP_DamageDetectionBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DamageDetectionBase_C, DetectionCollision) == 0x000338, "Member 'ABP_DamageDetectionBase_C::DetectionCollision' has a wrong offset!");
static_assert(offsetof(ABP_DamageDetectionBase_C, CapsuleHalfHeight) == 0x000340, "Member 'ABP_DamageDetectionBase_C::CapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(ABP_DamageDetectionBase_C, CapsuleRadius) == 0x000344, "Member 'ABP_DamageDetectionBase_C::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(ABP_DamageDetectionBase_C, bShowDebugCollision) == 0x000348, "Member 'ABP_DamageDetectionBase_C::bShowDebugCollision' has a wrong offset!");
static_assert(offsetof(ABP_DamageDetectionBase_C, bUseROC) == 0x000349, "Member 'ABP_DamageDetectionBase_C::bUseROC' has a wrong offset!");
static_assert(offsetof(ABP_DamageDetectionBase_C, bUseMC) == 0x00034A, "Member 'ABP_DamageDetectionBase_C::bUseMC' has a wrong offset!");
static_assert(offsetof(ABP_DamageDetectionBase_C, bDuringTheWorld) == 0x00034B, "Member 'ABP_DamageDetectionBase_C::bDuringTheWorld' has a wrong offset!");

}

