#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBPairOverGrow

#include "Basic.hpp"

#include "AJB_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_AJBPairOverGrow.BP_AJBPairOverGrow_C.ExecuteUbergraph_BP_AJBPairOverGrow
// 0x0138 (0x0138 - 0x0000)
struct BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacter*                    K2Node_Event_Operator;                             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Time;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGeneralTiming                                K2Node_Event_Timing;                               // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bEnable;                              // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bOperatorIsEmpty;                     // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_UpdatePairCheckCore_bTargetIsPair;        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               CallFunc_UpdatePairCheckCore_NewTarget;            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class ABP_AJBInGameCharacter_C> CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue; // 0x0028(0x0028)(HasGetValueTypeHash)
	TSoftObjectPtr<class ABP_AJBInGameCharacter_C> CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue1; // 0x0050(0x0028)(HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PossibleUseStand_bPossible;               // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacterBase*                K2Node_DynamicCast_AsAJBIn_Game_Character_Base;    // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue;     // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B2[0x2];                                       // 0x00B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bShouldSpawnParticle;           // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable1;                              // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue2;                    // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBInGameCharacterBase*                K2Node_DynamicCast_AsAJBIn_Game_Character_Base1;   // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerController_ReturnValue;           // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_CustomEvent_PairTarget1;                    // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_CustomEvent_PairTarget;                     // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue1;    // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F2[0x6];                                       // 0x00F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue3;                    // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character1;     // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAJBHighlightManager_bIsValid;          // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10A[0x6];                                      // 0x010A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBHighlightManager*                   CallFunc_GetAJBHighlightManager_ReturnValue;       // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayingReplay_ReturnValue;              // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_SoftObjectReference_ReturnValue; // 0x011A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x011B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue1;  // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0120(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0130(0x0008)(NoDestructor)
};
static_assert(alignof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow) == 0x000008, "Wrong alignment on BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow");
static_assert(sizeof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow) == 0x000138, "Wrong size on BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, EntryPoint) == 0x000000, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_Event_Operator) == 0x000008, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_Event_Operator' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_Event_Time) == 0x000010, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_Event_Time' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_Event_Timing) == 0x000014, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_Event_Timing' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_Event_bEnable) == 0x000015, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_Event_bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_Event_bOperatorIsEmpty) == 0x000016, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_Event_bOperatorIsEmpty' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_Not_PreBool_ReturnValue) == 0x000017, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_UpdatePairCheckCore_bTargetIsPair) == 0x000018, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_UpdatePairCheckCore_bTargetIsPair' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_UpdatePairCheckCore_NewTarget) == 0x000020, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_UpdatePairCheckCore_NewTarget' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue) == 0x000028, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue1) == 0x000050, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, Temp_bool_Variable) == 0x000078, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_GetOwner_ReturnValue) == 0x000080, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000088, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_DynamicCast_bSuccess) == 0x000090, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_GetOwner_ReturnValue1) == 0x000098, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_PossibleUseStand_bPossible) == 0x0000A0, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_PossibleUseStand_bPossible' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_DynamicCast_AsAJBIn_Game_Character_Base) == 0x0000A8, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_DynamicCast_AsAJBIn_Game_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_DynamicCast_bSuccess1) == 0x0000B0, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_HasLocalSharedController_ReturnValue) == 0x0000B1, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_HasLocalSharedController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, Temp_float_Variable) == 0x0000B4, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_CustomEvent_bShouldSpawnParticle) == 0x0000B8, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_CustomEvent_bShouldSpawnParticle' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, Temp_float_Variable1) == 0x0000BC, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::Temp_float_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_GetOwner_ReturnValue2) == 0x0000C0, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_GetOwner_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_DynamicCast_AsAJBIn_Game_Character_Base1) == 0x0000C8, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_DynamicCast_AsAJBIn_Game_Character_Base1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_DynamicCast_bSuccess2) == 0x0000D0, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_Select_Default) == 0x0000D4, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_IsPlayerController_ReturnValue) == 0x0000D8, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_IsPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_CustomEvent_PairTarget1) == 0x0000E0, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_CustomEvent_PairTarget1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_CustomEvent_PairTarget) == 0x0000E8, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_CustomEvent_PairTarget' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_IsValid_ReturnValue1) == 0x0000F0, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_HasLocalSharedController_ReturnValue1) == 0x0000F1, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_HasLocalSharedController_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_GetOwner_ReturnValue3) == 0x0000F8, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_GetOwner_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_DynamicCast_AsBP_AJBIn_Game_Character1) == 0x000100, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_DynamicCast_AsBP_AJBIn_Game_Character1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_DynamicCast_bSuccess3) == 0x000108, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_GetAJBHighlightManager_bIsValid) == 0x000109, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_GetAJBHighlightManager_bIsValid' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_GetAJBHighlightManager_ReturnValue) == 0x000110, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_GetAJBHighlightManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_IsPlayingReplay_ReturnValue) == 0x000118, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_IsPlayingReplay_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_IsValid_ReturnValue2) == 0x000119, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_NotEqual_SoftObjectReference_ReturnValue) == 0x00011A, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_NotEqual_SoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x00011B, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_IsValidSoftObjectReference_ReturnValue1) == 0x00011C, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_IsValidSoftObjectReference_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, K2Node_CreateDelegate_OutputDelegate) == 0x000120, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000130, "Member 'BP_AJBPairOverGrow_C_ExecuteUbergraph_BP_AJBPairOverGrow::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function BP_AJBPairOverGrow.BP_AJBPairOverGrow_C.OnChangedNotOwnerEnv
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBPairOverGrow_C_OnChangedNotOwnerEnv final
{
public:
	class ABP_AJBInGameCharacter_C*               PairTarget_0;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPairOverGrow_C_OnChangedNotOwnerEnv) == 0x000008, "Wrong alignment on BP_AJBPairOverGrow_C_OnChangedNotOwnerEnv");
static_assert(sizeof(BP_AJBPairOverGrow_C_OnChangedNotOwnerEnv) == 0x000008, "Wrong size on BP_AJBPairOverGrow_C_OnChangedNotOwnerEnv");
static_assert(offsetof(BP_AJBPairOverGrow_C_OnChangedNotOwnerEnv, PairTarget_0) == 0x000000, "Member 'BP_AJBPairOverGrow_C_OnChangedNotOwnerEnv::PairTarget_0' has a wrong offset!");

// Function BP_AJBPairOverGrow.BP_AJBPairOverGrow_C.ROS_OnChanged
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBPairOverGrow_C_ROS_OnChanged final
{
public:
	class ABP_AJBInGameCharacter_C*               PairTarget_0;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPairOverGrow_C_ROS_OnChanged) == 0x000008, "Wrong alignment on BP_AJBPairOverGrow_C_ROS_OnChanged");
static_assert(sizeof(BP_AJBPairOverGrow_C_ROS_OnChanged) == 0x000008, "Wrong size on BP_AJBPairOverGrow_C_ROS_OnChanged");
static_assert(offsetof(BP_AJBPairOverGrow_C_ROS_OnChanged, PairTarget_0) == 0x000000, "Member 'BP_AJBPairOverGrow_C_ROS_OnChanged::PairTarget_0' has a wrong offset!");

// Function BP_AJBPairOverGrow.BP_AJBPairOverGrow_C.OnChangedOwnerEnv
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBPairOverGrow_C_OnChangedOwnerEnv final
{
public:
	bool                                          bShouldSpawnParticle;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPairOverGrow_C_OnChangedOwnerEnv) == 0x000001, "Wrong alignment on BP_AJBPairOverGrow_C_OnChangedOwnerEnv");
static_assert(sizeof(BP_AJBPairOverGrow_C_OnChangedOwnerEnv) == 0x000001, "Wrong size on BP_AJBPairOverGrow_C_OnChangedOwnerEnv");
static_assert(offsetof(BP_AJBPairOverGrow_C_OnChangedOwnerEnv, bShouldSpawnParticle) == 0x000000, "Member 'BP_AJBPairOverGrow_C_OnChangedOwnerEnv::bShouldSpawnParticle' has a wrong offset!");

// Function BP_AJBPairOverGrow.BP_AJBPairOverGrow_C.NotifyTheWorld
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBPairOverGrow_C_NotifyTheWorld final
{
public:
	class AAJBInGameCharacter*                    Operator;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGeneralTiming                                Timing;                                            // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnable;                                           // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bOperatorIsEmpty;                                  // 0x000E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPairOverGrow_C_NotifyTheWorld) == 0x000008, "Wrong alignment on BP_AJBPairOverGrow_C_NotifyTheWorld");
static_assert(sizeof(BP_AJBPairOverGrow_C_NotifyTheWorld) == 0x000010, "Wrong size on BP_AJBPairOverGrow_C_NotifyTheWorld");
static_assert(offsetof(BP_AJBPairOverGrow_C_NotifyTheWorld, Operator) == 0x000000, "Member 'BP_AJBPairOverGrow_C_NotifyTheWorld::Operator' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_NotifyTheWorld, Time) == 0x000008, "Member 'BP_AJBPairOverGrow_C_NotifyTheWorld::Time' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_NotifyTheWorld, Timing) == 0x00000C, "Member 'BP_AJBPairOverGrow_C_NotifyTheWorld::Timing' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_NotifyTheWorld, bEnable) == 0x00000D, "Member 'BP_AJBPairOverGrow_C_NotifyTheWorld::bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_NotifyTheWorld, bOperatorIsEmpty) == 0x00000E, "Member 'BP_AJBPairOverGrow_C_NotifyTheWorld::bOperatorIsEmpty' has a wrong offset!");

// Function BP_AJBPairOverGrow.BP_AJBPairOverGrow_C.UpdatePairCheckCore
// 0x0228 (0x0228 - 0x0000)
struct BP_AJBPairOverGrow_C_UpdatePairCheckCore final
{
public:
	bool                                          bTargetIsPair;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               NewTarget;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPairNearby_IsNearby;                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBInGameCharacterPropertyOwner_C> K2Node_DynamicCast_AsBI_AJBIn_Game_Character_Property_Owner; // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               CallFunc_GetPropertyStand_PropertyStandBP;         // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesImplementInterface_ReturnValue;       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBInGameCharacterProperty_C> K2Node_DynamicCast_AsBI_AJBIn_Game_Character_Property; // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsTargetOverGrow_IsTarget;                // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanPairOverGrow_CanPairOverGrow;          // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanPairOverGrow_CanPairOverGrow1;         // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character1;     // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character2;     // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess4;                      // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CalcCameraBaseTraceInfo_bSucceed;         // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_CalcCameraBaseTraceInfo_TraceStart;       // 0x00A4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalcCameraBaseTraceInfo_TraceEnd;         // 0x00B0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x00C0(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array1;                           // 0x00D0(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	TArray<struct FHitResult>                     CallFunc_AJBMultiSphereTraceForObjects_OutHits;    // 0x00E0(0x0010)(ZeroConstructor, ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_AJBMultiSphereTraceForObjects_ReturnValue; // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_Array_Get_Item;                           // 0x0100(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_18A[0x2];                                      // 0x018A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0194(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01A0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01AC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01B8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01F0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01FC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameWindow_C*                  K2Node_DynamicCast_AsBP_AJBIn_Game_Window;         // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess5;                      // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0211(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBroken_ReturnValue;                     // 0x0212(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0213(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x0214(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue1;     // 0x0215(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x0216(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_217[0x1];                                      // 0x0217(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPairOverGrow_C_UpdatePairCheckCore) == 0x000008, "Wrong alignment on BP_AJBPairOverGrow_C_UpdatePairCheckCore");
static_assert(sizeof(BP_AJBPairOverGrow_C_UpdatePairCheckCore) == 0x000228, "Wrong size on BP_AJBPairOverGrow_C_UpdatePairCheckCore");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, bTargetIsPair) == 0x000000, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::bTargetIsPair' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, NewTarget) == 0x000008, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::NewTarget' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_IsPairNearby_IsNearby) == 0x000010, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_IsPairNearby_IsNearby' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000020, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, K2Node_DynamicCast_AsBI_AJBIn_Game_Character_Property_Owner) == 0x000038, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::K2Node_DynamicCast_AsBI_AJBIn_Game_Character_Property_Owner' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, K2Node_DynamicCast_bSuccess1) == 0x000048, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_GetPropertyStand_PropertyStandBP) == 0x000050, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_GetPropertyStand_PropertyStandBP' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_DoesImplementInterface_ReturnValue) == 0x000058, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_DoesImplementInterface_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, K2Node_DynamicCast_AsBI_AJBIn_Game_Character_Property) == 0x000060, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::K2Node_DynamicCast_AsBI_AJBIn_Game_Character_Property' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, K2Node_DynamicCast_bSuccess2) == 0x000070, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_IsTargetOverGrow_IsTarget) == 0x000071, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_IsTargetOverGrow_IsTarget' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_CanPairOverGrow_CanPairOverGrow) == 0x000072, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_CanPairOverGrow_CanPairOverGrow' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_CanPairOverGrow_CanPairOverGrow1) == 0x000073, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_CanPairOverGrow_CanPairOverGrow1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, K2Node_DynamicCast_AsBP_AJBIn_Game_Character1) == 0x000078, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::K2Node_DynamicCast_AsBP_AJBIn_Game_Character1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, K2Node_DynamicCast_bSuccess3) == 0x000080, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_GetOwner_ReturnValue1) == 0x000088, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, Temp_int_Array_Index_Variable) == 0x000090, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, K2Node_DynamicCast_AsBP_AJBIn_Game_Character2) == 0x000098, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::K2Node_DynamicCast_AsBP_AJBIn_Game_Character2' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, K2Node_DynamicCast_bSuccess4) == 0x0000A0, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::K2Node_DynamicCast_bSuccess4' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_CalcCameraBaseTraceInfo_bSucceed) == 0x0000A1, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_CalcCameraBaseTraceInfo_bSucceed' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_CalcCameraBaseTraceInfo_TraceStart) == 0x0000A4, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_CalcCameraBaseTraceInfo_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_CalcCameraBaseTraceInfo_TraceEnd) == 0x0000B0, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_CalcCameraBaseTraceInfo_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, K2Node_MakeArray_Array) == 0x0000C0, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, K2Node_MakeArray_Array1) == 0x0000D0, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::K2Node_MakeArray_Array1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_AJBMultiSphereTraceForObjects_OutHits) == 0x0000E0, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_AJBMultiSphereTraceForObjects_OutHits' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_AJBMultiSphereTraceForObjects_ReturnValue) == 0x0000F0, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_AJBMultiSphereTraceForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_Array_Length_ReturnValue) == 0x0000F4, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_Less_IntInt_ReturnValue) == 0x0000F8, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_Array_Get_Item) == 0x000100, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_BreakHitResult_bBlockingHit) == 0x000188, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_BreakHitResult_bInitialOverlap) == 0x000189, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_BreakHitResult_Time) == 0x00018C, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_BreakHitResult_Distance) == 0x000190, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_BreakHitResult_Location) == 0x000194, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_BreakHitResult_ImpactPoint) == 0x0001A0, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_BreakHitResult_Normal) == 0x0001AC, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_BreakHitResult_ImpactNormal) == 0x0001B8, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_BreakHitResult_PhysMat) == 0x0001C8, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_BreakHitResult_HitActor) == 0x0001D0, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_BreakHitResult_HitComponent) == 0x0001D8, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_BreakHitResult_HitBoneName) == 0x0001E0, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_BreakHitResult_HitItem) == 0x0001E8, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_BreakHitResult_FaceIndex) == 0x0001EC, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_BreakHitResult_TraceStart) == 0x0001F0, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_BreakHitResult_TraceEnd) == 0x0001FC, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, K2Node_DynamicCast_AsBP_AJBIn_Game_Window) == 0x000208, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::K2Node_DynamicCast_AsBP_AJBIn_Game_Window' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, K2Node_DynamicCast_bSuccess5) == 0x000210, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::K2Node_DynamicCast_bSuccess5' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000211, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_IsBroken_ReturnValue) == 0x000212, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_IsBroken_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_BooleanAND_ReturnValue) == 0x000213, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_BooleanAND_ReturnValue1) == 0x000214, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_EqualEqual_ObjectObject_ReturnValue1) == 0x000215, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_EqualEqual_ObjectObject_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_BooleanAND_ReturnValue2) == 0x000216, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_GetObjectClass_ReturnValue) == 0x000218, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_UpdatePairCheckCore, CallFunc_ClassIsChildOf_ReturnValue) == 0x000220, "Member 'BP_AJBPairOverGrow_C_UpdatePairCheckCore::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");

// Function BP_AJBPairOverGrow.BP_AJBPairOverGrow_C.ChangeTarget
// 0x0028 (0x0028 - 0x0000)
struct BP_AJBPairOverGrow_C_ChangeTarget final
{
public:
	class ABP_AJBInGameCharacter_C*               CharacterBP;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBOverGrowSkill_C*                 CallFunc_GetComponentByClass_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPairOverGrow_C_ChangeTarget) == 0x000008, "Wrong alignment on BP_AJBPairOverGrow_C_ChangeTarget");
static_assert(sizeof(BP_AJBPairOverGrow_C_ChangeTarget) == 0x000028, "Wrong size on BP_AJBPairOverGrow_C_ChangeTarget");
static_assert(offsetof(BP_AJBPairOverGrow_C_ChangeTarget, CharacterBP) == 0x000000, "Member 'BP_AJBPairOverGrow_C_ChangeTarget::CharacterBP' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ChangeTarget, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBPairOverGrow_C_ChangeTarget::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ChangeTarget, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000010, "Member 'BP_AJBPairOverGrow_C_ChangeTarget::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ChangeTarget, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AJBPairOverGrow_C_ChangeTarget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ChangeTarget, CallFunc_GetComponentByClass_ReturnValue) == 0x000020, "Member 'BP_AJBPairOverGrow_C_ChangeTarget::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");

// Function BP_AJBPairOverGrow.BP_AJBPairOverGrow_C.TryDestroyPairTargetParticle
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBPairOverGrow_C_TryDestroyPairTargetParticle final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPairOverGrow_C_TryDestroyPairTargetParticle) == 0x000001, "Wrong alignment on BP_AJBPairOverGrow_C_TryDestroyPairTargetParticle");
static_assert(sizeof(BP_AJBPairOverGrow_C_TryDestroyPairTargetParticle) == 0x000001, "Wrong size on BP_AJBPairOverGrow_C_TryDestroyPairTargetParticle");
static_assert(offsetof(BP_AJBPairOverGrow_C_TryDestroyPairTargetParticle, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_AJBPairOverGrow_C_TryDestroyPairTargetParticle::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_AJBPairOverGrow.BP_AJBPairOverGrow_C.ChangeGuideUIEnable
// 0x0028 (0x0028 - 0x0000)
struct BP_AJBPairOverGrow_C_ChangeGuideUIEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBOverGrowSkill_C*                 CallFunc_GetComponentByClass_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPairOverGrow_C_ChangeGuideUIEnable) == 0x000008, "Wrong alignment on BP_AJBPairOverGrow_C_ChangeGuideUIEnable");
static_assert(sizeof(BP_AJBPairOverGrow_C_ChangeGuideUIEnable) == 0x000028, "Wrong size on BP_AJBPairOverGrow_C_ChangeGuideUIEnable");
static_assert(offsetof(BP_AJBPairOverGrow_C_ChangeGuideUIEnable, bEnable) == 0x000000, "Member 'BP_AJBPairOverGrow_C_ChangeGuideUIEnable::bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ChangeGuideUIEnable, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBPairOverGrow_C_ChangeGuideUIEnable::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ChangeGuideUIEnable, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000010, "Member 'BP_AJBPairOverGrow_C_ChangeGuideUIEnable::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ChangeGuideUIEnable, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AJBPairOverGrow_C_ChangeGuideUIEnable::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_ChangeGuideUIEnable, CallFunc_GetComponentByClass_ReturnValue) == 0x000020, "Member 'BP_AJBPairOverGrow_C_ChangeGuideUIEnable::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");

// Function BP_AJBPairOverGrow.BP_AJBPairOverGrow_C.OnRep_PairTarget
// 0x0018 (0x0018 - 0x0000)
struct BP_AJBPairOverGrow_C_OnRep_PairTarget final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBInGameCharacterBase*                K2Node_DynamicCast_AsAJBIn_Game_Character_Base;    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue;     // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPairOverGrow_C_OnRep_PairTarget) == 0x000008, "Wrong alignment on BP_AJBPairOverGrow_C_OnRep_PairTarget");
static_assert(sizeof(BP_AJBPairOverGrow_C_OnRep_PairTarget) == 0x000018, "Wrong size on BP_AJBPairOverGrow_C_OnRep_PairTarget");
static_assert(offsetof(BP_AJBPairOverGrow_C_OnRep_PairTarget, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'BP_AJBPairOverGrow_C_OnRep_PairTarget::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_OnRep_PairTarget, K2Node_DynamicCast_AsAJBIn_Game_Character_Base) == 0x000008, "Member 'BP_AJBPairOverGrow_C_OnRep_PairTarget::K2Node_DynamicCast_AsAJBIn_Game_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_OnRep_PairTarget, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_AJBPairOverGrow_C_OnRep_PairTarget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_OnRep_PairTarget, CallFunc_HasLocalSharedController_ReturnValue) == 0x000011, "Member 'BP_AJBPairOverGrow_C_OnRep_PairTarget::CallFunc_HasLocalSharedController_ReturnValue' has a wrong offset!");

// Function BP_AJBPairOverGrow.BP_AJBPairOverGrow_C.SpawnPairTargetParticle
// 0x0020 (0x0020 - 0x0000)
struct BP_AJBPairOverGrow_C_SpawnPairTargetParticle final
{
public:
	class ACharacter*                             PairTarget_0;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ParticleTag;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          CallFunc_RequestParticleEffectAttachedOnLocal_ParticleEffect; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPairOverGrow_C_SpawnPairTargetParticle) == 0x000008, "Wrong alignment on BP_AJBPairOverGrow_C_SpawnPairTargetParticle");
static_assert(sizeof(BP_AJBPairOverGrow_C_SpawnPairTargetParticle) == 0x000020, "Wrong size on BP_AJBPairOverGrow_C_SpawnPairTargetParticle");
static_assert(offsetof(BP_AJBPairOverGrow_C_SpawnPairTargetParticle, PairTarget_0) == 0x000000, "Member 'BP_AJBPairOverGrow_C_SpawnPairTargetParticle::PairTarget_0' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_SpawnPairTargetParticle, ParticleTag) == 0x000008, "Member 'BP_AJBPairOverGrow_C_SpawnPairTargetParticle::ParticleTag' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_SpawnPairTargetParticle, CallFunc_RequestParticleEffectAttachedOnLocal_ParticleEffect) == 0x000010, "Member 'BP_AJBPairOverGrow_C_SpawnPairTargetParticle::CallFunc_RequestParticleEffectAttachedOnLocal_ParticleEffect' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_SpawnPairTargetParticle, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_AJBPairOverGrow_C_SpawnPairTargetParticle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_SpawnPairTargetParticle, CallFunc_IsValid_ReturnValue1) == 0x000019, "Member 'BP_AJBPairOverGrow_C_SpawnPairTargetParticle::CallFunc_IsValid_ReturnValue1' has a wrong offset!");

// Function BP_AJBPairOverGrow.BP_AJBPairOverGrow_C.IsPairNearby
// 0x00A8 (0x00A8 - 0x0000)
struct BP_AJBPairOverGrow_C_IsPairNearby final
{
public:
	bool                                          IsNearby;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x001C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue1;         // 0x0028(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character1;     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DoesImplementInterface_ReturnValue;       // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBInGameCharacterPropertyOwner_C> K2Node_DynamicCast_AsBI_AJBIn_Game_Character_Property_Owner; // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               CallFunc_GetPropertyStand_PropertyStandBP;         // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue2;         // 0x0068(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0074(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue3;         // 0x0080(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue1;       // 0x0090(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_VSize_ReturnValue1;                       // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue1;        // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPairOverGrow_C_IsPairNearby) == 0x000008, "Wrong alignment on BP_AJBPairOverGrow_C_IsPairNearby");
static_assert(sizeof(BP_AJBPairOverGrow_C_IsPairNearby) == 0x0000A8, "Wrong size on BP_AJBPairOverGrow_C_IsPairNearby");
static_assert(offsetof(BP_AJBPairOverGrow_C_IsPairNearby, IsNearby) == 0x000000, "Member 'BP_AJBPairOverGrow_C_IsPairNearby::IsNearby' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_IsPairNearby, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBPairOverGrow_C_IsPairNearby::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_IsPairNearby, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000010, "Member 'BP_AJBPairOverGrow_C_IsPairNearby::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_IsPairNearby, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AJBPairOverGrow_C_IsPairNearby::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_IsPairNearby, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00001C, "Member 'BP_AJBPairOverGrow_C_IsPairNearby::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_IsPairNearby, CallFunc_K2_GetActorLocation_ReturnValue1) == 0x000028, "Member 'BP_AJBPairOverGrow_C_IsPairNearby::CallFunc_K2_GetActorLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_IsPairNearby, K2Node_DynamicCast_AsBP_AJBIn_Game_Character1) == 0x000038, "Member 'BP_AJBPairOverGrow_C_IsPairNearby::K2Node_DynamicCast_AsBP_AJBIn_Game_Character1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_IsPairNearby, K2Node_DynamicCast_bSuccess1) == 0x000040, "Member 'BP_AJBPairOverGrow_C_IsPairNearby::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_IsPairNearby, CallFunc_DoesImplementInterface_ReturnValue) == 0x000041, "Member 'BP_AJBPairOverGrow_C_IsPairNearby::CallFunc_DoesImplementInterface_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_IsPairNearby, K2Node_DynamicCast_AsBI_AJBIn_Game_Character_Property_Owner) == 0x000048, "Member 'BP_AJBPairOverGrow_C_IsPairNearby::K2Node_DynamicCast_AsBI_AJBIn_Game_Character_Property_Owner' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_IsPairNearby, K2Node_DynamicCast_bSuccess2) == 0x000058, "Member 'BP_AJBPairOverGrow_C_IsPairNearby::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_IsPairNearby, CallFunc_GetPropertyStand_PropertyStandBP) == 0x000060, "Member 'BP_AJBPairOverGrow_C_IsPairNearby::CallFunc_GetPropertyStand_PropertyStandBP' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_IsPairNearby, CallFunc_K2_GetActorLocation_ReturnValue2) == 0x000068, "Member 'BP_AJBPairOverGrow_C_IsPairNearby::CallFunc_K2_GetActorLocation_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_IsPairNearby, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000074, "Member 'BP_AJBPairOverGrow_C_IsPairNearby::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_IsPairNearby, CallFunc_K2_GetActorLocation_ReturnValue3) == 0x000080, "Member 'BP_AJBPairOverGrow_C_IsPairNearby::CallFunc_K2_GetActorLocation_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_IsPairNearby, CallFunc_VSize_ReturnValue) == 0x00008C, "Member 'BP_AJBPairOverGrow_C_IsPairNearby::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_IsPairNearby, CallFunc_Subtract_VectorVector_ReturnValue1) == 0x000090, "Member 'BP_AJBPairOverGrow_C_IsPairNearby::CallFunc_Subtract_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_IsPairNearby, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00009C, "Member 'BP_AJBPairOverGrow_C_IsPairNearby::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_IsPairNearby, CallFunc_VSize_ReturnValue1) == 0x0000A0, "Member 'BP_AJBPairOverGrow_C_IsPairNearby::CallFunc_VSize_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_IsPairNearby, CallFunc_LessEqual_FloatFloat_ReturnValue1) == 0x0000A4, "Member 'BP_AJBPairOverGrow_C_IsPairNearby::CallFunc_LessEqual_FloatFloat_ReturnValue1' has a wrong offset!");

// Function BP_AJBPairOverGrow.BP_AJBPairOverGrow_C.CanPairOverGrow
// 0x0060 (0x0060 - 0x0000)
struct BP_AJBPairOverGrow_C_CanPairOverGrow final
{
public:
	class AActor*                                 TargetPair;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanPairOverGrow_0;                                 // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CharacterBehaviorMatches_ReturnValue;     // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x001C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character1;     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue1;         // 0x003C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0048(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPairOverGrow_C_CanPairOverGrow) == 0x000008, "Wrong alignment on BP_AJBPairOverGrow_C_CanPairOverGrow");
static_assert(sizeof(BP_AJBPairOverGrow_C_CanPairOverGrow) == 0x000060, "Wrong size on BP_AJBPairOverGrow_C_CanPairOverGrow");
static_assert(offsetof(BP_AJBPairOverGrow_C_CanPairOverGrow, TargetPair) == 0x000000, "Member 'BP_AJBPairOverGrow_C_CanPairOverGrow::TargetPair' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_CanPairOverGrow, CanPairOverGrow_0) == 0x000008, "Member 'BP_AJBPairOverGrow_C_CanPairOverGrow::CanPairOverGrow_0' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_CanPairOverGrow, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000010, "Member 'BP_AJBPairOverGrow_C_CanPairOverGrow::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_CanPairOverGrow, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AJBPairOverGrow_C_CanPairOverGrow::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_CanPairOverGrow, CallFunc_CharacterBehaviorMatches_ReturnValue) == 0x000019, "Member 'BP_AJBPairOverGrow_C_CanPairOverGrow::CallFunc_CharacterBehaviorMatches_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_CanPairOverGrow, CallFunc_Not_PreBool_ReturnValue) == 0x00001A, "Member 'BP_AJBPairOverGrow_C_CanPairOverGrow::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_CanPairOverGrow, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00001C, "Member 'BP_AJBPairOverGrow_C_CanPairOverGrow::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_CanPairOverGrow, CallFunc_GetOwner_ReturnValue) == 0x000028, "Member 'BP_AJBPairOverGrow_C_CanPairOverGrow::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_CanPairOverGrow, K2Node_DynamicCast_AsBP_AJBIn_Game_Character1) == 0x000030, "Member 'BP_AJBPairOverGrow_C_CanPairOverGrow::K2Node_DynamicCast_AsBP_AJBIn_Game_Character1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_CanPairOverGrow, K2Node_DynamicCast_bSuccess1) == 0x000038, "Member 'BP_AJBPairOverGrow_C_CanPairOverGrow::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_CanPairOverGrow, CallFunc_K2_GetActorLocation_ReturnValue1) == 0x00003C, "Member 'BP_AJBPairOverGrow_C_CanPairOverGrow::CallFunc_K2_GetActorLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_CanPairOverGrow, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000048, "Member 'BP_AJBPairOverGrow_C_CanPairOverGrow::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_CanPairOverGrow, CallFunc_VSize_ReturnValue) == 0x000054, "Member 'BP_AJBPairOverGrow_C_CanPairOverGrow::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPairOverGrow_C_CanPairOverGrow, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000058, "Member 'BP_AJBPairOverGrow_C_CanPairOverGrow::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

}

