#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SimpleStateMachine

#include "Basic.hpp"

#include "SimpleStateMachine_classes.hpp"
#include "SimpleStateMachine_parameters.hpp"


namespace SDK
{

// Function SimpleStateMachine.SimpleStateMachine_C.ExecuteUbergraph_SimpleStateMachine
// ()
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USimpleStateMachine_C::ExecuteUbergraph_SimpleStateMachine(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleStateMachine_C", "ExecuteUbergraph_SimpleStateMachine");

	Params::SimpleStateMachine_C_ExecuteUbergraph_SimpleStateMachine Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SimpleStateMachine.SimpleStateMachine_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USimpleStateMachine_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleStateMachine_C", "ReceiveTick");

	Params::SimpleStateMachine_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SimpleStateMachine.SimpleStateMachine_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void USimpleStateMachine_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleStateMachine_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SimpleStateMachine.SimpleStateMachine_C.ChangeState
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USimpleStateMachine_C::ChangeState(class FName State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleStateMachine_C", "ChangeState");

	Params::SimpleStateMachine_C_ChangeState Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SimpleStateMachine.SimpleStateMachine_C.Tick
// (Public, BlueprintCallable, BlueprintEvent)

void USimpleStateMachine_C::Tick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleStateMachine_C", "Tick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SimpleStateMachine.SimpleStateMachine_C.IsInState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void USimpleStateMachine_C::IsInState(class FName State, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleStateMachine_C", "IsInState");

	Params::SimpleStateMachine_C_IsInState Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function SimpleStateMachine.SimpleStateMachine_C.ResetElapsedTime
// (Public, BlueprintCallable, BlueprintEvent)

void USimpleStateMachine_C::ResetElapsedTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleStateMachine_C", "ResetElapsedTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SimpleStateMachine.SimpleStateMachine_C.GetElapsedTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float*                                  Elapsed_Time                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USimpleStateMachine_C::GetElapsedTime(float* Elapsed_Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleStateMachine_C", "GetElapsedTime");

	Params::SimpleStateMachine_C_GetElapsedTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Elapsed_Time != nullptr)
		*Elapsed_Time = Parms.Elapsed_Time;
}


// Function SimpleStateMachine.SimpleStateMachine_C.ChangeStateViaIndex
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Idx                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USimpleStateMachine_C::ChangeStateViaIndex(int32 Idx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleStateMachine_C", "ChangeStateViaIndex");

	Params::SimpleStateMachine_C_ChangeStateViaIndex Parms{};

	Parms.Idx = Idx;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SimpleStateMachine.SimpleStateMachine_C.GetCurrentState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName*                            CurrentState_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USimpleStateMachine_C::GetCurrentState(class FName* CurrentState_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleStateMachine_C", "GetCurrentState");

	Params::SimpleStateMachine_C_GetCurrentState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentState_0 != nullptr)
		*CurrentState_0 = Parms.CurrentState_0;
}


// Function SimpleStateMachine.SimpleStateMachine_C.GetNextState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName*                            NextState_0                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USimpleStateMachine_C::GetNextState(class FName* NextState_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleStateMachine_C", "GetNextState");

	Params::SimpleStateMachine_C_GetNextState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NextState_0 != nullptr)
		*NextState_0 = Parms.NextState_0;
}


// Function SimpleStateMachine.SimpleStateMachine_C.GetPreviousState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName*                            Previous_State                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USimpleStateMachine_C::GetPreviousState(class FName* Previous_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SimpleStateMachine_C", "GetPreviousState");

	Params::SimpleStateMachine_C_GetPreviousState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Previous_State != nullptr)
		*Previous_State = Parms.Previous_State;
}

}

