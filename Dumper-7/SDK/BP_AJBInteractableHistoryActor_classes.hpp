#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInteractableHistoryActor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_AJBHistoryActorBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBInteractableHistoryActor.BP_AJBInteractableHistoryActor_C
// 0x0028 (0x03F8 - 0x03D0)
class ABP_AJBInteractableHistoryActor_C : public ABP_AJBHistoryActorBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBInteractableHistoryActor_C;   // 0x03D0(0x0008)(Transient, DuplicateTransient)
	class UCapsuleComponent*                      Capsule;                                           // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FText                                   InteractMessage;                                   // 0x03E0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_AJBInteractableHistoryActor(int32 EntryPoint);
	void OnInteractionBlocked(class AActor* InteractingActor);
	void OnSucceededLongPress_Local();
	void OnROSInteract(class AActor* InteractingActor, bool ServerIsInteractingPlayer);
	void OnInteract(class AActor* InteractActor);
	void ShouldPrioritizedThanPrepaidSkillCancel(bool* bShouldPriorirized);
	bool IfBlockInteract(class AActor* InteractingActor);
	bool IfNeedsExclusiveInteractStrictly();
	void GetInteractBoundForCulling(class AActor* InteractingActor, struct FVector* Center, float* Radius);
	void GetInteractPriority(int32* Priority);
	void GetInteractState(uint8* InteractState);
	void CheckErrorCondition(bool* bErrorCondition, uint8* ErrorType);
	void TryGetInteractableText(class ABP_AJBInGameCharacter_C* OperatorCharacter, bool* bSuccess, class FText* InteractMessage_0);
	void OnLocalInteract(class AActor* InteractingActor, bool* bSuccess);
	bool InteractInstantly(class ABP_AJBInGameCharacter_C* Character);
	bool Interactable(class ABP_AJBInGameCharacter_C* Character, float TraceLength);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBInteractableHistoryActor_C">();
	}
	static class ABP_AJBInteractableHistoryActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBInteractableHistoryActor_C>();
	}
};
static_assert(alignof(ABP_AJBInteractableHistoryActor_C) == 0x000008, "Wrong alignment on ABP_AJBInteractableHistoryActor_C");
static_assert(sizeof(ABP_AJBInteractableHistoryActor_C) == 0x0003F8, "Wrong size on ABP_AJBInteractableHistoryActor_C");
static_assert(offsetof(ABP_AJBInteractableHistoryActor_C, UberGraphFrame_BP_AJBInteractableHistoryActor_C) == 0x0003D0, "Member 'ABP_AJBInteractableHistoryActor_C::UberGraphFrame_BP_AJBInteractableHistoryActor_C' has a wrong offset!");
static_assert(offsetof(ABP_AJBInteractableHistoryActor_C, Capsule) == 0x0003D8, "Member 'ABP_AJBInteractableHistoryActor_C::Capsule' has a wrong offset!");
static_assert(offsetof(ABP_AJBInteractableHistoryActor_C, InteractMessage) == 0x0003E0, "Member 'ABP_AJBInteractableHistoryActor_C::InteractMessage' has a wrong offset!");

}

