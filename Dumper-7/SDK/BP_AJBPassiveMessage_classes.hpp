#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBPassiveMessage

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AJB_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBPassiveMessage.BP_AJBPassiveMessage_C
// 0x0030 (0x0128 - 0x00F8)
class UBP_AJBPassiveMessage_C final : public UAJBStringTableManagerComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00F8(0x0008)(Transient, DuplicateTransient)
	class UWB_PassiveMessage_C*                   MessageWidget;                                     // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ElapsedTime;                                       // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeTime;                                          // 0x010C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RangeA;                                            // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RangeB;                                            // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldEnableTickByUltAnimation;                   // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShouldEnableTickByLeftTimeUpdate;                 // 0x0119(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShouldEnableTickByPhaseUpdate;                    // 0x011A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11B[0x5];                                      // 0x011B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacter*                    TargetCharacter;                                   // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBPassiveMessage(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void OnEndUltSkillAnimation();
	void OnStartUltSkillAnimation();
	void RequestAddMessageByGameplayTag(const struct FGameplayTag& Tag, bool* bSuccess);
	void SetupMessageWidget(class UWB_PassiveMessage_C* MessageWidget_0, class UWB_AbilityActivateMessage_C* AbilityActiveMessageWidget);
	void RequestRemoveMessageByGameplayTag(const struct FGameplayTag& Tag, bool* bSuccess);
	void Initialize(class AAJBInGameCharacter* TargetCharacter_0);
	void CheckTickEnabled();
	void ResetTickEnabledFactor();
	void ChangeTickEnable(bool bEnable, bool bByUltAnimation, bool bByOtherUpdate);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBPassiveMessage_C">();
	}
	static class UBP_AJBPassiveMessage_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBPassiveMessage_C>();
	}
};
static_assert(alignof(UBP_AJBPassiveMessage_C) == 0x000008, "Wrong alignment on UBP_AJBPassiveMessage_C");
static_assert(sizeof(UBP_AJBPassiveMessage_C) == 0x000128, "Wrong size on UBP_AJBPassiveMessage_C");
static_assert(offsetof(UBP_AJBPassiveMessage_C, UberGraphFrame) == 0x0000F8, "Member 'UBP_AJBPassiveMessage_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_AJBPassiveMessage_C, MessageWidget) == 0x000100, "Member 'UBP_AJBPassiveMessage_C::MessageWidget' has a wrong offset!");
static_assert(offsetof(UBP_AJBPassiveMessage_C, ElapsedTime) == 0x000108, "Member 'UBP_AJBPassiveMessage_C::ElapsedTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBPassiveMessage_C, FadeTime) == 0x00010C, "Member 'UBP_AJBPassiveMessage_C::FadeTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBPassiveMessage_C, RangeA) == 0x000110, "Member 'UBP_AJBPassiveMessage_C::RangeA' has a wrong offset!");
static_assert(offsetof(UBP_AJBPassiveMessage_C, RangeB) == 0x000114, "Member 'UBP_AJBPassiveMessage_C::RangeB' has a wrong offset!");
static_assert(offsetof(UBP_AJBPassiveMessage_C, bShouldEnableTickByUltAnimation) == 0x000118, "Member 'UBP_AJBPassiveMessage_C::bShouldEnableTickByUltAnimation' has a wrong offset!");
static_assert(offsetof(UBP_AJBPassiveMessage_C, bShouldEnableTickByLeftTimeUpdate) == 0x000119, "Member 'UBP_AJBPassiveMessage_C::bShouldEnableTickByLeftTimeUpdate' has a wrong offset!");
static_assert(offsetof(UBP_AJBPassiveMessage_C, bShouldEnableTickByPhaseUpdate) == 0x00011A, "Member 'UBP_AJBPassiveMessage_C::bShouldEnableTickByPhaseUpdate' has a wrong offset!");
static_assert(offsetof(UBP_AJBPassiveMessage_C, TargetCharacter) == 0x000120, "Member 'UBP_AJBPassiveMessage_C::TargetCharacter' has a wrong offset!");

}

