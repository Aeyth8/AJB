#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AchievementTriggerSender

#include "Basic.hpp"

#include "BP_AchievementTriggerSender_classes.hpp"
#include "BP_AchievementTriggerSender_parameters.hpp"


namespace SDK
{

// Function BP_AchievementTriggerSender.BP_AchievementTriggerSender_C.ExecuteUbergraph_BP_AchievementTriggerSender
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AchievementTriggerSender_C::ExecuteUbergraph_BP_AchievementTriggerSender(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_C", "ExecuteUbergraph_BP_AchievementTriggerSender");

	Params::BP_AchievementTriggerSender_C_ExecuteUbergraph_BP_AchievementTriggerSender Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AchievementTriggerSender.BP_AchievementTriggerSender_C.BindOwnerActorEvents
// (BlueprintCallable, BlueprintEvent)

void UBP_AchievementTriggerSender_C::BindOwnerActorEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_C", "BindOwnerActorEvents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AchievementTriggerSender.BP_AchievementTriggerSender_C.OnOpenTheGame
// (BlueprintCallable, BlueprintEvent)

void UBP_AchievementTriggerSender_C::OnOpenTheGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_C", "OnOpenTheGame");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AchievementTriggerSender.BP_AchievementTriggerSender_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_AchievementTriggerSender_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AchievementTriggerSender.BP_AchievementTriggerSender_C.PrintAchievementValue
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              Key                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// const class FString&                    ResultValueString                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const class FString&                    ReceiveValueString                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    bIsSet                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bShouldPrintDebugText                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AchievementTriggerSender_C::PrintAchievementValue(const struct FGameplayTag& Key, const class FString& ResultValueString, const class FString& ReceiveValueString, bool bIsSet, bool bShouldPrintDebugText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_C", "PrintAchievementValue");

	Params::BP_AchievementTriggerSender_C_PrintAchievementValue Parms{};

	Parms.Key = std::move(Key);
	Parms.ResultValueString = std::move(ResultValueString);
	Parms.ReceiveValueString = std::move(ReceiveValueString);
	Parms.bIsSet = bIsSet;
	Parms.bShouldPrintDebugText = bShouldPrintDebugText;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AchievementTriggerSender.BP_AchievementTriggerSender_C.ShouldDisplayDebugString
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   bResult                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AchievementTriggerSender_C::ShouldDisplayDebugString(bool* bResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_C", "ShouldDisplayDebugString");

	Params::BP_AchievementTriggerSender_C_ShouldDisplayDebugString Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bResult != nullptr)
		*bResult = Parms.bResult;
}


// Function BP_AchievementTriggerSender.BP_AchievementTriggerSender_C.SetValueAsByte
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              Key                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// const uint8                             Value                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bUpdateEvenIfNotInGameplay                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bShouldPrintDebugText                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AchievementTriggerSender_C::SetValueAsByte(const struct FGameplayTag& Key, const uint8 Value, bool bUpdateEvenIfNotInGameplay, bool bShouldPrintDebugText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_C", "SetValueAsByte");

	Params::BP_AchievementTriggerSender_C_SetValueAsByte Parms{};

	Parms.Key = std::move(Key);
	Parms.Value = Value;
	Parms.bUpdateEvenIfNotInGameplay = bUpdateEvenIfNotInGameplay;
	Parms.bShouldPrintDebugText = bShouldPrintDebugText;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AchievementTriggerSender.BP_AchievementTriggerSender_C.SetValueAsFloat
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              Key                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// const float                             Value                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bUpdateEvenIfNotInGameplay                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bShouldPrintDebugText                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AchievementTriggerSender_C::SetValueAsFloat(const struct FGameplayTag& Key, const float Value, bool bUpdateEvenIfNotInGameplay, bool bShouldPrintDebugText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_C", "SetValueAsFloat");

	Params::BP_AchievementTriggerSender_C_SetValueAsFloat Parms{};

	Parms.Key = std::move(Key);
	Parms.Value = Value;
	Parms.bUpdateEvenIfNotInGameplay = bUpdateEvenIfNotInGameplay;
	Parms.bShouldPrintDebugText = bShouldPrintDebugText;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AchievementTriggerSender.BP_AchievementTriggerSender_C.SetValueAsInt
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              Key                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// const int32                             Value                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bUpdateEvenIfNotInGameplay                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bShouldPrintDebugText                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AchievementTriggerSender_C::SetValueAsInt(const struct FGameplayTag& Key, const int32 Value, bool bUpdateEvenIfNotInGameplay, bool bShouldPrintDebugText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_C", "SetValueAsInt");

	Params::BP_AchievementTriggerSender_C_SetValueAsInt Parms{};

	Parms.Key = std::move(Key);
	Parms.Value = Value;
	Parms.bUpdateEvenIfNotInGameplay = bUpdateEvenIfNotInGameplay;
	Parms.bShouldPrintDebugText = bShouldPrintDebugText;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AchievementTriggerSender.BP_AchievementTriggerSender_C.AddValueAsByte
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              Key                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// const uint8                             Value                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bUpdateEvenIfNotInGameplay                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bShouldPrintDebugText                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AchievementTriggerSender_C::AddValueAsByte(const struct FGameplayTag& Key, const uint8 Value, bool bUpdateEvenIfNotInGameplay, bool bShouldPrintDebugText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_C", "AddValueAsByte");

	Params::BP_AchievementTriggerSender_C_AddValueAsByte Parms{};

	Parms.Key = std::move(Key);
	Parms.Value = Value;
	Parms.bUpdateEvenIfNotInGameplay = bUpdateEvenIfNotInGameplay;
	Parms.bShouldPrintDebugText = bShouldPrintDebugText;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AchievementTriggerSender.BP_AchievementTriggerSender_C.AddValueAsFloat
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              Key                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// const float                             Value                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bUpdateEvenIfNotInGameplay                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bShouldPrintDebugText                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AchievementTriggerSender_C::AddValueAsFloat(const struct FGameplayTag& Key, const float Value, bool bUpdateEvenIfNotInGameplay, bool bShouldPrintDebugText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_C", "AddValueAsFloat");

	Params::BP_AchievementTriggerSender_C_AddValueAsFloat Parms{};

	Parms.Key = std::move(Key);
	Parms.Value = Value;
	Parms.bUpdateEvenIfNotInGameplay = bUpdateEvenIfNotInGameplay;
	Parms.bShouldPrintDebugText = bShouldPrintDebugText;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AchievementTriggerSender.BP_AchievementTriggerSender_C.AddValueAsInt
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              Key                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// const int32                             Value                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bUpdateEvenIfNotInGameplay                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bShouldPrintDebugText                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AchievementTriggerSender_C::AddValueAsInt(const struct FGameplayTag& Key, const int32 Value, bool bUpdateEvenIfNotInGameplay, bool bShouldPrintDebugText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_C", "AddValueAsInt");

	Params::BP_AchievementTriggerSender_C_AddValueAsInt Parms{};

	Parms.Key = std::move(Key);
	Parms.Value = Value;
	Parms.bUpdateEvenIfNotInGameplay = bUpdateEvenIfNotInGameplay;
	Parms.bShouldPrintDebugText = bShouldPrintDebugText;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AchievementTriggerSender.BP_AchievementTriggerSender_C.SetValueAsString
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              Key                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// const class FString&                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    bUpdateEvenIfNotInGameplay                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bShouldPrintDebugText                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AchievementTriggerSender_C::SetValueAsString(const struct FGameplayTag& Key, const class FString& Value, bool bUpdateEvenIfNotInGameplay, bool bShouldPrintDebugText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_C", "SetValueAsString");

	Params::BP_AchievementTriggerSender_C_SetValueAsString Parms{};

	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);
	Parms.bUpdateEvenIfNotInGameplay = bUpdateEvenIfNotInGameplay;
	Parms.bShouldPrintDebugText = bShouldPrintDebugText;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AchievementTriggerSender.BP_AchievementTriggerSender_C.AddValueAsIntArrayElem
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              Key                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// const int32                             Value                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bUpdateEvenIfNotInGameplay                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bShouldPrintDebugText                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AchievementTriggerSender_C::AddValueAsIntArrayElem(const struct FGameplayTag& Key, const int32 Value, int32 Index_0, bool bUpdateEvenIfNotInGameplay, bool bShouldPrintDebugText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementTriggerSender_C", "AddValueAsIntArrayElem");

	Params::BP_AchievementTriggerSender_C_AddValueAsIntArrayElem Parms{};

	Parms.Key = std::move(Key);
	Parms.Value = Value;
	Parms.Index_0 = Index_0;
	Parms.bUpdateEvenIfNotInGameplay = bUpdateEvenIfNotInGameplay;
	Parms.bShouldPrintDebugText = bShouldPrintDebugText;

	UObject::ProcessEvent(Func, &Parms);
}

}

