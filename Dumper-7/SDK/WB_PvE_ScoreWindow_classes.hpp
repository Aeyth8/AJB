#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_PvE_ScoreWindow

#include "Basic.hpp"

#include "ST_AJBPvEScoreResult_structs.hpp"
#include "Engine_structs.hpp"
#include "AJB_classes.hpp"
#include "EPvEGameDifficulty_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C
// 0x0100 (0x03C0 - 0x02C0)
class UWB_PvE_ScoreWindow_C final : public UAJBWindowWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(Transient, DuplicateTransient)
	class UAJBImage*                              AJBImage_2;                                        // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              AJBImage_3;                                        // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              AJBImage_5;                                        // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              AJBImage_6;                                        // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              AJBImage_7;                                        // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              AJBImage_8;                                        // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              AJBImage_BarFlare;                                 // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              AJBImage_Belt_Purble;                              // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              AJBImage_Belt_White;                               // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              AJBImage_Flash;                                    // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          AJBText_ScoreValue;                                // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          AJBTextBlock_1;                                    // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          AJBTextBlock_2;                                    // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          AJBTextBlock_3;                                    // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          AJBTextBlock_476;                                  // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_ScoreRank_A;                               // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_ScoreRank_B;                               // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_ScoreRank_C;                               // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_ScoreRank_S;                               // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_CommonButton_C*                     WB_CommonButton_Close;                             // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_PvE_ScoreWindow_Detail_C*           WB_PvE_ScoreWindow_Detail_0;                       // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_PvE_ScoreWindow_Detail_C*           WB_PvE_ScoreWindow_Detail_1;                       // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_PvE_ScoreWindow_Detail_C*           WB_PvE_ScoreWindow_Detail_2;                       // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_WindowFrame_C*                      WB_WindowFrame;                                    // 0x0380(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FST_AJBPvEScoreResult                  CachedResult;                                      // 0x0388(0x0020)(Edit, BlueprintVisible, HasGetValueTypeHash)
	float                                         DBIVoiceDelayTime;                                 // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AC[0x4];                                      // 0x03AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_HUDCountDownTimerWrapper_C*         AutoClosingTimer;                                  // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AutoClosingTime;                                   // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WB_PvE_ScoreWindow(int32 EntryPoint);
	void PreConstruct(bool IsDesignTime);
	void OnAutoCloseTimerExpired();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void PlayDBIVoiceByRank();
	void OpenWindowWithResult(EPvEGameDifficulty Difficulty, const struct FST_AJBPvEScoreResult& ScoreResult);
	void OnFinishedOpeningWindowAnimation();
	void OnClosingWindow();
	void BndEvt__WB_CommonButton_Close_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature(class UAJBButtonWidget* OwnerWidget, class UAJBButton* TargetButton);
	void OnOpeningWindow();
	void SetScoreRankText(int32 ScoreRank);
	void UpdateResult(EPvEGameDifficulty Difficulty, const struct FST_AJBPvEScoreResult& Result);
	bool OnInputTurnRate(float Value);
	bool OnInputReleasedUp();
	bool OnInputReleasedTouch();
	bool OnInputReleasedRight();
	bool OnInputReleasedR2();
	bool OnInputReleasedR1();
	bool OnInputReleasedLeft();
	bool OnInputReleasedL3();
	bool OnInputReleasedL2();
	bool OnInputReleasedL1();
	bool OnInputReleasedDown();
	bool OnInputReleasedDecide();
	bool OnInputReleasedCancel();
	bool OnInputPressedUp();
	bool OnInputPressedTouch(const float LocationX, const float LocationY);
	bool OnInputPressedRight();
	bool OnInputPressedR2();
	bool OnInputPressedR1();
	bool OnInputPressedLeft();
	bool OnInputPressedL3();
	bool OnInputPressedL2();
	bool OnInputPressedL1();
	bool OnInputPressedDown();
	bool OnInputPressedDecide();
	bool OnInputPressedCancel();
	bool OnInputMoveRight(float Value);
	bool OnInputMoveForward(float Value);
	bool OnInputLookupRate(float Value);
	bool IsModeless();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_PvE_ScoreWindow_C">();
	}
	static class UWB_PvE_ScoreWindow_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_PvE_ScoreWindow_C>();
	}
};
static_assert(alignof(UWB_PvE_ScoreWindow_C) == 0x000008, "Wrong alignment on UWB_PvE_ScoreWindow_C");
static_assert(sizeof(UWB_PvE_ScoreWindow_C) == 0x0003C0, "Wrong size on UWB_PvE_ScoreWindow_C");
static_assert(offsetof(UWB_PvE_ScoreWindow_C, UberGraphFrame) == 0x0002C0, "Member 'UWB_PvE_ScoreWindow_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_PvE_ScoreWindow_C, AJBImage_2) == 0x0002C8, "Member 'UWB_PvE_ScoreWindow_C::AJBImage_2' has a wrong offset!");
static_assert(offsetof(UWB_PvE_ScoreWindow_C, AJBImage_3) == 0x0002D0, "Member 'UWB_PvE_ScoreWindow_C::AJBImage_3' has a wrong offset!");
static_assert(offsetof(UWB_PvE_ScoreWindow_C, AJBImage_5) == 0x0002D8, "Member 'UWB_PvE_ScoreWindow_C::AJBImage_5' has a wrong offset!");
static_assert(offsetof(UWB_PvE_ScoreWindow_C, AJBImage_6) == 0x0002E0, "Member 'UWB_PvE_ScoreWindow_C::AJBImage_6' has a wrong offset!");
static_assert(offsetof(UWB_PvE_ScoreWindow_C, AJBImage_7) == 0x0002E8, "Member 'UWB_PvE_ScoreWindow_C::AJBImage_7' has a wrong offset!");
static_assert(offsetof(UWB_PvE_ScoreWindow_C, AJBImage_8) == 0x0002F0, "Member 'UWB_PvE_ScoreWindow_C::AJBImage_8' has a wrong offset!");
static_assert(offsetof(UWB_PvE_ScoreWindow_C, AJBImage_BarFlare) == 0x0002F8, "Member 'UWB_PvE_ScoreWindow_C::AJBImage_BarFlare' has a wrong offset!");
static_assert(offsetof(UWB_PvE_ScoreWindow_C, AJBImage_Belt_Purble) == 0x000300, "Member 'UWB_PvE_ScoreWindow_C::AJBImage_Belt_Purble' has a wrong offset!");
static_assert(offsetof(UWB_PvE_ScoreWindow_C, AJBImage_Belt_White) == 0x000308, "Member 'UWB_PvE_ScoreWindow_C::AJBImage_Belt_White' has a wrong offset!");
static_assert(offsetof(UWB_PvE_ScoreWindow_C, AJBImage_Flash) == 0x000310, "Member 'UWB_PvE_ScoreWindow_C::AJBImage_Flash' has a wrong offset!");
static_assert(offsetof(UWB_PvE_ScoreWindow_C, AJBText_ScoreValue) == 0x000318, "Member 'UWB_PvE_ScoreWindow_C::AJBText_ScoreValue' has a wrong offset!");
static_assert(offsetof(UWB_PvE_ScoreWindow_C, AJBTextBlock_1) == 0x000320, "Member 'UWB_PvE_ScoreWindow_C::AJBTextBlock_1' has a wrong offset!");
static_assert(offsetof(UWB_PvE_ScoreWindow_C, AJBTextBlock_2) == 0x000328, "Member 'UWB_PvE_ScoreWindow_C::AJBTextBlock_2' has a wrong offset!");
static_assert(offsetof(UWB_PvE_ScoreWindow_C, AJBTextBlock_3) == 0x000330, "Member 'UWB_PvE_ScoreWindow_C::AJBTextBlock_3' has a wrong offset!");
static_assert(offsetof(UWB_PvE_ScoreWindow_C, AJBTextBlock_476) == 0x000338, "Member 'UWB_PvE_ScoreWindow_C::AJBTextBlock_476' has a wrong offset!");
static_assert(offsetof(UWB_PvE_ScoreWindow_C, Overlay_ScoreRank_A) == 0x000340, "Member 'UWB_PvE_ScoreWindow_C::Overlay_ScoreRank_A' has a wrong offset!");
static_assert(offsetof(UWB_PvE_ScoreWindow_C, Overlay_ScoreRank_B) == 0x000348, "Member 'UWB_PvE_ScoreWindow_C::Overlay_ScoreRank_B' has a wrong offset!");
static_assert(offsetof(UWB_PvE_ScoreWindow_C, Overlay_ScoreRank_C) == 0x000350, "Member 'UWB_PvE_ScoreWindow_C::Overlay_ScoreRank_C' has a wrong offset!");
static_assert(offsetof(UWB_PvE_ScoreWindow_C, Overlay_ScoreRank_S) == 0x000358, "Member 'UWB_PvE_ScoreWindow_C::Overlay_ScoreRank_S' has a wrong offset!");
static_assert(offsetof(UWB_PvE_ScoreWindow_C, WB_CommonButton_Close) == 0x000360, "Member 'UWB_PvE_ScoreWindow_C::WB_CommonButton_Close' has a wrong offset!");
static_assert(offsetof(UWB_PvE_ScoreWindow_C, WB_PvE_ScoreWindow_Detail_0) == 0x000368, "Member 'UWB_PvE_ScoreWindow_C::WB_PvE_ScoreWindow_Detail_0' has a wrong offset!");
static_assert(offsetof(UWB_PvE_ScoreWindow_C, WB_PvE_ScoreWindow_Detail_1) == 0x000370, "Member 'UWB_PvE_ScoreWindow_C::WB_PvE_ScoreWindow_Detail_1' has a wrong offset!");
static_assert(offsetof(UWB_PvE_ScoreWindow_C, WB_PvE_ScoreWindow_Detail_2) == 0x000378, "Member 'UWB_PvE_ScoreWindow_C::WB_PvE_ScoreWindow_Detail_2' has a wrong offset!");
static_assert(offsetof(UWB_PvE_ScoreWindow_C, WB_WindowFrame) == 0x000380, "Member 'UWB_PvE_ScoreWindow_C::WB_WindowFrame' has a wrong offset!");
static_assert(offsetof(UWB_PvE_ScoreWindow_C, CachedResult) == 0x000388, "Member 'UWB_PvE_ScoreWindow_C::CachedResult' has a wrong offset!");
static_assert(offsetof(UWB_PvE_ScoreWindow_C, DBIVoiceDelayTime) == 0x0003A8, "Member 'UWB_PvE_ScoreWindow_C::DBIVoiceDelayTime' has a wrong offset!");
static_assert(offsetof(UWB_PvE_ScoreWindow_C, AutoClosingTimer) == 0x0003B0, "Member 'UWB_PvE_ScoreWindow_C::AutoClosingTimer' has a wrong offset!");
static_assert(offsetof(UWB_PvE_ScoreWindow_C, AutoClosingTime) == 0x0003B8, "Member 'UWB_PvE_ScoreWindow_C::AutoClosingTime' has a wrong offset!");

}

