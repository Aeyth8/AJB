#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPF_AJBPvEFunctionLibrary

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ST_AJBPvEScoreResult_structs.hpp"
#include "ST_AJBInGamePvE_DroppedItemTableRow_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "ST_AJBInGamePvE_EnemyInfo_structs.hpp"
#include "EPvEGameDifficulty_structs.hpp"
#include "ST_AJBInGamePvE_BossInfo_structs.hpp"
#include "E_AJBInGamePvE_GamePhase_structs.hpp"
#include "ST_AJBInGamePvE_DroppedItemKind_structs.hpp"


namespace SDK::Params
{

// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.GetAJBPvEGameState
// 0x0030 (0x0030 - 0x0000)
struct BPF_AJBPvEFunctionLibrary_C_GetAJBPvEGameState final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsValid;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBPvEGameState_C*                  BP_AJB_PvE_GameState;                              // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBPvEGameState_C*                  K2Node_DynamicCast_AsBP_AJBPv_EGame_State;         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBPvEFunctionLibrary_C_GetAJBPvEGameState) == 0x000008, "Wrong alignment on BPF_AJBPvEFunctionLibrary_C_GetAJBPvEGameState");
static_assert(sizeof(BPF_AJBPvEFunctionLibrary_C_GetAJBPvEGameState) == 0x000030, "Wrong size on BPF_AJBPvEFunctionLibrary_C_GetAJBPvEGameState");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetAJBPvEGameState, __WorldContext) == 0x000000, "Member 'BPF_AJBPvEFunctionLibrary_C_GetAJBPvEGameState::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetAJBPvEGameState, IsValid) == 0x000008, "Member 'BPF_AJBPvEFunctionLibrary_C_GetAJBPvEGameState::IsValid' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetAJBPvEGameState, BP_AJB_PvE_GameState) == 0x000010, "Member 'BPF_AJBPvEFunctionLibrary_C_GetAJBPvEGameState::BP_AJB_PvE_GameState' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetAJBPvEGameState, CallFunc_GetGameState_ReturnValue) == 0x000018, "Member 'BPF_AJBPvEFunctionLibrary_C_GetAJBPvEGameState::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetAJBPvEGameState, K2Node_DynamicCast_AsBP_AJBPv_EGame_State) == 0x000020, "Member 'BPF_AJBPvEFunctionLibrary_C_GetAJBPvEGameState::K2Node_DynamicCast_AsBP_AJBPv_EGame_State' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetAJBPvEGameState, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BPF_AJBPvEFunctionLibrary_C_GetAJBPvEGameState::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.IsPvENPC
// 0x0028 (0x0028 - 0x0000)
struct BPF_AJBPvEFunctionLibrary_C_IsPvENPC final
{
public:
	class AActor*                                 Object;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPvENPC_0;                                        // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPvEPlayMode_IsPvEPlayMode;              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacter*                    K2Node_DynamicCast_AsAJBIn_Game_Character;         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNPC_ReturnValue;                        // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBPvEFunctionLibrary_C_IsPvENPC) == 0x000008, "Wrong alignment on BPF_AJBPvEFunctionLibrary_C_IsPvENPC");
static_assert(sizeof(BPF_AJBPvEFunctionLibrary_C_IsPvENPC) == 0x000028, "Wrong size on BPF_AJBPvEFunctionLibrary_C_IsPvENPC");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_IsPvENPC, Object) == 0x000000, "Member 'BPF_AJBPvEFunctionLibrary_C_IsPvENPC::Object' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_IsPvENPC, __WorldContext) == 0x000008, "Member 'BPF_AJBPvEFunctionLibrary_C_IsPvENPC::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_IsPvENPC, IsPvENPC_0) == 0x000010, "Member 'BPF_AJBPvEFunctionLibrary_C_IsPvENPC::IsPvENPC_0' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_IsPvENPC, CallFunc_IsPvEPlayMode_IsPvEPlayMode) == 0x000011, "Member 'BPF_AJBPvEFunctionLibrary_C_IsPvENPC::CallFunc_IsPvEPlayMode_IsPvEPlayMode' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_IsPvENPC, K2Node_DynamicCast_AsAJBIn_Game_Character) == 0x000018, "Member 'BPF_AJBPvEFunctionLibrary_C_IsPvENPC::K2Node_DynamicCast_AsAJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_IsPvENPC, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BPF_AJBPvEFunctionLibrary_C_IsPvENPC::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_IsPvENPC, CallFunc_IsNPC_ReturnValue) == 0x000021, "Member 'BPF_AJBPvEFunctionLibrary_C_IsPvENPC::CallFunc_IsNPC_ReturnValue' has a wrong offset!");

// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.GetDroppedItemClassRandomly
// 0x00A8 (0x00A8 - 0x0000)
struct BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly final
{
public:
	EPvEGameDifficulty                            TargetDifficulty;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TargetWaveIndex;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ItemClass;                                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 DroppedItemProbabilities;                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	class UDataTable*                             DT_DroppedItemKind;                                // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_AJBInGamePvE_DroppedItemTableRow   CallFunc_FindDroppedItemTable_Out_Row;             // 0x0030(0x0020)(HasGetValueTypeHash)
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0050(0x0010)(ZeroConstructor, ReferenceParm)
	bool                                          CallFunc_GetRandomIndexWithProbability_IsHitItem;  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRandomIndexWithProbability_HitProbability; // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetRandomIndexWithProbability_HitItemIndex; // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_AJBInGamePvE_DroppedItemKind       CallFunc_GetDataTableRowFromName_OutRow;           // 0x0080(0x0008)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue1;                   // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue2;                   // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue3;                   // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue4;                   // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue5;                   // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly) == 0x000008, "Wrong alignment on BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly");
static_assert(sizeof(BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly) == 0x0000A8, "Wrong size on BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly, TargetDifficulty) == 0x000000, "Member 'BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly::TargetDifficulty' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly, TargetWaveIndex) == 0x000004, "Member 'BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly::TargetWaveIndex' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly, __WorldContext) == 0x000008, "Member 'BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly, ItemClass) == 0x000010, "Member 'BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly::ItemClass' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly, DroppedItemProbabilities) == 0x000018, "Member 'BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly::DroppedItemProbabilities' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly, DT_DroppedItemKind) == 0x000028, "Member 'BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly::DT_DroppedItemKind' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly, CallFunc_FindDroppedItemTable_Out_Row) == 0x000030, "Member 'BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly::CallFunc_FindDroppedItemTable_Out_Row' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000050, "Member 'BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly, CallFunc_GetRandomIndexWithProbability_IsHitItem) == 0x000060, "Member 'BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly::CallFunc_GetRandomIndexWithProbability_IsHitItem' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly, CallFunc_GetRandomIndexWithProbability_HitProbability) == 0x000064, "Member 'BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly::CallFunc_GetRandomIndexWithProbability_HitProbability' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly, CallFunc_GetRandomIndexWithProbability_HitItemIndex) == 0x000068, "Member 'BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly::CallFunc_GetRandomIndexWithProbability_HitItemIndex' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly, CallFunc_Array_Get_Item) == 0x000070, "Member 'BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly, CallFunc_Array_Add_ReturnValue) == 0x000078, "Member 'BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly, CallFunc_GetDataTableRowFromName_OutRow) == 0x000080, "Member 'BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000088, "Member 'BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly, CallFunc_Array_Add_ReturnValue1) == 0x00008C, "Member 'BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly::CallFunc_Array_Add_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly, CallFunc_Array_Add_ReturnValue2) == 0x000090, "Member 'BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly::CallFunc_Array_Add_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly, CallFunc_Array_Add_ReturnValue3) == 0x000094, "Member 'BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly::CallFunc_Array_Add_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly, CallFunc_Array_Add_ReturnValue4) == 0x000098, "Member 'BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly::CallFunc_Array_Add_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly, CallFunc_Array_Add_ReturnValue5) == 0x00009C, "Member 'BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly::CallFunc_Array_Add_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0000A0, "Member 'BPF_AJBPvEFunctionLibrary_C_GetDroppedItemClassRandomly::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.FindDroppedItemTable
// 0x0090 (0x0090 - 0x0000)
struct BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable final
{
public:
	EPvEGameDifficulty                            TargetDifficulty;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TargetWaveIndex;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_AJBInGamePvE_DroppedItemTableRow   Out_Row;                                           // 0x0010(0x0020)(Parm, OutParm, HasGetValueTypeHash)
	class UDataTable*                             DT_DroppedItemTable;                               // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0048(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_AJBInGamePvE_DroppedItemTableRow   CallFunc_GetDataTableRowFromName_OutRow;           // 0x006C(0x0020)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x008E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x008F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable) == 0x000008, "Wrong alignment on BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable");
static_assert(sizeof(BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable) == 0x000090, "Wrong size on BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable, TargetDifficulty) == 0x000000, "Member 'BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable::TargetDifficulty' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable, TargetWaveIndex) == 0x000004, "Member 'BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable::TargetWaveIndex' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable, __WorldContext) == 0x000008, "Member 'BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable, Out_Row) == 0x000010, "Member 'BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable::Out_Row' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable, DT_DroppedItemTable) == 0x000030, "Member 'BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable::DT_DroppedItemTable' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable, Temp_int_Array_Index_Variable) == 0x000038, "Member 'BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000048, "Member 'BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable, CallFunc_Array_Get_Item) == 0x000060, "Member 'BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member 'BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable, CallFunc_GetDataTableRowFromName_OutRow) == 0x00006C, "Member 'BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x00008C, "Member 'BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00008D, "Member 'BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00008E, "Member 'BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable, CallFunc_BooleanAND_ReturnValue) == 0x00008F, "Member 'BPF_AJBPvEFunctionLibrary_C_FindDroppedItemTable::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.GetRandomIndexWithProbability
// 0x0228 (0x0228 - 0x0000)
struct BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability final
{
public:
	TArray<float>                                 Probabilities;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	float                                         MaxProbability;                                    // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHitItem;                                         // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HitProbability;                                    // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HitItemIndex;                                      // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HitIndex;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitRandomProbability;                              // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempCumsum;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 ProbabilitiesCumsum;                               // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0050(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData1;             // 0x0090(0x0040)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Debug_GetOrDefaults_Float_ReturnValue;    // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item;                           // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData2;             // 0x00E0(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_BoolToText_ReturnValue;              // 0x0128(0x0018)()
	float                                         CallFunc_Array_Get_Item1;                          // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData3;             // 0x0148(0x0040)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0190(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x01A0(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x01B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item2;                          // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable1;                    // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue1;          // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D1[0x3];                                      // 0x01D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Array_Get_Item3;                          // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x01D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue2;          // 0x01DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1DB[0x1];                                      // 0x01DB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue1;             // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E1[0x3];                                      // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Array_Get_Item4;                          // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue1;             // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item5;                          // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FD[0x3];                                      // 0x01FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0204(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0205(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_206[0x2];                                      // 0x0206(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable1;                   // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue1;                 // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_211[0x3];                                      // 0x0211(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0218(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1;                   // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue2;                   // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability) == 0x000008, "Wrong alignment on BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability");
static_assert(sizeof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability) == 0x000228, "Wrong size on BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, Probabilities) == 0x000000, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::Probabilities' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, MaxProbability) == 0x000010, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::MaxProbability' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, __WorldContext) == 0x000018, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, IsHitItem) == 0x000020, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::IsHitItem' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, HitProbability) == 0x000024, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::HitProbability' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, HitItemIndex) == 0x000028, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::HitItemIndex' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, HitIndex) == 0x00002C, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::HitIndex' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, HitRandomProbability) == 0x000030, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::HitRandomProbability' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, TempCumsum) == 0x000034, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::TempCumsum' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, ProbabilitiesCumsum) == 0x000038, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::ProbabilitiesCumsum' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, Temp_int_Array_Index_Variable) == 0x000048, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, Temp_bool_True_if_break_was_hit_Variable) == 0x00004C, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, CallFunc_Not_PreBool_ReturnValue) == 0x00004D, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, K2Node_MakeStruct_FormatArgumentData) == 0x000050, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, K2Node_MakeStruct_FormatArgumentData1) == 0x000090, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::K2Node_MakeStruct_FormatArgumentData1' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, CallFunc_Array_LastIndex_ReturnValue) == 0x0000D0, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, CallFunc_Debug_GetOrDefaults_Float_ReturnValue) == 0x0000D4, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::CallFunc_Debug_GetOrDefaults_Float_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, CallFunc_Array_Get_Item) == 0x0000D8, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, K2Node_MakeStruct_FormatArgumentData2) == 0x0000E0, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::K2Node_MakeStruct_FormatArgumentData2' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000120, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, CallFunc_Conv_BoolToText_ReturnValue) == 0x000128, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::CallFunc_Conv_BoolToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, CallFunc_Array_Get_Item1) == 0x000140, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, K2Node_MakeStruct_FormatArgumentData3) == 0x000148, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::K2Node_MakeStruct_FormatArgumentData3' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, CallFunc_Array_Length_ReturnValue) == 0x000188, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, K2Node_MakeArray_Array) == 0x000190, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, CallFunc_Format_ReturnValue) == 0x0001A0, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, CallFunc_Conv_TextToString_ReturnValue) == 0x0001B8, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, CallFunc_Array_Get_Item2) == 0x0001C8, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::CallFunc_Array_Get_Item2' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, Temp_int_Array_Index_Variable1) == 0x0001CC, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::Temp_int_Array_Index_Variable1' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, CallFunc_Array_IsValidIndex_ReturnValue1) == 0x0001D0, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::CallFunc_Array_IsValidIndex_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, CallFunc_Array_Get_Item3) == 0x0001D4, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::CallFunc_Array_Get_Item3' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, CallFunc_Less_FloatFloat_ReturnValue) == 0x0001D8, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x0001D9, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, CallFunc_Array_IsValidIndex_ReturnValue2) == 0x0001DA, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::CallFunc_Array_IsValidIndex_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, CallFunc_Array_Add_ReturnValue) == 0x0001DC, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, CallFunc_Less_FloatFloat_ReturnValue1) == 0x0001E0, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::CallFunc_Less_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, CallFunc_Array_Get_Item4) == 0x0001E4, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::CallFunc_Array_Get_Item4' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, CallFunc_Array_Length_ReturnValue1) == 0x0001E8, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, CallFunc_Add_FloatFloat_ReturnValue) == 0x0001EC, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, Temp_int_Loop_Counter_Variable) == 0x0001F0, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, CallFunc_Array_LastIndex_ReturnValue1) == 0x0001F4, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::CallFunc_Array_LastIndex_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, CallFunc_Array_Get_Item5) == 0x0001F8, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::CallFunc_Array_Get_Item5' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, CallFunc_Less_IntInt_ReturnValue) == 0x0001FC, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, CallFunc_RandomFloatInRange_ReturnValue) == 0x000200, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, CallFunc_BooleanAND_ReturnValue) == 0x000204, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000205, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, CallFunc_Add_IntInt_ReturnValue) == 0x000208, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, Temp_int_Loop_Counter_Variable1) == 0x00020C, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::Temp_int_Loop_Counter_Variable1' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, CallFunc_Less_IntInt_ReturnValue1) == 0x000210, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::CallFunc_Less_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, CallFunc_Add_IntInt_ReturnValue1) == 0x000214, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, Temp_float_Variable) == 0x000218, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, CallFunc_Array_Add_ReturnValue1) == 0x00021C, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::CallFunc_Array_Add_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability, CallFunc_Array_Add_ReturnValue2) == 0x000220, "Member 'BPF_AJBPvEFunctionLibrary_C_GetRandomIndexWithProbability::CallFunc_Array_Add_ReturnValue2' has a wrong offset!");

// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.TerminateNPC
// 0x0020 (0x0020 - 0x0000)
struct BPF_AJBPvEFunctionLibrary_C_TerminateNPC final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBInGameCharacter*                    K2Node_DynamicCast_AsAJBIn_Game_Character;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNPC_ReturnValue;                        // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBPvEFunctionLibrary_C_TerminateNPC) == 0x000008, "Wrong alignment on BPF_AJBPvEFunctionLibrary_C_TerminateNPC");
static_assert(sizeof(BPF_AJBPvEFunctionLibrary_C_TerminateNPC) == 0x000020, "Wrong size on BPF_AJBPvEFunctionLibrary_C_TerminateNPC");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_TerminateNPC, Target) == 0x000000, "Member 'BPF_AJBPvEFunctionLibrary_C_TerminateNPC::Target' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_TerminateNPC, __WorldContext) == 0x000008, "Member 'BPF_AJBPvEFunctionLibrary_C_TerminateNPC::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_TerminateNPC, K2Node_DynamicCast_AsAJBIn_Game_Character) == 0x000010, "Member 'BPF_AJBPvEFunctionLibrary_C_TerminateNPC::K2Node_DynamicCast_AsAJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_TerminateNPC, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BPF_AJBPvEFunctionLibrary_C_TerminateNPC::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_TerminateNPC, CallFunc_IsNPC_ReturnValue) == 0x000019, "Member 'BPF_AJBPvEFunctionLibrary_C_TerminateNPC::CallFunc_IsNPC_ReturnValue' has a wrong offset!");

// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.SuspendDeadNPC
// 0x0078 (0x0078 - 0x0000)
struct BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBBattleGameMode_C*                K2Node_DynamicCast_AsBP_AJBBattle_Game_Mode;       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UBP_AJBCloseRangeSkill_C*>       CallFunc_GetComponentsByClass_ReturnValue;         // 0x0048(0x0010)(ZeroConstructor, ReferenceParm)
	class UBP_AJBCloseRangeSkill_C*               CallFunc_Array_Get_Item;                           // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAlive_IsAlive;                          // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC) == 0x000008, "Wrong alignment on BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC");
static_assert(sizeof(BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC) == 0x000078, "Wrong size on BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC, Target) == 0x000000, "Member 'BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC::Target' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC, __WorldContext) == 0x000008, "Member 'BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC, CallFunc_GetGameMode_ReturnValue) == 0x000018, "Member 'BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC, K2Node_DynamicCast_AsBP_AJBBattle_Game_Mode) == 0x000028, "Member 'BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC::K2Node_DynamicCast_AsBP_AJBBattle_Game_Mode' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000038, "Member 'BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC, K2Node_DynamicCast_bSuccess1) == 0x000040, "Member 'BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC, Temp_int_Array_Index_Variable) == 0x000044, "Member 'BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC, CallFunc_GetComponentsByClass_ReturnValue) == 0x000048, "Member 'BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC::CallFunc_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC, CallFunc_Array_Get_Item) == 0x000058, "Member 'BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC, CallFunc_Less_IntInt_ReturnValue) == 0x000064, "Member 'BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC, CallFunc_IsValid_ReturnValue) == 0x000065, "Member 'BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC, CallFunc_GetController_ReturnValue) == 0x000068, "Member 'BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC, CallFunc_IsAlive_IsAlive) == 0x000070, "Member 'BPF_AJBPvEFunctionLibrary_C_SuspendDeadNPC::CallFunc_IsAlive_IsAlive' has a wrong offset!");

// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.GetDelayedCleaningNPCTime
// 0x0010 (0x0010 - 0x0000)
struct BPF_AJBPvEFunctionLibrary_C_GetDelayedCleaningNPCTime final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DelayedTime;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_AJBPvEFunctionLibrary_C_GetDelayedCleaningNPCTime) == 0x000008, "Wrong alignment on BPF_AJBPvEFunctionLibrary_C_GetDelayedCleaningNPCTime");
static_assert(sizeof(BPF_AJBPvEFunctionLibrary_C_GetDelayedCleaningNPCTime) == 0x000010, "Wrong size on BPF_AJBPvEFunctionLibrary_C_GetDelayedCleaningNPCTime");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetDelayedCleaningNPCTime, __WorldContext) == 0x000000, "Member 'BPF_AJBPvEFunctionLibrary_C_GetDelayedCleaningNPCTime::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetDelayedCleaningNPCTime, DelayedTime) == 0x000008, "Member 'BPF_AJBPvEFunctionLibrary_C_GetDelayedCleaningNPCTime::DelayedTime' has a wrong offset!");

// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.SetPvEDifficulty
// 0x0020 (0x0020 - 0x0000)
struct BPF_AJBPvEFunctionLibrary_C_SetPvEDifficulty final
{
public:
	EPvEGameDifficulty                            NewDifficulty;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBGameInstance_bSuccess;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBGameInstance_C*                  CallFunc_GetAJBGameInstance_AJB_Game_Instance;     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_AJBPvEFunctionLibrary_C_SetPvEDifficulty) == 0x000008, "Wrong alignment on BPF_AJBPvEFunctionLibrary_C_SetPvEDifficulty");
static_assert(sizeof(BPF_AJBPvEFunctionLibrary_C_SetPvEDifficulty) == 0x000020, "Wrong size on BPF_AJBPvEFunctionLibrary_C_SetPvEDifficulty");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_SetPvEDifficulty, NewDifficulty) == 0x000000, "Member 'BPF_AJBPvEFunctionLibrary_C_SetPvEDifficulty::NewDifficulty' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_SetPvEDifficulty, __WorldContext) == 0x000008, "Member 'BPF_AJBPvEFunctionLibrary_C_SetPvEDifficulty::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_SetPvEDifficulty, CallFunc_GetAJBGameInstance_bSuccess) == 0x000010, "Member 'BPF_AJBPvEFunctionLibrary_C_SetPvEDifficulty::CallFunc_GetAJBGameInstance_bSuccess' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_SetPvEDifficulty, CallFunc_GetAJBGameInstance_AJB_Game_Instance) == 0x000018, "Member 'BPF_AJBPvEFunctionLibrary_C_SetPvEDifficulty::CallFunc_GetAJBGameInstance_AJB_Game_Instance' has a wrong offset!");

// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.GetPvEDifficulty
// 0x0020 (0x0020 - 0x0000)
struct BPF_AJBPvEFunctionLibrary_C_GetPvEDifficulty final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            Difficulty;                                        // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBPvEGameState_IsValid;               // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBPvEGameState_C*                  CallFunc_GetAJBPvEGameState_BP_AJB_PvE_GameState;  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            CallFunc_GetDifficulty_Difficulty;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_AJBPvEFunctionLibrary_C_GetPvEDifficulty) == 0x000008, "Wrong alignment on BPF_AJBPvEFunctionLibrary_C_GetPvEDifficulty");
static_assert(sizeof(BPF_AJBPvEFunctionLibrary_C_GetPvEDifficulty) == 0x000020, "Wrong size on BPF_AJBPvEFunctionLibrary_C_GetPvEDifficulty");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEDifficulty, __WorldContext) == 0x000000, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEDifficulty::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEDifficulty, Difficulty) == 0x000008, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEDifficulty::Difficulty' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEDifficulty, CallFunc_GetAJBPvEGameState_IsValid) == 0x000009, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEDifficulty::CallFunc_GetAJBPvEGameState_IsValid' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEDifficulty, CallFunc_GetAJBPvEGameState_BP_AJB_PvE_GameState) == 0x000010, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEDifficulty::CallFunc_GetAJBPvEGameState_BP_AJB_PvE_GameState' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEDifficulty, CallFunc_GetDifficulty_Difficulty) == 0x000018, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEDifficulty::CallFunc_GetDifficulty_Difficulty' has a wrong offset!");

// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.GetAILevelForPvE
// 0x0018 (0x0018 - 0x0000)
struct BPF_AJBPvEFunctionLibrary_C_GetAILevelForPvE final
{
public:
	EPvEGameDifficulty                            Difficulty;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         AI_Level;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            Temp_byte_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Temp_byte_Variable1;                               // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Temp_byte_Variable2;                               // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Temp_byte_Variable3;                               // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Temp_byte_Variable4;                               // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_Select_Default;                             // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_AJBPvEFunctionLibrary_C_GetAILevelForPvE) == 0x000008, "Wrong alignment on BPF_AJBPvEFunctionLibrary_C_GetAILevelForPvE");
static_assert(sizeof(BPF_AJBPvEFunctionLibrary_C_GetAILevelForPvE) == 0x000018, "Wrong size on BPF_AJBPvEFunctionLibrary_C_GetAILevelForPvE");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetAILevelForPvE, Difficulty) == 0x000000, "Member 'BPF_AJBPvEFunctionLibrary_C_GetAILevelForPvE::Difficulty' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetAILevelForPvE, __WorldContext) == 0x000008, "Member 'BPF_AJBPvEFunctionLibrary_C_GetAILevelForPvE::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetAILevelForPvE, AI_Level) == 0x000010, "Member 'BPF_AJBPvEFunctionLibrary_C_GetAILevelForPvE::AI_Level' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetAILevelForPvE, Temp_byte_Variable) == 0x000011, "Member 'BPF_AJBPvEFunctionLibrary_C_GetAILevelForPvE::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetAILevelForPvE, Temp_byte_Variable1) == 0x000012, "Member 'BPF_AJBPvEFunctionLibrary_C_GetAILevelForPvE::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetAILevelForPvE, Temp_byte_Variable2) == 0x000013, "Member 'BPF_AJBPvEFunctionLibrary_C_GetAILevelForPvE::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetAILevelForPvE, Temp_byte_Variable3) == 0x000014, "Member 'BPF_AJBPvEFunctionLibrary_C_GetAILevelForPvE::Temp_byte_Variable3' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetAILevelForPvE, Temp_byte_Variable4) == 0x000015, "Member 'BPF_AJBPvEFunctionLibrary_C_GetAILevelForPvE::Temp_byte_Variable4' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetAILevelForPvE, K2Node_Select_Default) == 0x000016, "Member 'BPF_AJBPvEFunctionLibrary_C_GetAILevelForPvE::K2Node_Select_Default' has a wrong offset!");

// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.CastPvEDifficultyNumToEnum
// 0x0020 (0x0020 - 0x0000)
struct BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyNumToEnum final
{
public:
	int32                                         DifficultyNum;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            Difficulty;                                        // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_IntInt_ReturnValue;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPvEGameDifficulty                            Temp_byte_Variable;                                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            Temp_byte_Variable1;                               // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            Temp_byte_Variable2;                               // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            Temp_byte_Variable3;                               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            Temp_byte_Variable4;                               // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            K2Node_Select_Default;                             // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyNumToEnum) == 0x000008, "Wrong alignment on BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyNumToEnum");
static_assert(sizeof(BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyNumToEnum) == 0x000020, "Wrong size on BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyNumToEnum");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyNumToEnum, DifficultyNum) == 0x000000, "Member 'BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyNumToEnum::DifficultyNum' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyNumToEnum, __WorldContext) == 0x000008, "Member 'BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyNumToEnum::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyNumToEnum, Difficulty) == 0x000010, "Member 'BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyNumToEnum::Difficulty' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyNumToEnum, Temp_int_Variable) == 0x000014, "Member 'BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyNumToEnum::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyNumToEnum, CallFunc_InRange_IntInt_ReturnValue) == 0x000018, "Member 'BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyNumToEnum::CallFunc_InRange_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyNumToEnum, Temp_byte_Variable) == 0x000019, "Member 'BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyNumToEnum::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyNumToEnum, Temp_byte_Variable1) == 0x00001A, "Member 'BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyNumToEnum::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyNumToEnum, Temp_byte_Variable2) == 0x00001B, "Member 'BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyNumToEnum::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyNumToEnum, Temp_byte_Variable3) == 0x00001C, "Member 'BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyNumToEnum::Temp_byte_Variable3' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyNumToEnum, Temp_byte_Variable4) == 0x00001D, "Member 'BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyNumToEnum::Temp_byte_Variable4' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyNumToEnum, K2Node_Select_Default) == 0x00001E, "Member 'BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyNumToEnum::K2Node_Select_Default' has a wrong offset!");

// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.CastPvEDifficultyToNum
// 0x0030 (0x0030 - 0x0000)
struct BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyToNum final
{
public:
	EPvEGameDifficulty                            Difficulty;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DifficultyNum;                                     // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            Temp_byte_Variable;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable1;                                // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable2;                                // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable3;                                // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyToNum) == 0x000008, "Wrong alignment on BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyToNum");
static_assert(sizeof(BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyToNum) == 0x000030, "Wrong size on BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyToNum");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyToNum, Difficulty) == 0x000000, "Member 'BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyToNum::Difficulty' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyToNum, __WorldContext) == 0x000008, "Member 'BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyToNum::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyToNum, DifficultyNum) == 0x000010, "Member 'BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyToNum::DifficultyNum' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyToNum, Temp_byte_Variable) == 0x000014, "Member 'BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyToNum::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyToNum, Temp_int_Variable) == 0x000018, "Member 'BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyToNum::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyToNum, Temp_int_Variable1) == 0x00001C, "Member 'BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyToNum::Temp_int_Variable1' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyToNum, Temp_int_Variable2) == 0x000020, "Member 'BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyToNum::Temp_int_Variable2' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyToNum, Temp_int_Variable3) == 0x000024, "Member 'BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyToNum::Temp_int_Variable3' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyToNum, K2Node_Select_Default) == 0x000028, "Member 'BPF_AJBPvEFunctionLibrary_C_CastPvEDifficultyToNum::K2Node_Select_Default' has a wrong offset!");

// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.GetPvECurrentPhase
// 0x0020 (0x0020 - 0x0000)
struct BPF_AJBPvEFunctionLibrary_C_GetPvECurrentPhase final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AJBInGamePvE_GamePhase                      CurrentPhase;                                      // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGamePvE_PhaseManager_C*        CallFunc_GetPvEPhaseManager_PhaseManager;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AJBInGamePvE_GamePhase                      CallFunc_GetCurrentPhase_CurrentPhase;             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_AJBPvEFunctionLibrary_C_GetPvECurrentPhase) == 0x000008, "Wrong alignment on BPF_AJBPvEFunctionLibrary_C_GetPvECurrentPhase");
static_assert(sizeof(BPF_AJBPvEFunctionLibrary_C_GetPvECurrentPhase) == 0x000020, "Wrong size on BPF_AJBPvEFunctionLibrary_C_GetPvECurrentPhase");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvECurrentPhase, __WorldContext) == 0x000000, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvECurrentPhase::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvECurrentPhase, CurrentPhase) == 0x000008, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvECurrentPhase::CurrentPhase' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvECurrentPhase, CallFunc_GetPvEPhaseManager_PhaseManager) == 0x000010, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvECurrentPhase::CallFunc_GetPvEPhaseManager_PhaseManager' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvECurrentPhase, CallFunc_GetCurrentPhase_CurrentPhase) == 0x000018, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvECurrentPhase::CallFunc_GetCurrentPhase_CurrentPhase' has a wrong offset!");

// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.IsEnabledToSpawnEnemy
// 0x0010 (0x0010 - 0x0000)
struct BPF_AJBPvEFunctionLibrary_C_IsEnabledToSpawnEnemy final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnabled;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_AJBInGamePvE_GamePhase                      CallFunc_GetPvECurrentPhase_CurrentPhase;          // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBPvEFunctionLibrary_C_IsEnabledToSpawnEnemy) == 0x000008, "Wrong alignment on BPF_AJBPvEFunctionLibrary_C_IsEnabledToSpawnEnemy");
static_assert(sizeof(BPF_AJBPvEFunctionLibrary_C_IsEnabledToSpawnEnemy) == 0x000010, "Wrong size on BPF_AJBPvEFunctionLibrary_C_IsEnabledToSpawnEnemy");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_IsEnabledToSpawnEnemy, __WorldContext) == 0x000000, "Member 'BPF_AJBPvEFunctionLibrary_C_IsEnabledToSpawnEnemy::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_IsEnabledToSpawnEnemy, IsEnabled) == 0x000008, "Member 'BPF_AJBPvEFunctionLibrary_C_IsEnabledToSpawnEnemy::IsEnabled' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_IsEnabledToSpawnEnemy, CallFunc_GetPvECurrentPhase_CurrentPhase) == 0x000009, "Member 'BPF_AJBPvEFunctionLibrary_C_IsEnabledToSpawnEnemy::CallFunc_GetPvECurrentPhase_CurrentPhase' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_IsEnabledToSpawnEnemy, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00000A, "Member 'BPF_AJBPvEFunctionLibrary_C_IsEnabledToSpawnEnemy::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.HasPvEGameFinished
// 0x0030 (0x0030 - 0x0000)
struct BPF_AJBPvEFunctionLibrary_C_HasPvEGameFinished final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasFinished;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_AJBInGamePvE_PhaseManager_C*> CallFunc_GetAllActorsOfClass_OutActors;           // 0x0010(0x0010)(ZeroConstructor, ReferenceParm)
	class ABP_AJBInGamePvE_PhaseManager_C*        CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAllPhaseFinished_HasFinished;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBPvEFunctionLibrary_C_HasPvEGameFinished) == 0x000008, "Wrong alignment on BPF_AJBPvEFunctionLibrary_C_HasPvEGameFinished");
static_assert(sizeof(BPF_AJBPvEFunctionLibrary_C_HasPvEGameFinished) == 0x000030, "Wrong size on BPF_AJBPvEFunctionLibrary_C_HasPvEGameFinished");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_HasPvEGameFinished, __WorldContext) == 0x000000, "Member 'BPF_AJBPvEFunctionLibrary_C_HasPvEGameFinished::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_HasPvEGameFinished, HasFinished) == 0x000008, "Member 'BPF_AJBPvEFunctionLibrary_C_HasPvEGameFinished::HasFinished' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_HasPvEGameFinished, CallFunc_GetAllActorsOfClass_OutActors) == 0x000010, "Member 'BPF_AJBPvEFunctionLibrary_C_HasPvEGameFinished::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_HasPvEGameFinished, CallFunc_Array_Get_Item) == 0x000020, "Member 'BPF_AJBPvEFunctionLibrary_C_HasPvEGameFinished::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_HasPvEGameFinished, CallFunc_HasAllPhaseFinished_HasFinished) == 0x000028, "Member 'BPF_AJBPvEFunctionLibrary_C_HasPvEGameFinished::CallFunc_HasAllPhaseFinished_HasFinished' has a wrong offset!");

// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.IsPvELastWave
// 0x0020 (0x0020 - 0x0000)
struct BPF_AJBPvEFunctionLibrary_C_IsPvELastWave final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLastWave;                                        // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGamePvE_PhaseManager_C*        CallFunc_GetPvEPhaseManager_PhaseManager;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLastWave_IsLastWave;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBPvEFunctionLibrary_C_IsPvELastWave) == 0x000008, "Wrong alignment on BPF_AJBPvEFunctionLibrary_C_IsPvELastWave");
static_assert(sizeof(BPF_AJBPvEFunctionLibrary_C_IsPvELastWave) == 0x000020, "Wrong size on BPF_AJBPvEFunctionLibrary_C_IsPvELastWave");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_IsPvELastWave, __WorldContext) == 0x000000, "Member 'BPF_AJBPvEFunctionLibrary_C_IsPvELastWave::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_IsPvELastWave, IsLastWave) == 0x000008, "Member 'BPF_AJBPvEFunctionLibrary_C_IsPvELastWave::IsLastWave' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_IsPvELastWave, CallFunc_GetPvEPhaseManager_PhaseManager) == 0x000010, "Member 'BPF_AJBPvEFunctionLibrary_C_IsPvELastWave::CallFunc_GetPvEPhaseManager_PhaseManager' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_IsPvELastWave, CallFunc_IsLastWave_IsLastWave) == 0x000018, "Member 'BPF_AJBPvEFunctionLibrary_C_IsPvELastWave::CallFunc_IsLastWave_IsLastWave' has a wrong offset!");

// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.GetPvECurrentWaveIndex
// 0x0030 (0x0030 - 0x0000)
struct BPF_AJBPvEFunctionLibrary_C_GetPvECurrentWaveIndex final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WaveIndex;                                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_AJBInGamePvE_PhaseManager_C*> CallFunc_GetAllActorsOfClass_OutActors;           // 0x0010(0x0010)(ZeroConstructor, ReferenceParm)
	class ABP_AJBInGamePvE_PhaseManager_C*        CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCurrentWaveIndex_WaveIndex;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_AJBPvEFunctionLibrary_C_GetPvECurrentWaveIndex) == 0x000008, "Wrong alignment on BPF_AJBPvEFunctionLibrary_C_GetPvECurrentWaveIndex");
static_assert(sizeof(BPF_AJBPvEFunctionLibrary_C_GetPvECurrentWaveIndex) == 0x000030, "Wrong size on BPF_AJBPvEFunctionLibrary_C_GetPvECurrentWaveIndex");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvECurrentWaveIndex, __WorldContext) == 0x000000, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvECurrentWaveIndex::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvECurrentWaveIndex, WaveIndex) == 0x000008, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvECurrentWaveIndex::WaveIndex' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvECurrentWaveIndex, CallFunc_GetAllActorsOfClass_OutActors) == 0x000010, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvECurrentWaveIndex::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvECurrentWaveIndex, CallFunc_Array_Get_Item) == 0x000020, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvECurrentWaveIndex::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvECurrentWaveIndex, CallFunc_GetCurrentWaveIndex_WaveIndex) == 0x000028, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvECurrentWaveIndex::CallFunc_GetCurrentWaveIndex_WaveIndex' has a wrong offset!");

// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.GetPvELastWaveIndex
// 0x0030 (0x0030 - 0x0000)
struct BPF_AJBPvEFunctionLibrary_C_GetPvELastWaveIndex final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LastWaveIndex;                                     // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_AJBInGamePvE_PhaseManager_C*> CallFunc_GetAllActorsOfClass_OutActors;           // 0x0010(0x0010)(ZeroConstructor, ReferenceParm)
	class ABP_AJBInGamePvE_PhaseManager_C*        CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMaxWaveCount_MaxWaveCount;             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_AJBPvEFunctionLibrary_C_GetPvELastWaveIndex) == 0x000008, "Wrong alignment on BPF_AJBPvEFunctionLibrary_C_GetPvELastWaveIndex");
static_assert(sizeof(BPF_AJBPvEFunctionLibrary_C_GetPvELastWaveIndex) == 0x000030, "Wrong size on BPF_AJBPvEFunctionLibrary_C_GetPvELastWaveIndex");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvELastWaveIndex, __WorldContext) == 0x000000, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvELastWaveIndex::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvELastWaveIndex, LastWaveIndex) == 0x000008, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvELastWaveIndex::LastWaveIndex' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvELastWaveIndex, CallFunc_GetAllActorsOfClass_OutActors) == 0x000010, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvELastWaveIndex::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvELastWaveIndex, CallFunc_Array_Get_Item) == 0x000020, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvELastWaveIndex::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvELastWaveIndex, CallFunc_GetMaxWaveCount_MaxWaveCount) == 0x000028, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvELastWaveIndex::CallFunc_GetMaxWaveCount_MaxWaveCount' has a wrong offset!");

// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.GetAJBInGamePvEHUD
// 0x0038 (0x0038 - 0x0000)
struct BPF_AJBPvEFunctionLibrary_C_GetAJBInGamePvEHUD final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGamePvEHUD_C*                  InGamePvEHUD;                                      // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBInGameHUD_BP_bSuccess;              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameHUD_C*                     CallFunc_GetAJBInGameHUD_BP_In_Game_HUD;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGamePvEHUD_C*                  K2Node_DynamicCast_AsBP_AJBIn_Game_Pv_EHUD;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBPvEFunctionLibrary_C_GetAJBInGamePvEHUD) == 0x000008, "Wrong alignment on BPF_AJBPvEFunctionLibrary_C_GetAJBInGamePvEHUD");
static_assert(sizeof(BPF_AJBPvEFunctionLibrary_C_GetAJBInGamePvEHUD) == 0x000038, "Wrong size on BPF_AJBPvEFunctionLibrary_C_GetAJBInGamePvEHUD");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetAJBInGamePvEHUD, __WorldContext) == 0x000000, "Member 'BPF_AJBPvEFunctionLibrary_C_GetAJBInGamePvEHUD::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetAJBInGamePvEHUD, bSuccess) == 0x000008, "Member 'BPF_AJBPvEFunctionLibrary_C_GetAJBInGamePvEHUD::bSuccess' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetAJBInGamePvEHUD, InGamePvEHUD) == 0x000010, "Member 'BPF_AJBPvEFunctionLibrary_C_GetAJBInGamePvEHUD::InGamePvEHUD' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetAJBInGamePvEHUD, CallFunc_GetAJBInGameHUD_BP_bSuccess) == 0x000018, "Member 'BPF_AJBPvEFunctionLibrary_C_GetAJBInGamePvEHUD::CallFunc_GetAJBInGameHUD_BP_bSuccess' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetAJBInGamePvEHUD, CallFunc_GetAJBInGameHUD_BP_In_Game_HUD) == 0x000020, "Member 'BPF_AJBPvEFunctionLibrary_C_GetAJBInGamePvEHUD::CallFunc_GetAJBInGameHUD_BP_In_Game_HUD' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetAJBInGamePvEHUD, K2Node_DynamicCast_AsBP_AJBIn_Game_Pv_EHUD) == 0x000028, "Member 'BPF_AJBPvEFunctionLibrary_C_GetAJBInGamePvEHUD::K2Node_DynamicCast_AsBP_AJBIn_Game_Pv_EHUD' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetAJBInGamePvEHUD, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BPF_AJBPvEFunctionLibrary_C_GetAJBInGamePvEHUD::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.GetPvEScoreRankDBIVoiceTag
// 0x0068 (0x0068 - 0x0000)
struct BPF_AJBPvEFunctionLibrary_C_GetPvEScoreRankDBIVoiceTag final
{
public:
	struct FST_AJBPvEScoreResult                  Result;                                            // 0x0000(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           VoiceTag;                                          // 0x0028(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Temp_struct_Variable;                              // 0x0038(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_IntInt_ReturnValue;               // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Temp_struct_Variable1;                             // 0x0048(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable2;                             // 0x0050(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable3;                             // 0x0058(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Select_Default;                             // 0x0060(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_AJBPvEFunctionLibrary_C_GetPvEScoreRankDBIVoiceTag) == 0x000008, "Wrong alignment on BPF_AJBPvEFunctionLibrary_C_GetPvEScoreRankDBIVoiceTag");
static_assert(sizeof(BPF_AJBPvEFunctionLibrary_C_GetPvEScoreRankDBIVoiceTag) == 0x000068, "Wrong size on BPF_AJBPvEFunctionLibrary_C_GetPvEScoreRankDBIVoiceTag");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEScoreRankDBIVoiceTag, Result) == 0x000000, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEScoreRankDBIVoiceTag::Result' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEScoreRankDBIVoiceTag, __WorldContext) == 0x000020, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEScoreRankDBIVoiceTag::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEScoreRankDBIVoiceTag, VoiceTag) == 0x000028, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEScoreRankDBIVoiceTag::VoiceTag' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEScoreRankDBIVoiceTag, Temp_int_Variable) == 0x000030, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEScoreRankDBIVoiceTag::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEScoreRankDBIVoiceTag, Temp_struct_Variable) == 0x000038, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEScoreRankDBIVoiceTag::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEScoreRankDBIVoiceTag, CallFunc_InRange_IntInt_ReturnValue) == 0x000040, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEScoreRankDBIVoiceTag::CallFunc_InRange_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEScoreRankDBIVoiceTag, Temp_struct_Variable1) == 0x000048, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEScoreRankDBIVoiceTag::Temp_struct_Variable1' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEScoreRankDBIVoiceTag, Temp_struct_Variable2) == 0x000050, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEScoreRankDBIVoiceTag::Temp_struct_Variable2' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEScoreRankDBIVoiceTag, Temp_struct_Variable3) == 0x000058, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEScoreRankDBIVoiceTag::Temp_struct_Variable3' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEScoreRankDBIVoiceTag, K2Node_Select_Default) == 0x000060, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEScoreRankDBIVoiceTag::K2Node_Select_Default' has a wrong offset!");

// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.GetPvEBeginWaveDBIVoiceTag
// 0x0048 (0x0048 - 0x0000)
struct BPF_AJBPvEFunctionLibrary_C_GetPvEBeginWaveDBIVoiceTag final
{
public:
	int32                                         WaveIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_IntInt_ReturnValue;               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Temp_struct_Variable;                              // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable1;                             // 0x0028(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable2;                             // 0x0030(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable3;                             // 0x0038(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Select_Default;                             // 0x0040(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_AJBPvEFunctionLibrary_C_GetPvEBeginWaveDBIVoiceTag) == 0x000008, "Wrong alignment on BPF_AJBPvEFunctionLibrary_C_GetPvEBeginWaveDBIVoiceTag");
static_assert(sizeof(BPF_AJBPvEFunctionLibrary_C_GetPvEBeginWaveDBIVoiceTag) == 0x000048, "Wrong size on BPF_AJBPvEFunctionLibrary_C_GetPvEBeginWaveDBIVoiceTag");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEBeginWaveDBIVoiceTag, WaveIndex) == 0x000000, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEBeginWaveDBIVoiceTag::WaveIndex' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEBeginWaveDBIVoiceTag, __WorldContext) == 0x000008, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEBeginWaveDBIVoiceTag::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEBeginWaveDBIVoiceTag, ReturnValue) == 0x000010, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEBeginWaveDBIVoiceTag::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEBeginWaveDBIVoiceTag, Temp_int_Variable) == 0x000018, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEBeginWaveDBIVoiceTag::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEBeginWaveDBIVoiceTag, CallFunc_InRange_IntInt_ReturnValue) == 0x00001C, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEBeginWaveDBIVoiceTag::CallFunc_InRange_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEBeginWaveDBIVoiceTag, Temp_struct_Variable) == 0x000020, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEBeginWaveDBIVoiceTag::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEBeginWaveDBIVoiceTag, Temp_struct_Variable1) == 0x000028, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEBeginWaveDBIVoiceTag::Temp_struct_Variable1' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEBeginWaveDBIVoiceTag, Temp_struct_Variable2) == 0x000030, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEBeginWaveDBIVoiceTag::Temp_struct_Variable2' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEBeginWaveDBIVoiceTag, Temp_struct_Variable3) == 0x000038, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEBeginWaveDBIVoiceTag::Temp_struct_Variable3' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEBeginWaveDBIVoiceTag, K2Node_Select_Default) == 0x000040, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEBeginWaveDBIVoiceTag::K2Node_Select_Default' has a wrong offset!");

// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.GetPvEEndWaveDBIVoiceTag
// 0x0048 (0x0048 - 0x0000)
struct BPF_AJBPvEFunctionLibrary_C_GetPvEEndWaveDBIVoiceTag final
{
public:
	int32                                         WaveIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_IntInt_ReturnValue;               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Temp_struct_Variable;                              // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable1;                             // 0x0028(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable2;                             // 0x0030(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable3;                             // 0x0038(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Select_Default;                             // 0x0040(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_AJBPvEFunctionLibrary_C_GetPvEEndWaveDBIVoiceTag) == 0x000008, "Wrong alignment on BPF_AJBPvEFunctionLibrary_C_GetPvEEndWaveDBIVoiceTag");
static_assert(sizeof(BPF_AJBPvEFunctionLibrary_C_GetPvEEndWaveDBIVoiceTag) == 0x000048, "Wrong size on BPF_AJBPvEFunctionLibrary_C_GetPvEEndWaveDBIVoiceTag");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEEndWaveDBIVoiceTag, WaveIndex) == 0x000000, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEEndWaveDBIVoiceTag::WaveIndex' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEEndWaveDBIVoiceTag, __WorldContext) == 0x000008, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEEndWaveDBIVoiceTag::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEEndWaveDBIVoiceTag, ReturnValue) == 0x000010, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEEndWaveDBIVoiceTag::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEEndWaveDBIVoiceTag, Temp_int_Variable) == 0x000018, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEEndWaveDBIVoiceTag::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEEndWaveDBIVoiceTag, CallFunc_InRange_IntInt_ReturnValue) == 0x00001C, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEEndWaveDBIVoiceTag::CallFunc_InRange_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEEndWaveDBIVoiceTag, Temp_struct_Variable) == 0x000020, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEEndWaveDBIVoiceTag::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEEndWaveDBIVoiceTag, Temp_struct_Variable1) == 0x000028, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEEndWaveDBIVoiceTag::Temp_struct_Variable1' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEEndWaveDBIVoiceTag, Temp_struct_Variable2) == 0x000030, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEEndWaveDBIVoiceTag::Temp_struct_Variable2' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEEndWaveDBIVoiceTag, Temp_struct_Variable3) == 0x000038, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEEndWaveDBIVoiceTag::Temp_struct_Variable3' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEEndWaveDBIVoiceTag, K2Node_Select_Default) == 0x000040, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEEndWaveDBIVoiceTag::K2Node_Select_Default' has a wrong offset!");

// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.GetPvERemainingTimeInPhase
// 0x0020 (0x0020 - 0x0000)
struct BPF_AJBPvEFunctionLibrary_C_GetPvERemainingTimeInPhase final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainingTimeInPhase;                              // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGamePvE_PhaseManager_C*        CallFunc_GetPvEPhaseManager_PhaseManager;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRemainingTimeInPhase_RemainingTimeInPhase; // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_AJBPvEFunctionLibrary_C_GetPvERemainingTimeInPhase) == 0x000008, "Wrong alignment on BPF_AJBPvEFunctionLibrary_C_GetPvERemainingTimeInPhase");
static_assert(sizeof(BPF_AJBPvEFunctionLibrary_C_GetPvERemainingTimeInPhase) == 0x000020, "Wrong size on BPF_AJBPvEFunctionLibrary_C_GetPvERemainingTimeInPhase");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvERemainingTimeInPhase, __WorldContext) == 0x000000, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvERemainingTimeInPhase::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvERemainingTimeInPhase, RemainingTimeInPhase) == 0x000008, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvERemainingTimeInPhase::RemainingTimeInPhase' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvERemainingTimeInPhase, CallFunc_GetPvEPhaseManager_PhaseManager) == 0x000010, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvERemainingTimeInPhase::CallFunc_GetPvEPhaseManager_PhaseManager' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvERemainingTimeInPhase, CallFunc_GetRemainingTimeInPhase_RemainingTimeInPhase) == 0x000018, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvERemainingTimeInPhase::CallFunc_GetRemainingTimeInPhase_RemainingTimeInPhase' has a wrong offset!");

// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.GetPvEPhaseManager
// 0x0020 (0x0020 - 0x0000)
struct BPF_AJBPvEFunctionLibrary_C_GetPvEPhaseManager final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGamePvE_PhaseManager_C*        PhaseManager;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBPvEGameState_IsValid;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBPvEGameState_C*                  CallFunc_GetAJBPvEGameState_BP_AJB_PvE_GameState;  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_AJBPvEFunctionLibrary_C_GetPvEPhaseManager) == 0x000008, "Wrong alignment on BPF_AJBPvEFunctionLibrary_C_GetPvEPhaseManager");
static_assert(sizeof(BPF_AJBPvEFunctionLibrary_C_GetPvEPhaseManager) == 0x000020, "Wrong size on BPF_AJBPvEFunctionLibrary_C_GetPvEPhaseManager");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEPhaseManager, __WorldContext) == 0x000000, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEPhaseManager::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEPhaseManager, PhaseManager) == 0x000008, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEPhaseManager::PhaseManager' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEPhaseManager, CallFunc_GetAJBPvEGameState_IsValid) == 0x000010, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEPhaseManager::CallFunc_GetAJBPvEGameState_IsValid' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEPhaseManager, CallFunc_GetAJBPvEGameState_BP_AJB_PvE_GameState) == 0x000018, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEPhaseManager::CallFunc_GetAJBPvEGameState_BP_AJB_PvE_GameState' has a wrong offset!");

// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.GetPvESpawnManager
// 0x0020 (0x0020 - 0x0000)
struct BPF_AJBPvEFunctionLibrary_C_GetPvESpawnManager final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGamePvE_EnemySpawnManager_C*   SpawnManager;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBPvEGameState_IsValid;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBPvEGameState_C*                  CallFunc_GetAJBPvEGameState_BP_AJB_PvE_GameState;  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_AJBPvEFunctionLibrary_C_GetPvESpawnManager) == 0x000008, "Wrong alignment on BPF_AJBPvEFunctionLibrary_C_GetPvESpawnManager");
static_assert(sizeof(BPF_AJBPvEFunctionLibrary_C_GetPvESpawnManager) == 0x000020, "Wrong size on BPF_AJBPvEFunctionLibrary_C_GetPvESpawnManager");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvESpawnManager, __WorldContext) == 0x000000, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvESpawnManager::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvESpawnManager, SpawnManager) == 0x000008, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvESpawnManager::SpawnManager' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvESpawnManager, CallFunc_GetAJBPvEGameState_IsValid) == 0x000010, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvESpawnManager::CallFunc_GetAJBPvEGameState_IsValid' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvESpawnManager, CallFunc_GetAJBPvEGameState_BP_AJB_PvE_GameState) == 0x000018, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvESpawnManager::CallFunc_GetAJBPvEGameState_BP_AJB_PvE_GameState' has a wrong offset!");

// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.Debug_GetOrDefaults_Float
// 0x0028 (0x0028 - 0x0000)
struct BPF_AJBPvEFunctionLibrary_C_Debug_GetOrDefaults_Float final
{
public:
	TArray<float>                                 Array;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	int32                                         Index_0;                                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultValue;                                      // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBPvEFunctionLibrary_C_Debug_GetOrDefaults_Float) == 0x000008, "Wrong alignment on BPF_AJBPvEFunctionLibrary_C_Debug_GetOrDefaults_Float");
static_assert(sizeof(BPF_AJBPvEFunctionLibrary_C_Debug_GetOrDefaults_Float) == 0x000028, "Wrong size on BPF_AJBPvEFunctionLibrary_C_Debug_GetOrDefaults_Float");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_Debug_GetOrDefaults_Float, Array) == 0x000000, "Member 'BPF_AJBPvEFunctionLibrary_C_Debug_GetOrDefaults_Float::Array' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_Debug_GetOrDefaults_Float, Index_0) == 0x000010, "Member 'BPF_AJBPvEFunctionLibrary_C_Debug_GetOrDefaults_Float::Index_0' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_Debug_GetOrDefaults_Float, DefaultValue) == 0x000014, "Member 'BPF_AJBPvEFunctionLibrary_C_Debug_GetOrDefaults_Float::DefaultValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_Debug_GetOrDefaults_Float, __WorldContext) == 0x000018, "Member 'BPF_AJBPvEFunctionLibrary_C_Debug_GetOrDefaults_Float::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_Debug_GetOrDefaults_Float, ReturnValue) == 0x000020, "Member 'BPF_AJBPvEFunctionLibrary_C_Debug_GetOrDefaults_Float::ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_Debug_GetOrDefaults_Float, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000024, "Member 'BPF_AJBPvEFunctionLibrary_C_Debug_GetOrDefaults_Float::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.FindBossDataByID
// 0x0110 (0x0110 - 0x0000)
struct BPF_AJBPvEFunctionLibrary_C_FindBossDataByID final
{
public:
	int32                                         BossID;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_AJBInGamePvE_BossInfo              BossData;                                          // 0x0010(0x0038)(Parm, OutParm, HasGetValueTypeHash)
	class UDataTable*                             DT_AJBInGamePvE_BossInfo;                          // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   K2Node_MakeArray_Array;                            // 0x0060(0x0010)(ZeroConstructor, ReferenceParm)
	struct FST_AJBInGamePvE_BossInfo              K2Node_MakeStruct_ST_AJBInGamePvE_BossInfo;        // 0x0070(0x0038)(HasGetValueTypeHash)
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x00A8(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Array_Get_Item;                           // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_AJBInGamePvE_BossInfo              CallFunc_GetDataTableRowFromName_OutRow;           // 0x00D0(0x0038)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBPvEFunctionLibrary_C_FindBossDataByID) == 0x000008, "Wrong alignment on BPF_AJBPvEFunctionLibrary_C_FindBossDataByID");
static_assert(sizeof(BPF_AJBPvEFunctionLibrary_C_FindBossDataByID) == 0x000110, "Wrong size on BPF_AJBPvEFunctionLibrary_C_FindBossDataByID");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_FindBossDataByID, BossID) == 0x000000, "Member 'BPF_AJBPvEFunctionLibrary_C_FindBossDataByID::BossID' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_FindBossDataByID, __WorldContext) == 0x000008, "Member 'BPF_AJBPvEFunctionLibrary_C_FindBossDataByID::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_FindBossDataByID, BossData) == 0x000010, "Member 'BPF_AJBPvEFunctionLibrary_C_FindBossDataByID::BossData' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_FindBossDataByID, DT_AJBInGamePvE_BossInfo) == 0x000048, "Member 'BPF_AJBPvEFunctionLibrary_C_FindBossDataByID::DT_AJBInGamePvE_BossInfo' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_FindBossDataByID, Temp_int_Array_Index_Variable) == 0x000050, "Member 'BPF_AJBPvEFunctionLibrary_C_FindBossDataByID::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_FindBossDataByID, Temp_int_Loop_Counter_Variable) == 0x000054, "Member 'BPF_AJBPvEFunctionLibrary_C_FindBossDataByID::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_FindBossDataByID, CallFunc_Add_IntInt_ReturnValue) == 0x000058, "Member 'BPF_AJBPvEFunctionLibrary_C_FindBossDataByID::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_FindBossDataByID, K2Node_MakeArray_Array) == 0x000060, "Member 'BPF_AJBPvEFunctionLibrary_C_FindBossDataByID::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_FindBossDataByID, K2Node_MakeStruct_ST_AJBInGamePvE_BossInfo) == 0x000070, "Member 'BPF_AJBPvEFunctionLibrary_C_FindBossDataByID::K2Node_MakeStruct_ST_AJBInGamePvE_BossInfo' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_FindBossDataByID, CallFunc_GetDataTableRowNames_OutRowNames) == 0x0000A8, "Member 'BPF_AJBPvEFunctionLibrary_C_FindBossDataByID::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_FindBossDataByID, CallFunc_Array_Length_ReturnValue) == 0x0000B8, "Member 'BPF_AJBPvEFunctionLibrary_C_FindBossDataByID::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_FindBossDataByID, CallFunc_Array_Get_Item) == 0x0000C0, "Member 'BPF_AJBPvEFunctionLibrary_C_FindBossDataByID::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_FindBossDataByID, CallFunc_Less_IntInt_ReturnValue) == 0x0000C8, "Member 'BPF_AJBPvEFunctionLibrary_C_FindBossDataByID::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_FindBossDataByID, CallFunc_GetDataTableRowFromName_OutRow) == 0x0000D0, "Member 'BPF_AJBPvEFunctionLibrary_C_FindBossDataByID::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_FindBossDataByID, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000108, "Member 'BPF_AJBPvEFunctionLibrary_C_FindBossDataByID::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_FindBossDataByID, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000109, "Member 'BPF_AJBPvEFunctionLibrary_C_FindBossDataByID::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.MakePvEEnemyInfoByTag
// 0x0088 (0x0088 - 0x0000)
struct BPF_AJBPvEFunctionLibrary_C_MakePvEEnemyInfoByTag final
{
public:
	struct FGameplayTag                           CharacterTag;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_AJBInGamePvE_EnemyInfo             PvEEnemyInfo;                                      // 0x0010(0x0030)(Parm, OutParm, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBPvEGameState_IsValid;               // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBPvEGameState_C*                  CallFunc_GetAJBPvEGameState_BP_AJB_PvE_GameState;  // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            CallFunc_GetPvEDifficulty_Difficulty;              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetAILevelForPvE_AI_Level;                // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetKnockDownScoreSetting_KnockDownScore;  // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_AJBInGamePvE_EnemyInfo             K2Node_MakeStruct_ST_AJBInGamePvE_EnemyInfo;       // 0x0058(0x0030)(HasGetValueTypeHash)
};
static_assert(alignof(BPF_AJBPvEFunctionLibrary_C_MakePvEEnemyInfoByTag) == 0x000008, "Wrong alignment on BPF_AJBPvEFunctionLibrary_C_MakePvEEnemyInfoByTag");
static_assert(sizeof(BPF_AJBPvEFunctionLibrary_C_MakePvEEnemyInfoByTag) == 0x000088, "Wrong size on BPF_AJBPvEFunctionLibrary_C_MakePvEEnemyInfoByTag");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_MakePvEEnemyInfoByTag, CharacterTag) == 0x000000, "Member 'BPF_AJBPvEFunctionLibrary_C_MakePvEEnemyInfoByTag::CharacterTag' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_MakePvEEnemyInfoByTag, __WorldContext) == 0x000008, "Member 'BPF_AJBPvEFunctionLibrary_C_MakePvEEnemyInfoByTag::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_MakePvEEnemyInfoByTag, PvEEnemyInfo) == 0x000010, "Member 'BPF_AJBPvEFunctionLibrary_C_MakePvEEnemyInfoByTag::PvEEnemyInfo' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_MakePvEEnemyInfoByTag, CallFunc_GetAJBPvEGameState_IsValid) == 0x000040, "Member 'BPF_AJBPvEFunctionLibrary_C_MakePvEEnemyInfoByTag::CallFunc_GetAJBPvEGameState_IsValid' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_MakePvEEnemyInfoByTag, CallFunc_GetAJBPvEGameState_BP_AJB_PvE_GameState) == 0x000048, "Member 'BPF_AJBPvEFunctionLibrary_C_MakePvEEnemyInfoByTag::CallFunc_GetAJBPvEGameState_BP_AJB_PvE_GameState' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_MakePvEEnemyInfoByTag, CallFunc_GetPvEDifficulty_Difficulty) == 0x000050, "Member 'BPF_AJBPvEFunctionLibrary_C_MakePvEEnemyInfoByTag::CallFunc_GetPvEDifficulty_Difficulty' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_MakePvEEnemyInfoByTag, CallFunc_GetAILevelForPvE_AI_Level) == 0x000051, "Member 'BPF_AJBPvEFunctionLibrary_C_MakePvEEnemyInfoByTag::CallFunc_GetAILevelForPvE_AI_Level' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_MakePvEEnemyInfoByTag, CallFunc_GetKnockDownScoreSetting_KnockDownScore) == 0x000054, "Member 'BPF_AJBPvEFunctionLibrary_C_MakePvEEnemyInfoByTag::CallFunc_GetKnockDownScoreSetting_KnockDownScore' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_MakePvEEnemyInfoByTag, K2Node_MakeStruct_ST_AJBInGamePvE_EnemyInfo) == 0x000058, "Member 'BPF_AJBPvEFunctionLibrary_C_MakePvEEnemyInfoByTag::K2Node_MakeStruct_ST_AJBInGamePvE_EnemyInfo' has a wrong offset!");

// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.CleanNPC
// 0x0038 (0x0038 - 0x0000)
struct BPF_AJBPvEFunctionLibrary_C_CleanNPC final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Delay;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UActorComponent*                        CallFunc_AddComponentByClass_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDelayedCleaningNPCTime_DelayedTime;    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBCleanNPCComponent_C*             K2Node_DynamicCast_AsBP_AJBClean_NPCComponent;     // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBPvEFunctionLibrary_C_CleanNPC) == 0x000008, "Wrong alignment on BPF_AJBPvEFunctionLibrary_C_CleanNPC");
static_assert(sizeof(BPF_AJBPvEFunctionLibrary_C_CleanNPC) == 0x000038, "Wrong size on BPF_AJBPvEFunctionLibrary_C_CleanNPC");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_CleanNPC, Target) == 0x000000, "Member 'BPF_AJBPvEFunctionLibrary_C_CleanNPC::Target' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_CleanNPC, Delay) == 0x000008, "Member 'BPF_AJBPvEFunctionLibrary_C_CleanNPC::Delay' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_CleanNPC, __WorldContext) == 0x000010, "Member 'BPF_AJBPvEFunctionLibrary_C_CleanNPC::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_CleanNPC, CallFunc_AddComponentByClass_ReturnValue) == 0x000018, "Member 'BPF_AJBPvEFunctionLibrary_C_CleanNPC::CallFunc_AddComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_CleanNPC, CallFunc_GetDelayedCleaningNPCTime_DelayedTime) == 0x000020, "Member 'BPF_AJBPvEFunctionLibrary_C_CleanNPC::CallFunc_GetDelayedCleaningNPCTime_DelayedTime' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_CleanNPC, K2Node_DynamicCast_AsBP_AJBClean_NPCComponent) == 0x000028, "Member 'BPF_AJBPvEFunctionLibrary_C_CleanNPC::K2Node_DynamicCast_AsBP_AJBClean_NPCComponent' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_CleanNPC, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BPF_AJBPvEFunctionLibrary_C_CleanNPC::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.Debug_GetPvEScoreResults
// 0x0060 (0x0060 - 0x0000)
struct BPF_AJBPvEFunctionLibrary_C_Debug_GetPvEScoreResults final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_AJBPvEScoreResult                  ScoreResults;                                      // 0x0008(0x0020)(Parm, OutParm, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBPvEGameState_IsValid;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBPvEGameState_C*                  CallFunc_GetAJBPvEGameState_BP_AJB_PvE_GameState;  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetScoreRankBorderGroup_BorderGroup;      // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            CallFunc_GetDifficulty_Difficulty;                 // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_AJBPvEScoreResult                  CallFunc_GetScoreResults_ScoreResults;             // 0x0040(0x0020)(HasGetValueTypeHash)
};
static_assert(alignof(BPF_AJBPvEFunctionLibrary_C_Debug_GetPvEScoreResults) == 0x000008, "Wrong alignment on BPF_AJBPvEFunctionLibrary_C_Debug_GetPvEScoreResults");
static_assert(sizeof(BPF_AJBPvEFunctionLibrary_C_Debug_GetPvEScoreResults) == 0x000060, "Wrong size on BPF_AJBPvEFunctionLibrary_C_Debug_GetPvEScoreResults");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_Debug_GetPvEScoreResults, __WorldContext) == 0x000000, "Member 'BPF_AJBPvEFunctionLibrary_C_Debug_GetPvEScoreResults::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_Debug_GetPvEScoreResults, ScoreResults) == 0x000008, "Member 'BPF_AJBPvEFunctionLibrary_C_Debug_GetPvEScoreResults::ScoreResults' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_Debug_GetPvEScoreResults, CallFunc_GetAJBPvEGameState_IsValid) == 0x000028, "Member 'BPF_AJBPvEFunctionLibrary_C_Debug_GetPvEScoreResults::CallFunc_GetAJBPvEGameState_IsValid' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_Debug_GetPvEScoreResults, CallFunc_GetAJBPvEGameState_BP_AJB_PvE_GameState) == 0x000030, "Member 'BPF_AJBPvEFunctionLibrary_C_Debug_GetPvEScoreResults::CallFunc_GetAJBPvEGameState_BP_AJB_PvE_GameState' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_Debug_GetPvEScoreResults, CallFunc_GetScoreRankBorderGroup_BorderGroup) == 0x000038, "Member 'BPF_AJBPvEFunctionLibrary_C_Debug_GetPvEScoreResults::CallFunc_GetScoreRankBorderGroup_BorderGroup' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_Debug_GetPvEScoreResults, CallFunc_GetDifficulty_Difficulty) == 0x00003C, "Member 'BPF_AJBPvEFunctionLibrary_C_Debug_GetPvEScoreResults::CallFunc_GetDifficulty_Difficulty' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_Debug_GetPvEScoreResults, CallFunc_GetScoreResults_ScoreResults) == 0x000040, "Member 'BPF_AJBPvEFunctionLibrary_C_Debug_GetPvEScoreResults::CallFunc_GetScoreResults_ScoreResults' has a wrong offset!");

// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.DestroyStand
// 0x0018 (0x0018 - 0x0000)
struct BPF_AJBPvEFunctionLibrary_C_DestroyStand final
{
public:
	class AAJBInGameCharacter*                    Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBPvEFunctionLibrary_C_DestroyStand) == 0x000008, "Wrong alignment on BPF_AJBPvEFunctionLibrary_C_DestroyStand");
static_assert(sizeof(BPF_AJBPvEFunctionLibrary_C_DestroyStand) == 0x000018, "Wrong size on BPF_AJBPvEFunctionLibrary_C_DestroyStand");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_DestroyStand, Target) == 0x000000, "Member 'BPF_AJBPvEFunctionLibrary_C_DestroyStand::Target' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_DestroyStand, __WorldContext) == 0x000008, "Member 'BPF_AJBPvEFunctionLibrary_C_DestroyStand::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_DestroyStand, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BPF_AJBPvEFunctionLibrary_C_DestroyStand::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_DestroyStand, CallFunc_IsValid_ReturnValue1) == 0x000011, "Member 'BPF_AJBPvEFunctionLibrary_C_DestroyStand::CallFunc_IsValid_ReturnValue1' has a wrong offset!");

// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.DetermineAndGetPvEScoreResults
// 0x0068 (0x0068 - 0x0000)
struct BPF_AJBPvEFunctionLibrary_C_DetermineAndGetPvEScoreResults final
{
public:
	bool                                          IsIncludingBonus;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_AJBPvEScoreResult                  ScoreResults;                                      // 0x0010(0x0020)(Parm, OutParm, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBPvEGameState_IsValid;               // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBPvEGameState_C*                  CallFunc_GetAJBPvEGameState_BP_AJB_PvE_GameState;  // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetScoreRankBorderGroup_BorderGroup;      // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            CallFunc_GetDifficulty_Difficulty;                 // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_AJBPvEScoreResult                  CallFunc_DetermineAndGetScoreResults_Results;      // 0x0048(0x0020)(HasGetValueTypeHash)
};
static_assert(alignof(BPF_AJBPvEFunctionLibrary_C_DetermineAndGetPvEScoreResults) == 0x000008, "Wrong alignment on BPF_AJBPvEFunctionLibrary_C_DetermineAndGetPvEScoreResults");
static_assert(sizeof(BPF_AJBPvEFunctionLibrary_C_DetermineAndGetPvEScoreResults) == 0x000068, "Wrong size on BPF_AJBPvEFunctionLibrary_C_DetermineAndGetPvEScoreResults");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_DetermineAndGetPvEScoreResults, IsIncludingBonus) == 0x000000, "Member 'BPF_AJBPvEFunctionLibrary_C_DetermineAndGetPvEScoreResults::IsIncludingBonus' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_DetermineAndGetPvEScoreResults, __WorldContext) == 0x000008, "Member 'BPF_AJBPvEFunctionLibrary_C_DetermineAndGetPvEScoreResults::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_DetermineAndGetPvEScoreResults, ScoreResults) == 0x000010, "Member 'BPF_AJBPvEFunctionLibrary_C_DetermineAndGetPvEScoreResults::ScoreResults' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_DetermineAndGetPvEScoreResults, CallFunc_GetAJBPvEGameState_IsValid) == 0x000030, "Member 'BPF_AJBPvEFunctionLibrary_C_DetermineAndGetPvEScoreResults::CallFunc_GetAJBPvEGameState_IsValid' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_DetermineAndGetPvEScoreResults, CallFunc_GetAJBPvEGameState_BP_AJB_PvE_GameState) == 0x000038, "Member 'BPF_AJBPvEFunctionLibrary_C_DetermineAndGetPvEScoreResults::CallFunc_GetAJBPvEGameState_BP_AJB_PvE_GameState' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_DetermineAndGetPvEScoreResults, CallFunc_GetScoreRankBorderGroup_BorderGroup) == 0x000040, "Member 'BPF_AJBPvEFunctionLibrary_C_DetermineAndGetPvEScoreResults::CallFunc_GetScoreRankBorderGroup_BorderGroup' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_DetermineAndGetPvEScoreResults, CallFunc_GetDifficulty_Difficulty) == 0x000044, "Member 'BPF_AJBPvEFunctionLibrary_C_DetermineAndGetPvEScoreResults::CallFunc_GetDifficulty_Difficulty' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_DetermineAndGetPvEScoreResults, CallFunc_DetermineAndGetScoreResults_Results) == 0x000048, "Member 'BPF_AJBPvEFunctionLibrary_C_DetermineAndGetPvEScoreResults::CallFunc_DetermineAndGetScoreResults_Results' has a wrong offset!");

// Function BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C.GetPvEDeterminedScoreResults
// 0x0058 (0x0058 - 0x0000)
struct BPF_AJBPvEFunctionLibrary_C_GetPvEDeterminedScoreResults final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_AJBPvEScoreResult                  ScoreResults;                                      // 0x0008(0x0020)(Parm, OutParm, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBPvEGameState_IsValid;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBPvEGameState_C*                  CallFunc_GetAJBPvEGameState_BP_AJB_PvE_GameState;  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_AJBPvEScoreResult                  CallFunc_GetDeterminedScoreResults_Results;        // 0x0038(0x0020)(HasGetValueTypeHash)
};
static_assert(alignof(BPF_AJBPvEFunctionLibrary_C_GetPvEDeterminedScoreResults) == 0x000008, "Wrong alignment on BPF_AJBPvEFunctionLibrary_C_GetPvEDeterminedScoreResults");
static_assert(sizeof(BPF_AJBPvEFunctionLibrary_C_GetPvEDeterminedScoreResults) == 0x000058, "Wrong size on BPF_AJBPvEFunctionLibrary_C_GetPvEDeterminedScoreResults");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEDeterminedScoreResults, __WorldContext) == 0x000000, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEDeterminedScoreResults::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEDeterminedScoreResults, ScoreResults) == 0x000008, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEDeterminedScoreResults::ScoreResults' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEDeterminedScoreResults, CallFunc_GetAJBPvEGameState_IsValid) == 0x000028, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEDeterminedScoreResults::CallFunc_GetAJBPvEGameState_IsValid' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEDeterminedScoreResults, CallFunc_GetAJBPvEGameState_BP_AJB_PvE_GameState) == 0x000030, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEDeterminedScoreResults::CallFunc_GetAJBPvEGameState_BP_AJB_PvE_GameState' has a wrong offset!");
static_assert(offsetof(BPF_AJBPvEFunctionLibrary_C_GetPvEDeterminedScoreResults, CallFunc_GetDeterminedScoreResults_Results) == 0x000038, "Member 'BPF_AJBPvEFunctionLibrary_C_GetPvEDeterminedScoreResults::CallFunc_GetDeterminedScoreResults_Results' has a wrong offset!");

}

