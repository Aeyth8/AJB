#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_EmoteChange_Window

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AJB_structs.hpp"
#include "AJB_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_EmoteChange_Window.WB_EmoteChange_Window_C
// 0x0118 (0x03D8 - 0x02C0)
class UWB_EmoteChange_Window_C final : public UAJBWindowWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(Transient, DuplicateTransient)
	class UWidgetAnimation*                       Loop;                                              // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              AJBImage_AnalogStick;                              // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          AJBTextBlock_BottomCharacterName;                  // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          AJBTextBlock_BottomEmoteName;                      // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          AJBTextBlock_LeftCharacterName;                    // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          AJBTextBlock_LeftEmoteName;                        // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          AJBTextBlock_RightCharacterName;                   // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          AJBTextBlock_RightEmoteName;                       // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          AJBTextBlock_TopCharacterName;                     // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          AJBTextBlock_TopEmtoeName;                         // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_BottomButtonRoot;                          // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_LeftButtonRoot;                            // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_RightButtonRoot;                           // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_TopButtonRoot;                             // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_CommonButton_C*                     WB_CommonButton_Bottom;                            // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_CommonButton_C*                     WB_CommonButton_Cancel;                            // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_CommonButton_C*                     WB_CommonButton_Left;                              // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_CommonButton_C*                     WB_CommonButton_Right;                             // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_CommonButton_C*                     WB_CommonButton_Top;                               // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          bIsUpdateTimeCountdown;                            // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_361[0x3];                                      // 0x0361(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CountDownElapsedTime;                              // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBHUDBase*                            CachedAJBHUD;                                      // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_CommonWIndow_S_C*                   CachedNotifyEmotionChangeConfirm;                  // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CountDownTimeMax;                                  // 0x0378(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         CharacterID;                                       // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StickSpeed;                                        // 0x0380(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector2D                              NextStickTranslation;                              // 0x0384(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputLookupRate;                                   // 0x038C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputTurnRate;                                     // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_394[0x4];                                      // 0x0394(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector2D>                      NextTranslation5;                                  // 0x0398(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	int32                                         CurrentSelectDirection;                            // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AC[0x4];                                      // 0x03AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnSelectedEmoteIndex;                              // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	ERewardItemType                               RewardItemType;                                    // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C1[0x3];                                      // 0x03C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RewardNo;                                          // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 RewardString;                                      // 0x03C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WB_EmoteChange_Window(int32 EntryPoint);
	void UpdateText(const class FText& TargetText, class UTextBlock* TargetTextWidget);
	void SetupParam(int32 RewardNo_0, int32 CharacterID_0, ERewardItemType RewardItemType_0, const class FString& RewardString_0);
	void ChangeEmoteInfo(int32 DirectionIndex, const class FText& CharacterName, const class FText& EmoteName);
	void ChangeLeftEmoteInfo(const class FText& CharacterName, const class FText& EmoteName);
	void ChangeRightEmoteInfo(const class FText& CharacterName, const class FText& EmoteName);
	void ChangeBottomEmoteInfo(const class FText& CharacterName, const class FText& EmoteName);
	void ChangeTopEmoteInfo(const class FText& CharacterName, const class FText& EmoteName);
	void BndEvt__WB_CommonButton_Cancel_K2Node_ComponentBoundEvent_5_OnAJBButtonEvent__DelegateSignature(class UAJBButtonWidget* OwnerWidget, class UAJBButton* TargetButton);
	void RequestChangeEmote(int32 Position);
	void OnClosedNotifyEmotionChangeConfirm(class UAJBWindowWidget* TargetWidget);
	void BndEvt__WB_CommonButton_Top_K2Node_ComponentBoundEvent_3_OnAJBButtonEvent__DelegateSignature(class UAJBButtonWidget* OwnerWidget, class UAJBButton* TargetButton);
	void BndEvt__WB_CommonButton_Right_K2Node_ComponentBoundEvent_2_OnAJBButtonEvent__DelegateSignature(class UAJBButtonWidget* OwnerWidget, class UAJBButton* TargetButton);
	void BndEvt__WB_CommonButton_Bottom_K2Node_ComponentBoundEvent_1_OnAJBButtonEvent__DelegateSignature(class UAJBButtonWidget* OwnerWidget, class UAJBButton* TargetButton);
	void BndEvt__WB_CommonButton_Left_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature(class UAJBButtonWidget* OwnerWidget, class UAJBButton* TargetButton);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void OnClosingWindow();
	void OnOpeningWindow();
	void OnClosedWindow(class UAJBWindowWidget* TargetWidget);
	void OnOpenedWindow(class UAJBWindowWidget* TargetWidget);
	void StopTimeCountdown();
	void StartTimeCountdown();
	void Timeout();
	void Construct();
	void OnSuccess_7F1CACB54C174945FB87CCBFF9C3464D(EAJBNetAPIResult Result);
	void OnFailed_7F1CACB54C174945FB87CCBFF9C3464D(EAJBNetAPIResult Result);
	bool OnInputTurnRate(float Value);
	bool OnInputReleasedUp();
	bool OnInputReleasedTouch();
	bool OnInputReleasedRight();
	bool OnInputReleasedLeft();
	bool OnInputReleasedDown();
	bool OnInputReleasedDecide();
	bool OnInputReleasedCancel();
	bool OnInputPressedUp();
	bool OnInputPressedTouch(const float LocationX, const float LocationY);
	bool OnInputPressedRight();
	bool OnInputPressedLeft();
	bool OnInputPressedDown();
	bool OnInputPressedDecide();
	bool OnInputPressedCancel();
	bool OnInputMoveRight(float Value);
	bool OnInputMoveForward(float Value);
	bool OnInputLookupRate(float Value);
	bool IsModeless();
	bool OnInputReleasedR2();
	bool OnInputReleasedR1();
	bool OnInputReleasedL3();
	bool OnInputReleasedL2();
	bool OnInputReleasedL1();
	bool OnInputPressedR2();
	bool OnInputPressedR1();
	bool OnInputPressedL3();
	bool OnInputPressedL2();
	bool OnInputPressedL1();

	class UWB_CommonButton_C* GetSelectingButton() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_EmoteChange_Window_C">();
	}
	static class UWB_EmoteChange_Window_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_EmoteChange_Window_C>();
	}
};
static_assert(alignof(UWB_EmoteChange_Window_C) == 0x000008, "Wrong alignment on UWB_EmoteChange_Window_C");
static_assert(sizeof(UWB_EmoteChange_Window_C) == 0x0003D8, "Wrong size on UWB_EmoteChange_Window_C");
static_assert(offsetof(UWB_EmoteChange_Window_C, UberGraphFrame) == 0x0002C0, "Member 'UWB_EmoteChange_Window_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_EmoteChange_Window_C, Loop) == 0x0002C8, "Member 'UWB_EmoteChange_Window_C::Loop' has a wrong offset!");
static_assert(offsetof(UWB_EmoteChange_Window_C, AJBImage_AnalogStick) == 0x0002D0, "Member 'UWB_EmoteChange_Window_C::AJBImage_AnalogStick' has a wrong offset!");
static_assert(offsetof(UWB_EmoteChange_Window_C, AJBTextBlock_BottomCharacterName) == 0x0002D8, "Member 'UWB_EmoteChange_Window_C::AJBTextBlock_BottomCharacterName' has a wrong offset!");
static_assert(offsetof(UWB_EmoteChange_Window_C, AJBTextBlock_BottomEmoteName) == 0x0002E0, "Member 'UWB_EmoteChange_Window_C::AJBTextBlock_BottomEmoteName' has a wrong offset!");
static_assert(offsetof(UWB_EmoteChange_Window_C, AJBTextBlock_LeftCharacterName) == 0x0002E8, "Member 'UWB_EmoteChange_Window_C::AJBTextBlock_LeftCharacterName' has a wrong offset!");
static_assert(offsetof(UWB_EmoteChange_Window_C, AJBTextBlock_LeftEmoteName) == 0x0002F0, "Member 'UWB_EmoteChange_Window_C::AJBTextBlock_LeftEmoteName' has a wrong offset!");
static_assert(offsetof(UWB_EmoteChange_Window_C, AJBTextBlock_RightCharacterName) == 0x0002F8, "Member 'UWB_EmoteChange_Window_C::AJBTextBlock_RightCharacterName' has a wrong offset!");
static_assert(offsetof(UWB_EmoteChange_Window_C, AJBTextBlock_RightEmoteName) == 0x000300, "Member 'UWB_EmoteChange_Window_C::AJBTextBlock_RightEmoteName' has a wrong offset!");
static_assert(offsetof(UWB_EmoteChange_Window_C, AJBTextBlock_TopCharacterName) == 0x000308, "Member 'UWB_EmoteChange_Window_C::AJBTextBlock_TopCharacterName' has a wrong offset!");
static_assert(offsetof(UWB_EmoteChange_Window_C, AJBTextBlock_TopEmtoeName) == 0x000310, "Member 'UWB_EmoteChange_Window_C::AJBTextBlock_TopEmtoeName' has a wrong offset!");
static_assert(offsetof(UWB_EmoteChange_Window_C, Overlay_BottomButtonRoot) == 0x000318, "Member 'UWB_EmoteChange_Window_C::Overlay_BottomButtonRoot' has a wrong offset!");
static_assert(offsetof(UWB_EmoteChange_Window_C, Overlay_LeftButtonRoot) == 0x000320, "Member 'UWB_EmoteChange_Window_C::Overlay_LeftButtonRoot' has a wrong offset!");
static_assert(offsetof(UWB_EmoteChange_Window_C, Overlay_RightButtonRoot) == 0x000328, "Member 'UWB_EmoteChange_Window_C::Overlay_RightButtonRoot' has a wrong offset!");
static_assert(offsetof(UWB_EmoteChange_Window_C, Overlay_TopButtonRoot) == 0x000330, "Member 'UWB_EmoteChange_Window_C::Overlay_TopButtonRoot' has a wrong offset!");
static_assert(offsetof(UWB_EmoteChange_Window_C, WB_CommonButton_Bottom) == 0x000338, "Member 'UWB_EmoteChange_Window_C::WB_CommonButton_Bottom' has a wrong offset!");
static_assert(offsetof(UWB_EmoteChange_Window_C, WB_CommonButton_Cancel) == 0x000340, "Member 'UWB_EmoteChange_Window_C::WB_CommonButton_Cancel' has a wrong offset!");
static_assert(offsetof(UWB_EmoteChange_Window_C, WB_CommonButton_Left) == 0x000348, "Member 'UWB_EmoteChange_Window_C::WB_CommonButton_Left' has a wrong offset!");
static_assert(offsetof(UWB_EmoteChange_Window_C, WB_CommonButton_Right) == 0x000350, "Member 'UWB_EmoteChange_Window_C::WB_CommonButton_Right' has a wrong offset!");
static_assert(offsetof(UWB_EmoteChange_Window_C, WB_CommonButton_Top) == 0x000358, "Member 'UWB_EmoteChange_Window_C::WB_CommonButton_Top' has a wrong offset!");
static_assert(offsetof(UWB_EmoteChange_Window_C, bIsUpdateTimeCountdown) == 0x000360, "Member 'UWB_EmoteChange_Window_C::bIsUpdateTimeCountdown' has a wrong offset!");
static_assert(offsetof(UWB_EmoteChange_Window_C, CountDownElapsedTime) == 0x000364, "Member 'UWB_EmoteChange_Window_C::CountDownElapsedTime' has a wrong offset!");
static_assert(offsetof(UWB_EmoteChange_Window_C, CachedAJBHUD) == 0x000368, "Member 'UWB_EmoteChange_Window_C::CachedAJBHUD' has a wrong offset!");
static_assert(offsetof(UWB_EmoteChange_Window_C, CachedNotifyEmotionChangeConfirm) == 0x000370, "Member 'UWB_EmoteChange_Window_C::CachedNotifyEmotionChangeConfirm' has a wrong offset!");
static_assert(offsetof(UWB_EmoteChange_Window_C, CountDownTimeMax) == 0x000378, "Member 'UWB_EmoteChange_Window_C::CountDownTimeMax' has a wrong offset!");
static_assert(offsetof(UWB_EmoteChange_Window_C, CharacterID) == 0x00037C, "Member 'UWB_EmoteChange_Window_C::CharacterID' has a wrong offset!");
static_assert(offsetof(UWB_EmoteChange_Window_C, StickSpeed) == 0x000380, "Member 'UWB_EmoteChange_Window_C::StickSpeed' has a wrong offset!");
static_assert(offsetof(UWB_EmoteChange_Window_C, NextStickTranslation) == 0x000384, "Member 'UWB_EmoteChange_Window_C::NextStickTranslation' has a wrong offset!");
static_assert(offsetof(UWB_EmoteChange_Window_C, InputLookupRate) == 0x00038C, "Member 'UWB_EmoteChange_Window_C::InputLookupRate' has a wrong offset!");
static_assert(offsetof(UWB_EmoteChange_Window_C, InputTurnRate) == 0x000390, "Member 'UWB_EmoteChange_Window_C::InputTurnRate' has a wrong offset!");
static_assert(offsetof(UWB_EmoteChange_Window_C, NextTranslation5) == 0x000398, "Member 'UWB_EmoteChange_Window_C::NextTranslation5' has a wrong offset!");
static_assert(offsetof(UWB_EmoteChange_Window_C, CurrentSelectDirection) == 0x0003A8, "Member 'UWB_EmoteChange_Window_C::CurrentSelectDirection' has a wrong offset!");
static_assert(offsetof(UWB_EmoteChange_Window_C, OnSelectedEmoteIndex) == 0x0003B0, "Member 'UWB_EmoteChange_Window_C::OnSelectedEmoteIndex' has a wrong offset!");
static_assert(offsetof(UWB_EmoteChange_Window_C, RewardItemType) == 0x0003C0, "Member 'UWB_EmoteChange_Window_C::RewardItemType' has a wrong offset!");
static_assert(offsetof(UWB_EmoteChange_Window_C, RewardNo) == 0x0003C4, "Member 'UWB_EmoteChange_Window_C::RewardNo' has a wrong offset!");
static_assert(offsetof(UWB_EmoteChange_Window_C, RewardString) == 0x0003C8, "Member 'UWB_EmoteChange_Window_C::RewardString' has a wrong offset!");

}

