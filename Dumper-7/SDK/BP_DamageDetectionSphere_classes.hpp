#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DamageDetectionSphere

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AJB_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DamageDetectionSphere.BP_DamageDetectionSphere_C
// 0x0038 (0x0360 - 0x0328)
class ABP_DamageDetectionSphere_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(Transient, DuplicateTransient)
	class USphereComponent*                       Sphere;                                            // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnDamageDetected;                                  // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bDetectionActive;                                  // 0x0348(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAreaIn;                                           // 0x0349(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPenetrating;                                      // 0x034A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34B[0x5];                                      // 0x034B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnDamaged;                                         // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ExecuteUbergraph_BP_DamageDetectionSphere(int32 EntryPoint);
	void OnNoDamageChanged(class ABP_AJBInGameCharacter_C* OperaatorCharacter, bool bNewFlag, const struct FGameplayTag& EffectTag, const struct FGameplayTag& SETag);
	void AJBDamage(class AActor* DamagedActor, int32 DamageForHPAP, int32 DamageForAAP, int32 CutDamage, const struct FGameplayTag& DamageType, int32 SerialNumber, EDamagePriority DamagePriority, float AttackDistance, class AActor* DamageCauser, bool WithSeparatedStandAttack, bool HitEnemysSeparatedStand, bool bPenetrateAP, bool bNotUseCollision, bool IsEndured, const struct FAJBDamageDisplayParams& DamageDisplayParams, const struct FAJBDamageDisplayProperty& DamageDisplayProperty);
	void OnAreaIn(class ABP_AJBInGameCharacter_C* OperatorCharacter, const struct FGameplayTag& EffectTag, const struct FGameplayTag& SETag, bool bNoDamage);
	void OnAreaOut(class ABP_AJBInGameCharacter_C* OperatorCharacter, const struct FGameplayTag& EffectTag, const struct FGameplayTag& SETag);
	void DamageOverlapped(class AActor* DamageCauser, const struct FVector& HitLocation, bool bPenetrating_0, const struct FGameplayTag& FactorTag, bool bInvalidDamage);
	void OnDamageDisabled();
	void OnAreaDamageDisabled();
	void OnPassiveDisabled();
	void UserConstructionScript();
	void SetSphereRadius(float Radius);
	void DeactivateDetection();
	bool IsAffectorAreaIn();
	void OwnHitParam(bool* bCharacter, bool* bLeftAP, struct FGameplayTag* ParticleTagBlockedByAAP, struct FGameplayTag* SETagBlockedByAAP, struct FGameplayTag* ParticleTagBlocked);
	void CheckTargetSelf(class AActor* DamageCauser, bool bForDamageOverlap, bool bIgnoreMovableStand, bool bIncludeSelf, bool bAfterReflectShouldHitOwner, bool* bTarget);
	bool IfCheckDamageOverlap();
	void CheckDisableDamage(class AActor* DamageCauser, bool bIgnoreSelf, bool* bDisableDamage);
	void CheckDisablePassive(class AActor* PassiveCauser, const struct FGameplayTag& PassiveTag, bool bIgnoreSelf, bool* bDisablePassive);
	void CheckDisableAreaDamage(bool* bDisableAreadamage);
	void CheckNoDamage(class AActor* DamageCauser, bool* bNoDamage);
	void IsReactedByReticule(bool* bResult);
	void IgnoreTrace(class AActor* Owner_0, bool bPairOnly, bool* bIgnore);
	void CheckDisableDirectDamage(class AActor* DamageCauser, bool* bDisableDirectDamage);
	void CheckAreaIn(const struct FVector& Location, const struct FRotator& Rotation, float Radius, float Length, int32 PartitionNum, bool bCheckUnder, float ValidGroundOffsetZ, bool bUseBoxCollision, const struct FVector& BoxExtent, bool* bTarget);
	void IgnoreAttackHitNotifyOnAreaIn(bool* bIgnore);
	void GetTargetLocation(struct FVector* Location);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DamageDetectionSphere_C">();
	}
	static class ABP_DamageDetectionSphere_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DamageDetectionSphere_C>();
	}
};
static_assert(alignof(ABP_DamageDetectionSphere_C) == 0x000008, "Wrong alignment on ABP_DamageDetectionSphere_C");
static_assert(sizeof(ABP_DamageDetectionSphere_C) == 0x000360, "Wrong size on ABP_DamageDetectionSphere_C");
static_assert(offsetof(ABP_DamageDetectionSphere_C, UberGraphFrame) == 0x000328, "Member 'ABP_DamageDetectionSphere_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DamageDetectionSphere_C, Sphere) == 0x000330, "Member 'ABP_DamageDetectionSphere_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_DamageDetectionSphere_C, OnDamageDetected) == 0x000338, "Member 'ABP_DamageDetectionSphere_C::OnDamageDetected' has a wrong offset!");
static_assert(offsetof(ABP_DamageDetectionSphere_C, bDetectionActive) == 0x000348, "Member 'ABP_DamageDetectionSphere_C::bDetectionActive' has a wrong offset!");
static_assert(offsetof(ABP_DamageDetectionSphere_C, bAreaIn) == 0x000349, "Member 'ABP_DamageDetectionSphere_C::bAreaIn' has a wrong offset!");
static_assert(offsetof(ABP_DamageDetectionSphere_C, bPenetrating) == 0x00034A, "Member 'ABP_DamageDetectionSphere_C::bPenetrating' has a wrong offset!");
static_assert(offsetof(ABP_DamageDetectionSphere_C, OnDamaged) == 0x000350, "Member 'ABP_DamageDetectionSphere_C::OnDamaged' has a wrong offset!");

}

