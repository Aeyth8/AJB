#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DebugInputCountComponent

#include "Basic.hpp"

#include "BP_DebugInputCountComponent_classes.hpp"
#include "BP_DebugInputCountComponent_parameters.hpp"


namespace SDK
{

// Function BP_DebugInputCountComponent.BP_DebugInputCountComponent_C.ExecuteUbergraph_BP_DebugInputCountComponent
// ()
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DebugInputCountComponent_C::ExecuteUbergraph_BP_DebugInputCountComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugInputCountComponent_C", "ExecuteUbergraph_BP_DebugInputCountComponent");

	Params::BP_DebugInputCountComponent_C_ExecuteUbergraph_BP_DebugInputCountComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DebugInputCountComponent.BP_DebugInputCountComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_DebugInputCountComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugInputCountComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DebugInputCountComponent.BP_DebugInputCountComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DebugInputCountComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugInputCountComponent_C", "ReceiveTick");

	Params::BP_DebugInputCountComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DebugInputCountComponent.BP_DebugInputCountComponent_C.DirectionIsChanged
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_StickInputDirection                   BeforeDirection                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InputX                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   inputY                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InputThresholdForNeutral                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MarginDegreeForDetectingChanging                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bIsChanged                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// E_StickInputDirection*                  NewDirection                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DebugInputCountComponent_C::DirectionIsChanged(E_StickInputDirection BeforeDirection, float InputX, float inputY, float InputThresholdForNeutral, float MarginDegreeForDetectingChanging, bool* bIsChanged, E_StickInputDirection* NewDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugInputCountComponent_C", "DirectionIsChanged");

	Params::BP_DebugInputCountComponent_C_DirectionIsChanged Parms{};

	Parms.BeforeDirection = BeforeDirection;
	Parms.InputX = InputX;
	Parms.inputY = inputY;
	Parms.InputThresholdForNeutral = InputThresholdForNeutral;
	Parms.MarginDegreeForDetectingChanging = MarginDegreeForDetectingChanging;

	UObject::ProcessEvent(Func, &Parms);

	if (bIsChanged != nullptr)
		*bIsChanged = Parms.bIsChanged;

	if (NewDirection != nullptr)
		*NewDirection = Parms.NewDirection;
}


// Function BP_DebugInputCountComponent.BP_DebugInputCountComponent_C.DegreeToDirection
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Degree                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_StickInputDirection                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

E_StickInputDirection UBP_DebugInputCountComponent_C::DegreeToDirection(float Degree)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugInputCountComponent_C", "DegreeToDirection");

	Params::BP_DebugInputCountComponent_C_DegreeToDirection Parms{};

	Parms.Degree = Degree;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_DebugInputCountComponent.BP_DebugInputCountComponent_C.DirectionToString
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_StickInputDirection                   Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString*                          Result                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBP_DebugInputCountComponent_C::DirectionToString(E_StickInputDirection Direction, class FString* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DebugInputCountComponent_C", "DirectionToString");

	Params::BP_DebugInputCountComponent_C_DirectionToString Parms{};

	Parms.Direction = Direction;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}

}

