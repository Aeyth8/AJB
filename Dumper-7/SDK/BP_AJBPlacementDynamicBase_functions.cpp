#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBPlacementDynamicBase

#include "Basic.hpp"

#include "BP_AJBPlacementDynamicBase_classes.hpp"
#include "BP_AJBPlacementDynamicBase_parameters.hpp"


namespace SDK
{

// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.ExecuteUbergraph_BP_AJBPlacementDynamicBase
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPlacementDynamicBase_C::ExecuteUbergraph_BP_AJBPlacementDynamicBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPlacementDynamicBase_C", "ExecuteUbergraph_BP_AJBPlacementDynamicBase");

	Params::BP_AJBPlacementDynamicBase_C_ExecuteUbergraph_BP_AJBPlacementDynamicBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPlacementDynamicBase_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPlacementDynamicBase_C", "ReceiveEndPlay");

	Params::BP_AJBPlacementDynamicBase_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_AJBPlacementDynamicBase_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPlacementDynamicBase_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.OnBeginState_Clearing_OneShot
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBPlacementDynamicBase_C::OnBeginState_Clearing_OneShot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPlacementDynamicBase_C", "OnBeginState_Clearing_OneShot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.OnBeginState_Prepare_OneShot
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBPlacementDynamicBase_C::OnBeginState_Prepare_OneShot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPlacementDynamicBase_C", "OnBeginState_Prepare_OneShot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.OnValueArrivedMax
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBPlacementDynamicBase_C::OnValueArrivedMax()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPlacementDynamicBase_C", "OnValueArrivedMax");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.OnBeginState_Clearing
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBPlacementDynamicBase_C::OnBeginState_Clearing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPlacementDynamicBase_C", "OnBeginState_Clearing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.OnBeginState_Standby
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBPlacementDynamicBase_C::OnBeginState_Standby()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPlacementDynamicBase_C", "OnBeginState_Standby");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.MC_NotifyDamage
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsBroken                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBPlacementDynamicBase_C::MC_NotifyDamage(bool bIsBroken)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPlacementDynamicBase_C", "MC_NotifyDamage");

	Params::BP_AJBPlacementDynamicBase_C_MC_NotifyDamage Parms{};

	Parms.bIsBroken = bIsBroken;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.ROC_NotifyDamage
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EffectiveValue                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPlacementDynamicBase_C::ROC_NotifyDamage(int32 EffectiveValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPlacementDynamicBase_C", "ROC_NotifyDamage");

	Params::BP_AJBPlacementDynamicBase_C_ROC_NotifyDamage Parms{};

	Parms.EffectiveValue = EffectiveValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.BeginStateClearing_Dynamic
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBeBroken                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bOtherCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBPlacementDynamicBase_C::BeginStateClearing_Dynamic(bool bBeBroken, bool bOtherCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPlacementDynamicBase_C", "BeginStateClearing_Dynamic");

	Params::BP_AJBPlacementDynamicBase_C_BeginStateClearing_Dynamic Parms{};

	Parms.bBeBroken = bBeBroken;
	Parms.bOtherCharacter = bOtherCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.ROC_OnDamage
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bBeBroken                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bOtherCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBPlacementDynamicBase_C::ROC_OnDamage(bool bBeBroken, bool bOtherCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPlacementDynamicBase_C", "ROC_OnDamage");

	Params::BP_AJBPlacementDynamicBase_C_ROC_OnDamage Parms{};

	Parms.bBeBroken = bBeBroken;
	Parms.bOtherCharacter = bOtherCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.AJBDamage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamagedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DamageForHPAP                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DamageForAAP                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   CutDamage                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayTag&              DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   SerialNumber_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EDamagePriority                         DamagePriority                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AttackDistance                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WithSeparatedStandAttack                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HitEnemysSeparatedStand                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bPenetrateAP                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bNotUseCollision                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsEndured                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FAJBDamageDisplayParams&   DamageDisplayParams                                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// const struct FAJBDamageDisplayProperty& DamageDisplayProperty                                  (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void ABP_AJBPlacementDynamicBase_C::AJBDamage(class AActor* DamagedActor, int32 DamageForHPAP, int32 DamageForAAP, int32 CutDamage, const struct FGameplayTag& DamageType, int32 SerialNumber_0, EDamagePriority DamagePriority, float AttackDistance, class AActor* DamageCauser, bool WithSeparatedStandAttack, bool HitEnemysSeparatedStand, bool bPenetrateAP, bool bNotUseCollision, bool IsEndured, const struct FAJBDamageDisplayParams& DamageDisplayParams, const struct FAJBDamageDisplayProperty& DamageDisplayProperty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPlacementDynamicBase_C", "AJBDamage");

	Params::BP_AJBPlacementDynamicBase_C_AJBDamage Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.DamageForHPAP = DamageForHPAP;
	Parms.DamageForAAP = DamageForAAP;
	Parms.CutDamage = CutDamage;
	Parms.DamageType = std::move(DamageType);
	Parms.SerialNumber_0 = SerialNumber_0;
	Parms.DamagePriority = DamagePriority;
	Parms.AttackDistance = AttackDistance;
	Parms.DamageCauser = DamageCauser;
	Parms.WithSeparatedStandAttack = WithSeparatedStandAttack;
	Parms.HitEnemysSeparatedStand = HitEnemysSeparatedStand;
	Parms.bPenetrateAP = bPenetrateAP;
	Parms.bNotUseCollision = bNotUseCollision;
	Parms.IsEndured = IsEndured;
	Parms.DamageDisplayParams = std::move(DamageDisplayParams);
	Parms.DamageDisplayProperty = std::move(DamageDisplayProperty);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.NotifyTheWorld
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAJBInGameCharacter*              Operator                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EGeneralTiming                          Timing                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bOperatorIsEmpty                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBPlacementDynamicBase_C::NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPlacementDynamicBase_C", "NotifyTheWorld");

	Params::BP_AJBPlacementDynamicBase_C_NotifyTheWorld Parms{};

	Parms.Operator = Operator;
	Parms.Time = Time;
	Parms.Timing = Timing;
	Parms.bEnable = bEnable;
	Parms.bOperatorIsEmpty = bOperatorIsEmpty;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.OnAreaDamageDisabled
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBPlacementDynamicBase_C::OnAreaDamageDisabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPlacementDynamicBase_C", "OnAreaDamageDisabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.OnPassiveDisabled
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBPlacementDynamicBase_C::OnPassiveDisabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPlacementDynamicBase_C", "OnPassiveDisabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.OnDamageDisabled
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBPlacementDynamicBase_C::OnDamageDisabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPlacementDynamicBase_C", "OnDamageDisabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.DamageOverlapped
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bPenetrating                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FGameplayTag&              FactorTag                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    bInvalidDamage                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBPlacementDynamicBase_C::DamageOverlapped(class AActor* DamageCauser, const struct FVector& HitLocation, bool bPenetrating, const struct FGameplayTag& FactorTag, bool bInvalidDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPlacementDynamicBase_C", "DamageOverlapped");

	Params::BP_AJBPlacementDynamicBase_C_DamageOverlapped Parms{};

	Parms.DamageCauser = DamageCauser;
	Parms.HitLocation = std::move(HitLocation);
	Parms.bPenetrating = bPenetrating;
	Parms.FactorTag = std::move(FactorTag);
	Parms.bInvalidDamage = bInvalidDamage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBPlacementDynamicBase_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPlacementDynamicBase_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.ConsumeDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  EffectiveDamage                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPlacementDynamicBase_C::ConsumeDamage(int32 Damage, int32* EffectiveDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPlacementDynamicBase_C", "ConsumeDamage");

	Params::BP_AJBPlacementDynamicBase_C_ConsumeDamage Parms{};

	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);

	if (EffectiveDamage != nullptr)
		*EffectiveDamage = Parms.EffectiveDamage;
}


// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.InitializeStatus
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBPlacementDynamicBase_C::InitializeStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPlacementDynamicBase_C", "InitializeStatus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.IsBroken
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   bIsBroken                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBPlacementDynamicBase_C::IsBroken(bool* bIsBroken)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPlacementDynamicBase_C", "IsBroken");

	Params::BP_AJBPlacementDynamicBase_C_IsBroken Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bIsBroken != nullptr)
		*bIsBroken = Parms.bIsBroken;
}


// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.ClearingLocal
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBPlacementDynamicBase_C::ClearingLocal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPlacementDynamicBase_C", "ClearingLocal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.ConsumeDamageLocal
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPlacementDynamicBase_C::ConsumeDamageLocal(int32 Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPlacementDynamicBase_C", "ConsumeDamageLocal");

	Params::BP_AJBPlacementDynamicBase_C_ConsumeDamageLocal Parms{};

	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.CheckDisableAreaDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   bDisableAreadamage                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBPlacementDynamicBase_C::CheckDisableAreaDamage(bool* bDisableAreadamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPlacementDynamicBase_C", "CheckDisableAreaDamage");

	Params::BP_AJBPlacementDynamicBase_C_CheckDisableAreaDamage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bDisableAreadamage != nullptr)
		*bDisableAreadamage = Parms.bDisableAreadamage;
}


// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.CheckDisablePassive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           PassiveCauser                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayTag&              PassiveTag                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    bIgnoreSelf                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool*                                   bDisablePassive                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBPlacementDynamicBase_C::CheckDisablePassive(class AActor* PassiveCauser, const struct FGameplayTag& PassiveTag, bool bIgnoreSelf, bool* bDisablePassive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPlacementDynamicBase_C", "CheckDisablePassive");

	Params::BP_AJBPlacementDynamicBase_C_CheckDisablePassive Parms{};

	Parms.PassiveCauser = PassiveCauser;
	Parms.PassiveTag = std::move(PassiveTag);
	Parms.bIgnoreSelf = bIgnoreSelf;

	UObject::ProcessEvent(Func, &Parms);

	if (bDisablePassive != nullptr)
		*bDisablePassive = Parms.bDisablePassive;
}


// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.CheckDisableDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIgnoreSelf                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool*                                   bDisableDamage                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBPlacementDynamicBase_C::CheckDisableDamage(class AActor* DamageCauser, bool bIgnoreSelf, bool* bDisableDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPlacementDynamicBase_C", "CheckDisableDamage");

	Params::BP_AJBPlacementDynamicBase_C_CheckDisableDamage Parms{};

	Parms.DamageCauser = DamageCauser;
	Parms.bIgnoreSelf = bIgnoreSelf;

	UObject::ProcessEvent(Func, &Parms);

	if (bDisableDamage != nullptr)
		*bDisableDamage = Parms.bDisableDamage;
}


// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.IfCheckDamageOverlap
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_AJBPlacementDynamicBase_C::IfCheckDamageOverlap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPlacementDynamicBase_C", "IfCheckDamageOverlap");

	Params::BP_AJBPlacementDynamicBase_C_IfCheckDamageOverlap Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.OwnHitParam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   bCharacter                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool*                                   bLeftAP                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FGameplayTag*                    ParticleTagBlockedByAAP                                (Parm, OutParm, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag*                    SETagBlockedByAAP                                      (Parm, OutParm, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTag*                    ParticleTagBlocked                                     (Parm, OutParm, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPlacementDynamicBase_C::OwnHitParam(bool* bCharacter, bool* bLeftAP, struct FGameplayTag* ParticleTagBlockedByAAP, struct FGameplayTag* SETagBlockedByAAP, struct FGameplayTag* ParticleTagBlocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPlacementDynamicBase_C", "OwnHitParam");

	Params::BP_AJBPlacementDynamicBase_C_OwnHitParam Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bCharacter != nullptr)
		*bCharacter = Parms.bCharacter;

	if (bLeftAP != nullptr)
		*bLeftAP = Parms.bLeftAP;

	if (ParticleTagBlockedByAAP != nullptr)
		*ParticleTagBlockedByAAP = std::move(Parms.ParticleTagBlockedByAAP);

	if (SETagBlockedByAAP != nullptr)
		*SETagBlockedByAAP = std::move(Parms.SETagBlockedByAAP);

	if (ParticleTagBlocked != nullptr)
		*ParticleTagBlocked = std::move(Parms.ParticleTagBlocked);
}


// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.CheckTargetSelf
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bForDamageOverlap                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bIgnoreMovableStand                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bIncludeSelf                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bAfterReflectShouldHitOwner                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool*                                   bTarget                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBPlacementDynamicBase_C::CheckTargetSelf(class AActor* DamageCauser, bool bForDamageOverlap, bool bIgnoreMovableStand, bool bIncludeSelf, bool bAfterReflectShouldHitOwner, bool* bTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPlacementDynamicBase_C", "CheckTargetSelf");

	Params::BP_AJBPlacementDynamicBase_C_CheckTargetSelf Parms{};

	Parms.DamageCauser = DamageCauser;
	Parms.bForDamageOverlap = bForDamageOverlap;
	Parms.bIgnoreMovableStand = bIgnoreMovableStand;
	Parms.bIncludeSelf = bIncludeSelf;
	Parms.bAfterReflectShouldHitOwner = bAfterReflectShouldHitOwner;

	UObject::ProcessEvent(Func, &Parms);

	if (bTarget != nullptr)
		*bTarget = Parms.bTarget;
}


// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.CheckNoDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bNoDamage                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBPlacementDynamicBase_C::CheckNoDamage(class AActor* DamageCauser, bool* bNoDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPlacementDynamicBase_C", "CheckNoDamage");

	Params::BP_AJBPlacementDynamicBase_C_CheckNoDamage Parms{};

	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);

	if (bNoDamage != nullptr)
		*bNoDamage = Parms.bNoDamage;
}


// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.IsReactedByReticule
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   bResult                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBPlacementDynamicBase_C::IsReactedByReticule(bool* bResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPlacementDynamicBase_C", "IsReactedByReticule");

	Params::BP_AJBPlacementDynamicBase_C_IsReactedByReticule Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bResult != nullptr)
		*bResult = Parms.bResult;
}


// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.IgnoreTrace
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Owner_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bPairOnly                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool*                                   bIgnore                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBPlacementDynamicBase_C::IgnoreTrace(class AActor* Owner_0, bool bPairOnly, bool* bIgnore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPlacementDynamicBase_C", "IgnoreTrace");

	Params::BP_AJBPlacementDynamicBase_C_IgnoreTrace Parms{};

	Parms.Owner_0 = Owner_0;
	Parms.bPairOnly = bPairOnly;

	UObject::ProcessEvent(Func, &Parms);

	if (bIgnore != nullptr)
		*bIgnore = Parms.bIgnore;
}


// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.CheckDisableDirectDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bDisableDirectDamage                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBPlacementDynamicBase_C::CheckDisableDirectDamage(class AActor* DamageCauser, bool* bDisableDirectDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPlacementDynamicBase_C", "CheckDisableDirectDamage");

	Params::BP_AJBPlacementDynamicBase_C_CheckDisableDirectDamage Parms{};

	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);

	if (bDisableDirectDamage != nullptr)
		*bDisableDirectDamage = Parms.bDisableDirectDamage;
}


// Function BP_AJBPlacementDynamicBase.BP_AJBPlacementDynamicBase_C.GetTargetLocation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         Location                                               (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBPlacementDynamicBase_C::GetTargetLocation(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBPlacementDynamicBase_C", "GetTargetLocation");

	Params::BP_AJBPlacementDynamicBase_C_GetTargetLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}

}

