#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_SPframe

#include "Basic.hpp"


namespace SDK::Params
{

// Function WB_SPframe.WB_SPframe_C.ExecuteUbergraph_WB_SPframe
// 0x0008 (0x0008 - 0x0000)
struct WB_SPframe_C_ExecuteUbergraph_WB_SPframe final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Condition;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsVisible;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsFill;                         // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_SPframe_C_ExecuteUbergraph_WB_SPframe) == 0x000004, "Wrong alignment on WB_SPframe_C_ExecuteUbergraph_WB_SPframe");
static_assert(sizeof(WB_SPframe_C_ExecuteUbergraph_WB_SPframe) == 0x000008, "Wrong size on WB_SPframe_C_ExecuteUbergraph_WB_SPframe");
static_assert(offsetof(WB_SPframe_C_ExecuteUbergraph_WB_SPframe, EntryPoint) == 0x000000, "Member 'WB_SPframe_C_ExecuteUbergraph_WB_SPframe::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_SPframe_C_ExecuteUbergraph_WB_SPframe, K2Node_CustomEvent_Condition) == 0x000004, "Member 'WB_SPframe_C_ExecuteUbergraph_WB_SPframe::K2Node_CustomEvent_Condition' has a wrong offset!");
static_assert(offsetof(WB_SPframe_C_ExecuteUbergraph_WB_SPframe, K2Node_CustomEvent_IsVisible) == 0x000005, "Member 'WB_SPframe_C_ExecuteUbergraph_WB_SPframe::K2Node_CustomEvent_IsVisible' has a wrong offset!");
static_assert(offsetof(WB_SPframe_C_ExecuteUbergraph_WB_SPframe, K2Node_CustomEvent_IsFill) == 0x000006, "Member 'WB_SPframe_C_ExecuteUbergraph_WB_SPframe::K2Node_CustomEvent_IsFill' has a wrong offset!");

// Function WB_SPframe.WB_SPframe_C.UpdateSPframe
// 0x0001 (0x0001 - 0x0000)
struct WB_SPframe_C_UpdateSPframe final
{
public:
	bool                                          IsFill;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_SPframe_C_UpdateSPframe) == 0x000001, "Wrong alignment on WB_SPframe_C_UpdateSPframe");
static_assert(sizeof(WB_SPframe_C_UpdateSPframe) == 0x000001, "Wrong size on WB_SPframe_C_UpdateSPframe");
static_assert(offsetof(WB_SPframe_C_UpdateSPframe, IsFill) == 0x000000, "Member 'WB_SPframe_C_UpdateSPframe::IsFill' has a wrong offset!");

// Function WB_SPframe.WB_SPframe_C.VisibleSPframe
// 0x0001 (0x0001 - 0x0000)
struct WB_SPframe_C_VisibleSPframe final
{
public:
	bool                                          IsVisible_0;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_SPframe_C_VisibleSPframe) == 0x000001, "Wrong alignment on WB_SPframe_C_VisibleSPframe");
static_assert(sizeof(WB_SPframe_C_VisibleSPframe) == 0x000001, "Wrong size on WB_SPframe_C_VisibleSPframe");
static_assert(offsetof(WB_SPframe_C_VisibleSPframe, IsVisible_0) == 0x000000, "Member 'WB_SPframe_C_VisibleSPframe::IsVisible_0' has a wrong offset!");

// Function WB_SPframe.WB_SPframe_C.SetAwakingAbilityIcon
// 0x0001 (0x0001 - 0x0000)
struct WB_SPframe_C_SetAwakingAbilityIcon final
{
public:
	bool                                          Condition;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_SPframe_C_SetAwakingAbilityIcon) == 0x000001, "Wrong alignment on WB_SPframe_C_SetAwakingAbilityIcon");
static_assert(sizeof(WB_SPframe_C_SetAwakingAbilityIcon) == 0x000001, "Wrong size on WB_SPframe_C_SetAwakingAbilityIcon");
static_assert(offsetof(WB_SPframe_C_SetAwakingAbilityIcon, Condition) == 0x000000, "Member 'WB_SPframe_C_SetAwakingAbilityIcon::Condition' has a wrong offset!");

}

