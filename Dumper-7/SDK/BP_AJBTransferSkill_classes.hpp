#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBTransferSkill

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AJB_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AkAudio_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BP_AJBSkillBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBTransferSkill.BP_AJBTransferSkill_C
// 0x0188 (0x0370 - 0x01E8)
#pragma pack(push, 0x1)
class alignas(0x10) UBP_AJBTransferSkill_C : public UBP_AJBSkillBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBTransferSkill_C;              // 0x01E8(0x0008)(Transient, DuplicateTransient)
	struct FVector                                WorldLocation_LastDistanceCalculation;             // 0x01F0(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoveDistanceMeter_Float;                           // 0x01FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           ActivatedSE;                                       // 0x0200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bReservedCancel_Local;                             // 0x0208(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_209[0x3];                                      // 0x0209(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReadyTime;                                         // 0x020C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TransferTime;                                      // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rep_PrevRotation;                                  // 0x0214(0x000C)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bActivatePossess;                                  // 0x0220(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_221[0x7];                                      // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ReadyStartSETag;                                   // 0x0228(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TransferStartSETag;                                // 0x0230(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TransferStartVoiceTag;                             // 0x0238(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ActionStartVoiceTag;                               // 0x0240(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ActionStartSETag;                                  // 0x0248(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           ActionSE;                                          // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bWaitingReady;                                     // 0x0258(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_259[0x3];                                      // 0x0259(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActionTime;                                        // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Action2Time;                                       // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ClearingTime;                                      // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SafeLocationOffset;                                // 0x0268(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_274[0x4];                                      // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      SafeLocationObjectTypes;                           // 0x0278(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         SafeLocationArroundtraceNum;                       // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SafeLocationArroundTraceIncScale;                  // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           AM_StandTransfer;                                  // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PossessActiveInterval;                             // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ShowGuideState;                                    // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ParticleTag_StandTransfer;                         // 0x02A0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ParticleTag_PropertyStandTransfer;                 // 0x02A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ParticleTag_PropertyStandAction;                   // 0x02B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ParticleTag_TargetAction;                          // 0x02B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ParticleTagStandEnd;                               // 0x02C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ActionStartGionTag;                                // 0x02C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CancelVoiceTag;                                    // 0x02D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bReserveTransfer;                                  // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bReservedTransfer;                                 // 0x02D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPossibleTransfer;                                 // 0x02DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2DB[0x5];                                      // 0x02DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 SpawnPreviewClass;                                 // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 PreviewObject;                                     // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      TraceObjectTypes;                                  // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         TraceHeightBufferUpper;                            // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceHeightBufferLower;                            // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_308[0x8];                                      // 0x0308(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TransferTransform;                                 // 0x0310(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                PreviewOffset;                                     // 0x0340(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bReadyTiming;                                      // 0x034C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShouldMeasuringMoveDistance;                      // 0x034D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34E[0x2];                                      // 0x034E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GroundingTraceDistance;                            // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldRequestStandEndParticle;                    // 0x0354(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_355[0x3];                                      // 0x0355(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               ActionTargetCache;                                 // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESkillState_Transfer                          PreSkillState;                                     // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBTransferSkill(int32 EntryPoint);
	void DestroyPreviewObject_Local(bool bHidePreviewGuide);
	void SpawnPreviewObject_Local();
	void OnClientMovableStandRestarted();
	void OnCharacterClientRestarted();
	void FinishMeasuringMoveDistance();
	void StartMeasuringMoveDistance();
	void OnTick_MeasureMoveDistance();
	void StopMovingSE();
	void ActionCommon();
	void OnBeginState_Action2();
	void TickState_Action2(float DeltaSeconds);
	void OnBeginState_Action2_OneShot();
	void MC_BeginState_Action2();
	void ROS_BeginState_Action2();
	void BeginState_Action2();
	void TickState_Preview(float DeltaSeconds);
	void OnBeginState_Preview();
	void MC_BeginState_ActionServer(class ABP_AJBInGameCharacter_C* TargetCharacter);
	void BeginState_ActionServer(class ABP_AJBInGameCharacter_C* TargetCharacter);
	void OnBeginState_Ready_OneShot();
	void TickState_Action(float DeltaSeconds);
	void OnBeginState_Action(class ABP_AJBInGameCharacter_C* TargetCharacter);
	void OnBeginState_Action_OneShot(class ABP_AJBInGameCharacter_C* TargetCharacter);
	void MC_BeginState_Action(class ABP_AJBInGameCharacter_C* TargetCharacter);
	void ROS_BeginState_Action(class ABP_AJBInGameCharacter_C* TargetCharacter);
	void BeginState_Action(class ABP_AJBInGameCharacter_C* TargetCharacter);
	void ROC_Possess();
	void StateRenaturation_Ready();
	void OnBeginState_Clearing_OneShot();
	void OnBeginState_Transfer_OneShot(const struct FVector& Location, const struct FRotator& Rotation);
	void MC_StateEnd(bool bCancel);
	void ROS_StateEnd(bool bCancel);
	void MC_BeginState_Clearing();
	void ROS_BeginState_Clearing();
	void BeginState_Clearing();
	void MC_BeginState_Transfer(const struct FVector& Location, const struct FRotator& Rotation);
	void ROS_BeginState_Transfer(const struct FVector& Location, const struct FRotator& Rotation);
	void BeginState_Transfer();
	void MC_BeginState_Ready();
	void ROS_BeginState_Ready();
	void BeginState_Ready();
	void TickState_Clearing(float DeltaSeconds);
	void TickState_Transfer(float DeltaSeconds);
	void TickState_Ready(float DeltaSeconds);
	void OnBeginState_Clearing();
	void OnBeginState_Transfer(bool bRenaturation);
	void OnBeginState_Ready();
	void OnStateEnd(bool bCancel, bool bRestore);
	void StateEnd(bool bCancel);
	void StateTick(float DeltaSeconds);
	void OnCompleted_7B45FB9D406D5826C78546BC5BB5E4FC(class FName NotifyName);
	void OnBlendOut_7B45FB9D406D5826C78546BC5BB5E4FC(class FName NotifyName);
	void OnInterrupted_7B45FB9D406D5826C78546BC5BB5E4FC(class FName NotifyName);
	void OnNotifyBegin_7B45FB9D406D5826C78546BC5BB5E4FC(class FName NotifyName);
	void OnNotifyEnd_7B45FB9D406D5826C78546BC5BB5E4FC(class FName NotifyName);
	void CheckImpossibleMovementMode(bool* bImpossibleMovementMode);
	void TryChangeShowGuide(int32 GuideState);
	void AdjustTransform(const struct FVector& Location, const struct FRotator& Rotation);
	void SpawnParticlePropertyStandAction();
	void ReserveTransfer();
	void UpdateTraceInfo();
	void ApplyTraceInfo();
	void ChangePreviewUI(bool bPossibleTransfer_0);
	void SpawnPreviewObjectCore(class AActor** SpawnObject);
	void TryDestroyPreviewObject();
	void TraceTransferTransform(bool* bPossibleTransfer_0, struct FTransform* Transform);
	void ReceiveBeginPlay();
	void OnDisconnected();
	void StateBeginPlay(bool bShouldRestore);
	void OnCancel();
	void OnActive();
	void OnReady();
	void ReceiveTick(float DeltaSeconds);
	void OnRelatedCharacterBecomeLastSurvivor();
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);
	void InitializeVariables();
	void AggregateEffectiveCountWithEffectiveState(uint8 NewState, uint8 PreState);

	bool IsInPreview() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBTransferSkill_C">();
	}
	static class UBP_AJBTransferSkill_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBTransferSkill_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(UBP_AJBTransferSkill_C) == 0x000010, "Wrong alignment on UBP_AJBTransferSkill_C");
static_assert(sizeof(UBP_AJBTransferSkill_C) == 0x000370, "Wrong size on UBP_AJBTransferSkill_C");
static_assert(offsetof(UBP_AJBTransferSkill_C, UberGraphFrame_BP_AJBTransferSkill_C) == 0x0001E8, "Member 'UBP_AJBTransferSkill_C::UberGraphFrame_BP_AJBTransferSkill_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, WorldLocation_LastDistanceCalculation) == 0x0001F0, "Member 'UBP_AJBTransferSkill_C::WorldLocation_LastDistanceCalculation' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, MoveDistanceMeter_Float) == 0x0001FC, "Member 'UBP_AJBTransferSkill_C::MoveDistanceMeter_Float' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, ActivatedSE) == 0x000200, "Member 'UBP_AJBTransferSkill_C::ActivatedSE' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, bReservedCancel_Local) == 0x000208, "Member 'UBP_AJBTransferSkill_C::bReservedCancel_Local' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, ReadyTime) == 0x00020C, "Member 'UBP_AJBTransferSkill_C::ReadyTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, TransferTime) == 0x000210, "Member 'UBP_AJBTransferSkill_C::TransferTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, Rep_PrevRotation) == 0x000214, "Member 'UBP_AJBTransferSkill_C::Rep_PrevRotation' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, bActivatePossess) == 0x000220, "Member 'UBP_AJBTransferSkill_C::bActivatePossess' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, ReadyStartSETag) == 0x000228, "Member 'UBP_AJBTransferSkill_C::ReadyStartSETag' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, TransferStartSETag) == 0x000230, "Member 'UBP_AJBTransferSkill_C::TransferStartSETag' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, TransferStartVoiceTag) == 0x000238, "Member 'UBP_AJBTransferSkill_C::TransferStartVoiceTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, ActionStartVoiceTag) == 0x000240, "Member 'UBP_AJBTransferSkill_C::ActionStartVoiceTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, ActionStartSETag) == 0x000248, "Member 'UBP_AJBTransferSkill_C::ActionStartSETag' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, ActionSE) == 0x000250, "Member 'UBP_AJBTransferSkill_C::ActionSE' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, bWaitingReady) == 0x000258, "Member 'UBP_AJBTransferSkill_C::bWaitingReady' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, ActionTime) == 0x00025C, "Member 'UBP_AJBTransferSkill_C::ActionTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, Action2Time) == 0x000260, "Member 'UBP_AJBTransferSkill_C::Action2Time' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, ClearingTime) == 0x000264, "Member 'UBP_AJBTransferSkill_C::ClearingTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, SafeLocationOffset) == 0x000268, "Member 'UBP_AJBTransferSkill_C::SafeLocationOffset' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, SafeLocationObjectTypes) == 0x000278, "Member 'UBP_AJBTransferSkill_C::SafeLocationObjectTypes' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, SafeLocationArroundtraceNum) == 0x000288, "Member 'UBP_AJBTransferSkill_C::SafeLocationArroundtraceNum' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, SafeLocationArroundTraceIncScale) == 0x00028C, "Member 'UBP_AJBTransferSkill_C::SafeLocationArroundTraceIncScale' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, AM_StandTransfer) == 0x000290, "Member 'UBP_AJBTransferSkill_C::AM_StandTransfer' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, PossessActiveInterval) == 0x000298, "Member 'UBP_AJBTransferSkill_C::PossessActiveInterval' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, ShowGuideState) == 0x00029C, "Member 'UBP_AJBTransferSkill_C::ShowGuideState' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, ParticleTag_StandTransfer) == 0x0002A0, "Member 'UBP_AJBTransferSkill_C::ParticleTag_StandTransfer' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, ParticleTag_PropertyStandTransfer) == 0x0002A8, "Member 'UBP_AJBTransferSkill_C::ParticleTag_PropertyStandTransfer' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, ParticleTag_PropertyStandAction) == 0x0002B0, "Member 'UBP_AJBTransferSkill_C::ParticleTag_PropertyStandAction' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, ParticleTag_TargetAction) == 0x0002B8, "Member 'UBP_AJBTransferSkill_C::ParticleTag_TargetAction' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, ParticleTagStandEnd) == 0x0002C0, "Member 'UBP_AJBTransferSkill_C::ParticleTagStandEnd' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, ActionStartGionTag) == 0x0002C8, "Member 'UBP_AJBTransferSkill_C::ActionStartGionTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, CancelVoiceTag) == 0x0002D0, "Member 'UBP_AJBTransferSkill_C::CancelVoiceTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, bReserveTransfer) == 0x0002D8, "Member 'UBP_AJBTransferSkill_C::bReserveTransfer' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, bReservedTransfer) == 0x0002D9, "Member 'UBP_AJBTransferSkill_C::bReservedTransfer' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, bPossibleTransfer) == 0x0002DA, "Member 'UBP_AJBTransferSkill_C::bPossibleTransfer' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, SpawnPreviewClass) == 0x0002E0, "Member 'UBP_AJBTransferSkill_C::SpawnPreviewClass' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, PreviewObject) == 0x0002E8, "Member 'UBP_AJBTransferSkill_C::PreviewObject' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, TraceObjectTypes) == 0x0002F0, "Member 'UBP_AJBTransferSkill_C::TraceObjectTypes' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, TraceHeightBufferUpper) == 0x000300, "Member 'UBP_AJBTransferSkill_C::TraceHeightBufferUpper' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, TraceHeightBufferLower) == 0x000304, "Member 'UBP_AJBTransferSkill_C::TraceHeightBufferLower' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, TransferTransform) == 0x000310, "Member 'UBP_AJBTransferSkill_C::TransferTransform' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, PreviewOffset) == 0x000340, "Member 'UBP_AJBTransferSkill_C::PreviewOffset' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, bReadyTiming) == 0x00034C, "Member 'UBP_AJBTransferSkill_C::bReadyTiming' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, bShouldMeasuringMoveDistance) == 0x00034D, "Member 'UBP_AJBTransferSkill_C::bShouldMeasuringMoveDistance' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, GroundingTraceDistance) == 0x000350, "Member 'UBP_AJBTransferSkill_C::GroundingTraceDistance' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, bShouldRequestStandEndParticle) == 0x000354, "Member 'UBP_AJBTransferSkill_C::bShouldRequestStandEndParticle' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, ActionTargetCache) == 0x000358, "Member 'UBP_AJBTransferSkill_C::ActionTargetCache' has a wrong offset!");
static_assert(offsetof(UBP_AJBTransferSkill_C, PreSkillState) == 0x000360, "Member 'UBP_AJBTransferSkill_C::PreSkillState' has a wrong offset!");

}

