#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBHistoryManageComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AJB_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BP_AJBComponentBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C
// 0x00B8 (0x01A8 - 0x00F0)
class UBP_AJBHistoryManageComponent_C : public UBP_AJBComponentBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00F0(0x0008)(Transient, DuplicateTransient)
	class UClass*                                 HistoryActorClass;                                 // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time_s_;                                           // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Frequency_s_;                                      // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance_cm_;                                      // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CheckInterval_s_;                                  // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FAJBHistoryInfo>                PrevHistoryInfoList;                               // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FAJBHistoryInfo>                CurrentHistoryInfoList;                            // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class ABP_AJBHistoryActorBase_C*>      HistoryActorList;                                  // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          bDebugShowDistance;                                // 0x0140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInfinityDistance;                                 // 0x0141(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_142[0x6];                                      // 0x0142(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_AJBInGameCharacter_C*>       IgnoreDistanceTargetList;                          // 0x0148(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<float>                                 IgnoreDistanceLifeTimeList;                        // 0x0158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         IgnoreDistanceTime;                                // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ValidTag;                                          // 0x0170(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 IgnoreDistancePlayerIDList;                        // 0x0178(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance)
	int32                                         IgnoreDistanceLimit;                               // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastAddedTime;                                     // 0x018C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastAccessedHistoryTime;                           // 0x0190(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRequireStandIgnoreDistance;                       // 0x0194(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_195[0x3];                                      // 0x0195(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LandingTraceBuffer;                                // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LandingTraceLength;                                // 0x019C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DelayTimeOnDestroy;                                // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebugShowHistoryInfo;                             // 0x01A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDuringTimeStop;                                   // 0x01A5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_AJBHistoryManageComponent(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void AddIgnoreDistanceTargetServer(class ABP_AJBInGameCharacter_C* TargetCharacterBP, const struct FDateTime& AccessedHistoryDateTime);
	void Check();
	void ReceiveBeginPlay();
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);
	void OnRelatedCharacterBecomeLastSurvivor();
	void GetHistoryAfterOnlyExists(TArray<struct FAJBHistoryInfo>& Before, TArray<struct FAJBHistoryInfo>& After, TArray<struct FAJBHistoryInfo>* Result);
	void UpdateHistoryInfo();
	void UpdateHistoryActors();
	void GetPoliticDistance(float* Distance);
	void CollectHistoryInfoList(TArray<struct FAJBHistoryInfo>* HistoryInfoList);
	void MakeIgnoreDistancePlayerIDList(TArray<int32>* List);
	void UpdateHistoryPerPlayerID();
	void UpdateHistoryWithPlayerID(int32 PlayerID);
	void RemoveTarget(class ABP_AJBInGameCharacter_C* TargetCharacterBP);
	void RemoveTargetByIndex(int32 Index_0);
	void AddTarget(class ABP_AJBInGameCharacter_C* TargetCharacterBP);
	void UpdateLeftTime(float DeltaSeconds, TArray<int32>* RemoveIndexes);
	void MakeIgnorePlayerIDList(TArray<int32>* IgnorePlayerIDList);
	void CheckIgnoreDistanceLimit(bool* bLimit);
	void RemoveMostOldestTarget();
	void ShouldAllRemoveTarget(bool* bShouldRemove);
	void RemoveAllTarget();
	void ShouldSpawn(const struct FVector& Location, bool* bShouldSpawn, struct FVector* NewLocation);
	void TryDestroyHistoryActorListAll();
	void TryDestroyHistoryActorListByIndex(int32 Index_0);
	void GetPoliticOwnerLocation(struct FVector* Location);
	void ResetHistoryInfoList();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBHistoryManageComponent_C">();
	}
	static class UBP_AJBHistoryManageComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBHistoryManageComponent_C>();
	}
};
static_assert(alignof(UBP_AJBHistoryManageComponent_C) == 0x000008, "Wrong alignment on UBP_AJBHistoryManageComponent_C");
static_assert(sizeof(UBP_AJBHistoryManageComponent_C) == 0x0001A8, "Wrong size on UBP_AJBHistoryManageComponent_C");
static_assert(offsetof(UBP_AJBHistoryManageComponent_C, UberGraphFrame) == 0x0000F0, "Member 'UBP_AJBHistoryManageComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_AJBHistoryManageComponent_C, HistoryActorClass) == 0x0000F8, "Member 'UBP_AJBHistoryManageComponent_C::HistoryActorClass' has a wrong offset!");
static_assert(offsetof(UBP_AJBHistoryManageComponent_C, Time_s_) == 0x000100, "Member 'UBP_AJBHistoryManageComponent_C::Time_s_' has a wrong offset!");
static_assert(offsetof(UBP_AJBHistoryManageComponent_C, Frequency_s_) == 0x000104, "Member 'UBP_AJBHistoryManageComponent_C::Frequency_s_' has a wrong offset!");
static_assert(offsetof(UBP_AJBHistoryManageComponent_C, Distance_cm_) == 0x000108, "Member 'UBP_AJBHistoryManageComponent_C::Distance_cm_' has a wrong offset!");
static_assert(offsetof(UBP_AJBHistoryManageComponent_C, CheckInterval_s_) == 0x00010C, "Member 'UBP_AJBHistoryManageComponent_C::CheckInterval_s_' has a wrong offset!");
static_assert(offsetof(UBP_AJBHistoryManageComponent_C, PrevHistoryInfoList) == 0x000110, "Member 'UBP_AJBHistoryManageComponent_C::PrevHistoryInfoList' has a wrong offset!");
static_assert(offsetof(UBP_AJBHistoryManageComponent_C, CurrentHistoryInfoList) == 0x000120, "Member 'UBP_AJBHistoryManageComponent_C::CurrentHistoryInfoList' has a wrong offset!");
static_assert(offsetof(UBP_AJBHistoryManageComponent_C, HistoryActorList) == 0x000130, "Member 'UBP_AJBHistoryManageComponent_C::HistoryActorList' has a wrong offset!");
static_assert(offsetof(UBP_AJBHistoryManageComponent_C, bDebugShowDistance) == 0x000140, "Member 'UBP_AJBHistoryManageComponent_C::bDebugShowDistance' has a wrong offset!");
static_assert(offsetof(UBP_AJBHistoryManageComponent_C, bInfinityDistance) == 0x000141, "Member 'UBP_AJBHistoryManageComponent_C::bInfinityDistance' has a wrong offset!");
static_assert(offsetof(UBP_AJBHistoryManageComponent_C, IgnoreDistanceTargetList) == 0x000148, "Member 'UBP_AJBHistoryManageComponent_C::IgnoreDistanceTargetList' has a wrong offset!");
static_assert(offsetof(UBP_AJBHistoryManageComponent_C, IgnoreDistanceLifeTimeList) == 0x000158, "Member 'UBP_AJBHistoryManageComponent_C::IgnoreDistanceLifeTimeList' has a wrong offset!");
static_assert(offsetof(UBP_AJBHistoryManageComponent_C, IgnoreDistanceTime) == 0x000168, "Member 'UBP_AJBHistoryManageComponent_C::IgnoreDistanceTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBHistoryManageComponent_C, ValidTag) == 0x000170, "Member 'UBP_AJBHistoryManageComponent_C::ValidTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBHistoryManageComponent_C, IgnoreDistancePlayerIDList) == 0x000178, "Member 'UBP_AJBHistoryManageComponent_C::IgnoreDistancePlayerIDList' has a wrong offset!");
static_assert(offsetof(UBP_AJBHistoryManageComponent_C, IgnoreDistanceLimit) == 0x000188, "Member 'UBP_AJBHistoryManageComponent_C::IgnoreDistanceLimit' has a wrong offset!");
static_assert(offsetof(UBP_AJBHistoryManageComponent_C, LastAddedTime) == 0x00018C, "Member 'UBP_AJBHistoryManageComponent_C::LastAddedTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBHistoryManageComponent_C, LastAccessedHistoryTime) == 0x000190, "Member 'UBP_AJBHistoryManageComponent_C::LastAccessedHistoryTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBHistoryManageComponent_C, bRequireStandIgnoreDistance) == 0x000194, "Member 'UBP_AJBHistoryManageComponent_C::bRequireStandIgnoreDistance' has a wrong offset!");
static_assert(offsetof(UBP_AJBHistoryManageComponent_C, LandingTraceBuffer) == 0x000198, "Member 'UBP_AJBHistoryManageComponent_C::LandingTraceBuffer' has a wrong offset!");
static_assert(offsetof(UBP_AJBHistoryManageComponent_C, LandingTraceLength) == 0x00019C, "Member 'UBP_AJBHistoryManageComponent_C::LandingTraceLength' has a wrong offset!");
static_assert(offsetof(UBP_AJBHistoryManageComponent_C, DelayTimeOnDestroy) == 0x0001A0, "Member 'UBP_AJBHistoryManageComponent_C::DelayTimeOnDestroy' has a wrong offset!");
static_assert(offsetof(UBP_AJBHistoryManageComponent_C, bDebugShowHistoryInfo) == 0x0001A4, "Member 'UBP_AJBHistoryManageComponent_C::bDebugShowHistoryInfo' has a wrong offset!");
static_assert(offsetof(UBP_AJBHistoryManageComponent_C, bDuringTimeStop) == 0x0001A5, "Member 'UBP_AJBHistoryManageComponent_C::bDuringTimeStop' has a wrong offset!");

}

