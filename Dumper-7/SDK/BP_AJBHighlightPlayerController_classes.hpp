#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBHighlightPlayerController

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ST_AllCharaHighlightSkillKey_structs.hpp"
#include "ST_HighlightLivingCount_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AJB_structs.hpp"
#include "ST_HighlightKillKey_structs.hpp"
#include "ST_HighlightKillInfo_structs.hpp"
#include "ST_HighlightSkillKey_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BP_AJBInGamePlayerController_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBHighlightPlayerController.BP_AJBHighlightPlayerController_C
// 0x0140 (0x0A28 - 0x08E8)
class ABP_AJBHighlightPlayerController_C final : public ABP_AJBInGamePlayerController_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBHighlightPlayerController_C;  // 0x08E8(0x0008)(Transient, DuplicateTransient)
	class ABP_AJBInGameCharacter_C*               TargetChara;                                       // 0x08F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ElapsedTime;                                       // 0x08F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8FC[0x4];                                      // 0x08FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_HighlightKillKey>           KillTimeLine;                                      // 0x0900(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	EAJBSkillType                                 CurrentSkillType;                                  // 0x0910(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_911[0x3];                                      // 0x0911(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastKilledTime;                                    // 0x0914(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FST_HighlightSkillKey>          SkillTimeLine;                                     // 0x0918(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FST_HighlightKillInfo                  HighlightTarget;                                   // 0x0928(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         CalcedHighlightTargetTime;                         // 0x0934(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           HighlighetRemainingTimer;                          // 0x0938(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	float                                         HighlightLength;                                   // 0x0940(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_944[0x4];                                      // 0x0944(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_AllCharaHighlightSkillKey>  AllSkillTimeLine;                                  // 0x0948(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UBP_AJBSkillBase_C*                     NewVar_0;                                          // 0x0958(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OverSeekTime;                                      // 0x0960(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_964[0x4];                                      // 0x0964(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnSeekedHighlight;                                 // 0x0968(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UWB_Highlight_LoadingWindow_C*          HidhlightLoadingWidget;                            // 0x0978(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         maxFPS;                                            // 0x0980(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_984[0x4];                                      // 0x0984(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBVideoRecorder*                      VideoRecorder;                                     // 0x0988(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           HighlightBGMTag;                                   // 0x0990(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, float>                      AudioRTPCValues;                                   // 0x0998(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FTimerHandle                           PrpogressBarTimer;                                 // 0x09E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	float                                         ProgressDist;                                      // 0x09F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurProgress;                                       // 0x09F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FindFocusCharaTime;                                // 0x09F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9FC[0x4];                                      // 0x09FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              FindFocusStart;                                    // 0x0A00(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FST_HighlightLivingCount>       LivingCountTimeline;                               // 0x0A08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          bUpdateProgressBar;                                // 0x0A18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A19[0x7];                                      // 0x0A19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_HighlightFader_C*                   WB_HighlightFader;                                 // 0x0A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBHighlightPlayerController(int32 EntryPoint);
	void OnHighlightPlayEnd();
	void OnHighlightPlayBegin();
	void OnHighlightLoadBegin();
	void OnGiveDamage(int32 Damage, const struct FGameplayTag& DamageType, class AActor* DamageReceiver, bool bRemainHP, bool bDamageIsCut, int32 SerialNumber, bool IsPlayer, bool bSeparatedStandAttack, bool bHitEnemysSeparateStand, bool bSelfDamage, bool IsEndured);
	void OnChangeLivingPlayerCount(int32 LivingPlayerCount, int32 LivingPairCount);
	void OnAllSkillInActivated(class UBP_AJBSkillBase_C* InactivatedSkill);
	void OnAllSkillActivated(class UBP_AJBSkillBase_C* ActivatedSkill);
	void DebugFullReplay();
	void RequestStopReplay();
	void OnInactivateSkill(class UBP_AJBSkillBase_C* InactivatedSkill);
	void OnActivateSkill(class UBP_AJBSkillBase_C* ActivatedSkill);
	void OnBeginRecordingHighlight();
	void RecordingTick(float DeltaSeconds);
	void OnAllLevelLoaded();
	void OnRequestFadeIn();
	void OnFinishedFadeIn();
	void OnUpdateProgressBar();
	void OnStopRecording();
	void Timeout();
	void OnBeginPlayHighlight();
	void HighlightPlayingTick(float DeltaSeconds);
	void DebugTick(float DeltaSeconds);
	void Finished_43540537470BC52D1B97C7B58AACC4AB();
	void Finished_2B3B46CD40BAFFB8C07444930896E2C3();
	void Finished_25E23E6F42603C4711B3A293F0C56C7C();
	void CalcHighlightTargetTime(float* Time);
	void CalcKillInfo(struct FST_HighlightKillKey& TargetKey, struct FST_HighlightKillInfo* Info, bool* NotHighilghtKill);
	void PriorityCheck(const struct FST_HighlightKillInfo& Target, const struct FST_HighlightKillInfo& Source, bool* TargetIsHighPriority);
	void KillinfoToPriority(struct FST_HighlightKillInfo& InInfo, int32* Priority);
	void CalcSeekTargetTime(float HighlightTargetTime, float* seekTarget, class FString* TargetSkillName);
	void DumpAllSkillsTimeLine();
	void UpdateProgressBar();
	void GetLivingCountForHighlight(float TargetTime, int32* LivingPlayerCount, int32* LivingPairCount);
	void UpdateTime();
	bool IsRecordingHighlight();
	bool IsPlayingHighlight();
	void OnBeginRecordingBind();
	void DebugPrintKillKind();
	void DebugPrintHighlightTime();
	void DebugPrintReplayDataCreated(float HighlightSeekTargetTime, const class FString& SkillName);
	void SeekToHighlightTime();
	void TryDestroyDefaultListener();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBHighlightPlayerController_C">();
	}
	static class ABP_AJBHighlightPlayerController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBHighlightPlayerController_C>();
	}
};
static_assert(alignof(ABP_AJBHighlightPlayerController_C) == 0x000008, "Wrong alignment on ABP_AJBHighlightPlayerController_C");
static_assert(sizeof(ABP_AJBHighlightPlayerController_C) == 0x000A28, "Wrong size on ABP_AJBHighlightPlayerController_C");
static_assert(offsetof(ABP_AJBHighlightPlayerController_C, UberGraphFrame_BP_AJBHighlightPlayerController_C) == 0x0008E8, "Member 'ABP_AJBHighlightPlayerController_C::UberGraphFrame_BP_AJBHighlightPlayerController_C' has a wrong offset!");
static_assert(offsetof(ABP_AJBHighlightPlayerController_C, TargetChara) == 0x0008F0, "Member 'ABP_AJBHighlightPlayerController_C::TargetChara' has a wrong offset!");
static_assert(offsetof(ABP_AJBHighlightPlayerController_C, ElapsedTime) == 0x0008F8, "Member 'ABP_AJBHighlightPlayerController_C::ElapsedTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBHighlightPlayerController_C, KillTimeLine) == 0x000900, "Member 'ABP_AJBHighlightPlayerController_C::KillTimeLine' has a wrong offset!");
static_assert(offsetof(ABP_AJBHighlightPlayerController_C, CurrentSkillType) == 0x000910, "Member 'ABP_AJBHighlightPlayerController_C::CurrentSkillType' has a wrong offset!");
static_assert(offsetof(ABP_AJBHighlightPlayerController_C, LastKilledTime) == 0x000914, "Member 'ABP_AJBHighlightPlayerController_C::LastKilledTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBHighlightPlayerController_C, SkillTimeLine) == 0x000918, "Member 'ABP_AJBHighlightPlayerController_C::SkillTimeLine' has a wrong offset!");
static_assert(offsetof(ABP_AJBHighlightPlayerController_C, HighlightTarget) == 0x000928, "Member 'ABP_AJBHighlightPlayerController_C::HighlightTarget' has a wrong offset!");
static_assert(offsetof(ABP_AJBHighlightPlayerController_C, CalcedHighlightTargetTime) == 0x000934, "Member 'ABP_AJBHighlightPlayerController_C::CalcedHighlightTargetTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBHighlightPlayerController_C, HighlighetRemainingTimer) == 0x000938, "Member 'ABP_AJBHighlightPlayerController_C::HighlighetRemainingTimer' has a wrong offset!");
static_assert(offsetof(ABP_AJBHighlightPlayerController_C, HighlightLength) == 0x000940, "Member 'ABP_AJBHighlightPlayerController_C::HighlightLength' has a wrong offset!");
static_assert(offsetof(ABP_AJBHighlightPlayerController_C, AllSkillTimeLine) == 0x000948, "Member 'ABP_AJBHighlightPlayerController_C::AllSkillTimeLine' has a wrong offset!");
static_assert(offsetof(ABP_AJBHighlightPlayerController_C, NewVar_0) == 0x000958, "Member 'ABP_AJBHighlightPlayerController_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(ABP_AJBHighlightPlayerController_C, OverSeekTime) == 0x000960, "Member 'ABP_AJBHighlightPlayerController_C::OverSeekTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBHighlightPlayerController_C, OnSeekedHighlight) == 0x000968, "Member 'ABP_AJBHighlightPlayerController_C::OnSeekedHighlight' has a wrong offset!");
static_assert(offsetof(ABP_AJBHighlightPlayerController_C, HidhlightLoadingWidget) == 0x000978, "Member 'ABP_AJBHighlightPlayerController_C::HidhlightLoadingWidget' has a wrong offset!");
static_assert(offsetof(ABP_AJBHighlightPlayerController_C, maxFPS) == 0x000980, "Member 'ABP_AJBHighlightPlayerController_C::maxFPS' has a wrong offset!");
static_assert(offsetof(ABP_AJBHighlightPlayerController_C, VideoRecorder) == 0x000988, "Member 'ABP_AJBHighlightPlayerController_C::VideoRecorder' has a wrong offset!");
static_assert(offsetof(ABP_AJBHighlightPlayerController_C, HighlightBGMTag) == 0x000990, "Member 'ABP_AJBHighlightPlayerController_C::HighlightBGMTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBHighlightPlayerController_C, AudioRTPCValues) == 0x000998, "Member 'ABP_AJBHighlightPlayerController_C::AudioRTPCValues' has a wrong offset!");
static_assert(offsetof(ABP_AJBHighlightPlayerController_C, PrpogressBarTimer) == 0x0009E8, "Member 'ABP_AJBHighlightPlayerController_C::PrpogressBarTimer' has a wrong offset!");
static_assert(offsetof(ABP_AJBHighlightPlayerController_C, ProgressDist) == 0x0009F0, "Member 'ABP_AJBHighlightPlayerController_C::ProgressDist' has a wrong offset!");
static_assert(offsetof(ABP_AJBHighlightPlayerController_C, CurProgress) == 0x0009F4, "Member 'ABP_AJBHighlightPlayerController_C::CurProgress' has a wrong offset!");
static_assert(offsetof(ABP_AJBHighlightPlayerController_C, FindFocusCharaTime) == 0x0009F8, "Member 'ABP_AJBHighlightPlayerController_C::FindFocusCharaTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBHighlightPlayerController_C, FindFocusStart) == 0x000A00, "Member 'ABP_AJBHighlightPlayerController_C::FindFocusStart' has a wrong offset!");
static_assert(offsetof(ABP_AJBHighlightPlayerController_C, LivingCountTimeline) == 0x000A08, "Member 'ABP_AJBHighlightPlayerController_C::LivingCountTimeline' has a wrong offset!");
static_assert(offsetof(ABP_AJBHighlightPlayerController_C, bUpdateProgressBar) == 0x000A18, "Member 'ABP_AJBHighlightPlayerController_C::bUpdateProgressBar' has a wrong offset!");
static_assert(offsetof(ABP_AJBHighlightPlayerController_C, WB_HighlightFader) == 0x000A20, "Member 'ABP_AJBHighlightPlayerController_C::WB_HighlightFader' has a wrong offset!");

}

