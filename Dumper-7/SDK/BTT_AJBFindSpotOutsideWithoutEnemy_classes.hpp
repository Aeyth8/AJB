#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_AJBFindSpotOutsideWithoutEnemy

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTT_AJBFindSpotOutsideWithoutEnemy.BTT_AJBFindSpotOutsideWithoutEnemy_C
// 0x0150 (0x01F0 - 0x00A0)
class UBTT_AJBFindSpotOutsideWithoutEnemy_C final : public UBTTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(Transient, DuplicateTransient)
	struct FBlackboardKeySelector                 SpotKey;                                           // 0x00A8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly)
	struct FBlackboardKeySelector                 PathToSpotKey;                                     // 0x00D0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly)
	class UBP_AJBInGameAIRecognition_C*           Recognition;                                       // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          My_AI_Controller;                                  // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBlackboardKeySelector                 RO_MovingGionKey;                                  // 0x0108(0x0028)(Edit, BlueprintVisible)
	class ABP_AJBInGameAIImaginaryCharacter_C*    ImaginarySelf;                                     // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        LocationCandidates;                                // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FBlackboardKeySelector                 RO_AttackingGionKey;                               // 0x0148(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 GateActorKey;                                      // 0x0170(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly)
	struct FBlackboardKeySelector                 LookForDirKey;                                     // 0x0198(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly)
	float                                         ProbabilityToExploreHouseParam;                    // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ProbabilityToExploreHouse;                         // 0x01C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ProbabilityToExploreHouseAtSmallSafeArea;          // 0x01D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ProbabilityToApproachMovingGion;                   // 0x01D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ProbabilityToApproachMovingGionParam;              // 0x01E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ProbabilityToApproachMovingGionAtSmallSafeArea;    // 0x01E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BTT_AJBFindSpotOutsideWithoutEnemy(int32 EntryPoint);
	void FindSpotAroundCurrentArea();
	void FindSpotInSaferArea();
	void FindSpotToApproachExpectedEnemy(const struct FVector& ExpectedLocationOfEnemy, const struct FGameplayTag& ContextTag);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void SetSpotAndPathThenFinish(const struct FVector& Spot);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTT_AJBFindSpotOutsideWithoutEnemy_C">();
	}
	static class UBTT_AJBFindSpotOutsideWithoutEnemy_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTT_AJBFindSpotOutsideWithoutEnemy_C>();
	}
};
static_assert(alignof(UBTT_AJBFindSpotOutsideWithoutEnemy_C) == 0x000008, "Wrong alignment on UBTT_AJBFindSpotOutsideWithoutEnemy_C");
static_assert(sizeof(UBTT_AJBFindSpotOutsideWithoutEnemy_C) == 0x0001F0, "Wrong size on UBTT_AJBFindSpotOutsideWithoutEnemy_C");
static_assert(offsetof(UBTT_AJBFindSpotOutsideWithoutEnemy_C, UberGraphFrame) == 0x0000A0, "Member 'UBTT_AJBFindSpotOutsideWithoutEnemy_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTT_AJBFindSpotOutsideWithoutEnemy_C, SpotKey) == 0x0000A8, "Member 'UBTT_AJBFindSpotOutsideWithoutEnemy_C::SpotKey' has a wrong offset!");
static_assert(offsetof(UBTT_AJBFindSpotOutsideWithoutEnemy_C, PathToSpotKey) == 0x0000D0, "Member 'UBTT_AJBFindSpotOutsideWithoutEnemy_C::PathToSpotKey' has a wrong offset!");
static_assert(offsetof(UBTT_AJBFindSpotOutsideWithoutEnemy_C, Recognition) == 0x0000F8, "Member 'UBTT_AJBFindSpotOutsideWithoutEnemy_C::Recognition' has a wrong offset!");
static_assert(offsetof(UBTT_AJBFindSpotOutsideWithoutEnemy_C, My_AI_Controller) == 0x000100, "Member 'UBTT_AJBFindSpotOutsideWithoutEnemy_C::My_AI_Controller' has a wrong offset!");
static_assert(offsetof(UBTT_AJBFindSpotOutsideWithoutEnemy_C, RO_MovingGionKey) == 0x000108, "Member 'UBTT_AJBFindSpotOutsideWithoutEnemy_C::RO_MovingGionKey' has a wrong offset!");
static_assert(offsetof(UBTT_AJBFindSpotOutsideWithoutEnemy_C, ImaginarySelf) == 0x000130, "Member 'UBTT_AJBFindSpotOutsideWithoutEnemy_C::ImaginarySelf' has a wrong offset!");
static_assert(offsetof(UBTT_AJBFindSpotOutsideWithoutEnemy_C, LocationCandidates) == 0x000138, "Member 'UBTT_AJBFindSpotOutsideWithoutEnemy_C::LocationCandidates' has a wrong offset!");
static_assert(offsetof(UBTT_AJBFindSpotOutsideWithoutEnemy_C, RO_AttackingGionKey) == 0x000148, "Member 'UBTT_AJBFindSpotOutsideWithoutEnemy_C::RO_AttackingGionKey' has a wrong offset!");
static_assert(offsetof(UBTT_AJBFindSpotOutsideWithoutEnemy_C, GateActorKey) == 0x000170, "Member 'UBTT_AJBFindSpotOutsideWithoutEnemy_C::GateActorKey' has a wrong offset!");
static_assert(offsetof(UBTT_AJBFindSpotOutsideWithoutEnemy_C, LookForDirKey) == 0x000198, "Member 'UBTT_AJBFindSpotOutsideWithoutEnemy_C::LookForDirKey' has a wrong offset!");
static_assert(offsetof(UBTT_AJBFindSpotOutsideWithoutEnemy_C, ProbabilityToExploreHouseParam) == 0x0001C0, "Member 'UBTT_AJBFindSpotOutsideWithoutEnemy_C::ProbabilityToExploreHouseParam' has a wrong offset!");
static_assert(offsetof(UBTT_AJBFindSpotOutsideWithoutEnemy_C, ProbabilityToExploreHouse) == 0x0001C8, "Member 'UBTT_AJBFindSpotOutsideWithoutEnemy_C::ProbabilityToExploreHouse' has a wrong offset!");
static_assert(offsetof(UBTT_AJBFindSpotOutsideWithoutEnemy_C, ProbabilityToExploreHouseAtSmallSafeArea) == 0x0001D0, "Member 'UBTT_AJBFindSpotOutsideWithoutEnemy_C::ProbabilityToExploreHouseAtSmallSafeArea' has a wrong offset!");
static_assert(offsetof(UBTT_AJBFindSpotOutsideWithoutEnemy_C, ProbabilityToApproachMovingGion) == 0x0001D8, "Member 'UBTT_AJBFindSpotOutsideWithoutEnemy_C::ProbabilityToApproachMovingGion' has a wrong offset!");
static_assert(offsetof(UBTT_AJBFindSpotOutsideWithoutEnemy_C, ProbabilityToApproachMovingGionParam) == 0x0001E0, "Member 'UBTT_AJBFindSpotOutsideWithoutEnemy_C::ProbabilityToApproachMovingGionParam' has a wrong offset!");
static_assert(offsetof(UBTT_AJBFindSpotOutsideWithoutEnemy_C, ProbabilityToApproachMovingGionAtSmallSafeArea) == 0x0001E8, "Member 'UBTT_AJBFindSpotOutsideWithoutEnemy_C::ProbabilityToApproachMovingGionAtSmallSafeArea' has a wrong offset!");

}

