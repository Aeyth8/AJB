#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_RecordingMarkerWidget

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AJB_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_RecordingMarkerWidget.WB_RecordingMarkerWidget_C
// 0x00C0 (0x0308 - 0x0248)
class UWB_RecordingMarkerWidget_C final : public UAJBUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0248(0x0008)(Transient, DuplicateTransient)
	class UWidgetAnimation*                       VanishFadeOut;                                     // 0x0250(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetAnimation*                       VanishFadeIn;                                      // 0x0258(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              AJBImage_0;                                        // 0x0260(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBRetainerBox*                        AJBRetainerBox_Text;                               // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           CanvasPanel_0;                                     // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScaleBox*                              ScaleBox_10;                                       // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          TotalHealth;                                       // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          TotalHealth_Slash;                                 // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          TotalHealthMax;                                    // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class AAJBInGameCharacterBase*                TargetCharacter;                                   // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceNear;                                      // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceMiddle;                                    // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceFar;                                       // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AC[0x4];                                      // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               DMI_Circle;                                        // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DMI_Text;                                          // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDamageDirection;                                  // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C1[0x3];                                      // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DamageDirectionTime;                               // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TimerHandleDamageDirection;                        // 0x02C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	int32                                         PrevHP;                                            // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RandomMin;                                         // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RandomMAX;                                         // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AvailableDistanceMin;                              // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AvailableDistanceMax;                              // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ScaleCache;                                        // 0x02E4(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCalcCheckPoint;                                   // 0x02EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2ED[0x3];                                      // 0x02ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetSizeMin;                                     // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetSizeMax;                                     // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleMax;                                          // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleMiddle;                                       // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleMin;                                          // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldUpdate;                                     // 0x0304(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_WB_RecordingMarkerWidget(int32 EntryPoint);
	void Construct();
	void EndUpdate();
	void BeginUpdate();
	void Update();
	void UpdateParameter();
	void UpdateLocation();
	void EndDamageDirection();
	void StartDamageDirection(int32 Value);
	float PlayVanishFade(bool bIsFadeOut);
	void CalcRandomRange(int32 Value);
	void CalcScale(struct FVector2D* Scale);
	void CalcCharacterCheckPoint(struct FVector* Point1, struct FVector* Point2);
	void PauseCurrentAnimation(bool bPause);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_RecordingMarkerWidget_C">();
	}
	static class UWB_RecordingMarkerWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_RecordingMarkerWidget_C>();
	}
};
static_assert(alignof(UWB_RecordingMarkerWidget_C) == 0x000008, "Wrong alignment on UWB_RecordingMarkerWidget_C");
static_assert(sizeof(UWB_RecordingMarkerWidget_C) == 0x000308, "Wrong size on UWB_RecordingMarkerWidget_C");
static_assert(offsetof(UWB_RecordingMarkerWidget_C, UberGraphFrame) == 0x000248, "Member 'UWB_RecordingMarkerWidget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_RecordingMarkerWidget_C, VanishFadeOut) == 0x000250, "Member 'UWB_RecordingMarkerWidget_C::VanishFadeOut' has a wrong offset!");
static_assert(offsetof(UWB_RecordingMarkerWidget_C, VanishFadeIn) == 0x000258, "Member 'UWB_RecordingMarkerWidget_C::VanishFadeIn' has a wrong offset!");
static_assert(offsetof(UWB_RecordingMarkerWidget_C, AJBImage_0) == 0x000260, "Member 'UWB_RecordingMarkerWidget_C::AJBImage_0' has a wrong offset!");
static_assert(offsetof(UWB_RecordingMarkerWidget_C, AJBRetainerBox_Text) == 0x000268, "Member 'UWB_RecordingMarkerWidget_C::AJBRetainerBox_Text' has a wrong offset!");
static_assert(offsetof(UWB_RecordingMarkerWidget_C, CanvasPanel_0) == 0x000270, "Member 'UWB_RecordingMarkerWidget_C::CanvasPanel_0' has a wrong offset!");
static_assert(offsetof(UWB_RecordingMarkerWidget_C, ScaleBox_10) == 0x000278, "Member 'UWB_RecordingMarkerWidget_C::ScaleBox_10' has a wrong offset!");
static_assert(offsetof(UWB_RecordingMarkerWidget_C, TotalHealth) == 0x000280, "Member 'UWB_RecordingMarkerWidget_C::TotalHealth' has a wrong offset!");
static_assert(offsetof(UWB_RecordingMarkerWidget_C, TotalHealth_Slash) == 0x000288, "Member 'UWB_RecordingMarkerWidget_C::TotalHealth_Slash' has a wrong offset!");
static_assert(offsetof(UWB_RecordingMarkerWidget_C, TotalHealthMax) == 0x000290, "Member 'UWB_RecordingMarkerWidget_C::TotalHealthMax' has a wrong offset!");
static_assert(offsetof(UWB_RecordingMarkerWidget_C, TargetCharacter) == 0x000298, "Member 'UWB_RecordingMarkerWidget_C::TargetCharacter' has a wrong offset!");
static_assert(offsetof(UWB_RecordingMarkerWidget_C, DistanceNear) == 0x0002A0, "Member 'UWB_RecordingMarkerWidget_C::DistanceNear' has a wrong offset!");
static_assert(offsetof(UWB_RecordingMarkerWidget_C, DistanceMiddle) == 0x0002A4, "Member 'UWB_RecordingMarkerWidget_C::DistanceMiddle' has a wrong offset!");
static_assert(offsetof(UWB_RecordingMarkerWidget_C, DistanceFar) == 0x0002A8, "Member 'UWB_RecordingMarkerWidget_C::DistanceFar' has a wrong offset!");
static_assert(offsetof(UWB_RecordingMarkerWidget_C, DMI_Circle) == 0x0002B0, "Member 'UWB_RecordingMarkerWidget_C::DMI_Circle' has a wrong offset!");
static_assert(offsetof(UWB_RecordingMarkerWidget_C, DMI_Text) == 0x0002B8, "Member 'UWB_RecordingMarkerWidget_C::DMI_Text' has a wrong offset!");
static_assert(offsetof(UWB_RecordingMarkerWidget_C, bDamageDirection) == 0x0002C0, "Member 'UWB_RecordingMarkerWidget_C::bDamageDirection' has a wrong offset!");
static_assert(offsetof(UWB_RecordingMarkerWidget_C, DamageDirectionTime) == 0x0002C4, "Member 'UWB_RecordingMarkerWidget_C::DamageDirectionTime' has a wrong offset!");
static_assert(offsetof(UWB_RecordingMarkerWidget_C, TimerHandleDamageDirection) == 0x0002C8, "Member 'UWB_RecordingMarkerWidget_C::TimerHandleDamageDirection' has a wrong offset!");
static_assert(offsetof(UWB_RecordingMarkerWidget_C, PrevHP) == 0x0002D0, "Member 'UWB_RecordingMarkerWidget_C::PrevHP' has a wrong offset!");
static_assert(offsetof(UWB_RecordingMarkerWidget_C, RandomMin) == 0x0002D4, "Member 'UWB_RecordingMarkerWidget_C::RandomMin' has a wrong offset!");
static_assert(offsetof(UWB_RecordingMarkerWidget_C, RandomMAX) == 0x0002D8, "Member 'UWB_RecordingMarkerWidget_C::RandomMAX' has a wrong offset!");
static_assert(offsetof(UWB_RecordingMarkerWidget_C, AvailableDistanceMin) == 0x0002DC, "Member 'UWB_RecordingMarkerWidget_C::AvailableDistanceMin' has a wrong offset!");
static_assert(offsetof(UWB_RecordingMarkerWidget_C, AvailableDistanceMax) == 0x0002E0, "Member 'UWB_RecordingMarkerWidget_C::AvailableDistanceMax' has a wrong offset!");
static_assert(offsetof(UWB_RecordingMarkerWidget_C, ScaleCache) == 0x0002E4, "Member 'UWB_RecordingMarkerWidget_C::ScaleCache' has a wrong offset!");
static_assert(offsetof(UWB_RecordingMarkerWidget_C, bCalcCheckPoint) == 0x0002EC, "Member 'UWB_RecordingMarkerWidget_C::bCalcCheckPoint' has a wrong offset!");
static_assert(offsetof(UWB_RecordingMarkerWidget_C, TargetSizeMin) == 0x0002F0, "Member 'UWB_RecordingMarkerWidget_C::TargetSizeMin' has a wrong offset!");
static_assert(offsetof(UWB_RecordingMarkerWidget_C, TargetSizeMax) == 0x0002F4, "Member 'UWB_RecordingMarkerWidget_C::TargetSizeMax' has a wrong offset!");
static_assert(offsetof(UWB_RecordingMarkerWidget_C, ScaleMax) == 0x0002F8, "Member 'UWB_RecordingMarkerWidget_C::ScaleMax' has a wrong offset!");
static_assert(offsetof(UWB_RecordingMarkerWidget_C, ScaleMiddle) == 0x0002FC, "Member 'UWB_RecordingMarkerWidget_C::ScaleMiddle' has a wrong offset!");
static_assert(offsetof(UWB_RecordingMarkerWidget_C, ScaleMin) == 0x000300, "Member 'UWB_RecordingMarkerWidget_C::ScaleMin' has a wrong offset!");
static_assert(offsetof(UWB_RecordingMarkerWidget_C, bShouldUpdate) == 0x000304, "Member 'UWB_RecordingMarkerWidget_C::bShouldUpdate' has a wrong offset!");

}

