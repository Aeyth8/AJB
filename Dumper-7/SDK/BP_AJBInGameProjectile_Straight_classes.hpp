#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameProjectile_Straight

#include "Basic.hpp"

#include "BP_AJBInGameProjectile_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBInGameProjectile_Straight.BP_AJBInGameProjectile_Straight_C
// 0x0028 (0x04D8 - 0x04B0)
class ABP_AJBInGameProjectile_Straight_C : public ABP_AJBInGameProjectile_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBInGameProjectile_Straight_C;  // 0x04B0(0x0008)(Transient, DuplicateTransient)
	class UProjectileMovementComponent*           ProjectileMovement;                                // 0x04B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x04C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseSpeedScale;                                    // 0x04C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C5[0x3];                                      // 0x04C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReflectCauser;                                     // 0x04C8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bDamageByReflectCauser;                            // 0x04D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasDamageDisplayedOnLocal;                         // 0x04D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)

public:
	void ExecuteUbergraph_BP_AJBInGameProjectile_Straight(int32 EntryPoint);
	void ROS_SetHasDamageDisplayedOnLocal(bool Value);
	void OnProjectileReflected_Server(class ABP_AJBInGameProjectile_Straight_C* ReflectedProjectile);
	void PlayHitSECharacter(class AActor* HitActor, const struct FVector& HitLocation_0, bool bHeadShot, EPhysicalSurface SurfaceType, float CuttingRate, bool bBlockedByAAP, const struct FGameplayTag& SETagBlockedByAAP);
	void PlayHitSENonCharacter(class AActor* HitActor, const struct FVector& HitLocation_0, bool bHeadShot, EPhysicalSurface SurfaceType, float CuttingRate);
	void MC_OnBlocking(class AActor* BlockedActor, const struct FVector& HitLocation_0, bool bReflect, bool bSeparateStandAttack);
	void ROC_CallOnSkillBlockedLocal(bool bAvoidSkill);
	void Blocking(class AActor* BlockedActor, class AActor* OtherActor, const struct FVector& HitLocation_0, const struct FVector& HitNormal_0, int32 CuttingProjectile___, int32 CuttingOther___, bool bInvincible, bool bReflectProjectile, const struct FRotator& ReflectRotation, bool bAvoidSkill, bool bSeparateStandAttack, const struct FGameplayTag& ReflectSkillTag_0, const struct FVector& KnockbackVelocity, float KnockbackIntensity);
	void SetSpeed(float NewSpeed);
	void GetScaledSpeed(float* Speed_0);
	void CheckGravityLoadAffected(bool* bAffected);
	void AddGravityScale(bool bResetGravityScale);
	void GetScaledSpecifiedSpeed(float InSpeed, float* OutSpeed);
	void UpdateSpeedAndGravity(bool bResetGravityScale);
	void ShouldProcessCuttingDamage(bool bHeadShot, bool* bShould);
	void IsReadyToBeBlocked(class AActor* DamageActor, class ABP_AJBInGameCharacter_C* DamageCauser, bool* IsReadyToBeBlocked_0);
	void CheckIgnoreBlocking(class AActor* TargetActor, bool* bIgnore);
	void CheckPassiveOnly(bool* bIsPassiveOnly);
	void ReceiveBeginPlay();
	void OnMC_ProjectileHit(class AActor* HitActor, const struct FVector& HitLocation_0, bool bHeadShot, EPhysicalSurface SurfaceType, bool bDisableDamage, float CuttingRate, bool bBlockedByAAP, bool bReflect);
	void ReceiveTick(float DeltaSeconds);
	void OnROS_ProjectileHit(class AActor* HitActor, const struct FVector& HitLocation_0, const struct FVector& HitNormal_0, bool bHeadShot, bool bPenetrate_0, bool bFirstHit, float CuttingRate, bool bDisableDamage, bool bReflect, const struct FRotator& ReflectRotation, bool bBlocking, const struct FGameplayTag& ReflectSkillTag_0, bool bAvoidSkill);
	void OnProjectileHit(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool FromSweep, const struct FHitResult& SweepResult, bool bHeadShot, bool bPenetrate_0, bool bFirstHit);
	void PlayHitSE(class AActor* HitActor, const struct FVector& HitLocation_0, bool bHeadShot, EPhysicalSurface SurfaceType, float CuttingRate, bool bBlockedByAAP);
	void UserConstructionScript();
	void GetCauserOwnerCharacterBP(class ABP_AJBInGameCharacter_C** CharacterBP);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBInGameProjectile_Straight_C">();
	}
	static class ABP_AJBInGameProjectile_Straight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBInGameProjectile_Straight_C>();
	}
};
static_assert(alignof(ABP_AJBInGameProjectile_Straight_C) == 0x000008, "Wrong alignment on ABP_AJBInGameProjectile_Straight_C");
static_assert(sizeof(ABP_AJBInGameProjectile_Straight_C) == 0x0004D8, "Wrong size on ABP_AJBInGameProjectile_Straight_C");
static_assert(offsetof(ABP_AJBInGameProjectile_Straight_C, UberGraphFrame_BP_AJBInGameProjectile_Straight_C) == 0x0004B0, "Member 'ABP_AJBInGameProjectile_Straight_C::UberGraphFrame_BP_AJBInGameProjectile_Straight_C' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Straight_C, ProjectileMovement) == 0x0004B8, "Member 'ABP_AJBInGameProjectile_Straight_C::ProjectileMovement' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Straight_C, Speed) == 0x0004C0, "Member 'ABP_AJBInGameProjectile_Straight_C::Speed' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Straight_C, bUseSpeedScale) == 0x0004C4, "Member 'ABP_AJBInGameProjectile_Straight_C::bUseSpeedScale' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Straight_C, ReflectCauser) == 0x0004C8, "Member 'ABP_AJBInGameProjectile_Straight_C::ReflectCauser' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Straight_C, bDamageByReflectCauser) == 0x0004D0, "Member 'ABP_AJBInGameProjectile_Straight_C::bDamageByReflectCauser' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Straight_C, HasDamageDisplayedOnLocal) == 0x0004D1, "Member 'ABP_AJBInGameProjectile_Straight_C::HasDamageDisplayedOnLocal' has a wrong offset!");

}

