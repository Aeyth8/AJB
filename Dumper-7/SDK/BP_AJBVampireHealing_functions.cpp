#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBVampireHealing

#include "Basic.hpp"

#include "BP_AJBVampireHealing_classes.hpp"
#include "BP_AJBVampireHealing_parameters.hpp"


namespace SDK
{

// Function BP_AJBVampireHealing.BP_AJBVampireHealing_C.ExecuteUbergraph_BP_AJBVampireHealing
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBVampireHealing_C::ExecuteUbergraph_BP_AJBVampireHealing(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBVampireHealing_C", "ExecuteUbergraph_BP_AJBVampireHealing");

	Params::BP_AJBVampireHealing_C_ExecuteUbergraph_BP_AJBVampireHealing Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBVampireHealing.BP_AJBVampireHealing_C.MC_ChangeState
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// EAutoHealingState                       NewState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBVampireHealing_C::MC_ChangeState(EAutoHealingState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBVampireHealing_C", "MC_ChangeState");

	Params::BP_AJBVampireHealing_C_MC_ChangeState Parms{};

	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBVampireHealing.BP_AJBVampireHealing_C.ChangeState_Server
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EAutoHealingState                       NewState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBVampireHealing_C::ChangeState_Server(EAutoHealingState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBVampireHealing_C", "ChangeState_Server");

	Params::BP_AJBVampireHealing_C_ChangeState_Server Parms{};

	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBVampireHealing.BP_AJBVampireHealing_C.OnReceiveDamage
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayTag&              DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bRemainHP                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDamageIsCut                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bNotUseCollision                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bSelfDamage                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBVampireHealing_C::OnReceiveDamage(int32 Damage, const struct FGameplayTag& DamageType, class AActor* DamageCauser, bool bRemainHP, bool bDamageIsCut, bool bNotUseCollision, bool bSelfDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBVampireHealing_C", "OnReceiveDamage");

	Params::BP_AJBVampireHealing_C_OnReceiveDamage Parms{};

	Parms.Damage = Damage;
	Parms.DamageType = std::move(DamageType);
	Parms.DamageCauser = DamageCauser;
	Parms.bRemainHP = bRemainHP;
	Parms.bDamageIsCut = bDamageIsCut;
	Parms.bNotUseCollision = bNotUseCollision;
	Parms.bSelfDamage = bSelfDamage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBVampireHealing.BP_AJBVampireHealing_C.ROC_Heal
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EffectiveValue                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsFullHP                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bHealingJustStarted                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBVampireHealing_C::ROC_Heal(int32 EffectiveValue, bool bIsFullHP, bool bHealingJustStarted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBVampireHealing_C", "ROC_Heal");

	Params::BP_AJBVampireHealing_C_ROC_Heal Parms{};

	Parms.EffectiveValue = EffectiveValue;
	Parms.bIsFullHP = bIsFullHP;
	Parms.bHealingJustStarted = bHealingJustStarted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBVampireHealing.BP_AJBVampireHealing_C.MC_Heal
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void UBP_AJBVampireHealing_C::MC_Heal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBVampireHealing_C", "MC_Heal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBVampireHealing.BP_AJBVampireHealing_C.TickStateStopping
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBVampireHealing_C::TickStateStopping()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBVampireHealing_C", "TickStateStopping");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBVampireHealing.BP_AJBVampireHealing_C.TickStateContinuation
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBVampireHealing_C::TickStateContinuation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBVampireHealing_C", "TickStateContinuation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBVampireHealing.BP_AJBVampireHealing_C.StateTick_Server
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBVampireHealing_C::StateTick_Server()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBVampireHealing_C", "StateTick_Server");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBVampireHealing.BP_AJBVampireHealing_C.DebugPrint
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_AJBVampireHealing_C::DebugPrint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBVampireHealing_C", "DebugPrint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBVampireHealing.BP_AJBVampireHealing_C.CheckNecessaryHealing
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   bNecessary                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBVampireHealing_C::CheckNecessaryHealing(bool* bNecessary)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBVampireHealing_C", "CheckNecessaryHealing");

	Params::BP_AJBVampireHealing_C_CheckNecessaryHealing Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bNecessary != nullptr)
		*bNecessary = Parms.bNecessary;
}


// Function BP_AJBVampireHealing.BP_AJBVampireHealing_C.UpdateContinuationParticle
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_AJBVampireHealing_C::UpdateContinuationParticle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBVampireHealing_C", "UpdateContinuationParticle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBVampireHealing.BP_AJBVampireHealing_C.TryDestroyParticle
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_AJBVampireHealing_C::TryDestroyParticle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBVampireHealing_C", "TryDestroyParticle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBVampireHealing.BP_AJBVampireHealing_C.TrySpawnParticle
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_AJBVampireHealing_C::TrySpawnParticle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBVampireHealing_C", "TrySpawnParticle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBVampireHealing.BP_AJBVampireHealing_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBVampireHealing_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBVampireHealing_C", "ReceiveTick");

	Params::BP_AJBVampireHealing_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBVampireHealing.BP_AJBVampireHealing_C.CalcHealingMaxHP
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32*                                  MaxHP                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBVampireHealing_C::CalcHealingMaxHP(int32* MaxHP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBVampireHealing_C", "CalcHealingMaxHP");

	Params::BP_AJBVampireHealing_C_CalcHealingMaxHP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MaxHP != nullptr)
		*MaxHP = Parms.MaxHP;
}


// Function BP_AJBVampireHealing.BP_AJBVampireHealing_C.OnActionActivate
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bTriggeredByStand                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBVampireHealing_C::OnActionActivate(bool bTriggeredByStand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBVampireHealing_C", "OnActionActivate");

	Params::BP_AJBVampireHealing_C_OnActionActivate Parms{};

	Parms.bTriggeredByStand = bTriggeredByStand;

	UObject::ProcessEvent(Func, &Parms);
}

}

