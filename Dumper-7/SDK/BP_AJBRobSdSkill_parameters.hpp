#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBRobSdSkill

#include "Basic.hpp"

#include "AJB_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_AJBRobSdSkill.BP_AJBRobSdSkill_C.ExecuteUbergraph_BP_AJBRobSdSkill
// 0x0200 (0x0200 - 0x0000)
struct BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bHitCharacter;                        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryToSpeakVoice_bWillBeSpoken;            // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_Value;                                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Value1;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_HitActor;                             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UActorComponent*                        K2Node_Event_HitComponent;                         // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_HitLocation;                          // 0x0030(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_HitNormal;                            // 0x003C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_CuttingRate;                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              K2Node_Event_SurfaceType;                          // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bDisableDamage;                       // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bInvincible;                          // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bIsPenetration;                       // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bBlockedByAAP;                        // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bHeadShot;                            // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bAvoidSkill;                          // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53[0x1];                                       // 0x0053(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameMovableStand_C*            K2Node_DynamicCast_AsBP_AJBIn_Game_Movable_Stand;  // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue;          // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBI_AJBInGameCharacterProperty_C> K2Node_DynamicCast_AsBI_AJBIn_Game_Character_Property; // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               CallFunc_GetPropertyOwnerCharacterBP_CharacterBP;  // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue1;         // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          CallFunc_RequestParticleEffectAttachedOnLocal_ParticleEffect; // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           CallFunc_RequestWwiseEventAttachedOnLocal_AkComponent; // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue2;         // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_GetCharacterTagFromCharacter_CharacterTag; // 0x00C8(0x0008)(NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          CallFunc_RequestParticleEffectAttachedOnLocal_ParticleEffect1; // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetTagName_ReturnValue;                   // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAJBCharacterInfo                      CallFunc_GetDataTableRowFromName_OutRow;           // 0x00E0(0x00E8)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x01C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x01CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Temp_struct_Variable;                              // 0x01D0(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable1;                             // 0x01D8(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryGetPropertyOwnerCharacterFromActor_bSucceed; // 0x01E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E2[0x6];                                      // 0x01E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_TryGetPropertyOwnerCharacterFromActor_OutActor; // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Select_Default;                             // 0x01F0(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGameplayTagValid_ReturnValue;           // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPair_bPairCharacter;                    // 0x01F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x01FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue1;                   // 0x01FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue1;                 // 0x01FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill) == 0x000008, "Wrong alignment on BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill");
static_assert(sizeof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill) == 0x000200, "Wrong size on BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, EntryPoint) == 0x000000, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, K2Node_Event_bHitCharacter) == 0x000004, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::K2Node_Event_bHitCharacter' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, CallFunc_TryToSpeakVoice_bWillBeSpoken) == 0x000005, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::CallFunc_TryToSpeakVoice_bWillBeSpoken' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, K2Node_Event_Value) == 0x000008, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::K2Node_Event_Value' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, K2Node_Event_Value1) == 0x00000C, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::K2Node_Event_Value1' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, K2Node_Event_HitActor) == 0x000020, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::K2Node_Event_HitActor' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, K2Node_Event_HitComponent) == 0x000028, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::K2Node_Event_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, K2Node_Event_HitLocation) == 0x000030, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::K2Node_Event_HitLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, K2Node_Event_HitNormal) == 0x00003C, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::K2Node_Event_HitNormal' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, K2Node_Event_CuttingRate) == 0x000048, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::K2Node_Event_CuttingRate' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, K2Node_Event_SurfaceType) == 0x00004C, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::K2Node_Event_SurfaceType' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, K2Node_Event_bDisableDamage) == 0x00004D, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::K2Node_Event_bDisableDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, K2Node_Event_bInvincible) == 0x00004E, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::K2Node_Event_bInvincible' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, K2Node_Event_bIsPenetration) == 0x00004F, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::K2Node_Event_bIsPenetration' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, K2Node_Event_bBlockedByAAP) == 0x000050, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::K2Node_Event_bBlockedByAAP' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, K2Node_Event_bHeadShot) == 0x000051, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::K2Node_Event_bHeadShot' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, K2Node_Event_bAvoidSkill) == 0x000052, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::K2Node_Event_bAvoidSkill' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, CallFunc_Add_FloatFloat_ReturnValue) == 0x000054, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, K2Node_DynamicCast_AsBP_AJBIn_Game_Movable_Stand) == 0x000058, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::K2Node_DynamicCast_AsBP_AJBIn_Game_Movable_Stand' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000068, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, K2Node_DynamicCast_bSuccess1) == 0x000070, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, CallFunc_K2_GetRootComponent_ReturnValue) == 0x000078, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::CallFunc_K2_GetRootComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, K2Node_DynamicCast_AsBI_AJBIn_Game_Character_Property) == 0x000080, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::K2Node_DynamicCast_AsBI_AJBIn_Game_Character_Property' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, K2Node_DynamicCast_bSuccess2) == 0x000090, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, CallFunc_GetPropertyOwnerCharacterBP_CharacterBP) == 0x000098, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::CallFunc_GetPropertyOwnerCharacterBP_CharacterBP' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, CallFunc_K2_GetRootComponent_ReturnValue1) == 0x0000A0, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::CallFunc_K2_GetRootComponent_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, CallFunc_RequestParticleEffectAttachedOnLocal_ParticleEffect) == 0x0000A8, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::CallFunc_RequestParticleEffectAttachedOnLocal_ParticleEffect' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, CallFunc_RequestWwiseEventAttachedOnLocal_AkComponent) == 0x0000B0, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::CallFunc_RequestWwiseEventAttachedOnLocal_AkComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, CallFunc_K2_GetRootComponent_ReturnValue2) == 0x0000B8, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::CallFunc_K2_GetRootComponent_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, CallFunc_IsValid_ReturnValue) == 0x0000C0, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, CallFunc_GetCharacterTagFromCharacter_CharacterTag) == 0x0000C8, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::CallFunc_GetCharacterTagFromCharacter_CharacterTag' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, CallFunc_RequestParticleEffectAttachedOnLocal_ParticleEffect1) == 0x0000D0, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::CallFunc_RequestParticleEffectAttachedOnLocal_ParticleEffect1' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, CallFunc_GetTagName_ReturnValue) == 0x0000D8, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::CallFunc_GetTagName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, CallFunc_GetDataTableRowFromName_OutRow) == 0x0000E0, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0001C8, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, CallFunc_IsDedicatedServer_ReturnValue) == 0x0001C9, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0001CA, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, CallFunc_Not_PreBool_ReturnValue) == 0x0001CB, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, Temp_struct_Variable) == 0x0001D0, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, Temp_struct_Variable1) == 0x0001D8, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::Temp_struct_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, Temp_bool_Variable) == 0x0001E0, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, CallFunc_TryGetPropertyOwnerCharacterFromActor_bSucceed) == 0x0001E1, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::CallFunc_TryGetPropertyOwnerCharacterFromActor_bSucceed' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, CallFunc_TryGetPropertyOwnerCharacterFromActor_OutActor) == 0x0001E8, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::CallFunc_TryGetPropertyOwnerCharacterFromActor_OutActor' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, K2Node_Select_Default) == 0x0001F0, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, CallFunc_IsGameplayTagValid_ReturnValue) == 0x0001F8, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::CallFunc_IsGameplayTagValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, CallFunc_IsPair_bPairCharacter) == 0x0001F9, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::CallFunc_IsPair_bPairCharacter' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, CallFunc_BooleanOR_ReturnValue) == 0x0001FA, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, CallFunc_BooleanOR_ReturnValue1) == 0x0001FB, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::CallFunc_BooleanOR_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill, CallFunc_Not_PreBool_ReturnValue1) == 0x0001FC, "Member 'BP_AJBRobSdSkill_C_ExecuteUbergraph_BP_AJBRobSdSkill::CallFunc_Not_PreBool_ReturnValue1' has a wrong offset!");

// Function BP_AJBRobSdSkill.BP_AJBRobSdSkill_C.TrySpaekHitResultVoice
// 0x0050 (0x0050 - 0x0000)
struct BP_AJBRobSdSkill_C_TrySpaekHitResultVoice final
{
public:
	struct FGameplayTag                           VoiceTag;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 HitActor;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBInGameCharacterBase*                CallFunc_GetOwnerCharacter_ReturnValue;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPoliticDamage_Damage;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_MakeLiteralGameplayTag_ReturnValue;       // 0x0030(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckQueuedVoiceTags_bQueued;             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_GameplayTag_ReturnValue;         // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckQueuedVoiceTag_bQueued;              // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_CheckQueuedVoiceTag_QueuedNum;            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               CallFunc_GetAJBCharacterFromActor_CharacterBP;     // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBCharacterFromActor_bSuccess;        // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryToSpeakVoice_bWillBeSpoken;            // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsRemainHP_IsRemain;                      // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBRobSdSkill_C_TrySpaekHitResultVoice) == 0x000008, "Wrong alignment on BP_AJBRobSdSkill_C_TrySpaekHitResultVoice");
static_assert(sizeof(BP_AJBRobSdSkill_C_TrySpaekHitResultVoice) == 0x000050, "Wrong size on BP_AJBRobSdSkill_C_TrySpaekHitResultVoice");
static_assert(offsetof(BP_AJBRobSdSkill_C_TrySpaekHitResultVoice, VoiceTag) == 0x000000, "Member 'BP_AJBRobSdSkill_C_TrySpaekHitResultVoice::VoiceTag' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_TrySpaekHitResultVoice, HitActor) == 0x000008, "Member 'BP_AJBRobSdSkill_C_TrySpaekHitResultVoice::HitActor' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_TrySpaekHitResultVoice, CallFunc_GetOwnerCharacter_ReturnValue) == 0x000010, "Member 'BP_AJBRobSdSkill_C_TrySpaekHitResultVoice::CallFunc_GetOwnerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_TrySpaekHitResultVoice, CallFunc_GetPoliticDamage_Damage) == 0x000018, "Member 'BP_AJBRobSdSkill_C_TrySpaekHitResultVoice::CallFunc_GetPoliticDamage_Damage' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_TrySpaekHitResultVoice, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000020, "Member 'BP_AJBRobSdSkill_C_TrySpaekHitResultVoice::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_TrySpaekHitResultVoice, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_AJBRobSdSkill_C_TrySpaekHitResultVoice::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_TrySpaekHitResultVoice, CallFunc_MakeLiteralGameplayTag_ReturnValue) == 0x000030, "Member 'BP_AJBRobSdSkill_C_TrySpaekHitResultVoice::CallFunc_MakeLiteralGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_TrySpaekHitResultVoice, CallFunc_CheckQueuedVoiceTags_bQueued) == 0x000038, "Member 'BP_AJBRobSdSkill_C_TrySpaekHitResultVoice::CallFunc_CheckQueuedVoiceTags_bQueued' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_TrySpaekHitResultVoice, CallFunc_Not_PreBool_ReturnValue) == 0x000039, "Member 'BP_AJBRobSdSkill_C_TrySpaekHitResultVoice::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_TrySpaekHitResultVoice, CallFunc_NotEqual_GameplayTag_ReturnValue) == 0x00003A, "Member 'BP_AJBRobSdSkill_C_TrySpaekHitResultVoice::CallFunc_NotEqual_GameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_TrySpaekHitResultVoice, CallFunc_CheckQueuedVoiceTag_bQueued) == 0x00003B, "Member 'BP_AJBRobSdSkill_C_TrySpaekHitResultVoice::CallFunc_CheckQueuedVoiceTag_bQueued' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_TrySpaekHitResultVoice, CallFunc_CheckQueuedVoiceTag_QueuedNum) == 0x00003C, "Member 'BP_AJBRobSdSkill_C_TrySpaekHitResultVoice::CallFunc_CheckQueuedVoiceTag_QueuedNum' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_TrySpaekHitResultVoice, CallFunc_GetAJBCharacterFromActor_CharacterBP) == 0x000040, "Member 'BP_AJBRobSdSkill_C_TrySpaekHitResultVoice::CallFunc_GetAJBCharacterFromActor_CharacterBP' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_TrySpaekHitResultVoice, CallFunc_GetAJBCharacterFromActor_bSuccess) == 0x000048, "Member 'BP_AJBRobSdSkill_C_TrySpaekHitResultVoice::CallFunc_GetAJBCharacterFromActor_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_TrySpaekHitResultVoice, CallFunc_TryToSpeakVoice_bWillBeSpoken) == 0x000049, "Member 'BP_AJBRobSdSkill_C_TrySpaekHitResultVoice::CallFunc_TryToSpeakVoice_bWillBeSpoken' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_TrySpaekHitResultVoice, CallFunc_IsRemainHP_IsRemain) == 0x00004A, "Member 'BP_AJBRobSdSkill_C_TrySpaekHitResultVoice::CallFunc_IsRemainHP_IsRemain' has a wrong offset!");

// Function BP_AJBRobSdSkill.BP_AJBRobSdSkill_C.RequestFailedEffects
// 0x0028 (0x0028 - 0x0000)
struct BP_AJBRobSdSkill_C_RequestFailedEffects final
{
public:
	class USceneComponent*                        AttachToComponent;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitLocation;                                       // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameParticleEffect_C*          CallFunc_RequestParticleEffectOnLocal_ParticleEffect; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           CallFunc_RequestWwiseEventAttachedOnLocal_AkComponent; // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBRobSdSkill_C_RequestFailedEffects) == 0x000008, "Wrong alignment on BP_AJBRobSdSkill_C_RequestFailedEffects");
static_assert(sizeof(BP_AJBRobSdSkill_C_RequestFailedEffects) == 0x000028, "Wrong size on BP_AJBRobSdSkill_C_RequestFailedEffects");
static_assert(offsetof(BP_AJBRobSdSkill_C_RequestFailedEffects, AttachToComponent) == 0x000000, "Member 'BP_AJBRobSdSkill_C_RequestFailedEffects::AttachToComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_RequestFailedEffects, HitLocation) == 0x000008, "Member 'BP_AJBRobSdSkill_C_RequestFailedEffects::HitLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_RequestFailedEffects, CallFunc_RequestParticleEffectOnLocal_ParticleEffect) == 0x000018, "Member 'BP_AJBRobSdSkill_C_RequestFailedEffects::CallFunc_RequestParticleEffectOnLocal_ParticleEffect' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_RequestFailedEffects, CallFunc_RequestWwiseEventAttachedOnLocal_AkComponent) == 0x000020, "Member 'BP_AJBRobSdSkill_C_RequestFailedEffects::CallFunc_RequestWwiseEventAttachedOnLocal_AkComponent' has a wrong offset!");

// Function BP_AJBRobSdSkill.BP_AJBRobSdSkill_C.SpeakRushHitVoice
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBRobSdSkill_C_SpeakRushHitVoice final
{
public:
	bool                                          bHitCharacter;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBRobSdSkill_C_SpeakRushHitVoice) == 0x000001, "Wrong alignment on BP_AJBRobSdSkill_C_SpeakRushHitVoice");
static_assert(sizeof(BP_AJBRobSdSkill_C_SpeakRushHitVoice) == 0x000001, "Wrong size on BP_AJBRobSdSkill_C_SpeakRushHitVoice");
static_assert(offsetof(BP_AJBRobSdSkill_C_SpeakRushHitVoice, bHitCharacter) == 0x000000, "Member 'BP_AJBRobSdSkill_C_SpeakRushHitVoice::bHitCharacter' has a wrong offset!");

// Function BP_AJBRobSdSkill.BP_AJBRobSdSkill_C.HitWait
// 0x0038 (0x0038 - 0x0000)
struct BP_AJBRobSdSkill_C_HitWait final
{
public:
	class AActor*                                 HitActor;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UActorComponent*                        HitComponent;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitLocation;                                       // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CuttingRate;                                       // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              SurfaceType;                                       // 0x002C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisableDamage;                                    // 0x002D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bInvincible;                                       // 0x002E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIsPenetration;                                    // 0x002F(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bBlockedByAAP;                                     // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bHeadShot;                                         // 0x0031(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bAvoidSkill;                                       // 0x0032(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBRobSdSkill_C_HitWait) == 0x000008, "Wrong alignment on BP_AJBRobSdSkill_C_HitWait");
static_assert(sizeof(BP_AJBRobSdSkill_C_HitWait) == 0x000038, "Wrong size on BP_AJBRobSdSkill_C_HitWait");
static_assert(offsetof(BP_AJBRobSdSkill_C_HitWait, HitActor) == 0x000000, "Member 'BP_AJBRobSdSkill_C_HitWait::HitActor' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_HitWait, HitComponent) == 0x000008, "Member 'BP_AJBRobSdSkill_C_HitWait::HitComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_HitWait, HitLocation) == 0x000010, "Member 'BP_AJBRobSdSkill_C_HitWait::HitLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_HitWait, HitNormal) == 0x00001C, "Member 'BP_AJBRobSdSkill_C_HitWait::HitNormal' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_HitWait, CuttingRate) == 0x000028, "Member 'BP_AJBRobSdSkill_C_HitWait::CuttingRate' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_HitWait, SurfaceType) == 0x00002C, "Member 'BP_AJBRobSdSkill_C_HitWait::SurfaceType' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_HitWait, bDisableDamage) == 0x00002D, "Member 'BP_AJBRobSdSkill_C_HitWait::bDisableDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_HitWait, bInvincible) == 0x00002E, "Member 'BP_AJBRobSdSkill_C_HitWait::bInvincible' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_HitWait, bIsPenetration) == 0x00002F, "Member 'BP_AJBRobSdSkill_C_HitWait::bIsPenetration' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_HitWait, bBlockedByAAP) == 0x000030, "Member 'BP_AJBRobSdSkill_C_HitWait::bBlockedByAAP' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_HitWait, bHeadShot) == 0x000031, "Member 'BP_AJBRobSdSkill_C_HitWait::bHeadShot' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_HitWait, bAvoidSkill) == 0x000032, "Member 'BP_AJBRobSdSkill_C_HitWait::bAvoidSkill' has a wrong offset!");

// Function BP_AJBRobSdSkill.BP_AJBRobSdSkill_C.CheckFailedTarget
// 0x0148 (0x0148 - 0x0000)
struct BP_AJBRobSdSkill_C_CheckFailedTarget final
{
public:
	class AActor*                                 HitActor;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFailedTarget;                                     // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBInGameCharacterProperty_C> K2Node_DynamicCast_AsBI_AJBIn_Game_Character_Property; // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               CallFunc_GetPropertyOwnerCharacterBP_CharacterBP;  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_GetCharacterTagFromCharacter_CharacterTag; // 0x0040(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetTagName_ReturnValue;                   // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAJBCharacterInfo                      CallFunc_GetDataTableRowFromName_OutRow;           // 0x0058(0x00E8)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBRobSdSkill_C_CheckFailedTarget) == 0x000008, "Wrong alignment on BP_AJBRobSdSkill_C_CheckFailedTarget");
static_assert(sizeof(BP_AJBRobSdSkill_C_CheckFailedTarget) == 0x000148, "Wrong size on BP_AJBRobSdSkill_C_CheckFailedTarget");
static_assert(offsetof(BP_AJBRobSdSkill_C_CheckFailedTarget, HitActor) == 0x000000, "Member 'BP_AJBRobSdSkill_C_CheckFailedTarget::HitActor' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_CheckFailedTarget, bFailedTarget) == 0x000008, "Member 'BP_AJBRobSdSkill_C_CheckFailedTarget::bFailedTarget' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_CheckFailedTarget, K2Node_DynamicCast_AsBI_AJBIn_Game_Character_Property) == 0x000010, "Member 'BP_AJBRobSdSkill_C_CheckFailedTarget::K2Node_DynamicCast_AsBI_AJBIn_Game_Character_Property' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_CheckFailedTarget, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_AJBRobSdSkill_C_CheckFailedTarget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_CheckFailedTarget, CallFunc_GetPropertyOwnerCharacterBP_CharacterBP) == 0x000028, "Member 'BP_AJBRobSdSkill_C_CheckFailedTarget::CallFunc_GetPropertyOwnerCharacterBP_CharacterBP' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_CheckFailedTarget, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000030, "Member 'BP_AJBRobSdSkill_C_CheckFailedTarget::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_CheckFailedTarget, K2Node_DynamicCast_bSuccess1) == 0x000038, "Member 'BP_AJBRobSdSkill_C_CheckFailedTarget::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_CheckFailedTarget, CallFunc_GetCharacterTagFromCharacter_CharacterTag) == 0x000040, "Member 'BP_AJBRobSdSkill_C_CheckFailedTarget::CallFunc_GetCharacterTagFromCharacter_CharacterTag' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_CheckFailedTarget, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'BP_AJBRobSdSkill_C_CheckFailedTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_CheckFailedTarget, CallFunc_GetTagName_ReturnValue) == 0x000050, "Member 'BP_AJBRobSdSkill_C_CheckFailedTarget::CallFunc_GetTagName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_CheckFailedTarget, CallFunc_GetDataTableRowFromName_OutRow) == 0x000058, "Member 'BP_AJBRobSdSkill_C_CheckFailedTarget::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_CheckFailedTarget, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000140, "Member 'BP_AJBRobSdSkill_C_CheckFailedTarget::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_CheckFailedTarget, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000141, "Member 'BP_AJBRobSdSkill_C_CheckFailedTarget::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_AJBRobSdSkill.BP_AJBRobSdSkill_C.SnapPostProcess
// 0x0070 (0x0070 - 0x0000)
struct BP_AJBRobSdSkill_C_SnapPostProcess final
{
public:
	struct FVector                                BeforeLocation;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HitActor;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AfterLocation;                                     // 0x0018(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_SnapPostProcess_AfterLocation;            // 0x003C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0048(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X1;                           // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y1;                           // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z1;                           // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0064(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBRobSdSkill_C_SnapPostProcess) == 0x000008, "Wrong alignment on BP_AJBRobSdSkill_C_SnapPostProcess");
static_assert(sizeof(BP_AJBRobSdSkill_C_SnapPostProcess) == 0x000070, "Wrong size on BP_AJBRobSdSkill_C_SnapPostProcess");
static_assert(offsetof(BP_AJBRobSdSkill_C_SnapPostProcess, BeforeLocation) == 0x000000, "Member 'BP_AJBRobSdSkill_C_SnapPostProcess::BeforeLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_SnapPostProcess, HitActor) == 0x000010, "Member 'BP_AJBRobSdSkill_C_SnapPostProcess::HitActor' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_SnapPostProcess, AfterLocation) == 0x000018, "Member 'BP_AJBRobSdSkill_C_SnapPostProcess::AfterLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_SnapPostProcess, CallFunc_BreakVector_X) == 0x000024, "Member 'BP_AJBRobSdSkill_C_SnapPostProcess::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_SnapPostProcess, CallFunc_BreakVector_Y) == 0x000028, "Member 'BP_AJBRobSdSkill_C_SnapPostProcess::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_SnapPostProcess, CallFunc_BreakVector_Z) == 0x00002C, "Member 'BP_AJBRobSdSkill_C_SnapPostProcess::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_SnapPostProcess, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000030, "Member 'BP_AJBRobSdSkill_C_SnapPostProcess::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_SnapPostProcess, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_AJBRobSdSkill_C_SnapPostProcess::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_SnapPostProcess, CallFunc_IsValid_ReturnValue) == 0x000039, "Member 'BP_AJBRobSdSkill_C_SnapPostProcess::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_SnapPostProcess, CallFunc_SnapPostProcess_AfterLocation) == 0x00003C, "Member 'BP_AJBRobSdSkill_C_SnapPostProcess::CallFunc_SnapPostProcess_AfterLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_SnapPostProcess, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000048, "Member 'BP_AJBRobSdSkill_C_SnapPostProcess::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_SnapPostProcess, CallFunc_BreakVector_X1) == 0x000054, "Member 'BP_AJBRobSdSkill_C_SnapPostProcess::CallFunc_BreakVector_X1' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_SnapPostProcess, CallFunc_BreakVector_Y1) == 0x000058, "Member 'BP_AJBRobSdSkill_C_SnapPostProcess::CallFunc_BreakVector_Y1' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_SnapPostProcess, CallFunc_BreakVector_Z1) == 0x00005C, "Member 'BP_AJBRobSdSkill_C_SnapPostProcess::CallFunc_BreakVector_Z1' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_SnapPostProcess, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000060, "Member 'BP_AJBRobSdSkill_C_SnapPostProcess::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_SnapPostProcess, CallFunc_MakeVector_ReturnValue) == 0x000064, "Member 'BP_AJBRobSdSkill_C_SnapPostProcess::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function BP_AJBRobSdSkill.BP_AJBRobSdSkill_C.FacePostProcess
// 0x0040 (0x0040 - 0x0000)
struct BP_AJBRobSdSkill_C_FacePostProcess final
{
public:
	struct FRotator                               BeforeRotation;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HitActor;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               AfterRotation;                                     // 0x0018(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0030(0x000C)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBRobSdSkill_C_FacePostProcess) == 0x000008, "Wrong alignment on BP_AJBRobSdSkill_C_FacePostProcess");
static_assert(sizeof(BP_AJBRobSdSkill_C_FacePostProcess) == 0x000040, "Wrong size on BP_AJBRobSdSkill_C_FacePostProcess");
static_assert(offsetof(BP_AJBRobSdSkill_C_FacePostProcess, BeforeRotation) == 0x000000, "Member 'BP_AJBRobSdSkill_C_FacePostProcess::BeforeRotation' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_FacePostProcess, HitActor) == 0x000010, "Member 'BP_AJBRobSdSkill_C_FacePostProcess::HitActor' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_FacePostProcess, AfterRotation) == 0x000018, "Member 'BP_AJBRobSdSkill_C_FacePostProcess::AfterRotation' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_FacePostProcess, CallFunc_BreakRotator_Roll) == 0x000024, "Member 'BP_AJBRobSdSkill_C_FacePostProcess::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_FacePostProcess, CallFunc_BreakRotator_Pitch) == 0x000028, "Member 'BP_AJBRobSdSkill_C_FacePostProcess::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_FacePostProcess, CallFunc_BreakRotator_Yaw) == 0x00002C, "Member 'BP_AJBRobSdSkill_C_FacePostProcess::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_AJBRobSdSkill_C_FacePostProcess, CallFunc_MakeRotator_ReturnValue) == 0x000030, "Member 'BP_AJBRobSdSkill_C_FacePostProcess::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");

// Function BP_AJBRobSdSkill.BP_AJBRobSdSkill_C.TimeExtension_Server
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBRobSdSkill_C_TimeExtension_Server final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBRobSdSkill_C_TimeExtension_Server) == 0x000004, "Wrong alignment on BP_AJBRobSdSkill_C_TimeExtension_Server");
static_assert(sizeof(BP_AJBRobSdSkill_C_TimeExtension_Server) == 0x000004, "Wrong size on BP_AJBRobSdSkill_C_TimeExtension_Server");
static_assert(offsetof(BP_AJBRobSdSkill_C_TimeExtension_Server, Value) == 0x000000, "Member 'BP_AJBRobSdSkill_C_TimeExtension_Server::Value' has a wrong offset!");

// Function BP_AJBRobSdSkill.BP_AJBRobSdSkill_C.TimeRewind_Server
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBRobSdSkill_C_TimeRewind_Server final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBRobSdSkill_C_TimeRewind_Server) == 0x000004, "Wrong alignment on BP_AJBRobSdSkill_C_TimeRewind_Server");
static_assert(sizeof(BP_AJBRobSdSkill_C_TimeRewind_Server) == 0x000004, "Wrong size on BP_AJBRobSdSkill_C_TimeRewind_Server");
static_assert(offsetof(BP_AJBRobSdSkill_C_TimeRewind_Server, Value) == 0x000000, "Member 'BP_AJBRobSdSkill_C_TimeRewind_Server::Value' has a wrong offset!");

}

