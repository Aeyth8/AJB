#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BI_AJBInterface

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "AJB_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BI_AJBInterface.BI_AJBInterface_C.CheckTargetSelf
// 0x0010 (0x0010 - 0x0000)
struct BI_AJBInterface_C_CheckTargetSelf final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bForDamageOverlap;                                 // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIgnoreMovableStand;                               // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIncludeSelf;                                      // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bAfterReflectShouldHitOwner;                       // 0x000B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bTarget;                                           // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_AJBInterface_C_CheckTargetSelf) == 0x000008, "Wrong alignment on BI_AJBInterface_C_CheckTargetSelf");
static_assert(sizeof(BI_AJBInterface_C_CheckTargetSelf) == 0x000010, "Wrong size on BI_AJBInterface_C_CheckTargetSelf");
static_assert(offsetof(BI_AJBInterface_C_CheckTargetSelf, DamageCauser) == 0x000000, "Member 'BI_AJBInterface_C_CheckTargetSelf::DamageCauser' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_CheckTargetSelf, bForDamageOverlap) == 0x000008, "Member 'BI_AJBInterface_C_CheckTargetSelf::bForDamageOverlap' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_CheckTargetSelf, bIgnoreMovableStand) == 0x000009, "Member 'BI_AJBInterface_C_CheckTargetSelf::bIgnoreMovableStand' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_CheckTargetSelf, bIncludeSelf) == 0x00000A, "Member 'BI_AJBInterface_C_CheckTargetSelf::bIncludeSelf' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_CheckTargetSelf, bAfterReflectShouldHitOwner) == 0x00000B, "Member 'BI_AJBInterface_C_CheckTargetSelf::bAfterReflectShouldHitOwner' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_CheckTargetSelf, bTarget) == 0x00000C, "Member 'BI_AJBInterface_C_CheckTargetSelf::bTarget' has a wrong offset!");

// Function BI_AJBInterface.BI_AJBInterface_C.AJBDamage
// 0x0078 (0x0078 - 0x0000)
struct BI_AJBInterface_C_AJBDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DamageForHPAP;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DamageForAAP;                                      // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CutDamage;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           DamageType;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         SerialNumber;                                      // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDamagePriority                               DamagePriority;                                    // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttackDistance;                                    // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DamageCauser;                                      // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WithSeparatedStandAttack;                          // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HitEnemysSeparatedStand;                           // 0x0039(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bPenetrateAP;                                      // 0x003A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bNotUseCollision;                                  // 0x003B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsEndured;                                         // 0x003C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAJBDamageDisplayParams                DamageDisplayParams;                               // 0x0040(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FAJBDamageDisplayProperty              DamageDisplayProperty;                             // 0x0070(0x0003)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_AJBInterface_C_AJBDamage) == 0x000008, "Wrong alignment on BI_AJBInterface_C_AJBDamage");
static_assert(sizeof(BI_AJBInterface_C_AJBDamage) == 0x000078, "Wrong size on BI_AJBInterface_C_AJBDamage");
static_assert(offsetof(BI_AJBInterface_C_AJBDamage, DamagedActor) == 0x000000, "Member 'BI_AJBInterface_C_AJBDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_AJBDamage, DamageForHPAP) == 0x000008, "Member 'BI_AJBInterface_C_AJBDamage::DamageForHPAP' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_AJBDamage, DamageForAAP) == 0x00000C, "Member 'BI_AJBInterface_C_AJBDamage::DamageForAAP' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_AJBDamage, CutDamage) == 0x000010, "Member 'BI_AJBInterface_C_AJBDamage::CutDamage' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_AJBDamage, DamageType) == 0x000018, "Member 'BI_AJBInterface_C_AJBDamage::DamageType' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_AJBDamage, SerialNumber) == 0x000020, "Member 'BI_AJBInterface_C_AJBDamage::SerialNumber' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_AJBDamage, DamagePriority) == 0x000024, "Member 'BI_AJBInterface_C_AJBDamage::DamagePriority' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_AJBDamage, AttackDistance) == 0x000028, "Member 'BI_AJBInterface_C_AJBDamage::AttackDistance' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_AJBDamage, DamageCauser) == 0x000030, "Member 'BI_AJBInterface_C_AJBDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_AJBDamage, WithSeparatedStandAttack) == 0x000038, "Member 'BI_AJBInterface_C_AJBDamage::WithSeparatedStandAttack' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_AJBDamage, HitEnemysSeparatedStand) == 0x000039, "Member 'BI_AJBInterface_C_AJBDamage::HitEnemysSeparatedStand' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_AJBDamage, bPenetrateAP) == 0x00003A, "Member 'BI_AJBInterface_C_AJBDamage::bPenetrateAP' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_AJBDamage, bNotUseCollision) == 0x00003B, "Member 'BI_AJBInterface_C_AJBDamage::bNotUseCollision' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_AJBDamage, IsEndured) == 0x00003C, "Member 'BI_AJBInterface_C_AJBDamage::IsEndured' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_AJBDamage, DamageDisplayParams) == 0x000040, "Member 'BI_AJBInterface_C_AJBDamage::DamageDisplayParams' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_AJBDamage, DamageDisplayProperty) == 0x000070, "Member 'BI_AJBInterface_C_AJBDamage::DamageDisplayProperty' has a wrong offset!");

// Function BI_AJBInterface.BI_AJBInterface_C.OwnHitParam
// 0x0020 (0x0020 - 0x0000)
struct BI_AJBInterface_C_OwnHitParam final
{
public:
	bool                                          bCharacter;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bLeftAP;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ParticleTagBlockedByAAP;                           // 0x0008(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SETagBlockedByAAP;                                 // 0x0010(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ParticleTagBlocked;                                // 0x0018(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BI_AJBInterface_C_OwnHitParam) == 0x000008, "Wrong alignment on BI_AJBInterface_C_OwnHitParam");
static_assert(sizeof(BI_AJBInterface_C_OwnHitParam) == 0x000020, "Wrong size on BI_AJBInterface_C_OwnHitParam");
static_assert(offsetof(BI_AJBInterface_C_OwnHitParam, bCharacter) == 0x000000, "Member 'BI_AJBInterface_C_OwnHitParam::bCharacter' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_OwnHitParam, bLeftAP) == 0x000001, "Member 'BI_AJBInterface_C_OwnHitParam::bLeftAP' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_OwnHitParam, ParticleTagBlockedByAAP) == 0x000008, "Member 'BI_AJBInterface_C_OwnHitParam::ParticleTagBlockedByAAP' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_OwnHitParam, SETagBlockedByAAP) == 0x000010, "Member 'BI_AJBInterface_C_OwnHitParam::SETagBlockedByAAP' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_OwnHitParam, ParticleTagBlocked) == 0x000018, "Member 'BI_AJBInterface_C_OwnHitParam::ParticleTagBlocked' has a wrong offset!");

// Function BI_AJBInterface.BI_AJBInterface_C.IfCheckDamageOverlap
// 0x0001 (0x0001 - 0x0000)
struct BI_AJBInterface_C_IfCheckDamageOverlap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_AJBInterface_C_IfCheckDamageOverlap) == 0x000001, "Wrong alignment on BI_AJBInterface_C_IfCheckDamageOverlap");
static_assert(sizeof(BI_AJBInterface_C_IfCheckDamageOverlap) == 0x000001, "Wrong size on BI_AJBInterface_C_IfCheckDamageOverlap");
static_assert(offsetof(BI_AJBInterface_C_IfCheckDamageOverlap, ReturnValue) == 0x000000, "Member 'BI_AJBInterface_C_IfCheckDamageOverlap::ReturnValue' has a wrong offset!");

// Function BI_AJBInterface.BI_AJBInterface_C.DamageOverlapped
// 0x0028 (0x0028 - 0x0000)
struct BI_AJBInterface_C_DamageOverlapped final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitLocation;                                       // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPenetrating;                                      // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           FactorTag;                                         // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          bInvalidDamage;                                    // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_AJBInterface_C_DamageOverlapped) == 0x000008, "Wrong alignment on BI_AJBInterface_C_DamageOverlapped");
static_assert(sizeof(BI_AJBInterface_C_DamageOverlapped) == 0x000028, "Wrong size on BI_AJBInterface_C_DamageOverlapped");
static_assert(offsetof(BI_AJBInterface_C_DamageOverlapped, DamageCauser) == 0x000000, "Member 'BI_AJBInterface_C_DamageOverlapped::DamageCauser' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_DamageOverlapped, HitLocation) == 0x000008, "Member 'BI_AJBInterface_C_DamageOverlapped::HitLocation' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_DamageOverlapped, bPenetrating) == 0x000014, "Member 'BI_AJBInterface_C_DamageOverlapped::bPenetrating' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_DamageOverlapped, FactorTag) == 0x000018, "Member 'BI_AJBInterface_C_DamageOverlapped::FactorTag' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_DamageOverlapped, bInvalidDamage) == 0x000020, "Member 'BI_AJBInterface_C_DamageOverlapped::bInvalidDamage' has a wrong offset!");

// Function BI_AJBInterface.BI_AJBInterface_C.CheckDisableDamage
// 0x0010 (0x0010 - 0x0000)
struct BI_AJBInterface_C_CheckDisableDamage final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIgnoreSelf;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDisableDamage;                                    // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_AJBInterface_C_CheckDisableDamage) == 0x000008, "Wrong alignment on BI_AJBInterface_C_CheckDisableDamage");
static_assert(sizeof(BI_AJBInterface_C_CheckDisableDamage) == 0x000010, "Wrong size on BI_AJBInterface_C_CheckDisableDamage");
static_assert(offsetof(BI_AJBInterface_C_CheckDisableDamage, DamageCauser) == 0x000000, "Member 'BI_AJBInterface_C_CheckDisableDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_CheckDisableDamage, bIgnoreSelf) == 0x000008, "Member 'BI_AJBInterface_C_CheckDisableDamage::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_CheckDisableDamage, bDisableDamage) == 0x000009, "Member 'BI_AJBInterface_C_CheckDisableDamage::bDisableDamage' has a wrong offset!");

// Function BI_AJBInterface.BI_AJBInterface_C.CheckDisablePassive
// 0x0018 (0x0018 - 0x0000)
struct BI_AJBInterface_C_CheckDisablePassive final
{
public:
	class AActor*                                 PassiveCauser;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           PassiveTag;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          bIgnoreSelf;                                       // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDisablePassive;                                   // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_AJBInterface_C_CheckDisablePassive) == 0x000008, "Wrong alignment on BI_AJBInterface_C_CheckDisablePassive");
static_assert(sizeof(BI_AJBInterface_C_CheckDisablePassive) == 0x000018, "Wrong size on BI_AJBInterface_C_CheckDisablePassive");
static_assert(offsetof(BI_AJBInterface_C_CheckDisablePassive, PassiveCauser) == 0x000000, "Member 'BI_AJBInterface_C_CheckDisablePassive::PassiveCauser' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_CheckDisablePassive, PassiveTag) == 0x000008, "Member 'BI_AJBInterface_C_CheckDisablePassive::PassiveTag' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_CheckDisablePassive, bIgnoreSelf) == 0x000010, "Member 'BI_AJBInterface_C_CheckDisablePassive::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_CheckDisablePassive, bDisablePassive) == 0x000011, "Member 'BI_AJBInterface_C_CheckDisablePassive::bDisablePassive' has a wrong offset!");

// Function BI_AJBInterface.BI_AJBInterface_C.CheckDisableAreaDamage
// 0x0001 (0x0001 - 0x0000)
struct BI_AJBInterface_C_CheckDisableAreaDamage final
{
public:
	bool                                          bDisableAreadamage;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_AJBInterface_C_CheckDisableAreaDamage) == 0x000001, "Wrong alignment on BI_AJBInterface_C_CheckDisableAreaDamage");
static_assert(sizeof(BI_AJBInterface_C_CheckDisableAreaDamage) == 0x000001, "Wrong size on BI_AJBInterface_C_CheckDisableAreaDamage");
static_assert(offsetof(BI_AJBInterface_C_CheckDisableAreaDamage, bDisableAreadamage) == 0x000000, "Member 'BI_AJBInterface_C_CheckDisableAreaDamage::bDisableAreadamage' has a wrong offset!");

// Function BI_AJBInterface.BI_AJBInterface_C.CheckNoDamage
// 0x0010 (0x0010 - 0x0000)
struct BI_AJBInterface_C_CheckNoDamage final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNoDamage;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_AJBInterface_C_CheckNoDamage) == 0x000008, "Wrong alignment on BI_AJBInterface_C_CheckNoDamage");
static_assert(sizeof(BI_AJBInterface_C_CheckNoDamage) == 0x000010, "Wrong size on BI_AJBInterface_C_CheckNoDamage");
static_assert(offsetof(BI_AJBInterface_C_CheckNoDamage, DamageCauser) == 0x000000, "Member 'BI_AJBInterface_C_CheckNoDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_CheckNoDamage, bNoDamage) == 0x000008, "Member 'BI_AJBInterface_C_CheckNoDamage::bNoDamage' has a wrong offset!");

// Function BI_AJBInterface.BI_AJBInterface_C.IsReactedByReticule
// 0x0001 (0x0001 - 0x0000)
struct BI_AJBInterface_C_IsReactedByReticule final
{
public:
	bool                                          bResult;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_AJBInterface_C_IsReactedByReticule) == 0x000001, "Wrong alignment on BI_AJBInterface_C_IsReactedByReticule");
static_assert(sizeof(BI_AJBInterface_C_IsReactedByReticule) == 0x000001, "Wrong size on BI_AJBInterface_C_IsReactedByReticule");
static_assert(offsetof(BI_AJBInterface_C_IsReactedByReticule, bResult) == 0x000000, "Member 'BI_AJBInterface_C_IsReactedByReticule::bResult' has a wrong offset!");

// Function BI_AJBInterface.BI_AJBInterface_C.IgnoreTrace
// 0x0010 (0x0010 - 0x0000)
struct BI_AJBInterface_C_IgnoreTrace final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPairOnly;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIgnore;                                           // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_AJBInterface_C_IgnoreTrace) == 0x000008, "Wrong alignment on BI_AJBInterface_C_IgnoreTrace");
static_assert(sizeof(BI_AJBInterface_C_IgnoreTrace) == 0x000010, "Wrong size on BI_AJBInterface_C_IgnoreTrace");
static_assert(offsetof(BI_AJBInterface_C_IgnoreTrace, Owner) == 0x000000, "Member 'BI_AJBInterface_C_IgnoreTrace::Owner' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_IgnoreTrace, bPairOnly) == 0x000008, "Member 'BI_AJBInterface_C_IgnoreTrace::bPairOnly' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_IgnoreTrace, bIgnore) == 0x000009, "Member 'BI_AJBInterface_C_IgnoreTrace::bIgnore' has a wrong offset!");

// Function BI_AJBInterface.BI_AJBInterface_C.CheckDisableDirectDamage
// 0x0010 (0x0010 - 0x0000)
struct BI_AJBInterface_C_CheckDisableDirectDamage final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisableDirectDamage;                              // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_AJBInterface_C_CheckDisableDirectDamage) == 0x000008, "Wrong alignment on BI_AJBInterface_C_CheckDisableDirectDamage");
static_assert(sizeof(BI_AJBInterface_C_CheckDisableDirectDamage) == 0x000010, "Wrong size on BI_AJBInterface_C_CheckDisableDirectDamage");
static_assert(offsetof(BI_AJBInterface_C_CheckDisableDirectDamage, DamageCauser) == 0x000000, "Member 'BI_AJBInterface_C_CheckDisableDirectDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BI_AJBInterface_C_CheckDisableDirectDamage, bDisableDirectDamage) == 0x000008, "Member 'BI_AJBInterface_C_CheckDisableDirectDamage::bDisableDirectDamage' has a wrong offset!");

}

