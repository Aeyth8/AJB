#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGamePvE_PhaseManager

#include "Basic.hpp"

#include "E_AJBInGamePvE_GamePhase_structs.hpp"
#include "ST_AJBInGamePvE_TimeMessageRow_structs.hpp"
#include "ST_AJBInGamePvE_PhaseInfo_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager
// 0x02E0 (0x02E0 - 0x0000)
struct BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AJBInGamePvE_GamePhase                      K2Node_CustomEvent_ToPhase;                        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_AJBInGamePvE_GamePhase                      K2Node_CustomEvent_FromPhase;                      // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_IncrementWaveIndex_NewWaveIndex;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum1_CmpSuccess;                     // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCurrentWaveIndex_WaveIndex;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCurrentWaveIndex_WaveIndex1;           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWaveDuration_WaveDuration;             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWaveDuration_WaveDuration1;            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_AJBInGameCharacter_C*>       CallFunc_GetAllActorsOfClass_OutActors;            // 0x0028(0x0010)(ZeroConstructor, ReferenceParm)
	class ABP_AJBInGameCharacter_C*               CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               CallFunc_GetStandUserCharacter_UserCharacter;      // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNPC_ReturnValue;                        // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_AJBInGameCharacter_C*>       CallFunc_GetAllActorsOfClass_OutActors1;           // 0x0058(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum2_CmpSuccess;                     // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBPvEGameState_IsValid;               // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBPvEGameState_C*                  CallFunc_GetAJBPvEGameState_BP_AJB_PvE_GameState;  // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAllPhaseFinished_HasFinished;          // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class ABP_AJBBitesTheDustAffecter_C* Affecter)> K2Node_CreateDelegate_OutputDelegate; // 0x0098(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable1;                   // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue1;                 // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBBitesTheDustAffecter_C*          K2Node_CustomEvent_Affecter1;                      // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsServer_ReturnValue1;                    // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBBitesTheDustAffecter_C*          K2Node_CustomEvent_Affecter;                       // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetElapsedTimeFromOpenTheGame_ReturnValue; // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_InIsPaused;                     // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E2[0x2];                                       // 0x00E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetElapsedTimeFromOpenTheGame_ReturnValue1; // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetElapsedTimeFromOpenTheGame_ReturnValue2; // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue1;         // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue1;              // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue1;          // 0x00F5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F6[0x2];                                       // 0x00F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetElapsedTimeInPhase_ElapsedTimeInPhase; // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRemainingTimeInPhase_RemainingTimeInPhase; // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0100(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData1;             // 0x0140(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData2;             // 0x0180(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData3;             // 0x01C0(0x0040)(HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable1;                    // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_204[0x4];                                      // 0x0204(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_ByteToText_ReturnValue;              // 0x0208(0x0018)()
	class ABP_AJBInGameCharacter_C*               CallFunc_Array_Get_Item1;                          // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData4;             // 0x0228(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0268(0x0010)(ZeroConstructor, ReferenceParm)
	class ABP_AJBInGameCharacter_C*               CallFunc_GetStandUserCharacter_UserCharacter1;     // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0280(0x0018)()
	bool                                          CallFunc_IsNPC_ReturnValue1;                       // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_299[0x7];                                      // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x02A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TDelegate<void(class ABP_AJBBitesTheDustAffecter_C* Affecter)> K2Node_CreateDelegate_OutputDelegate1; // 0x02B0(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_HasIntervalFinished_HasFinished;          // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate2;             // 0x02C8(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsInOverTime_IsInOverTime;                // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLastWave_IsLastWave;                    // 0x02D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasWaveFinished_HasFinished;              // 0x02DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager) == 0x000008, "Wrong alignment on BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager");
static_assert(sizeof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager) == 0x0002E0, "Wrong size on BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, EntryPoint) == 0x000000, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, K2Node_CustomEvent_ToPhase) == 0x000004, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::K2Node_CustomEvent_ToPhase' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, K2Node_SwitchEnum_CmpSuccess) == 0x00000C, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, K2Node_CustomEvent_FromPhase) == 0x00000D, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::K2Node_CustomEvent_FromPhase' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_IncrementWaveIndex_NewWaveIndex) == 0x000010, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_IncrementWaveIndex_NewWaveIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, K2Node_SwitchEnum1_CmpSuccess) == 0x000014, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::K2Node_SwitchEnum1_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_GetCurrentWaveIndex_WaveIndex) == 0x000018, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_GetCurrentWaveIndex_WaveIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_GetCurrentWaveIndex_WaveIndex1) == 0x00001C, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_GetCurrentWaveIndex_WaveIndex1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_GetWaveDuration_WaveDuration) == 0x000020, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_GetWaveDuration_WaveDuration' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_GetWaveDuration_WaveDuration1) == 0x000024, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_GetWaveDuration_WaveDuration1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_GetAllActorsOfClass_OutActors) == 0x000028, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_GetStandUserCharacter_UserCharacter) == 0x000048, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_GetStandUserCharacter_UserCharacter' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_IsNPC_ReturnValue) == 0x000050, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_IsNPC_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_GetAllActorsOfClass_OutActors1) == 0x000058, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_GetAllActorsOfClass_OutActors1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_Array_Length_ReturnValue1) == 0x000068, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_IsServer_ReturnValue) == 0x00006C, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_IsServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, K2Node_Event_DeltaSeconds) == 0x000070, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, K2Node_SwitchEnum2_CmpSuccess) == 0x000074, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::K2Node_SwitchEnum2_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, Temp_int_Loop_Counter_Variable) == 0x000078, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_Less_IntInt_ReturnValue) == 0x00007C, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_Add_IntInt_ReturnValue) == 0x000080, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_GetAJBPvEGameState_IsValid) == 0x000084, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_GetAJBPvEGameState_IsValid' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_GetAJBPvEGameState_BP_AJB_PvE_GameState) == 0x000088, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_GetAJBPvEGameState_BP_AJB_PvE_GameState' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_HasAllPhaseFinished_HasFinished) == 0x000090, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_HasAllPhaseFinished_HasFinished' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, K2Node_CreateDelegate_OutputDelegate) == 0x000098, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, Temp_int_Loop_Counter_Variable1) == 0x0000A8, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::Temp_int_Loop_Counter_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_Less_IntInt_ReturnValue1) == 0x0000AC, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_Less_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_Add_IntInt_ReturnValue1) == 0x0000B0, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, K2Node_CustomEvent_Affecter1) == 0x0000B8, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::K2Node_CustomEvent_Affecter1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_IsServer_ReturnValue1) == 0x0000C0, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_IsServer_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, K2Node_CustomEvent_Affecter) == 0x0000C8, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::K2Node_CustomEvent_Affecter' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_GetElapsedTimeFromOpenTheGame_ReturnValue) == 0x0000D0, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_GetElapsedTimeFromOpenTheGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, K2Node_CustomEvent_InIsPaused) == 0x0000D4, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::K2Node_CustomEvent_InIsPaused' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000D8, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000DC, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_Not_PreBool_ReturnValue) == 0x0000E0, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, Temp_bool_Variable) == 0x0000E1, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_GetElapsedTimeFromOpenTheGame_ReturnValue1) == 0x0000E4, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_GetElapsedTimeFromOpenTheGame_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_GetElapsedTimeFromOpenTheGame_ReturnValue2) == 0x0000E8, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_GetElapsedTimeFromOpenTheGame_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_Subtract_FloatFloat_ReturnValue1) == 0x0000EC, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_Subtract_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_Add_FloatFloat_ReturnValue1) == 0x0000F0, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_Add_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000F4, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_Greater_FloatFloat_ReturnValue1) == 0x0000F5, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_Greater_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_GetElapsedTimeInPhase_ElapsedTimeInPhase) == 0x0000F8, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_GetElapsedTimeInPhase_ElapsedTimeInPhase' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_GetRemainingTimeInPhase_RemainingTimeInPhase) == 0x0000FC, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_GetRemainingTimeInPhase_RemainingTimeInPhase' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, K2Node_MakeStruct_FormatArgumentData) == 0x000100, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, K2Node_MakeStruct_FormatArgumentData1) == 0x000140, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::K2Node_MakeStruct_FormatArgumentData1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, K2Node_MakeStruct_FormatArgumentData2) == 0x000180, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::K2Node_MakeStruct_FormatArgumentData2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, K2Node_MakeStruct_FormatArgumentData3) == 0x0001C0, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::K2Node_MakeStruct_FormatArgumentData3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, Temp_int_Array_Index_Variable1) == 0x000200, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::Temp_int_Array_Index_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_Conv_ByteToText_ReturnValue) == 0x000208, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_Conv_ByteToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_Array_Get_Item1) == 0x000220, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, K2Node_MakeStruct_FormatArgumentData4) == 0x000228, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::K2Node_MakeStruct_FormatArgumentData4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, K2Node_MakeArray_Array) == 0x000268, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_GetStandUserCharacter_UserCharacter1) == 0x000278, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_GetStandUserCharacter_UserCharacter1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_Format_ReturnValue) == 0x000280, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_IsNPC_ReturnValue1) == 0x000298, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_IsNPC_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_Conv_TextToString_ReturnValue) == 0x0002A0, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, K2Node_CreateDelegate_OutputDelegate1) == 0x0002B0, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_HasIntervalFinished_HasFinished) == 0x0002C0, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_HasIntervalFinished_HasFinished' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, K2Node_CreateDelegate_OutputDelegate2) == 0x0002C8, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::K2Node_CreateDelegate_OutputDelegate2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_IsInOverTime_IsInOverTime) == 0x0002D8, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_IsInOverTime_IsInOverTime' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_IsLastWave_IsLastWave) == 0x0002D9, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_IsLastWave_IsLastWave' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager, CallFunc_HasWaveFinished_HasFinished) == 0x0002DA, "Member 'BP_AJBInGamePvE_PhaseManager_C_ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager::CallFunc_HasWaveFinished_HasFinished' has a wrong offset!");

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.SetTimerPaused
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGamePvE_PhaseManager_C_SetTimerPaused final
{
public:
	bool                                          InIsPaused;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGamePvE_PhaseManager_C_SetTimerPaused) == 0x000001, "Wrong alignment on BP_AJBInGamePvE_PhaseManager_C_SetTimerPaused");
static_assert(sizeof(BP_AJBInGamePvE_PhaseManager_C_SetTimerPaused) == 0x000001, "Wrong size on BP_AJBInGamePvE_PhaseManager_C_SetTimerPaused");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_SetTimerPaused, InIsPaused) == 0x000000, "Member 'BP_AJBInGamePvE_PhaseManager_C_SetTimerPaused::InIsPaused' has a wrong offset!");

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.OnEndBitesTheDust
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBInGamePvE_PhaseManager_C_OnEndBitesTheDust final
{
public:
	class ABP_AJBBitesTheDustAffecter_C*          Affecter;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGamePvE_PhaseManager_C_OnEndBitesTheDust) == 0x000008, "Wrong alignment on BP_AJBInGamePvE_PhaseManager_C_OnEndBitesTheDust");
static_assert(sizeof(BP_AJBInGamePvE_PhaseManager_C_OnEndBitesTheDust) == 0x000008, "Wrong size on BP_AJBInGamePvE_PhaseManager_C_OnEndBitesTheDust");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_OnEndBitesTheDust, Affecter) == 0x000000, "Member 'BP_AJBInGamePvE_PhaseManager_C_OnEndBitesTheDust::Affecter' has a wrong offset!");

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.OnBeginBitesTheDust
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBInGamePvE_PhaseManager_C_OnBeginBitesTheDust final
{
public:
	class ABP_AJBBitesTheDustAffecter_C*          Affecter;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGamePvE_PhaseManager_C_OnBeginBitesTheDust) == 0x000008, "Wrong alignment on BP_AJBInGamePvE_PhaseManager_C_OnBeginBitesTheDust");
static_assert(sizeof(BP_AJBInGamePvE_PhaseManager_C_OnBeginBitesTheDust) == 0x000008, "Wrong size on BP_AJBInGamePvE_PhaseManager_C_OnBeginBitesTheDust");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_OnBeginBitesTheDust, Affecter) == 0x000000, "Member 'BP_AJBInGamePvE_PhaseManager_C_OnBeginBitesTheDust::Affecter' has a wrong offset!");

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBInGamePvE_PhaseManager_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGamePvE_PhaseManager_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_AJBInGamePvE_PhaseManager_C_ReceiveTick");
static_assert(sizeof(BP_AJBInGamePvE_PhaseManager_C_ReceiveTick) == 0x000004, "Wrong size on BP_AJBInGamePvE_PhaseManager_C_ReceiveTick");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_AJBInGamePvE_PhaseManager_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.OnChangePhaseTo
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGamePvE_PhaseManager_C_OnChangePhaseTo final
{
public:
	E_AJBInGamePvE_GamePhase                      ToPhase;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGamePvE_PhaseManager_C_OnChangePhaseTo) == 0x000001, "Wrong alignment on BP_AJBInGamePvE_PhaseManager_C_OnChangePhaseTo");
static_assert(sizeof(BP_AJBInGamePvE_PhaseManager_C_OnChangePhaseTo) == 0x000001, "Wrong size on BP_AJBInGamePvE_PhaseManager_C_OnChangePhaseTo");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_OnChangePhaseTo, ToPhase) == 0x000000, "Member 'BP_AJBInGamePvE_PhaseManager_C_OnChangePhaseTo::ToPhase' has a wrong offset!");

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.OnChangePhaseFrom
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGamePvE_PhaseManager_C_OnChangePhaseFrom final
{
public:
	E_AJBInGamePvE_GamePhase                      FromPhase;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGamePvE_PhaseManager_C_OnChangePhaseFrom) == 0x000001, "Wrong alignment on BP_AJBInGamePvE_PhaseManager_C_OnChangePhaseFrom");
static_assert(sizeof(BP_AJBInGamePvE_PhaseManager_C_OnChangePhaseFrom) == 0x000001, "Wrong size on BP_AJBInGamePvE_PhaseManager_C_OnChangePhaseFrom");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_OnChangePhaseFrom, FromPhase) == 0x000000, "Member 'BP_AJBInGamePvE_PhaseManager_C_OnChangePhaseFrom::FromPhase' has a wrong offset!");

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.ChangePhase
// 0x0002 (0x0002 - 0x0000)
struct BP_AJBInGamePvE_PhaseManager_C_ChangePhase final
{
public:
	E_AJBInGamePvE_GamePhase                      NewPhase;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AJBInGamePvE_GamePhase                      OldPhase;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGamePvE_PhaseManager_C_ChangePhase) == 0x000001, "Wrong alignment on BP_AJBInGamePvE_PhaseManager_C_ChangePhase");
static_assert(sizeof(BP_AJBInGamePvE_PhaseManager_C_ChangePhase) == 0x000002, "Wrong size on BP_AJBInGamePvE_PhaseManager_C_ChangePhase");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ChangePhase, NewPhase) == 0x000000, "Member 'BP_AJBInGamePvE_PhaseManager_C_ChangePhase::NewPhase' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ChangePhase, OldPhase) == 0x000001, "Member 'BP_AJBInGamePvE_PhaseManager_C_ChangePhase::OldPhase' has a wrong offset!");

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.GetElapsedTimeInPhase
// 0x000C (0x000C - 0x0000)
struct BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeInPhase final
{
public:
	float                                         ElapsedTimeInPhase;                                // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetElapsedTimeInGame_ElapsedTimeInGame;   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeInPhase) == 0x000004, "Wrong alignment on BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeInPhase");
static_assert(sizeof(BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeInPhase) == 0x00000C, "Wrong size on BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeInPhase");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeInPhase, ElapsedTimeInPhase) == 0x000000, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeInPhase::ElapsedTimeInPhase' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeInPhase, CallFunc_GetElapsedTimeInGame_ElapsedTimeInGame) == 0x000004, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeInPhase::CallFunc_GetElapsedTimeInGame_ElapsedTimeInGame' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeInPhase, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeInPhase::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.GetCurrentPhase
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGamePvE_PhaseManager_C_GetCurrentPhase final
{
public:
	E_AJBInGamePvE_GamePhase                      CurrentPhase_0;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGamePvE_PhaseManager_C_GetCurrentPhase) == 0x000001, "Wrong alignment on BP_AJBInGamePvE_PhaseManager_C_GetCurrentPhase");
static_assert(sizeof(BP_AJBInGamePvE_PhaseManager_C_GetCurrentPhase) == 0x000001, "Wrong size on BP_AJBInGamePvE_PhaseManager_C_GetCurrentPhase");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetCurrentPhase, CurrentPhase_0) == 0x000000, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetCurrentPhase::CurrentPhase_0' has a wrong offset!");

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.AddTotalPastPhaseTime
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBInGamePvE_PhaseManager_C_AddTotalPastPhaseTime final
{
public:
	float                                         AddTime;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGamePvE_PhaseManager_C_AddTotalPastPhaseTime) == 0x000004, "Wrong alignment on BP_AJBInGamePvE_PhaseManager_C_AddTotalPastPhaseTime");
static_assert(sizeof(BP_AJBInGamePvE_PhaseManager_C_AddTotalPastPhaseTime) == 0x000008, "Wrong size on BP_AJBInGamePvE_PhaseManager_C_AddTotalPastPhaseTime");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_AddTotalPastPhaseTime, AddTime) == 0x000000, "Member 'BP_AJBInGamePvE_PhaseManager_C_AddTotalPastPhaseTime::AddTime' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_AddTotalPastPhaseTime, CallFunc_Add_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_AJBInGamePvE_PhaseManager_C_AddTotalPastPhaseTime::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.StartPvEGame
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBInGamePvE_PhaseManager_C_StartPvEGame final
{
public:
	int32                                         CallFunc_IncrementWaveIndex_NewWaveIndex;          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGamePvE_PhaseManager_C_StartPvEGame) == 0x000004, "Wrong alignment on BP_AJBInGamePvE_PhaseManager_C_StartPvEGame");
static_assert(sizeof(BP_AJBInGamePvE_PhaseManager_C_StartPvEGame) == 0x000004, "Wrong size on BP_AJBInGamePvE_PhaseManager_C_StartPvEGame");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_StartPvEGame, CallFunc_IncrementWaveIndex_NewWaveIndex) == 0x000000, "Member 'BP_AJBInGamePvE_PhaseManager_C_StartPvEGame::CallFunc_IncrementWaveIndex_NewWaveIndex' has a wrong offset!");

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.IncrementWaveIndex
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBInGamePvE_PhaseManager_C_IncrementWaveIndex final
{
public:
	int32                                         NewWaveIndex;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGamePvE_PhaseManager_C_IncrementWaveIndex) == 0x000004, "Wrong alignment on BP_AJBInGamePvE_PhaseManager_C_IncrementWaveIndex");
static_assert(sizeof(BP_AJBInGamePvE_PhaseManager_C_IncrementWaveIndex) == 0x000008, "Wrong size on BP_AJBInGamePvE_PhaseManager_C_IncrementWaveIndex");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_IncrementWaveIndex, NewWaveIndex) == 0x000000, "Member 'BP_AJBInGamePvE_PhaseManager_C_IncrementWaveIndex::NewWaveIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_IncrementWaveIndex, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'BP_AJBInGamePvE_PhaseManager_C_IncrementWaveIndex::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.HasIntervalFinished
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBInGamePvE_PhaseManager_C_HasIntervalFinished final
{
public:
	bool                                          HasFinished;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurrentIntervalDuration_IntervalDuration; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetElapsedTimeInPhase_ElapsedTimeInPhase; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGamePvE_PhaseManager_C_HasIntervalFinished) == 0x000004, "Wrong alignment on BP_AJBInGamePvE_PhaseManager_C_HasIntervalFinished");
static_assert(sizeof(BP_AJBInGamePvE_PhaseManager_C_HasIntervalFinished) == 0x000010, "Wrong size on BP_AJBInGamePvE_PhaseManager_C_HasIntervalFinished");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_HasIntervalFinished, HasFinished) == 0x000000, "Member 'BP_AJBInGamePvE_PhaseManager_C_HasIntervalFinished::HasFinished' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_HasIntervalFinished, CallFunc_GetCurrentIntervalDuration_IntervalDuration) == 0x000004, "Member 'BP_AJBInGamePvE_PhaseManager_C_HasIntervalFinished::CallFunc_GetCurrentIntervalDuration_IntervalDuration' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_HasIntervalFinished, CallFunc_GetElapsedTimeInPhase_ElapsedTimeInPhase) == 0x000008, "Member 'BP_AJBInGamePvE_PhaseManager_C_HasIntervalFinished::CallFunc_GetElapsedTimeInPhase_ElapsedTimeInPhase' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_HasIntervalFinished, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00000C, "Member 'BP_AJBInGamePvE_PhaseManager_C_HasIntervalFinished::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_HasIntervalFinished, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00000D, "Member 'BP_AJBInGamePvE_PhaseManager_C_HasIntervalFinished::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_HasIntervalFinished, CallFunc_BooleanAND_ReturnValue) == 0x00000E, "Member 'BP_AJBInGamePvE_PhaseManager_C_HasIntervalFinished::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.HasWaveFinished
// 0x0028 (0x0028 - 0x0000)
struct BP_AJBInGamePvE_PhaseManager_C_HasWaveFinished final
{
public:
	bool                                          HasFinished;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGamePvE_EnemySpawnManager_C*   CallFunc_GetPvESpawnManager_SpawnManager;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentWaveDuration_WaveDuration;      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAllBossesSpawned_HasAllBossesSpawned;  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNoLivingOtherEnemies_IsNoLivingEnemies; // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsNoLivingNormalEnemies_IsNoLivingEnemies; // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetElapsedTimeInPhase_ElapsedTimeInPhase; // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue3;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGamePvE_PhaseManager_C_HasWaveFinished) == 0x000008, "Wrong alignment on BP_AJBInGamePvE_PhaseManager_C_HasWaveFinished");
static_assert(sizeof(BP_AJBInGamePvE_PhaseManager_C_HasWaveFinished) == 0x000028, "Wrong size on BP_AJBInGamePvE_PhaseManager_C_HasWaveFinished");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_HasWaveFinished, HasFinished) == 0x000000, "Member 'BP_AJBInGamePvE_PhaseManager_C_HasWaveFinished::HasFinished' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_HasWaveFinished, CallFunc_GetPvESpawnManager_SpawnManager) == 0x000008, "Member 'BP_AJBInGamePvE_PhaseManager_C_HasWaveFinished::CallFunc_GetPvESpawnManager_SpawnManager' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_HasWaveFinished, CallFunc_GetCurrentWaveDuration_WaveDuration) == 0x000010, "Member 'BP_AJBInGamePvE_PhaseManager_C_HasWaveFinished::CallFunc_GetCurrentWaveDuration_WaveDuration' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_HasWaveFinished, CallFunc_HasAllBossesSpawned_HasAllBossesSpawned) == 0x000014, "Member 'BP_AJBInGamePvE_PhaseManager_C_HasWaveFinished::CallFunc_HasAllBossesSpawned_HasAllBossesSpawned' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_HasWaveFinished, CallFunc_IsNoLivingOtherEnemies_IsNoLivingEnemies) == 0x000015, "Member 'BP_AJBInGamePvE_PhaseManager_C_HasWaveFinished::CallFunc_IsNoLivingOtherEnemies_IsNoLivingEnemies' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_HasWaveFinished, CallFunc_IsNoLivingNormalEnemies_IsNoLivingEnemies) == 0x000016, "Member 'BP_AJBInGamePvE_PhaseManager_C_HasWaveFinished::CallFunc_IsNoLivingNormalEnemies_IsNoLivingEnemies' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_HasWaveFinished, CallFunc_GetElapsedTimeInPhase_ElapsedTimeInPhase) == 0x000018, "Member 'BP_AJBInGamePvE_PhaseManager_C_HasWaveFinished::CallFunc_GetElapsedTimeInPhase_ElapsedTimeInPhase' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_HasWaveFinished, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00001C, "Member 'BP_AJBInGamePvE_PhaseManager_C_HasWaveFinished::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_HasWaveFinished, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00001D, "Member 'BP_AJBInGamePvE_PhaseManager_C_HasWaveFinished::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_HasWaveFinished, CallFunc_BooleanAND_ReturnValue) == 0x00001E, "Member 'BP_AJBInGamePvE_PhaseManager_C_HasWaveFinished::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_HasWaveFinished, CallFunc_BooleanAND_ReturnValue1) == 0x00001F, "Member 'BP_AJBInGamePvE_PhaseManager_C_HasWaveFinished::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_HasWaveFinished, CallFunc_BooleanAND_ReturnValue2) == 0x000020, "Member 'BP_AJBInGamePvE_PhaseManager_C_HasWaveFinished::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_HasWaveFinished, CallFunc_BooleanAND_ReturnValue3) == 0x000021, "Member 'BP_AJBInGamePvE_PhaseManager_C_HasWaveFinished::CallFunc_BooleanAND_ReturnValue3' has a wrong offset!");

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.GetWaveDuration
// 0x0014 (0x0014 - 0x0000)
struct BP_AJBInGamePvE_PhaseManager_C_GetWaveDuration final
{
public:
	int32                                         WaveIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaveDuration;                                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_AJBInGamePvE_PhaseInfo             CallFunc_GetWaveInfo_Output;                       // 0x0008(0x000C)(HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGamePvE_PhaseManager_C_GetWaveDuration) == 0x000004, "Wrong alignment on BP_AJBInGamePvE_PhaseManager_C_GetWaveDuration");
static_assert(sizeof(BP_AJBInGamePvE_PhaseManager_C_GetWaveDuration) == 0x000014, "Wrong size on BP_AJBInGamePvE_PhaseManager_C_GetWaveDuration");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetWaveDuration, WaveIndex) == 0x000000, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetWaveDuration::WaveIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetWaveDuration, WaveDuration) == 0x000004, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetWaveDuration::WaveDuration' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetWaveDuration, CallFunc_GetWaveInfo_Output) == 0x000008, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetWaveDuration::CallFunc_GetWaveInfo_Output' has a wrong offset!");

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.GetIntervalDuration
// 0x0014 (0x0014 - 0x0000)
struct BP_AJBInGamePvE_PhaseManager_C_GetIntervalDuration final
{
public:
	int32                                         WaveIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IntervalDuration;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_AJBInGamePvE_PhaseInfo             CallFunc_GetWaveInfo_Output;                       // 0x0008(0x000C)(HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGamePvE_PhaseManager_C_GetIntervalDuration) == 0x000004, "Wrong alignment on BP_AJBInGamePvE_PhaseManager_C_GetIntervalDuration");
static_assert(sizeof(BP_AJBInGamePvE_PhaseManager_C_GetIntervalDuration) == 0x000014, "Wrong size on BP_AJBInGamePvE_PhaseManager_C_GetIntervalDuration");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetIntervalDuration, WaveIndex) == 0x000000, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetIntervalDuration::WaveIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetIntervalDuration, IntervalDuration) == 0x000004, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetIntervalDuration::IntervalDuration' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetIntervalDuration, CallFunc_GetWaveInfo_Output) == 0x000008, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetIntervalDuration::CallFunc_GetWaveInfo_Output' has a wrong offset!");

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.GetMaxWaveCount
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBInGamePvE_PhaseManager_C_GetMaxWaveCount final
{
public:
	int32                                         MaxWaveCount_0;                                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGamePvE_PhaseManager_C_GetMaxWaveCount) == 0x000004, "Wrong alignment on BP_AJBInGamePvE_PhaseManager_C_GetMaxWaveCount");
static_assert(sizeof(BP_AJBInGamePvE_PhaseManager_C_GetMaxWaveCount) == 0x000004, "Wrong size on BP_AJBInGamePvE_PhaseManager_C_GetMaxWaveCount");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetMaxWaveCount, MaxWaveCount_0) == 0x000000, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetMaxWaveCount::MaxWaveCount_0' has a wrong offset!");

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.ParseWaveInfo
// 0x0090 (0x0090 - 0x0000)
struct BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo final
{
public:
	int32                                         MaxWaveIndex;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             WaveInfoDataTable;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable1;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable1;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue2;                  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0030(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_AJBInGamePvE_PhaseInfo             CallFunc_GetDataTableRowFromName_OutRow;           // 0x0054(0x000C)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Array_Get_Item1;                          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_AJBInGamePvE_PhaseInfo             CallFunc_GetDataTableRowFromName_OutRow1;          // 0x0070(0x000C)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue1;     // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue1;                 // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo) == 0x000008, "Wrong alignment on BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo");
static_assert(sizeof(BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo) == 0x000090, "Wrong size on BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo, MaxWaveIndex) == 0x000000, "Member 'BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo::MaxWaveIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo, WaveInfoDataTable) == 0x000008, "Member 'BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo::WaveInfoDataTable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo, Temp_int_Array_Index_Variable1) == 0x00001C, "Member 'BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo::Temp_int_Array_Index_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo, CallFunc_Add_IntInt_ReturnValue1) == 0x000020, "Member 'BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo, Temp_int_Loop_Counter_Variable1) == 0x000024, "Member 'BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo::Temp_int_Loop_Counter_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo, CallFunc_Add_IntInt_ReturnValue2) == 0x000028, "Member 'BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo::CallFunc_Add_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000030, "Member 'BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo, CallFunc_Array_Get_Item) == 0x000048, "Member 'BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo, CallFunc_GetDataTableRowFromName_OutRow) == 0x000054, "Member 'BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000060, "Member 'BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo, CallFunc_Array_Get_Item1) == 0x000068, "Member 'BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo, CallFunc_GetDataTableRowFromName_OutRow1) == 0x000070, "Member 'BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo::CallFunc_GetDataTableRowFromName_OutRow1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo, CallFunc_GetDataTableRowFromName_ReturnValue1) == 0x00007C, "Member 'BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo::CallFunc_GetDataTableRowFromName_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo, CallFunc_Array_Length_ReturnValue1) == 0x000080, "Member 'BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo, CallFunc_Less_IntInt_ReturnValue1) == 0x000084, "Member 'BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo::CallFunc_Less_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo, CallFunc_Max_ReturnValue) == 0x000088, "Member 'BP_AJBInGamePvE_PhaseManager_C_ParseWaveInfo::CallFunc_Max_ReturnValue' has a wrong offset!");

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.GetCurrentWaveIndex
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBInGamePvE_PhaseManager_C_GetCurrentWaveIndex final
{
public:
	int32                                         WaveIndex;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGamePvE_PhaseManager_C_GetCurrentWaveIndex) == 0x000004, "Wrong alignment on BP_AJBInGamePvE_PhaseManager_C_GetCurrentWaveIndex");
static_assert(sizeof(BP_AJBInGamePvE_PhaseManager_C_GetCurrentWaveIndex) == 0x000004, "Wrong size on BP_AJBInGamePvE_PhaseManager_C_GetCurrentWaveIndex");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetCurrentWaveIndex, WaveIndex) == 0x000000, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetCurrentWaveIndex::WaveIndex' has a wrong offset!");

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.GetCurrentWaveDuration
// 0x000C (0x000C - 0x0000)
struct BP_AJBInGamePvE_PhaseManager_C_GetCurrentWaveDuration final
{
public:
	float                                         WaveDuration;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCurrentWaveIndex_WaveIndex;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWaveDuration_WaveDuration;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGamePvE_PhaseManager_C_GetCurrentWaveDuration) == 0x000004, "Wrong alignment on BP_AJBInGamePvE_PhaseManager_C_GetCurrentWaveDuration");
static_assert(sizeof(BP_AJBInGamePvE_PhaseManager_C_GetCurrentWaveDuration) == 0x00000C, "Wrong size on BP_AJBInGamePvE_PhaseManager_C_GetCurrentWaveDuration");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetCurrentWaveDuration, WaveDuration) == 0x000000, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetCurrentWaveDuration::WaveDuration' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetCurrentWaveDuration, CallFunc_GetCurrentWaveIndex_WaveIndex) == 0x000004, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetCurrentWaveDuration::CallFunc_GetCurrentWaveIndex_WaveIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetCurrentWaveDuration, CallFunc_GetWaveDuration_WaveDuration) == 0x000008, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetCurrentWaveDuration::CallFunc_GetWaveDuration_WaveDuration' has a wrong offset!");

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.GetCurrentIntervalDuration
// 0x000C (0x000C - 0x0000)
struct BP_AJBInGamePvE_PhaseManager_C_GetCurrentIntervalDuration final
{
public:
	float                                         IntervalDuration;                                  // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCurrentWaveIndex_WaveIndex;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetIntervalDuration_IntervalDuration;     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGamePvE_PhaseManager_C_GetCurrentIntervalDuration) == 0x000004, "Wrong alignment on BP_AJBInGamePvE_PhaseManager_C_GetCurrentIntervalDuration");
static_assert(sizeof(BP_AJBInGamePvE_PhaseManager_C_GetCurrentIntervalDuration) == 0x00000C, "Wrong size on BP_AJBInGamePvE_PhaseManager_C_GetCurrentIntervalDuration");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetCurrentIntervalDuration, IntervalDuration) == 0x000000, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetCurrentIntervalDuration::IntervalDuration' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetCurrentIntervalDuration, CallFunc_GetCurrentWaveIndex_WaveIndex) == 0x000004, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetCurrentIntervalDuration::CallFunc_GetCurrentWaveIndex_WaveIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetCurrentIntervalDuration, CallFunc_GetIntervalDuration_IntervalDuration) == 0x000008, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetCurrentIntervalDuration::CallFunc_GetIntervalDuration_IntervalDuration' has a wrong offset!");

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.GetRemainingTimeInPhase
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBInGamePvE_PhaseManager_C_GetRemainingTimeInPhase final
{
public:
	float                                         RemainingTimeInPhase;                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentPhaseTime_CurrentPhaseTime;     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetElapsedTimeInPhase_ElapsedTimeInPhase; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGamePvE_PhaseManager_C_GetRemainingTimeInPhase) == 0x000004, "Wrong alignment on BP_AJBInGamePvE_PhaseManager_C_GetRemainingTimeInPhase");
static_assert(sizeof(BP_AJBInGamePvE_PhaseManager_C_GetRemainingTimeInPhase) == 0x000010, "Wrong size on BP_AJBInGamePvE_PhaseManager_C_GetRemainingTimeInPhase");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetRemainingTimeInPhase, RemainingTimeInPhase) == 0x000000, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetRemainingTimeInPhase::RemainingTimeInPhase' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetRemainingTimeInPhase, CallFunc_GetCurrentPhaseTime_CurrentPhaseTime) == 0x000004, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetRemainingTimeInPhase::CallFunc_GetCurrentPhaseTime_CurrentPhaseTime' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetRemainingTimeInPhase, CallFunc_GetElapsedTimeInPhase_ElapsedTimeInPhase) == 0x000008, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetRemainingTimeInPhase::CallFunc_GetElapsedTimeInPhase_ElapsedTimeInPhase' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetRemainingTimeInPhase, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetRemainingTimeInPhase::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.GetCurrentPhaseTime
// 0x001C (0x001C - 0x0000)
struct BP_AJBInGamePvE_PhaseManager_C_GetCurrentPhaseTime final
{
public:
	float                                         CurrentPhaseTime;                                  // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AJBInGamePvE_GamePhase                      Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentIntervalDuration_IntervalDuration; // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentWaveDuration_WaveDuration;      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AJBInGamePvE_GamePhase                      CallFunc_GetCurrentPhase_CurrentPhase;             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGamePvE_PhaseManager_C_GetCurrentPhaseTime) == 0x000004, "Wrong alignment on BP_AJBInGamePvE_PhaseManager_C_GetCurrentPhaseTime");
static_assert(sizeof(BP_AJBInGamePvE_PhaseManager_C_GetCurrentPhaseTime) == 0x00001C, "Wrong size on BP_AJBInGamePvE_PhaseManager_C_GetCurrentPhaseTime");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetCurrentPhaseTime, CurrentPhaseTime) == 0x000000, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetCurrentPhaseTime::CurrentPhaseTime' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetCurrentPhaseTime, Temp_byte_Variable) == 0x000004, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetCurrentPhaseTime::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetCurrentPhaseTime, Temp_float_Variable) == 0x000008, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetCurrentPhaseTime::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetCurrentPhaseTime, CallFunc_GetCurrentIntervalDuration_IntervalDuration) == 0x00000C, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetCurrentPhaseTime::CallFunc_GetCurrentIntervalDuration_IntervalDuration' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetCurrentPhaseTime, CallFunc_GetCurrentWaveDuration_WaveDuration) == 0x000010, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetCurrentPhaseTime::CallFunc_GetCurrentWaveDuration_WaveDuration' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetCurrentPhaseTime, CallFunc_GetCurrentPhase_CurrentPhase) == 0x000014, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetCurrentPhaseTime::CallFunc_GetCurrentPhase_CurrentPhase' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetCurrentPhaseTime, K2Node_Select_Default) == 0x000018, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetCurrentPhaseTime::K2Node_Select_Default' has a wrong offset!");

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.HasAllPhaseFinished
// 0x0014 (0x0014 - 0x0000)
struct BP_AJBInGamePvE_PhaseManager_C_HasAllPhaseFinished final
{
public:
	bool                                          HasFinished;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLastWave_IsLastWave;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasWaveFinished_HasFinished;              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetMaxWaveCount_MaxWaveCount;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCurrentWaveIndex_WaveIndex;            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGamePvE_PhaseManager_C_HasAllPhaseFinished) == 0x000004, "Wrong alignment on BP_AJBInGamePvE_PhaseManager_C_HasAllPhaseFinished");
static_assert(sizeof(BP_AJBInGamePvE_PhaseManager_C_HasAllPhaseFinished) == 0x000014, "Wrong size on BP_AJBInGamePvE_PhaseManager_C_HasAllPhaseFinished");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_HasAllPhaseFinished, HasFinished) == 0x000000, "Member 'BP_AJBInGamePvE_PhaseManager_C_HasAllPhaseFinished::HasFinished' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_HasAllPhaseFinished, CallFunc_IsLastWave_IsLastWave) == 0x000001, "Member 'BP_AJBInGamePvE_PhaseManager_C_HasAllPhaseFinished::CallFunc_IsLastWave_IsLastWave' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_HasAllPhaseFinished, CallFunc_HasWaveFinished_HasFinished) == 0x000002, "Member 'BP_AJBInGamePvE_PhaseManager_C_HasAllPhaseFinished::CallFunc_HasWaveFinished_HasFinished' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_HasAllPhaseFinished, CallFunc_GetMaxWaveCount_MaxWaveCount) == 0x000004, "Member 'BP_AJBInGamePvE_PhaseManager_C_HasAllPhaseFinished::CallFunc_GetMaxWaveCount_MaxWaveCount' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_HasAllPhaseFinished, CallFunc_BooleanAND_ReturnValue) == 0x000008, "Member 'BP_AJBInGamePvE_PhaseManager_C_HasAllPhaseFinished::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_HasAllPhaseFinished, CallFunc_GetCurrentWaveIndex_WaveIndex) == 0x00000C, "Member 'BP_AJBInGamePvE_PhaseManager_C_HasAllPhaseFinished::CallFunc_GetCurrentWaveIndex_WaveIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_HasAllPhaseFinished, CallFunc_Greater_IntInt_ReturnValue) == 0x000010, "Member 'BP_AJBInGamePvE_PhaseManager_C_HasAllPhaseFinished::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_HasAllPhaseFinished, CallFunc_BooleanOR_ReturnValue) == 0x000011, "Member 'BP_AJBInGamePvE_PhaseManager_C_HasAllPhaseFinished::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.GetElapsedTimeFromOpenTheGame
// 0x0020 (0x0020 - 0x0000)
struct BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeFromOpenTheGame final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBInGameGameState_bIsValid;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameGameState*                    CallFunc_GetAJBInGameGameState_ReturnValue;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimespan                              CallFunc_GetElapsedInGameTimespan_ReturnValue;     // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTotalSeconds_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeFromOpenTheGame) == 0x000008, "Wrong alignment on BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeFromOpenTheGame");
static_assert(sizeof(BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeFromOpenTheGame) == 0x000020, "Wrong size on BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeFromOpenTheGame");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeFromOpenTheGame, ReturnValue) == 0x000000, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeFromOpenTheGame::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeFromOpenTheGame, CallFunc_GetAJBInGameGameState_bIsValid) == 0x000004, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeFromOpenTheGame::CallFunc_GetAJBInGameGameState_bIsValid' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeFromOpenTheGame, CallFunc_GetAJBInGameGameState_ReturnValue) == 0x000008, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeFromOpenTheGame::CallFunc_GetAJBInGameGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeFromOpenTheGame, CallFunc_GetElapsedInGameTimespan_ReturnValue) == 0x000010, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeFromOpenTheGame::CallFunc_GetElapsedInGameTimespan_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeFromOpenTheGame, CallFunc_GetTotalSeconds_ReturnValue) == 0x000018, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeFromOpenTheGame::CallFunc_GetTotalSeconds_ReturnValue' has a wrong offset!");

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.GetWaveInfo
// 0x002C (0x002C - 0x0000)
struct BP_AJBInGamePvE_PhaseManager_C_GetWaveInfo final
{
public:
	int32                                         WaveIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_AJBInGamePvE_PhaseInfo             Output;                                            // 0x0004(0x000C)(Parm, OutParm, HasGetValueTypeHash)
	struct FST_AJBInGamePvE_PhaseInfo             K2Node_MakeStruct_ST_AJBInGamePvE_PhaseInfo;       // 0x0010(0x000C)(HasGetValueTypeHash)
	struct FST_AJBInGamePvE_PhaseInfo             CallFunc_Array_Get_Item;                           // 0x001C(0x000C)(HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGamePvE_PhaseManager_C_GetWaveInfo) == 0x000004, "Wrong alignment on BP_AJBInGamePvE_PhaseManager_C_GetWaveInfo");
static_assert(sizeof(BP_AJBInGamePvE_PhaseManager_C_GetWaveInfo) == 0x00002C, "Wrong size on BP_AJBInGamePvE_PhaseManager_C_GetWaveInfo");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetWaveInfo, WaveIndex) == 0x000000, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetWaveInfo::WaveIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetWaveInfo, Output) == 0x000004, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetWaveInfo::Output' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetWaveInfo, K2Node_MakeStruct_ST_AJBInGamePvE_PhaseInfo) == 0x000010, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetWaveInfo::K2Node_MakeStruct_ST_AJBInGamePvE_PhaseInfo' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetWaveInfo, CallFunc_Array_Get_Item) == 0x00001C, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetWaveInfo::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetWaveInfo, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000028, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetWaveInfo::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.SetTotalPhaseTime
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBInGamePvE_PhaseManager_C_SetTotalPhaseTime final
{
public:
	float                                         NewTime;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGamePvE_PhaseManager_C_SetTotalPhaseTime) == 0x000004, "Wrong alignment on BP_AJBInGamePvE_PhaseManager_C_SetTotalPhaseTime");
static_assert(sizeof(BP_AJBInGamePvE_PhaseManager_C_SetTotalPhaseTime) == 0x000004, "Wrong size on BP_AJBInGamePvE_PhaseManager_C_SetTotalPhaseTime");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_SetTotalPhaseTime, NewTime) == 0x000000, "Member 'BP_AJBInGamePvE_PhaseManager_C_SetTotalPhaseTime::NewTime' has a wrong offset!");

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.RefreshTotalPhaseTime
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBInGamePvE_PhaseManager_C_RefreshTotalPhaseTime final
{
public:
	float                                         CallFunc_GetElapsedTimeInGame_ElapsedTimeInGame;   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGamePvE_PhaseManager_C_RefreshTotalPhaseTime) == 0x000004, "Wrong alignment on BP_AJBInGamePvE_PhaseManager_C_RefreshTotalPhaseTime");
static_assert(sizeof(BP_AJBInGamePvE_PhaseManager_C_RefreshTotalPhaseTime) == 0x000004, "Wrong size on BP_AJBInGamePvE_PhaseManager_C_RefreshTotalPhaseTime");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_RefreshTotalPhaseTime, CallFunc_GetElapsedTimeInGame_ElapsedTimeInGame) == 0x000000, "Member 'BP_AJBInGamePvE_PhaseManager_C_RefreshTotalPhaseTime::CallFunc_GetElapsedTimeInGame_ElapsedTimeInGame' has a wrong offset!");

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.GetElapsedTimeInGame
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeInGame final
{
public:
	float                                         ElapsedTimeInGame;                                 // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetElapsedTimeFromOpenTheGame_ReturnValue; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeInGame) == 0x000004, "Wrong alignment on BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeInGame");
static_assert(sizeof(BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeInGame) == 0x000010, "Wrong size on BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeInGame");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeInGame, ElapsedTimeInGame) == 0x000000, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeInGame::ElapsedTimeInGame' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeInGame, Temp_bool_Variable) == 0x000004, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeInGame::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeInGame, CallFunc_GetElapsedTimeFromOpenTheGame_ReturnValue) == 0x000008, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeInGame::CallFunc_GetElapsedTimeFromOpenTheGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeInGame, K2Node_Select_Default) == 0x00000C, "Member 'BP_AJBInGamePvE_PhaseManager_C_GetElapsedTimeInGame::K2Node_Select_Default' has a wrong offset!");

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.UpdateTimeMessage
// 0x0090 (0x0090 - 0x0000)
struct BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage final
{
public:
	int32                                         TempLeftTime;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TempRowName;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTempDuplicated;                                   // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           CallFunc_RequestWwiseEventOnLocal_AkComponent;     // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LeftTimeCurrentPhase_LeftTime;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable1;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_AJBInGamePvE_TimeMessageRow        CallFunc_GetDataTableRowFromName_OutRow;           // 0x0038(0x0008)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0058(0x0010)(ZeroConstructor, ReferenceParm)
	class FName                                   CallFunc_Array_Get_Item1;                          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAJBInGamePvEHUD_bSuccess;              // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_76[0x2];                                       // 0x0076(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGamePvEHUD_C*                  CallFunc_GetAJBInGamePvEHUD_InGamePvEHUD;          // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable1;                   // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue1;                 // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0086(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_87[0x1];                                       // 0x0087(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage) == 0x000008, "Wrong alignment on BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage");
static_assert(sizeof(BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage) == 0x000090, "Wrong size on BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage, TempLeftTime) == 0x000000, "Member 'BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage::TempLeftTime' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage, TempRowName) == 0x000008, "Member 'BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage::TempRowName' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage, bTempDuplicated) == 0x000010, "Member 'BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage::bTempDuplicated' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage, Temp_bool_True_if_break_was_hit_Variable) == 0x000011, "Member 'BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage, CallFunc_Not_PreBool_ReturnValue) == 0x000012, "Member 'BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage, CallFunc_RequestWwiseEventOnLocal_AkComponent) == 0x000020, "Member 'BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage::CallFunc_RequestWwiseEventOnLocal_AkComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage, CallFunc_LeftTimeCurrentPhase_LeftTime) == 0x000028, "Member 'BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage::CallFunc_LeftTimeCurrentPhase_LeftTime' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage, Temp_int_Array_Index_Variable1) == 0x00002C, "Member 'BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage::Temp_int_Array_Index_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000030, "Member 'BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000034, "Member 'BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage, CallFunc_GetDataTableRowFromName_OutRow) == 0x000038, "Member 'BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000040, "Member 'BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage, CallFunc_Array_Add_ReturnValue) == 0x000044, "Member 'BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage, CallFunc_Array_Get_Item) == 0x000048, "Member 'BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000054, "Member 'BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000058, "Member 'BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage, CallFunc_Array_Get_Item1) == 0x000068, "Member 'BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage, CallFunc_Array_Length_ReturnValue1) == 0x000070, "Member 'BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage, CallFunc_Less_IntInt_ReturnValue) == 0x000074, "Member 'BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage, CallFunc_GetAJBInGamePvEHUD_bSuccess) == 0x000075, "Member 'BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage::CallFunc_GetAJBInGamePvEHUD_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage, CallFunc_GetAJBInGamePvEHUD_InGamePvEHUD) == 0x000078, "Member 'BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage::CallFunc_GetAJBInGamePvEHUD_InGamePvEHUD' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage, Temp_int_Loop_Counter_Variable1) == 0x000080, "Member 'BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage::Temp_int_Loop_Counter_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000084, "Member 'BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage, CallFunc_Less_IntInt_ReturnValue1) == 0x000085, "Member 'BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage::CallFunc_Less_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage, CallFunc_BooleanAND_ReturnValue) == 0x000086, "Member 'BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage, CallFunc_Add_IntInt_ReturnValue1) == 0x000088, "Member 'BP_AJBInGamePvE_PhaseManager_C_UpdateTimeMessage::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.LeftTimeCurrentPhase
// 0x0020 (0x0020 - 0x0000)
struct BP_AJBInGamePvE_PhaseManager_C_LeftTimeCurrentPhase final
{
public:
	float                                         LeftTime;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AJBInGamePvE_GamePhase                      Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetElapsedTimeInPhase_ElapsedTimeInPhase; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetElapsedTimeInPhase_ElapsedTimeInPhase1; // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentWaveDuration_WaveDuration;      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentIntervalDuration_IntervalDuration; // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGamePvE_PhaseManager_C_LeftTimeCurrentPhase) == 0x000004, "Wrong alignment on BP_AJBInGamePvE_PhaseManager_C_LeftTimeCurrentPhase");
static_assert(sizeof(BP_AJBInGamePvE_PhaseManager_C_LeftTimeCurrentPhase) == 0x000020, "Wrong size on BP_AJBInGamePvE_PhaseManager_C_LeftTimeCurrentPhase");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_LeftTimeCurrentPhase, LeftTime) == 0x000000, "Member 'BP_AJBInGamePvE_PhaseManager_C_LeftTimeCurrentPhase::LeftTime' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_LeftTimeCurrentPhase, Temp_byte_Variable) == 0x000004, "Member 'BP_AJBInGamePvE_PhaseManager_C_LeftTimeCurrentPhase::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_LeftTimeCurrentPhase, CallFunc_GetElapsedTimeInPhase_ElapsedTimeInPhase) == 0x000008, "Member 'BP_AJBInGamePvE_PhaseManager_C_LeftTimeCurrentPhase::CallFunc_GetElapsedTimeInPhase_ElapsedTimeInPhase' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_LeftTimeCurrentPhase, CallFunc_GetElapsedTimeInPhase_ElapsedTimeInPhase1) == 0x00000C, "Member 'BP_AJBInGamePvE_PhaseManager_C_LeftTimeCurrentPhase::CallFunc_GetElapsedTimeInPhase_ElapsedTimeInPhase1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_LeftTimeCurrentPhase, CallFunc_GetCurrentWaveDuration_WaveDuration) == 0x000010, "Member 'BP_AJBInGamePvE_PhaseManager_C_LeftTimeCurrentPhase::CallFunc_GetCurrentWaveDuration_WaveDuration' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_LeftTimeCurrentPhase, CallFunc_GetCurrentIntervalDuration_IntervalDuration) == 0x000014, "Member 'BP_AJBInGamePvE_PhaseManager_C_LeftTimeCurrentPhase::CallFunc_GetCurrentIntervalDuration_IntervalDuration' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_LeftTimeCurrentPhase, K2Node_Select_Default) == 0x000018, "Member 'BP_AJBInGamePvE_PhaseManager_C_LeftTimeCurrentPhase::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_LeftTimeCurrentPhase, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_AJBInGamePvE_PhaseManager_C_LeftTimeCurrentPhase::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.IsLastWave
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBInGamePvE_PhaseManager_C_IsLastWave final
{
public:
	bool                                          IsLastWave_0;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetPvELastWaveIndex_LastWaveIndex;        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCurrentWaveIndex_WaveIndex;            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AJBInGamePvE_GamePhase                      CallFunc_GetCurrentPhase_CurrentPhase;             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGamePvE_PhaseManager_C_IsLastWave) == 0x000004, "Wrong alignment on BP_AJBInGamePvE_PhaseManager_C_IsLastWave");
static_assert(sizeof(BP_AJBInGamePvE_PhaseManager_C_IsLastWave) == 0x000010, "Wrong size on BP_AJBInGamePvE_PhaseManager_C_IsLastWave");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_IsLastWave, IsLastWave_0) == 0x000000, "Member 'BP_AJBInGamePvE_PhaseManager_C_IsLastWave::IsLastWave_0' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_IsLastWave, CallFunc_GetPvELastWaveIndex_LastWaveIndex) == 0x000004, "Member 'BP_AJBInGamePvE_PhaseManager_C_IsLastWave::CallFunc_GetPvELastWaveIndex_LastWaveIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_IsLastWave, CallFunc_GetCurrentWaveIndex_WaveIndex) == 0x000008, "Member 'BP_AJBInGamePvE_PhaseManager_C_IsLastWave::CallFunc_GetCurrentWaveIndex_WaveIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_IsLastWave, CallFunc_GetCurrentPhase_CurrentPhase) == 0x00000C, "Member 'BP_AJBInGamePvE_PhaseManager_C_IsLastWave::CallFunc_GetCurrentPhase_CurrentPhase' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_IsLastWave, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00000D, "Member 'BP_AJBInGamePvE_PhaseManager_C_IsLastWave::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_IsLastWave, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00000E, "Member 'BP_AJBInGamePvE_PhaseManager_C_IsLastWave::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_IsLastWave, CallFunc_BooleanAND_ReturnValue) == 0x00000F, "Member 'BP_AJBInGamePvE_PhaseManager_C_IsLastWave::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.Debug_ForceFinishCurrentPhase
// 0x0006 (0x0006 - 0x0000)
struct BP_AJBInGamePvE_PhaseManager_C_Debug_ForceFinishCurrentPhase final
{
public:
	E_AJBInGamePvE_GamePhase                      Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AJBInGamePvE_GamePhase                      Temp_byte_Variable1;                               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AJBInGamePvE_GamePhase                      Temp_byte_Variable2;                               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AJBInGamePvE_GamePhase                      Temp_byte_Variable3;                               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AJBInGamePvE_GamePhase                      CallFunc_GetCurrentPhase_CurrentPhase;             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AJBInGamePvE_GamePhase                      K2Node_Select_Default;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGamePvE_PhaseManager_C_Debug_ForceFinishCurrentPhase) == 0x000001, "Wrong alignment on BP_AJBInGamePvE_PhaseManager_C_Debug_ForceFinishCurrentPhase");
static_assert(sizeof(BP_AJBInGamePvE_PhaseManager_C_Debug_ForceFinishCurrentPhase) == 0x000006, "Wrong size on BP_AJBInGamePvE_PhaseManager_C_Debug_ForceFinishCurrentPhase");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_Debug_ForceFinishCurrentPhase, Temp_byte_Variable) == 0x000000, "Member 'BP_AJBInGamePvE_PhaseManager_C_Debug_ForceFinishCurrentPhase::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_Debug_ForceFinishCurrentPhase, Temp_byte_Variable1) == 0x000001, "Member 'BP_AJBInGamePvE_PhaseManager_C_Debug_ForceFinishCurrentPhase::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_Debug_ForceFinishCurrentPhase, Temp_byte_Variable2) == 0x000002, "Member 'BP_AJBInGamePvE_PhaseManager_C_Debug_ForceFinishCurrentPhase::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_Debug_ForceFinishCurrentPhase, Temp_byte_Variable3) == 0x000003, "Member 'BP_AJBInGamePvE_PhaseManager_C_Debug_ForceFinishCurrentPhase::Temp_byte_Variable3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_Debug_ForceFinishCurrentPhase, CallFunc_GetCurrentPhase_CurrentPhase) == 0x000004, "Member 'BP_AJBInGamePvE_PhaseManager_C_Debug_ForceFinishCurrentPhase::CallFunc_GetCurrentPhase_CurrentPhase' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_Debug_ForceFinishCurrentPhase, K2Node_Select_Default) == 0x000005, "Member 'BP_AJBInGamePvE_PhaseManager_C_Debug_ForceFinishCurrentPhase::K2Node_Select_Default' has a wrong offset!");

// Function BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C.IsInOverTime
// 0x000C (0x000C - 0x0000)
struct BP_AJBInGamePvE_PhaseManager_C_IsInOverTime final
{
public:
	bool                                          IsInOverTime_0;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRemainingTimeInPhase_RemainingTimeInPhase; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AJBInGamePvE_GamePhase                      CallFunc_GetCurrentPhase_CurrentPhase;             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGamePvE_PhaseManager_C_IsInOverTime) == 0x000004, "Wrong alignment on BP_AJBInGamePvE_PhaseManager_C_IsInOverTime");
static_assert(sizeof(BP_AJBInGamePvE_PhaseManager_C_IsInOverTime) == 0x00000C, "Wrong size on BP_AJBInGamePvE_PhaseManager_C_IsInOverTime");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_IsInOverTime, IsInOverTime_0) == 0x000000, "Member 'BP_AJBInGamePvE_PhaseManager_C_IsInOverTime::IsInOverTime_0' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_IsInOverTime, CallFunc_GetRemainingTimeInPhase_RemainingTimeInPhase) == 0x000004, "Member 'BP_AJBInGamePvE_PhaseManager_C_IsInOverTime::CallFunc_GetRemainingTimeInPhase_RemainingTimeInPhase' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_IsInOverTime, CallFunc_GetCurrentPhase_CurrentPhase) == 0x000008, "Member 'BP_AJBInGamePvE_PhaseManager_C_IsInOverTime::CallFunc_GetCurrentPhase_CurrentPhase' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_IsInOverTime, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000009, "Member 'BP_AJBInGamePvE_PhaseManager_C_IsInOverTime::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_IsInOverTime, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00000A, "Member 'BP_AJBInGamePvE_PhaseManager_C_IsInOverTime::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGamePvE_PhaseManager_C_IsInOverTime, CallFunc_BooleanAND_ReturnValue) == 0x00000B, "Member 'BP_AJBInGamePvE_PhaseManager_C_IsInOverTime::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

}

