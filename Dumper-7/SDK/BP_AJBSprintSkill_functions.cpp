#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBSprintSkill

#include "Basic.hpp"

#include "BP_AJBSprintSkill_classes.hpp"
#include "BP_AJBSprintSkill_parameters.hpp"


namespace SDK
{

// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.ExecuteUbergraph_BP_AJBSprintSkill
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBSprintSkill_C::ExecuteUbergraph_BP_AJBSprintSkill(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "ExecuteUbergraph_BP_AJBSprintSkill");

	Params::BP_AJBSprintSkill_C_ExecuteUbergraph_BP_AJBSprintSkill Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.ROS_ApplySprintDamage
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           HitActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UActorComponent*                  HitComponent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Hit_Location                                           (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitNormal                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SerialNumber_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CuttingRate                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBSprintSkill_C::ROS_ApplySprintDamage(class AActor* HitActor, class UActorComponent* HitComponent, const struct FVector& Hit_Location, const struct FVector& HitNormal, int32 SerialNumber_0, float CuttingRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "ROS_ApplySprintDamage");

	Params::BP_AJBSprintSkill_C_ROS_ApplySprintDamage Parms{};

	Parms.HitActor = HitActor;
	Parms.HitComponent = HitComponent;
	Parms.Hit_Location = std::move(Hit_Location);
	Parms.HitNormal = std::move(HitNormal);
	Parms.SerialNumber_0 = SerialNumber_0;
	Parms.CuttingRate = CuttingRate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.MC_ApplySprintDamage
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           HitActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UActorComponent*                  HitComponent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitNormal                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SerialNumber_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CuttingRate                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBSprintSkill_C::MC_ApplySprintDamage(class AActor* HitActor, class UActorComponent* HitComponent, const struct FVector& HitLocation, const struct FVector& HitNormal, int32 SerialNumber_0, float CuttingRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "MC_ApplySprintDamage");

	Params::BP_AJBSprintSkill_C_MC_ApplySprintDamage Parms{};

	Parms.HitActor = HitActor;
	Parms.HitComponent = HitComponent;
	Parms.HitLocation = std::move(HitLocation);
	Parms.HitNormal = std::move(HitNormal);
	Parms.SerialNumber_0 = SerialNumber_0;
	Parms.CuttingRate = CuttingRate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.ROS_OnOverlappedDamgeDetector
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBSprintSkill_C::ROS_OnOverlappedDamgeDetector(class AActor* Target, class AActor* DamageCauser, const struct FVector& HitLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "ROS_OnOverlappedDamgeDetector");

	Params::BP_AJBSprintSkill_C_ROS_OnOverlappedDamgeDetector Parms{};

	Parms.Target = Target;
	Parms.DamageCauser = DamageCauser;
	Parms.HitLocation = std::move(HitLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.OnOverlappedDamgeDetector
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBSprintSkill_C::OnOverlappedDamgeDetector(class AActor* Target, class AActor* DamageCauser, const struct FVector& HitLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "OnOverlappedDamgeDetector");

	Params::BP_AJBSprintSkill_C_OnOverlappedDamgeDetector Parms{};

	Parms.Target = Target;
	Parms.DamageCauser = DamageCauser;
	Parms.HitLocation = std::move(HitLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.OnBlockedDamageActor
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           BlockedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitNormal                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CuttingRate                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bInvincible                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bIsPenetration                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bAvoidSkill                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBSprintSkill_C::OnBlockedDamageActor(class AActor* BlockedActor, const struct FVector& HitLocation, const struct FVector& HitNormal, float CuttingRate, bool bInvincible, bool bIsPenetration, bool bAvoidSkill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "OnBlockedDamageActor");

	Params::BP_AJBSprintSkill_C_OnBlockedDamageActor Parms{};

	Parms.BlockedActor = BlockedActor;
	Parms.HitLocation = std::move(HitLocation);
	Parms.HitNormal = std::move(HitNormal);
	Parms.CuttingRate = CuttingRate;
	Parms.bInvincible = bInvincible;
	Parms.bIsPenetration = bIsPenetration;
	Parms.bAvoidSkill = bAvoidSkill;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.ApplySprintDamage_Server
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           HitActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UActorComponent*                  HitComponent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Hit_Location                                           (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitNormal                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SerialNumber_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CuttingRate                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBSprintSkill_C::ApplySprintDamage_Server(class AActor* HitActor, class UActorComponent* HitComponent, const struct FVector& Hit_Location, const struct FVector& HitNormal, int32 SerialNumber_0, float CuttingRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "ApplySprintDamage_Server");

	Params::BP_AJBSprintSkill_C_ApplySprintDamage_Server Parms{};

	Parms.HitActor = HitActor;
	Parms.HitComponent = HitComponent;
	Parms.Hit_Location = std::move(Hit_Location);
	Parms.HitNormal = std::move(HitNormal);
	Parms.SerialNumber_0 = SerialNumber_0;
	Parms.CuttingRate = CuttingRate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.ApplySprintDamage_Local
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           HitActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UActorComponent*                  HitComponent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitNormal                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SerialNumber_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CuttingRate                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBSprintSkill_C::ApplySprintDamage_Local(class AActor* HitActor, class UActorComponent* HitComponent, const struct FVector& HitLocation, const struct FVector& HitNormal, int32 SerialNumber_0, float CuttingRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "ApplySprintDamage_Local");

	Params::BP_AJBSprintSkill_C_ApplySprintDamage_Local Parms{};

	Parms.HitActor = HitActor;
	Parms.HitComponent = HitComponent;
	Parms.HitLocation = std::move(HitLocation);
	Parms.HitNormal = std::move(HitNormal);
	Parms.SerialNumber_0 = SerialNumber_0;
	Parms.CuttingRate = CuttingRate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.ApplySprintDamage
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           HitActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UActorComponent*                  HitComponent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Hit_Location                                           (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitNormal                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CuttingRate                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBSprintSkill_C::ApplySprintDamage(class AActor* HitActor, class UActorComponent* HitComponent, const struct FVector& Hit_Location, const struct FVector& HitNormal, float CuttingRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "ApplySprintDamage");

	Params::BP_AJBSprintSkill_C_ApplySprintDamage Parms{};

	Parms.HitActor = HitActor;
	Parms.HitComponent = HitComponent;
	Parms.Hit_Location = std::move(Hit_Location);
	Parms.HitNormal = std::move(HitNormal);
	Parms.CuttingRate = CuttingRate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.FinishDamageActor
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBSprintSkill_C::FinishDamageActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "FinishDamageActor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.OnHitDamageActor
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           HitActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UActorComponent*                  HitComponent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitNormal                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPhysicalSurface                        SurfaceType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDisableDamage                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bIsPenetration                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBSprintSkill_C::OnHitDamageActor(class AActor* HitActor, class UActorComponent* HitComponent, const struct FVector& HitLocation, const struct FVector& HitNormal, EPhysicalSurface SurfaceType, bool bDisableDamage, bool bIsPenetration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "OnHitDamageActor");

	Params::BP_AJBSprintSkill_C_OnHitDamageActor Parms{};

	Parms.HitActor = HitActor;
	Parms.HitComponent = HitComponent;
	Parms.HitLocation = std::move(HitLocation);
	Parms.HitNormal = std::move(HitNormal);
	Parms.SurfaceType = SurfaceType;
	Parms.bDisableDamage = bDisableDamage;
	Parms.bIsPenetration = bIsPenetration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.InitDamageActor
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBSprintSkill_C::InitDamageActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "InitDamageActor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.SetSkillMovementMode
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBSprintSkill_C::SetSkillMovementMode(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "SetSkillMovementMode");

	Params::BP_AJBSprintSkill_C_SetSkillMovementMode Parms{};

	Parms.IsEnabled = IsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.ROS_EndState
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void UBP_AJBSprintSkill_C::ROS_EndState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "ROS_EndState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.MC_EndState
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void UBP_AJBSprintSkill_C::MC_EndState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "MC_EndState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.ROS_BeginState_Clearing
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void UBP_AJBSprintSkill_C::ROS_BeginState_Clearing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "ROS_BeginState_Clearing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.MC_BeginState_Clearing
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void UBP_AJBSprintSkill_C::MC_BeginState_Clearing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "MC_BeginState_Clearing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.ROS_BeginState_Action
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void UBP_AJBSprintSkill_C::ROS_BeginState_Action()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "ROS_BeginState_Action");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.MC_BeginState_Action
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void UBP_AJBSprintSkill_C::MC_BeginState_Action()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "MC_BeginState_Action");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.ROS_BeginState_Ready
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void UBP_AJBSprintSkill_C::ROS_BeginState_Ready()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "ROS_BeginState_Ready");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.MC_BeginState_Ready
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void UBP_AJBSprintSkill_C::MC_BeginState_Ready()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "MC_BeginState_Ready");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.EndState_Local
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBSprintSkill_C::EndState_Local()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "EndState_Local");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.EndState
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBSprintSkill_C::EndState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "EndState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.TickState_Clearing
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBSprintSkill_C::TickState_Clearing(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "TickState_Clearing");

	Params::BP_AJBSprintSkill_C_TickState_Clearing Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.BeginState_Clearing_Local
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBSprintSkill_C::BeginState_Clearing_Local()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "BeginState_Clearing_Local");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.BeginState_Clearing
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBSprintSkill_C::BeginState_Clearing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "BeginState_Clearing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.TickState
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBSprintSkill_C::TickState(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "TickState");

	Params::BP_AJBSprintSkill_C_TickState Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.TickState_Action
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBSprintSkill_C::TickState_Action(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "TickState_Action");

	Params::BP_AJBSprintSkill_C_TickState_Action Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.BeginState_Action_Local
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBSprintSkill_C::BeginState_Action_Local()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "BeginState_Action_Local");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.BeginState_Action
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBSprintSkill_C::BeginState_Action()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "BeginState_Action");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.TickState_Ready
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBSprintSkill_C::TickState_Ready(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "TickState_Ready");

	Params::BP_AJBSprintSkill_C_TickState_Ready Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.BeginState_Ready_Local
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBSprintSkill_C::BeginState_Ready_Local()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "BeginState_Ready_Local");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.BeginState_Ready
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBSprintSkill_C::BeginState_Ready()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "BeginState_Ready");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.DebugTick
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBSprintSkill_C::DebugTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "DebugTick");

	Params::BP_AJBSprintSkill_C_DebugTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.OnCompleted_7DDD297442D7CC4375E0C99B1D1DE40C
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBSprintSkill_C::OnCompleted_7DDD297442D7CC4375E0C99B1D1DE40C(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "OnCompleted_7DDD297442D7CC4375E0C99B1D1DE40C");

	Params::BP_AJBSprintSkill_C_OnCompleted_7DDD297442D7CC4375E0C99B1D1DE40C Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.OnBlendOut_7DDD297442D7CC4375E0C99B1D1DE40C
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBSprintSkill_C::OnBlendOut_7DDD297442D7CC4375E0C99B1D1DE40C(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "OnBlendOut_7DDD297442D7CC4375E0C99B1D1DE40C");

	Params::BP_AJBSprintSkill_C_OnBlendOut_7DDD297442D7CC4375E0C99B1D1DE40C Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.OnInterrupted_7DDD297442D7CC4375E0C99B1D1DE40C
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBSprintSkill_C::OnInterrupted_7DDD297442D7CC4375E0C99B1D1DE40C(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "OnInterrupted_7DDD297442D7CC4375E0C99B1D1DE40C");

	Params::BP_AJBSprintSkill_C_OnInterrupted_7DDD297442D7CC4375E0C99B1D1DE40C Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.OnNotifyBegin_7DDD297442D7CC4375E0C99B1D1DE40C
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBSprintSkill_C::OnNotifyBegin_7DDD297442D7CC4375E0C99B1D1DE40C(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "OnNotifyBegin_7DDD297442D7CC4375E0C99B1D1DE40C");

	Params::BP_AJBSprintSkill_C_OnNotifyBegin_7DDD297442D7CC4375E0C99B1D1DE40C Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.OnNotifyEnd_7DDD297442D7CC4375E0C99B1D1DE40C
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBSprintSkill_C::OnNotifyEnd_7DDD297442D7CC4375E0C99B1D1DE40C(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "OnNotifyEnd_7DDD297442D7CC4375E0C99B1D1DE40C");

	Params::BP_AJBSprintSkill_C_OnNotifyEnd_7DDD297442D7CC4375E0C99B1D1DE40C Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.IsReadySprint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   IsReady                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBSprintSkill_C::IsReadySprint(bool* IsReady)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "IsReadySprint");

	Params::BP_AJBSprintSkill_C_IsReadySprint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsReady != nullptr)
		*IsReady = Parms.IsReady;
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.IsCancelable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   IsCancelable_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBSprintSkill_C::IsCancelable(bool* IsCancelable_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "IsCancelable");

	Params::BP_AJBSprintSkill_C_IsCancelable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsCancelable_0 != nullptr)
		*IsCancelable_0 = Parms.IsCancelable_0;
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.CreateDamageActor
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_AJBDamageActor_C**            DamageActor                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBSprintSkill_C::CreateDamageActor(class ABP_AJBDamageActor_C** DamageActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "CreateDamageActor");

	Params::BP_AJBSprintSkill_C_CreateDamageActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DamageActor != nullptr)
		*DamageActor = Parms.DamageActor;
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.GetLaunchedActorTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor**                          LaunchedActorTarget                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBSprintSkill_C::GetLaunchedActorTarget(class AActor** LaunchedActorTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "GetLaunchedActorTarget");

	Params::BP_AJBSprintSkill_C_GetLaunchedActorTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LaunchedActorTarget != nullptr)
		*LaunchedActorTarget = Parms.LaunchedActorTarget;
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.GetBaseDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32*                                  BaseDamage                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBSprintSkill_C::GetBaseDamage(int32* BaseDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "GetBaseDamage");

	Params::BP_AJBSprintSkill_C_GetBaseDamage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BaseDamage != nullptr)
		*BaseDamage = Parms.BaseDamage;
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.GetOrCreateDamageActorCache
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_AJBDamageActor_C**            DamageActorCache_0                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBSprintSkill_C::GetOrCreateDamageActorCache(class ABP_AJBDamageActor_C** DamageActorCache_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "GetOrCreateDamageActorCache");

	Params::BP_AJBSprintSkill_C_GetOrCreateDamageActorCache Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DamageActorCache_0 != nullptr)
		*DamageActorCache_0 = Parms.DamageActorCache_0;
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.GetDamageActorCache
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_AJBDamageActor_C**            DamageActorCache_0                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBSprintSkill_C::GetDamageActorCache(class ABP_AJBDamageActor_C** DamageActorCache_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "GetDamageActorCache");

	Params::BP_AJBSprintSkill_C_GetDamageActorCache Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DamageActorCache_0 != nullptr)
		*DamageActorCache_0 = Parms.DamageActorCache_0;
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.GetSprintCharacter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_AJBInGameCharacter_C**        SprintCharacter                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBSprintSkill_C::GetSprintCharacter(class ABP_AJBInGameCharacter_C** SprintCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "GetSprintCharacter");

	Params::BP_AJBSprintSkill_C_GetSprintCharacter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SprintCharacter != nullptr)
		*SprintCharacter = Parms.SprintCharacter;
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_AJBSprintSkill_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.StateBeginPlay
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bShouldRestore                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBSprintSkill_C::StateBeginPlay(bool bShouldRestore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "StateBeginPlay");

	Params::BP_AJBSprintSkill_C_StateBeginPlay Parms{};

	Parms.bShouldRestore = bShouldRestore;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.OnCancel
// (Event, Public, BlueprintEvent)

void UBP_AJBSprintSkill_C::OnCancel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "OnCancel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.OnActive
// (Event, Public, BlueprintEvent)

void UBP_AJBSprintSkill_C::OnActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "OnActive");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBSprintSkill_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "ReceiveTick");

	Params::BP_AJBSprintSkill_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBSprintSkill.BP_AJBSprintSkill_C.ShouldCancelOnLandingStop
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   bShouldCancel                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBSprintSkill_C::ShouldCancelOnLandingStop(bool* bShouldCancel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBSprintSkill_C", "ShouldCancelOnLandingStop");

	Params::BP_AJBSprintSkill_C_ShouldCancelOnLandingStop Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bShouldCancel != nullptr)
		*bShouldCancel = Parms.bShouldCancel;
}

}

