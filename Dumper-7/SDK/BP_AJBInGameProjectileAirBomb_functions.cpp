#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameProjectileAirBomb

#include "Basic.hpp"

#include "BP_AJBInGameProjectileAirBomb_classes.hpp"
#include "BP_AJBInGameProjectileAirBomb_parameters.hpp"


namespace SDK
{

// Function BP_AJBInGameProjectileAirBomb.BP_AJBInGameProjectileAirBomb_C.ExecuteUbergraph_BP_AJBInGameProjectileAirBomb
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameProjectileAirBomb_C::ExecuteUbergraph_BP_AJBInGameProjectileAirBomb(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameProjectileAirBomb_C", "ExecuteUbergraph_BP_AJBInGameProjectileAirBomb");

	Params::BP_AJBInGameProjectileAirBomb_C_ExecuteUbergraph_BP_AJBInGameProjectileAirBomb Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameProjectileAirBomb.BP_AJBInGameProjectileAirBomb_C.UpdateVisualTimer
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameProjectileAirBomb_C::UpdateVisualTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameProjectileAirBomb_C", "UpdateVisualTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameProjectileAirBomb.BP_AJBInGameProjectileAirBomb_C.CalcReflectionVector
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FHitResult&                HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// struct FVector*                         Vector                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameProjectileAirBomb_C::CalcReflectionVector(const struct FHitResult& HitResult, struct FVector* Vector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameProjectileAirBomb_C", "CalcReflectionVector");

	Params::BP_AJBInGameProjectileAirBomb_C_CalcReflectionVector Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	if (Vector != nullptr)
		*Vector = std::move(Parms.Vector);
}


// Function BP_AJBInGameProjectileAirBomb.BP_AJBInGameProjectileAirBomb_C.SpawnDisappearParticle
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameProjectileAirBomb_C::SpawnDisappearParticle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameProjectileAirBomb_C", "SpawnDisappearParticle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameProjectileAirBomb.BP_AJBInGameProjectileAirBomb_C.GetReflectionVelocity
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector*                         Velocity                                               (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameProjectileAirBomb_C::GetReflectionVelocity(struct FVector* Velocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameProjectileAirBomb_C", "GetReflectionVelocity");

	Params::BP_AJBInGameProjectileAirBomb_C_GetReflectionVelocity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Velocity != nullptr)
		*Velocity = std::move(Parms.Velocity);
}


// Function BP_AJBInGameProjectileAirBomb.BP_AJBInGameProjectileAirBomb_C.GetReflectionTimeRate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float*                                  Rate                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameProjectileAirBomb_C::GetReflectionTimeRate(float* Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameProjectileAirBomb_C", "GetReflectionTimeRate");

	Params::BP_AJBInGameProjectileAirBomb_C_GetReflectionTimeRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Rate != nullptr)
		*Rate = Parms.Rate;
}


// Function BP_AJBInGameProjectileAirBomb.BP_AJBInGameProjectileAirBomb_C.UpdateVisual
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameProjectileAirBomb_C::UpdateVisual()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameProjectileAirBomb_C", "UpdateVisual");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameProjectileAirBomb.BP_AJBInGameProjectileAirBomb_C.GetScaledSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float*                                  Speed_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameProjectileAirBomb_C::GetScaledSpeed(float* Speed_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameProjectileAirBomb_C", "GetScaledSpeed");

	Params::BP_AJBInGameProjectileAirBomb_C_GetScaledSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Speed_0 != nullptr)
		*Speed_0 = Parms.Speed_0;
}


// Function BP_AJBInGameProjectileAirBomb.BP_AJBInGameProjectileAirBomb_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_AJBInGameProjectileAirBomb_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameProjectileAirBomb_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameProjectileAirBomb.BP_AJBInGameProjectileAirBomb_C.OnProjectileHit
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    FromSweep                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FHitResult&                SweepResult                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    bHeadShot                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bPenetrate_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bFirstHit                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameProjectileAirBomb_C::OnProjectileHit(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool FromSweep, const struct FHitResult& SweepResult, bool bHeadShot, bool bPenetrate_0, bool bFirstHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameProjectileAirBomb_C", "OnProjectileHit");

	Params::BP_AJBInGameProjectileAirBomb_C_OnProjectileHit Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.FromSweep = FromSweep;
	Parms.SweepResult = std::move(SweepResult);
	Parms.bHeadShot = bHeadShot;
	Parms.bPenetrate_0 = bPenetrate_0;
	Parms.bFirstHit = bFirstHit;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameProjectileAirBomb.BP_AJBInGameProjectileAirBomb_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameProjectileAirBomb_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameProjectileAirBomb_C", "ReceiveTick");

	Params::BP_AJBInGameProjectileAirBomb_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameProjectileAirBomb.BP_AJBInGameProjectileAirBomb_C.OnROS_ProjectileHit
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           HitActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitLocation_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitNormal_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bHeadShot                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bPenetrate_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bFirstHit                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   CuttingRate                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDisableDamage                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bReflect                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FRotator&                  ReflectRotation                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    bBlocking                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FGameplayTag&              ReflectSkillTag_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    bAvoidSkill                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameProjectileAirBomb_C::OnROS_ProjectileHit(class AActor* HitActor, const struct FVector& HitLocation_0, const struct FVector& HitNormal_0, bool bHeadShot, bool bPenetrate_0, bool bFirstHit, float CuttingRate, bool bDisableDamage, bool bReflect, const struct FRotator& ReflectRotation, bool bBlocking, const struct FGameplayTag& ReflectSkillTag_0, bool bAvoidSkill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameProjectileAirBomb_C", "OnROS_ProjectileHit");

	Params::BP_AJBInGameProjectileAirBomb_C_OnROS_ProjectileHit Parms{};

	Parms.HitActor = HitActor;
	Parms.HitLocation_0 = std::move(HitLocation_0);
	Parms.HitNormal_0 = std::move(HitNormal_0);
	Parms.bHeadShot = bHeadShot;
	Parms.bPenetrate_0 = bPenetrate_0;
	Parms.bFirstHit = bFirstHit;
	Parms.CuttingRate = CuttingRate;
	Parms.bDisableDamage = bDisableDamage;
	Parms.bReflect = bReflect;
	Parms.ReflectRotation = std::move(ReflectRotation);
	Parms.bBlocking = bBlocking;
	Parms.ReflectSkillTag_0 = std::move(ReflectSkillTag_0);
	Parms.bAvoidSkill = bAvoidSkill;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameProjectileAirBomb.BP_AJBInGameProjectileAirBomb_C.PlayHitSE
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           HitActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitLocation_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bHeadShot                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// EPhysicalSurface                        SurfaceType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CuttingRate                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bBlockedByAAP                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameProjectileAirBomb_C::PlayHitSE(class AActor* HitActor, const struct FVector& HitLocation_0, bool bHeadShot, EPhysicalSurface SurfaceType, float CuttingRate, bool bBlockedByAAP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameProjectileAirBomb_C", "PlayHitSE");

	Params::BP_AJBInGameProjectileAirBomb_C_PlayHitSE Parms{};

	Parms.HitActor = HitActor;
	Parms.HitLocation_0 = std::move(HitLocation_0);
	Parms.bHeadShot = bHeadShot;
	Parms.SurfaceType = SurfaceType;
	Parms.CuttingRate = CuttingRate;
	Parms.bBlockedByAAP = bBlockedByAAP;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameProjectileAirBomb.BP_AJBInGameProjectileAirBomb_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameProjectileAirBomb_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameProjectileAirBomb_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameProjectileAirBomb.BP_AJBInGameProjectileAirBomb_C.ShouldCheckRange
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   bShouldCheckRange                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameProjectileAirBomb_C::ShouldCheckRange(bool* bShouldCheckRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameProjectileAirBomb_C", "ShouldCheckRange");

	Params::BP_AJBInGameProjectileAirBomb_C_ShouldCheckRange Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bShouldCheckRange != nullptr)
		*bShouldCheckRange = Parms.bShouldCheckRange;
}

}

