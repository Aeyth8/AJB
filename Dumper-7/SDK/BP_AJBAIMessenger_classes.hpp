#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBAIMessenger

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBAIMessenger.BP_AJBAIMessenger_C
// 0x0068 (0x0158 - 0x00F0)
class UBP_AJBAIMessenger_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00F0(0x0008)(Transient, DuplicateTransient)
	TMap<int32, class ABP_AJBDebugAICharacterVisualizer_C*> DebugCharaVisualizers;                   // 0x00F8(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class ABP_AJBDebugAIEnvironmentVisualizer_C*  DebugEnvironmentVisualizer;                        // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_DebugAIEventReplayClient_C*         DebugEventReplayClient;                            // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBAIMessenger(int32 EntryPoint);
	void ROS_RequestAIGion(const struct FGameplayTag& GionEffectType, class AActor* GionOwner, const struct FVector& Location);
	void RequestAIGion(const struct FGameplayTag& GionEffectType, class AActor* GionOwner, const struct FVector& Location);
	void ROC_SendEventReplayToClientForImmediate(const struct FGameplayTag& Tag, const struct FVector& VectorIn);
	void DebugDrawPathLocations();
	void DebugDumpEventReplayLastTarget();
	void ROC_SendEventReplayToClient(int32 Index_0, float ElapsedTime, const struct FGameplayTag& Tag, const struct FVector& VectorIn);
	void ROC_SendEventReplayV2ToClient(int32 Index_0, float ElapsedTime, const struct FGameplayTag& Tag, const struct FVector& v1, const struct FVector& v2);
	void ROS_DebugRequestToAIDirectorByGameplayTags(const struct FGameplayTagContainer& Tags, const struct FVector& VectorIn);
	void ROC_SendNavMesh(const struct FVector& Location, bool bNavMesh);
	void ROS_SpawnIdleNPCAtLocation(const struct FVector& Location, const struct FRotator& Rotation, int32 AILevel);
	void SpawnIdleNPCByNPCSpawnerComponent(int32 AILevel);
	void ToggleDebugNPCSpawnPreview();
	void ROC_DebugSaveNPCAllLogByString(int32 NPC_Id, const class FString& Log);
	void ROS_DebugRequestSaveNPCAllLogByString(int32 NPC_Id);
	void ROS_DebugRestartBehavior(int32 DebugMenuIndex);
	void DebugRestartBehavior(int32 DebugMenuIndex);
	void ROC_UpdateServerSafeArea(const struct FVector& SafeAreaLocation, float SafeAreaRadius);
	void ROC_UpdateSaferArea(const struct FVector& SaferAreaLocation, float SaferAreaRadius);
	void ROC_OnNPCDead(int32 PlayerID, const struct FGameplayTag& DamageType);
	void ROC_ShowNPCDebugInfo(int32 PlayerID, const struct FVector& Location, const class FString& ControllerName);
	void ROC_UpdateNPCStatus(int32 PlayerID, const class FString& StatusLabel, bool bInputMoveClear, bool bInSaferArea, const struct FVector& Location, const struct FVector& InputDestination, const struct FVector& FinalDestination, const struct FGameplayTagContainer& LockedTags, class APawn* Pawn);
	void ROS_DebugSetShowDebugInfo(bool bShow);
	void DebugSetShowDebugInfo(bool bShow);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBAIMessenger_C">();
	}
	static class UBP_AJBAIMessenger_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBAIMessenger_C>();
	}
};
static_assert(alignof(UBP_AJBAIMessenger_C) == 0x000008, "Wrong alignment on UBP_AJBAIMessenger_C");
static_assert(sizeof(UBP_AJBAIMessenger_C) == 0x000158, "Wrong size on UBP_AJBAIMessenger_C");
static_assert(offsetof(UBP_AJBAIMessenger_C, UberGraphFrame) == 0x0000F0, "Member 'UBP_AJBAIMessenger_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_AJBAIMessenger_C, DebugCharaVisualizers) == 0x0000F8, "Member 'UBP_AJBAIMessenger_C::DebugCharaVisualizers' has a wrong offset!");
static_assert(offsetof(UBP_AJBAIMessenger_C, DebugEnvironmentVisualizer) == 0x000148, "Member 'UBP_AJBAIMessenger_C::DebugEnvironmentVisualizer' has a wrong offset!");
static_assert(offsetof(UBP_AJBAIMessenger_C, DebugEventReplayClient) == 0x000150, "Member 'UBP_AJBAIMessenger_C::DebugEventReplayClient' has a wrong offset!");

}

