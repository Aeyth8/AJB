#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_DamageDisplay

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ST_DamageDisplayOverrideSetting_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_DamageDisplay.WB_DamageDisplay_C
// 0x0088 (0x0290 - 0x0208)
class UWB_DamageDisplay_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0208(0x0008)(Transient, DuplicateTransient)
	class UWidgetAnimation*                       Animation_RobMd;                                   // 0x0210(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetAnimation*                       Animation;                                         // 0x0218(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              BGFire;                                            // 0x0220(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          DamageNum;                                         // 0x0228(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          DamageNum_RobMd;                                   // 0x0230(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FVector                                TargetLocation3D;                                  // 0x0238(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector2D                              Offset;                                            // 0x0244(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Damage;                                            // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector2D                              PaddingOnScreen;                                   // 0x0250(0x0008)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsPairDamage;                                      // 0x0258(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_259[0x7];                                      // 0x0259(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                PairDamageMaterial;                                // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimationRate;                                     // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FST_DamageDisplayOverrideSetting       OverrideSettings;                                  // 0x026C(0x0018)(Edit, BlueprintVisible, Transient, ContainsInstancedReference, AdvancedDisplay, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector2D                              DefaultRandomOffsetRange;                          // 0x0284(0x0008)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WB_DamageDisplay(int32 EntryPoint);
	void Construct();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UpdatePosition();
	void OnFinishedAnimation();
	void GetScaledWidgetSize(struct FVector2D* WidgetSize);
	void GetTargetLocationOnScreen(struct FVector2D* LocationOnScreen);
	void IsWithinViewport(const struct FVector2D& Location, bool* IsWithinViewport_0);
	void MakeOffsetWithRandom(struct FVector2D* Offset_0);
	void GetTextType(int32* TextType);
	void GetTextWidget(class UTextBlock** TextWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_DamageDisplay_C">();
	}
	static class UWB_DamageDisplay_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_DamageDisplay_C>();
	}
};
static_assert(alignof(UWB_DamageDisplay_C) == 0x000008, "Wrong alignment on UWB_DamageDisplay_C");
static_assert(sizeof(UWB_DamageDisplay_C) == 0x000290, "Wrong size on UWB_DamageDisplay_C");
static_assert(offsetof(UWB_DamageDisplay_C, UberGraphFrame) == 0x000208, "Member 'UWB_DamageDisplay_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_DamageDisplay_C, Animation_RobMd) == 0x000210, "Member 'UWB_DamageDisplay_C::Animation_RobMd' has a wrong offset!");
static_assert(offsetof(UWB_DamageDisplay_C, Animation) == 0x000218, "Member 'UWB_DamageDisplay_C::Animation' has a wrong offset!");
static_assert(offsetof(UWB_DamageDisplay_C, BGFire) == 0x000220, "Member 'UWB_DamageDisplay_C::BGFire' has a wrong offset!");
static_assert(offsetof(UWB_DamageDisplay_C, DamageNum) == 0x000228, "Member 'UWB_DamageDisplay_C::DamageNum' has a wrong offset!");
static_assert(offsetof(UWB_DamageDisplay_C, DamageNum_RobMd) == 0x000230, "Member 'UWB_DamageDisplay_C::DamageNum_RobMd' has a wrong offset!");
static_assert(offsetof(UWB_DamageDisplay_C, TargetLocation3D) == 0x000238, "Member 'UWB_DamageDisplay_C::TargetLocation3D' has a wrong offset!");
static_assert(offsetof(UWB_DamageDisplay_C, Offset) == 0x000244, "Member 'UWB_DamageDisplay_C::Offset' has a wrong offset!");
static_assert(offsetof(UWB_DamageDisplay_C, Damage) == 0x00024C, "Member 'UWB_DamageDisplay_C::Damage' has a wrong offset!");
static_assert(offsetof(UWB_DamageDisplay_C, PaddingOnScreen) == 0x000250, "Member 'UWB_DamageDisplay_C::PaddingOnScreen' has a wrong offset!");
static_assert(offsetof(UWB_DamageDisplay_C, IsPairDamage) == 0x000258, "Member 'UWB_DamageDisplay_C::IsPairDamage' has a wrong offset!");
static_assert(offsetof(UWB_DamageDisplay_C, PairDamageMaterial) == 0x000260, "Member 'UWB_DamageDisplay_C::PairDamageMaterial' has a wrong offset!");
static_assert(offsetof(UWB_DamageDisplay_C, AnimationRate) == 0x000268, "Member 'UWB_DamageDisplay_C::AnimationRate' has a wrong offset!");
static_assert(offsetof(UWB_DamageDisplay_C, OverrideSettings) == 0x00026C, "Member 'UWB_DamageDisplay_C::OverrideSettings' has a wrong offset!");
static_assert(offsetof(UWB_DamageDisplay_C, DefaultRandomOffsetRange) == 0x000284, "Member 'UWB_DamageDisplay_C::DefaultRandomOffsetRange' has a wrong offset!");

}

