#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBPairOverGrow

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_AJBComponentBase_classes.hpp"
#include "AJB_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBPairOverGrow.BP_AJBPairOverGrow_C
// 0x0070 (0x0160 - 0x00F0)
class UBP_AJBPairOverGrow_C final : public UBP_AJBComponentBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00F0(0x0008)(Transient, DuplicateTransient)
	float                                         PairTraceRadius;                                   // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PairTraceInterval;                                 // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDistanceTraceStartToBase;                       // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceBaseToTraceEnd;                            // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinForwardZForMaxTraceDistanceRate;                // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxForawrdZForMinTraceDistanceRate;                // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxTraceDistanceRate;                              // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinTraceDistanceRateUp;                            // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinTraceDistanceRateDown;                          // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameParticleEffect_C*          PairTargetParticle;                                // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDuringTheWorld;                                   // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PairCheckDistanceLimit;                            // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               PairTarget;                                        // 0x0130(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class ABP_AJBInGameCharacter_C> PrevTarget;                                       // 0x0138(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBPairOverGrow(int32 EntryPoint);
	void OnChangedNotOwnerEnv(class ABP_AJBInGameCharacter_C* PairTarget_0);
	void ROS_OnChanged(class ABP_AJBInGameCharacter_C* PairTarget_0);
	void OnChangedOwnerEnv(bool bShouldSpawnParticle);
	void UpdatePairCheck();
	void ReceiveBeginPlay();
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);
	void UpdatePairCheckCore(bool* bTargetIsPair, class ABP_AJBInGameCharacter_C** NewTarget);
	void ChangeTarget(class ABP_AJBInGameCharacter_C* CharacterBP);
	void TryDestroyPairTargetParticle();
	void ChangeGuideUIEnable(bool bEnable);
	void OnRep_PairTarget();
	void SpawnPairTargetParticle(class ACharacter* PairTarget_0, const struct FGameplayTag& ParticleTag);

	void IsPairNearby(bool* IsNearby) const;
	void CanPairOverGrow(class AActor* TargetPair, bool* CanPairOverGrow_0) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBPairOverGrow_C">();
	}
	static class UBP_AJBPairOverGrow_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBPairOverGrow_C>();
	}
};
static_assert(alignof(UBP_AJBPairOverGrow_C) == 0x000008, "Wrong alignment on UBP_AJBPairOverGrow_C");
static_assert(sizeof(UBP_AJBPairOverGrow_C) == 0x000160, "Wrong size on UBP_AJBPairOverGrow_C");
static_assert(offsetof(UBP_AJBPairOverGrow_C, UberGraphFrame) == 0x0000F0, "Member 'UBP_AJBPairOverGrow_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_AJBPairOverGrow_C, PairTraceRadius) == 0x0000F8, "Member 'UBP_AJBPairOverGrow_C::PairTraceRadius' has a wrong offset!");
static_assert(offsetof(UBP_AJBPairOverGrow_C, PairTraceInterval) == 0x0000FC, "Member 'UBP_AJBPairOverGrow_C::PairTraceInterval' has a wrong offset!");
static_assert(offsetof(UBP_AJBPairOverGrow_C, MaxDistanceTraceStartToBase) == 0x000100, "Member 'UBP_AJBPairOverGrow_C::MaxDistanceTraceStartToBase' has a wrong offset!");
static_assert(offsetof(UBP_AJBPairOverGrow_C, DistanceBaseToTraceEnd) == 0x000104, "Member 'UBP_AJBPairOverGrow_C::DistanceBaseToTraceEnd' has a wrong offset!");
static_assert(offsetof(UBP_AJBPairOverGrow_C, MinForwardZForMaxTraceDistanceRate) == 0x000108, "Member 'UBP_AJBPairOverGrow_C::MinForwardZForMaxTraceDistanceRate' has a wrong offset!");
static_assert(offsetof(UBP_AJBPairOverGrow_C, MaxForawrdZForMinTraceDistanceRate) == 0x00010C, "Member 'UBP_AJBPairOverGrow_C::MaxForawrdZForMinTraceDistanceRate' has a wrong offset!");
static_assert(offsetof(UBP_AJBPairOverGrow_C, MaxTraceDistanceRate) == 0x000110, "Member 'UBP_AJBPairOverGrow_C::MaxTraceDistanceRate' has a wrong offset!");
static_assert(offsetof(UBP_AJBPairOverGrow_C, MinTraceDistanceRateUp) == 0x000114, "Member 'UBP_AJBPairOverGrow_C::MinTraceDistanceRateUp' has a wrong offset!");
static_assert(offsetof(UBP_AJBPairOverGrow_C, MinTraceDistanceRateDown) == 0x000118, "Member 'UBP_AJBPairOverGrow_C::MinTraceDistanceRateDown' has a wrong offset!");
static_assert(offsetof(UBP_AJBPairOverGrow_C, PairTargetParticle) == 0x000120, "Member 'UBP_AJBPairOverGrow_C::PairTargetParticle' has a wrong offset!");
static_assert(offsetof(UBP_AJBPairOverGrow_C, bDuringTheWorld) == 0x000128, "Member 'UBP_AJBPairOverGrow_C::bDuringTheWorld' has a wrong offset!");
static_assert(offsetof(UBP_AJBPairOverGrow_C, PairCheckDistanceLimit) == 0x00012C, "Member 'UBP_AJBPairOverGrow_C::PairCheckDistanceLimit' has a wrong offset!");
static_assert(offsetof(UBP_AJBPairOverGrow_C, PairTarget) == 0x000130, "Member 'UBP_AJBPairOverGrow_C::PairTarget' has a wrong offset!");
static_assert(offsetof(UBP_AJBPairOverGrow_C, PrevTarget) == 0x000138, "Member 'UBP_AJBPairOverGrow_C::PrevTarget' has a wrong offset!");

}

