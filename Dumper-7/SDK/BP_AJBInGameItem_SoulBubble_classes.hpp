#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameItem_SoulBubble

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BP_AJBInGameItem_classes.hpp"
#include "E_StencilDigit_structs.hpp"
#include "AJB_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBInGameItem_SoulBubble.BP_AJBInGameItem_SoulBubble_C
// 0x0060 (0x03D8 - 0x0378)
class ABP_AJBInGameItem_SoulBubble_C final : public ABP_AJBInGameItem_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBInGameItem_SoulBubble_C;      // 0x0378(0x0008)(Transient, DuplicateTransient)
	struct FGameplayTag                           SkillTag;                                          // 0x0380(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         SerialNumber;                                      // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_38C[0x4];                                      // 0x038C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBSoulBubbleAffecter_C*            SoulBubbleAffecter;                                // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FGameplayTag                           RuptureParticleTag;                                // 0x0398(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           RuptureSETag;                                      // 0x03A0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           SoulBubbleLoopSE;                                  // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FGameplayTag                           SoulBubbleLoopSETag;                               // 0x03B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDuringTheWorld;                                  // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	uint8                                         Pad_3B9[0x3];                                      // 0x03B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LifeTime_s_;                                       // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpawnSPDelayTime_s_;                               // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ConsumedSPBonus;                                   // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SoulBubbleSignalPinTag;                            // 0x03C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsReservedRupturing;                               // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	uint8                                         Pad_3D1[0x3];                                      // 0x03D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SprinkleSPRange_cm_;                               // 0x03D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBInGameItem_SoulBubble(int32 EntryPoint);
	void ResolveReservedRupturing();
	void OverrideSprinkelBehavior_Server(class ABP_AJBInGameCharacter_C* TargetCharacter, bool bSpaceShaving);
	void InitProperties();
	void End_SoulBubbleLoopSE();
	void Pause_SoulBubbleLoopSE();
	void Internal_OnEnd_SoulBubbleLoopSE(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo);
	void UnlockResumeGate_SoulBubbleLoopSE();
	void Resume_SoulBubbleLoopSE();
	void Play_SoulBubbleLoopSE();
	void OnPairDead_Server(const struct FGameplayTag& DamageType, class AActor* DeadActor, class AActor* DamageCauser);
	void MC_OnRuptureBubble(const struct FVector& BubbleLocation);
	void RuptureBubble_Server(class ABP_AJBInGameCharacter_C* TargetCharacter, bool bSpaceShaving);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void OnConsumedServer(class ABP_AJBInGameCharacter_C* TargetCharacter, bool bSpaceShaving);
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);
	void IsConsumableCharacter(class AAJBInGameCharacterBase* Target, bool* IsConsumable);
	void UpdateStencilValue();
	void TryConsume(class ABP_AJBInGameCharacter_C* HitCharacter, int32 PlayerIndex, bool bSpaceShaving);
	void UserConstructionScript();
	void ChangeRelatedMeshStencilValueByDigit(E_StencilDigit DigitToChange, bool bFlag);
	void ShouldWaitRupturing(bool* ShouldWait);
	void RefreshCollisionOverlaps();
	void CheckGetOnSpaceShaving(class AActor* SkillOwner, bool* bGet);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBInGameItem_SoulBubble_C">();
	}
	static class ABP_AJBInGameItem_SoulBubble_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBInGameItem_SoulBubble_C>();
	}
};
static_assert(alignof(ABP_AJBInGameItem_SoulBubble_C) == 0x000008, "Wrong alignment on ABP_AJBInGameItem_SoulBubble_C");
static_assert(sizeof(ABP_AJBInGameItem_SoulBubble_C) == 0x0003D8, "Wrong size on ABP_AJBInGameItem_SoulBubble_C");
static_assert(offsetof(ABP_AJBInGameItem_SoulBubble_C, UberGraphFrame_BP_AJBInGameItem_SoulBubble_C) == 0x000378, "Member 'ABP_AJBInGameItem_SoulBubble_C::UberGraphFrame_BP_AJBInGameItem_SoulBubble_C' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameItem_SoulBubble_C, SkillTag) == 0x000380, "Member 'ABP_AJBInGameItem_SoulBubble_C::SkillTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameItem_SoulBubble_C, SerialNumber) == 0x000388, "Member 'ABP_AJBInGameItem_SoulBubble_C::SerialNumber' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameItem_SoulBubble_C, SoulBubbleAffecter) == 0x000390, "Member 'ABP_AJBInGameItem_SoulBubble_C::SoulBubbleAffecter' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameItem_SoulBubble_C, RuptureParticleTag) == 0x000398, "Member 'ABP_AJBInGameItem_SoulBubble_C::RuptureParticleTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameItem_SoulBubble_C, RuptureSETag) == 0x0003A0, "Member 'ABP_AJBInGameItem_SoulBubble_C::RuptureSETag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameItem_SoulBubble_C, SoulBubbleLoopSE) == 0x0003A8, "Member 'ABP_AJBInGameItem_SoulBubble_C::SoulBubbleLoopSE' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameItem_SoulBubble_C, SoulBubbleLoopSETag) == 0x0003B0, "Member 'ABP_AJBInGameItem_SoulBubble_C::SoulBubbleLoopSETag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameItem_SoulBubble_C, IsDuringTheWorld) == 0x0003B8, "Member 'ABP_AJBInGameItem_SoulBubble_C::IsDuringTheWorld' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameItem_SoulBubble_C, LifeTime_s_) == 0x0003BC, "Member 'ABP_AJBInGameItem_SoulBubble_C::LifeTime_s_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameItem_SoulBubble_C, SpawnSPDelayTime_s_) == 0x0003C0, "Member 'ABP_AJBInGameItem_SoulBubble_C::SpawnSPDelayTime_s_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameItem_SoulBubble_C, ConsumedSPBonus) == 0x0003C4, "Member 'ABP_AJBInGameItem_SoulBubble_C::ConsumedSPBonus' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameItem_SoulBubble_C, SoulBubbleSignalPinTag) == 0x0003C8, "Member 'ABP_AJBInGameItem_SoulBubble_C::SoulBubbleSignalPinTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameItem_SoulBubble_C, IsReservedRupturing) == 0x0003D0, "Member 'ABP_AJBInGameItem_SoulBubble_C::IsReservedRupturing' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameItem_SoulBubble_C, SprinkleSPRange_cm_) == 0x0003D4, "Member 'ABP_AJBInGameItem_SoulBubble_C::SprinkleSPRange_cm_' has a wrong offset!");

}

