#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPF_AJBCollisionFunctions

#include "Basic.hpp"

#include "BPF_AJBCollisionFunctions_classes.hpp"
#include "BPF_AJBCollisionFunctions_parameters.hpp"


namespace SDK
{

// Function BPF_AJBCollisionFunctions.BPF_AJBCollisionFunctions_C.HitCheck_Sphere_Sphere
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVector&                   Location01                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Radius01                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Location02                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Radius02                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bHit                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPF_AJBCollisionFunctions_C::HitCheck_Sphere_Sphere(const struct FVector& Location01, float Radius01, const struct FVector& Location02, float Radius02, class UObject* __WorldContext, bool* bHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBCollisionFunctions_C", "HitCheck_Sphere_Sphere");

	Params::BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere Parms{};

	Parms.Location01 = std::move(Location01);
	Parms.Radius01 = Radius01;
	Parms.Location02 = std::move(Location02);
	Parms.Radius02 = Radius02;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (bHit != nullptr)
		*bHit = Parms.bHit;
}


// Function BPF_AJBCollisionFunctions.BPF_AJBCollisionFunctions_C.CalcHitLocation
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OwnActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSweep                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FHitResult&                HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         HitImpactPoint                                         (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         HitImpactNormal                                        (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         HitLocation                                            (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPF_AJBCollisionFunctions_C::CalcHitLocation(class AActor* OwnActor, bool bSweep, const struct FHitResult& HitResult, class UObject* __WorldContext, struct FVector* HitImpactPoint, struct FVector* HitImpactNormal, struct FVector* HitLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBCollisionFunctions_C", "CalcHitLocation");

	Params::BPF_AJBCollisionFunctions_C_CalcHitLocation Parms{};

	Parms.OwnActor = OwnActor;
	Parms.bSweep = bSweep;
	Parms.HitResult = std::move(HitResult);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (HitImpactPoint != nullptr)
		*HitImpactPoint = std::move(Parms.HitImpactPoint);

	if (HitImpactNormal != nullptr)
		*HitImpactNormal = std::move(Parms.HitImpactNormal);

	if (HitLocation != nullptr)
		*HitLocation = std::move(Parms.HitLocation);
}


// Function BPF_AJBCollisionFunctions.BPF_AJBCollisionFunctions_C.GetHitObjectTypesByPrevTrace
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<EObjectTypeQuery>*               NewParam                                               (Parm, OutParm, ZeroConstructor)

void UBPF_AJBCollisionFunctions_C::GetHitObjectTypesByPrevTrace(class UObject* __WorldContext, TArray<EObjectTypeQuery>* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBCollisionFunctions_C", "GetHitObjectTypesByPrevTrace");

	Params::BPF_AJBCollisionFunctions_C_GetHitObjectTypesByPrevTrace Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = std::move(Parms.NewParam);
}


// Function BPF_AJBCollisionFunctions.BPF_AJBCollisionFunctions_C.AJBMultiLineTrace
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Start                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   End                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bTargetHit                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AActor**                          TargetActor                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UActorComponent**                 TargetComponent                                        (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         TargetLocation                                         (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPF_AJBCollisionFunctions_C::AJBMultiLineTrace(class AActor* DamageCauser, const struct FVector& Start, const struct FVector& End, class UObject* __WorldContext, bool* bTargetHit, class AActor** TargetActor, class UActorComponent** TargetComponent, struct FVector* TargetLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBCollisionFunctions_C", "AJBMultiLineTrace");

	Params::BPF_AJBCollisionFunctions_C_AJBMultiLineTrace Parms{};

	Parms.DamageCauser = DamageCauser;
	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (bTargetHit != nullptr)
		*bTargetHit = Parms.bTargetHit;

	if (TargetActor != nullptr)
		*TargetActor = Parms.TargetActor;

	if (TargetComponent != nullptr)
		*TargetComponent = Parms.TargetComponent;

	if (TargetLocation != nullptr)
		*TargetLocation = std::move(Parms.TargetLocation);
}


// Function BPF_AJBCollisionFunctions.BPF_AJBCollisionFunctions_C.CalcHeadShot
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           HitActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TraceLength                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bHeadShot                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPF_AJBCollisionFunctions_C::CalcHeadShot(class AActor* HitActor, const struct FVector& HitLocation, const struct FVector& Direction, float Radius, float TraceLength, class UObject* __WorldContext, bool* bHeadShot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBCollisionFunctions_C", "CalcHeadShot");

	Params::BPF_AJBCollisionFunctions_C_CalcHeadShot Parms{};

	Parms.HitActor = HitActor;
	Parms.HitLocation = std::move(HitLocation);
	Parms.Direction = std::move(Direction);
	Parms.Radius = Radius;
	Parms.TraceLength = TraceLength;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (bHeadShot != nullptr)
		*bHeadShot = Parms.bHeadShot;
}


// Function BPF_AJBCollisionFunctions.BPF_AJBCollisionFunctions_C.HitCheck_ContinuedSphere_Sphere
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVector&                   Location01                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  Rotation01                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   Radius01                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Length01                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PartitionNum01                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Location02                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Radius02                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bCheckUnder                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   ValidGroundOffsetZ                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bHit                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPF_AJBCollisionFunctions_C::HitCheck_ContinuedSphere_Sphere(const struct FVector& Location01, const struct FRotator& Rotation01, float Radius01, float Length01, int32 PartitionNum01, const struct FVector& Location02, float Radius02, bool bCheckUnder, float ValidGroundOffsetZ, class UObject* __WorldContext, bool* bHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBCollisionFunctions_C", "HitCheck_ContinuedSphere_Sphere");

	Params::BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere Parms{};

	Parms.Location01 = std::move(Location01);
	Parms.Rotation01 = std::move(Rotation01);
	Parms.Radius01 = Radius01;
	Parms.Length01 = Length01;
	Parms.PartitionNum01 = PartitionNum01;
	Parms.Location02 = std::move(Location02);
	Parms.Radius02 = Radius02;
	Parms.bCheckUnder = bCheckUnder;
	Parms.ValidGroundOffsetZ = ValidGroundOffsetZ;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (bHit != nullptr)
		*bHit = Parms.bHit;
}


// Function BPF_AJBCollisionFunctions.BPF_AJBCollisionFunctions_C.PositioningSafeLocation
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   DesiredLocation                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   ForwardDirection                                       (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   HalfHeight                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SmallAmount                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<EObjectTypeQuery>&               ObjectTypes                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                                    bIgnoreSelf                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   AroundTraceNum                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AroundTraceIncScale                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SkyTraceNum                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SkyTraceInceScale                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>&                  ActorsToIgnore                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPositioningSafeLocationResult*         Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         SafeLocation                                           (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor**                          FirstHitActor                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPF_AJBCollisionFunctions_C::PositioningSafeLocation(const struct FVector& DesiredLocation, const struct FVector& ForwardDirection, float Radius, float HalfHeight, float SmallAmount, TArray<EObjectTypeQuery>& ObjectTypes, bool bIgnoreSelf, int32 AroundTraceNum, float AroundTraceIncScale, int32 SkyTraceNum, float SkyTraceInceScale, TArray<class AActor*>& ActorsToIgnore, class UObject* __WorldContext, EPositioningSafeLocationResult* Result, struct FVector* SafeLocation, class AActor** FirstHitActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBCollisionFunctions_C", "PositioningSafeLocation");

	Params::BPF_AJBCollisionFunctions_C_PositioningSafeLocation Parms{};

	Parms.DesiredLocation = std::move(DesiredLocation);
	Parms.ForwardDirection = std::move(ForwardDirection);
	Parms.Radius = Radius;
	Parms.HalfHeight = HalfHeight;
	Parms.SmallAmount = SmallAmount;
	Parms.ObjectTypes = std::move(ObjectTypes);
	Parms.bIgnoreSelf = bIgnoreSelf;
	Parms.AroundTraceNum = AroundTraceNum;
	Parms.AroundTraceIncScale = AroundTraceIncScale;
	Parms.SkyTraceNum = SkyTraceNum;
	Parms.SkyTraceInceScale = SkyTraceInceScale;
	Parms.ActorsToIgnore = std::move(ActorsToIgnore);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	ObjectTypes = std::move(Parms.ObjectTypes);
	ActorsToIgnore = std::move(Parms.ActorsToIgnore);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (SafeLocation != nullptr)
		*SafeLocation = std::move(Parms.SafeLocation);

	if (FirstHitActor != nullptr)
		*FirstHitActor = Parms.FirstHitActor;
}


// Function BPF_AJBCollisionFunctions.BPF_AJBCollisionFunctions_C.AroundTrace
// (Static, Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   ForwardDirection                                       (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CapsuleRadius                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CapsuleHeight                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SmallAmount                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<EObjectTypeQuery>&               ObjectTypes                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                                    bIgnoreSelf                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TraceLengthScale                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bFindSafeLocation                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector*                         SafeLocation                                           (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor**                          HitActor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPF_AJBCollisionFunctions_C::AroundTrace(const struct FVector& Location, const struct FVector& ForwardDirection, float CapsuleRadius, float CapsuleHeight, float SmallAmount, TArray<EObjectTypeQuery>& ObjectTypes, bool bIgnoreSelf, float TraceLengthScale, class UObject* __WorldContext, bool* bFindSafeLocation, struct FVector* SafeLocation, class AActor** HitActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBCollisionFunctions_C", "AroundTrace");

	Params::BPF_AJBCollisionFunctions_C_AroundTrace Parms{};

	Parms.Location = std::move(Location);
	Parms.ForwardDirection = std::move(ForwardDirection);
	Parms.CapsuleRadius = CapsuleRadius;
	Parms.CapsuleHeight = CapsuleHeight;
	Parms.SmallAmount = SmallAmount;
	Parms.ObjectTypes = std::move(ObjectTypes);
	Parms.bIgnoreSelf = bIgnoreSelf;
	Parms.TraceLengthScale = TraceLengthScale;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	ObjectTypes = std::move(Parms.ObjectTypes);

	if (bFindSafeLocation != nullptr)
		*bFindSafeLocation = Parms.bFindSafeLocation;

	if (SafeLocation != nullptr)
		*SafeLocation = std::move(Parms.SafeLocation);

	if (HitActor != nullptr)
		*HitActor = Parms.HitActor;
}


// Function BPF_AJBCollisionFunctions.BPF_AJBCollisionFunctions_C.SkyTrace
// (Static, Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   ForwardDirection                                       (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CapsuleRadius                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CapsuleHeight                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SmallAmount                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<EObjectTypeQuery>&               ObjectTypes                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                                    bIgnoreSelf                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TraceLengthScale                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bFindSafeLocation                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector*                         SafeLocation                                           (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor**                          HitActor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPF_AJBCollisionFunctions_C::SkyTrace(const struct FVector& Location, const struct FVector& ForwardDirection, float CapsuleRadius, float CapsuleHeight, float SmallAmount, TArray<EObjectTypeQuery>& ObjectTypes, bool bIgnoreSelf, float TraceLengthScale, class UObject* __WorldContext, bool* bFindSafeLocation, struct FVector* SafeLocation, class AActor** HitActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBCollisionFunctions_C", "SkyTrace");

	Params::BPF_AJBCollisionFunctions_C_SkyTrace Parms{};

	Parms.Location = std::move(Location);
	Parms.ForwardDirection = std::move(ForwardDirection);
	Parms.CapsuleRadius = CapsuleRadius;
	Parms.CapsuleHeight = CapsuleHeight;
	Parms.SmallAmount = SmallAmount;
	Parms.ObjectTypes = std::move(ObjectTypes);
	Parms.bIgnoreSelf = bIgnoreSelf;
	Parms.TraceLengthScale = TraceLengthScale;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	ObjectTypes = std::move(Parms.ObjectTypes);

	if (bFindSafeLocation != nullptr)
		*bFindSafeLocation = Parms.bFindSafeLocation;

	if (SafeLocation != nullptr)
		*SafeLocation = std::move(Parms.SafeLocation);

	if (HitActor != nullptr)
		*HitActor = Parms.HitActor;
}


// Function BPF_AJBCollisionFunctions.BPF_AJBCollisionFunctions_C.OneDirectionTrace
// (Static, Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CapsuleRadius                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CapsuleHeight                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SmallAmount                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<EObjectTypeQuery>&               ObjectTypes                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                                    bIgnoreSelf                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TraceLengthScale                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bFindSafeLocation                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector*                         SafeLocation                                           (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor**                          HitActor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPF_AJBCollisionFunctions_C::OneDirectionTrace(const struct FVector& Location, const struct FVector& Direction, float CapsuleRadius, float CapsuleHeight, float SmallAmount, TArray<EObjectTypeQuery>& ObjectTypes, bool bIgnoreSelf, float TraceLengthScale, class UObject* __WorldContext, bool* bFindSafeLocation, struct FVector* SafeLocation, class AActor** HitActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBCollisionFunctions_C", "OneDirectionTrace");

	Params::BPF_AJBCollisionFunctions_C_OneDirectionTrace Parms{};

	Parms.Location = std::move(Location);
	Parms.Direction = std::move(Direction);
	Parms.CapsuleRadius = CapsuleRadius;
	Parms.CapsuleHeight = CapsuleHeight;
	Parms.SmallAmount = SmallAmount;
	Parms.ObjectTypes = std::move(ObjectTypes);
	Parms.bIgnoreSelf = bIgnoreSelf;
	Parms.TraceLengthScale = TraceLengthScale;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	ObjectTypes = std::move(Parms.ObjectTypes);

	if (bFindSafeLocation != nullptr)
		*bFindSafeLocation = Parms.bFindSafeLocation;

	if (SafeLocation != nullptr)
		*SafeLocation = std::move(Parms.SafeLocation);

	if (HitActor != nullptr)
		*HitActor = Parms.HitActor;
}


// Function BPF_AJBCollisionFunctions.BPF_AJBCollisionFunctions_C.CalcForwardSlopeInfoByCapsule
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_AJBInGameCharacter_C*         CharacterBP                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ForwardValue                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bHit                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float*                                  Angle                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPF_AJBCollisionFunctions_C::CalcForwardSlopeInfoByCapsule(class ABP_AJBInGameCharacter_C* CharacterBP, const struct FVector& Location, float ForwardValue, class UObject* __WorldContext, bool* bHit, float* Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPF_AJBCollisionFunctions_C", "CalcForwardSlopeInfoByCapsule");

	Params::BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule Parms{};

	Parms.CharacterBP = CharacterBP;
	Parms.Location = std::move(Location);
	Parms.ForwardValue = ForwardValue;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (bHit != nullptr)
		*bHit = Parms.bHit;

	if (Angle != nullptr)
		*Angle = Parms.Angle;
}

}

