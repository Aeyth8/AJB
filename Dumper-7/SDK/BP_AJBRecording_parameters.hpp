#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBRecording

#include "Basic.hpp"

#include "AJB_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "ST_RecordingTargetInfo_structs.hpp"


namespace SDK::Params
{

// Function BP_AJBRecording.BP_AJBRecording_C.ExecuteUbergraph_BP_AJBRecording
// 0x0368 (0x0368 - 0x0000)
struct BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBInGameCharacterBase*                K2Node_DynamicCast_AsAJBIn_Game_Character_Base;    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue;     // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue2;                    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character1;     // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               CallFunc_GetAJBCharacterFromActor_CharacterBP;     // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBCharacterFromActor_bSuccess;        // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetViewTarget_ReturnValue;                // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               CallFunc_GetAJBCharacterFromActor_CharacterBP1;    // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBCharacterFromActor_bSuccess1;       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue3;                    // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBInGameCharacterBase*                K2Node_DynamicCast_AsAJBIn_Game_Character_Base1;   // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue1;    // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_93[0x5];                                       // 0x0093(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue4;                    // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x00A0(0x0010)(ZeroConstructor, NoDestructor)
	class AAJBInGameCharacterBase*                K2Node_DynamicCast_AsAJBIn_Game_Character_Base2;   // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess4;                      // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x00C0(0x0008)(NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue2;    // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CB[0x5];                                       // 0x00CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacter*                    K2Node_Event_Operator;                             // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Time;                                 // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGeneralTiming                                K2Node_Event_Timing;                               // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bEnable;                              // 0x00DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bOperatorIsEmpty;                     // 0x00DE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue1;           // 0x00DF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ABP_AJBInGameCharacter_C*               K2Node_CustomEvent_TargetCharacterBP;              // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 CallFunc_UpdateLeftTime_RemoveIndexes;             // 0x00F0(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue5;                    // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBInGameCharacterBase*                K2Node_DynamicCast_AsAJBIn_Game_Character_Base3;   // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess5;                      // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue3;    // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_122[0x6];                                      // 0x0122(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0128(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable1;                    // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsServer_ReturnValue1;                    // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13D[0x3];                                      // 0x013D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue1;             // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckRecordLimit_bLimit;                  // 0x0145(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_146[0x2];                                      // 0x0146(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable1;                   // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue2;             // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue1;         // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0154(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_NameToText_ReturnValue;              // 0x0160(0x0018)()
	class AActor*                                 CallFunc_GetOwner_ReturnValue6;                    // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0180(0x0040)(HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x01C0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue7;                    // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue1;         // 0x01D8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           CallFunc_RequestWwiseEventOnLocal_AkComponent;     // 0x01E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           CallFunc_RequestWwiseEventOnLocal_AkComponent1;    // 0x01F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue8;                    // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue2;         // 0x0200(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20C[0x4];                                      // 0x020C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_CheckRemoveTarget_RemoveIndexes;          // 0x0210(0x0010)(ZeroConstructor, ReferenceParm)
	class UAkComponent*                           CallFunc_RequestWwiseEventOnLocal_AkComponent2;    // 0x0220(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item1;                          // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue3;             // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue1;                         // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldAllRemoveTarget_bShouldRemove;      // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldDisplayRecordingUI_bShouldDisplay;  // 0x0241(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_242[0x6];                                      // 0x0242(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue9;                    // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBInGameCharacterBase*                K2Node_DynamicCast_AsAJBIn_Game_Character_Base4;   // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess6;                      // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsServer_ReturnValue2;                    // 0x0259(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue4;    // 0x025A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25B[0x5];                                      // 0x025B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_RecordingReticleWidget_C*           CallFunc_Create_ReturnValue;                       // 0x0260(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBInGameCharacterBase*                K2Node_CustomEvent_TargetCharacter1;               // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_TargetLocation1;                // 0x0270(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27C[0x4];                                      // 0x027C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacterBase*                K2Node_CustomEvent_TargetCharacter;                // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_TargetLocation;                 // 0x0288(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue10;                   // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetViewTargetActor_ViewTargetActor;       // 0x02A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character2;     // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess7;                      // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryGetPropertyOwnerCharacterFromActor_bSucceed; // 0x02B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B2[0x6];                                      // 0x02B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_TryGetPropertyOwnerCharacterFromActor_OutActor; // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetCharacterName_CharacterName;           // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue1;     // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C9[0x7];                                      // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_NameToText_ReturnValue1;             // 0x02D0(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData1;             // 0x02E8(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0328(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0338(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0350(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording) == 0x000008, "Wrong alignment on BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording");
static_assert(sizeof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording) == 0x000368, "Wrong size on BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, EntryPoint) == 0x000000, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_GetOwner_ReturnValue1) == 0x000010, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, K2Node_DynamicCast_AsAJBIn_Game_Character_Base) == 0x000018, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::K2Node_DynamicCast_AsAJBIn_Game_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000028, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, K2Node_DynamicCast_bSuccess1) == 0x000030, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_HasLocalSharedController_ReturnValue) == 0x000031, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_HasLocalSharedController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_GetOwner_ReturnValue2) == 0x000038, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_GetOwner_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, K2Node_DynamicCast_AsBP_AJBIn_Game_Character1) == 0x000040, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::K2Node_DynamicCast_AsBP_AJBIn_Game_Character1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, K2Node_DynamicCast_bSuccess2) == 0x000048, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_GetPlayerController_ReturnValue) == 0x000050, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_GetAJBCharacterFromActor_CharacterBP) == 0x000058, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_GetAJBCharacterFromActor_CharacterBP' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_GetAJBCharacterFromActor_bSuccess) == 0x000060, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_GetAJBCharacterFromActor_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_GetViewTarget_ReturnValue) == 0x000068, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_GetViewTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_GetAJBCharacterFromActor_CharacterBP1) == 0x000070, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_GetAJBCharacterFromActor_CharacterBP1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_GetAJBCharacterFromActor_bSuccess1) == 0x000078, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_GetAJBCharacterFromActor_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_GetOwner_ReturnValue3) == 0x000080, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_GetOwner_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, K2Node_DynamicCast_AsAJBIn_Game_Character_Base1) == 0x000088, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::K2Node_DynamicCast_AsAJBIn_Game_Character_Base1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, K2Node_DynamicCast_bSuccess3) == 0x000090, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000091, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_HasLocalSharedController_ReturnValue1) == 0x000092, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_HasLocalSharedController_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_GetOwner_ReturnValue4) == 0x000098, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_GetOwner_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, K2Node_CreateDelegate_OutputDelegate) == 0x0000A0, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, K2Node_DynamicCast_AsAJBIn_Game_Character_Base2) == 0x0000B0, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::K2Node_DynamicCast_AsAJBIn_Game_Character_Base2' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, K2Node_DynamicCast_bSuccess4) == 0x0000B8, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::K2Node_DynamicCast_bSuccess4' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x0000C0, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_HasLocalSharedController_ReturnValue2) == 0x0000C8, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_HasLocalSharedController_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_IsServer_ReturnValue) == 0x0000C9, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_IsServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_IsDedicatedServer_ReturnValue) == 0x0000CA, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, K2Node_Event_Operator) == 0x0000D0, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::K2Node_Event_Operator' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, K2Node_Event_Time) == 0x0000D8, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::K2Node_Event_Time' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, K2Node_Event_Timing) == 0x0000DC, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::K2Node_Event_Timing' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, K2Node_Event_bEnable) == 0x0000DD, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::K2Node_Event_bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, K2Node_Event_bOperatorIsEmpty) == 0x0000DE, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::K2Node_Event_bOperatorIsEmpty' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_IsDedicatedServer_ReturnValue1) == 0x0000DF, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_IsDedicatedServer_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, K2Node_CustomEvent_TargetCharacterBP) == 0x0000E0, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::K2Node_CustomEvent_TargetCharacterBP' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, K2Node_Event_DeltaSeconds) == 0x0000E8, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, Temp_int_Array_Index_Variable) == 0x0000EC, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_UpdateLeftTime_RemoveIndexes) == 0x0000F0, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_UpdateLeftTime_RemoveIndexes' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_Array_Length_ReturnValue) == 0x000100, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_Subtract_IntInt_ReturnValue) == 0x000104, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_Max_ReturnValue) == 0x000108, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_GetOwner_ReturnValue5) == 0x000110, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_GetOwner_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, K2Node_DynamicCast_AsAJBIn_Game_Character_Base3) == 0x000118, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::K2Node_DynamicCast_AsAJBIn_Game_Character_Base3' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, K2Node_DynamicCast_bSuccess5) == 0x000120, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::K2Node_DynamicCast_bSuccess5' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_HasLocalSharedController_ReturnValue3) == 0x000121, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_HasLocalSharedController_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000128, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, Temp_int_Array_Index_Variable1) == 0x000130, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::Temp_int_Array_Index_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_Array_Get_Item) == 0x000134, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, Temp_int_Loop_Counter_Variable) == 0x000138, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_IsServer_ReturnValue1) == 0x00013C, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_IsServer_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_Subtract_IntInt_ReturnValue1) == 0x000140, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_Subtract_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000144, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_CheckRecordLimit_bLimit) == 0x000145, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_CheckRecordLimit_bLimit' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, Temp_int_Loop_Counter_Variable1) == 0x000148, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::Temp_int_Loop_Counter_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_Subtract_IntInt_ReturnValue2) == 0x00014C, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_Subtract_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_GreaterEqual_IntInt_ReturnValue1) == 0x000150, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_GreaterEqual_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_MakeVector2D_ReturnValue) == 0x000154, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_Conv_NameToText_ReturnValue) == 0x000160, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_Conv_NameToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_GetOwner_ReturnValue6) == 0x000178, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_GetOwner_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, K2Node_MakeStruct_FormatArgumentData) == 0x000180, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0001C0, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_GetOwner_ReturnValue7) == 0x0001D0, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_GetOwner_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_K2_GetActorLocation_ReturnValue1) == 0x0001D8, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_K2_GetActorLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_RequestWwiseEventOnLocal_AkComponent) == 0x0001E8, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_RequestWwiseEventOnLocal_AkComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_RequestWwiseEventOnLocal_AkComponent1) == 0x0001F0, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_RequestWwiseEventOnLocal_AkComponent1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_GetOwner_ReturnValue8) == 0x0001F8, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_GetOwner_ReturnValue8' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_K2_GetActorLocation_ReturnValue2) == 0x000200, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_K2_GetActorLocation_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_CheckRemoveTarget_RemoveIndexes) == 0x000210, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_CheckRemoveTarget_RemoveIndexes' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_RequestWwiseEventOnLocal_AkComponent2) == 0x000220, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_RequestWwiseEventOnLocal_AkComponent2' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_Array_Get_Item1) == 0x000228, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_Array_Length_ReturnValue1) == 0x00022C, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_Subtract_IntInt_ReturnValue3) == 0x000230, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_Subtract_IntInt_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_Max_ReturnValue1) == 0x000234, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_Max_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_GetObjectClass_ReturnValue) == 0x000238, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_ShouldAllRemoveTarget_bShouldRemove) == 0x000240, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_ShouldAllRemoveTarget_bShouldRemove' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_ShouldDisplayRecordingUI_bShouldDisplay) == 0x000241, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_ShouldDisplayRecordingUI_bShouldDisplay' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_GetOwner_ReturnValue9) == 0x000248, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_GetOwner_ReturnValue9' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, K2Node_DynamicCast_AsAJBIn_Game_Character_Base4) == 0x000250, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::K2Node_DynamicCast_AsAJBIn_Game_Character_Base4' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, K2Node_DynamicCast_bSuccess6) == 0x000258, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::K2Node_DynamicCast_bSuccess6' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_IsServer_ReturnValue2) == 0x000259, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_IsServer_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_HasLocalSharedController_ReturnValue4) == 0x00025A, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_HasLocalSharedController_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_Create_ReturnValue) == 0x000260, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, K2Node_CustomEvent_TargetCharacter1) == 0x000268, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::K2Node_CustomEvent_TargetCharacter1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, K2Node_CustomEvent_TargetLocation1) == 0x000270, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::K2Node_CustomEvent_TargetLocation1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, K2Node_CustomEvent_TargetCharacter) == 0x000280, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::K2Node_CustomEvent_TargetCharacter' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, K2Node_CustomEvent_TargetLocation) == 0x000288, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::K2Node_CustomEvent_TargetLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_GetOwner_ReturnValue10) == 0x000298, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_GetOwner_ReturnValue10' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_GetViewTargetActor_ViewTargetActor) == 0x0002A0, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_GetViewTargetActor_ViewTargetActor' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, K2Node_DynamicCast_AsBP_AJBIn_Game_Character2) == 0x0002A8, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::K2Node_DynamicCast_AsBP_AJBIn_Game_Character2' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, K2Node_DynamicCast_bSuccess7) == 0x0002B0, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::K2Node_DynamicCast_bSuccess7' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_TryGetPropertyOwnerCharacterFromActor_bSucceed) == 0x0002B1, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_TryGetPropertyOwnerCharacterFromActor_bSucceed' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_TryGetPropertyOwnerCharacterFromActor_OutActor) == 0x0002B8, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_TryGetPropertyOwnerCharacterFromActor_OutActor' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_GetCharacterName_CharacterName) == 0x0002C0, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_GetCharacterName_CharacterName' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_EqualEqual_ObjectObject_ReturnValue1) == 0x0002C8, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_EqualEqual_ObjectObject_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_Conv_NameToText_ReturnValue1) == 0x0002D0, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_Conv_NameToText_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, K2Node_MakeStruct_FormatArgumentData1) == 0x0002E8, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::K2Node_MakeStruct_FormatArgumentData1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, K2Node_MakeArray_Array) == 0x000328, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_Format_ReturnValue) == 0x000338, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_Conv_TextToString_ReturnValue) == 0x000350, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording, CallFunc_Conv_StringToName_ReturnValue) == 0x000360, "Member 'BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.MC_SyncAutoHitParam
// 0x0018 (0x0018 - 0x0000)
struct BP_AJBRecording_C_MC_SyncAutoHitParam final
{
public:
	class AAJBInGameCharacterBase*                TargetCharacter_0;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation_0;                                  // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBRecording_C_MC_SyncAutoHitParam) == 0x000008, "Wrong alignment on BP_AJBRecording_C_MC_SyncAutoHitParam");
static_assert(sizeof(BP_AJBRecording_C_MC_SyncAutoHitParam) == 0x000018, "Wrong size on BP_AJBRecording_C_MC_SyncAutoHitParam");
static_assert(offsetof(BP_AJBRecording_C_MC_SyncAutoHitParam, TargetCharacter_0) == 0x000000, "Member 'BP_AJBRecording_C_MC_SyncAutoHitParam::TargetCharacter_0' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_MC_SyncAutoHitParam, TargetLocation_0) == 0x000008, "Member 'BP_AJBRecording_C_MC_SyncAutoHitParam::TargetLocation_0' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.ROS_SyncAutoHitParam
// 0x0018 (0x0018 - 0x0000)
struct BP_AJBRecording_C_ROS_SyncAutoHitParam final
{
public:
	class AAJBInGameCharacterBase*                TargetCharacter_0;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation_0;                                  // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBRecording_C_ROS_SyncAutoHitParam) == 0x000008, "Wrong alignment on BP_AJBRecording_C_ROS_SyncAutoHitParam");
static_assert(sizeof(BP_AJBRecording_C_ROS_SyncAutoHitParam) == 0x000018, "Wrong size on BP_AJBRecording_C_ROS_SyncAutoHitParam");
static_assert(offsetof(BP_AJBRecording_C_ROS_SyncAutoHitParam, TargetCharacter_0) == 0x000000, "Member 'BP_AJBRecording_C_ROS_SyncAutoHitParam::TargetCharacter_0' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ROS_SyncAutoHitParam, TargetLocation_0) == 0x000008, "Member 'BP_AJBRecording_C_ROS_SyncAutoHitParam::TargetLocation_0' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBRecording_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBRecording_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_AJBRecording_C_ReceiveTick");
static_assert(sizeof(BP_AJBRecording_C_ReceiveTick) == 0x000004, "Wrong size on BP_AJBRecording_C_ReceiveTick");
static_assert(offsetof(BP_AJBRecording_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_AJBRecording_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.AddRecordingTargetServer
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBRecording_C_AddRecordingTargetServer final
{
public:
	class ABP_AJBInGameCharacter_C*               TargetCharacterBP;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBRecording_C_AddRecordingTargetServer) == 0x000008, "Wrong alignment on BP_AJBRecording_C_AddRecordingTargetServer");
static_assert(sizeof(BP_AJBRecording_C_AddRecordingTargetServer) == 0x000008, "Wrong size on BP_AJBRecording_C_AddRecordingTargetServer");
static_assert(offsetof(BP_AJBRecording_C_AddRecordingTargetServer, TargetCharacterBP) == 0x000000, "Member 'BP_AJBRecording_C_AddRecordingTargetServer::TargetCharacterBP' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.NotifyTheWorld
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBRecording_C_NotifyTheWorld final
{
public:
	class AAJBInGameCharacter*                    Operator;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGeneralTiming                                Timing;                                            // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnable;                                           // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bOperatorIsEmpty;                                  // 0x000E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBRecording_C_NotifyTheWorld) == 0x000008, "Wrong alignment on BP_AJBRecording_C_NotifyTheWorld");
static_assert(sizeof(BP_AJBRecording_C_NotifyTheWorld) == 0x000010, "Wrong size on BP_AJBRecording_C_NotifyTheWorld");
static_assert(offsetof(BP_AJBRecording_C_NotifyTheWorld, Operator) == 0x000000, "Member 'BP_AJBRecording_C_NotifyTheWorld::Operator' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_NotifyTheWorld, Time) == 0x000008, "Member 'BP_AJBRecording_C_NotifyTheWorld::Time' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_NotifyTheWorld, Timing) == 0x00000C, "Member 'BP_AJBRecording_C_NotifyTheWorld::Timing' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_NotifyTheWorld, bEnable) == 0x00000D, "Member 'BP_AJBRecording_C_NotifyTheWorld::bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_NotifyTheWorld, bOperatorIsEmpty) == 0x00000E, "Member 'BP_AJBRecording_C_NotifyTheWorld::bOperatorIsEmpty' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.RemoveTargetByIndex
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBRecording_C_RemoveTargetByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue1;          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBRecording_C_RemoveTargetByIndex) == 0x000004, "Wrong alignment on BP_AJBRecording_C_RemoveTargetByIndex");
static_assert(sizeof(BP_AJBRecording_C_RemoveTargetByIndex) == 0x000008, "Wrong size on BP_AJBRecording_C_RemoveTargetByIndex");
static_assert(offsetof(BP_AJBRecording_C_RemoveTargetByIndex, Index_0) == 0x000000, "Member 'BP_AJBRecording_C_RemoveTargetByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_RemoveTargetByIndex, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000004, "Member 'BP_AJBRecording_C_RemoveTargetByIndex::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_RemoveTargetByIndex, CallFunc_Array_IsValidIndex_ReturnValue1) == 0x000005, "Member 'BP_AJBRecording_C_RemoveTargetByIndex::CallFunc_Array_IsValidIndex_ReturnValue1' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.AddTargetByCharacterBase
// 0x0040 (0x0040 - 0x0000)
struct BP_AJBRecording_C_AddTargetByCharacterBase final
{
public:
	class AAJBInGameCharacterBase*                TargetCharacter_0;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue1;               // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBRecording_C_AddTargetByCharacterBase) == 0x000008, "Wrong alignment on BP_AJBRecording_C_AddTargetByCharacterBase");
static_assert(sizeof(BP_AJBRecording_C_AddTargetByCharacterBase) == 0x000040, "Wrong size on BP_AJBRecording_C_AddTargetByCharacterBase");
static_assert(offsetof(BP_AJBRecording_C_AddTargetByCharacterBase, TargetCharacter_0) == 0x000000, "Member 'BP_AJBRecording_C_AddTargetByCharacterBase::TargetCharacter_0' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_AddTargetByCharacterBase, CallFunc_GetDisplayName_ReturnValue) == 0x000008, "Member 'BP_AJBRecording_C_AddTargetByCharacterBase::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_AddTargetByCharacterBase, CallFunc_Concat_StrStr_ReturnValue) == 0x000018, "Member 'BP_AJBRecording_C_AddTargetByCharacterBase::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_AddTargetByCharacterBase, CallFunc_Concat_StrStr_ReturnValue1) == 0x000028, "Member 'BP_AJBRecording_C_AddTargetByCharacterBase::CallFunc_Concat_StrStr_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_AddTargetByCharacterBase, CallFunc_Array_Add_ReturnValue) == 0x000038, "Member 'BP_AJBRecording_C_AddTargetByCharacterBase::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_AddTargetByCharacterBase, CallFunc_Array_Add_ReturnValue1) == 0x00003C, "Member 'BP_AJBRecording_C_AddTargetByCharacterBase::CallFunc_Array_Add_ReturnValue1' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.UpdateLeftTime
// 0x0170 (0x0170 - 0x0000)
struct BP_AJBRecording_C_UpdateLeftTime final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RemoveIndexes;                                     // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<int32>                                 TempRemoveIndexes;                                 // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	int32                                         TempIndex;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item;                           // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0060(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0078(0x0040)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacterBase*                CallFunc_Array_Get_Item1;                          // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue1;           // 0x00E0(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData1;             // 0x00F8(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0138(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0148(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0160(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBRecording_C_UpdateLeftTime) == 0x000008, "Wrong alignment on BP_AJBRecording_C_UpdateLeftTime");
static_assert(sizeof(BP_AJBRecording_C_UpdateLeftTime) == 0x000170, "Wrong size on BP_AJBRecording_C_UpdateLeftTime");
static_assert(offsetof(BP_AJBRecording_C_UpdateLeftTime, DeltaSeconds) == 0x000000, "Member 'BP_AJBRecording_C_UpdateLeftTime::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateLeftTime, RemoveIndexes) == 0x000008, "Member 'BP_AJBRecording_C_UpdateLeftTime::RemoveIndexes' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateLeftTime, TempRemoveIndexes) == 0x000018, "Member 'BP_AJBRecording_C_UpdateLeftTime::TempRemoveIndexes' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateLeftTime, TempIndex) == 0x000028, "Member 'BP_AJBRecording_C_UpdateLeftTime::TempIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateLeftTime, Temp_int_Array_Index_Variable) == 0x00002C, "Member 'BP_AJBRecording_C_UpdateLeftTime::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateLeftTime, Temp_int_Loop_Counter_Variable) == 0x000030, "Member 'BP_AJBRecording_C_UpdateLeftTime::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateLeftTime, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'BP_AJBRecording_C_UpdateLeftTime::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateLeftTime, CallFunc_Array_Add_ReturnValue) == 0x000038, "Member 'BP_AJBRecording_C_UpdateLeftTime::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateLeftTime, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00003C, "Member 'BP_AJBRecording_C_UpdateLeftTime::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateLeftTime, CallFunc_Array_Get_Item) == 0x000040, "Member 'BP_AJBRecording_C_UpdateLeftTime::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateLeftTime, CallFunc_FMax_ReturnValue) == 0x000044, "Member 'BP_AJBRecording_C_UpdateLeftTime::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateLeftTime, CallFunc_Conv_FloatToString_ReturnValue) == 0x000048, "Member 'BP_AJBRecording_C_UpdateLeftTime::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateLeftTime, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000058, "Member 'BP_AJBRecording_C_UpdateLeftTime::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateLeftTime, CallFunc_Conv_StringToText_ReturnValue) == 0x000060, "Member 'BP_AJBRecording_C_UpdateLeftTime::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateLeftTime, K2Node_MakeStruct_FormatArgumentData) == 0x000078, "Member 'BP_AJBRecording_C_UpdateLeftTime::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateLeftTime, CallFunc_Array_Length_ReturnValue) == 0x0000B8, "Member 'BP_AJBRecording_C_UpdateLeftTime::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateLeftTime, CallFunc_Array_Get_Item1) == 0x0000C0, "Member 'BP_AJBRecording_C_UpdateLeftTime::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateLeftTime, CallFunc_Less_IntInt_ReturnValue) == 0x0000C8, "Member 'BP_AJBRecording_C_UpdateLeftTime::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateLeftTime, CallFunc_GetDisplayName_ReturnValue) == 0x0000D0, "Member 'BP_AJBRecording_C_UpdateLeftTime::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateLeftTime, CallFunc_Conv_StringToText_ReturnValue1) == 0x0000E0, "Member 'BP_AJBRecording_C_UpdateLeftTime::CallFunc_Conv_StringToText_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateLeftTime, K2Node_MakeStruct_FormatArgumentData1) == 0x0000F8, "Member 'BP_AJBRecording_C_UpdateLeftTime::K2Node_MakeStruct_FormatArgumentData1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateLeftTime, K2Node_MakeArray_Array) == 0x000138, "Member 'BP_AJBRecording_C_UpdateLeftTime::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateLeftTime, CallFunc_Format_ReturnValue) == 0x000148, "Member 'BP_AJBRecording_C_UpdateLeftTime::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateLeftTime, CallFunc_Conv_TextToString_ReturnValue) == 0x000160, "Member 'BP_AJBRecording_C_UpdateLeftTime::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.TrySpawnRecordingEmphasizeActor
// 0x00C0 (0x00C0 - 0x0000)
struct BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor final
{
public:
	bool                                          bTempAlreadySpawned;                               // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue1;                 // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13[0xD];                                       // 0x0013(0x000D)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0020(0x0030)(IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Array_Index_Variable1;                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable1;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_AJBInGameCharacter_C*>       CallFunc_GetJoinPawns_OutPawns;                    // 0x0058(0x0010)(ZeroConstructor, ReferenceParm)
	class ABP_AJBInGameCharacter_C*               CallFunc_Array_Get_Item;                           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBRecordingEmphasizeActor_C*       CallFunc_FinishSpawningActor_ReturnValue;          // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetAttachedActors_OutActors;              // 0x0090(0x0010)(ZeroConstructor, ReferenceParm)
	class AActor*                                 CallFunc_Array_Get_Item1;                          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue1;                 // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B7[0x1];                                       // 0x00B7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor) == 0x000010, "Wrong alignment on BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor");
static_assert(sizeof(BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor) == 0x0000C0, "Wrong size on BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor");
static_assert(offsetof(BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor, bTempAlreadySpawned) == 0x000000, "Member 'BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor::bTempAlreadySpawned' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor, Temp_bool_True_if_break_was_hit_Variable) == 0x000010, "Member 'BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor, CallFunc_Not_PreBool_ReturnValue) == 0x000011, "Member 'BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor, CallFunc_Not_PreBool_ReturnValue1) == 0x000012, "Member 'BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor::CallFunc_Not_PreBool_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor, CallFunc_MakeTransform_ReturnValue) == 0x000020, "Member 'BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor, Temp_int_Array_Index_Variable1) == 0x000050, "Member 'BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor::Temp_int_Array_Index_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor, Temp_int_Loop_Counter_Variable1) == 0x000054, "Member 'BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor::Temp_int_Loop_Counter_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor, CallFunc_GetJoinPawns_OutPawns) == 0x000058, "Member 'BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor::CallFunc_GetJoinPawns_OutPawns' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor, CallFunc_Array_Get_Item) == 0x000068, "Member 'BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor, CallFunc_Array_Length_ReturnValue) == 0x000070, "Member 'BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000078, "Member 'BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor, CallFunc_Less_IntInt_ReturnValue) == 0x000080, "Member 'BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor, CallFunc_FinishSpawningActor_ReturnValue) == 0x000088, "Member 'BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor, CallFunc_GetAttachedActors_OutActors) == 0x000090, "Member 'BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor::CallFunc_GetAttachedActors_OutActors' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor, CallFunc_Array_Get_Item1) == 0x0000A0, "Member 'BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor, CallFunc_GetObjectClass_ReturnValue) == 0x0000A8, "Member 'BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor, CallFunc_Array_Length_ReturnValue1) == 0x0000B0, "Member 'BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor, CallFunc_ClassIsChildOf_ReturnValue) == 0x0000B4, "Member 'BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor, CallFunc_Less_IntInt_ReturnValue1) == 0x0000B5, "Member 'BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor::CallFunc_Less_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor, CallFunc_BooleanAND_ReturnValue) == 0x0000B6, "Member 'BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor, CallFunc_Add_IntInt_ReturnValue1) == 0x0000B8, "Member 'BP_AJBRecording_C_TrySpawnRecordingEmphasizeActor::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.GetMostNearestTarget
// 0x0080 (0x0080 - 0x0000)
struct BP_AJBRecording_C_GetMostNearestTarget final
{
public:
	class AAJBInGameCharacterBase*                TargetCharacter_0;                                 // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation_0;                                  // 0x0008(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AAJBInGameCharacterBase*>        CallFunc_CheckTargetCondition_OutList;             // 0x0018(0x0010)(ZeroConstructor, ReferenceParm)
	TArray<class AAJBInGameCharacterBase*>        CallFunc_CalcTargetListAttackRange_OutList;        // 0x0028(0x0010)(ZeroConstructor, ReferenceParm)
	TArray<struct FST_RecordingTargetInfo>        CallFunc_CalcTargetList2D_OutList;                 // 0x0038(0x0010)(ZeroConstructor, ReferenceParm)
	TArray<class AAJBInGameCharacterBase*>        CallFunc_CalcTargetObstacle_OutList;               // 0x0048(0x0010)(ZeroConstructor, ReferenceParm)
	TArray<struct FVector>                        CallFunc_CalcTargetObstacle_OutLocationList;       // 0x0058(0x0010)(ZeroConstructor, ReferenceParm)
	class AAJBInGameCharacterBase*                CallFunc_CalcTargetMostNearestCameraLocation_TargetCharacter; // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalcTargetMostNearestCameraLocation_TargetLocation; // 0x0070(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBRecording_C_GetMostNearestTarget) == 0x000008, "Wrong alignment on BP_AJBRecording_C_GetMostNearestTarget");
static_assert(sizeof(BP_AJBRecording_C_GetMostNearestTarget) == 0x000080, "Wrong size on BP_AJBRecording_C_GetMostNearestTarget");
static_assert(offsetof(BP_AJBRecording_C_GetMostNearestTarget, TargetCharacter_0) == 0x000000, "Member 'BP_AJBRecording_C_GetMostNearestTarget::TargetCharacter_0' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_GetMostNearestTarget, TargetLocation_0) == 0x000008, "Member 'BP_AJBRecording_C_GetMostNearestTarget::TargetLocation_0' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_GetMostNearestTarget, CallFunc_CheckTargetCondition_OutList) == 0x000018, "Member 'BP_AJBRecording_C_GetMostNearestTarget::CallFunc_CheckTargetCondition_OutList' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_GetMostNearestTarget, CallFunc_CalcTargetListAttackRange_OutList) == 0x000028, "Member 'BP_AJBRecording_C_GetMostNearestTarget::CallFunc_CalcTargetListAttackRange_OutList' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_GetMostNearestTarget, CallFunc_CalcTargetList2D_OutList) == 0x000038, "Member 'BP_AJBRecording_C_GetMostNearestTarget::CallFunc_CalcTargetList2D_OutList' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_GetMostNearestTarget, CallFunc_CalcTargetObstacle_OutList) == 0x000048, "Member 'BP_AJBRecording_C_GetMostNearestTarget::CallFunc_CalcTargetObstacle_OutList' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_GetMostNearestTarget, CallFunc_CalcTargetObstacle_OutLocationList) == 0x000058, "Member 'BP_AJBRecording_C_GetMostNearestTarget::CallFunc_CalcTargetObstacle_OutLocationList' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_GetMostNearestTarget, CallFunc_CalcTargetMostNearestCameraLocation_TargetCharacter) == 0x000068, "Member 'BP_AJBRecording_C_GetMostNearestTarget::CallFunc_CalcTargetMostNearestCameraLocation_TargetCharacter' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_GetMostNearestTarget, CallFunc_CalcTargetMostNearestCameraLocation_TargetLocation) == 0x000070, "Member 'BP_AJBRecording_C_GetMostNearestTarget::CallFunc_CalcTargetMostNearestCameraLocation_TargetLocation' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.CheckTarget2D
// 0x0080 (0x0080 - 0x0000)
struct BP_AJBRecording_C_CheckTarget2D final
{
public:
	struct FVector2D                              Point;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTarget;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              TempBaseViewSize;                                  // 0x000C(0x0008)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X1;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y1;                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue1;              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X2;                         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y2;                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X3;                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y3;                         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X4;                         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y4;                         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X5;                         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y5;                         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue1;             // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X6;                         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y6;                         // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue1;         // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X7;                         // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y7;                         // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue3;         // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue1;        // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x007E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x007F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBRecording_C_CheckTarget2D) == 0x000004, "Wrong alignment on BP_AJBRecording_C_CheckTarget2D");
static_assert(sizeof(BP_AJBRecording_C_CheckTarget2D) == 0x000080, "Wrong size on BP_AJBRecording_C_CheckTarget2D");
static_assert(offsetof(BP_AJBRecording_C_CheckTarget2D, Point) == 0x000000, "Member 'BP_AJBRecording_C_CheckTarget2D::Point' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTarget2D, bTarget) == 0x000008, "Member 'BP_AJBRecording_C_CheckTarget2D::bTarget' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTarget2D, TempBaseViewSize) == 0x00000C, "Member 'BP_AJBRecording_C_CheckTarget2D::TempBaseViewSize' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTarget2D, CallFunc_BreakVector2D_X) == 0x000014, "Member 'BP_AJBRecording_C_CheckTarget2D::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTarget2D, CallFunc_BreakVector2D_Y) == 0x000018, "Member 'BP_AJBRecording_C_CheckTarget2D::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTarget2D, CallFunc_Add_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_AJBRecording_C_CheckTarget2D::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTarget2D, CallFunc_BreakVector2D_X1) == 0x000020, "Member 'BP_AJBRecording_C_CheckTarget2D::CallFunc_BreakVector2D_X1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTarget2D, CallFunc_BreakVector2D_Y1) == 0x000024, "Member 'BP_AJBRecording_C_CheckTarget2D::CallFunc_BreakVector2D_Y1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTarget2D, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000028, "Member 'BP_AJBRecording_C_CheckTarget2D::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTarget2D, CallFunc_Add_FloatFloat_ReturnValue1) == 0x00002C, "Member 'BP_AJBRecording_C_CheckTarget2D::CallFunc_Add_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTarget2D, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x000030, "Member 'BP_AJBRecording_C_CheckTarget2D::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTarget2D, CallFunc_BreakVector2D_X2) == 0x000034, "Member 'BP_AJBRecording_C_CheckTarget2D::CallFunc_BreakVector2D_X2' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTarget2D, CallFunc_BreakVector2D_Y2) == 0x000038, "Member 'BP_AJBRecording_C_CheckTarget2D::CallFunc_BreakVector2D_Y2' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTarget2D, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00003C, "Member 'BP_AJBRecording_C_CheckTarget2D::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTarget2D, CallFunc_BreakVector2D_X3) == 0x000040, "Member 'BP_AJBRecording_C_CheckTarget2D::CallFunc_BreakVector2D_X3' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTarget2D, CallFunc_BreakVector2D_Y3) == 0x000044, "Member 'BP_AJBRecording_C_CheckTarget2D::CallFunc_BreakVector2D_Y3' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTarget2D, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x000048, "Member 'BP_AJBRecording_C_CheckTarget2D::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTarget2D, CallFunc_Less_FloatFloat_ReturnValue) == 0x00004C, "Member 'BP_AJBRecording_C_CheckTarget2D::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTarget2D, CallFunc_BreakVector2D_X4) == 0x000050, "Member 'BP_AJBRecording_C_CheckTarget2D::CallFunc_BreakVector2D_X4' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTarget2D, CallFunc_BreakVector2D_Y4) == 0x000054, "Member 'BP_AJBRecording_C_CheckTarget2D::CallFunc_BreakVector2D_Y4' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTarget2D, CallFunc_BreakVector2D_X5) == 0x000058, "Member 'BP_AJBRecording_C_CheckTarget2D::CallFunc_BreakVector2D_X5' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTarget2D, CallFunc_BreakVector2D_Y5) == 0x00005C, "Member 'BP_AJBRecording_C_CheckTarget2D::CallFunc_BreakVector2D_Y5' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTarget2D, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000060, "Member 'BP_AJBRecording_C_CheckTarget2D::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTarget2D, CallFunc_Less_FloatFloat_ReturnValue1) == 0x000061, "Member 'BP_AJBRecording_C_CheckTarget2D::CallFunc_Less_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTarget2D, CallFunc_BreakVector2D_X6) == 0x000064, "Member 'BP_AJBRecording_C_CheckTarget2D::CallFunc_BreakVector2D_X6' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTarget2D, CallFunc_BreakVector2D_Y6) == 0x000068, "Member 'BP_AJBRecording_C_CheckTarget2D::CallFunc_BreakVector2D_Y6' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTarget2D, CallFunc_Subtract_FloatFloat_ReturnValue1) == 0x00006C, "Member 'BP_AJBRecording_C_CheckTarget2D::CallFunc_Subtract_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTarget2D, CallFunc_BreakVector2D_X7) == 0x000070, "Member 'BP_AJBRecording_C_CheckTarget2D::CallFunc_BreakVector2D_X7' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTarget2D, CallFunc_BreakVector2D_Y7) == 0x000074, "Member 'BP_AJBRecording_C_CheckTarget2D::CallFunc_BreakVector2D_Y7' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTarget2D, CallFunc_Multiply_FloatFloat_ReturnValue3) == 0x000078, "Member 'BP_AJBRecording_C_CheckTarget2D::CallFunc_Multiply_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTarget2D, CallFunc_LessEqual_FloatFloat_ReturnValue1) == 0x00007C, "Member 'BP_AJBRecording_C_CheckTarget2D::CallFunc_LessEqual_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTarget2D, CallFunc_BooleanAND_ReturnValue) == 0x00007D, "Member 'BP_AJBRecording_C_CheckTarget2D::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTarget2D, CallFunc_BooleanAND_ReturnValue1) == 0x00007E, "Member 'BP_AJBRecording_C_CheckTarget2D::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTarget2D, CallFunc_BooleanAND_ReturnValue2) == 0x00007F, "Member 'BP_AJBRecording_C_CheckTarget2D::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.TryChangeEnableMarker
// 0x0020 (0x0020 - 0x0000)
struct BP_AJBRecording_C_TryChangeEnableMarker final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacterBase*                TargetCharacter_0;                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue1;                 // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_PlayVanishFade_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBRecording_C_TryChangeEnableMarker) == 0x000008, "Wrong alignment on BP_AJBRecording_C_TryChangeEnableMarker");
static_assert(sizeof(BP_AJBRecording_C_TryChangeEnableMarker) == 0x000020, "Wrong size on BP_AJBRecording_C_TryChangeEnableMarker");
static_assert(offsetof(BP_AJBRecording_C_TryChangeEnableMarker, bEnable) == 0x000000, "Member 'BP_AJBRecording_C_TryChangeEnableMarker::bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TryChangeEnableMarker, TargetCharacter_0) == 0x000008, "Member 'BP_AJBRecording_C_TryChangeEnableMarker::TargetCharacter_0' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TryChangeEnableMarker, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'BP_AJBRecording_C_TryChangeEnableMarker::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TryChangeEnableMarker, CallFunc_Not_PreBool_ReturnValue1) == 0x000011, "Member 'BP_AJBRecording_C_TryChangeEnableMarker::CallFunc_Not_PreBool_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TryChangeEnableMarker, CallFunc_PlayVanishFade_ReturnValue) == 0x000014, "Member 'BP_AJBRecording_C_TryChangeEnableMarker::CallFunc_PlayVanishFade_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TryChangeEnableMarker, Temp_bool_Variable) == 0x000018, "Member 'BP_AJBRecording_C_TryChangeEnableMarker::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TryChangeEnableMarker, K2Node_Select_Default) == 0x000019, "Member 'BP_AJBRecording_C_TryChangeEnableMarker::K2Node_Select_Default' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.TryChangeEnableRecordingUI
// 0x000C (0x000C - 0x0000)
struct BP_AJBRecording_C_TryChangeEnableRecordingUI final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_PlayVanishFade_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue1;                 // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBRecording_C_TryChangeEnableRecordingUI) == 0x000004, "Wrong alignment on BP_AJBRecording_C_TryChangeEnableRecordingUI");
static_assert(sizeof(BP_AJBRecording_C_TryChangeEnableRecordingUI) == 0x00000C, "Wrong size on BP_AJBRecording_C_TryChangeEnableRecordingUI");
static_assert(offsetof(BP_AJBRecording_C_TryChangeEnableRecordingUI, bEnable) == 0x000000, "Member 'BP_AJBRecording_C_TryChangeEnableRecordingUI::bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TryChangeEnableRecordingUI, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'BP_AJBRecording_C_TryChangeEnableRecordingUI::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TryChangeEnableRecordingUI, CallFunc_PlayVanishFade_ReturnValue) == 0x000004, "Member 'BP_AJBRecording_C_TryChangeEnableRecordingUI::CallFunc_PlayVanishFade_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TryChangeEnableRecordingUI, Temp_bool_Variable) == 0x000008, "Member 'BP_AJBRecording_C_TryChangeEnableRecordingUI::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TryChangeEnableRecordingUI, CallFunc_Not_PreBool_ReturnValue1) == 0x000009, "Member 'BP_AJBRecording_C_TryChangeEnableRecordingUI::CallFunc_Not_PreBool_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TryChangeEnableRecordingUI, K2Node_Select_Default) == 0x00000A, "Member 'BP_AJBRecording_C_TryChangeEnableRecordingUI::K2Node_Select_Default' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.CalcTargetList2D
// 0x00E0 (0x00E0 - 0x0000)
struct BP_AJBRecording_C_CalcTargetList2D final
{
public:
	TArray<class AAJBInGameCharacterBase*>        InList;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	TArray<struct FST_RecordingTargetInfo>        OutList;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<struct FVector>                        TempLocationList;                                  // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<bool>                                  TempValidList;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FST_RecordingTargetInfo>        TempOutList;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacterBase*                CallFunc_Array_Get_Item;                           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_RecordingTargetInfo                K2Node_MakeStruct_ST_RecordingTargetInfo;          // 0x0068(0x0028)(HasGetValueTypeHash)
	struct FVector                                CallFunc_GetTargetLocations_ActorLocation;         // 0x0090(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetTargetLocations_HeadLocation;          // 0x009C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_AJBConvertWorldLocationToScreenLocation_Point; // 0x00AC(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AJBConvertWorldLocationToScreenLocation_bReturnValue; // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue1;                   // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckTarget2D_bTarget;                    // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_AJBConvertWorldLocationToScreenLocation_Point1; // 0x00C0(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AJBConvertWorldLocationToScreenLocation_bReturnValue1; // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue2;                   // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckTarget2D_bTarget1;                   // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue3;                   // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue4;                   // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBRecording_C_CalcTargetList2D) == 0x000008, "Wrong alignment on BP_AJBRecording_C_CalcTargetList2D");
static_assert(sizeof(BP_AJBRecording_C_CalcTargetList2D) == 0x0000E0, "Wrong size on BP_AJBRecording_C_CalcTargetList2D");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetList2D, InList) == 0x000000, "Member 'BP_AJBRecording_C_CalcTargetList2D::InList' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetList2D, OutList) == 0x000010, "Member 'BP_AJBRecording_C_CalcTargetList2D::OutList' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetList2D, TempLocationList) == 0x000020, "Member 'BP_AJBRecording_C_CalcTargetList2D::TempLocationList' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetList2D, TempValidList) == 0x000030, "Member 'BP_AJBRecording_C_CalcTargetList2D::TempValidList' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetList2D, TempOutList) == 0x000040, "Member 'BP_AJBRecording_C_CalcTargetList2D::TempOutList' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetList2D, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'BP_AJBRecording_C_CalcTargetList2D::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetList2D, Temp_int_Loop_Counter_Variable) == 0x000054, "Member 'BP_AJBRecording_C_CalcTargetList2D::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetList2D, Temp_int_Array_Index_Variable) == 0x000058, "Member 'BP_AJBRecording_C_CalcTargetList2D::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetList2D, CallFunc_Less_IntInt_ReturnValue) == 0x00005C, "Member 'BP_AJBRecording_C_CalcTargetList2D::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetList2D, CallFunc_Array_Get_Item) == 0x000060, "Member 'BP_AJBRecording_C_CalcTargetList2D::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetList2D, K2Node_MakeStruct_ST_RecordingTargetInfo) == 0x000068, "Member 'BP_AJBRecording_C_CalcTargetList2D::K2Node_MakeStruct_ST_RecordingTargetInfo' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetList2D, CallFunc_GetTargetLocations_ActorLocation) == 0x000090, "Member 'BP_AJBRecording_C_CalcTargetList2D::CallFunc_GetTargetLocations_ActorLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetList2D, CallFunc_GetTargetLocations_HeadLocation) == 0x00009C, "Member 'BP_AJBRecording_C_CalcTargetList2D::CallFunc_GetTargetLocations_HeadLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetList2D, CallFunc_Array_Add_ReturnValue) == 0x0000A8, "Member 'BP_AJBRecording_C_CalcTargetList2D::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetList2D, CallFunc_AJBConvertWorldLocationToScreenLocation_Point) == 0x0000AC, "Member 'BP_AJBRecording_C_CalcTargetList2D::CallFunc_AJBConvertWorldLocationToScreenLocation_Point' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetList2D, CallFunc_AJBConvertWorldLocationToScreenLocation_bReturnValue) == 0x0000B4, "Member 'BP_AJBRecording_C_CalcTargetList2D::CallFunc_AJBConvertWorldLocationToScreenLocation_bReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetList2D, CallFunc_Array_Add_ReturnValue1) == 0x0000B8, "Member 'BP_AJBRecording_C_CalcTargetList2D::CallFunc_Array_Add_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetList2D, CallFunc_CheckTarget2D_bTarget) == 0x0000BC, "Member 'BP_AJBRecording_C_CalcTargetList2D::CallFunc_CheckTarget2D_bTarget' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetList2D, CallFunc_AJBConvertWorldLocationToScreenLocation_Point1) == 0x0000C0, "Member 'BP_AJBRecording_C_CalcTargetList2D::CallFunc_AJBConvertWorldLocationToScreenLocation_Point1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetList2D, CallFunc_AJBConvertWorldLocationToScreenLocation_bReturnValue1) == 0x0000C8, "Member 'BP_AJBRecording_C_CalcTargetList2D::CallFunc_AJBConvertWorldLocationToScreenLocation_bReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetList2D, CallFunc_Array_Add_ReturnValue2) == 0x0000CC, "Member 'BP_AJBRecording_C_CalcTargetList2D::CallFunc_Array_Add_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetList2D, CallFunc_CheckTarget2D_bTarget1) == 0x0000D0, "Member 'BP_AJBRecording_C_CalcTargetList2D::CallFunc_CheckTarget2D_bTarget1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetList2D, CallFunc_Add_IntInt_ReturnValue) == 0x0000D4, "Member 'BP_AJBRecording_C_CalcTargetList2D::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetList2D, CallFunc_Array_Add_ReturnValue3) == 0x0000D8, "Member 'BP_AJBRecording_C_CalcTargetList2D::CallFunc_Array_Add_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetList2D, CallFunc_Array_Add_ReturnValue4) == 0x0000DC, "Member 'BP_AJBRecording_C_CalcTargetList2D::CallFunc_Array_Add_ReturnValue4' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.GetDistanceMostNearestTarget
// 0x0078 (0x0078 - 0x0000)
struct BP_AJBRecording_C_GetDistanceMostNearestTarget final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempDistance;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AAJBInGameCharacterBase*>        CallFunc_CheckTargetCondition_OutList;             // 0x0018(0x0010)(ZeroConstructor, ReferenceParm)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacterBase*                CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0040(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue1;         // 0x004C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x005C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBRecording_C_GetDistanceMostNearestTarget) == 0x000008, "Wrong alignment on BP_AJBRecording_C_GetDistanceMostNearestTarget");
static_assert(sizeof(BP_AJBRecording_C_GetDistanceMostNearestTarget) == 0x000078, "Wrong size on BP_AJBRecording_C_GetDistanceMostNearestTarget");
static_assert(offsetof(BP_AJBRecording_C_GetDistanceMostNearestTarget, Distance) == 0x000000, "Member 'BP_AJBRecording_C_GetDistanceMostNearestTarget::Distance' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_GetDistanceMostNearestTarget, TempDistance) == 0x000004, "Member 'BP_AJBRecording_C_GetDistanceMostNearestTarget::TempDistance' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_GetDistanceMostNearestTarget, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_AJBRecording_C_GetDistanceMostNearestTarget::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_GetDistanceMostNearestTarget, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'BP_AJBRecording_C_GetDistanceMostNearestTarget::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_GetDistanceMostNearestTarget, CallFunc_CheckTargetCondition_OutList) == 0x000018, "Member 'BP_AJBRecording_C_GetDistanceMostNearestTarget::CallFunc_CheckTargetCondition_OutList' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_GetDistanceMostNearestTarget, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000028, "Member 'BP_AJBRecording_C_GetDistanceMostNearestTarget::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_GetDistanceMostNearestTarget, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_AJBRecording_C_GetDistanceMostNearestTarget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_GetDistanceMostNearestTarget, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_AJBRecording_C_GetDistanceMostNearestTarget::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_GetDistanceMostNearestTarget, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000040, "Member 'BP_AJBRecording_C_GetDistanceMostNearestTarget::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_GetDistanceMostNearestTarget, CallFunc_K2_GetActorLocation_ReturnValue1) == 0x00004C, "Member 'BP_AJBRecording_C_GetDistanceMostNearestTarget::CallFunc_K2_GetActorLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_GetDistanceMostNearestTarget, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'BP_AJBRecording_C_GetDistanceMostNearestTarget::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_GetDistanceMostNearestTarget, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00005C, "Member 'BP_AJBRecording_C_GetDistanceMostNearestTarget::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_GetDistanceMostNearestTarget, CallFunc_VSize_ReturnValue) == 0x000068, "Member 'BP_AJBRecording_C_GetDistanceMostNearestTarget::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_GetDistanceMostNearestTarget, Temp_int_Loop_Counter_Variable) == 0x00006C, "Member 'BP_AJBRecording_C_GetDistanceMostNearestTarget::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_GetDistanceMostNearestTarget, CallFunc_Less_FloatFloat_ReturnValue) == 0x000070, "Member 'BP_AJBRecording_C_GetDistanceMostNearestTarget::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_GetDistanceMostNearestTarget, CallFunc_Less_IntInt_ReturnValue) == 0x000071, "Member 'BP_AJBRecording_C_GetDistanceMostNearestTarget::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_GetDistanceMostNearestTarget, CallFunc_Add_IntInt_ReturnValue) == 0x000074, "Member 'BP_AJBRecording_C_GetDistanceMostNearestTarget::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.CheckTargetExist
// 0x000C (0x000C - 0x0000)
struct BP_AJBRecording_C_CheckTargetExist final
{
public:
	bool                                          bExist;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBRecording_C_CheckTargetExist) == 0x000004, "Wrong alignment on BP_AJBRecording_C_CheckTargetExist");
static_assert(sizeof(BP_AJBRecording_C_CheckTargetExist) == 0x00000C, "Wrong size on BP_AJBRecording_C_CheckTargetExist");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetExist, bExist) == 0x000000, "Member 'BP_AJBRecording_C_CheckTargetExist::bExist' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetExist, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'BP_AJBRecording_C_CheckTargetExist::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetExist, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'BP_AJBRecording_C_CheckTargetExist::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.CalcTargetListAttackRange
// 0x0058 (0x0058 - 0x0000)
struct BP_AJBRecording_C_CalcTargetListAttackRange final
{
public:
	TArray<class AAJBInGameCharacterBase*>        InList;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	TArray<class AAJBInGameCharacterBase*>        OutList;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<class AAJBInGameCharacterBase*>        TempOutList;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBInGameCharacterBase*                CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckTargetInAttackRange_bInAttackRange;  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBRecording_C_CalcTargetListAttackRange) == 0x000008, "Wrong alignment on BP_AJBRecording_C_CalcTargetListAttackRange");
static_assert(sizeof(BP_AJBRecording_C_CalcTargetListAttackRange) == 0x000058, "Wrong size on BP_AJBRecording_C_CalcTargetListAttackRange");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetListAttackRange, InList) == 0x000000, "Member 'BP_AJBRecording_C_CalcTargetListAttackRange::InList' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetListAttackRange, OutList) == 0x000010, "Member 'BP_AJBRecording_C_CalcTargetListAttackRange::OutList' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetListAttackRange, TempOutList) == 0x000020, "Member 'BP_AJBRecording_C_CalcTargetListAttackRange::TempOutList' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetListAttackRange, Temp_int_Array_Index_Variable) == 0x000030, "Member 'BP_AJBRecording_C_CalcTargetListAttackRange::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetListAttackRange, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'BP_AJBRecording_C_CalcTargetListAttackRange::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetListAttackRange, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_AJBRecording_C_CalcTargetListAttackRange::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetListAttackRange, CallFunc_CheckTargetInAttackRange_bInAttackRange) == 0x000040, "Member 'BP_AJBRecording_C_CalcTargetListAttackRange::CallFunc_CheckTargetInAttackRange_bInAttackRange' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetListAttackRange, Temp_int_Loop_Counter_Variable) == 0x000044, "Member 'BP_AJBRecording_C_CalcTargetListAttackRange::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetListAttackRange, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'BP_AJBRecording_C_CalcTargetListAttackRange::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetListAttackRange, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'BP_AJBRecording_C_CalcTargetListAttackRange::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetListAttackRange, CallFunc_Array_Add_ReturnValue) == 0x000050, "Member 'BP_AJBRecording_C_CalcTargetListAttackRange::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.CalcTargetMostNearestCameraLocation
// 0x00F8 (0x00F8 - 0x0000)
struct BP_AJBRecording_C_CalcTargetMostNearestCameraLocation final
{
public:
	TArray<class AAJBInGameCharacterBase*>        InList;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	TArray<struct FVector>                        InLocationList;                                    // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	class AAJBInGameCharacterBase*                TargetCharacter_0;                                 // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation_0;                                  // 0x0028(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempTargetLocation;                                // 0x0034(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBInGameCharacterBase*                TempTargetCharacter;                               // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TempFirstIndex;                                    // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempCameraLocation;                                // 0x004C(0x000C)(Edit, BlueprintVisible, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBInGameCharacterBase*                TempDecidedCharacter;                              // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0060(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x006C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item1;                          // 0x0088(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacterBase*                CallFunc_Array_Get_Item2;                          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBInGameCharacterBase*                CallFunc_Array_Get_Item3;                          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00B4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue;            // 0x00CC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue1;         // 0x00D8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue1;       // 0x00E4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue1;                       // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBRecording_C_CalcTargetMostNearestCameraLocation) == 0x000008, "Wrong alignment on BP_AJBRecording_C_CalcTargetMostNearestCameraLocation");
static_assert(sizeof(BP_AJBRecording_C_CalcTargetMostNearestCameraLocation) == 0x0000F8, "Wrong size on BP_AJBRecording_C_CalcTargetMostNearestCameraLocation");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetMostNearestCameraLocation, InList) == 0x000000, "Member 'BP_AJBRecording_C_CalcTargetMostNearestCameraLocation::InList' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetMostNearestCameraLocation, InLocationList) == 0x000010, "Member 'BP_AJBRecording_C_CalcTargetMostNearestCameraLocation::InLocationList' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetMostNearestCameraLocation, TargetCharacter_0) == 0x000020, "Member 'BP_AJBRecording_C_CalcTargetMostNearestCameraLocation::TargetCharacter_0' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetMostNearestCameraLocation, TargetLocation_0) == 0x000028, "Member 'BP_AJBRecording_C_CalcTargetMostNearestCameraLocation::TargetLocation_0' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetMostNearestCameraLocation, TempTargetLocation) == 0x000034, "Member 'BP_AJBRecording_C_CalcTargetMostNearestCameraLocation::TempTargetLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetMostNearestCameraLocation, TempTargetCharacter) == 0x000040, "Member 'BP_AJBRecording_C_CalcTargetMostNearestCameraLocation::TempTargetCharacter' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetMostNearestCameraLocation, TempFirstIndex) == 0x000048, "Member 'BP_AJBRecording_C_CalcTargetMostNearestCameraLocation::TempFirstIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetMostNearestCameraLocation, TempCameraLocation) == 0x00004C, "Member 'BP_AJBRecording_C_CalcTargetMostNearestCameraLocation::TempCameraLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetMostNearestCameraLocation, TempDecidedCharacter) == 0x000058, "Member 'BP_AJBRecording_C_CalcTargetMostNearestCameraLocation::TempDecidedCharacter' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetMostNearestCameraLocation, CallFunc_Array_Get_Item) == 0x000060, "Member 'BP_AJBRecording_C_CalcTargetMostNearestCameraLocation::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetMostNearestCameraLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00006C, "Member 'BP_AJBRecording_C_CalcTargetMostNearestCameraLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetMostNearestCameraLocation, CallFunc_Array_Length_ReturnValue) == 0x000078, "Member 'BP_AJBRecording_C_CalcTargetMostNearestCameraLocation::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetMostNearestCameraLocation, CallFunc_Subtract_IntInt_ReturnValue) == 0x00007C, "Member 'BP_AJBRecording_C_CalcTargetMostNearestCameraLocation::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetMostNearestCameraLocation, CallFunc_Add_IntInt_ReturnValue) == 0x000080, "Member 'BP_AJBRecording_C_CalcTargetMostNearestCameraLocation::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetMostNearestCameraLocation, Temp_int_Variable) == 0x000084, "Member 'BP_AJBRecording_C_CalcTargetMostNearestCameraLocation::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetMostNearestCameraLocation, CallFunc_Array_Get_Item1) == 0x000088, "Member 'BP_AJBRecording_C_CalcTargetMostNearestCameraLocation::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetMostNearestCameraLocation, CallFunc_Array_Get_Item2) == 0x000098, "Member 'BP_AJBRecording_C_CalcTargetMostNearestCameraLocation::CallFunc_Array_Get_Item2' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetMostNearestCameraLocation, CallFunc_Array_Get_Item3) == 0x0000A0, "Member 'BP_AJBRecording_C_CalcTargetMostNearestCameraLocation::CallFunc_Array_Get_Item3' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetMostNearestCameraLocation, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000A8, "Member 'BP_AJBRecording_C_CalcTargetMostNearestCameraLocation::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetMostNearestCameraLocation, CallFunc_Add_IntInt_ReturnValue1) == 0x0000AC, "Member 'BP_AJBRecording_C_CalcTargetMostNearestCameraLocation::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetMostNearestCameraLocation, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0000B0, "Member 'BP_AJBRecording_C_CalcTargetMostNearestCameraLocation::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetMostNearestCameraLocation, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000B4, "Member 'BP_AJBRecording_C_CalcTargetMostNearestCameraLocation::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetMostNearestCameraLocation, CallFunc_GetPlayerController_ReturnValue) == 0x0000C0, "Member 'BP_AJBRecording_C_CalcTargetMostNearestCameraLocation::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetMostNearestCameraLocation, CallFunc_VSize_ReturnValue) == 0x0000C8, "Member 'BP_AJBRecording_C_CalcTargetMostNearestCameraLocation::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetMostNearestCameraLocation, CallFunc_GetCameraLocation_ReturnValue) == 0x0000CC, "Member 'BP_AJBRecording_C_CalcTargetMostNearestCameraLocation::CallFunc_GetCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetMostNearestCameraLocation, CallFunc_K2_GetActorLocation_ReturnValue1) == 0x0000D8, "Member 'BP_AJBRecording_C_CalcTargetMostNearestCameraLocation::CallFunc_K2_GetActorLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetMostNearestCameraLocation, CallFunc_Subtract_VectorVector_ReturnValue1) == 0x0000E4, "Member 'BP_AJBRecording_C_CalcTargetMostNearestCameraLocation::CallFunc_Subtract_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetMostNearestCameraLocation, CallFunc_VSize_ReturnValue1) == 0x0000F0, "Member 'BP_AJBRecording_C_CalcTargetMostNearestCameraLocation::CallFunc_VSize_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetMostNearestCameraLocation, CallFunc_Less_FloatFloat_ReturnValue) == 0x0000F4, "Member 'BP_AJBRecording_C_CalcTargetMostNearestCameraLocation::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.CheckTargetInAttackRange
// 0x0220 (0x0220 - 0x0000)
struct BP_AJBRecording_C_CheckTargetInAttackRange final
{
public:
	class AAJBInGameCharacterBase*                TargetCharacter_0;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInAttackRange;                                    // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               TempRotationStandBaseToTarget;                     // 0x000C(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FVector                                TempDiffStartToEnd;                                // 0x0018(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TempRotationToTargetCollisionLocation;             // 0x0024(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FVector                                TempDirectionToTargetCollisionLocation;            // 0x0030(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempTargetCollisionLocation;                       // 0x003C(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempTargetStandLocation;                           // 0x0048(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempTargetLocation;                                // 0x0054(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TempViewRotation;                                  // 0x0060(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	float                                         TempRange;                                         // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempAttackCollisionRadius;                         // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempStandAttackOffset;                             // 0x0074(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempStandBaseLocation;                             // 0x0080(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeLiteralFloat_ReturnValue;             // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetViewRotation_Rotation;                 // 0x00A4(0x000C)(IsPlainOldData, NoDestructor)
	class UBP_AJBCloseRangeSkill_C*               CallFunc_GetComponentByClass_ReturnValue;          // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x00BC(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00C8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x00D4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00E0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00EC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue1;            // 0x00F8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue1;          // 0x0104(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue1;       // 0x0110(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x011C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue1; // 0x0128(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue2;            // 0x0134(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0140(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue3;            // 0x014C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue2; // 0x0158(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue2;       // 0x0164(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0170(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue4;            // 0x017C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue1;              // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue2;              // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19C[0x4];                                      // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character1;     // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x01A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1AA[0x6];                                      // 0x01AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameStand_C*                   K2Node_DynamicCast_AsBP_AJBIn_Game_Stand;          // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B9[0x7];                                      // 0x01B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_FighterInterface_C> K2Node_DynamicCast_AsBI_Fighter_Interface;        // 0x01C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D1[0x7];                                      // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_FighterInterface_C> K2Node_DynamicCast_AsBI_Fighter_Interface1;       // 0x01D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess4;                      // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E9[0x3];                                      // 0x01E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAttackCollisionRadius_Radius;          // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetStandAttackOffset_StandAttackOffset;   // 0x01F0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_CloseRangeLauncherStandInterface_C> K2Node_DynamicCast_AsBI_Close_Range_Launcher_Stand_Interface; // 0x0200(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess5;                      // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_211[0x3];                                      // 0x0211(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetLaunchedActorHomeLocation_Location;    // 0x0214(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBRecording_C_CheckTargetInAttackRange) == 0x000008, "Wrong alignment on BP_AJBRecording_C_CheckTargetInAttackRange");
static_assert(sizeof(BP_AJBRecording_C_CheckTargetInAttackRange) == 0x000220, "Wrong size on BP_AJBRecording_C_CheckTargetInAttackRange");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, TargetCharacter_0) == 0x000000, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::TargetCharacter_0' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, bInAttackRange) == 0x000008, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::bInAttackRange' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, TempRotationStandBaseToTarget) == 0x00000C, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::TempRotationStandBaseToTarget' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, TempDiffStartToEnd) == 0x000018, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::TempDiffStartToEnd' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, TempRotationToTargetCollisionLocation) == 0x000024, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::TempRotationToTargetCollisionLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, TempDirectionToTargetCollisionLocation) == 0x000030, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::TempDirectionToTargetCollisionLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, TempTargetCollisionLocation) == 0x00003C, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::TempTargetCollisionLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, TempTargetStandLocation) == 0x000048, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::TempTargetStandLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, TempTargetLocation) == 0x000054, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::TempTargetLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, TempViewRotation) == 0x000060, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::TempViewRotation' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, TempRange) == 0x00006C, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::TempRange' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, TempAttackCollisionRadius) == 0x000070, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::TempAttackCollisionRadius' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, TempStandAttackOffset) == 0x000074, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::TempStandAttackOffset' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, TempStandBaseLocation) == 0x000080, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::TempStandBaseLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, CallFunc_MakeLiteralFloat_ReturnValue) == 0x00008C, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::CallFunc_MakeLiteralFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, CallFunc_GetOwner_ReturnValue) == 0x000090, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000098, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, K2Node_DynamicCast_bSuccess) == 0x0000A0, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, CallFunc_GetViewRotation_Rotation) == 0x0000A4, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::CallFunc_GetViewRotation_Rotation' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, CallFunc_GetComponentByClass_ReturnValue) == 0x0000B0, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000B8, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, CallFunc_FindLookAtRotation_ReturnValue) == 0x0000BC, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000C8, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x0000D4, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, CallFunc_Add_VectorVector_ReturnValue) == 0x0000E0, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000EC, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, CallFunc_Add_VectorVector_ReturnValue1) == 0x0000F8, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::CallFunc_Add_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, CallFunc_FindLookAtRotation_ReturnValue1) == 0x000104, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::CallFunc_FindLookAtRotation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, CallFunc_Subtract_VectorVector_ReturnValue1) == 0x000110, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::CallFunc_Subtract_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, CallFunc_Normal_ReturnValue) == 0x00011C, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, CallFunc_GreaterGreater_VectorRotator_ReturnValue1) == 0x000128, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::CallFunc_GreaterGreater_VectorRotator_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, CallFunc_Add_VectorVector_ReturnValue2) == 0x000134, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::CallFunc_Add_VectorVector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, CallFunc_MakeVector_ReturnValue) == 0x000140, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, CallFunc_Add_VectorVector_ReturnValue3) == 0x00014C, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::CallFunc_Add_VectorVector_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, CallFunc_GreaterGreater_VectorRotator_ReturnValue2) == 0x000158, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::CallFunc_GreaterGreater_VectorRotator_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, CallFunc_Subtract_VectorVector_ReturnValue2) == 0x000164, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::CallFunc_Subtract_VectorVector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000170, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, CallFunc_Add_VectorVector_ReturnValue4) == 0x00017C, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::CallFunc_Add_VectorVector_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, CallFunc_VSize_ReturnValue) == 0x000188, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, CallFunc_Add_FloatFloat_ReturnValue1) == 0x00018C, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::CallFunc_Add_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, CallFunc_GetOwner_ReturnValue1) == 0x000190, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, CallFunc_Add_FloatFloat_ReturnValue2) == 0x000198, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::CallFunc_Add_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, K2Node_DynamicCast_AsBP_AJBIn_Game_Character1) == 0x0001A0, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::K2Node_DynamicCast_AsBP_AJBIn_Game_Character1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, K2Node_DynamicCast_bSuccess1) == 0x0001A8, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0001A9, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, K2Node_DynamicCast_AsBP_AJBIn_Game_Stand) == 0x0001B0, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::K2Node_DynamicCast_AsBP_AJBIn_Game_Stand' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, K2Node_DynamicCast_bSuccess2) == 0x0001B8, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, K2Node_DynamicCast_AsBI_Fighter_Interface) == 0x0001C0, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::K2Node_DynamicCast_AsBI_Fighter_Interface' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, K2Node_DynamicCast_bSuccess3) == 0x0001D0, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, K2Node_DynamicCast_AsBI_Fighter_Interface1) == 0x0001D8, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::K2Node_DynamicCast_AsBI_Fighter_Interface1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, K2Node_DynamicCast_bSuccess4) == 0x0001E8, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::K2Node_DynamicCast_bSuccess4' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, CallFunc_GetAttackCollisionRadius_Radius) == 0x0001EC, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::CallFunc_GetAttackCollisionRadius_Radius' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, CallFunc_GetStandAttackOffset_StandAttackOffset) == 0x0001F0, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::CallFunc_GetStandAttackOffset_StandAttackOffset' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, K2Node_DynamicCast_AsBI_Close_Range_Launcher_Stand_Interface) == 0x000200, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::K2Node_DynamicCast_AsBI_Close_Range_Launcher_Stand_Interface' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, K2Node_DynamicCast_bSuccess5) == 0x000210, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::K2Node_DynamicCast_bSuccess5' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetInAttackRange, CallFunc_GetLaunchedActorHomeLocation_Location) == 0x000214, "Member 'BP_AJBRecording_C_CheckTargetInAttackRange::CallFunc_GetLaunchedActorHomeLocation_Location' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.RemoveTargets
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBRecording_C_RemoveTargets final
{
public:
	class ABP_AJBInGameCharacter_C*               TargetCharacterBP;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBRecording_C_RemoveTargets) == 0x000008, "Wrong alignment on BP_AJBRecording_C_RemoveTargets");
static_assert(sizeof(BP_AJBRecording_C_RemoveTargets) == 0x000008, "Wrong size on BP_AJBRecording_C_RemoveTargets");
static_assert(offsetof(BP_AJBRecording_C_RemoveTargets, TargetCharacterBP) == 0x000000, "Member 'BP_AJBRecording_C_RemoveTargets::TargetCharacterBP' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.RemoveTargetByCharacterBP
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBRecording_C_RemoveTargetByCharacterBP final
{
public:
	class AAJBInGameCharacterBase*                AJBCharacterBase;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBRecording_C_RemoveTargetByCharacterBP) == 0x000008, "Wrong alignment on BP_AJBRecording_C_RemoveTargetByCharacterBP");
static_assert(sizeof(BP_AJBRecording_C_RemoveTargetByCharacterBP) == 0x000010, "Wrong size on BP_AJBRecording_C_RemoveTargetByCharacterBP");
static_assert(offsetof(BP_AJBRecording_C_RemoveTargetByCharacterBP, AJBCharacterBase) == 0x000000, "Member 'BP_AJBRecording_C_RemoveTargetByCharacterBP::AJBCharacterBase' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_RemoveTargetByCharacterBP, CallFunc_Array_Find_ReturnValue) == 0x000008, "Member 'BP_AJBRecording_C_RemoveTargetByCharacterBP::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_RemoveTargetByCharacterBP, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00000C, "Member 'BP_AJBRecording_C_RemoveTargetByCharacterBP::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.TryAddTargets
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBRecording_C_TryAddTargets final
{
public:
	class ABP_AJBInGameCharacter_C*               TargetCharacterBP;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBRecording_C_TryAddTargets) == 0x000008, "Wrong alignment on BP_AJBRecording_C_TryAddTargets");
static_assert(sizeof(BP_AJBRecording_C_TryAddTargets) == 0x000008, "Wrong size on BP_AJBRecording_C_TryAddTargets");
static_assert(offsetof(BP_AJBRecording_C_TryAddTargets, TargetCharacterBP) == 0x000000, "Member 'BP_AJBRecording_C_TryAddTargets::TargetCharacterBP' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.ChangeMarkerTarget
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBRecording_C_ChangeMarkerTarget final
{
public:
	class AAJBInGameCharacterBase*                TargetCharacter_0;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_PlayVanishFade_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBRecording_C_ChangeMarkerTarget) == 0x000008, "Wrong alignment on BP_AJBRecording_C_ChangeMarkerTarget");
static_assert(sizeof(BP_AJBRecording_C_ChangeMarkerTarget) == 0x000010, "Wrong size on BP_AJBRecording_C_ChangeMarkerTarget");
static_assert(offsetof(BP_AJBRecording_C_ChangeMarkerTarget, TargetCharacter_0) == 0x000000, "Member 'BP_AJBRecording_C_ChangeMarkerTarget::TargetCharacter_0' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ChangeMarkerTarget, CallFunc_PlayVanishFade_ReturnValue) == 0x000008, "Member 'BP_AJBRecording_C_ChangeMarkerTarget::CallFunc_PlayVanishFade_ReturnValue' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.CheckTargetCondition
// 0x0098 (0x0098 - 0x0000)
struct BP_AJBRecording_C_CheckTargetCondition final
{
public:
	TArray<class AAJBInGameCharacterBase*>        InList;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	TArray<class AAJBInGameCharacterBase*>        OutList;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<class AAJBInGameCharacterBase*>        TempOutList;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacterBase*                CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBI_AJBInterface_C>    K2Node_DynamicCast_AsBI_AJBInterface;              // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBRoadRollerSkill_C*               CallFunc_GetComponentByClass_ReturnValue;          // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckCharacterDetection_bCheckDetection;  // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCollisionEnableState_bReturn;           // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckTargetSelf_bTarget;                  // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable1;                               // 0x008B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBRecording_C_CheckTargetCondition) == 0x000008, "Wrong alignment on BP_AJBRecording_C_CheckTargetCondition");
static_assert(sizeof(BP_AJBRecording_C_CheckTargetCondition) == 0x000098, "Wrong size on BP_AJBRecording_C_CheckTargetCondition");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetCondition, InList) == 0x000000, "Member 'BP_AJBRecording_C_CheckTargetCondition::InList' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetCondition, OutList) == 0x000010, "Member 'BP_AJBRecording_C_CheckTargetCondition::OutList' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetCondition, TempOutList) == 0x000020, "Member 'BP_AJBRecording_C_CheckTargetCondition::TempOutList' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetCondition, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'BP_AJBRecording_C_CheckTargetCondition::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetCondition, Temp_int_Array_Index_Variable) == 0x000034, "Member 'BP_AJBRecording_C_CheckTargetCondition::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetCondition, Temp_int_Loop_Counter_Variable) == 0x000038, "Member 'BP_AJBRecording_C_CheckTargetCondition::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetCondition, CallFunc_Array_Get_Item) == 0x000040, "Member 'BP_AJBRecording_C_CheckTargetCondition::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetCondition, K2Node_DynamicCast_AsBI_AJBInterface) == 0x000048, "Member 'BP_AJBRecording_C_CheckTargetCondition::K2Node_DynamicCast_AsBI_AJBInterface' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetCondition, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'BP_AJBRecording_C_CheckTargetCondition::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetCondition, CallFunc_GetComponentByClass_ReturnValue) == 0x000060, "Member 'BP_AJBRecording_C_CheckTargetCondition::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetCondition, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000068, "Member 'BP_AJBRecording_C_CheckTargetCondition::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetCondition, K2Node_DynamicCast_bSuccess1) == 0x000070, "Member 'BP_AJBRecording_C_CheckTargetCondition::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetCondition, CallFunc_IsValid_ReturnValue) == 0x000071, "Member 'BP_AJBRecording_C_CheckTargetCondition::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetCondition, CallFunc_CheckCharacterDetection_bCheckDetection) == 0x000072, "Member 'BP_AJBRecording_C_CheckTargetCondition::CallFunc_CheckCharacterDetection_bCheckDetection' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetCondition, CallFunc_IsCollisionEnableState_bReturn) == 0x000073, "Member 'BP_AJBRecording_C_CheckTargetCondition::CallFunc_IsCollisionEnableState_bReturn' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetCondition, CallFunc_Less_IntInt_ReturnValue) == 0x000074, "Member 'BP_AJBRecording_C_CheckTargetCondition::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetCondition, CallFunc_Add_IntInt_ReturnValue) == 0x000078, "Member 'BP_AJBRecording_C_CheckTargetCondition::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetCondition, CallFunc_GetOwner_ReturnValue) == 0x000080, "Member 'BP_AJBRecording_C_CheckTargetCondition::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetCondition, Temp_bool_Variable) == 0x000088, "Member 'BP_AJBRecording_C_CheckTargetCondition::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetCondition, CallFunc_CheckTargetSelf_bTarget) == 0x000089, "Member 'BP_AJBRecording_C_CheckTargetCondition::CallFunc_CheckTargetSelf_bTarget' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetCondition, CallFunc_BooleanAND_ReturnValue) == 0x00008A, "Member 'BP_AJBRecording_C_CheckTargetCondition::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetCondition, Temp_bool_Variable1) == 0x00008B, "Member 'BP_AJBRecording_C_CheckTargetCondition::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetCondition, CallFunc_Array_Add_ReturnValue) == 0x00008C, "Member 'BP_AJBRecording_C_CheckTargetCondition::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetCondition, K2Node_Select_Default) == 0x000090, "Member 'BP_AJBRecording_C_CheckTargetCondition::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckTargetCondition, CallFunc_BooleanAND_ReturnValue1) == 0x000091, "Member 'BP_AJBRecording_C_CheckTargetCondition::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.CheckRecordLimit
// 0x0048 (0x0048 - 0x0000)
struct BP_AJBRecording_C_CheckRecordLimit final
{
public:
	bool                                          bLimit;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TempCount;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacterBase*                CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBRecording_C_CheckRecordLimit) == 0x000008, "Wrong alignment on BP_AJBRecording_C_CheckRecordLimit");
static_assert(sizeof(BP_AJBRecording_C_CheckRecordLimit) == 0x000048, "Wrong size on BP_AJBRecording_C_CheckRecordLimit");
static_assert(offsetof(BP_AJBRecording_C_CheckRecordLimit, bLimit) == 0x000000, "Member 'BP_AJBRecording_C_CheckRecordLimit::bLimit' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckRecordLimit, TempCount) == 0x000004, "Member 'BP_AJBRecording_C_CheckRecordLimit::TempCount' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckRecordLimit, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_AJBRecording_C_CheckRecordLimit::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckRecordLimit, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'BP_AJBRecording_C_CheckRecordLimit::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckRecordLimit, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_AJBRecording_C_CheckRecordLimit::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckRecordLimit, Temp_int_Variable) == 0x000014, "Member 'BP_AJBRecording_C_CheckRecordLimit::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckRecordLimit, CallFunc_Add_IntInt_ReturnValue1) == 0x000018, "Member 'BP_AJBRecording_C_CheckRecordLimit::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckRecordLimit, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_AJBRecording_C_CheckRecordLimit::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckRecordLimit, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000028, "Member 'BP_AJBRecording_C_CheckRecordLimit::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckRecordLimit, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000030, "Member 'BP_AJBRecording_C_CheckRecordLimit::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckRecordLimit, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_AJBRecording_C_CheckRecordLimit::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckRecordLimit, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'BP_AJBRecording_C_CheckRecordLimit::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckRecordLimit, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'BP_AJBRecording_C_CheckRecordLimit::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.RemoveMostOldestTargets
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBRecording_C_RemoveMostOldestTargets final
{
public:
	bool                                          bTempExistStand;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBRecording_C_RemoveMostOldestTargets) == 0x000001, "Wrong alignment on BP_AJBRecording_C_RemoveMostOldestTargets");
static_assert(sizeof(BP_AJBRecording_C_RemoveMostOldestTargets) == 0x000001, "Wrong size on BP_AJBRecording_C_RemoveMostOldestTargets");
static_assert(offsetof(BP_AJBRecording_C_RemoveMostOldestTargets, bTempExistStand) == 0x000000, "Member 'BP_AJBRecording_C_RemoveMostOldestTargets::bTempExistStand' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.CalcPosition
// 0x0044 (0x0044 - 0x0000)
struct BP_AJBRecording_C_CalcPosition final
{
public:
	struct FVector2D                              InPosition;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOutOfScreen;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              OutPosition;                                       // 0x000C(0x0008)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable;                              // 0x0018(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0020(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetViewportScale_ReturnValue;             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue;         // 0x002C(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x0034(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default;                             // 0x003C(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBRecording_C_CalcPosition) == 0x000004, "Wrong alignment on BP_AJBRecording_C_CalcPosition");
static_assert(sizeof(BP_AJBRecording_C_CalcPosition) == 0x000044, "Wrong size on BP_AJBRecording_C_CalcPosition");
static_assert(offsetof(BP_AJBRecording_C_CalcPosition, InPosition) == 0x000000, "Member 'BP_AJBRecording_C_CalcPosition::InPosition' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcPosition, bOutOfScreen) == 0x000008, "Member 'BP_AJBRecording_C_CalcPosition::bOutOfScreen' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcPosition, OutPosition) == 0x00000C, "Member 'BP_AJBRecording_C_CalcPosition::OutPosition' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcPosition, Temp_bool_Variable) == 0x000014, "Member 'BP_AJBRecording_C_CalcPosition::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcPosition, Temp_struct_Variable) == 0x000018, "Member 'BP_AJBRecording_C_CalcPosition::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcPosition, CallFunc_MakeVector2D_ReturnValue) == 0x000020, "Member 'BP_AJBRecording_C_CalcPosition::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcPosition, CallFunc_GetViewportScale_ReturnValue) == 0x000028, "Member 'BP_AJBRecording_C_CalcPosition::CallFunc_GetViewportScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcPosition, CallFunc_Divide_Vector2DFloat_ReturnValue) == 0x00002C, "Member 'BP_AJBRecording_C_CalcPosition::CallFunc_Divide_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcPosition, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x000034, "Member 'BP_AJBRecording_C_CalcPosition::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcPosition, K2Node_Select_Default) == 0x00003C, "Member 'BP_AJBRecording_C_CalcPosition::K2Node_Select_Default' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.CalcTargetObstacle
// 0x00F8 (0x00F8 - 0x0000)
struct BP_AJBRecording_C_CalcTargetObstacle final
{
public:
	TArray<struct FST_RecordingTargetInfo>        InList;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	TArray<class AAJBInGameCharacterBase*>        OutList;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<struct FVector>                        OutLocationList;                                   // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor)
	struct FVector                                TempEndLocation;                                   // 0x0030(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        TempOutLocationList;                               // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<class AAJBInGameCharacterBase*>        TempOutList;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	struct FVector                                TempCameraLocation;                                // 0x0060(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable1;                   // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable1;                    // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_RecordingTargetInfo                CallFunc_Array_Get_Item;                           // 0x0088(0x0028)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Array_Get_Item1;                          // 0x00B8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Get_Item2;                          // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue1;                 // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CE[0x2];                                       // 0x00CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TraceTarget_bSuccess;                     // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue1;                   // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue;            // 0x00E8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBRecording_C_CalcTargetObstacle) == 0x000008, "Wrong alignment on BP_AJBRecording_C_CalcTargetObstacle");
static_assert(sizeof(BP_AJBRecording_C_CalcTargetObstacle) == 0x0000F8, "Wrong size on BP_AJBRecording_C_CalcTargetObstacle");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetObstacle, InList) == 0x000000, "Member 'BP_AJBRecording_C_CalcTargetObstacle::InList' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetObstacle, OutList) == 0x000010, "Member 'BP_AJBRecording_C_CalcTargetObstacle::OutList' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetObstacle, OutLocationList) == 0x000020, "Member 'BP_AJBRecording_C_CalcTargetObstacle::OutLocationList' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetObstacle, TempEndLocation) == 0x000030, "Member 'BP_AJBRecording_C_CalcTargetObstacle::TempEndLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetObstacle, TempOutLocationList) == 0x000040, "Member 'BP_AJBRecording_C_CalcTargetObstacle::TempOutLocationList' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetObstacle, TempOutList) == 0x000050, "Member 'BP_AJBRecording_C_CalcTargetObstacle::TempOutList' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetObstacle, TempCameraLocation) == 0x000060, "Member 'BP_AJBRecording_C_CalcTargetObstacle::TempCameraLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetObstacle, Temp_int_Loop_Counter_Variable) == 0x00006C, "Member 'BP_AJBRecording_C_CalcTargetObstacle::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetObstacle, CallFunc_Add_IntInt_ReturnValue) == 0x000070, "Member 'BP_AJBRecording_C_CalcTargetObstacle::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetObstacle, Temp_int_Array_Index_Variable) == 0x000074, "Member 'BP_AJBRecording_C_CalcTargetObstacle::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetObstacle, Temp_bool_True_if_break_was_hit_Variable) == 0x000078, "Member 'BP_AJBRecording_C_CalcTargetObstacle::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetObstacle, CallFunc_Not_PreBool_ReturnValue) == 0x000079, "Member 'BP_AJBRecording_C_CalcTargetObstacle::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetObstacle, Temp_int_Loop_Counter_Variable1) == 0x00007C, "Member 'BP_AJBRecording_C_CalcTargetObstacle::Temp_int_Loop_Counter_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetObstacle, Temp_int_Array_Index_Variable1) == 0x000080, "Member 'BP_AJBRecording_C_CalcTargetObstacle::Temp_int_Array_Index_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetObstacle, CallFunc_Add_IntInt_ReturnValue1) == 0x000084, "Member 'BP_AJBRecording_C_CalcTargetObstacle::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetObstacle, CallFunc_Array_Get_Item) == 0x000088, "Member 'BP_AJBRecording_C_CalcTargetObstacle::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetObstacle, CallFunc_Array_Length_ReturnValue) == 0x0000B0, "Member 'BP_AJBRecording_C_CalcTargetObstacle::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetObstacle, CallFunc_Less_IntInt_ReturnValue) == 0x0000B4, "Member 'BP_AJBRecording_C_CalcTargetObstacle::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetObstacle, CallFunc_Array_Get_Item1) == 0x0000B8, "Member 'BP_AJBRecording_C_CalcTargetObstacle::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetObstacle, CallFunc_Array_Get_Item2) == 0x0000C4, "Member 'BP_AJBRecording_C_CalcTargetObstacle::CallFunc_Array_Get_Item2' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetObstacle, CallFunc_Array_Length_ReturnValue1) == 0x0000C8, "Member 'BP_AJBRecording_C_CalcTargetObstacle::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetObstacle, CallFunc_Less_IntInt_ReturnValue1) == 0x0000CC, "Member 'BP_AJBRecording_C_CalcTargetObstacle::CallFunc_Less_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetObstacle, CallFunc_BooleanAND_ReturnValue) == 0x0000CD, "Member 'BP_AJBRecording_C_CalcTargetObstacle::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetObstacle, CallFunc_Array_Add_ReturnValue) == 0x0000D0, "Member 'BP_AJBRecording_C_CalcTargetObstacle::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetObstacle, CallFunc_TraceTarget_bSuccess) == 0x0000D4, "Member 'BP_AJBRecording_C_CalcTargetObstacle::CallFunc_TraceTarget_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetObstacle, CallFunc_Array_Add_ReturnValue1) == 0x0000D8, "Member 'BP_AJBRecording_C_CalcTargetObstacle::CallFunc_Array_Add_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetObstacle, CallFunc_GetPlayerController_ReturnValue) == 0x0000E0, "Member 'BP_AJBRecording_C_CalcTargetObstacle::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CalcTargetObstacle, CallFunc_GetCameraLocation_ReturnValue) == 0x0000E8, "Member 'BP_AJBRecording_C_CalcTargetObstacle::CallFunc_GetCameraLocation_ReturnValue' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.TraceTarget
// 0x01A0 (0x01A0 - 0x0000)
struct BP_AJBRecording_C_TraceTarget final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndLocation;                                       // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0030(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array1;                           // 0x0040(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	TArray<struct FHitResult>                     CallFunc_AJBMultiLineTraceForObjects_OutHits;      // 0x0050(0x0010)(ZeroConstructor, ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_AJBMultiLineTraceForObjects_ReturnValue;  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_Array_Get_Item;                           // 0x0070(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FA[0x2];                                       // 0x00FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0104(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0110(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x011C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0128(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0148(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0160(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x016C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameWindow_C*                  K2Node_DynamicCast_AsBP_AJBIn_Game_Window;         // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsBroken_ReturnValue;                     // 0x018A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_18B[0x5];                                      // 0x018B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesImplementInterface_ReturnValue;       // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPair_bPairCharacter;                    // 0x0199(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBRecording_C_TraceTarget) == 0x000008, "Wrong alignment on BP_AJBRecording_C_TraceTarget");
static_assert(sizeof(BP_AJBRecording_C_TraceTarget) == 0x0001A0, "Wrong size on BP_AJBRecording_C_TraceTarget");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, StartLocation) == 0x000000, "Member 'BP_AJBRecording_C_TraceTarget::StartLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, EndLocation) == 0x00000C, "Member 'BP_AJBRecording_C_TraceTarget::EndLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, bSuccess) == 0x000018, "Member 'BP_AJBRecording_C_TraceTarget::bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'BP_AJBRecording_C_TraceTarget::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, CallFunc_GetOwner_ReturnValue) == 0x000020, "Member 'BP_AJBRecording_C_TraceTarget::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'BP_AJBRecording_C_TraceTarget::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, Temp_int_Array_Index_Variable) == 0x00002C, "Member 'BP_AJBRecording_C_TraceTarget::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, K2Node_MakeArray_Array) == 0x000030, "Member 'BP_AJBRecording_C_TraceTarget::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, K2Node_MakeArray_Array1) == 0x000040, "Member 'BP_AJBRecording_C_TraceTarget::K2Node_MakeArray_Array1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, CallFunc_AJBMultiLineTraceForObjects_OutHits) == 0x000050, "Member 'BP_AJBRecording_C_TraceTarget::CallFunc_AJBMultiLineTraceForObjects_OutHits' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, CallFunc_AJBMultiLineTraceForObjects_ReturnValue) == 0x000060, "Member 'BP_AJBRecording_C_TraceTarget::CallFunc_AJBMultiLineTraceForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, CallFunc_Array_Length_ReturnValue) == 0x000064, "Member 'BP_AJBRecording_C_TraceTarget::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member 'BP_AJBRecording_C_TraceTarget::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, CallFunc_Array_Get_Item) == 0x000070, "Member 'BP_AJBRecording_C_TraceTarget::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, CallFunc_BreakHitResult_bBlockingHit) == 0x0000F8, "Member 'BP_AJBRecording_C_TraceTarget::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000F9, "Member 'BP_AJBRecording_C_TraceTarget::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, CallFunc_BreakHitResult_Time) == 0x0000FC, "Member 'BP_AJBRecording_C_TraceTarget::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, CallFunc_BreakHitResult_Distance) == 0x000100, "Member 'BP_AJBRecording_C_TraceTarget::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, CallFunc_BreakHitResult_Location) == 0x000104, "Member 'BP_AJBRecording_C_TraceTarget::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, CallFunc_BreakHitResult_ImpactPoint) == 0x000110, "Member 'BP_AJBRecording_C_TraceTarget::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, CallFunc_BreakHitResult_Normal) == 0x00011C, "Member 'BP_AJBRecording_C_TraceTarget::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, CallFunc_BreakHitResult_ImpactNormal) == 0x000128, "Member 'BP_AJBRecording_C_TraceTarget::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, CallFunc_BreakHitResult_PhysMat) == 0x000138, "Member 'BP_AJBRecording_C_TraceTarget::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, CallFunc_BreakHitResult_HitActor) == 0x000140, "Member 'BP_AJBRecording_C_TraceTarget::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, CallFunc_BreakHitResult_HitComponent) == 0x000148, "Member 'BP_AJBRecording_C_TraceTarget::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, CallFunc_BreakHitResult_HitBoneName) == 0x000150, "Member 'BP_AJBRecording_C_TraceTarget::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, CallFunc_BreakHitResult_HitItem) == 0x000158, "Member 'BP_AJBRecording_C_TraceTarget::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, CallFunc_BreakHitResult_FaceIndex) == 0x00015C, "Member 'BP_AJBRecording_C_TraceTarget::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, CallFunc_BreakHitResult_TraceStart) == 0x000160, "Member 'BP_AJBRecording_C_TraceTarget::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, CallFunc_BreakHitResult_TraceEnd) == 0x00016C, "Member 'BP_AJBRecording_C_TraceTarget::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, CallFunc_GetObjectClass_ReturnValue) == 0x000178, "Member 'BP_AJBRecording_C_TraceTarget::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, K2Node_DynamicCast_AsBP_AJBIn_Game_Window) == 0x000180, "Member 'BP_AJBRecording_C_TraceTarget::K2Node_DynamicCast_AsBP_AJBIn_Game_Window' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, K2Node_DynamicCast_bSuccess) == 0x000188, "Member 'BP_AJBRecording_C_TraceTarget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, CallFunc_ClassIsChildOf_ReturnValue) == 0x000189, "Member 'BP_AJBRecording_C_TraceTarget::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, CallFunc_IsBroken_ReturnValue) == 0x00018A, "Member 'BP_AJBRecording_C_TraceTarget::CallFunc_IsBroken_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, CallFunc_GetOwner_ReturnValue1) == 0x000190, "Member 'BP_AJBRecording_C_TraceTarget::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, CallFunc_DoesImplementInterface_ReturnValue) == 0x000198, "Member 'BP_AJBRecording_C_TraceTarget::CallFunc_DoesImplementInterface_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_TraceTarget, CallFunc_IsPair_bPairCharacter) == 0x000199, "Member 'BP_AJBRecording_C_TraceTarget::CallFunc_IsPair_bPairCharacter' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.CheckRemoveTarget
// 0x0048 (0x0048 - 0x0000)
struct BP_AJBRecording_C_CheckRemoveTarget final
{
public:
	TArray<int32>                                 RemoveIndexes;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<int32>                                 TempRemoveIndexes;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	int32                                         TempIndex;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBInGameCharacterBase*                CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldRemoveTarget_bShouldRemove;         // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBRecording_C_CheckRemoveTarget) == 0x000008, "Wrong alignment on BP_AJBRecording_C_CheckRemoveTarget");
static_assert(sizeof(BP_AJBRecording_C_CheckRemoveTarget) == 0x000048, "Wrong size on BP_AJBRecording_C_CheckRemoveTarget");
static_assert(offsetof(BP_AJBRecording_C_CheckRemoveTarget, RemoveIndexes) == 0x000000, "Member 'BP_AJBRecording_C_CheckRemoveTarget::RemoveIndexes' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckRemoveTarget, TempRemoveIndexes) == 0x000010, "Member 'BP_AJBRecording_C_CheckRemoveTarget::TempRemoveIndexes' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckRemoveTarget, TempIndex) == 0x000020, "Member 'BP_AJBRecording_C_CheckRemoveTarget::TempIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckRemoveTarget, Temp_int_Array_Index_Variable) == 0x000024, "Member 'BP_AJBRecording_C_CheckRemoveTarget::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckRemoveTarget, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'BP_AJBRecording_C_CheckRemoveTarget::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckRemoveTarget, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'BP_AJBRecording_C_CheckRemoveTarget::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckRemoveTarget, CallFunc_Array_Add_ReturnValue) == 0x000030, "Member 'BP_AJBRecording_C_CheckRemoveTarget::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckRemoveTarget, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'BP_AJBRecording_C_CheckRemoveTarget::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckRemoveTarget, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_AJBRecording_C_CheckRemoveTarget::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckRemoveTarget, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'BP_AJBRecording_C_CheckRemoveTarget::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_CheckRemoveTarget, CallFunc_ShouldRemoveTarget_bShouldRemove) == 0x000041, "Member 'BP_AJBRecording_C_CheckRemoveTarget::CallFunc_ShouldRemoveTarget_bShouldRemove' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.ShouldRemoveTarget
// 0x0020 (0x0020 - 0x0000)
struct BP_AJBRecording_C_ShouldRemoveTarget final
{
public:
	class AAJBInGameCharacterBase*                TargetCharacter_0;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldRemove;                                     // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CharacterBehaviorMatches_ReturnValue;     // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBRecording_C_ShouldRemoveTarget) == 0x000008, "Wrong alignment on BP_AJBRecording_C_ShouldRemoveTarget");
static_assert(sizeof(BP_AJBRecording_C_ShouldRemoveTarget) == 0x000020, "Wrong size on BP_AJBRecording_C_ShouldRemoveTarget");
static_assert(offsetof(BP_AJBRecording_C_ShouldRemoveTarget, TargetCharacter_0) == 0x000000, "Member 'BP_AJBRecording_C_ShouldRemoveTarget::TargetCharacter_0' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ShouldRemoveTarget, bShouldRemove) == 0x000008, "Member 'BP_AJBRecording_C_ShouldRemoveTarget::bShouldRemove' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ShouldRemoveTarget, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000010, "Member 'BP_AJBRecording_C_ShouldRemoveTarget::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ShouldRemoveTarget, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AJBRecording_C_ShouldRemoveTarget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ShouldRemoveTarget, CallFunc_CharacterBehaviorMatches_ReturnValue) == 0x000019, "Member 'BP_AJBRecording_C_ShouldRemoveTarget::CallFunc_CharacterBehaviorMatches_ReturnValue' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.ShouldAllRemoveTarget
// 0x00D0 (0x00D0 - 0x0000)
struct BP_AJBRecording_C_ShouldAllRemoveTarget final
{
public:
	bool                                          bShouldRemove;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayMode                                     CallFunc_GetPlayMode_PlayMode;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x0020(0x0020)()
	bool                                          CallFunc_CheckCharacterBehavior_Active_bReturnValue; // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGamePlayerController_C*        K2Node_DynamicCast_AsBP_AJBIn_Game_Player_Controller; // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_GetCurrentFlowState_FlowState;            // 0x0068(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_MatchesAnyTags_ReturnValue;               // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character1;     // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBGameplayTagOwnerInterface_C> K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface; // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_GetGameplayTags_TagContainerCopy;         // 0x00A8(0x0020)()
	bool                                          CallFunc_CheckPassiveTagProhibition_bProhibitionTag; // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBRecording_C_ShouldAllRemoveTarget) == 0x000008, "Wrong alignment on BP_AJBRecording_C_ShouldAllRemoveTarget");
static_assert(sizeof(BP_AJBRecording_C_ShouldAllRemoveTarget) == 0x0000D0, "Wrong size on BP_AJBRecording_C_ShouldAllRemoveTarget");
static_assert(offsetof(BP_AJBRecording_C_ShouldAllRemoveTarget, bShouldRemove) == 0x000000, "Member 'BP_AJBRecording_C_ShouldAllRemoveTarget::bShouldRemove' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ShouldAllRemoveTarget, CallFunc_GetPlayMode_PlayMode) == 0x000001, "Member 'BP_AJBRecording_C_ShouldAllRemoveTarget::CallFunc_GetPlayMode_PlayMode' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ShouldAllRemoveTarget, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'BP_AJBRecording_C_ShouldAllRemoveTarget::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ShouldAllRemoveTarget, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBRecording_C_ShouldAllRemoveTarget::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ShouldAllRemoveTarget, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000010, "Member 'BP_AJBRecording_C_ShouldAllRemoveTarget::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ShouldAllRemoveTarget, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AJBRecording_C_ShouldAllRemoveTarget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ShouldAllRemoveTarget, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x000020, "Member 'BP_AJBRecording_C_ShouldAllRemoveTarget::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ShouldAllRemoveTarget, CallFunc_CheckCharacterBehavior_Active_bReturnValue) == 0x000040, "Member 'BP_AJBRecording_C_ShouldAllRemoveTarget::CallFunc_CheckCharacterBehavior_Active_bReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ShouldAllRemoveTarget, CallFunc_GetPlayerController_ReturnValue) == 0x000048, "Member 'BP_AJBRecording_C_ShouldAllRemoveTarget::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ShouldAllRemoveTarget, CallFunc_Not_PreBool_ReturnValue) == 0x000050, "Member 'BP_AJBRecording_C_ShouldAllRemoveTarget::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ShouldAllRemoveTarget, K2Node_DynamicCast_AsBP_AJBIn_Game_Player_Controller) == 0x000058, "Member 'BP_AJBRecording_C_ShouldAllRemoveTarget::K2Node_DynamicCast_AsBP_AJBIn_Game_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ShouldAllRemoveTarget, K2Node_DynamicCast_bSuccess1) == 0x000060, "Member 'BP_AJBRecording_C_ShouldAllRemoveTarget::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ShouldAllRemoveTarget, CallFunc_GetCurrentFlowState_FlowState) == 0x000068, "Member 'BP_AJBRecording_C_ShouldAllRemoveTarget::CallFunc_GetCurrentFlowState_FlowState' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ShouldAllRemoveTarget, CallFunc_MatchesAnyTags_ReturnValue) == 0x000070, "Member 'BP_AJBRecording_C_ShouldAllRemoveTarget::CallFunc_MatchesAnyTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ShouldAllRemoveTarget, CallFunc_GetOwner_ReturnValue1) == 0x000078, "Member 'BP_AJBRecording_C_ShouldAllRemoveTarget::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ShouldAllRemoveTarget, K2Node_DynamicCast_AsBP_AJBIn_Game_Character1) == 0x000080, "Member 'BP_AJBRecording_C_ShouldAllRemoveTarget::K2Node_DynamicCast_AsBP_AJBIn_Game_Character1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ShouldAllRemoveTarget, K2Node_DynamicCast_bSuccess2) == 0x000088, "Member 'BP_AJBRecording_C_ShouldAllRemoveTarget::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ShouldAllRemoveTarget, K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface) == 0x000090, "Member 'BP_AJBRecording_C_ShouldAllRemoveTarget::K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ShouldAllRemoveTarget, K2Node_DynamicCast_bSuccess3) == 0x0000A0, "Member 'BP_AJBRecording_C_ShouldAllRemoveTarget::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ShouldAllRemoveTarget, CallFunc_GetGameplayTags_TagContainerCopy) == 0x0000A8, "Member 'BP_AJBRecording_C_ShouldAllRemoveTarget::CallFunc_GetGameplayTags_TagContainerCopy' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ShouldAllRemoveTarget, CallFunc_CheckPassiveTagProhibition_bProhibitionTag) == 0x0000C8, "Member 'BP_AJBRecording_C_ShouldAllRemoveTarget::CallFunc_CheckPassiveTagProhibition_bProhibitionTag' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.ShouldDisplayRecordingUI
// 0x0002 (0x0002 - 0x0000)
struct BP_AJBRecording_C_ShouldDisplayRecordingUI final
{
public:
	bool                                          bShouldDisplay;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckTargetExist_bExist;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBRecording_C_ShouldDisplayRecordingUI) == 0x000001, "Wrong alignment on BP_AJBRecording_C_ShouldDisplayRecordingUI");
static_assert(sizeof(BP_AJBRecording_C_ShouldDisplayRecordingUI) == 0x000002, "Wrong size on BP_AJBRecording_C_ShouldDisplayRecordingUI");
static_assert(offsetof(BP_AJBRecording_C_ShouldDisplayRecordingUI, bShouldDisplay) == 0x000000, "Member 'BP_AJBRecording_C_ShouldDisplayRecordingUI::bShouldDisplay' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ShouldDisplayRecordingUI, CallFunc_CheckTargetExist_bExist) == 0x000001, "Member 'BP_AJBRecording_C_ShouldDisplayRecordingUI::CallFunc_CheckTargetExist_bExist' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.ShouldEnableAutoAim
// 0x0028 (0x0028 - 0x0000)
struct BP_AJBRecording_C_ShouldEnableAutoAim final
{
public:
	bool                                          bShoudEnable;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBDubbingSkill_C*                  CallFunc_GetComponentByClass_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAppearState_IsAppearState;              // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue1;                 // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBRecording_C_ShouldEnableAutoAim) == 0x000008, "Wrong alignment on BP_AJBRecording_C_ShouldEnableAutoAim");
static_assert(sizeof(BP_AJBRecording_C_ShouldEnableAutoAim) == 0x000028, "Wrong size on BP_AJBRecording_C_ShouldEnableAutoAim");
static_assert(offsetof(BP_AJBRecording_C_ShouldEnableAutoAim, bShoudEnable) == 0x000000, "Member 'BP_AJBRecording_C_ShouldEnableAutoAim::bShoudEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ShouldEnableAutoAim, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_AJBRecording_C_ShouldEnableAutoAim::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ShouldEnableAutoAim, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBRecording_C_ShouldEnableAutoAim::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ShouldEnableAutoAim, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'BP_AJBRecording_C_ShouldEnableAutoAim::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ShouldEnableAutoAim, CallFunc_IsValid_ReturnValue1) == 0x000011, "Member 'BP_AJBRecording_C_ShouldEnableAutoAim::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ShouldEnableAutoAim, CallFunc_GetComponentByClass_ReturnValue) == 0x000018, "Member 'BP_AJBRecording_C_ShouldEnableAutoAim::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ShouldEnableAutoAim, CallFunc_IsValid_ReturnValue2) == 0x000020, "Member 'BP_AJBRecording_C_ShouldEnableAutoAim::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ShouldEnableAutoAim, CallFunc_IsAppearState_IsAppearState) == 0x000021, "Member 'BP_AJBRecording_C_ShouldEnableAutoAim::CallFunc_IsAppearState_IsAppearState' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ShouldEnableAutoAim, CallFunc_Not_PreBool_ReturnValue1) == 0x000022, "Member 'BP_AJBRecording_C_ShouldEnableAutoAim::CallFunc_Not_PreBool_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ShouldEnableAutoAim, CallFunc_BooleanAND_ReturnValue) == 0x000023, "Member 'BP_AJBRecording_C_ShouldEnableAutoAim::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_ShouldEnableAutoAim, CallFunc_BooleanAND_ReturnValue1) == 0x000024, "Member 'BP_AJBRecording_C_ShouldEnableAutoAim::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.UpdateReticlePosition
// 0x00B0 (0x00B0 - 0x0000)
struct BP_AJBRecording_C_UpdateReticlePosition final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBInGameHUD_BP_bSuccess;              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameHUD_C*                     CallFunc_GetAJBInGameHUD_BP_In_Game_HUD;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetViewTargetActor_ViewTargetActor;       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryGetPropertyOwnerCharacterFromActor_bSucceed; // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_TryGetPropertyOwnerCharacterFromActor_OutActor; // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character1;     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAJBInGameHUD_BP_bSuccess1;             // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameHUD_C*                     CallFunc_GetAJBInGameHUD_BP_In_Game_HUD1;          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBInGameCharacterBase*                CallFunc_GetMostNearestTarget_TargetCharacter;     // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetMostNearestTarget_TargetLocation;      // 0x0078(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldEnableAutoAim_bShoudEnable;         // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacterBase*                K2Node_DynamicCast_AsAJBIn_Game_Character_Base;    // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Vector2DInterpTo_ReturnValue;             // 0x00A4(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue;     // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBRecording_C_UpdateReticlePosition) == 0x000008, "Wrong alignment on BP_AJBRecording_C_UpdateReticlePosition");
static_assert(sizeof(BP_AJBRecording_C_UpdateReticlePosition) == 0x0000B0, "Wrong size on BP_AJBRecording_C_UpdateReticlePosition");
static_assert(offsetof(BP_AJBRecording_C_UpdateReticlePosition, DeltaSeconds) == 0x000000, "Member 'BP_AJBRecording_C_UpdateReticlePosition::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateReticlePosition, CallFunc_GetAJBInGameHUD_BP_bSuccess) == 0x000004, "Member 'BP_AJBRecording_C_UpdateReticlePosition::CallFunc_GetAJBInGameHUD_BP_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateReticlePosition, CallFunc_GetAJBInGameHUD_BP_In_Game_HUD) == 0x000008, "Member 'BP_AJBRecording_C_UpdateReticlePosition::CallFunc_GetAJBInGameHUD_BP_In_Game_HUD' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateReticlePosition, CallFunc_IsDedicatedServer_ReturnValue) == 0x000010, "Member 'BP_AJBRecording_C_UpdateReticlePosition::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateReticlePosition, CallFunc_GetViewTargetActor_ViewTargetActor) == 0x000018, "Member 'BP_AJBRecording_C_UpdateReticlePosition::CallFunc_GetViewTargetActor_ViewTargetActor' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateReticlePosition, CallFunc_TryGetPropertyOwnerCharacterFromActor_bSucceed) == 0x000020, "Member 'BP_AJBRecording_C_UpdateReticlePosition::CallFunc_TryGetPropertyOwnerCharacterFromActor_bSucceed' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateReticlePosition, CallFunc_TryGetPropertyOwnerCharacterFromActor_OutActor) == 0x000028, "Member 'BP_AJBRecording_C_UpdateReticlePosition::CallFunc_TryGetPropertyOwnerCharacterFromActor_OutActor' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateReticlePosition, CallFunc_GetOwner_ReturnValue) == 0x000030, "Member 'BP_AJBRecording_C_UpdateReticlePosition::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateReticlePosition, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000038, "Member 'BP_AJBRecording_C_UpdateReticlePosition::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateReticlePosition, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_AJBRecording_C_UpdateReticlePosition::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateReticlePosition, K2Node_DynamicCast_AsBP_AJBIn_Game_Character1) == 0x000048, "Member 'BP_AJBRecording_C_UpdateReticlePosition::K2Node_DynamicCast_AsBP_AJBIn_Game_Character1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateReticlePosition, K2Node_DynamicCast_bSuccess1) == 0x000050, "Member 'BP_AJBRecording_C_UpdateReticlePosition::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateReticlePosition, CallFunc_GetObjectClass_ReturnValue) == 0x000058, "Member 'BP_AJBRecording_C_UpdateReticlePosition::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateReticlePosition, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000060, "Member 'BP_AJBRecording_C_UpdateReticlePosition::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateReticlePosition, CallFunc_ClassIsChildOf_ReturnValue) == 0x000061, "Member 'BP_AJBRecording_C_UpdateReticlePosition::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateReticlePosition, CallFunc_Not_PreBool_ReturnValue) == 0x000062, "Member 'BP_AJBRecording_C_UpdateReticlePosition::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateReticlePosition, CallFunc_GetAJBInGameHUD_BP_bSuccess1) == 0x000063, "Member 'BP_AJBRecording_C_UpdateReticlePosition::CallFunc_GetAJBInGameHUD_BP_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateReticlePosition, CallFunc_GetAJBInGameHUD_BP_In_Game_HUD1) == 0x000068, "Member 'BP_AJBRecording_C_UpdateReticlePosition::CallFunc_GetAJBInGameHUD_BP_In_Game_HUD1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateReticlePosition, CallFunc_GetMostNearestTarget_TargetCharacter) == 0x000070, "Member 'BP_AJBRecording_C_UpdateReticlePosition::CallFunc_GetMostNearestTarget_TargetCharacter' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateReticlePosition, CallFunc_GetMostNearestTarget_TargetLocation) == 0x000078, "Member 'BP_AJBRecording_C_UpdateReticlePosition::CallFunc_GetMostNearestTarget_TargetLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateReticlePosition, CallFunc_ShouldEnableAutoAim_bShoudEnable) == 0x000084, "Member 'BP_AJBRecording_C_UpdateReticlePosition::CallFunc_ShouldEnableAutoAim_bShoudEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateReticlePosition, CallFunc_GetOwner_ReturnValue1) == 0x000088, "Member 'BP_AJBRecording_C_UpdateReticlePosition::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateReticlePosition, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000090, "Member 'BP_AJBRecording_C_UpdateReticlePosition::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateReticlePosition, K2Node_DynamicCast_AsAJBIn_Game_Character_Base) == 0x000098, "Member 'BP_AJBRecording_C_UpdateReticlePosition::K2Node_DynamicCast_AsAJBIn_Game_Character_Base' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateReticlePosition, K2Node_DynamicCast_bSuccess2) == 0x0000A0, "Member 'BP_AJBRecording_C_UpdateReticlePosition::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateReticlePosition, CallFunc_Vector2DInterpTo_ReturnValue) == 0x0000A4, "Member 'BP_AJBRecording_C_UpdateReticlePosition::CallFunc_Vector2DInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateReticlePosition, CallFunc_HasLocalSharedController_ReturnValue) == 0x0000AC, "Member 'BP_AJBRecording_C_UpdateReticlePosition::CallFunc_HasLocalSharedController_ReturnValue' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.UpdateTargetInfo
// 0x0050 (0x0050 - 0x0000)
struct BP_AJBRecording_C_UpdateTargetInfo final
{
public:
	TSoftObjectPtr<class AAJBInGameCharacterBase> CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue; // 0x0000(0x0028)(HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_ProjectWorldToScreen_ScreenPosition;      // 0x0038(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ProjectWorldToScreen_ReturnValue;         // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_SoftObjectReference_ReturnValue; // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_CalcPosition_outPosition;                 // 0x0044(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBRecording_C_UpdateTargetInfo) == 0x000008, "Wrong alignment on BP_AJBRecording_C_UpdateTargetInfo");
static_assert(sizeof(BP_AJBRecording_C_UpdateTargetInfo) == 0x000050, "Wrong size on BP_AJBRecording_C_UpdateTargetInfo");
static_assert(offsetof(BP_AJBRecording_C_UpdateTargetInfo, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue) == 0x000000, "Member 'BP_AJBRecording_C_UpdateTargetInfo::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateTargetInfo, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_AJBRecording_C_UpdateTargetInfo::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateTargetInfo, CallFunc_GetPlayerController_ReturnValue) == 0x000030, "Member 'BP_AJBRecording_C_UpdateTargetInfo::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateTargetInfo, CallFunc_ProjectWorldToScreen_ScreenPosition) == 0x000038, "Member 'BP_AJBRecording_C_UpdateTargetInfo::CallFunc_ProjectWorldToScreen_ScreenPosition' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateTargetInfo, CallFunc_ProjectWorldToScreen_ReturnValue) == 0x000040, "Member 'BP_AJBRecording_C_UpdateTargetInfo::CallFunc_ProjectWorldToScreen_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateTargetInfo, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x000041, "Member 'BP_AJBRecording_C_UpdateTargetInfo::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateTargetInfo, CallFunc_EqualEqual_SoftObjectReference_ReturnValue) == 0x000042, "Member 'BP_AJBRecording_C_UpdateTargetInfo::CallFunc_EqualEqual_SoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateTargetInfo, CallFunc_Not_PreBool_ReturnValue) == 0x000043, "Member 'BP_AJBRecording_C_UpdateTargetInfo::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_UpdateTargetInfo, CallFunc_CalcPosition_outPosition) == 0x000044, "Member 'BP_AJBRecording_C_UpdateTargetInfo::CallFunc_CalcPosition_outPosition' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.GetTargetLocations
// 0x0038 (0x0038 - 0x0000)
struct BP_AJBRecording_C_GetTargetLocations final
{
public:
	class AAJBInGameCharacterBase*                TargetCharacter_0;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ActorLocation;                                     // 0x0008(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HeadLocation;                                      // 0x0014(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0020(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x002C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBRecording_C_GetTargetLocations) == 0x000008, "Wrong alignment on BP_AJBRecording_C_GetTargetLocations");
static_assert(sizeof(BP_AJBRecording_C_GetTargetLocations) == 0x000038, "Wrong size on BP_AJBRecording_C_GetTargetLocations");
static_assert(offsetof(BP_AJBRecording_C_GetTargetLocations, TargetCharacter_0) == 0x000000, "Member 'BP_AJBRecording_C_GetTargetLocations::TargetCharacter_0' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_GetTargetLocations, ActorLocation) == 0x000008, "Member 'BP_AJBRecording_C_GetTargetLocations::ActorLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_GetTargetLocations, HeadLocation) == 0x000014, "Member 'BP_AJBRecording_C_GetTargetLocations::HeadLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_GetTargetLocations, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000020, "Member 'BP_AJBRecording_C_GetTargetLocations::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBRecording_C_GetTargetLocations, CallFunc_GetSocketLocation_ReturnValue) == 0x00002C, "Member 'BP_AJBRecording_C_GetTargetLocations::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");

// Function BP_AJBRecording.BP_AJBRecording_C.InitAutoHitVariables
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBRecording_C_InitAutoHitVariables final
{
public:
	struct FVector2D                              CallFunc_CalcPosition_outPosition;                 // 0x0000(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBRecording_C_InitAutoHitVariables) == 0x000004, "Wrong alignment on BP_AJBRecording_C_InitAutoHitVariables");
static_assert(sizeof(BP_AJBRecording_C_InitAutoHitVariables) == 0x000008, "Wrong size on BP_AJBRecording_C_InitAutoHitVariables");
static_assert(offsetof(BP_AJBRecording_C_InitAutoHitVariables, CallFunc_CalcPosition_outPosition) == 0x000000, "Member 'BP_AJBRecording_C_InitAutoHitVariables::CallFunc_CalcPosition_outPosition' has a wrong offset!");

}

