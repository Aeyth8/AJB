#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_AJBInGameStand_KQS

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_AJBInGameStand_KQS.ABP_AJBInGameStand_KQS_C
// 0x0438 (0x0790 - 0x0358)
class UABP_AJBInGameStand_KQS_C final : public UAnimInstance
{
public:
	uint8                                         Pad_358[0x8];                                      // 0x0358(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0360(0x0008)(Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root_4EA969AC47FD7A113229C8B6A910D382; // 0x0368(0x0048)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4F3460D942A211C8870B959B7B7A154F; // 0x03B0(0x0048)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_97E0FDF646672A7BEACD8F83DE53A328; // 0x03F8(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_48F207B04A2E8F5851ACBA91FC02F0B8; // 0x0440(0x00B0)()
	struct FAnimNode_Root                         AnimGraphNode_StateResult_FC6FD8A34ACD638AEB216E88CF96ECE7; // 0x04F0(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_7EE771324923E94F24557C9CC3570897; // 0x0538(0x00B0)()
	struct FAnimNode_Root                         AnimGraphNode_StateResult_0EF64AAC4EC813F3AAAF2390F29D55FC; // 0x05E8(0x0048)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_9F2E38EA4158BFD918D68D84369462FA; // 0x0630(0x00E0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_8E2580264C5DEE1FE329C3B58315E26B; // 0x0710(0x0070)()
	float                                         OwnerMovementRate;                                 // 0x0780(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsOwnerMove;                                      // 0x0784(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_785[0x3];                                      // 0x0785(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveRate;                                          // 0x0788(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ABP_AJBInGameStand_KQS(int32 EntryPoint);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_AJBInGameStand_KQS_AnimGraphNode_TransitionResult_97E0FDF646672A7BEACD8F83DE53A328();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_AJBInGameStand_KQS_AnimGraphNode_TransitionResult_4F3460D942A211C8870B959B7B7A154F();
	void CanOwnerMove(bool* bCanMove);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_AJBInGameStand_KQS_C">();
	}
	static class UABP_AJBInGameStand_KQS_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_AJBInGameStand_KQS_C>();
	}
};
static_assert(alignof(UABP_AJBInGameStand_KQS_C) == 0x000008, "Wrong alignment on UABP_AJBInGameStand_KQS_C");
static_assert(sizeof(UABP_AJBInGameStand_KQS_C) == 0x000790, "Wrong size on UABP_AJBInGameStand_KQS_C");
static_assert(offsetof(UABP_AJBInGameStand_KQS_C, UberGraphFrame) == 0x000360, "Member 'UABP_AJBInGameStand_KQS_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_AJBInGameStand_KQS_C, AnimGraphNode_Root_4EA969AC47FD7A113229C8B6A910D382) == 0x000368, "Member 'UABP_AJBInGameStand_KQS_C::AnimGraphNode_Root_4EA969AC47FD7A113229C8B6A910D382' has a wrong offset!");
static_assert(offsetof(UABP_AJBInGameStand_KQS_C, AnimGraphNode_TransitionResult_4F3460D942A211C8870B959B7B7A154F) == 0x0003B0, "Member 'UABP_AJBInGameStand_KQS_C::AnimGraphNode_TransitionResult_4F3460D942A211C8870B959B7B7A154F' has a wrong offset!");
static_assert(offsetof(UABP_AJBInGameStand_KQS_C, AnimGraphNode_TransitionResult_97E0FDF646672A7BEACD8F83DE53A328) == 0x0003F8, "Member 'UABP_AJBInGameStand_KQS_C::AnimGraphNode_TransitionResult_97E0FDF646672A7BEACD8F83DE53A328' has a wrong offset!");
static_assert(offsetof(UABP_AJBInGameStand_KQS_C, AnimGraphNode_SequencePlayer_48F207B04A2E8F5851ACBA91FC02F0B8) == 0x000440, "Member 'UABP_AJBInGameStand_KQS_C::AnimGraphNode_SequencePlayer_48F207B04A2E8F5851ACBA91FC02F0B8' has a wrong offset!");
static_assert(offsetof(UABP_AJBInGameStand_KQS_C, AnimGraphNode_StateResult_FC6FD8A34ACD638AEB216E88CF96ECE7) == 0x0004F0, "Member 'UABP_AJBInGameStand_KQS_C::AnimGraphNode_StateResult_FC6FD8A34ACD638AEB216E88CF96ECE7' has a wrong offset!");
static_assert(offsetof(UABP_AJBInGameStand_KQS_C, AnimGraphNode_SequencePlayer_7EE771324923E94F24557C9CC3570897) == 0x000538, "Member 'UABP_AJBInGameStand_KQS_C::AnimGraphNode_SequencePlayer_7EE771324923E94F24557C9CC3570897' has a wrong offset!");
static_assert(offsetof(UABP_AJBInGameStand_KQS_C, AnimGraphNode_StateResult_0EF64AAC4EC813F3AAAF2390F29D55FC) == 0x0005E8, "Member 'UABP_AJBInGameStand_KQS_C::AnimGraphNode_StateResult_0EF64AAC4EC813F3AAAF2390F29D55FC' has a wrong offset!");
static_assert(offsetof(UABP_AJBInGameStand_KQS_C, AnimGraphNode_StateMachine_9F2E38EA4158BFD918D68D84369462FA) == 0x000630, "Member 'UABP_AJBInGameStand_KQS_C::AnimGraphNode_StateMachine_9F2E38EA4158BFD918D68D84369462FA' has a wrong offset!");
static_assert(offsetof(UABP_AJBInGameStand_KQS_C, AnimGraphNode_Slot_8E2580264C5DEE1FE329C3B58315E26B) == 0x000710, "Member 'UABP_AJBInGameStand_KQS_C::AnimGraphNode_Slot_8E2580264C5DEE1FE329C3B58315E26B' has a wrong offset!");
static_assert(offsetof(UABP_AJBInGameStand_KQS_C, OwnerMovementRate) == 0x000780, "Member 'UABP_AJBInGameStand_KQS_C::OwnerMovementRate' has a wrong offset!");
static_assert(offsetof(UABP_AJBInGameStand_KQS_C, bIsOwnerMove) == 0x000784, "Member 'UABP_AJBInGameStand_KQS_C::bIsOwnerMove' has a wrong offset!");
static_assert(offsetof(UABP_AJBInGameStand_KQS_C, MoveRate) == 0x000788, "Member 'UABP_AJBInGameStand_KQS_C::MoveRate' has a wrong offset!");

}

