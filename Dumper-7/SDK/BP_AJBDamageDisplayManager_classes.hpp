#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBDamageDisplayManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "E_DamageDisplayPosition_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBDamageDisplayManager.BP_AJBDamageDisplayManager_C
// 0x0040 (0x0368 - 0x0328)
class ABP_AJBDamageDisplayManager_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStealth;                                         // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_339[0x3];                                      // 0x0339(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeightOffset;                                      // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  ForceDisplayingTargetConditions;                   // 0x0340(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UDataTable*                             DT_DamageDisplayOverrideSettings;                  // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBDamageDisplayManager(int32 EntryPoint);
	void RequestDamageDisplay(const struct FAJBDamageDisplayParams& Params_0);
	void UserConstructionScript();
	void SpawnDamageDisplay(const struct FAJBDamageDisplayParams& Params_0);
	void MakeDisplayLocation(const struct FAJBDamageDisplayParams& Params_0, struct FVector* Location);
	void IsDamageDisplayEnabled(bool bException, bool* IsEnabled);
	void ShouldDisplayZeroDamage(class UObject* Target, bool* ShouldDisplay);
	void IsDamageDisplayTarget(class AActor* DamagedActor, class AActor* DamageCauser, int32 Damage, bool* IsTarget);
	void FindOverrideSetting(const struct FGameplayTag& DamageType, bool* Success, struct FST_DamageDisplayOverrideSetting* OverrideSetting);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBDamageDisplayManager_C">();
	}
	static class ABP_AJBDamageDisplayManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBDamageDisplayManager_C>();
	}
};
static_assert(alignof(ABP_AJBDamageDisplayManager_C) == 0x000008, "Wrong alignment on ABP_AJBDamageDisplayManager_C");
static_assert(sizeof(ABP_AJBDamageDisplayManager_C) == 0x000368, "Wrong size on ABP_AJBDamageDisplayManager_C");
static_assert(offsetof(ABP_AJBDamageDisplayManager_C, UberGraphFrame) == 0x000328, "Member 'ABP_AJBDamageDisplayManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageDisplayManager_C, DefaultSceneRoot) == 0x000330, "Member 'ABP_AJBDamageDisplayManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageDisplayManager_C, IsStealth) == 0x000338, "Member 'ABP_AJBDamageDisplayManager_C::IsStealth' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageDisplayManager_C, HeightOffset) == 0x00033C, "Member 'ABP_AJBDamageDisplayManager_C::HeightOffset' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageDisplayManager_C, ForceDisplayingTargetConditions) == 0x000340, "Member 'ABP_AJBDamageDisplayManager_C::ForceDisplayingTargetConditions' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageDisplayManager_C, DT_DamageDisplayOverrideSettings) == 0x000360, "Member 'ABP_AJBDamageDisplayManager_C::DT_DamageDisplayOverrideSettings' has a wrong offset!");

}

