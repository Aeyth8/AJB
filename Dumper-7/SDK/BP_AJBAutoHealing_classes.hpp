#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBAutoHealing

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BP_AJBSupportSkillBase_classes.hpp"
#include "AJB_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBAutoHealing.BP_AJBAutoHealing_C
// 0x0050 (0x01A8 - 0x0158)
class UBP_AJBAutoHealing_C : public UBP_AJBSupportSkillBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBAutoHealing_C;                // 0x0158(0x0008)(Transient, DuplicateTransient)
	bool                                          bDebugPrintActiveHeal;                             // 0x0160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDebugPrintStopHeal;                               // 0x0161(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_162[0x2];                                      // 0x0162(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HealingInterval;                                   // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HealingStopTime_s_;                                // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HealingMaxPercentage___;                           // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHealingIsContinuing_Server_;                      // 0x0170(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameParticleEffect_C*          HealingParticle;                                   // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           HealingParticleTag;                                // 0x0180(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         HealingValue;                                      // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CompleteHealVoiceTag;                              // 0x0190(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           StartHealVoiceTag;                                 // 0x0198(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SETag;                                             // 0x01A0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBAutoHealing(int32 EntryPoint);
	void MC_ChangeState(EAutoHealingState NewState);
	void ChangeState_Server(EAutoHealingState NewState);
	void OnReceiveDamage(int32 Damage, const struct FGameplayTag& DamageType, class AActor* DamageCauser, bool bRemainHP, bool bDamageIsCut, bool bNotUseCollision, bool bSelfDamage);
	void ROC_Heal(int32 EffectiveValue, bool bIsFullHP, bool bHealingJustStarted);
	void MC_Heal();
	void TickStateStopping();
	void TickStateContinuation();
	void StateTick_Server();
	void DebugPrint();
	void CheckNecessaryHealing(bool* bNecessary);
	void CalcHealingMaxHP(int32* MaxHP);
	void ReceiveTick(float DeltaSeconds);
	void TryDestroyParticle();
	void TrySpawnParticle();
	void PossibleHealing(bool* bPossibleHealing);
	void OnActionActivate(bool bTriggeredByStand);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBAutoHealing_C">();
	}
	static class UBP_AJBAutoHealing_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBAutoHealing_C>();
	}
};
static_assert(alignof(UBP_AJBAutoHealing_C) == 0x000008, "Wrong alignment on UBP_AJBAutoHealing_C");
static_assert(sizeof(UBP_AJBAutoHealing_C) == 0x0001A8, "Wrong size on UBP_AJBAutoHealing_C");
static_assert(offsetof(UBP_AJBAutoHealing_C, UberGraphFrame_BP_AJBAutoHealing_C) == 0x000158, "Member 'UBP_AJBAutoHealing_C::UberGraphFrame_BP_AJBAutoHealing_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBAutoHealing_C, bDebugPrintActiveHeal) == 0x000160, "Member 'UBP_AJBAutoHealing_C::bDebugPrintActiveHeal' has a wrong offset!");
static_assert(offsetof(UBP_AJBAutoHealing_C, bDebugPrintStopHeal) == 0x000161, "Member 'UBP_AJBAutoHealing_C::bDebugPrintStopHeal' has a wrong offset!");
static_assert(offsetof(UBP_AJBAutoHealing_C, HealingInterval) == 0x000164, "Member 'UBP_AJBAutoHealing_C::HealingInterval' has a wrong offset!");
static_assert(offsetof(UBP_AJBAutoHealing_C, HealingStopTime_s_) == 0x000168, "Member 'UBP_AJBAutoHealing_C::HealingStopTime_s_' has a wrong offset!");
static_assert(offsetof(UBP_AJBAutoHealing_C, HealingMaxPercentage___) == 0x00016C, "Member 'UBP_AJBAutoHealing_C::HealingMaxPercentage___' has a wrong offset!");
static_assert(offsetof(UBP_AJBAutoHealing_C, bHealingIsContinuing_Server_) == 0x000170, "Member 'UBP_AJBAutoHealing_C::bHealingIsContinuing_Server_' has a wrong offset!");
static_assert(offsetof(UBP_AJBAutoHealing_C, HealingParticle) == 0x000178, "Member 'UBP_AJBAutoHealing_C::HealingParticle' has a wrong offset!");
static_assert(offsetof(UBP_AJBAutoHealing_C, HealingParticleTag) == 0x000180, "Member 'UBP_AJBAutoHealing_C::HealingParticleTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBAutoHealing_C, HealingValue) == 0x000188, "Member 'UBP_AJBAutoHealing_C::HealingValue' has a wrong offset!");
static_assert(offsetof(UBP_AJBAutoHealing_C, CompleteHealVoiceTag) == 0x000190, "Member 'UBP_AJBAutoHealing_C::CompleteHealVoiceTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBAutoHealing_C, StartHealVoiceTag) == 0x000198, "Member 'UBP_AJBAutoHealing_C::StartHealVoiceTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBAutoHealing_C, SETag) == 0x0001A0, "Member 'UBP_AJBAutoHealing_C::SETag' has a wrong offset!");

}

