#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBBombing

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BP_AJBPassiveSkillBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBBombing.BP_AJBBombing_C
// 0x0040 (0x0250 - 0x0210)
class UBP_AJBBombing_C final : public UBP_AJBPassiveSkillBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBBombing_C;                    // 0x0210(0x0008)(Transient, DuplicateTransient)
	struct FGameplayTag                           SkillTag;                                          // 0x0218(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          ImpulseReadyParticle;                              // 0x0220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PrepareParticleTime;                               // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StandbyParticleTime;                               // 0x022C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReadyParticleTime;                                 // 0x0230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRequestedPrepareParticle;                         // 0x0234(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bRequestedStandbyParticle;                         // 0x0235(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bRequestedReadyParticle;                           // 0x0236(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bLaunchFromSeparateStand;                          // 0x0237(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTag                           PlacementSETag;                                    // 0x0238(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           PlacementGionTag;                                  // 0x0240(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          PlayerBombParticle;                                // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBBombing(int32 EntryPoint);
	void MC_SetShouldUpdateLectActiveTime(bool bShouldUpdateLeftActiveTime);
	void OnReceiveDamage_Server(int32 Damage, const struct FGameplayTag& DamageType, class AActor* DamageCauser, bool bRemainHP, bool bDamageIsCut, bool bNotUseCollision, bool bSelfDamage);
	void OnMC_ActivePassive(class UObject* Causer, const struct FGameplayTag& CauserType, int32 SerialNumber);
	void OnActionInactivate(bool bTriggeredByStand);
	void OnActionActivate(bool bTriggeredByStand);
	void ChangeParticleVisibility(bool bNewVisibility);
	void ReceiveTick(float DeltaSeconds);
	void NotifyChangeFXVisibility(const struct FST_FXVisibilityInfo& PrevFXVisibility, const struct FST_FXVisibilityInfo& FXVisibility);
	void OnTimeUp();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBBombing_C">();
	}
	static class UBP_AJBBombing_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBBombing_C>();
	}
};
static_assert(alignof(UBP_AJBBombing_C) == 0x000008, "Wrong alignment on UBP_AJBBombing_C");
static_assert(sizeof(UBP_AJBBombing_C) == 0x000250, "Wrong size on UBP_AJBBombing_C");
static_assert(offsetof(UBP_AJBBombing_C, UberGraphFrame_BP_AJBBombing_C) == 0x000210, "Member 'UBP_AJBBombing_C::UberGraphFrame_BP_AJBBombing_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBBombing_C, SkillTag) == 0x000218, "Member 'UBP_AJBBombing_C::SkillTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBBombing_C, ImpulseReadyParticle) == 0x000220, "Member 'UBP_AJBBombing_C::ImpulseReadyParticle' has a wrong offset!");
static_assert(offsetof(UBP_AJBBombing_C, PrepareParticleTime) == 0x000228, "Member 'UBP_AJBBombing_C::PrepareParticleTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBBombing_C, StandbyParticleTime) == 0x00022C, "Member 'UBP_AJBBombing_C::StandbyParticleTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBBombing_C, ReadyParticleTime) == 0x000230, "Member 'UBP_AJBBombing_C::ReadyParticleTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBBombing_C, bRequestedPrepareParticle) == 0x000234, "Member 'UBP_AJBBombing_C::bRequestedPrepareParticle' has a wrong offset!");
static_assert(offsetof(UBP_AJBBombing_C, bRequestedStandbyParticle) == 0x000235, "Member 'UBP_AJBBombing_C::bRequestedStandbyParticle' has a wrong offset!");
static_assert(offsetof(UBP_AJBBombing_C, bRequestedReadyParticle) == 0x000236, "Member 'UBP_AJBBombing_C::bRequestedReadyParticle' has a wrong offset!");
static_assert(offsetof(UBP_AJBBombing_C, bLaunchFromSeparateStand) == 0x000237, "Member 'UBP_AJBBombing_C::bLaunchFromSeparateStand' has a wrong offset!");
static_assert(offsetof(UBP_AJBBombing_C, PlacementSETag) == 0x000238, "Member 'UBP_AJBBombing_C::PlacementSETag' has a wrong offset!");
static_assert(offsetof(UBP_AJBBombing_C, PlacementGionTag) == 0x000240, "Member 'UBP_AJBBombing_C::PlacementGionTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBBombing_C, PlayerBombParticle) == 0x000248, "Member 'UBP_AJBBombing_C::PlayerBombParticle' has a wrong offset!");

}

