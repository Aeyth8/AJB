#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_ModeSelect_VolumeChangeButton

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AJB_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_ModeSelect_VolumeChangeButton.WB_ModeSelect_VolumeChangeButton_C
// 0x0048 (0x02E8 - 0x02A0)
class UWB_ModeSelect_VolumeChangeButton_C final : public UAJBButtonWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(Transient, DuplicateTransient)
	class UWidgetAnimation*                       Anim_AppearVolumeBar;                              // 0x02A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBButton*                             AJBButton_Headphone;                               // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ExpBar;                                            // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USlider*                                Slider_Volume;                                     // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DMI_Bar;                                           // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCloseedHeadphoneSlider;                           // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D1[0x7];                                      // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           HeadphoneSliderHandle;                             // 0x02D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          bReentrantSliderVolume;                            // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_WB_ModeSelect_VolumeChangeButton(int32 EntryPoint);
	void BndEvt__AJBButton_Headphone_K2Node_ComponentBoundEvent_8_OnButtonClickedEvent__DelegateSignature();
	void Construct();
	void ResetTimerForUntouchToggle();
	void BndEvt__Slider_Volume_K2Node_ComponentBoundEvent_3_OnMouseCaptureEndEvent__DelegateSignature();
	void BndEvt__Slider_Volume_K2Node_ComponentBoundEvent_2_OnMouseCaptureBeginEvent__DelegateSignature();
	void BndEvt__Slider_Volume_K2Node_ComponentBoundEvent_1_OnFloatValueChangedEvent__DelegateSignature(float Value);
	void ToggleHeadphoneSlider();
	class UAJBButton* GetButton();
	void SetCurrentValueRate(float Value);

	float GetCurrentVolumeRate() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_ModeSelect_VolumeChangeButton_C">();
	}
	static class UWB_ModeSelect_VolumeChangeButton_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_ModeSelect_VolumeChangeButton_C>();
	}
};
static_assert(alignof(UWB_ModeSelect_VolumeChangeButton_C) == 0x000008, "Wrong alignment on UWB_ModeSelect_VolumeChangeButton_C");
static_assert(sizeof(UWB_ModeSelect_VolumeChangeButton_C) == 0x0002E8, "Wrong size on UWB_ModeSelect_VolumeChangeButton_C");
static_assert(offsetof(UWB_ModeSelect_VolumeChangeButton_C, UberGraphFrame) == 0x0002A0, "Member 'UWB_ModeSelect_VolumeChangeButton_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_ModeSelect_VolumeChangeButton_C, Anim_AppearVolumeBar) == 0x0002A8, "Member 'UWB_ModeSelect_VolumeChangeButton_C::Anim_AppearVolumeBar' has a wrong offset!");
static_assert(offsetof(UWB_ModeSelect_VolumeChangeButton_C, AJBButton_Headphone) == 0x0002B0, "Member 'UWB_ModeSelect_VolumeChangeButton_C::AJBButton_Headphone' has a wrong offset!");
static_assert(offsetof(UWB_ModeSelect_VolumeChangeButton_C, ExpBar) == 0x0002B8, "Member 'UWB_ModeSelect_VolumeChangeButton_C::ExpBar' has a wrong offset!");
static_assert(offsetof(UWB_ModeSelect_VolumeChangeButton_C, Slider_Volume) == 0x0002C0, "Member 'UWB_ModeSelect_VolumeChangeButton_C::Slider_Volume' has a wrong offset!");
static_assert(offsetof(UWB_ModeSelect_VolumeChangeButton_C, DMI_Bar) == 0x0002C8, "Member 'UWB_ModeSelect_VolumeChangeButton_C::DMI_Bar' has a wrong offset!");
static_assert(offsetof(UWB_ModeSelect_VolumeChangeButton_C, bCloseedHeadphoneSlider) == 0x0002D0, "Member 'UWB_ModeSelect_VolumeChangeButton_C::bCloseedHeadphoneSlider' has a wrong offset!");
static_assert(offsetof(UWB_ModeSelect_VolumeChangeButton_C, HeadphoneSliderHandle) == 0x0002D8, "Member 'UWB_ModeSelect_VolumeChangeButton_C::HeadphoneSliderHandle' has a wrong offset!");
static_assert(offsetof(UWB_ModeSelect_VolumeChangeButton_C, bReentrantSliderVolume) == 0x0002E0, "Member 'UWB_ModeSelect_VolumeChangeButton_C::bReentrantSliderVolume' has a wrong offset!");

}

