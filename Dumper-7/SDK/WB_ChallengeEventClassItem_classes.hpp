#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_ChallengeEventClassItem

#include "Basic.hpp"

#include "AJB_structs.hpp"
#include "AJB_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_ChallengeEventClassItem.WB_ChallengeEventClassItem_C
// 0x0238 (0x0480 - 0x0248)
class UWB_ChallengeEventClassItem_C final : public UAJBUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0248(0x0008)(Transient, DuplicateTransient)
	class UWidgetAnimation*                       ClassCompleted;                                    // 0x0250(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              AJBImage_6;                                        // 0x0258(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              AJBImage_8;                                        // 0x0260(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              AJBImage_ClassNum_BG_Complete;                     // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              AJBImage_ClassNum_BG_Incomplete;                   // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          AJBTextBlock_CharName;                             // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          AJBTextBlock_IconText;                             // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          AJBTextBlock_IconType;                             // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              BottomBelt_Limited;                                // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              BottomBelt_Preceding;                              // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              Effect_FrameFlash;                                 // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              Effect_Glow;                                       // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              Effect_Ring;                                       // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              Effect_Splash;                                     // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ExpBar;                                            // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           ExpProgressBar;                                    // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              ItemInfo_BG;                                       // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              ItemInfo_GrayOut;                                  // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              RewardImage;                                       // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Root_ItemInfo;                                     // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Root_ItemInfo_GrayOut;                             // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          TextBlockClassNumber_Complete;                     // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          TextBlockClassNumber_Incomplete;                   // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_PlayerIcon_C*                       WB_PlayerIcon;                                     // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        WidgetSwitcher_ClassNum;                           // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        WidgetSwitcher_RewardStyle;                        // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FChallengeEventProgressContext         ProgressContext;                                   // 0x0320(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FChallengeEventClassContext            ClassContext;                                      // 0x0378(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         ProgressBarSpeed;                                  // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AC[0x4];                                      // 0x03AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnFinished;                                        // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bIsCountingUpExp;                                  // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C1[0x3];                                      // 0x03C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ProgressValue;                                     // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsExpFulfilled;                                   // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C9[0x7];                                      // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnExpUpFinished;                                   // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMap<ERewardItemType, float>                  RewardImageScales;                                 // 0x03E0(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TMap<ERewardItemType, float>                  RewardImageYOffsets;                               // 0x0430(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)

public:
	void ExecuteUbergraph_WB_ChallengeEventClassItem(int32 EntryPoint);
	void PlayAnimTurnOnClassNumber();
	void TurnOnClassNumberImmediately();
	void TickCountUpExp();
	void Start();
	void Setup(const struct FChallengeEventProgressContext& ProgressContext_0, int32 ClassIndex);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void PreConstruct(bool IsDesignTime);
	void OnClassCompletedAnimationFinished();
	void OnLoaded_4C73DBF2420D63F10BEEB78C2007124B(class UObject* Loaded);
	void OnLoaded_4C73DBF2420D63F10BEEB78C03B5DD41(class UObject* Loaded);
	float GetProgressByExp(int32 EventExp);
	bool IsClassExpFulfilledAfterProgress();
	bool IfNeedsToProgress();
	struct FChallengeEventClassContext GetClassContext();
	bool IsProgressStartingClass();
	bool IsClassFulfilledBeforeProgress();
	int32 GetExpDiffFromProgress(float Progress);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_ChallengeEventClassItem_C">();
	}
	static class UWB_ChallengeEventClassItem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_ChallengeEventClassItem_C>();
	}
};
static_assert(alignof(UWB_ChallengeEventClassItem_C) == 0x000008, "Wrong alignment on UWB_ChallengeEventClassItem_C");
static_assert(sizeof(UWB_ChallengeEventClassItem_C) == 0x000480, "Wrong size on UWB_ChallengeEventClassItem_C");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, UberGraphFrame) == 0x000248, "Member 'UWB_ChallengeEventClassItem_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, ClassCompleted) == 0x000250, "Member 'UWB_ChallengeEventClassItem_C::ClassCompleted' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, AJBImage_6) == 0x000258, "Member 'UWB_ChallengeEventClassItem_C::AJBImage_6' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, AJBImage_8) == 0x000260, "Member 'UWB_ChallengeEventClassItem_C::AJBImage_8' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, AJBImage_ClassNum_BG_Complete) == 0x000268, "Member 'UWB_ChallengeEventClassItem_C::AJBImage_ClassNum_BG_Complete' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, AJBImage_ClassNum_BG_Incomplete) == 0x000270, "Member 'UWB_ChallengeEventClassItem_C::AJBImage_ClassNum_BG_Incomplete' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, AJBTextBlock_CharName) == 0x000278, "Member 'UWB_ChallengeEventClassItem_C::AJBTextBlock_CharName' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, AJBTextBlock_IconText) == 0x000280, "Member 'UWB_ChallengeEventClassItem_C::AJBTextBlock_IconText' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, AJBTextBlock_IconType) == 0x000288, "Member 'UWB_ChallengeEventClassItem_C::AJBTextBlock_IconType' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, BottomBelt_Limited) == 0x000290, "Member 'UWB_ChallengeEventClassItem_C::BottomBelt_Limited' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, BottomBelt_Preceding) == 0x000298, "Member 'UWB_ChallengeEventClassItem_C::BottomBelt_Preceding' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, Effect_FrameFlash) == 0x0002A0, "Member 'UWB_ChallengeEventClassItem_C::Effect_FrameFlash' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, Effect_Glow) == 0x0002A8, "Member 'UWB_ChallengeEventClassItem_C::Effect_Glow' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, Effect_Ring) == 0x0002B0, "Member 'UWB_ChallengeEventClassItem_C::Effect_Ring' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, Effect_Splash) == 0x0002B8, "Member 'UWB_ChallengeEventClassItem_C::Effect_Splash' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, ExpBar) == 0x0002C0, "Member 'UWB_ChallengeEventClassItem_C::ExpBar' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, ExpProgressBar) == 0x0002C8, "Member 'UWB_ChallengeEventClassItem_C::ExpProgressBar' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, ItemInfo_BG) == 0x0002D0, "Member 'UWB_ChallengeEventClassItem_C::ItemInfo_BG' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, ItemInfo_GrayOut) == 0x0002D8, "Member 'UWB_ChallengeEventClassItem_C::ItemInfo_GrayOut' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, RewardImage) == 0x0002E0, "Member 'UWB_ChallengeEventClassItem_C::RewardImage' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, Root_ItemInfo) == 0x0002E8, "Member 'UWB_ChallengeEventClassItem_C::Root_ItemInfo' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, Root_ItemInfo_GrayOut) == 0x0002F0, "Member 'UWB_ChallengeEventClassItem_C::Root_ItemInfo_GrayOut' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, TextBlockClassNumber_Complete) == 0x0002F8, "Member 'UWB_ChallengeEventClassItem_C::TextBlockClassNumber_Complete' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, TextBlockClassNumber_Incomplete) == 0x000300, "Member 'UWB_ChallengeEventClassItem_C::TextBlockClassNumber_Incomplete' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, WB_PlayerIcon) == 0x000308, "Member 'UWB_ChallengeEventClassItem_C::WB_PlayerIcon' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, WidgetSwitcher_ClassNum) == 0x000310, "Member 'UWB_ChallengeEventClassItem_C::WidgetSwitcher_ClassNum' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, WidgetSwitcher_RewardStyle) == 0x000318, "Member 'UWB_ChallengeEventClassItem_C::WidgetSwitcher_RewardStyle' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, ProgressContext) == 0x000320, "Member 'UWB_ChallengeEventClassItem_C::ProgressContext' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, ClassContext) == 0x000378, "Member 'UWB_ChallengeEventClassItem_C::ClassContext' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, ProgressBarSpeed) == 0x0003A8, "Member 'UWB_ChallengeEventClassItem_C::ProgressBarSpeed' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, OnFinished) == 0x0003B0, "Member 'UWB_ChallengeEventClassItem_C::OnFinished' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, bIsCountingUpExp) == 0x0003C0, "Member 'UWB_ChallengeEventClassItem_C::bIsCountingUpExp' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, ProgressValue) == 0x0003C4, "Member 'UWB_ChallengeEventClassItem_C::ProgressValue' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, bIsExpFulfilled) == 0x0003C8, "Member 'UWB_ChallengeEventClassItem_C::bIsExpFulfilled' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, OnExpUpFinished) == 0x0003D0, "Member 'UWB_ChallengeEventClassItem_C::OnExpUpFinished' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, RewardImageScales) == 0x0003E0, "Member 'UWB_ChallengeEventClassItem_C::RewardImageScales' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventClassItem_C, RewardImageYOffsets) == 0x000430, "Member 'UWB_ChallengeEventClassItem_C::RewardImageYOffsets' has a wrong offset!");

}

