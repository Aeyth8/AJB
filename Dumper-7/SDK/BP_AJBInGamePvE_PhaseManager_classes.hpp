#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGamePvE_PhaseManager

#include "Basic.hpp"

#include "E_AJBInGamePvE_GamePhase_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "ST_AJBInGamePvE_PhaseInfo_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBInGamePvE_PhaseManager.BP_AJBInGamePvE_PhaseManager_C
// 0x00B8 (0x03E0 - 0x0328)
class ABP_AJBInGamePvE_PhaseManager_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	E_AJBInGamePvE_GamePhase                      CurrentPhase;                                      // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_339[0x3];                                      // 0x0339(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentWaveIndex;                                  // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TotalPastPhaseTime;                                // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_344[0x4];                                      // 0x0344(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnChangePhase;                                     // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnBeginWave;                                       // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         DEV_CurrentPhaseDuration;                          // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36C[0x4];                                      // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_AJBInGamePvE_PhaseInfo>     WaveInfo;                                          // 0x0370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         MaxWaveCount;                                      // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_384[0x4];                                      // 0x0384(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnEndWave;                                         // 0x0388(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsPaused;                                          // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_399[0x3];                                      // 0x0399(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PausedTime;                                        // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             DT_TimeMessage;                                    // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           CompletedTimeMessageRow;                           // 0x03A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FGameplayTag                           SETag_TimeMessage;                                 // 0x03B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnBeginOverTime;                                   // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	UMulticastDelegateProperty_                   OnEndOverTime;                                     // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ExecuteUbergraph_BP_AJBInGamePvE_PhaseManager(int32 EntryPoint);
	void SetTimerPaused(bool InIsPaused);
	void SwitchTimerPaused();
	void OnEndBitesTheDust(class ABP_AJBBitesTheDustAffecter_C* Affecter);
	void OnBeginBitesTheDust(class ABP_AJBBitesTheDustAffecter_C* Affecter);
	void OnOpenTheGame();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void OnChangePhaseTo(E_AJBInGamePvE_GamePhase ToPhase);
	void OnChangePhaseFrom(E_AJBInGamePvE_GamePhase FromPhase);
	void UserConstructionScript();
	void ChangePhase(E_AJBInGamePvE_GamePhase NewPhase);
	void GetElapsedTimeInPhase(float* ElapsedTimeInPhase);
	void GetCurrentPhase(E_AJBInGamePvE_GamePhase* CurrentPhase_0);
	void AddTotalPastPhaseTime(float AddTime);
	void StartPvEGame();
	void IncrementWaveIndex(int32* NewWaveIndex);
	void HasIntervalFinished(bool* HasFinished);
	void HasWaveFinished(bool* HasFinished);
	void GetWaveDuration(int32 WaveIndex, float* WaveDuration);
	void GetIntervalDuration(int32 WaveIndex, float* IntervalDuration);
	void GetMaxWaveCount(int32* MaxWaveCount_0);
	void ParseWaveInfo();
	void GetCurrentWaveIndex(int32* WaveIndex);
	void GetCurrentWaveDuration(float* WaveDuration);
	void GetCurrentIntervalDuration(float* IntervalDuration);
	void GetRemainingTimeInPhase(float* RemainingTimeInPhase);
	void GetCurrentPhaseTime(float* CurrentPhaseTime);
	void HasAllPhaseFinished(bool* HasFinished);
	float GetElapsedTimeFromOpenTheGame();
	void GetWaveInfo(int32 WaveIndex, struct FST_AJBInGamePvE_PhaseInfo* Output);
	void SetTotalPhaseTime(float NewTime);
	void RefreshTotalPhaseTime();
	void GetElapsedTimeInGame(float* ElapsedTimeInGame);
	void UpdateTimeMessage();
	void LeftTimeCurrentPhase(float* LeftTime);
	void ResetTimeMessageInfo();
	void IsLastWave(bool* IsLastWave_0);
	void Debug_ForceFinishCurrentPhase();
	void IsInOverTime(bool* IsInOverTime_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBInGamePvE_PhaseManager_C">();
	}
	static class ABP_AJBInGamePvE_PhaseManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBInGamePvE_PhaseManager_C>();
	}
};
static_assert(alignof(ABP_AJBInGamePvE_PhaseManager_C) == 0x000008, "Wrong alignment on ABP_AJBInGamePvE_PhaseManager_C");
static_assert(sizeof(ABP_AJBInGamePvE_PhaseManager_C) == 0x0003E0, "Wrong size on ABP_AJBInGamePvE_PhaseManager_C");
static_assert(offsetof(ABP_AJBInGamePvE_PhaseManager_C, UberGraphFrame) == 0x000328, "Member 'ABP_AJBInGamePvE_PhaseManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvE_PhaseManager_C, DefaultSceneRoot) == 0x000330, "Member 'ABP_AJBInGamePvE_PhaseManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvE_PhaseManager_C, CurrentPhase) == 0x000338, "Member 'ABP_AJBInGamePvE_PhaseManager_C::CurrentPhase' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvE_PhaseManager_C, CurrentWaveIndex) == 0x00033C, "Member 'ABP_AJBInGamePvE_PhaseManager_C::CurrentWaveIndex' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvE_PhaseManager_C, TotalPastPhaseTime) == 0x000340, "Member 'ABP_AJBInGamePvE_PhaseManager_C::TotalPastPhaseTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvE_PhaseManager_C, OnChangePhase) == 0x000348, "Member 'ABP_AJBInGamePvE_PhaseManager_C::OnChangePhase' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvE_PhaseManager_C, OnBeginWave) == 0x000358, "Member 'ABP_AJBInGamePvE_PhaseManager_C::OnBeginWave' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvE_PhaseManager_C, DEV_CurrentPhaseDuration) == 0x000368, "Member 'ABP_AJBInGamePvE_PhaseManager_C::DEV_CurrentPhaseDuration' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvE_PhaseManager_C, WaveInfo) == 0x000370, "Member 'ABP_AJBInGamePvE_PhaseManager_C::WaveInfo' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvE_PhaseManager_C, MaxWaveCount) == 0x000380, "Member 'ABP_AJBInGamePvE_PhaseManager_C::MaxWaveCount' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvE_PhaseManager_C, OnEndWave) == 0x000388, "Member 'ABP_AJBInGamePvE_PhaseManager_C::OnEndWave' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvE_PhaseManager_C, IsPaused) == 0x000398, "Member 'ABP_AJBInGamePvE_PhaseManager_C::IsPaused' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvE_PhaseManager_C, PausedTime) == 0x00039C, "Member 'ABP_AJBInGamePvE_PhaseManager_C::PausedTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvE_PhaseManager_C, DT_TimeMessage) == 0x0003A0, "Member 'ABP_AJBInGamePvE_PhaseManager_C::DT_TimeMessage' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvE_PhaseManager_C, CompletedTimeMessageRow) == 0x0003A8, "Member 'ABP_AJBInGamePvE_PhaseManager_C::CompletedTimeMessageRow' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvE_PhaseManager_C, SETag_TimeMessage) == 0x0003B8, "Member 'ABP_AJBInGamePvE_PhaseManager_C::SETag_TimeMessage' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvE_PhaseManager_C, OnBeginOverTime) == 0x0003C0, "Member 'ABP_AJBInGamePvE_PhaseManager_C::OnBeginOverTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvE_PhaseManager_C, OnEndOverTime) == 0x0003D0, "Member 'ABP_AJBInGamePvE_PhaseManager_C::OnEndOverTime' has a wrong offset!");

}

