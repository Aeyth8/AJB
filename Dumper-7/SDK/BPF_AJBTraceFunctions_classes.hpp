#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPF_AJBTraceFunctions

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPF_AJBTraceFunctions.BPF_AJBTraceFunctions_C
// 0x0000 (0x0028 - 0x0028)
class UBPF_AJBTraceFunctions_C final : public UBlueprintFunctionLibrary
{
public:
	static void TryGetTraceInfo(const struct FGameplayTag& TraceInfoTag, class UObject* __WorldContext, EDrawDebugTrace* DrawDebugTrace, float* DrawTime);
	static bool AJBMultiSphereTraceForObjects(const struct FGameplayTag& TraceInfoTag, const struct FVector& Start, const struct FVector& End, float Radius, const TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, class UObject* __WorldContext, TArray<struct FHitResult>* OutHits);
	static bool AJBLineTraceForObjects(const struct FGameplayTag& TraceInfoTag, const struct FVector& Start, const struct FVector& End, const TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, class UObject* __WorldContext, struct FHitResult* OutHit);
	static bool AJBSphereTraceForObjects(const struct FGameplayTag& TraceInfoTag, const struct FVector& Start, const struct FVector& End, float Radius, const TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, class UObject* __WorldContext, struct FHitResult* OutHit);
	static bool AJBLineTraceByChannel(const struct FGameplayTag& TraceInfoTag, const struct FVector& Start, const struct FVector& End, ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, class UObject* __WorldContext, struct FHitResult* OutHit);
	static bool AJBCapsuleTraceByChannel(const struct FGameplayTag& TraceInfoTag, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, class UObject* __WorldContext, struct FHitResult* OutHit);
	static bool AJBMultiLineTraceForObjects(const struct FGameplayTag& TraceInfoTag, const struct FVector& Start, const struct FVector& End, const TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, class UObject* __WorldContext, TArray<struct FHitResult>* OutHits);
	static bool AJBMultiCapsuleTraceForObjects(const struct FGameplayTag& TraceInfoTag, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, const TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, class UObject* __WorldContext, TArray<struct FHitResult>* OutHits);
	static bool AJBMultiSphereTraceByProfile(const struct FGameplayTag& TraceInfoTag, const struct FVector& Start, const struct FVector& End, float Radius, class FName ProfileName, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, class UObject* __WorldContext, TArray<struct FHitResult>* OutHits);
	static bool AJBMultiLineTraceByChannel(const struct FGameplayTag& TraceInfoTag, const struct FVector& Start, const struct FVector& End, ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, class UObject* __WorldContext, TArray<struct FHitResult>* OutHits);
	static bool AJBMultiSphereTraceByChannel(const struct FGameplayTag& TraceInfoTag, const struct FVector& Start, const struct FVector& End, float Radius, ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, class UObject* __WorldContext, TArray<struct FHitResult>* OutHits);
	static bool AJBMultiCapsuleTraceByChannel(const struct FGameplayTag& TraceInfoTag, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, class UObject* __WorldContext, TArray<struct FHitResult>* OutHits);
	static bool AJBBoxTraceByChannel(const struct FGameplayTag& TraceInfoTag, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, class UObject* __WorldContext, struct FHitResult* OutHit);
	static bool AJBBoxTraceForObjects(const struct FGameplayTag& TraceInfoTag, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, const TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, class UObject* __WorldContext, struct FHitResult* OutHit);
	static bool AJBCapsuleTraceForObjects(const struct FGameplayTag& TraceInfoTag, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, const TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, class UObject* __WorldContext, struct FHitResult* OutHit);
	static bool AJBMultiBoxTraceForObjects(const struct FGameplayTag& TraceInfoTag, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, const TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, class UObject* __WorldContext, TArray<struct FHitResult>* OutHits);
	static bool AJBSphereTraceByChannel(const struct FGameplayTag& TraceInfoTag, const struct FVector& Start, const struct FVector& End, float Radius, ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, class UObject* __WorldContext, struct FHitResult* OutHit);
	static void AJBCapsuleTraceForObjectsOnePlace(const struct FGameplayTag& TraceInfoTag, const struct FVector& Location, const struct FVector& ForwardDirection, float Radius, float HalfHeight, float SmallAmount, TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, TArray<class AActor*>& ActorsToIgnore, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, class UObject* __WorldContext, bool* bReturnValue, class AActor** HitActor);
	static void AJBCapsuleTraceForObjectsBidirectional(const struct FGameplayTag& TraceInfoTag, const struct FVector& Location, const struct FVector& Direction, float Radius, float HalfHeight, float SmallAmount, TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, TArray<class AActor*>& ActorsToIgnore, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, class UObject* __WorldContext, bool* bReturnValue, class AActor** HitActor);
	static bool AJBLineTraceByChannelIgnore(const struct FGameplayTag& TraceInfoTag, const struct FVector& Start, const struct FVector& End, ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, class UObject* __WorldContext, struct FHitResult* OutHit);
	static void PredictProjectilePathByObjectTypeIgnore(const struct FVector& StartPos, const struct FVector& LaunchVelocity, bool bTracePath, float ProjectileRadius, const TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ, class AActor* Owner, bool bIgnorePairOnly, class UObject* __WorldContext, TArray<struct FVector>* OutPathPositions);
	static bool AJBSphereTraceForObjectsIgnore(const struct FGameplayTag& TraceInfoTag, const struct FVector& Start, const struct FVector& End, float Radius, const TArray<EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, class AActor* Owner, bool bIgnorePairOnly, class UObject* __WorldContext, struct FHitResult* OutHit);
	static void CheckPossibleAimDrag(class ABP_AJBInGameCharacter_C* CharacterBP, class UCameraComponent* InCamera, float InAimDragDistance, float InAimDragRadius, class UObject* __WorldContext, bool* bPossible);
	static void CalcPoliticForwardTransform(class ABP_AJBInGameCharacter_C* CharacterBP, float Length, TArray<EObjectTypeQuery>& ObjectTypes, float GroundingTraceDistance, class UObject* __WorldContext, bool* bSucceed, struct FTransform* Transform);
	static void TraceHover(class ABP_AJBInGameCharacter_C* CharacterBP, const struct FVector& StartLocation, float TraceEndHeightBuffer, TArray<EObjectTypeQuery>& ObjectTypes, class UObject* __WorldContext, bool* bContinue);
	static void TraceFlatland(class ABP_AJBInGameCharacter_C* CharacterBP, const struct FVector& StartLocation, const struct FVector& Direction, float Length, float Angle, float TraceEndHeightBuffer, TArray<EObjectTypeQuery>& ObjectTypes, bool bCachedFirstFlatland, const struct FVector& CachedSlopeDirection, class UObject* __WorldContext, bool* bContinue, struct FVector* NewLocation, struct FVector* NewDirection, float* NewLength, float* NewAngle);
	static void TraceSlope(class ABP_AJBInGameCharacter_C* CharacterBP, const struct FVector& StartLocation, const struct FVector& Direction, float Length, TArray<EObjectTypeQuery>& ObjectTypes, float TraceStartHeightBuffer, float TraceEndHeightBuffer, const struct FVector& CachedDefaultDirection, const struct FVector& CachedSlopeDirection, class UObject* __WorldContext, struct FVector* NewLocation, struct FVector* NewDirection, float* NewLength, struct FVector* NewSlopeDirection);
	static void TraceSpacing(class ABP_AJBInGameCharacter_C* CharacterBP, const struct FVector& StartLocation, const struct FVector& DefaultDirection, TArray<EObjectTypeQuery>& ObjectTypes, class UObject* __WorldContext, bool* bCanSpace);
	static void TraceGrounding(class ABP_AJBInGameCharacter_C* CharacterBP, const struct FVector& StartLocation, const struct FVector& DefaultDirection, bool bShouldSpace, TArray<EObjectTypeQuery>& ObjectTypes, float Distance, class UObject* __WorldContext, struct FVector* NewLocation, bool* bSucceed);
	static void ShouldIgnoreCharacterCondition(class ABP_AJBInGameCharacter_C* CharacterBP, class UObject* __WorldContext, bool* Ignore);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPF_AJBTraceFunctions_C">();
	}
	static class UBPF_AJBTraceFunctions_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPF_AJBTraceFunctions_C>();
	}
};
static_assert(alignof(UBPF_AJBTraceFunctions_C) == 0x000008, "Wrong alignment on UBPF_AJBTraceFunctions_C");
static_assert(sizeof(UBPF_AJBTraceFunctions_C) == 0x000028, "Wrong size on UBPF_AJBTraceFunctions_C");

}

