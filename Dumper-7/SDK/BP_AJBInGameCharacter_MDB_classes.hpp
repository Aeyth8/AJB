#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameCharacter_MDB

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_AJBInGameCharacter_classes.hpp"
#include "AJB_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "E_StencilDigit_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBInGameCharacter_MDB.BP_AJBInGameCharacter_MDB_C
// 0x00E0 (0x1890 - 0x17B0)
class ABP_AJBInGameCharacter_MDB_C final : public ABP_AJBInGameCharacter_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBInGameCharacter_MDB_C;        // 0x17A8(0x0008)(Transient, DuplicateTransient)
	class UBP_AJBReplay_C*                        BP_AJBReplay;                                      // 0x17B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   MDBTimer;                                          // 0x17B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   MDBEye_R;                                          // 0x17C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   MDBEye_L;                                          // 0x17C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_1_NewTrack_0_E22E2B64430A3738618043A5AEB979E0; // 0x17D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_1__Direction_E22E2B64430A3738618043A5AEB979E0; // 0x17D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17D5[0x3];                                     // 0x17D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_1;                                        // 0x17D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 MovementModeBeforeTimeStop;                        // 0x17E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRepEnable;                                        // 0x17E1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          bRepABCMeshVisible;                                // 0x17E2(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          bRepMDBMeshVisible;                                // 0x17E3(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_17E4[0x4];                                     // 0x17E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   PassiveTagsShouldRecordImmidiately;                // 0x17E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class AAJBInGameStand*                        OwnerStandCache;                                   // 0x17F8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OwnerMatchingPlayerIndexCache;                     // 0x1800(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	ESkillState_Transfer                          Rep_DubbingSkillState;                             // 0x1804(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1805[0x3];                                     // 0x1805(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CurrentSpringArmWorldRotation;                     // 0x1808(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               CurrentCameraWorldRotation;                        // 0x1814(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                RepCameraTargetLocation;                           // 0x1820(0x000C)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRepValidCameraTargetLocation;                     // 0x182C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_182D[0x3];                                     // 0x182D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             MeshRelativeTransform;                             // 0x1830(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         RetryCountToGetOwnerProperties;                    // 0x1860(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1864[0x4];                                     // 0x1864(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  PassiveTagsIgnored;                                // 0x1868(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_AJBInGameCharacter_MDB(int32 EntryPoint);
	void ChangeDubbingSkin();
	void ChangeMDBPartsSkin();
	void ChangeABCSkin();
	void ROS_SyncProperties();
	void ProcessDubbingState(const struct FGameplayTag& DamageType, class AActor* DamageCauser);
	void ChangeMDBMeshVisibleCore(bool bNewVisibility);
	void ChangeMDBMeshVisibleServer(bool NewVisibility);
	void ChangeMeshVisibleCore(bool bNewVisibility);
	void ChangeMeshVisibleServer(bool bNewVisibility);
	void SetupPropertyStandInteract();
	void ChangeEnableCore(bool bEnable);
	void ChangeEnableServer(bool bEnable);
	void FollowCharacterWhenUnpossessed_OnServer();
	void MC_SpawnDamageDisplay(const struct FAJBDamageDisplayParams& DisplayParams, const struct FAJBDamageDisplayProperty& DisplayProperty);
	void ForceEndShakeTimeline();
	void PlayShakeTimeline();
	void SetSerialNumber(int32 SerialNumber);
	void OnLoaded_21F53AD94A2001589A7A0992CCA6FBC7(class UObject* Loaded);
	void OnLoaded_6FEB94C2436C868ECDE635947C259434(class UObject* Loaded);
	void OnLoaded_EE6189324B1F4C2A78E3F8B2A59085EB(class UObject* Loaded);
	void Timeline_1__UpdateFunc();
	void Timeline_1__FinishedFunc();
	void OnRep_bRepEnable();
	void OnRep_bRepMDBMeshVisible();
	void OnRep_bRepABCMeshVisible();
	void ShoudRecording(const struct FGameplayTag& DamageType, class AActor* DamageCauser, bool* bShouldRecording);
	void IsActive(bool* IsActive_0);
	void IsAppear(bool* IsActiveState);
	void ShouldPropagatePassiveToABC(const struct FGameplayTag& PassiveTag, bool* ShouldPropagate);
	void ShouldRecordImmidiatelyPassive(const struct FGameplayTag& PassiveTag, bool* ShouldRecord);
	void CacheOwnerMatchingPlayerIndex(int32 OwnerMatchingPlayerIndexCache_0);
	void OnRep_OwnerMatchingPlayerIndexCache();
	void UpdateCameraOnSucceedReplay();
	void CalcIgnoreDistanceDateTime(struct FDateTime* DateTime);
	void SetMDBMeshOffset(const struct FVector& Offset);
	void ShouldForceSkipDubbingAction(const struct FGameplayTag& DamageType, bool* ShouldForceSkip);
	void IsIgnoredPassive(const struct FGameplayTag& PassiveTag, bool* IsIgnored);
	void GetPropertyType(EAJBCharacterPropertyType* PropertyType);
	void GetPropertyOwnerCharacterBP(class ABP_AJBInGameCharacter_C** CharacterBP);
	void TracableByAI(bool* bTracable);
	void DetectableByTrap(bool* bDetectable);
	void TreatAsCharacterBySpecialProjectile(bool* bTreat);
	void IsDetectableByDirectAttackGuide(bool* bIsDetectable);
	void IsTargetCO2Scan(bool* IsTarget);
	void IsTargetClourBarrier(bool* IsTarget);
	void IsTargetOverGrow(bool* IsTarget);
	void IsPlayOwnerVoiceOnGetItem(bool* bIsPlay);
	void IsPlayOwnerVoiceOnJump(bool* bIsPlay);
	void IsPlayOwnerVoiceOnPassThruEnter(bool* bIsPlay);
	void ChangeSkin();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void OnReleasedEmote();
	void PressedButton_ActiveSpecial();
	void OnPressedEmote();
	void ChangeMovementModeOnTimeStop(bool bEnable, bool bOperatorIsEmpty);
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);
	void AddGameplayTag(const struct FGameplayTag& Tag, class UObject* Operator, class UObject* Target, const struct FGameplayTag& CauserType, int32 SerialNumber);
	void AJBDamage(class AActor* DamagedActor, int32 DamageForHPAP, int32 DamageForAAP, int32 CutDamage, const struct FGameplayTag& DamageType, int32 SerialNumber, EDamagePriority DamagePriority, float AttackDistance, class AActor* DamageCauser, bool WithSeparatedStandAttack, bool HitEnemysSeparatedStand, bool bPenetrateAP, bool bNotUseCollision, bool IsEndured, const struct FAJBDamageDisplayParams& DamageDisplayParams, const struct FAJBDamageDisplayProperty& DamageDisplayProperty);
	void UpdateCameraParam(float DeltaTime);
	void UserConstructionScript();
	void SetSystemEnable(bool bEnable, bool bCollision, bool bGravity, bool bSpringArm, bool bMovement);
	void ResetSystemEnable(bool bRestore);
	void ChangeSystemEnable(bool bCollision, bool bGravity, bool bSpringArm, bool bMovement, bool bRestore);
	void ChangeSystemDisable(bool bCollision, bool bGravity, bool bSpringArm, bool bMovement, bool bRestore);
	void CheckPossibleDetection(bool* bPossibleDetection);
	void CheckTargetSelf(class AActor* DamageCauser, bool bForDamageOverlap, bool bIgnoreMovableStand, bool bIncludeSelf, bool bAfterReflectShouldHitOwner, bool* bTarget);
	void InteractableOperator(class AActor* InteractActor, bool* bReturnValue);
	void GetPrimitivesToChangeStencil(E_StencilDigit StencilDigit, TArray<class UPrimitiveComponent*>* PrimitiveComponents);
	void GetGionOwner(class AActor** GionOwner);

	void FindOwnerMatchingPlayerInfo(bool* Success, class FString* PlayerName, struct FMatchingPlayerInfo* MatchingPlayerInfo) const;
	void GetOwnerMatchingPlayerIndexCache(int32* OwnerMatchingPlayerIndexCache_0) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBInGameCharacter_MDB_C">();
	}
	static class ABP_AJBInGameCharacter_MDB_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBInGameCharacter_MDB_C>();
	}
};
static_assert(alignof(ABP_AJBInGameCharacter_MDB_C) == 0x000010, "Wrong alignment on ABP_AJBInGameCharacter_MDB_C");
static_assert(sizeof(ABP_AJBInGameCharacter_MDB_C) == 0x001890, "Wrong size on ABP_AJBInGameCharacter_MDB_C");
static_assert(offsetof(ABP_AJBInGameCharacter_MDB_C, UberGraphFrame_BP_AJBInGameCharacter_MDB_C) == 0x0017A8, "Member 'ABP_AJBInGameCharacter_MDB_C::UberGraphFrame_BP_AJBInGameCharacter_MDB_C' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_MDB_C, BP_AJBReplay) == 0x0017B0, "Member 'ABP_AJBInGameCharacter_MDB_C::BP_AJBReplay' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_MDB_C, MDBTimer) == 0x0017B8, "Member 'ABP_AJBInGameCharacter_MDB_C::MDBTimer' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_MDB_C, MDBEye_R) == 0x0017C0, "Member 'ABP_AJBInGameCharacter_MDB_C::MDBEye_R' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_MDB_C, MDBEye_L) == 0x0017C8, "Member 'ABP_AJBInGameCharacter_MDB_C::MDBEye_L' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_MDB_C, Timeline_1_NewTrack_0_E22E2B64430A3738618043A5AEB979E0) == 0x0017D0, "Member 'ABP_AJBInGameCharacter_MDB_C::Timeline_1_NewTrack_0_E22E2B64430A3738618043A5AEB979E0' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_MDB_C, Timeline_1__Direction_E22E2B64430A3738618043A5AEB979E0) == 0x0017D4, "Member 'ABP_AJBInGameCharacter_MDB_C::Timeline_1__Direction_E22E2B64430A3738618043A5AEB979E0' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_MDB_C, Timeline_1) == 0x0017D8, "Member 'ABP_AJBInGameCharacter_MDB_C::Timeline_1' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_MDB_C, MovementModeBeforeTimeStop) == 0x0017E0, "Member 'ABP_AJBInGameCharacter_MDB_C::MovementModeBeforeTimeStop' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_MDB_C, bRepEnable) == 0x0017E1, "Member 'ABP_AJBInGameCharacter_MDB_C::bRepEnable' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_MDB_C, bRepABCMeshVisible) == 0x0017E2, "Member 'ABP_AJBInGameCharacter_MDB_C::bRepABCMeshVisible' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_MDB_C, bRepMDBMeshVisible) == 0x0017E3, "Member 'ABP_AJBInGameCharacter_MDB_C::bRepMDBMeshVisible' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_MDB_C, PassiveTagsShouldRecordImmidiately) == 0x0017E8, "Member 'ABP_AJBInGameCharacter_MDB_C::PassiveTagsShouldRecordImmidiately' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_MDB_C, OwnerStandCache) == 0x0017F8, "Member 'ABP_AJBInGameCharacter_MDB_C::OwnerStandCache' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_MDB_C, OwnerMatchingPlayerIndexCache) == 0x001800, "Member 'ABP_AJBInGameCharacter_MDB_C::OwnerMatchingPlayerIndexCache' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_MDB_C, Rep_DubbingSkillState) == 0x001804, "Member 'ABP_AJBInGameCharacter_MDB_C::Rep_DubbingSkillState' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_MDB_C, CurrentSpringArmWorldRotation) == 0x001808, "Member 'ABP_AJBInGameCharacter_MDB_C::CurrentSpringArmWorldRotation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_MDB_C, CurrentCameraWorldRotation) == 0x001814, "Member 'ABP_AJBInGameCharacter_MDB_C::CurrentCameraWorldRotation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_MDB_C, RepCameraTargetLocation) == 0x001820, "Member 'ABP_AJBInGameCharacter_MDB_C::RepCameraTargetLocation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_MDB_C, bRepValidCameraTargetLocation) == 0x00182C, "Member 'ABP_AJBInGameCharacter_MDB_C::bRepValidCameraTargetLocation' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_MDB_C, MeshRelativeTransform) == 0x001830, "Member 'ABP_AJBInGameCharacter_MDB_C::MeshRelativeTransform' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_MDB_C, RetryCountToGetOwnerProperties) == 0x001860, "Member 'ABP_AJBInGameCharacter_MDB_C::RetryCountToGetOwnerProperties' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_MDB_C, PassiveTagsIgnored) == 0x001868, "Member 'ABP_AJBInGameCharacter_MDB_C::PassiveTagsIgnored' has a wrong offset!");

}

