#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBMemoryLeakBuff

#include "Basic.hpp"

#include "BP_AJBMemoryLeakBuff_classes.hpp"
#include "BP_AJBMemoryLeakBuff_parameters.hpp"


namespace SDK
{

// Function BP_AJBMemoryLeakBuff.BP_AJBMemoryLeakBuff_C.ExecuteUbergraph_BP_AJBMemoryLeakBuff
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBMemoryLeakBuff_C::ExecuteUbergraph_BP_AJBMemoryLeakBuff(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBMemoryLeakBuff_C", "ExecuteUbergraph_BP_AJBMemoryLeakBuff");

	Params::BP_AJBMemoryLeakBuff_C_ExecuteUbergraph_BP_AJBMemoryLeakBuff Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBMemoryLeakBuff.BP_AJBMemoryLeakBuff_C.MC_ApplyBuff
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              ApplyBuffTag                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   NextPhase                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBMemoryLeakBuff_C::MC_ApplyBuff(const struct FGameplayTag& ApplyBuffTag, int32 NextPhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBMemoryLeakBuff_C", "MC_ApplyBuff");

	Params::BP_AJBMemoryLeakBuff_C_MC_ApplyBuff Parms{};

	Parms.ApplyBuffTag = std::move(ApplyBuffTag);
	Parms.NextPhase = NextPhase;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBMemoryLeakBuff.BP_AJBMemoryLeakBuff_C.RequestBuff
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBMemoryLeakBuff_C::RequestBuff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBMemoryLeakBuff_C", "RequestBuff");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBMemoryLeakBuff.BP_AJBMemoryLeakBuff_C.LotteryBuff
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag*                    LotteryTag                                             (Parm, OutParm, NoDestructor, HasGetValueTypeHash)
// int32*                                  NextPhase                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBMemoryLeakBuff_C::LotteryBuff(struct FGameplayTag* LotteryTag, int32* NextPhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBMemoryLeakBuff_C", "LotteryBuff");

	Params::BP_AJBMemoryLeakBuff_C_LotteryBuff Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LotteryTag != nullptr)
		*LotteryTag = std::move(Parms.LotteryTag);

	if (NextPhase != nullptr)
		*NextPhase = Parms.NextPhase;
}


// Function BP_AJBMemoryLeakBuff.BP_AJBMemoryLeakBuff_C.CheckBuffLimit
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   bLimit                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBMemoryLeakBuff_C::CheckBuffLimit(bool* bLimit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBMemoryLeakBuff_C", "CheckBuffLimit");

	Params::BP_AJBMemoryLeakBuff_C_CheckBuffLimit Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bLimit != nullptr)
		*bLimit = Parms.bLimit;
}


// Function BP_AJBMemoryLeakBuff.BP_AJBMemoryLeakBuff_C.DebugTick
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_AJBMemoryLeakBuff_C::DebugTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBMemoryLeakBuff_C", "DebugTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBMemoryLeakBuff.BP_AJBMemoryLeakBuff_C.ApplyBuff
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              ApplyBuffTag                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   NextPhase                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBMemoryLeakBuff_C::ApplyBuff(const struct FGameplayTag& ApplyBuffTag, int32 NextPhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBMemoryLeakBuff_C", "ApplyBuff");

	Params::BP_AJBMemoryLeakBuff_C_ApplyBuff Parms{};

	Parms.ApplyBuffTag = std::move(ApplyBuffTag);
	Parms.NextPhase = NextPhase;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBMemoryLeakBuff.BP_AJBMemoryLeakBuff_C.GetTagIndex
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              Tag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// int32*                                  Index_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBMemoryLeakBuff_C::GetTagIndex(const struct FGameplayTag& Tag, int32* Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBMemoryLeakBuff_C", "GetTagIndex");

	Params::BP_AJBMemoryLeakBuff_C_GetTagIndex Parms{};

	Parms.Tag = std::move(Tag);

	UObject::ProcessEvent(Func, &Parms);

	if (Index_0 != nullptr)
		*Index_0 = Parms.Index_0;
}


// Function BP_AJBMemoryLeakBuff.BP_AJBMemoryLeakBuff_C.CalcMoveSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Phase                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBMemoryLeakBuff_C::CalcMoveSpeed(int32 Phase, float* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBMemoryLeakBuff_C", "CalcMoveSpeed");

	Params::BP_AJBMemoryLeakBuff_C_CalcMoveSpeed Parms{};

	Parms.Phase = Phase;

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function BP_AJBMemoryLeakBuff.BP_AJBMemoryLeakBuff_C.CalcAttack
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Phase                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBMemoryLeakBuff_C::CalcAttack(int32 Phase, float* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBMemoryLeakBuff_C", "CalcAttack");

	Params::BP_AJBMemoryLeakBuff_C_CalcAttack Parms{};

	Parms.Phase = Phase;

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function BP_AJBMemoryLeakBuff.BP_AJBMemoryLeakBuff_C.CalcMPMax
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Phase                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBMemoryLeakBuff_C::CalcMPMax(int32 Phase, float* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBMemoryLeakBuff_C", "CalcMPMax");

	Params::BP_AJBMemoryLeakBuff_C_CalcMPMax Parms{};

	Parms.Phase = Phase;

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function BP_AJBMemoryLeakBuff.BP_AJBMemoryLeakBuff_C.GetMPMaxIncrement
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Phase                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBMemoryLeakBuff_C::GetMPMaxIncrement(int32 Phase, float* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBMemoryLeakBuff_C", "GetMPMaxIncrement");

	Params::BP_AJBMemoryLeakBuff_C_GetMPMaxIncrement Parms{};

	Parms.Phase = Phase;

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function BP_AJBMemoryLeakBuff.BP_AJBMemoryLeakBuff_C.ActiveContinuedParticle
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bActiveForOwner                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bActiveForMovableStand                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBMemoryLeakBuff_C::ActiveContinuedParticle(bool bActiveForOwner, bool bActiveForMovableStand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBMemoryLeakBuff_C", "ActiveContinuedParticle");

	Params::BP_AJBMemoryLeakBuff_C_ActiveContinuedParticle Parms{};

	Parms.bActiveForOwner = bActiveForOwner;
	Parms.bActiveForMovableStand = bActiveForMovableStand;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBMemoryLeakBuff.BP_AJBMemoryLeakBuff_C.OnActionActivate
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bTriggeredByStand                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBMemoryLeakBuff_C::OnActionActivate(bool bTriggeredByStand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBMemoryLeakBuff_C", "OnActionActivate");

	Params::BP_AJBMemoryLeakBuff_C_OnActionActivate Parms{};

	Parms.bTriggeredByStand = bTriggeredByStand;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBMemoryLeakBuff.BP_AJBMemoryLeakBuff_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_AJBMemoryLeakBuff_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBMemoryLeakBuff_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBMemoryLeakBuff.BP_AJBMemoryLeakBuff_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBMemoryLeakBuff_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBMemoryLeakBuff_C", "ReceiveTick");

	Params::BP_AJBMemoryLeakBuff_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}

}

