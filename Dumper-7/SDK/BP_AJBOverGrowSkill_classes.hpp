#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBOverGrowSkill

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_AJBSkillBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBOverGrowSkill.BP_AJBOverGrowSkill_C
// 0x00B0 (0x0298 - 0x01E8)
class UBP_AJBOverGrowSkill_C final : public UBP_AJBSkillBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBOverGrowSkill_C;              // 0x01E8(0x0008)(Transient, DuplicateTransient)
	class UAnimMontage*                           AM_StandWait;                                      // 0x01F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           AM_StandGrow;                                      // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaitTime;                                          // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImpactTime;                                        // 0x0204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCompImpact;                                       // 0x0208(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bWaitingAction;                                    // 0x0209(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_20A[0x2];                                      // 0x020A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendOutTime;                                      // 0x020C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GrowTreeClass;                                     // 0x0210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_AJBGrowTree_C*>              GrowTreeList;                                      // 0x0218(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         GrowTreeLimitNum;                                  // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceGrowDistanceLimitBuffer_cm_;                  // 0x022C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FallingLimitTime;                                  // 0x0230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GrowLocation;                                      // 0x0234(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrowSpeed;                                         // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GrowDistanceLimit;                                 // 0x0244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bErrorDoNotGrowUp;                                 // 0x0248(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bOnGrowTree;                                       // 0x0249(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24A[0x2];                                      // 0x024A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AdditionalDistanceLimit;                           // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         LandScapeActors;                                   // 0x0250(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	UMulticastDelegateProperty_                   Server_OnStateEnd;                                 // 0x0260(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bGroundingGrow;                                    // 0x0270(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_271[0x3];                                      // 0x0271(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PairCheckTraceDistance;                            // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               TargetCharacterBP;                                 // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Rep_GrownTreeCount;                                // 0x0280(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_284[0x4];                                      // 0x0284(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerUpdateOwnerGetOn;                             // 0x0288(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          Rep_OwnerGetOn;                                    // 0x0290(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_AJBOverGrowSkill(int32 EntryPoint);
	void UpdateOwnerGetOnServer();
	void HideGuideUI();
	void ShowGuideUI();
	void OnCompletedClearing(class ABP_AJBGrowTree_C* Target);
	void SpawnGrowTree(const struct FVector& GrowLocation_0, float GroｗSpeed, float GrowDistanceLimit_0, class ABP_AJBInGameCharacter_C* TargetCharacterBP_0);
	void OnImpactFloor();
	void MC_ImpactFloor();
	void ROS_ImpactFloor(const struct FVector& GrowLocation_0, float GrowDistanceLimit_0, float GrowSpeed_0, class ABP_AJBInGameCharacter_C* TargetCharacterBP_0);
	void ImpactFloor();
	void MC_BeginState_Waiting();
	void ROS_BeginState_Waiting();
	void OnBeginState_Waiting();
	void MC_StateEnd();
	void ROS_StateEnd();
	void OnStateEnd();
	void MC_BeginState_Action();
	void ROS_BeginState_Action();
	void OnBeginState_Action();
	void OnMovementModeChanged(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode);
	void TickState_Action(float DeltaSeconds);
	void TickState_Waiting(float DeltaSeconds);
	void StateTick(float DeltaSeconds);
	void BeginState_Action();
	void StateEnd();
	void BeginState_Waiting();
	void OnCompleted_7B45FB9D406D5826C78546BCC7F10B06(class FName NotifyName);
	void OnBlendOut_7B45FB9D406D5826C78546BCC7F10B06(class FName NotifyName);
	void OnInterrupted_7B45FB9D406D5826C78546BCC7F10B06(class FName NotifyName);
	void OnNotifyBegin_7B45FB9D406D5826C78546BCC7F10B06(class FName NotifyName);
	void OnNotifyEnd_7B45FB9D406D5826C78546BCC7F10B06(class FName NotifyName);
	void OnCompleted_7B45FB9D406D5826C78546BC19EA63D7(class FName NotifyName);
	void OnBlendOut_7B45FB9D406D5826C78546BC19EA63D7(class FName NotifyName);
	void OnInterrupted_7B45FB9D406D5826C78546BC19EA63D7(class FName NotifyName);
	void OnNotifyBegin_7B45FB9D406D5826C78546BC19EA63D7(class FName NotifyName);
	void OnNotifyEnd_7B45FB9D406D5826C78546BC19EA63D7(class FName NotifyName);
	void GetGrownTreeCount(int32* Count);
	void CalcGrowDistanceLimit(float In_GrowDistanceLimit, float* Out_GrowDistanceLimit, bool* bError_NotGrow);
	void CalcGrowLocation(class ABP_AJBInGameCharacter_C* CharacterBP, struct FVector* GrowLocation_0);
	void UpdateGrowInfo();
	void CalcDefaultGrowDistanceLimit(float* GrowSpeed_0, float* GrowDistanceLimit_0);
	void ExtendGrowDistanceLimit(float Distance);
	void GetPlacementFloatValue(class FName ValueName, bool* bSuccess, float* Value);
	void TryGetLandscapeActors(TArray<class AActor*>* LandScapeActors_0);
	void UpdateTargetCharacter(class ABP_AJBInGameCharacter_C* CharacterBP);
	void UpdateGrownTreeCountServer();
	void RewindGrowDistanceLimit(float Distance);
	void ReceiveBeginPlay();
	void OnDisconnected();
	void OnCancel();
	void OnActive();
	void ReceiveTick(float DeltaSeconds);
	void Increase_Local(int32 Num);
	void Increase_Server(int32 Num);
	void Decrease_Local(int32 Num);
	void Decrease_Server(int32 Num);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBOverGrowSkill_C">();
	}
	static class UBP_AJBOverGrowSkill_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBOverGrowSkill_C>();
	}
};
static_assert(alignof(UBP_AJBOverGrowSkill_C) == 0x000008, "Wrong alignment on UBP_AJBOverGrowSkill_C");
static_assert(sizeof(UBP_AJBOverGrowSkill_C) == 0x000298, "Wrong size on UBP_AJBOverGrowSkill_C");
static_assert(offsetof(UBP_AJBOverGrowSkill_C, UberGraphFrame_BP_AJBOverGrowSkill_C) == 0x0001E8, "Member 'UBP_AJBOverGrowSkill_C::UberGraphFrame_BP_AJBOverGrowSkill_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverGrowSkill_C, AM_StandWait) == 0x0001F0, "Member 'UBP_AJBOverGrowSkill_C::AM_StandWait' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverGrowSkill_C, AM_StandGrow) == 0x0001F8, "Member 'UBP_AJBOverGrowSkill_C::AM_StandGrow' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverGrowSkill_C, WaitTime) == 0x000200, "Member 'UBP_AJBOverGrowSkill_C::WaitTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverGrowSkill_C, ImpactTime) == 0x000204, "Member 'UBP_AJBOverGrowSkill_C::ImpactTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverGrowSkill_C, bCompImpact) == 0x000208, "Member 'UBP_AJBOverGrowSkill_C::bCompImpact' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverGrowSkill_C, bWaitingAction) == 0x000209, "Member 'UBP_AJBOverGrowSkill_C::bWaitingAction' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverGrowSkill_C, BlendOutTime) == 0x00020C, "Member 'UBP_AJBOverGrowSkill_C::BlendOutTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverGrowSkill_C, GrowTreeClass) == 0x000210, "Member 'UBP_AJBOverGrowSkill_C::GrowTreeClass' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverGrowSkill_C, GrowTreeList) == 0x000218, "Member 'UBP_AJBOverGrowSkill_C::GrowTreeList' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverGrowSkill_C, GrowTreeLimitNum) == 0x000228, "Member 'UBP_AJBOverGrowSkill_C::GrowTreeLimitNum' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverGrowSkill_C, TraceGrowDistanceLimitBuffer_cm_) == 0x00022C, "Member 'UBP_AJBOverGrowSkill_C::TraceGrowDistanceLimitBuffer_cm_' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverGrowSkill_C, FallingLimitTime) == 0x000230, "Member 'UBP_AJBOverGrowSkill_C::FallingLimitTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverGrowSkill_C, GrowLocation) == 0x000234, "Member 'UBP_AJBOverGrowSkill_C::GrowLocation' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverGrowSkill_C, GrowSpeed) == 0x000240, "Member 'UBP_AJBOverGrowSkill_C::GrowSpeed' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverGrowSkill_C, GrowDistanceLimit) == 0x000244, "Member 'UBP_AJBOverGrowSkill_C::GrowDistanceLimit' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverGrowSkill_C, bErrorDoNotGrowUp) == 0x000248, "Member 'UBP_AJBOverGrowSkill_C::bErrorDoNotGrowUp' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverGrowSkill_C, bOnGrowTree) == 0x000249, "Member 'UBP_AJBOverGrowSkill_C::bOnGrowTree' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverGrowSkill_C, AdditionalDistanceLimit) == 0x00024C, "Member 'UBP_AJBOverGrowSkill_C::AdditionalDistanceLimit' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverGrowSkill_C, LandScapeActors) == 0x000250, "Member 'UBP_AJBOverGrowSkill_C::LandScapeActors' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverGrowSkill_C, Server_OnStateEnd) == 0x000260, "Member 'UBP_AJBOverGrowSkill_C::Server_OnStateEnd' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverGrowSkill_C, bGroundingGrow) == 0x000270, "Member 'UBP_AJBOverGrowSkill_C::bGroundingGrow' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverGrowSkill_C, PairCheckTraceDistance) == 0x000274, "Member 'UBP_AJBOverGrowSkill_C::PairCheckTraceDistance' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverGrowSkill_C, TargetCharacterBP) == 0x000278, "Member 'UBP_AJBOverGrowSkill_C::TargetCharacterBP' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverGrowSkill_C, Rep_GrownTreeCount) == 0x000280, "Member 'UBP_AJBOverGrowSkill_C::Rep_GrownTreeCount' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverGrowSkill_C, TimerUpdateOwnerGetOn) == 0x000288, "Member 'UBP_AJBOverGrowSkill_C::TimerUpdateOwnerGetOn' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverGrowSkill_C, Rep_OwnerGetOn) == 0x000290, "Member 'UBP_AJBOverGrowSkill_C::Rep_OwnerGetOn' has a wrong offset!");

}

