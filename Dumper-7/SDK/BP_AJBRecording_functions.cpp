#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBRecording

#include "Basic.hpp"

#include "BP_AJBRecording_classes.hpp"
#include "BP_AJBRecording_parameters.hpp"


namespace SDK
{

// Function BP_AJBRecording.BP_AJBRecording_C.ExecuteUbergraph_BP_AJBRecording
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBRecording_C::ExecuteUbergraph_BP_AJBRecording(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "ExecuteUbergraph_BP_AJBRecording");

	Params::BP_AJBRecording_C_ExecuteUbergraph_BP_AJBRecording Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBRecording.BP_AJBRecording_C.MC_SyncAutoHitParam
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAJBInGameCharacterBase*          TargetCharacter_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   TargetLocation_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBRecording_C::MC_SyncAutoHitParam(class AAJBInGameCharacterBase* TargetCharacter_0, const struct FVector& TargetLocation_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "MC_SyncAutoHitParam");

	Params::BP_AJBRecording_C_MC_SyncAutoHitParam Parms{};

	Parms.TargetCharacter_0 = TargetCharacter_0;
	Parms.TargetLocation_0 = std::move(TargetLocation_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBRecording.BP_AJBRecording_C.ROS_SyncAutoHitParam
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAJBInGameCharacterBase*          TargetCharacter_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   TargetLocation_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBRecording_C::ROS_SyncAutoHitParam(class AAJBInGameCharacterBase* TargetCharacter_0, const struct FVector& TargetLocation_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "ROS_SyncAutoHitParam");

	Params::BP_AJBRecording_C_ROS_SyncAutoHitParam Parms{};

	Parms.TargetCharacter_0 = TargetCharacter_0;
	Parms.TargetLocation_0 = std::move(TargetLocation_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBRecording.BP_AJBRecording_C.SyncAutoHitParam
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBRecording_C::SyncAutoHitParam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "SyncAutoHitParam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBRecording.BP_AJBRecording_C.OnReticleSwitched
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBRecording_C::OnReticleSwitched()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "OnReticleSwitched");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBRecording.BP_AJBRecording_C.OnEndAutoAiming
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBRecording_C::OnEndAutoAiming()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "OnEndAutoAiming");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBRecording.BP_AJBRecording_C.OnBeginAutoAiming
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBRecording_C::OnBeginAutoAiming()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "OnBeginAutoAiming");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBRecording.BP_AJBRecording_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_AJBRecording_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBRecording.BP_AJBRecording_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBRecording_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "ReceiveTick");

	Params::BP_AJBRecording_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBRecording.BP_AJBRecording_C.AddRecordingTargetServer
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_AJBInGameCharacter_C*         TargetCharacterBP                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBRecording_C::AddRecordingTargetServer(class ABP_AJBInGameCharacter_C* TargetCharacterBP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "AddRecordingTargetServer");

	Params::BP_AJBRecording_C_AddRecordingTargetServer Parms{};

	Parms.TargetCharacterBP = TargetCharacterBP;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBRecording.BP_AJBRecording_C.NotifyTheWorld
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAJBInGameCharacter*              Operator                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EGeneralTiming                          Timing                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bOperatorIsEmpty                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBRecording_C::NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "NotifyTheWorld");

	Params::BP_AJBRecording_C_NotifyTheWorld Parms{};

	Parms.Operator = Operator;
	Parms.Time = Time;
	Parms.Timing = Timing;
	Parms.bEnable = bEnable;
	Parms.bOperatorIsEmpty = bOperatorIsEmpty;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBRecording.BP_AJBRecording_C.OnRelatedCharacterBecomeLastSurvivor
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_AJBRecording_C::OnRelatedCharacterBecomeLastSurvivor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "OnRelatedCharacterBecomeLastSurvivor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBRecording.BP_AJBRecording_C.RemoveTargetByIndex
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBRecording_C::RemoveTargetByIndex(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "RemoveTargetByIndex");

	Params::BP_AJBRecording_C_RemoveTargetByIndex Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBRecording.BP_AJBRecording_C.AddTargetByCharacterBase
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAJBInGameCharacterBase*          TargetCharacter_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBRecording_C::AddTargetByCharacterBase(class AAJBInGameCharacterBase* TargetCharacter_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "AddTargetByCharacterBase");

	Params::BP_AJBRecording_C_AddTargetByCharacterBase Parms{};

	Parms.TargetCharacter_0 = TargetCharacter_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBRecording.BP_AJBRecording_C.UpdateLeftTime
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>*                          RemoveIndexes                                          (Parm, OutParm, ZeroConstructor)

void UBP_AJBRecording_C::UpdateLeftTime(float DeltaSeconds, TArray<int32>* RemoveIndexes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "UpdateLeftTime");

	Params::BP_AJBRecording_C_UpdateLeftTime Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (RemoveIndexes != nullptr)
		*RemoveIndexes = std::move(Parms.RemoveIndexes);
}


// Function BP_AJBRecording.BP_AJBRecording_C.TrySpawnRecordingEmphasizeActor
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_AJBRecording_C::TrySpawnRecordingEmphasizeActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "TrySpawnRecordingEmphasizeActor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBRecording.BP_AJBRecording_C.GetMostNearestTarget
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAJBInGameCharacterBase**         TargetCharacter_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         TargetLocation_0                                       (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBRecording_C::GetMostNearestTarget(class AAJBInGameCharacterBase** TargetCharacter_0, struct FVector* TargetLocation_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "GetMostNearestTarget");

	Params::BP_AJBRecording_C_GetMostNearestTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetCharacter_0 != nullptr)
		*TargetCharacter_0 = Parms.TargetCharacter_0;

	if (TargetLocation_0 != nullptr)
		*TargetLocation_0 = std::move(Parms.TargetLocation_0);
}


// Function BP_AJBRecording.BP_AJBRecording_C.CheckTarget2D
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 Point                                                  (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bTarget                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBRecording_C::CheckTarget2D(const struct FVector2D& Point, bool* bTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "CheckTarget2D");

	Params::BP_AJBRecording_C_CheckTarget2D Parms{};

	Parms.Point = std::move(Point);

	UObject::ProcessEvent(Func, &Parms);

	if (bTarget != nullptr)
		*bTarget = Parms.bTarget;
}


// Function BP_AJBRecording.BP_AJBRecording_C.TryChangeEnableMarker
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AAJBInGameCharacterBase*          TargetCharacter_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBRecording_C::TryChangeEnableMarker(bool bEnable, class AAJBInGameCharacterBase* TargetCharacter_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "TryChangeEnableMarker");

	Params::BP_AJBRecording_C_TryChangeEnableMarker Parms{};

	Parms.bEnable = bEnable;
	Parms.TargetCharacter_0 = TargetCharacter_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBRecording.BP_AJBRecording_C.TryChangeEnableRecordingUI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBRecording_C::TryChangeEnableRecordingUI(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "TryChangeEnableRecordingUI");

	Params::BP_AJBRecording_C_TryChangeEnableRecordingUI Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBRecording.BP_AJBRecording_C.CalcTargetList2D
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AAJBInGameCharacterBase*>& InList                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<struct FST_RecordingTargetInfo>* OutList                                                (Parm, OutParm, ZeroConstructor)

void UBP_AJBRecording_C::CalcTargetList2D(TArray<class AAJBInGameCharacterBase*>& InList, TArray<struct FST_RecordingTargetInfo>* OutList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "CalcTargetList2D");

	Params::BP_AJBRecording_C_CalcTargetList2D Parms{};

	Parms.InList = std::move(InList);

	UObject::ProcessEvent(Func, &Parms);

	InList = std::move(Parms.InList);

	if (OutList != nullptr)
		*OutList = std::move(Parms.OutList);
}


// Function BP_AJBRecording.BP_AJBRecording_C.GetDistanceMostNearestTarget
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float*                                  Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBRecording_C::GetDistanceMostNearestTarget(float* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "GetDistanceMostNearestTarget");

	Params::BP_AJBRecording_C_GetDistanceMostNearestTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function BP_AJBRecording.BP_AJBRecording_C.CheckTargetExist
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   bExist                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBRecording_C::CheckTargetExist(bool* bExist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "CheckTargetExist");

	Params::BP_AJBRecording_C_CheckTargetExist Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bExist != nullptr)
		*bExist = Parms.bExist;
}


// Function BP_AJBRecording.BP_AJBRecording_C.CalcTargetListAttackRange
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AAJBInGameCharacterBase*>& InList                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class AAJBInGameCharacterBase*>* OutList                                                (Parm, OutParm, ZeroConstructor)

void UBP_AJBRecording_C::CalcTargetListAttackRange(TArray<class AAJBInGameCharacterBase*>& InList, TArray<class AAJBInGameCharacterBase*>* OutList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "CalcTargetListAttackRange");

	Params::BP_AJBRecording_C_CalcTargetListAttackRange Parms{};

	Parms.InList = std::move(InList);

	UObject::ProcessEvent(Func, &Parms);

	InList = std::move(Parms.InList);

	if (OutList != nullptr)
		*OutList = std::move(Parms.OutList);
}


// Function BP_AJBRecording.BP_AJBRecording_C.CalcTargetMostNearestCameraLocation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AAJBInGameCharacterBase*>& InList                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<struct FVector>&                 InLocationList                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// class AAJBInGameCharacterBase**         TargetCharacter_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         TargetLocation_0                                       (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBRecording_C::CalcTargetMostNearestCameraLocation(TArray<class AAJBInGameCharacterBase*>& InList, TArray<struct FVector>& InLocationList, class AAJBInGameCharacterBase** TargetCharacter_0, struct FVector* TargetLocation_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "CalcTargetMostNearestCameraLocation");

	Params::BP_AJBRecording_C_CalcTargetMostNearestCameraLocation Parms{};

	Parms.InList = std::move(InList);
	Parms.InLocationList = std::move(InLocationList);

	UObject::ProcessEvent(Func, &Parms);

	InList = std::move(Parms.InList);
	InLocationList = std::move(Parms.InLocationList);

	if (TargetCharacter_0 != nullptr)
		*TargetCharacter_0 = Parms.TargetCharacter_0;

	if (TargetLocation_0 != nullptr)
		*TargetLocation_0 = std::move(Parms.TargetLocation_0);
}


// Function BP_AJBRecording.BP_AJBRecording_C.CheckTargetInAttackRange
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAJBInGameCharacterBase*          TargetCharacter_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bInAttackRange                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBRecording_C::CheckTargetInAttackRange(class AAJBInGameCharacterBase* TargetCharacter_0, bool* bInAttackRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "CheckTargetInAttackRange");

	Params::BP_AJBRecording_C_CheckTargetInAttackRange Parms{};

	Parms.TargetCharacter_0 = TargetCharacter_0;

	UObject::ProcessEvent(Func, &Parms);

	if (bInAttackRange != nullptr)
		*bInAttackRange = Parms.bInAttackRange;
}


// Function BP_AJBRecording.BP_AJBRecording_C.RemoveTargets
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_AJBInGameCharacter_C*         TargetCharacterBP                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBRecording_C::RemoveTargets(class ABP_AJBInGameCharacter_C* TargetCharacterBP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "RemoveTargets");

	Params::BP_AJBRecording_C_RemoveTargets Parms{};

	Parms.TargetCharacterBP = TargetCharacterBP;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBRecording.BP_AJBRecording_C.RemoveTargetByCharacterBP
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAJBInGameCharacterBase*          AJBCharacterBase                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBRecording_C::RemoveTargetByCharacterBP(class AAJBInGameCharacterBase* AJBCharacterBase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "RemoveTargetByCharacterBP");

	Params::BP_AJBRecording_C_RemoveTargetByCharacterBP Parms{};

	Parms.AJBCharacterBase = AJBCharacterBase;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBRecording.BP_AJBRecording_C.TryAddTargets
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_AJBInGameCharacter_C*         TargetCharacterBP                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBRecording_C::TryAddTargets(class ABP_AJBInGameCharacter_C* TargetCharacterBP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "TryAddTargets");

	Params::BP_AJBRecording_C_TryAddTargets Parms{};

	Parms.TargetCharacterBP = TargetCharacterBP;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBRecording.BP_AJBRecording_C.ChangeMarkerTarget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAJBInGameCharacterBase*          TargetCharacter_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBRecording_C::ChangeMarkerTarget(class AAJBInGameCharacterBase* TargetCharacter_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "ChangeMarkerTarget");

	Params::BP_AJBRecording_C_ChangeMarkerTarget Parms{};

	Parms.TargetCharacter_0 = TargetCharacter_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBRecording.BP_AJBRecording_C.CheckTargetCondition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AAJBInGameCharacterBase*>& InList                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class AAJBInGameCharacterBase*>* OutList                                                (Parm, OutParm, ZeroConstructor)

void UBP_AJBRecording_C::CheckTargetCondition(TArray<class AAJBInGameCharacterBase*>& InList, TArray<class AAJBInGameCharacterBase*>* OutList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "CheckTargetCondition");

	Params::BP_AJBRecording_C_CheckTargetCondition Parms{};

	Parms.InList = std::move(InList);

	UObject::ProcessEvent(Func, &Parms);

	InList = std::move(Parms.InList);

	if (OutList != nullptr)
		*OutList = std::move(Parms.OutList);
}


// Function BP_AJBRecording.BP_AJBRecording_C.CheckRecordLimit
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   bLimit                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBRecording_C::CheckRecordLimit(bool* bLimit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "CheckRecordLimit");

	Params::BP_AJBRecording_C_CheckRecordLimit Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bLimit != nullptr)
		*bLimit = Parms.bLimit;
}


// Function BP_AJBRecording.BP_AJBRecording_C.RemoveMostOldestTargets
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_AJBRecording_C::RemoveMostOldestTargets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "RemoveMostOldestTargets");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBRecording.BP_AJBRecording_C.CalcPosition
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVector2D&                 InPosition                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bOutOfScreen                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector2D*                       OutPosition                                            (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBRecording_C::CalcPosition(const struct FVector2D& InPosition, bool bOutOfScreen, struct FVector2D* OutPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "CalcPosition");

	Params::BP_AJBRecording_C_CalcPosition Parms{};

	Parms.InPosition = std::move(InPosition);
	Parms.bOutOfScreen = bOutOfScreen;

	UObject::ProcessEvent(Func, &Parms);

	if (OutPosition != nullptr)
		*OutPosition = std::move(Parms.OutPosition);
}


// Function BP_AJBRecording.BP_AJBRecording_C.CalcTargetObstacle
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FST_RecordingTargetInfo>& InList                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<class AAJBInGameCharacterBase*>* OutList                                                (Parm, OutParm, ZeroConstructor)
// TArray<struct FVector>*                 OutLocationList                                        (Parm, OutParm, ZeroConstructor)

void UBP_AJBRecording_C::CalcTargetObstacle(TArray<struct FST_RecordingTargetInfo>& InList, TArray<class AAJBInGameCharacterBase*>* OutList, TArray<struct FVector>* OutLocationList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "CalcTargetObstacle");

	Params::BP_AJBRecording_C_CalcTargetObstacle Parms{};

	Parms.InList = std::move(InList);

	UObject::ProcessEvent(Func, &Parms);

	InList = std::move(Parms.InList);

	if (OutList != nullptr)
		*OutList = std::move(Parms.OutList);

	if (OutLocationList != nullptr)
		*OutLocationList = std::move(Parms.OutLocationList);
}


// Function BP_AJBRecording.BP_AJBRecording_C.TraceTarget
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   StartLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   EndLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBRecording_C::TraceTarget(const struct FVector& StartLocation, const struct FVector& EndLocation, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "TraceTarget");

	Params::BP_AJBRecording_C_TraceTarget Parms{};

	Parms.StartLocation = std::move(StartLocation);
	Parms.EndLocation = std::move(EndLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function BP_AJBRecording.BP_AJBRecording_C.CheckRemoveTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>*                          RemoveIndexes                                          (Parm, OutParm, ZeroConstructor)

void UBP_AJBRecording_C::CheckRemoveTarget(TArray<int32>* RemoveIndexes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "CheckRemoveTarget");

	Params::BP_AJBRecording_C_CheckRemoveTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RemoveIndexes != nullptr)
		*RemoveIndexes = std::move(Parms.RemoveIndexes);
}


// Function BP_AJBRecording.BP_AJBRecording_C.ShouldRemoveTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAJBInGameCharacterBase*          TargetCharacter_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bShouldRemove                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBRecording_C::ShouldRemoveTarget(class AAJBInGameCharacterBase* TargetCharacter_0, bool* bShouldRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "ShouldRemoveTarget");

	Params::BP_AJBRecording_C_ShouldRemoveTarget Parms{};

	Parms.TargetCharacter_0 = TargetCharacter_0;

	UObject::ProcessEvent(Func, &Parms);

	if (bShouldRemove != nullptr)
		*bShouldRemove = Parms.bShouldRemove;
}


// Function BP_AJBRecording.BP_AJBRecording_C.ShouldAllRemoveTarget
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   bShouldRemove                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBRecording_C::ShouldAllRemoveTarget(bool* bShouldRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "ShouldAllRemoveTarget");

	Params::BP_AJBRecording_C_ShouldAllRemoveTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bShouldRemove != nullptr)
		*bShouldRemove = Parms.bShouldRemove;
}


// Function BP_AJBRecording.BP_AJBRecording_C.RemoveAllTarget
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_AJBRecording_C::RemoveAllTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "RemoveAllTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBRecording.BP_AJBRecording_C.ShouldDisplayRecordingUI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   bShouldDisplay                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBRecording_C::ShouldDisplayRecordingUI(bool* bShouldDisplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "ShouldDisplayRecordingUI");

	Params::BP_AJBRecording_C_ShouldDisplayRecordingUI Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bShouldDisplay != nullptr)
		*bShouldDisplay = Parms.bShouldDisplay;
}


// Function BP_AJBRecording.BP_AJBRecording_C.ShouldEnableAutoAim
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   bShoudEnable                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBRecording_C::ShouldEnableAutoAim(bool* bShoudEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "ShouldEnableAutoAim");

	Params::BP_AJBRecording_C_ShouldEnableAutoAim Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bShoudEnable != nullptr)
		*bShoudEnable = Parms.bShoudEnable;
}


// Function BP_AJBRecording.BP_AJBRecording_C.UpdateReticlePosition
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBRecording_C::UpdateReticlePosition(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "UpdateReticlePosition");

	Params::BP_AJBRecording_C_UpdateReticlePosition Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBRecording.BP_AJBRecording_C.UpdateTargetInfo
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_AJBRecording_C::UpdateTargetInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "UpdateTargetInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBRecording.BP_AJBRecording_C.GetTargetLocations
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AAJBInGameCharacterBase*          TargetCharacter_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         ActorLocation                                          (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         HeadLocation                                           (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBRecording_C::GetTargetLocations(class AAJBInGameCharacterBase* TargetCharacter_0, struct FVector* ActorLocation, struct FVector* HeadLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "GetTargetLocations");

	Params::BP_AJBRecording_C_GetTargetLocations Parms{};

	Parms.TargetCharacter_0 = TargetCharacter_0;

	UObject::ProcessEvent(Func, &Parms);

	if (ActorLocation != nullptr)
		*ActorLocation = std::move(Parms.ActorLocation);

	if (HeadLocation != nullptr)
		*HeadLocation = std::move(Parms.HeadLocation);
}


// Function BP_AJBRecording.BP_AJBRecording_C.InitAutoHitVariables
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_AJBRecording_C::InitAutoHitVariables()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBRecording_C", "InitAutoHitVariables");

	UObject::ProcessEvent(Func, nullptr);
}

}

