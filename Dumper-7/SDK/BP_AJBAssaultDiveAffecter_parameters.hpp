#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBAssaultDiveAffecter

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AJB_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_AJBAssaultDiveAffecter.BP_AJBAssaultDiveAffecter_C.ExecuteUbergraph_BP_AJBAssaultDiveAffecter
// 0x0028 (0x0028 - 0x0000)
struct BP_AJBAssaultDiveAffecter_C_ExecuteUbergraph_BP_AJBAssaultDiveAffecter final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacter*                    K2Node_Event_Operator;                             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Time;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGeneralTiming                                K2Node_Event_Timing;                               // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bEnable;                              // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bOperatorIsEmpty;                     // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBAssaultDiveAffecter_C_ExecuteUbergraph_BP_AJBAssaultDiveAffecter) == 0x000008, "Wrong alignment on BP_AJBAssaultDiveAffecter_C_ExecuteUbergraph_BP_AJBAssaultDiveAffecter");
static_assert(sizeof(BP_AJBAssaultDiveAffecter_C_ExecuteUbergraph_BP_AJBAssaultDiveAffecter) == 0x000028, "Wrong size on BP_AJBAssaultDiveAffecter_C_ExecuteUbergraph_BP_AJBAssaultDiveAffecter");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_ExecuteUbergraph_BP_AJBAssaultDiveAffecter, EntryPoint) == 0x000000, "Member 'BP_AJBAssaultDiveAffecter_C_ExecuteUbergraph_BP_AJBAssaultDiveAffecter::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_ExecuteUbergraph_BP_AJBAssaultDiveAffecter, K2Node_Event_Operator) == 0x000008, "Member 'BP_AJBAssaultDiveAffecter_C_ExecuteUbergraph_BP_AJBAssaultDiveAffecter::K2Node_Event_Operator' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_ExecuteUbergraph_BP_AJBAssaultDiveAffecter, K2Node_Event_Time) == 0x000010, "Member 'BP_AJBAssaultDiveAffecter_C_ExecuteUbergraph_BP_AJBAssaultDiveAffecter::K2Node_Event_Time' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_ExecuteUbergraph_BP_AJBAssaultDiveAffecter, K2Node_Event_Timing) == 0x000014, "Member 'BP_AJBAssaultDiveAffecter_C_ExecuteUbergraph_BP_AJBAssaultDiveAffecter::K2Node_Event_Timing' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_ExecuteUbergraph_BP_AJBAssaultDiveAffecter, K2Node_Event_bEnable) == 0x000015, "Member 'BP_AJBAssaultDiveAffecter_C_ExecuteUbergraph_BP_AJBAssaultDiveAffecter::K2Node_Event_bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_ExecuteUbergraph_BP_AJBAssaultDiveAffecter, K2Node_Event_bOperatorIsEmpty) == 0x000016, "Member 'BP_AJBAssaultDiveAffecter_C_ExecuteUbergraph_BP_AJBAssaultDiveAffecter::K2Node_Event_bOperatorIsEmpty' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_ExecuteUbergraph_BP_AJBAssaultDiveAffecter, CallFunc_GetObjectClass_ReturnValue) == 0x000018, "Member 'BP_AJBAssaultDiveAffecter_C_ExecuteUbergraph_BP_AJBAssaultDiveAffecter::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_ExecuteUbergraph_BP_AJBAssaultDiveAffecter, K2Node_Event_DeltaSeconds) == 0x000020, "Member 'BP_AJBAssaultDiveAffecter_C_ExecuteUbergraph_BP_AJBAssaultDiveAffecter::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function BP_AJBAssaultDiveAffecter.BP_AJBAssaultDiveAffecter_C.UpdateLocation
// 0x00D8 (0x00D8 - 0x0000)
struct BP_AJBAssaultDiveAffecter_C_UpdateLocation final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_ANS_C*           K2Node_DynamicCast_AsBP_AJBIn_Game_Character_ANS;  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0014(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCurrentNormal_Normal;                  // 0x0020(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x002C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0038(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0048(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBAssaultDiveAffecter_C_UpdateLocation) == 0x000008, "Wrong alignment on BP_AJBAssaultDiveAffecter_C_UpdateLocation");
static_assert(sizeof(BP_AJBAssaultDiveAffecter_C_UpdateLocation) == 0x0000D8, "Wrong size on BP_AJBAssaultDiveAffecter_C_UpdateLocation");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_UpdateLocation, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'BP_AJBAssaultDiveAffecter_C_UpdateLocation::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_UpdateLocation, K2Node_DynamicCast_AsBP_AJBIn_Game_Character_ANS) == 0x000008, "Member 'BP_AJBAssaultDiveAffecter_C_UpdateLocation::K2Node_DynamicCast_AsBP_AJBIn_Game_Character_ANS' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_UpdateLocation, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_AJBAssaultDiveAffecter_C_UpdateLocation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_UpdateLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000014, "Member 'BP_AJBAssaultDiveAffecter_C_UpdateLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_UpdateLocation, CallFunc_GetCurrentNormal_Normal) == 0x000020, "Member 'BP_AJBAssaultDiveAffecter_C_UpdateLocation::CallFunc_GetCurrentNormal_Normal' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_UpdateLocation, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00002C, "Member 'BP_AJBAssaultDiveAffecter_C_UpdateLocation::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_UpdateLocation, CallFunc_Add_VectorVector_ReturnValue) == 0x000038, "Member 'BP_AJBAssaultDiveAffecter_C_UpdateLocation::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_UpdateLocation, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000048, "Member 'BP_AJBAssaultDiveAffecter_C_UpdateLocation::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_UpdateLocation, CallFunc_K2_SetActorLocation_ReturnValue) == 0x0000D0, "Member 'BP_AJBAssaultDiveAffecter_C_UpdateLocation::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");

// Function BP_AJBAssaultDiveAffecter.BP_AJBAssaultDiveAffecter_C.NotifyTheWorld
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBAssaultDiveAffecter_C_NotifyTheWorld final
{
public:
	class AAJBInGameCharacter*                    Operator;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGeneralTiming                                Timing;                                            // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnable;                                           // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bOperatorIsEmpty;                                  // 0x000E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBAssaultDiveAffecter_C_NotifyTheWorld) == 0x000008, "Wrong alignment on BP_AJBAssaultDiveAffecter_C_NotifyTheWorld");
static_assert(sizeof(BP_AJBAssaultDiveAffecter_C_NotifyTheWorld) == 0x000010, "Wrong size on BP_AJBAssaultDiveAffecter_C_NotifyTheWorld");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_NotifyTheWorld, Operator) == 0x000000, "Member 'BP_AJBAssaultDiveAffecter_C_NotifyTheWorld::Operator' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_NotifyTheWorld, Time) == 0x000008, "Member 'BP_AJBAssaultDiveAffecter_C_NotifyTheWorld::Time' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_NotifyTheWorld, Timing) == 0x00000C, "Member 'BP_AJBAssaultDiveAffecter_C_NotifyTheWorld::Timing' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_NotifyTheWorld, bEnable) == 0x00000D, "Member 'BP_AJBAssaultDiveAffecter_C_NotifyTheWorld::bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_NotifyTheWorld, bOperatorIsEmpty) == 0x00000E, "Member 'BP_AJBAssaultDiveAffecter_C_NotifyTheWorld::bOperatorIsEmpty' has a wrong offset!");

// Function BP_AJBAssaultDiveAffecter.BP_AJBAssaultDiveAffecter_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBAssaultDiveAffecter_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBAssaultDiveAffecter_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_AJBAssaultDiveAffecter_C_ReceiveTick");
static_assert(sizeof(BP_AJBAssaultDiveAffecter_C_ReceiveTick) == 0x000004, "Wrong size on BP_AJBAssaultDiveAffecter_C_ReceiveTick");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_AJBAssaultDiveAffecter_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_AJBAssaultDiveAffecter.BP_AJBAssaultDiveAffecter_C.GetLocationAsCheckArea
// 0x0080 (0x0080 - 0x0000)
struct BP_AJBAssaultDiveAffecter_C_GetLocationAsCheckArea final
{
public:
	TArray<struct FVector>                        Location;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<struct FVector>                        TempLocation;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               CallFunc_GetAJBCharacterFromActor_CharacterBP;     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBCharacterFromActor_bSuccess;        // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0034(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_ANS_C*           K2Node_DynamicCast_AsBP_AJBIn_Game_Character_ANS;  // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B[0x1];                                       // 0x004B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetCurrentMeshOffset_Offset;              // 0x004C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0058(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0064(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0070(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBAssaultDiveAffecter_C_GetLocationAsCheckArea) == 0x000008, "Wrong alignment on BP_AJBAssaultDiveAffecter_C_GetLocationAsCheckArea");
static_assert(sizeof(BP_AJBAssaultDiveAffecter_C_GetLocationAsCheckArea) == 0x000080, "Wrong size on BP_AJBAssaultDiveAffecter_C_GetLocationAsCheckArea");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_GetLocationAsCheckArea, Location) == 0x000000, "Member 'BP_AJBAssaultDiveAffecter_C_GetLocationAsCheckArea::Location' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_GetLocationAsCheckArea, TempLocation) == 0x000010, "Member 'BP_AJBAssaultDiveAffecter_C_GetLocationAsCheckArea::TempLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_GetLocationAsCheckArea, CallFunc_GetOwner_ReturnValue) == 0x000020, "Member 'BP_AJBAssaultDiveAffecter_C_GetLocationAsCheckArea::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_GetLocationAsCheckArea, CallFunc_GetAJBCharacterFromActor_CharacterBP) == 0x000028, "Member 'BP_AJBAssaultDiveAffecter_C_GetLocationAsCheckArea::CallFunc_GetAJBCharacterFromActor_CharacterBP' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_GetLocationAsCheckArea, CallFunc_GetAJBCharacterFromActor_bSuccess) == 0x000030, "Member 'BP_AJBAssaultDiveAffecter_C_GetLocationAsCheckArea::CallFunc_GetAJBCharacterFromActor_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_GetLocationAsCheckArea, CallFunc_MakeVector_ReturnValue) == 0x000034, "Member 'BP_AJBAssaultDiveAffecter_C_GetLocationAsCheckArea::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_GetLocationAsCheckArea, K2Node_DynamicCast_AsBP_AJBIn_Game_Character_ANS) == 0x000040, "Member 'BP_AJBAssaultDiveAffecter_C_GetLocationAsCheckArea::K2Node_DynamicCast_AsBP_AJBIn_Game_Character_ANS' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_GetLocationAsCheckArea, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_AJBAssaultDiveAffecter_C_GetLocationAsCheckArea::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_GetLocationAsCheckArea, CallFunc_IsValid_ReturnValue) == 0x000049, "Member 'BP_AJBAssaultDiveAffecter_C_GetLocationAsCheckArea::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_GetLocationAsCheckArea, CallFunc_IsValid_ReturnValue1) == 0x00004A, "Member 'BP_AJBAssaultDiveAffecter_C_GetLocationAsCheckArea::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_GetLocationAsCheckArea, CallFunc_GetCurrentMeshOffset_Offset) == 0x00004C, "Member 'BP_AJBAssaultDiveAffecter_C_GetLocationAsCheckArea::CallFunc_GetCurrentMeshOffset_Offset' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_GetLocationAsCheckArea, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000058, "Member 'BP_AJBAssaultDiveAffecter_C_GetLocationAsCheckArea::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_GetLocationAsCheckArea, CallFunc_Add_VectorVector_ReturnValue) == 0x000064, "Member 'BP_AJBAssaultDiveAffecter_C_GetLocationAsCheckArea::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_GetLocationAsCheckArea, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000070, "Member 'BP_AJBAssaultDiveAffecter_C_GetLocationAsCheckArea::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_GetLocationAsCheckArea, CallFunc_Array_Add_ReturnValue) == 0x00007C, "Member 'BP_AJBAssaultDiveAffecter_C_GetLocationAsCheckArea::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_AJBAssaultDiveAffecter.BP_AJBAssaultDiveAffecter_C.GetPartitionLocation
// 0x0068 (0x0068 - 0x0000)
struct BP_AJBAssaultDiveAffecter_C_GetPartitionLocation final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0004(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        CallFunc_GetLocationAsCheckArea_Location;          // 0x0010(0x0010)(ZeroConstructor, ReferenceParm)
	struct FRotator                               CallFunc_GetRotationAsCheckArea_Rotation;          // 0x0020(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x002C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0040(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x004C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0058(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBAssaultDiveAffecter_C_GetPartitionLocation) == 0x000008, "Wrong alignment on BP_AJBAssaultDiveAffecter_C_GetPartitionLocation");
static_assert(sizeof(BP_AJBAssaultDiveAffecter_C_GetPartitionLocation) == 0x000068, "Wrong size on BP_AJBAssaultDiveAffecter_C_GetPartitionLocation");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_GetPartitionLocation, Index_0) == 0x000000, "Member 'BP_AJBAssaultDiveAffecter_C_GetPartitionLocation::Index_0' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_GetPartitionLocation, Location) == 0x000004, "Member 'BP_AJBAssaultDiveAffecter_C_GetPartitionLocation::Location' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_GetPartitionLocation, CallFunc_GetLocationAsCheckArea_Location) == 0x000010, "Member 'BP_AJBAssaultDiveAffecter_C_GetPartitionLocation::CallFunc_GetLocationAsCheckArea_Location' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_GetPartitionLocation, CallFunc_GetRotationAsCheckArea_Rotation) == 0x000020, "Member 'BP_AJBAssaultDiveAffecter_C_GetPartitionLocation::CallFunc_GetRotationAsCheckArea_Rotation' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_GetPartitionLocation, CallFunc_Array_Get_Item) == 0x00002C, "Member 'BP_AJBAssaultDiveAffecter_C_GetPartitionLocation::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_GetPartitionLocation, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000038, "Member 'BP_AJBAssaultDiveAffecter_C_GetPartitionLocation::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_GetPartitionLocation, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00003C, "Member 'BP_AJBAssaultDiveAffecter_C_GetPartitionLocation::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_GetPartitionLocation, CallFunc_MakeVector_ReturnValue) == 0x000040, "Member 'BP_AJBAssaultDiveAffecter_C_GetPartitionLocation::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_GetPartitionLocation, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x00004C, "Member 'BP_AJBAssaultDiveAffecter_C_GetPartitionLocation::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_GetPartitionLocation, CallFunc_Add_VectorVector_ReturnValue) == 0x000058, "Member 'BP_AJBAssaultDiveAffecter_C_GetPartitionLocation::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function BP_AJBAssaultDiveAffecter.BP_AJBAssaultDiveAffecter_C.GetRotationAsCheckArea
// 0x000C (0x000C - 0x0000)
struct BP_AJBAssaultDiveAffecter_C_GetRotationAsCheckArea final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBAssaultDiveAffecter_C_GetRotationAsCheckArea) == 0x000004, "Wrong alignment on BP_AJBAssaultDiveAffecter_C_GetRotationAsCheckArea");
static_assert(sizeof(BP_AJBAssaultDiveAffecter_C_GetRotationAsCheckArea) == 0x00000C, "Wrong size on BP_AJBAssaultDiveAffecter_C_GetRotationAsCheckArea");
static_assert(offsetof(BP_AJBAssaultDiveAffecter_C_GetRotationAsCheckArea, Rotation) == 0x000000, "Member 'BP_AJBAssaultDiveAffecter_C_GetRotationAsCheckArea::Rotation' has a wrong offset!");

}

