#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: USBFinderPlugin

#include "Basic.hpp"

#include "USBFinderPlugin_classes.hpp"
#include "USBFinderPlugin_parameters.hpp"


namespace SDK
{

// Function USBFinderPlugin.USBFinderPluginBPLibrary.CheckSerialNumber
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool                                    Repossession                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    TitleCode1                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Area                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            AccountList                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    TitleCode2                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          outSerialNumber                                        (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EusbFinderError                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EusbFinderError UUSBFinderPluginBPLibrary::CheckSerialNumber(bool Repossession, const class FString& TitleCode1, const class FString& Area, const TArray<class FString>& AccountList, const class FString& TitleCode2, class FString* outSerialNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("USBFinderPluginBPLibrary", "CheckSerialNumber");

	Params::USBFinderPluginBPLibrary_CheckSerialNumber Parms{};

	Parms.Repossession = Repossession;
	Parms.TitleCode1 = std::move(TitleCode1);
	Parms.Area = std::move(Area);
	Parms.AccountList = std::move(AccountList);
	Parms.TitleCode2 = std::move(TitleCode2);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (outSerialNumber != nullptr)
		*outSerialNumber = std::move(Parms.outSerialNumber);

	return Parms.ReturnValue;
}


// Function USBFinderPlugin.USBFinderPluginBPLibrary.GetAccount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    Repossession                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UUSBFinderPluginBPLibrary::GetAccount(bool Repossession)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("USBFinderPluginBPLibrary", "GetAccount");

	Params::USBFinderPluginBPLibrary_GetAccount Parms{};

	Parms.Repossession = Repossession;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function USBFinderPlugin.USBFinderPluginBPLibrary.IsConnected
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUSBFinderPluginBPLibrary::IsConnected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("USBFinderPluginBPLibrary", "IsConnected");

	Params::USBFinderPluginBPLibrary_IsConnected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function USBFinderPlugin.USBFinderPluginBPLibrary.IsOutofRange
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Models                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Area                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            AccountList                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    Unique                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUSBFinderPluginBPLibrary::IsOutofRange(const class FString& Models, const class FString& Area, const TArray<class FString>& AccountList, const class FString& Unique)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("USBFinderPluginBPLibrary", "IsOutofRange");

	Params::USBFinderPluginBPLibrary_IsOutofRange Parms{};

	Parms.Models = std::move(Models);
	Parms.Area = std::move(Area);
	Parms.AccountList = std::move(AccountList);
	Parms.Unique = std::move(Unique);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

