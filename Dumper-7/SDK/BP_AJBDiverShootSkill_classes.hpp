#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBDiverShootSkill

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BP_AJBCloseRangeSkill_classes.hpp"
#include "AJB_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBDiverShootSkill.BP_AJBDiverShootSkill_C
// 0x0068 (0x0468 - 0x0400)
class UBP_AJBDiverShootSkill_C final : public UBP_AJBCloseRangeSkill_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBDiverShootSkill_C;            // 0x0400(0x0008)(Transient, DuplicateTransient)
	float                                         ChargeTime;                                        // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40C[0x4];                                      // 0x040C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameParticleEffect_C*          ChargeParticle;                                    // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           ChargeSE;                                          // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ChargeSETag;                                       // 0x0420(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ShockWaveSETag;                                    // 0x0428(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           PenetrationSETag;                                  // 0x0430(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           StartVoiceTag;                                     // 0x0438(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bHitted;                                           // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_441[0x3];                                      // 0x0441(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         KillCount;                                         // 0x0444(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           NotHitVoiceTag;                                    // 0x0448(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           MultiKillVoiceTag;                                 // 0x0450(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_AJBInGameCharacter_C*>       HittedCharacter;                                   // 0x0458(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_AJBDiverShootSkill(int32 EntryPoint);
	void OnMC_Penetrate(const struct FVector& Location, const struct FVector& Normal, bool bCharacter);
	void OnKill(const struct FGameplayTag& SkillTag_0, int32 SerialNumber_0, float AttackDistance, uint8 KilledCharacterId, bool bWithSeparatedStandAttack, bool bHitEnemysSeparatedStand, bool bFirstBlood, int32 UltimateSkillSerialNumberIfInEffect, float ElapsedTime, int32 DeadPlayerId, bool bIsLastDefeated, bool bPlayerKill, bool bSpecialKill, bool bSelfKill);
	void OnMultipleHit(EAJBSkillType SkillType_0, int32 HittedCharacterCount, int32 BlockedCharacterCount, int32 InvalidatedCharacterCount);
	void OnEndState(bool bCancel, bool bRestore);
	void OnStateCharge();
	void UpdateCharge(float DeltaSeconds);
	void OnBlendOut_7B45FB9D406D5826C78546BC45D65994(class FName NotifyName);
	void OnBlendOut_7B45FB9D406D5826C78546BC9E185F52(class FName NotifyName);
	void OnBlendOut_7B45FB9D406D5826C78546BCD09E7689(class FName NotifyName);
	void OnCompleted_7B45FB9D406D5826C78546BC45D65994(class FName NotifyName);
	void OnCompleted_7B45FB9D406D5826C78546BC9E185F52(class FName NotifyName);
	void OnCompleted_7B45FB9D406D5826C78546BCD09E7689(class FName NotifyName);
	void OnInterrupted_7B45FB9D406D5826C78546BC45D65994(class FName NotifyName);
	void OnInterrupted_7B45FB9D406D5826C78546BC9E185F52(class FName NotifyName);
	void OnInterrupted_7B45FB9D406D5826C78546BCD09E7689(class FName NotifyName);
	void OnNotifyBegin_7B45FB9D406D5826C78546BC45D65994(class FName NotifyName);
	void OnNotifyBegin_7B45FB9D406D5826C78546BC9E185F52(class FName NotifyName);
	void OnNotifyBegin_7B45FB9D406D5826C78546BCD09E7689(class FName NotifyName);
	void OnNotifyEnd_7B45FB9D406D5826C78546BC45D65994(class FName NotifyName);
	void OnNotifyEnd_7B45FB9D406D5826C78546BC9E185F52(class FName NotifyName);
	void OnNotifyEnd_7B45FB9D406D5826C78546BCD09E7689(class FName NotifyName);
	void PlayImpactAnimation();
	void HitWait(class AActor* HitActor, class UActorComponent* HitComponent, const struct FVector& HitLocation, const struct FVector& HitNormal, float CuttingRate, EPhysicalSurface SurfaceType, bool bDisableDamage, bool bInvincible, bool bIsPenetration, bool bBlockedByAAP, bool bHeadShot, bool bAvoidSkill);
	void OnDash(uint8 RepeatCount_0, bool bRedash);
	void StateTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void OnCancel();
	void OnActive();
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);
	void InitializeVariables();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBDiverShootSkill_C">();
	}
	static class UBP_AJBDiverShootSkill_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBDiverShootSkill_C>();
	}
};
static_assert(alignof(UBP_AJBDiverShootSkill_C) == 0x000008, "Wrong alignment on UBP_AJBDiverShootSkill_C");
static_assert(sizeof(UBP_AJBDiverShootSkill_C) == 0x000468, "Wrong size on UBP_AJBDiverShootSkill_C");
static_assert(offsetof(UBP_AJBDiverShootSkill_C, UberGraphFrame_BP_AJBDiverShootSkill_C) == 0x000400, "Member 'UBP_AJBDiverShootSkill_C::UberGraphFrame_BP_AJBDiverShootSkill_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBDiverShootSkill_C, ChargeTime) == 0x000408, "Member 'UBP_AJBDiverShootSkill_C::ChargeTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBDiverShootSkill_C, ChargeParticle) == 0x000410, "Member 'UBP_AJBDiverShootSkill_C::ChargeParticle' has a wrong offset!");
static_assert(offsetof(UBP_AJBDiverShootSkill_C, ChargeSE) == 0x000418, "Member 'UBP_AJBDiverShootSkill_C::ChargeSE' has a wrong offset!");
static_assert(offsetof(UBP_AJBDiverShootSkill_C, ChargeSETag) == 0x000420, "Member 'UBP_AJBDiverShootSkill_C::ChargeSETag' has a wrong offset!");
static_assert(offsetof(UBP_AJBDiverShootSkill_C, ShockWaveSETag) == 0x000428, "Member 'UBP_AJBDiverShootSkill_C::ShockWaveSETag' has a wrong offset!");
static_assert(offsetof(UBP_AJBDiverShootSkill_C, PenetrationSETag) == 0x000430, "Member 'UBP_AJBDiverShootSkill_C::PenetrationSETag' has a wrong offset!");
static_assert(offsetof(UBP_AJBDiverShootSkill_C, StartVoiceTag) == 0x000438, "Member 'UBP_AJBDiverShootSkill_C::StartVoiceTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBDiverShootSkill_C, bHitted) == 0x000440, "Member 'UBP_AJBDiverShootSkill_C::bHitted' has a wrong offset!");
static_assert(offsetof(UBP_AJBDiverShootSkill_C, KillCount) == 0x000444, "Member 'UBP_AJBDiverShootSkill_C::KillCount' has a wrong offset!");
static_assert(offsetof(UBP_AJBDiverShootSkill_C, NotHitVoiceTag) == 0x000448, "Member 'UBP_AJBDiverShootSkill_C::NotHitVoiceTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBDiverShootSkill_C, MultiKillVoiceTag) == 0x000450, "Member 'UBP_AJBDiverShootSkill_C::MultiKillVoiceTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBDiverShootSkill_C, HittedCharacter) == 0x000458, "Member 'UBP_AJBDiverShootSkill_C::HittedCharacter' has a wrong offset!");

}

