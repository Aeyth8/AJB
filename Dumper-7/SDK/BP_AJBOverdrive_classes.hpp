#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBOverdrive

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BP_AJBPassiveSkillBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBOverdrive.BP_AJBOverdrive_C
// 0x0048 (0x0258 - 0x0210)
class UBP_AJBOverdrive_C final : public UBP_AJBPassiveSkillBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBOverdrive_C;                  // 0x0210(0x0008)(Transient, DuplicateTransient)
	struct FGameplayTag                           EndParticleTag;                                    // 0x0218(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           FinishedPassiveSETag;                              // 0x0220(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         MoveSpeedRate;                                     // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CharacterJumpSpeedScale;                           // 0x022C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GravityScale;                                      // 0x0230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinLandingStopHeight;                              // 0x0234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxLandingStopHeight;                              // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Attack___;                                         // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Defence___;                                        // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinLandingStopTime;                                // 0x0244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxLandingStopTime;                                // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BeforeLandingMontageAnimSeqLength;                 // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         JumpMaxHoldTime;                                   // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBOverdrive(int32 EntryPoint);
	void SpawnEndEffect();
	void ActiveOverdriveUI();
	void OnContinuedParticleActivated();
	void ReceiveBeginPlay();
	void OnActionInactivate(bool bTriggeredByStand);
	void OnActionActivate(bool bTriggeredByStand);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBOverdrive_C">();
	}
	static class UBP_AJBOverdrive_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBOverdrive_C>();
	}
};
static_assert(alignof(UBP_AJBOverdrive_C) == 0x000008, "Wrong alignment on UBP_AJBOverdrive_C");
static_assert(sizeof(UBP_AJBOverdrive_C) == 0x000258, "Wrong size on UBP_AJBOverdrive_C");
static_assert(offsetof(UBP_AJBOverdrive_C, UberGraphFrame_BP_AJBOverdrive_C) == 0x000210, "Member 'UBP_AJBOverdrive_C::UberGraphFrame_BP_AJBOverdrive_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverdrive_C, EndParticleTag) == 0x000218, "Member 'UBP_AJBOverdrive_C::EndParticleTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverdrive_C, FinishedPassiveSETag) == 0x000220, "Member 'UBP_AJBOverdrive_C::FinishedPassiveSETag' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverdrive_C, MoveSpeedRate) == 0x000228, "Member 'UBP_AJBOverdrive_C::MoveSpeedRate' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverdrive_C, CharacterJumpSpeedScale) == 0x00022C, "Member 'UBP_AJBOverdrive_C::CharacterJumpSpeedScale' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverdrive_C, GravityScale) == 0x000230, "Member 'UBP_AJBOverdrive_C::GravityScale' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverdrive_C, MinLandingStopHeight) == 0x000234, "Member 'UBP_AJBOverdrive_C::MinLandingStopHeight' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverdrive_C, MaxLandingStopHeight) == 0x000238, "Member 'UBP_AJBOverdrive_C::MaxLandingStopHeight' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverdrive_C, Attack___) == 0x00023C, "Member 'UBP_AJBOverdrive_C::Attack___' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverdrive_C, Defence___) == 0x000240, "Member 'UBP_AJBOverdrive_C::Defence___' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverdrive_C, MinLandingStopTime) == 0x000244, "Member 'UBP_AJBOverdrive_C::MinLandingStopTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverdrive_C, MaxLandingStopTime) == 0x000248, "Member 'UBP_AJBOverdrive_C::MaxLandingStopTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverdrive_C, BeforeLandingMontageAnimSeqLength) == 0x00024C, "Member 'UBP_AJBOverdrive_C::BeforeLandingMontageAnimSeqLength' has a wrong offset!");
static_assert(offsetof(UBP_AJBOverdrive_C, JumpMaxHoldTime) == 0x000250, "Member 'UBP_AJBOverdrive_C::JumpMaxHoldTime' has a wrong offset!");

}

