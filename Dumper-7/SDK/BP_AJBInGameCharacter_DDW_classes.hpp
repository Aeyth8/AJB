#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameCharacter_DDW

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AJB_structs.hpp"
#include "BP_AJBInGameCharacter_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBInGameCharacter_DDW.BP_AJBInGameCharacter_DDW_C
// 0x0040 (0x17F0 - 0x17B0)
class ABP_AJBInGameCharacter_DDW_C final : public ABP_AJBInGameCharacter_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBInGameCharacter_DDW_C;        // 0x17A8(0x0008)(Transient, DuplicateTransient)
	class UBP_AJBWallClimb_C*                     BP_AJBWallClimb;                                   // 0x17B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          ParticlePreview;                                   // 0x17B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxStepHeightDefault;                              // 0x17C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxStepHeightIndoor;                               // 0x17C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WalkableFloorAngleDefault;                         // 0x17C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WalkableFloorAngleIndoor;                          // 0x17CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MeshLocationOffset;                                // 0x17D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShowPreviewParticleOnPairEnv;                     // 0x17D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17D5[0x3];                                     // 0x17D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameParticleEffect_C*          ParticlePreviewNG;                                 // 0x17D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 MovementModeBeforeTimeStop;                        // 0x17E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRepShouldShowPreviewParticle;                     // 0x17E1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bRepEnable;                                        // 0x17E2(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          bMeshVisible;                                      // 0x17E3(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	int32                                         TranslucentSortPriorityPreview;                    // 0x17E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBInGameCharacter_DDW(int32 EntryPoint);
	void SetupInteract();
	void TryDestroyPreviewParticle();
	void TrySpawnPreviewParticle();
	void ChangeVisual(bool bPossiblePlacement);
	void ChangeMesh(class UStaticMesh* NewStaticMesh);
	void SetSerialNumber(int32 SerialNumber);
	void ChangeEnableServer(bool bEnable);
	void ChangeEnableCore(bool bEnable);
	void SetupPropertyStandInteract();
	void FollowCharacterWhenUnpossessed_OnServer();
	void ChangeEnable(bool bEnable);
	void ChangeMeshVisibleServer(bool bNewVisibility);
	void ChangeMeshVisibleCore(bool bNewVisibility);
	void ROS_AdjustmentLocation(const struct FVector& Location, const struct FRotator& Rotation);
	void SetVisibility(bool NewVisibility);
	void GetCurrentNormal(struct FVector* Normal);
	void GetCurrentRotate(struct FRotator* Rotation);
	void GetCurrentMeshOffset(struct FVector* Offset);
	void ShouldSpawnPreviewParticle(bool* bShouldSpawn);
	void UpdateParameters();
	void CheckWallClimbStateAction(bool* bStateAction);
	void CreateDMIFlow();
	void ChangeParticlesTransform(const struct FTransform& NewTransform);
	void UpdateParticlesVisibility();
	void UpdateParticlesSpawn();
	void OnRep_bRepEnable();
	void OnRep_bMeshVisible();
	void GetPropertyOwnerCharacterBP(class ABP_AJBInGameCharacter_C** CharacterBP);
	void GetPropertyType(EAJBCharacterPropertyType* PropertyType);
	void TracableByAI(bool* bTracable);
	void DetectableByTrap(bool* bDetectable);
	void TreatAsCharacterBySpecialProjectile(bool* bTreat);
	void IsDetectableByDirectAttackGuide(bool* bIsDetectable);
	void IsTargetCO2Scan(bool* IsTarget);
	void IsTargetClourBarrier(bool* IsTarget);
	void IsTargetOverGrow(bool* IsTarget);
	void IsPlayOwnerVoiceOnGetItem(bool* bIsPlay);
	void IsPlayOwnerVoiceOnJump(bool* bIsPlay);
	void IsPlayOwnerVoiceOnPassThruEnter(bool* bIsPlay);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void OnReleasedEmote();
	void OnPressedEmote();
	void OnReleasedJump();
	void OnPressedJump();
	void OnReleasedCrouch();
	void OnPressedCrouch();
	void OnPressedR2();
	void OnSpectated_Local();
	void ChangeMovementModeOnTimeStop(bool bEnable, bool bOperatorIsEmpty);
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);
	void UserConstructionScript();
	void SetSystemEnable(bool bEnable, bool bCollision, bool bGravity, bool bSpringArm, bool bMovement);
	void ChangeSystemDisable(bool bCollision, bool bGravity, bool bSpringArm, bool bMovement, bool bRestore);
	void ChangeSystemEnable(bool bCollision, bool bGravity, bool bSpringArm, bool bMovement, bool bRestore);
	void ResetSystemEnable(bool bRestore);
	void CheckAnyCharacterMovementSkillActive(bool* bWithCharacterMovement);
	void CheckPossibleDash(bool* bPossible);
	void CheckDisableDamage(class AActor* DamageCauser, bool bIgnoreSelf, bool* bDisableDamage_0);
	void CheckDisablePassive(class AActor* PassiveCauser, const struct FGameplayTag& PassiveTag, bool bIgnoreSelf, bool* bDisablePassive_0);
	void CheckDisableAreaDamage(bool* bDisableAreadamage_0);
	void CheckTargetSelf(class AActor* DamageCauser, bool bForDamageOverlap, bool bIgnoreMovableStand, bool bIncludeSelf, bool bAfterReflectShouldHitOwner, bool* bTarget);
	void InteractableOperator(class AActor* InteractActor, bool* bReturnValue);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBInGameCharacter_DDW_C">();
	}
	static class ABP_AJBInGameCharacter_DDW_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBInGameCharacter_DDW_C>();
	}
};
static_assert(alignof(ABP_AJBInGameCharacter_DDW_C) == 0x000010, "Wrong alignment on ABP_AJBInGameCharacter_DDW_C");
static_assert(sizeof(ABP_AJBInGameCharacter_DDW_C) == 0x0017F0, "Wrong size on ABP_AJBInGameCharacter_DDW_C");
static_assert(offsetof(ABP_AJBInGameCharacter_DDW_C, UberGraphFrame_BP_AJBInGameCharacter_DDW_C) == 0x0017A8, "Member 'ABP_AJBInGameCharacter_DDW_C::UberGraphFrame_BP_AJBInGameCharacter_DDW_C' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_DDW_C, BP_AJBWallClimb) == 0x0017B0, "Member 'ABP_AJBInGameCharacter_DDW_C::BP_AJBWallClimb' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_DDW_C, ParticlePreview) == 0x0017B8, "Member 'ABP_AJBInGameCharacter_DDW_C::ParticlePreview' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_DDW_C, MaxStepHeightDefault) == 0x0017C0, "Member 'ABP_AJBInGameCharacter_DDW_C::MaxStepHeightDefault' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_DDW_C, MaxStepHeightIndoor) == 0x0017C4, "Member 'ABP_AJBInGameCharacter_DDW_C::MaxStepHeightIndoor' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_DDW_C, WalkableFloorAngleDefault) == 0x0017C8, "Member 'ABP_AJBInGameCharacter_DDW_C::WalkableFloorAngleDefault' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_DDW_C, WalkableFloorAngleIndoor) == 0x0017CC, "Member 'ABP_AJBInGameCharacter_DDW_C::WalkableFloorAngleIndoor' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_DDW_C, MeshLocationOffset) == 0x0017D0, "Member 'ABP_AJBInGameCharacter_DDW_C::MeshLocationOffset' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_DDW_C, bShowPreviewParticleOnPairEnv) == 0x0017D4, "Member 'ABP_AJBInGameCharacter_DDW_C::bShowPreviewParticleOnPairEnv' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_DDW_C, ParticlePreviewNG) == 0x0017D8, "Member 'ABP_AJBInGameCharacter_DDW_C::ParticlePreviewNG' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_DDW_C, MovementModeBeforeTimeStop) == 0x0017E0, "Member 'ABP_AJBInGameCharacter_DDW_C::MovementModeBeforeTimeStop' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_DDW_C, bRepShouldShowPreviewParticle) == 0x0017E1, "Member 'ABP_AJBInGameCharacter_DDW_C::bRepShouldShowPreviewParticle' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_DDW_C, bRepEnable) == 0x0017E2, "Member 'ABP_AJBInGameCharacter_DDW_C::bRepEnable' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_DDW_C, bMeshVisible) == 0x0017E3, "Member 'ABP_AJBInGameCharacter_DDW_C::bMeshVisible' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameCharacter_DDW_C, TranslucentSortPriorityPreview) == 0x0017E4, "Member 'ABP_AJBInGameCharacter_DDW_C::TranslucentSortPriorityPreview' has a wrong offset!");

}

