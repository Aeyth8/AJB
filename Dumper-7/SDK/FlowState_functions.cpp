#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FlowState

#include "Basic.hpp"

#include "FlowState_classes.hpp"
#include "FlowState_parameters.hpp"


namespace SDK
{

// Function FlowState.FlowStateUtil.ChangeState
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFlowStateHandler&               StateHandler                                           (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              NextStateTag                                           (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFlowStateUtil::ChangeState(struct FFlowStateHandler& StateHandler, const struct FGameplayTag& NextStateTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FlowStateUtil", "ChangeState");

	Params::FlowStateUtil_ChangeState Parms{};

	Parms.StateHandler = std::move(StateHandler);
	Parms.NextStateTag = std::move(NextStateTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	StateHandler = std::move(Parms.StateHandler);

	return Parms.ReturnValue;
}


// Function FlowState.FlowStateUtil.FindFlowState
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FFlowStateHandler&         StateHandler                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              NextStateTag                                           (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStateObj*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStateObj* UFlowStateUtil::FindFlowState(const struct FFlowStateHandler& StateHandler, const struct FGameplayTag& NextStateTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FlowStateUtil", "FindFlowState");

	Params::FlowStateUtil_FindFlowState Parms{};

	Parms.StateHandler = std::move(StateHandler);
	Parms.NextStateTag = std::move(NextStateTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FlowState.FlowStateUtil.InitializeFlowState
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFlowStateHandler&               InStateHandler                                         (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFlowStateUtil::InitializeFlowState(struct FFlowStateHandler& InStateHandler)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FlowStateUtil", "InitializeFlowState");

	Params::FlowStateUtil_InitializeFlowState Parms{};

	Parms.InStateHandler = std::move(InStateHandler);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InStateHandler = std::move(Parms.InStateHandler);
}


// Function FlowState.FlowStateUtil.TickFlowState
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFlowStateHandler&               StateHandler                                           (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   DeltaSconde                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFlowStateUtil::TickFlowState(struct FFlowStateHandler& StateHandler, float DeltaSconde)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FlowStateUtil", "TickFlowState");

	Params::FlowStateUtil_TickFlowState Parms{};

	Parms.StateHandler = std::move(StateHandler);
	Parms.DeltaSconde = DeltaSconde;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	StateHandler = std::move(Parms.StateHandler);
}


// Function FlowState.StateObj.CallOnBegin
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              PrevState                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStateObj::CallOnBegin(const struct FGameplayTag& PrevState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StateObj", "CallOnBegin");

	Params::StateObj_CallOnBegin Parms{};

	Parms.PrevState = std::move(PrevState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FlowState.StateObj.CallOnEnd
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              NextState                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStateObj::CallOnEnd(const struct FGameplayTag& NextState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StateObj", "CallOnEnd");

	Params::StateObj_CallOnEnd Parms{};

	Parms.NextState = std::move(NextState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FlowState.StateObj.CallOnTick
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaSecond                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStateObj::CallOnTick(float DeltaSecond)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StateObj", "CallOnTick");

	Params::StateObj_CallOnTick Parms{};

	Parms.DeltaSecond = DeltaSecond;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

