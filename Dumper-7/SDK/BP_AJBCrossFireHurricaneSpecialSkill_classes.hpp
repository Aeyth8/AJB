#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBCrossFireHurricaneSpecialSkill

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BP_AJBSkillBase_classes.hpp"
#include "AJB_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBCrossFireHurricaneSpecialSkill.BP_AJBCrossFireHurricaneSpecialSkill_C
// 0x0068 (0x0250 - 0x01E8)
class UBP_AJBCrossFireHurricaneSpecialSkill_C final : public UBP_AJBSkillBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBCrossFireHurricaneSpecialSkill_C; // 0x01E8(0x0008)(Transient, DuplicateTransient)
	float                                         ReadyTime;                                         // 0x01F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ActionTimeCount;                                   // 0x01F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ActionTime;                                        // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShotInterval;                                      // 0x01FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ClearingTime;                                      // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraSpeedScale;                                  // 0x0204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           InputCameraOnlyFactorTag_CrossfireHurricaneSpecial; // 0x0208(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         MoveSpeedScaleOnAction;                            // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShotAngle_Deg_;                                    // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ProjectileSpeedScale;                              // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SameShotNum;                                       // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GionTag;                                           // 0x0220(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          ChargeEffect;                                      // 0x0228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           ShootSE;                                           // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBCrossfireHurricaneAffecter_C*    AffecterClass;                                     // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AdditionalGravityPower;                            // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InitialAdditionalGravityPower;                     // 0x0244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         KillCount;                                         // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBCrossFireHurricaneSpecialSkill(int32 EntryPoint);
	void OnGiveDamage(int32 Damage_0, const struct FGameplayTag& DamageType, class AActor* DamageReceiver, bool bRemainHP, bool bDamageIsCut, int32 SerialNumber_0, bool DamageReceiverIsPlayer, bool bWithSeparatedStandAttack, bool bEnemysSeparateStand, bool bSelfDamage, bool IsEndured);
	void ROS_ShotProjectile();
	void MC_ShotProjectileCosmetics();
	void BindOnKill();
	void PlayEndAnimation();
	void PlayReadyAnimation();
	void PlayShotAnimation();
	void ROS_ShotProjectileList(const TArray<struct FVector>& Locations, const TArray<struct FRotator>& Rotations);
	void ShotProjectile();
	void OnBeginState_Clearing_OneShot();
	void OnBeginState_Ready_OneShot();
	void MC_BeginState_Ready();
	void ROS_BeginState_Ready();
	void BeginState_Ready();
	void OnBeginState_Action_OneShot();
	void MC_StateEnd(bool bCancel);
	void ROS_StateEnd(bool bCancel);
	void TickState_Clearing();
	void MC_BeginState_Clearing();
	void ROS_BeginState_Clearing();
	void OnBeginState_Clearing();
	void BeginState_Clearing();
	void TickState_Action(float DeltaTime);
	void MC_BeginState_Action();
	void ROS_BeginState_Action();
	void OnBeginState_Action();
	void BeginState_Action();
	void TickState_Ready(float DeltaTime);
	void OnStateEnd(bool Cancel);
	void StateEnd(bool Cancel);
	void OnBeginState_Ready();
	void StateTick(float DeltaSeconds);
	void ChangeAdditionalProjectileGravityPower(float Power);
	void ROC_SpeakResultVoice();
	void OnNotifyResult(int32 KillNum, bool bCancelled);
	void TrySpawnAffecterClass(const struct FTransform& SpawnTransform, class AActor* Owner, int32 SerialNumber_0, float ActiveTime);
	void AddToMultipleLocation(const struct FVector& NewLocation, float InScale, int32 InSerialNumber, float InDelayTime);
	void ChangeProjectileSpeedScale(float SpeedScale);
	void OnCompleted_7B45FB9D406D5826C78546BCFA345DBA(class FName NotifyName);
	void OnBlendOut_7B45FB9D406D5826C78546BCFA345DBA(class FName NotifyName);
	void OnInterrupted_7B45FB9D406D5826C78546BCFA345DBA(class FName NotifyName);
	void OnNotifyBegin_7B45FB9D406D5826C78546BCFA345DBA(class FName NotifyName);
	void OnNotifyEnd_7B45FB9D406D5826C78546BCFA345DBA(class FName NotifyName);
	void OnCompleted_7B45FB9D406D5826C78546BCCACA863D(class FName NotifyName);
	void OnBlendOut_7B45FB9D406D5826C78546BCCACA863D(class FName NotifyName);
	void OnInterrupted_7B45FB9D406D5826C78546BCCACA863D(class FName NotifyName);
	void OnNotifyBegin_7B45FB9D406D5826C78546BCCACA863D(class FName NotifyName);
	void OnNotifyEnd_7B45FB9D406D5826C78546BCCACA863D(class FName NotifyName);
	void OnCompleted_7B45FB9D406D5826C78546BCA37FEE40(class FName NotifyName);
	void OnBlendOut_7B45FB9D406D5826C78546BCA37FEE40(class FName NotifyName);
	void OnInterrupted_7B45FB9D406D5826C78546BCA37FEE40(class FName NotifyName);
	void OnNotifyBegin_7B45FB9D406D5826C78546BCA37FEE40(class FName NotifyName);
	void OnNotifyEnd_7B45FB9D406D5826C78546BCA37FEE40(class FName NotifyName);
	void CalcShotTransform(struct FVector* Location, struct FRotator* Rotation);
	void CalcShotTransforms(TArray<struct FVector>* Locations, TArray<struct FRotator>* Rotations);
	void ShowSkillGuide();
	void HideSkillGuide();
	void OnDisconnected();
	void ReceiveBeginPlay();
	void StateBeginPlay(bool bShouldRestore);
	void OnCancel();
	void OnActive();
	void ReceiveTick(float DeltaSeconds);
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);
	void CheckStateCanAccompany(bool* bCanAccompany);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBCrossFireHurricaneSpecialSkill_C">();
	}
	static class UBP_AJBCrossFireHurricaneSpecialSkill_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBCrossFireHurricaneSpecialSkill_C>();
	}
};
static_assert(alignof(UBP_AJBCrossFireHurricaneSpecialSkill_C) == 0x000008, "Wrong alignment on UBP_AJBCrossFireHurricaneSpecialSkill_C");
static_assert(sizeof(UBP_AJBCrossFireHurricaneSpecialSkill_C) == 0x000250, "Wrong size on UBP_AJBCrossFireHurricaneSpecialSkill_C");
static_assert(offsetof(UBP_AJBCrossFireHurricaneSpecialSkill_C, UberGraphFrame_BP_AJBCrossFireHurricaneSpecialSkill_C) == 0x0001E8, "Member 'UBP_AJBCrossFireHurricaneSpecialSkill_C::UberGraphFrame_BP_AJBCrossFireHurricaneSpecialSkill_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBCrossFireHurricaneSpecialSkill_C, ReadyTime) == 0x0001F0, "Member 'UBP_AJBCrossFireHurricaneSpecialSkill_C::ReadyTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBCrossFireHurricaneSpecialSkill_C, ActionTimeCount) == 0x0001F4, "Member 'UBP_AJBCrossFireHurricaneSpecialSkill_C::ActionTimeCount' has a wrong offset!");
static_assert(offsetof(UBP_AJBCrossFireHurricaneSpecialSkill_C, ActionTime) == 0x0001F8, "Member 'UBP_AJBCrossFireHurricaneSpecialSkill_C::ActionTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBCrossFireHurricaneSpecialSkill_C, ShotInterval) == 0x0001FC, "Member 'UBP_AJBCrossFireHurricaneSpecialSkill_C::ShotInterval' has a wrong offset!");
static_assert(offsetof(UBP_AJBCrossFireHurricaneSpecialSkill_C, ClearingTime) == 0x000200, "Member 'UBP_AJBCrossFireHurricaneSpecialSkill_C::ClearingTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBCrossFireHurricaneSpecialSkill_C, CameraSpeedScale) == 0x000204, "Member 'UBP_AJBCrossFireHurricaneSpecialSkill_C::CameraSpeedScale' has a wrong offset!");
static_assert(offsetof(UBP_AJBCrossFireHurricaneSpecialSkill_C, InputCameraOnlyFactorTag_CrossfireHurricaneSpecial) == 0x000208, "Member 'UBP_AJBCrossFireHurricaneSpecialSkill_C::InputCameraOnlyFactorTag_CrossfireHurricaneSpecial' has a wrong offset!");
static_assert(offsetof(UBP_AJBCrossFireHurricaneSpecialSkill_C, MoveSpeedScaleOnAction) == 0x000210, "Member 'UBP_AJBCrossFireHurricaneSpecialSkill_C::MoveSpeedScaleOnAction' has a wrong offset!");
static_assert(offsetof(UBP_AJBCrossFireHurricaneSpecialSkill_C, ShotAngle_Deg_) == 0x000214, "Member 'UBP_AJBCrossFireHurricaneSpecialSkill_C::ShotAngle_Deg_' has a wrong offset!");
static_assert(offsetof(UBP_AJBCrossFireHurricaneSpecialSkill_C, ProjectileSpeedScale) == 0x000218, "Member 'UBP_AJBCrossFireHurricaneSpecialSkill_C::ProjectileSpeedScale' has a wrong offset!");
static_assert(offsetof(UBP_AJBCrossFireHurricaneSpecialSkill_C, SameShotNum) == 0x00021C, "Member 'UBP_AJBCrossFireHurricaneSpecialSkill_C::SameShotNum' has a wrong offset!");
static_assert(offsetof(UBP_AJBCrossFireHurricaneSpecialSkill_C, GionTag) == 0x000220, "Member 'UBP_AJBCrossFireHurricaneSpecialSkill_C::GionTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBCrossFireHurricaneSpecialSkill_C, ChargeEffect) == 0x000228, "Member 'UBP_AJBCrossFireHurricaneSpecialSkill_C::ChargeEffect' has a wrong offset!");
static_assert(offsetof(UBP_AJBCrossFireHurricaneSpecialSkill_C, ShootSE) == 0x000230, "Member 'UBP_AJBCrossFireHurricaneSpecialSkill_C::ShootSE' has a wrong offset!");
static_assert(offsetof(UBP_AJBCrossFireHurricaneSpecialSkill_C, AffecterClass) == 0x000238, "Member 'UBP_AJBCrossFireHurricaneSpecialSkill_C::AffecterClass' has a wrong offset!");
static_assert(offsetof(UBP_AJBCrossFireHurricaneSpecialSkill_C, AdditionalGravityPower) == 0x000240, "Member 'UBP_AJBCrossFireHurricaneSpecialSkill_C::AdditionalGravityPower' has a wrong offset!");
static_assert(offsetof(UBP_AJBCrossFireHurricaneSpecialSkill_C, InitialAdditionalGravityPower) == 0x000244, "Member 'UBP_AJBCrossFireHurricaneSpecialSkill_C::InitialAdditionalGravityPower' has a wrong offset!");
static_assert(offsetof(UBP_AJBCrossFireHurricaneSpecialSkill_C, KillCount) == 0x000248, "Member 'UBP_AJBCrossFireHurricaneSpecialSkill_C::KillCount' has a wrong offset!");

}

