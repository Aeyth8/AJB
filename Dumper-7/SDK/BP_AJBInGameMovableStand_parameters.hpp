#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameMovableStand

#include "Basic.hpp"

#include "AJB_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ST_CharaSkin_structs.hpp"
#include "ST_CustomSkinMaterials_structs.hpp"
#include "E_StencilDigit_structs.hpp"
#include "ST_ContinuedDamageKeepInfo_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.ExecuteUbergraph_BP_AJBInGameMovableStand
// 0x0940 (0x0940 - 0x0000)
struct BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_Event_OperaatorCharacter;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bNewFlag;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Event_EffectTag2;                           // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_SETag2;                               // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_DamageCauser1;                        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_HitLocation;                          // 0x0030(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bPenetrating;                         // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Event_FactorTag;                            // 0x0040(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInvalidDamage;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_DamagedActor;                         // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_DamageForHPAP;                        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_DamageForAAP;                         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_CutDamage;                            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Event_DamageType;                           // 0x0068(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_SerialNumber1;                        // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDamagePriority                               K2Node_Event_DamagePriority;                       // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_AttackDistance;                       // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_DamageCauser;                         // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_WithSeparatedStandAttack;             // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_HitEnemysSeparatedStand;              // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bPenetrateAP;                         // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bNotUseCollision;                     // 0x008B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsEndured;                            // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAJBDamageDisplayParams                K2Node_Event_DamageDisplayParams;                  // 0x0090(0x0030)(NoDestructor)
	struct FAJBDamageDisplayProperty              K2Node_Event_DamageDisplayProperty;                // 0x00C0(0x0003)(IsPlainOldData, NoDestructor)
	uint8                                         Pad_C3[0x5];                                       // 0x00C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBI_AJBInterface_C>    K2Node_DynamicCast_AsBI_AJBInterface;              // 0x00D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FAJBDamageDisplayProperty              K2Node_MakeStruct_AJBDamageDisplayProperty;        // 0x00E1(0x0003)(IsPlainOldData, NoDestructor)
	int32                                         CallFunc_CalcCutDamage_CutDamage;                  // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_CustomEvent_Loaded1;                        // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue2;                    // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character1;     // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable;                              // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_CustomEvent_DamageType;                     // 0x0128(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bRemainHP;                      // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_DamageCauser;                   // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     K2Node_DynamicCast_AsMaterial_Interface;           // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_DynamicCast_AsPawn;                         // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess4;                      // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15A[0x6];                                      // 0x015A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue3;                    // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character2;     // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess5;                      // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsRemainHP_IsRemain;                      // 0x0179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17A[0x6];                                      // 0x017A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_CustomSkinMaterials                K2Node_MakeStruct_ST_CustomSkinMaterials;          // 0x0180(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_191[0x3];                                      // 0x0191(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19C[0x4];                                      // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_CustomSkinMaterials                K2Node_MakeStruct_ST_CustomSkinMaterials1;         // 0x01A0(0x0010)(HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x01B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_Event_OperatorCharacter1;                   // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_EffectTag1;                           // 0x01C8(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_SETag1;                               // 0x01D0(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bNoDamage;                            // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D9[0x3];                                      // 0x01D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue1;                   // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_Event_OperatorCharacter;                    // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_EffectTag;                            // 0x01E8(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_SETag;                                // 0x01F0(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_Tag2;                                 // 0x01F8(0x0008)(NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_Event_Operator;                             // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_Event_Target;                               // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_CauserType;                           // 0x0210(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_SerialNumber;                         // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21C[0x4];                                      // 0x021C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Event_Tag1;                                 // 0x0220(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_FloatValue;                           // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22C[0x4];                                      // 0x022C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Event_Tag;                                  // 0x0230(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_MatchesTag_ReturnValue;                   // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_MatchesTag_ReturnValue1;                  // 0x0239(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23A[0x2];                                      // 0x023A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveGameplayTag_ReturnValue;            // 0x0244(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_MakeLiteralBool_ReturnValue;              // 0x0245(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_246[0x2];                                      // 0x0246(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue4;                    // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character3;     // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess6;                      // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_259[0x3];                                      // 0x0259(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue2;                   // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue5;                    // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character4;     // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess7;                      // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_271[0x3];                                      // 0x0271(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable1;                                // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_279[0x3];                                      // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue2;                  // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_281[0x7];                                      // 0x0281(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue6;                    // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character5;     // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess8;                      // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_299[0x7];                                      // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBGameplayTagOwnerInterface_C> CallFunc_RemoveGameplayTag_self_CastInput; // 0x02A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class ABP_AJBInGameCharacter_C*>       CallFunc_GetJoinPawns_OutPawns;                    // 0x02B0(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBGameplayTagOwnerInterface_C> CallFunc_AddGameplayTag_self_CastInput; // 0x02C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsServer_ReturnValue1;                    // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D9[0x7];                                      // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGamePlayerController_C*        K2Node_DynamicCast_AsBP_AJBIn_Game_Player_Controller; // 0x02E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess9;                      // 0x02E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E9[0x7];                                      // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_GetCurrentFlowState_FlowState;            // 0x02F0(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x02F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_GameplayTag_ReturnValue;       // 0x02F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FA[0x6];                                      // 0x02FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_AJBInGameMovableStand_C*>    CallFunc_GetJoinPawns_OutPawns1;                   // 0x0300(0x0010)(ZeroConstructor, ReferenceParm)
	class AActor*                                 CallFunc_GetOwner_ReturnValue7;                    // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31C[0x4];                                      // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character6;     // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess10;                     // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded;                         // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBI_StencilInterface_C> K2Node_DynamicCast_AsBI_Stencil_Interface;        // 0x0338(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess11;                     // 0x0348(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasStand_ReturnValue;                     // 0x0349(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34A[0x6];                                      // 0x034A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_StencilInterface_C> K2Node_DynamicCast_AsBI_Stencil_Interface1;       // 0x0350(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess12;                     // 0x0360(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0361(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_362[0x2];                                      // 0x0362(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0364(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable1;                    // 0x0368(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Value3;                               // 0x036C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               CallFunc_Array_Get_Item;                           // 0x0370(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Value2;                               // 0x0378(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Value1;                               // 0x037C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0380(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue3;                  // 0x0384(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Value;                                // 0x0388(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x038C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ClampVectorSize_ReturnValue;              // 0x0398(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x03A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGamePlayerController_C*        K2Node_DynamicCast_AsBP_AJBIn_Game_Player_Controller1; // 0x03A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess13;                     // 0x03B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue3;                     // 0x03B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B2[0x2];                                      // 0x03B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_UpdateMovementForwardInput_WorldDirection; // 0x03B4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_UpdateMovementForwardInput_ScaleValue;    // 0x03C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_UpdateMovementRightInput_WorldDirection;  // 0x03C4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_UpdateMovementRightInput_ScaleValue;      // 0x03D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_FilteringMovementDistanceLimit_OutputWorldDirection; // 0x03D4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FilteringMovementDistanceLimit_OutputScale; // 0x03E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_FilteringMovementDistanceLimit_OutputWorldDirection1; // 0x03E4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FilteringMovementDistanceLimit_OutputScale1; // 0x03F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x03F4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue1;        // 0x0400(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue1;           // 0x040C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_40D[0x3];                                      // 0x040D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable1;                             // 0x0410(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     K2Node_DynamicCast_AsMaterial_Interface1;          // 0x0418(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess14;                     // 0x0420(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_421[0x3];                                      // 0x0421(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue3;                   // 0x0424(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_UpdateMovementUpInput_WorldDirection;     // 0x0428(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0434(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue1;            // 0x0440(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue2;            // 0x044C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue8;                    // 0x0458(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character7;     // 0x0460(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess15;                     // 0x0468(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_469[0x3];                                      // 0x0469(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable2;                    // 0x046C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable3;                    // 0x0470(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_474[0x4];                                      // 0x0474(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameMovableStand_C*            CallFunc_Array_Get_Item1;                          // 0x0478(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue9;                    // 0x0480(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character8;     // 0x0488(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess16;                     // 0x0490(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckActiveBehaviorBreakDown_bBreakDown;  // 0x0491(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckActiveBehaviorBreakDown_bSpecialBreakDown; // 0x0492(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckActiveBehaviorBreakDown_bBreakDownBoth; // 0x0493(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_494[0x4];                                      // 0x0494(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_CheckActiveBehaviorBreakDown_Factor_Tags; // 0x0498(0x0020)()
	bool                                          CallFunc_Not_PreBool_ReturnValue1;                 // 0x04B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B9[0x3];                                      // 0x04B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x04BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x04C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C1[0x7];                                      // 0x04C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue10;                   // 0x04C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character9;     // 0x04D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess17;                     // 0x04D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckActiveBehaviorBreakDown_bBreakDown1; // 0x04D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckActiveBehaviorBreakDown_bSpecialBreakDown1; // 0x04DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckActiveBehaviorBreakDown_bBreakDownBoth1; // 0x04DB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4DC[0x4];                                      // 0x04DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_CheckActiveBehaviorBreakDown_Factor_Tags1; // 0x04E0(0x0020)()
	bool                                          CallFunc_Not_PreBool_ReturnValue2;                 // 0x0500(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_501[0x3];                                      // 0x0501(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable1;                   // 0x0504(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue4;                  // 0x0508(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable4;                    // 0x050C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Time;                           // 0x0510(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bEnable;                        // 0x0514(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bOperatorIsEmpty;               // 0x0515(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue3;                 // 0x0516(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_517[0x1];                                      // 0x0517(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable2;                   // 0x0518(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51C[0x4];                                      // 0x051C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0520(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue4;                     // 0x0528(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_529[0x3];                                      // 0x0529(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue5;                  // 0x052C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue4;                 // 0x0530(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_531[0x7];                                      // 0x0531(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue11;                   // 0x0538(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0540(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54C[0x4];                                      // 0x054C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate;              // 0x0550(0x0010)(ZeroConstructor, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0560(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x05E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue5;                     // 0x05E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x05EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue2;           // 0x05EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5EC[0x4];                                      // 0x05EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue12;                   // 0x05F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character10;    // 0x05F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess18;                     // 0x0600(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_601[0x3];                                      // 0x0601(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue1;         // 0x0604(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0610(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue;     // 0x0611(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_612[0x6];                                      // 0x0612(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Select_Default;                             // 0x0618(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue13;                   // 0x0620(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue6;                     // 0x0628(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_629[0x7];                                      // 0x0629(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue14;                   // 0x0630(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character11;    // 0x0638(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess19;                     // 0x0640(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue7;                     // 0x0641(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_642[0x6];                                      // 0x0642(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character12;    // 0x0648(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess20;                     // 0x0650(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_651[0x3];                                      // 0x0651(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable3;                   // 0x0654(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0658(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue8;                     // 0x0659(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65A[0x2];                                      // 0x065A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue6;                  // 0x065C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate1;             // 0x0660(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsServer_ReturnValue2;                    // 0x0670(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bShouldDestroy;                       // 0x0671(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsForwardTransition_ReturnValue;          // 0x0672(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_673[0x1];                                      // 0x0673(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0674(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_StencilDigit                                K2Node_CustomEvent_DigitToChange;                  // 0x0678(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bFlag;                          // 0x0679(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bAlsoChangeRelatedActors;       // 0x067A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_67B[0x5];                                      // 0x067B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            CallFunc_GetPrimitivesToChangeStencil_PrimitiveComponents; // 0x0680(0x0010)(ZeroConstructor, ReferenceParm)
	TArray<class UPrimitiveComponent*>            CallFunc_GetPrimitivesToChangeStencil_PrimitiveComponents1; // 0x0690(0x0010)(ZeroConstructor, ReferenceParm)
	class UPrimitiveComponent*                    CallFunc_Array_Get_Item2;                          // 0x06A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_Array_Get_Item3;                          // 0x06A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue2;                // 0x06B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue1;                 // 0x06B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B5[0x3];                                      // 0x06B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue3;                // 0x06B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue2;                 // 0x06BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6BD[0x3];                                      // 0x06BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            CallFunc_GetPrimitivesToChangeStencil_PrimitiveComponents2; // 0x06C0(0x0010)(ZeroConstructor, ReferenceParm)
	class UPrimitiveComponent*                    CallFunc_Array_Get_Item4;                          // 0x06D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue4;                // 0x06D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue3;                 // 0x06DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue1;    // 0x06DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum1_CmpSuccess;                     // 0x06DE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DF[0x1];                                      // 0x06DF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue15;                   // 0x06E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character13;    // 0x06E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess21;                     // 0x06F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6F1[0x3];                                      // 0x06F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_ApplyInputRotationOnEasyOperation_AddYawVal; // 0x06F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable4;                   // 0x06F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue4;                 // 0x06FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6FD[0x3];                                      // 0x06FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue7;                  // 0x0700(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable1;                               // 0x0704(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_705[0x3];                                      // 0x0705(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0708(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue1;            // 0x0718(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0728(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	EPlayMode                                     CallFunc_GetPlayMode_PlayMode;                     // 0x0738(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_739[0x7];                                      // 0x0739(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue1;               // 0x0740(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum2_CmpSuccess;                     // 0x0750(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_751[0x7];                                      // 0x0751(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetStandInfoForChangingSkin_StandName;    // 0x0758(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetStandInfoForChangingSkin_SkinId;       // 0x0768(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_769[0x7];                                      // 0x0769(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_ByteToString_ReturnValue;            // 0x0770(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_ByteToString_ReturnValue1;           // 0x0780(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue2;               // 0x0790(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue3;               // 0x07A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue4;               // 0x07B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue5;               // 0x07C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x07D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue6;               // 0x07D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FST_CharaSkin                          CallFunc_GetDataTableRowFromName_OutRow;           // 0x07E8(0x0038)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0820(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_821[0x7];                                      // 0x0821(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue7;               // 0x0828(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue1;           // 0x0838(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_CharaSkin                          CallFunc_GetDataTableRowFromName_OutRow1;          // 0x0840(0x0038)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue1;     // 0x0878(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_879[0x7];                                      // 0x0879(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      CallFunc_Array_Get_Item5;                          // 0x0880(0x0028)(HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x08A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8A9[0x7];                                      // 0x08A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      CallFunc_Array_Get_Item6;                          // 0x08B0(0x0028)(HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue1;          // 0x08D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8D9[0x3];                                      // 0x08D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPoliticMovementDistanceLimit_MovementDistanceLimit; // 0x08DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPoliticMovementDistanceLimit_MovementDistanceLimit1; // 0x08E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x08E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8E5[0x3];                                      // 0x08E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable2;                                // 0x08E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x08EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8ED[0x3];                                      // 0x08ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate2;             // 0x08F0(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0900(0x0008)(NoDestructor)
	struct FVector                                CallFunc_MakeVector_ReturnValue1;                  // 0x0908(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable1;                              // 0x0914(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ClampVectorSize_ReturnValue1;             // 0x0918(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue1;                       // 0x0924(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select1_Default;                            // 0x0928(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CalcEasyOperationPitch_bSuccess;          // 0x092C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_92D[0x3];                                      // 0x092D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_CalcEasyOperationPitch_Rotation;          // 0x0930(0x000C)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand");
static_assert(sizeof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand) == 0x000940, "Wrong size on BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, EntryPoint) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, Temp_float_Variable) == 0x000004, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_OperaatorCharacter) == 0x000008, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_OperaatorCharacter' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_bNewFlag) == 0x000010, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_bNewFlag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_EffectTag2) == 0x000018, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_EffectTag2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_SETag2) == 0x000020, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_SETag2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_DamageCauser1) == 0x000028, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_DamageCauser1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_HitLocation) == 0x000030, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_HitLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_bPenetrating) == 0x00003C, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_bPenetrating' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_FactorTag) == 0x000040, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_FactorTag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_bInvalidDamage) == 0x000048, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_bInvalidDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_DamagedActor) == 0x000050, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_DamagedActor' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_DamageForHPAP) == 0x000058, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_DamageForHPAP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_DamageForAAP) == 0x00005C, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_DamageForAAP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_CutDamage) == 0x000060, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_CutDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_DamageType) == 0x000068, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_DamageType' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_SerialNumber1) == 0x000070, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_SerialNumber1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_DamagePriority) == 0x000074, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_DamagePriority' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_AttackDistance) == 0x000078, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_AttackDistance' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_DamageCauser) == 0x000080, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_WithSeparatedStandAttack) == 0x000088, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_WithSeparatedStandAttack' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_HitEnemysSeparatedStand) == 0x000089, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_HitEnemysSeparatedStand' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_bPenetrateAP) == 0x00008A, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_bPenetrateAP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_bNotUseCollision) == 0x00008B, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_bNotUseCollision' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_IsEndured) == 0x00008C, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_IsEndured' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_DamageDisplayParams) == 0x000090, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_DamageDisplayParams' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_DamageDisplayProperty) == 0x0000C0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_DamageDisplayProperty' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_GetOwner_ReturnValue) == 0x0000C8, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_AsBI_AJBInterface) == 0x0000D0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_AsBI_AJBInterface' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_bSuccess) == 0x0000E0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_MakeStruct_AJBDamageDisplayProperty) == 0x0000E1, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_MakeStruct_AJBDamageDisplayProperty' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_CalcCutDamage_CutDamage) == 0x0000E4, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_CalcCutDamage_CutDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_CustomEvent_Loaded1) == 0x0000E8, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_CustomEvent_Loaded1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_GetOwner_ReturnValue1) == 0x0000F0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_GetOwner_ReturnValue2) == 0x0000F8, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_GetOwner_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000100, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_bSuccess1) == 0x000108, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_AsBP_AJBIn_Game_Character1) == 0x000110, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_AsBP_AJBIn_Game_Character1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_bSuccess2) == 0x000118, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, Temp_object_Variable) == 0x000120, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_CustomEvent_DamageType) == 0x000128, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_CustomEvent_DamageType' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_CustomEvent_bRemainHP) == 0x000130, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_CustomEvent_bRemainHP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_CustomEvent_DamageCauser) == 0x000138, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_CustomEvent_DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_AsMaterial_Interface) == 0x000140, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_AsMaterial_Interface' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_bSuccess3) == 0x000148, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_AsPawn) == 0x000150, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_AsPawn' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_bSuccess4) == 0x000158, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_bSuccess4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_IsLocallyControlled_ReturnValue) == 0x000159, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_GetOwner_ReturnValue3) == 0x000160, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_GetOwner_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Not_PreBool_ReturnValue) == 0x000168, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_AsBP_AJBIn_Game_Character2) == 0x000170, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_AsBP_AJBIn_Game_Character2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_bSuccess5) == 0x000178, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_bSuccess5' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_IsRemainHP_IsRemain) == 0x000179, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_IsRemainHP_IsRemain' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_MakeStruct_ST_CustomSkinMaterials) == 0x000180, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_MakeStruct_ST_CustomSkinMaterials' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_IsDedicatedServer_ReturnValue) == 0x000190, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Array_Add_ReturnValue) == 0x000194, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Add_IntInt_ReturnValue) == 0x000198, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_MakeStruct_ST_CustomSkinMaterials1) == 0x0001A0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_MakeStruct_ST_CustomSkinMaterials1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Conv_IntToString_ReturnValue) == 0x0001B0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_OperatorCharacter1) == 0x0001C0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_OperatorCharacter1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_EffectTag1) == 0x0001C8, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_EffectTag1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_SETag1) == 0x0001D0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_SETag1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_bNoDamage) == 0x0001D8, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_bNoDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Array_Add_ReturnValue1) == 0x0001DC, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Array_Add_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_OperatorCharacter) == 0x0001E0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_OperatorCharacter' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_EffectTag) == 0x0001E8, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_EffectTag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_SETag) == 0x0001F0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_SETag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_Tag2) == 0x0001F8, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_Tag2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_Operator) == 0x000200, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_Operator' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_Target) == 0x000208, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_Target' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_CauserType) == 0x000210, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_CauserType' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_SerialNumber) == 0x000218, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_SerialNumber' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_Tag1) == 0x000220, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_Tag1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_FloatValue) == 0x000228, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_FloatValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_Tag) == 0x000230, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_Tag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_MatchesTag_ReturnValue) == 0x000238, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_MatchesTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_MatchesTag_ReturnValue1) == 0x000239, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_MatchesTag_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, Temp_int_Variable) == 0x00023C, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Add_IntInt_ReturnValue1) == 0x000240, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_RemoveGameplayTag_ReturnValue) == 0x000244, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_RemoveGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_MakeLiteralBool_ReturnValue) == 0x000245, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_MakeLiteralBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_GetOwner_ReturnValue4) == 0x000248, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_GetOwner_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_AsBP_AJBIn_Game_Character3) == 0x000250, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_AsBP_AJBIn_Game_Character3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_bSuccess6) == 0x000258, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_bSuccess6' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Array_Add_ReturnValue2) == 0x00025C, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Array_Add_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_GetOwner_ReturnValue5) == 0x000260, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_GetOwner_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_AsBP_AJBIn_Game_Character4) == 0x000268, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_AsBP_AJBIn_Game_Character4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_bSuccess7) == 0x000270, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_bSuccess7' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, Temp_int_Variable1) == 0x000274, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::Temp_int_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_IsValid_ReturnValue) == 0x000278, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Add_IntInt_ReturnValue2) == 0x00027C, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Add_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_IsServer_ReturnValue) == 0x000280, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_IsServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_GetOwner_ReturnValue6) == 0x000288, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_GetOwner_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_AsBP_AJBIn_Game_Character5) == 0x000290, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_AsBP_AJBIn_Game_Character5' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_bSuccess8) == 0x000298, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_bSuccess8' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_RemoveGameplayTag_self_CastInput) == 0x0002A0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_RemoveGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_GetJoinPawns_OutPawns) == 0x0002B0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_GetJoinPawns_OutPawns' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Array_Length_ReturnValue) == 0x0002C0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_AddGameplayTag_self_CastInput) == 0x0002C8, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_AddGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_IsServer_ReturnValue1) == 0x0002D8, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_IsServer_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_AsBP_AJBIn_Game_Player_Controller) == 0x0002E0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_AsBP_AJBIn_Game_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_bSuccess9) == 0x0002E8, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_bSuccess9' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_GetCurrentFlowState_FlowState) == 0x0002F0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_GetCurrentFlowState_FlowState' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_IsValid_ReturnValue1) == 0x0002F8, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_EqualEqual_GameplayTag_ReturnValue) == 0x0002F9, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_EqualEqual_GameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_GetJoinPawns_OutPawns1) == 0x000300, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_GetJoinPawns_OutPawns1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_GetOwner_ReturnValue7) == 0x000310, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_GetOwner_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Array_Length_ReturnValue1) == 0x000318, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_AsBP_AJBIn_Game_Character6) == 0x000320, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_AsBP_AJBIn_Game_Character6' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_bSuccess10) == 0x000328, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_bSuccess10' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_CustomEvent_Loaded) == 0x000330, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_CustomEvent_Loaded' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_AsBI_Stencil_Interface) == 0x000338, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_AsBI_Stencil_Interface' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_bSuccess11) == 0x000348, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_bSuccess11' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_HasStand_ReturnValue) == 0x000349, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_HasStand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_AsBI_Stencil_Interface1) == 0x000350, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_AsBI_Stencil_Interface1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_bSuccess12) == 0x000360, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_bSuccess12' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_IsValid_ReturnValue2) == 0x000361, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, Temp_int_Array_Index_Variable) == 0x000364, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, Temp_int_Array_Index_Variable1) == 0x000368, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::Temp_int_Array_Index_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_Value3) == 0x00036C, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_Value3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Array_Get_Item) == 0x000370, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_Value2) == 0x000378, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_Value2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_Value1) == 0x00037C, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_Value1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, Temp_int_Loop_Counter_Variable) == 0x000380, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Add_IntInt_ReturnValue3) == 0x000384, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Add_IntInt_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_Value) == 0x000388, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_Value' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_MakeVector_ReturnValue) == 0x00038C, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_ClampVectorSize_ReturnValue) == 0x000398, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_ClampVectorSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_VSize_ReturnValue) == 0x0003A4, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_AsBP_AJBIn_Game_Player_Controller1) == 0x0003A8, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_AsBP_AJBIn_Game_Player_Controller1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_bSuccess13) == 0x0003B0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_bSuccess13' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_IsValid_ReturnValue3) == 0x0003B1, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_IsValid_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_UpdateMovementForwardInput_WorldDirection) == 0x0003B4, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_UpdateMovementForwardInput_WorldDirection' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_UpdateMovementForwardInput_ScaleValue) == 0x0003C0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_UpdateMovementForwardInput_ScaleValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_UpdateMovementRightInput_WorldDirection) == 0x0003C4, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_UpdateMovementRightInput_WorldDirection' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_UpdateMovementRightInput_ScaleValue) == 0x0003D0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_UpdateMovementRightInput_ScaleValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_FilteringMovementDistanceLimit_OutputWorldDirection) == 0x0003D4, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_FilteringMovementDistanceLimit_OutputWorldDirection' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_FilteringMovementDistanceLimit_OutputScale) == 0x0003E0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_FilteringMovementDistanceLimit_OutputScale' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_FilteringMovementDistanceLimit_OutputWorldDirection1) == 0x0003E4, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_FilteringMovementDistanceLimit_OutputWorldDirection1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_FilteringMovementDistanceLimit_OutputScale1) == 0x0003F0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_FilteringMovementDistanceLimit_OutputScale1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0003F4, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Multiply_VectorFloat_ReturnValue1) == 0x000400, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Multiply_VectorFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_IsDedicatedServer_ReturnValue1) == 0x00040C, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_IsDedicatedServer_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, Temp_object_Variable1) == 0x000410, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::Temp_object_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_AsMaterial_Interface1) == 0x000418, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_AsMaterial_Interface1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_bSuccess14) == 0x000420, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_bSuccess14' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Array_Add_ReturnValue3) == 0x000424, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Array_Add_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_UpdateMovementUpInput_WorldDirection) == 0x000428, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_UpdateMovementUpInput_WorldDirection' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Add_VectorVector_ReturnValue) == 0x000434, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Add_VectorVector_ReturnValue1) == 0x000440, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Add_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Add_VectorVector_ReturnValue2) == 0x00044C, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Add_VectorVector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_GetOwner_ReturnValue8) == 0x000458, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_GetOwner_ReturnValue8' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_AsBP_AJBIn_Game_Character7) == 0x000460, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_AsBP_AJBIn_Game_Character7' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_bSuccess15) == 0x000468, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_bSuccess15' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, Temp_int_Array_Index_Variable2) == 0x00046C, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::Temp_int_Array_Index_Variable2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, Temp_int_Array_Index_Variable3) == 0x000470, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::Temp_int_Array_Index_Variable3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Array_Get_Item1) == 0x000478, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_GetOwner_ReturnValue9) == 0x000480, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_GetOwner_ReturnValue9' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_AsBP_AJBIn_Game_Character8) == 0x000488, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_AsBP_AJBIn_Game_Character8' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_bSuccess16) == 0x000490, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_bSuccess16' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_CheckActiveBehaviorBreakDown_bBreakDown) == 0x000491, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_CheckActiveBehaviorBreakDown_bBreakDown' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_CheckActiveBehaviorBreakDown_bSpecialBreakDown) == 0x000492, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_CheckActiveBehaviorBreakDown_bSpecialBreakDown' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_CheckActiveBehaviorBreakDown_bBreakDownBoth) == 0x000493, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_CheckActiveBehaviorBreakDown_bBreakDownBoth' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_CheckActiveBehaviorBreakDown_Factor_Tags) == 0x000498, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_CheckActiveBehaviorBreakDown_Factor_Tags' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Not_PreBool_ReturnValue1) == 0x0004B8, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Not_PreBool_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_DeltaSeconds) == 0x0004BC, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_SwitchEnum_CmpSuccess) == 0x0004C0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_GetOwner_ReturnValue10) == 0x0004C8, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_GetOwner_ReturnValue10' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_AsBP_AJBIn_Game_Character9) == 0x0004D0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_AsBP_AJBIn_Game_Character9' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_bSuccess17) == 0x0004D8, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_bSuccess17' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_CheckActiveBehaviorBreakDown_bBreakDown1) == 0x0004D9, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_CheckActiveBehaviorBreakDown_bBreakDown1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_CheckActiveBehaviorBreakDown_bSpecialBreakDown1) == 0x0004DA, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_CheckActiveBehaviorBreakDown_bSpecialBreakDown1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_CheckActiveBehaviorBreakDown_bBreakDownBoth1) == 0x0004DB, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_CheckActiveBehaviorBreakDown_bBreakDownBoth1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_CheckActiveBehaviorBreakDown_Factor_Tags1) == 0x0004E0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_CheckActiveBehaviorBreakDown_Factor_Tags1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Not_PreBool_ReturnValue2) == 0x000500, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Not_PreBool_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, Temp_int_Loop_Counter_Variable1) == 0x000504, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::Temp_int_Loop_Counter_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Add_IntInt_ReturnValue4) == 0x000508, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Add_IntInt_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, Temp_int_Array_Index_Variable4) == 0x00050C, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::Temp_int_Array_Index_Variable4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_CustomEvent_Time) == 0x000510, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_CustomEvent_Time' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_CustomEvent_bEnable) == 0x000514, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_CustomEvent_bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_CustomEvent_bOperatorIsEmpty) == 0x000515, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_CustomEvent_bOperatorIsEmpty' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Not_PreBool_ReturnValue3) == 0x000516, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Not_PreBool_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, Temp_int_Loop_Counter_Variable2) == 0x000518, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::Temp_int_Loop_Counter_Variable2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_GetController_ReturnValue) == 0x000520, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_IsValid_ReturnValue4) == 0x000528, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_IsValid_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Add_IntInt_ReturnValue5) == 0x00052C, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Add_IntInt_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Not_PreBool_ReturnValue4) == 0x000530, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Not_PreBool_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_GetOwner_ReturnValue11) == 0x000538, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_GetOwner_ReturnValue11' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000540, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_CreateDelegate_OutputDelegate) == 0x000550, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000560, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_K2_SetActorLocation_ReturnValue) == 0x0005E8, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_IsValid_ReturnValue5) == 0x0005E9, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_IsValid_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_BooleanAND_ReturnValue) == 0x0005EA, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_IsDedicatedServer_ReturnValue2) == 0x0005EB, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_IsDedicatedServer_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_GetOwner_ReturnValue12) == 0x0005F0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_GetOwner_ReturnValue12' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_AsBP_AJBIn_Game_Character10) == 0x0005F8, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_AsBP_AJBIn_Game_Character10' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_bSuccess18) == 0x000600, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_bSuccess18' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_K2_GetActorLocation_ReturnValue1) == 0x000604, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_K2_GetActorLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, Temp_bool_Variable) == 0x000610, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_HasLocalSharedController_ReturnValue) == 0x000611, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_HasLocalSharedController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Select_Default) == 0x000618, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_GetOwner_ReturnValue13) == 0x000620, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_GetOwner_ReturnValue13' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_IsValid_ReturnValue6) == 0x000628, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_IsValid_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_GetOwner_ReturnValue14) == 0x000630, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_GetOwner_ReturnValue14' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_AsBP_AJBIn_Game_Character11) == 0x000638, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_AsBP_AJBIn_Game_Character11' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_bSuccess19) == 0x000640, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_bSuccess19' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_IsValid_ReturnValue7) == 0x000641, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_IsValid_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_AsBP_AJBIn_Game_Character12) == 0x000648, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_AsBP_AJBIn_Game_Character12' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_bSuccess20) == 0x000650, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_bSuccess20' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, Temp_int_Loop_Counter_Variable3) == 0x000654, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::Temp_int_Loop_Counter_Variable3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Less_IntInt_ReturnValue) == 0x000658, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_IsValid_ReturnValue8) == 0x000659, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_IsValid_ReturnValue8' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Add_IntInt_ReturnValue6) == 0x00065C, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Add_IntInt_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_CreateDelegate_OutputDelegate1) == 0x000660, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_IsServer_ReturnValue2) == 0x000670, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_IsServer_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Event_bShouldDestroy) == 0x000671, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Event_bShouldDestroy' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_IsForwardTransition_ReturnValue) == 0x000672, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_IsForwardTransition_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000674, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_CustomEvent_DigitToChange) == 0x000678, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_CustomEvent_DigitToChange' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_CustomEvent_bFlag) == 0x000679, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_CustomEvent_bFlag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_CustomEvent_bAlsoChangeRelatedActors) == 0x00067A, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_CustomEvent_bAlsoChangeRelatedActors' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_GetPrimitivesToChangeStencil_PrimitiveComponents) == 0x000680, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_GetPrimitivesToChangeStencil_PrimitiveComponents' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_GetPrimitivesToChangeStencil_PrimitiveComponents1) == 0x000690, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_GetPrimitivesToChangeStencil_PrimitiveComponents1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Array_Get_Item2) == 0x0006A0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Array_Get_Item2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Array_Get_Item3) == 0x0006A8, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Array_Get_Item3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Array_Length_ReturnValue2) == 0x0006B0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Array_Length_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Less_IntInt_ReturnValue1) == 0x0006B4, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Less_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Array_Length_ReturnValue3) == 0x0006B8, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Array_Length_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Less_IntInt_ReturnValue2) == 0x0006BC, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Less_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_GetPrimitivesToChangeStencil_PrimitiveComponents2) == 0x0006C0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_GetPrimitivesToChangeStencil_PrimitiveComponents2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Array_Get_Item4) == 0x0006D0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Array_Get_Item4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Array_Length_ReturnValue4) == 0x0006D8, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Array_Length_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Less_IntInt_ReturnValue3) == 0x0006DC, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Less_IntInt_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_HasLocalSharedController_ReturnValue1) == 0x0006DD, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_HasLocalSharedController_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_SwitchEnum1_CmpSuccess) == 0x0006DE, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_SwitchEnum1_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_GetOwner_ReturnValue15) == 0x0006E0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_GetOwner_ReturnValue15' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_AsBP_AJBIn_Game_Character13) == 0x0006E8, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_AsBP_AJBIn_Game_Character13' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_DynamicCast_bSuccess21) == 0x0006F0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_DynamicCast_bSuccess21' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_ApplyInputRotationOnEasyOperation_AddYawVal) == 0x0006F4, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_ApplyInputRotationOnEasyOperation_AddYawVal' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, Temp_int_Loop_Counter_Variable4) == 0x0006F8, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::Temp_int_Loop_Counter_Variable4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Less_IntInt_ReturnValue4) == 0x0006FC, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Less_IntInt_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Add_IntInt_ReturnValue7) == 0x000700, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Add_IntInt_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, Temp_bool_Variable1) == 0x000704, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_GetDisplayName_ReturnValue) == 0x000708, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Conv_IntToString_ReturnValue1) == 0x000718, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Conv_IntToString_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Concat_StrStr_ReturnValue) == 0x000728, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_GetPlayMode_PlayMode) == 0x000738, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_GetPlayMode_PlayMode' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Concat_StrStr_ReturnValue1) == 0x000740, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Concat_StrStr_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_SwitchEnum2_CmpSuccess) == 0x000750, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_SwitchEnum2_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_GetStandInfoForChangingSkin_StandName) == 0x000758, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_GetStandInfoForChangingSkin_StandName' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_GetStandInfoForChangingSkin_SkinId) == 0x000768, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_GetStandInfoForChangingSkin_SkinId' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Conv_ByteToString_ReturnValue) == 0x000770, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Conv_ByteToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Conv_ByteToString_ReturnValue1) == 0x000780, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Conv_ByteToString_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Concat_StrStr_ReturnValue2) == 0x000790, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Concat_StrStr_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Concat_StrStr_ReturnValue3) == 0x0007A0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Concat_StrStr_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Concat_StrStr_ReturnValue4) == 0x0007B0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Concat_StrStr_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Concat_StrStr_ReturnValue5) == 0x0007C0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Concat_StrStr_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Conv_StringToName_ReturnValue) == 0x0007D0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Concat_StrStr_ReturnValue6) == 0x0007D8, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Concat_StrStr_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_GetDataTableRowFromName_OutRow) == 0x0007E8, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000820, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Concat_StrStr_ReturnValue7) == 0x000828, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Concat_StrStr_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Conv_StringToName_ReturnValue1) == 0x000838, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Conv_StringToName_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_GetDataTableRowFromName_OutRow1) == 0x000840, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_GetDataTableRowFromName_OutRow1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_GetDataTableRowFromName_ReturnValue1) == 0x000878, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_GetDataTableRowFromName_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Array_Get_Item5) == 0x000880, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Array_Get_Item5' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0008A8, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Array_Get_Item6) == 0x0008B0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Array_Get_Item6' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_Array_IsValidIndex_ReturnValue1) == 0x0008D8, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_Array_IsValidIndex_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_GetPoliticMovementDistanceLimit_MovementDistanceLimit) == 0x0008DC, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_GetPoliticMovementDistanceLimit_MovementDistanceLimit' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_GetPoliticMovementDistanceLimit_MovementDistanceLimit1) == 0x0008E0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_GetPoliticMovementDistanceLimit_MovementDistanceLimit1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0008E4, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, Temp_int_Variable2) == 0x0008E8, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::Temp_int_Variable2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_BooleanAND_ReturnValue1) == 0x0008EC, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_CreateDelegate_OutputDelegate2) == 0x0008F0, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_CreateDelegate_OutputDelegate2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000900, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_MakeVector_ReturnValue1) == 0x000908, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_MakeVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, Temp_float_Variable1) == 0x000914, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::Temp_float_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_ClampVectorSize_ReturnValue1) == 0x000918, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_ClampVectorSize_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_VSize_ReturnValue1) == 0x000924, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_VSize_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, K2Node_Select1_Default) == 0x000928, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_CalcEasyOperationPitch_bSuccess) == 0x00092C, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_CalcEasyOperationPitch_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand, CallFunc_CalcEasyOperationPitch_Rotation) == 0x000930, "Member 'BP_AJBInGameMovableStand_C_ExecuteUbergraph_BP_AJBInGameMovableStand::CallFunc_CalcEasyOperationPitch_Rotation' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.ChangeRelatedMeshStencilValueByDigit
// 0x0003 (0x0003 - 0x0000)
struct BP_AJBInGameMovableStand_C_ChangeRelatedMeshStencilValueByDigit final
{
public:
	E_StencilDigit                                DigitToChange;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFlag;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bAlsoChangeRelatedActors;                          // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_ChangeRelatedMeshStencilValueByDigit) == 0x000001, "Wrong alignment on BP_AJBInGameMovableStand_C_ChangeRelatedMeshStencilValueByDigit");
static_assert(sizeof(BP_AJBInGameMovableStand_C_ChangeRelatedMeshStencilValueByDigit) == 0x000003, "Wrong size on BP_AJBInGameMovableStand_C_ChangeRelatedMeshStencilValueByDigit");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ChangeRelatedMeshStencilValueByDigit, DigitToChange) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_ChangeRelatedMeshStencilValueByDigit::DigitToChange' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ChangeRelatedMeshStencilValueByDigit, bFlag) == 0x000001, "Member 'BP_AJBInGameMovableStand_C_ChangeRelatedMeshStencilValueByDigit::bFlag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ChangeRelatedMeshStencilValueByDigit, bAlsoChangeRelatedActors) == 0x000002, "Member 'BP_AJBInGameMovableStand_C_ChangeRelatedMeshStencilValueByDigit::bAlsoChangeRelatedActors' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.CleanUp
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameMovableStand_C_CleanUp final
{
public:
	bool                                          bShouldDestroy;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_CleanUp) == 0x000001, "Wrong alignment on BP_AJBInGameMovableStand_C_CleanUp");
static_assert(sizeof(BP_AJBInGameMovableStand_C_CleanUp) == 0x000001, "Wrong size on BP_AJBInGameMovableStand_C_CleanUp");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CleanUp, bShouldDestroy) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_CleanUp::bShouldDestroy' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.ReceiveTheWorld
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBInGameMovableStand_C_ReceiveTheWorld final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnable;                                           // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bOperatorIsEmpty;                                  // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_ReceiveTheWorld) == 0x000004, "Wrong alignment on BP_AJBInGameMovableStand_C_ReceiveTheWorld");
static_assert(sizeof(BP_AJBInGameMovableStand_C_ReceiveTheWorld) == 0x000008, "Wrong size on BP_AJBInGameMovableStand_C_ReceiveTheWorld");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ReceiveTheWorld, Time) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_ReceiveTheWorld::Time' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ReceiveTheWorld, bEnable) == 0x000004, "Member 'BP_AJBInGameMovableStand_C_ReceiveTheWorld::bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ReceiveTheWorld, bOperatorIsEmpty) == 0x000005, "Member 'BP_AJBInGameMovableStand_C_ReceiveTheWorld::bOperatorIsEmpty' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBInGameMovableStand_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_AJBInGameMovableStand_C_ReceiveTick");
static_assert(sizeof(BP_AJBInGameMovableStand_C_ReceiveTick) == 0x000004, "Wrong size on BP_AJBInGameMovableStand_C_ReceiveTick");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.MoveForward
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBInGameMovableStand_C_MoveForward final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_MoveForward) == 0x000004, "Wrong alignment on BP_AJBInGameMovableStand_C_MoveForward");
static_assert(sizeof(BP_AJBInGameMovableStand_C_MoveForward) == 0x000004, "Wrong size on BP_AJBInGameMovableStand_C_MoveForward");
static_assert(offsetof(BP_AJBInGameMovableStand_C_MoveForward, Value) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_MoveForward::Value' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.MoveRight
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBInGameMovableStand_C_MoveRight final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_MoveRight) == 0x000004, "Wrong alignment on BP_AJBInGameMovableStand_C_MoveRight");
static_assert(sizeof(BP_AJBInGameMovableStand_C_MoveRight) == 0x000004, "Wrong size on BP_AJBInGameMovableStand_C_MoveRight");
static_assert(offsetof(BP_AJBInGameMovableStand_C_MoveRight, Value) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_MoveRight::Value' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.LookupRate
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBInGameMovableStand_C_LookupRate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_LookupRate) == 0x000004, "Wrong alignment on BP_AJBInGameMovableStand_C_LookupRate");
static_assert(sizeof(BP_AJBInGameMovableStand_C_LookupRate) == 0x000004, "Wrong size on BP_AJBInGameMovableStand_C_LookupRate");
static_assert(offsetof(BP_AJBInGameMovableStand_C_LookupRate, Value) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_LookupRate::Value' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.TurnRate
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBInGameMovableStand_C_TurnRate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_TurnRate) == 0x000004, "Wrong alignment on BP_AJBInGameMovableStand_C_TurnRate");
static_assert(sizeof(BP_AJBInGameMovableStand_C_TurnRate) == 0x000004, "Wrong size on BP_AJBInGameMovableStand_C_TurnRate");
static_assert(offsetof(BP_AJBInGameMovableStand_C_TurnRate, Value) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_TurnRate::Value' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.RemoveGameplayTag
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBInGameMovableStand_C_RemoveGameplayTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_RemoveGameplayTag) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_RemoveGameplayTag");
static_assert(sizeof(BP_AJBInGameMovableStand_C_RemoveGameplayTag) == 0x000008, "Wrong size on BP_AJBInGameMovableStand_C_RemoveGameplayTag");
static_assert(offsetof(BP_AJBInGameMovableStand_C_RemoveGameplayTag, Tag) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_RemoveGameplayTag::Tag' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.AddGameplayTagWithFloat
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBInGameMovableStand_C_AddGameplayTagWithFloat final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	float                                         FloatValue;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_AddGameplayTagWithFloat) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_AddGameplayTagWithFloat");
static_assert(sizeof(BP_AJBInGameMovableStand_C_AddGameplayTagWithFloat) == 0x000010, "Wrong size on BP_AJBInGameMovableStand_C_AddGameplayTagWithFloat");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddGameplayTagWithFloat, Tag) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_AddGameplayTagWithFloat::Tag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddGameplayTagWithFloat, FloatValue) == 0x000008, "Member 'BP_AJBInGameMovableStand_C_AddGameplayTagWithFloat::FloatValue' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.AddGameplayTag
// 0x0028 (0x0028 - 0x0000)
struct BP_AJBInGameMovableStand_C_AddGameplayTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Operator;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Target;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CauserType;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         SerialNumber;                                      // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_AddGameplayTag) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_AddGameplayTag");
static_assert(sizeof(BP_AJBInGameMovableStand_C_AddGameplayTag) == 0x000028, "Wrong size on BP_AJBInGameMovableStand_C_AddGameplayTag");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddGameplayTag, Tag) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_AddGameplayTag::Tag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddGameplayTag, Operator) == 0x000008, "Member 'BP_AJBInGameMovableStand_C_AddGameplayTag::Operator' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddGameplayTag, Target) == 0x000010, "Member 'BP_AJBInGameMovableStand_C_AddGameplayTag::Target' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddGameplayTag, CauserType) == 0x000018, "Member 'BP_AJBInGameMovableStand_C_AddGameplayTag::CauserType' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddGameplayTag, SerialNumber) == 0x000020, "Member 'BP_AJBInGameMovableStand_C_AddGameplayTag::SerialNumber' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.OnAreaOut
// 0x0018 (0x0018 - 0x0000)
struct BP_AJBInGameMovableStand_C_OnAreaOut final
{
public:
	class ABP_AJBInGameCharacter_C*               OperatorCharacter;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EffectTag;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SETag;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_OnAreaOut) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_OnAreaOut");
static_assert(sizeof(BP_AJBInGameMovableStand_C_OnAreaOut) == 0x000018, "Wrong size on BP_AJBInGameMovableStand_C_OnAreaOut");
static_assert(offsetof(BP_AJBInGameMovableStand_C_OnAreaOut, OperatorCharacter) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_OnAreaOut::OperatorCharacter' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_OnAreaOut, EffectTag) == 0x000008, "Member 'BP_AJBInGameMovableStand_C_OnAreaOut::EffectTag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_OnAreaOut, SETag) == 0x000010, "Member 'BP_AJBInGameMovableStand_C_OnAreaOut::SETag' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.OnAreaIn
// 0x0020 (0x0020 - 0x0000)
struct BP_AJBInGameMovableStand_C_OnAreaIn final
{
public:
	class ABP_AJBInGameCharacter_C*               OperatorCharacter;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EffectTag;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SETag;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          bNoDamage;                                         // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_OnAreaIn) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_OnAreaIn");
static_assert(sizeof(BP_AJBInGameMovableStand_C_OnAreaIn) == 0x000020, "Wrong size on BP_AJBInGameMovableStand_C_OnAreaIn");
static_assert(offsetof(BP_AJBInGameMovableStand_C_OnAreaIn, OperatorCharacter) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_OnAreaIn::OperatorCharacter' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_OnAreaIn, EffectTag) == 0x000008, "Member 'BP_AJBInGameMovableStand_C_OnAreaIn::EffectTag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_OnAreaIn, SETag) == 0x000010, "Member 'BP_AJBInGameMovableStand_C_OnAreaIn::SETag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_OnAreaIn, bNoDamage) == 0x000018, "Member 'BP_AJBInGameMovableStand_C_OnAreaIn::bNoDamage' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.MC_AJBDamage
// 0x0018 (0x0018 - 0x0000)
struct BP_AJBInGameMovableStand_C_MC_AJBDamage final
{
public:
	struct FGameplayTag                           DamageType;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          bRemainHP;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DamageCauser;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_MC_AJBDamage) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_MC_AJBDamage");
static_assert(sizeof(BP_AJBInGameMovableStand_C_MC_AJBDamage) == 0x000018, "Wrong size on BP_AJBInGameMovableStand_C_MC_AJBDamage");
static_assert(offsetof(BP_AJBInGameMovableStand_C_MC_AJBDamage, DamageType) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_MC_AJBDamage::DamageType' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_MC_AJBDamage, bRemainHP) == 0x000008, "Member 'BP_AJBInGameMovableStand_C_MC_AJBDamage::bRemainHP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_MC_AJBDamage, DamageCauser) == 0x000010, "Member 'BP_AJBInGameMovableStand_C_MC_AJBDamage::DamageCauser' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.AJBDamage
// 0x0078 (0x0078 - 0x0000)
struct BP_AJBInGameMovableStand_C_AJBDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DamageForHPAP;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DamageForAAP;                                      // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CutDamage;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           DamageType;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         SerialNumber;                                      // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDamagePriority                               DamagePriority;                                    // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttackDistance;                                    // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DamageCauser;                                      // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WithSeparatedStandAttack;                          // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HitEnemysSeparatedStand;                           // 0x0039(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bPenetrateAP;                                      // 0x003A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bNotUseCollision;                                  // 0x003B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsEndured;                                         // 0x003C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAJBDamageDisplayParams                DamageDisplayParams;                               // 0x0040(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FAJBDamageDisplayProperty              DamageDisplayProperty;                             // 0x0070(0x0003)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_AJBDamage) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_AJBDamage");
static_assert(sizeof(BP_AJBInGameMovableStand_C_AJBDamage) == 0x000078, "Wrong size on BP_AJBInGameMovableStand_C_AJBDamage");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AJBDamage, DamagedActor) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_AJBDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AJBDamage, DamageForHPAP) == 0x000008, "Member 'BP_AJBInGameMovableStand_C_AJBDamage::DamageForHPAP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AJBDamage, DamageForAAP) == 0x00000C, "Member 'BP_AJBInGameMovableStand_C_AJBDamage::DamageForAAP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AJBDamage, CutDamage) == 0x000010, "Member 'BP_AJBInGameMovableStand_C_AJBDamage::CutDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AJBDamage, DamageType) == 0x000018, "Member 'BP_AJBInGameMovableStand_C_AJBDamage::DamageType' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AJBDamage, SerialNumber) == 0x000020, "Member 'BP_AJBInGameMovableStand_C_AJBDamage::SerialNumber' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AJBDamage, DamagePriority) == 0x000024, "Member 'BP_AJBInGameMovableStand_C_AJBDamage::DamagePriority' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AJBDamage, AttackDistance) == 0x000028, "Member 'BP_AJBInGameMovableStand_C_AJBDamage::AttackDistance' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AJBDamage, DamageCauser) == 0x000030, "Member 'BP_AJBInGameMovableStand_C_AJBDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AJBDamage, WithSeparatedStandAttack) == 0x000038, "Member 'BP_AJBInGameMovableStand_C_AJBDamage::WithSeparatedStandAttack' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AJBDamage, HitEnemysSeparatedStand) == 0x000039, "Member 'BP_AJBInGameMovableStand_C_AJBDamage::HitEnemysSeparatedStand' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AJBDamage, bPenetrateAP) == 0x00003A, "Member 'BP_AJBInGameMovableStand_C_AJBDamage::bPenetrateAP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AJBDamage, bNotUseCollision) == 0x00003B, "Member 'BP_AJBInGameMovableStand_C_AJBDamage::bNotUseCollision' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AJBDamage, IsEndured) == 0x00003C, "Member 'BP_AJBInGameMovableStand_C_AJBDamage::IsEndured' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AJBDamage, DamageDisplayParams) == 0x000040, "Member 'BP_AJBInGameMovableStand_C_AJBDamage::DamageDisplayParams' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AJBDamage, DamageDisplayProperty) == 0x000070, "Member 'BP_AJBInGameMovableStand_C_AJBDamage::DamageDisplayProperty' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.DamageOverlapped
// 0x0028 (0x0028 - 0x0000)
struct BP_AJBInGameMovableStand_C_DamageOverlapped final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitLocation;                                       // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPenetrating;                                      // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           FactorTag;                                         // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          bInvalidDamage;                                    // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_DamageOverlapped) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_DamageOverlapped");
static_assert(sizeof(BP_AJBInGameMovableStand_C_DamageOverlapped) == 0x000028, "Wrong size on BP_AJBInGameMovableStand_C_DamageOverlapped");
static_assert(offsetof(BP_AJBInGameMovableStand_C_DamageOverlapped, DamageCauser) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_DamageOverlapped::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_DamageOverlapped, HitLocation) == 0x000008, "Member 'BP_AJBInGameMovableStand_C_DamageOverlapped::HitLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_DamageOverlapped, bPenetrating) == 0x000014, "Member 'BP_AJBInGameMovableStand_C_DamageOverlapped::bPenetrating' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_DamageOverlapped, FactorTag) == 0x000018, "Member 'BP_AJBInGameMovableStand_C_DamageOverlapped::FactorTag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_DamageOverlapped, bInvalidDamage) == 0x000020, "Member 'BP_AJBInGameMovableStand_C_DamageOverlapped::bInvalidDamage' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.OnNoDamageChanged
// 0x0020 (0x0020 - 0x0000)
struct BP_AJBInGameMovableStand_C_OnNoDamageChanged final
{
public:
	class ABP_AJBInGameCharacter_C*               OperaatorCharacter;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNewFlag;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           EffectTag;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SETag;                                             // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_OnNoDamageChanged) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_OnNoDamageChanged");
static_assert(sizeof(BP_AJBInGameMovableStand_C_OnNoDamageChanged) == 0x000020, "Wrong size on BP_AJBInGameMovableStand_C_OnNoDamageChanged");
static_assert(offsetof(BP_AJBInGameMovableStand_C_OnNoDamageChanged, OperaatorCharacter) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_OnNoDamageChanged::OperaatorCharacter' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_OnNoDamageChanged, bNewFlag) == 0x000008, "Member 'BP_AJBInGameMovableStand_C_OnNoDamageChanged::bNewFlag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_OnNoDamageChanged, EffectTag) == 0x000010, "Member 'BP_AJBInGameMovableStand_C_OnNoDamageChanged::EffectTag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_OnNoDamageChanged, SETag) == 0x000018, "Member 'BP_AJBInGameMovableStand_C_OnNoDamageChanged::SETag' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.OnLoaded_94E15C0B498789D9D5B32685F1CFF920
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBInGameMovableStand_C_OnLoaded_94E15C0B498789D9D5B32685F1CFF920 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_OnLoaded_94E15C0B498789D9D5B32685F1CFF920) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_OnLoaded_94E15C0B498789D9D5B32685F1CFF920");
static_assert(sizeof(BP_AJBInGameMovableStand_C_OnLoaded_94E15C0B498789D9D5B32685F1CFF920) == 0x000008, "Wrong size on BP_AJBInGameMovableStand_C_OnLoaded_94E15C0B498789D9D5B32685F1CFF920");
static_assert(offsetof(BP_AJBInGameMovableStand_C_OnLoaded_94E15C0B498789D9D5B32685F1CFF920, Loaded) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_OnLoaded_94E15C0B498789D9D5B32685F1CFF920::Loaded' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.OnLoaded_194708B14BCBDFECB467A4BD5AD390D3
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBInGameMovableStand_C_OnLoaded_194708B14BCBDFECB467A4BD5AD390D3 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_OnLoaded_194708B14BCBDFECB467A4BD5AD390D3) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_OnLoaded_194708B14BCBDFECB467A4BD5AD390D3");
static_assert(sizeof(BP_AJBInGameMovableStand_C_OnLoaded_194708B14BCBDFECB467A4BD5AD390D3) == 0x000008, "Wrong size on BP_AJBInGameMovableStand_C_OnLoaded_194708B14BCBDFECB467A4BD5AD390D3");
static_assert(offsetof(BP_AJBInGameMovableStand_C_OnLoaded_194708B14BCBDFECB467A4BD5AD390D3, Loaded) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_OnLoaded_194708B14BCBDFECB467A4BD5AD390D3::Loaded' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.SystemEnable
// 0x0006 (0x0006 - 0x0000)
struct BP_AJBInGameMovableStand_C_SystemEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bApplyStandVisibility;                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EMovementMode                                 Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 Temp_byte_Variable1;                               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EMovementMode                                 K2Node_Select_Default;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_SystemEnable) == 0x000001, "Wrong alignment on BP_AJBInGameMovableStand_C_SystemEnable");
static_assert(sizeof(BP_AJBInGameMovableStand_C_SystemEnable) == 0x000006, "Wrong size on BP_AJBInGameMovableStand_C_SystemEnable");
static_assert(offsetof(BP_AJBInGameMovableStand_C_SystemEnable, bEnable) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_SystemEnable::bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_SystemEnable, bApplyStandVisibility) == 0x000001, "Member 'BP_AJBInGameMovableStand_C_SystemEnable::bApplyStandVisibility' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_SystemEnable, Temp_byte_Variable) == 0x000002, "Member 'BP_AJBInGameMovableStand_C_SystemEnable::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_SystemEnable, Temp_byte_Variable1) == 0x000003, "Member 'BP_AJBInGameMovableStand_C_SystemEnable::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_SystemEnable, Temp_bool_Variable) == 0x000004, "Member 'BP_AJBInGameMovableStand_C_SystemEnable::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_SystemEnable, K2Node_Select_Default) == 0x000005, "Member 'BP_AJBInGameMovableStand_C_SystemEnable::K2Node_Select_Default' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.CalcCutDamage
// 0x0020 (0x0020 - 0x0000)
struct BP_AJBInGameMovableStand_C_CalcCutDamage final
{
public:
	int32                                         SrcDamage;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CutDamage;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue1;             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_CalcCutDamage) == 0x000004, "Wrong alignment on BP_AJBInGameMovableStand_C_CalcCutDamage");
static_assert(sizeof(BP_AJBInGameMovableStand_C_CalcCutDamage) == 0x000020, "Wrong size on BP_AJBInGameMovableStand_C_CalcCutDamage");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CalcCutDamage, SrcDamage) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_CalcCutDamage::SrcDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CalcCutDamage, CutDamage) == 0x000004, "Member 'BP_AJBInGameMovableStand_C_CalcCutDamage::CutDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CalcCutDamage, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000008, "Member 'BP_AJBInGameMovableStand_C_CalcCutDamage::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CalcCutDamage, CallFunc_Conv_IntToFloat_ReturnValue1) == 0x00000C, "Member 'BP_AJBInGameMovableStand_C_CalcCutDamage::CallFunc_Conv_IntToFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CalcCutDamage, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_AJBInGameMovableStand_C_CalcCutDamage::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CalcCutDamage, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_AJBInGameMovableStand_C_CalcCutDamage::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CalcCutDamage, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x000018, "Member 'BP_AJBInGameMovableStand_C_CalcCutDamage::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CalcCutDamage, CallFunc_FTrunc_ReturnValue) == 0x00001C, "Member 'BP_AJBInGameMovableStand_C_CalcCutDamage::CallFunc_FTrunc_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.UpdateCameraParam
// 0x01A8 (0x01A8 - 0x0000)
struct BP_AJBInGameMovableStand_C_UpdateCameraParam final
{
public:
	struct FRotator                               ApplyCameraRotation;                               // 0x0000(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAJBGameInstance_bSuccess;              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBGameInstance_C*                  CallFunc_GetAJBGameInstance_AJB_Game_Instance;     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayingReplay_ReturnValue;              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue;     // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x001C(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0028(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0034(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0040(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x004C(0x000C)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue1;           // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0060(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue1;     // 0x00E8(0x000C)(IsPlainOldData, NoDestructor)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x00F8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FRotator                               CallFunc_RLerp_ReturnValue;                        // 0x0180(0x000C)(IsPlainOldData, NoDestructor)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetViewTarget_ReturnValue;                // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x01A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_UpdateCameraParam) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_UpdateCameraParam");
static_assert(sizeof(BP_AJBInGameMovableStand_C_UpdateCameraParam) == 0x0001A8, "Wrong size on BP_AJBInGameMovableStand_C_UpdateCameraParam");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateCameraParam, ApplyCameraRotation) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_UpdateCameraParam::ApplyCameraRotation' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateCameraParam, CallFunc_IsDedicatedServer_ReturnValue) == 0x00000C, "Member 'BP_AJBInGameMovableStand_C_UpdateCameraParam::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateCameraParam, CallFunc_GetAJBGameInstance_bSuccess) == 0x00000D, "Member 'BP_AJBInGameMovableStand_C_UpdateCameraParam::CallFunc_GetAJBGameInstance_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateCameraParam, CallFunc_GetAJBGameInstance_AJB_Game_Instance) == 0x000010, "Member 'BP_AJBInGameMovableStand_C_UpdateCameraParam::CallFunc_GetAJBGameInstance_AJB_Game_Instance' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateCameraParam, CallFunc_IsPlayingReplay_ReturnValue) == 0x000018, "Member 'BP_AJBInGameMovableStand_C_UpdateCameraParam::CallFunc_IsPlayingReplay_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateCameraParam, CallFunc_HasLocalSharedController_ReturnValue) == 0x000019, "Member 'BP_AJBInGameMovableStand_C_UpdateCameraParam::CallFunc_HasLocalSharedController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateCameraParam, CallFunc_IsServer_ReturnValue) == 0x00001A, "Member 'BP_AJBInGameMovableStand_C_UpdateCameraParam::CallFunc_IsServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateCameraParam, CallFunc_K2_GetActorRotation_ReturnValue) == 0x00001C, "Member 'BP_AJBInGameMovableStand_C_UpdateCameraParam::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateCameraParam, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000028, "Member 'BP_AJBInGameMovableStand_C_UpdateCameraParam::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateCameraParam, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000034, "Member 'BP_AJBInGameMovableStand_C_UpdateCameraParam::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateCameraParam, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000040, "Member 'BP_AJBInGameMovableStand_C_UpdateCameraParam::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateCameraParam, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x00004C, "Member 'BP_AJBInGameMovableStand_C_UpdateCameraParam::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateCameraParam, CallFunc_IsDedicatedServer_ReturnValue1) == 0x000058, "Member 'BP_AJBInGameMovableStand_C_UpdateCameraParam::CallFunc_IsDedicatedServer_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateCameraParam, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000060, "Member 'BP_AJBInGameMovableStand_C_UpdateCameraParam::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateCameraParam, CallFunc_K2_GetComponentRotation_ReturnValue1) == 0x0000E8, "Member 'BP_AJBInGameMovableStand_C_UpdateCameraParam::CallFunc_K2_GetComponentRotation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateCameraParam, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x0000F8, "Member 'BP_AJBInGameMovableStand_C_UpdateCameraParam::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateCameraParam, CallFunc_RLerp_ReturnValue) == 0x000180, "Member 'BP_AJBInGameMovableStand_C_UpdateCameraParam::CallFunc_RLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateCameraParam, CallFunc_GetPlayerController_ReturnValue) == 0x000190, "Member 'BP_AJBInGameMovableStand_C_UpdateCameraParam::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateCameraParam, CallFunc_GetViewTarget_ReturnValue) == 0x000198, "Member 'BP_AJBInGameMovableStand_C_UpdateCameraParam::CallFunc_GetViewTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateCameraParam, CallFunc_IsValid_ReturnValue) == 0x0001A0, "Member 'BP_AJBInGameMovableStand_C_UpdateCameraParam::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateCameraParam, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0001A1, "Member 'BP_AJBInGameMovableStand_C_UpdateCameraParam::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.ChangeAuraEnable
// 0x0038 (0x0038 - 0x0000)
struct BP_AJBInGameMovableStand_C_ChangeAuraEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UParticleSystemComponent*>       CallFunc_GetComponentsByTag_ReturnValue;           // 0x0010(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_ChangeAuraEnable) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_ChangeAuraEnable");
static_assert(sizeof(BP_AJBInGameMovableStand_C_ChangeAuraEnable) == 0x000038, "Wrong size on BP_AJBInGameMovableStand_C_ChangeAuraEnable");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ChangeAuraEnable, bEnable) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_ChangeAuraEnable::bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ChangeAuraEnable, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_AJBInGameMovableStand_C_ChangeAuraEnable::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ChangeAuraEnable, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_AJBInGameMovableStand_C_ChangeAuraEnable::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ChangeAuraEnable, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_AJBInGameMovableStand_C_ChangeAuraEnable::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ChangeAuraEnable, CallFunc_GetComponentsByTag_ReturnValue) == 0x000010, "Member 'BP_AJBInGameMovableStand_C_ChangeAuraEnable::CallFunc_GetComponentsByTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ChangeAuraEnable, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_AJBInGameMovableStand_C_ChangeAuraEnable::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ChangeAuraEnable, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_AJBInGameMovableStand_C_ChangeAuraEnable::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ChangeAuraEnable, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'BP_AJBInGameMovableStand_C_ChangeAuraEnable::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.SpawnAppearEffect
// 0x00A0 (0x00A0 - 0x0000)
struct BP_AJBInGameMovableStand_C_SpawnAppearEffect final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0004(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USceneComponent*>                CallFunc_GetComponentsByTag_ReturnValue;           // 0x0010(0x0010)(ZeroConstructor, ReferenceParm)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue1;         // 0x0020(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USceneComponent*>                CallFunc_GetComponentsByTag_ReturnValue1;          // 0x0038(0x0010)(ZeroConstructor, ReferenceParm)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_Array_Get_Item1;                          // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x005C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0068(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue1;     // 0x0074(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          CallFunc_RequestParticleEffectAttachedOnLocal_ParticleEffect; // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue1;       // 0x0088(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameParticleEffect_C*          CallFunc_RequestParticleEffectAttachedOnLocal_ParticleEffect1; // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_SpawnAppearEffect) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_SpawnAppearEffect");
static_assert(sizeof(BP_AJBInGameMovableStand_C_SpawnAppearEffect) == 0x0000A0, "Wrong size on BP_AJBInGameMovableStand_C_SpawnAppearEffect");
static_assert(offsetof(BP_AJBInGameMovableStand_C_SpawnAppearEffect, bEnable) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_SpawnAppearEffect::bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_SpawnAppearEffect, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000004, "Member 'BP_AJBInGameMovableStand_C_SpawnAppearEffect::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_SpawnAppearEffect, CallFunc_GetComponentsByTag_ReturnValue) == 0x000010, "Member 'BP_AJBInGameMovableStand_C_SpawnAppearEffect::CallFunc_GetComponentsByTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_SpawnAppearEffect, CallFunc_K2_GetActorLocation_ReturnValue1) == 0x000020, "Member 'BP_AJBInGameMovableStand_C_SpawnAppearEffect::CallFunc_K2_GetActorLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_SpawnAppearEffect, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_AJBInGameMovableStand_C_SpawnAppearEffect::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_SpawnAppearEffect, CallFunc_GetComponentsByTag_ReturnValue1) == 0x000038, "Member 'BP_AJBInGameMovableStand_C_SpawnAppearEffect::CallFunc_GetComponentsByTag_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_SpawnAppearEffect, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'BP_AJBInGameMovableStand_C_SpawnAppearEffect::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_SpawnAppearEffect, CallFunc_Array_Get_Item1) == 0x000050, "Member 'BP_AJBInGameMovableStand_C_SpawnAppearEffect::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_SpawnAppearEffect, CallFunc_IsValid_ReturnValue1) == 0x000058, "Member 'BP_AJBInGameMovableStand_C_SpawnAppearEffect::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_SpawnAppearEffect, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00005C, "Member 'BP_AJBInGameMovableStand_C_SpawnAppearEffect::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_SpawnAppearEffect, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000068, "Member 'BP_AJBInGameMovableStand_C_SpawnAppearEffect::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_SpawnAppearEffect, CallFunc_K2_GetComponentLocation_ReturnValue1) == 0x000074, "Member 'BP_AJBInGameMovableStand_C_SpawnAppearEffect::CallFunc_K2_GetComponentLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_SpawnAppearEffect, CallFunc_RequestParticleEffectAttachedOnLocal_ParticleEffect) == 0x000080, "Member 'BP_AJBInGameMovableStand_C_SpawnAppearEffect::CallFunc_RequestParticleEffectAttachedOnLocal_ParticleEffect' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_SpawnAppearEffect, CallFunc_Subtract_VectorVector_ReturnValue1) == 0x000088, "Member 'BP_AJBInGameMovableStand_C_SpawnAppearEffect::CallFunc_Subtract_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_SpawnAppearEffect, CallFunc_RequestParticleEffectAttachedOnLocal_ParticleEffect1) == 0x000098, "Member 'BP_AJBInGameMovableStand_C_SpawnAppearEffect::CallFunc_RequestParticleEffectAttachedOnLocal_ParticleEffect1' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.UpdateTransparence
// 0x00E8 (0x00E8 - 0x0000)
struct BP_AJBInGameMovableStand_C_UpdateTransparence final
{
public:
	float                                         CurrentRate;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue;            // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue1;               // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue2;               // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_Array_Get_Item;                           // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue3;               // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue4;               // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue5;               // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue6;               // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_UpdateTransparence) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_UpdateTransparence");
static_assert(sizeof(BP_AJBInGameMovableStand_C_UpdateTransparence) == 0x0000E8, "Wrong size on BP_AJBInGameMovableStand_C_UpdateTransparence");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateTransparence, CurrentRate) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_UpdateTransparence::CurrentRate' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateTransparence, CallFunc_Conv_FloatToString_ReturnValue) == 0x000008, "Member 'BP_AJBInGameMovableStand_C_UpdateTransparence::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateTransparence, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_AJBInGameMovableStand_C_UpdateTransparence::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateTransparence, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'BP_AJBInGameMovableStand_C_UpdateTransparence::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateTransparence, CallFunc_Conv_BoolToString_ReturnValue) == 0x000020, "Member 'BP_AJBInGameMovableStand_C_UpdateTransparence::CallFunc_Conv_BoolToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateTransparence, Temp_int_Loop_Counter_Variable) == 0x000030, "Member 'BP_AJBInGameMovableStand_C_UpdateTransparence::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateTransparence, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000038, "Member 'BP_AJBInGameMovableStand_C_UpdateTransparence::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateTransparence, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'BP_AJBInGameMovableStand_C_UpdateTransparence::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateTransparence, CallFunc_GetDisplayName_ReturnValue) == 0x000050, "Member 'BP_AJBInGameMovableStand_C_UpdateTransparence::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateTransparence, CallFunc_Concat_StrStr_ReturnValue) == 0x000060, "Member 'BP_AJBInGameMovableStand_C_UpdateTransparence::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateTransparence, CallFunc_Concat_StrStr_ReturnValue1) == 0x000070, "Member 'BP_AJBInGameMovableStand_C_UpdateTransparence::CallFunc_Concat_StrStr_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateTransparence, CallFunc_Concat_StrStr_ReturnValue2) == 0x000080, "Member 'BP_AJBInGameMovableStand_C_UpdateTransparence::CallFunc_Concat_StrStr_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateTransparence, CallFunc_Array_Get_Item) == 0x000090, "Member 'BP_AJBInGameMovableStand_C_UpdateTransparence::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateTransparence, CallFunc_Concat_StrStr_ReturnValue3) == 0x000098, "Member 'BP_AJBInGameMovableStand_C_UpdateTransparence::CallFunc_Concat_StrStr_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateTransparence, CallFunc_Concat_StrStr_ReturnValue4) == 0x0000A8, "Member 'BP_AJBInGameMovableStand_C_UpdateTransparence::CallFunc_Concat_StrStr_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateTransparence, CallFunc_Array_Length_ReturnValue) == 0x0000B8, "Member 'BP_AJBInGameMovableStand_C_UpdateTransparence::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateTransparence, CallFunc_Concat_StrStr_ReturnValue5) == 0x0000C0, "Member 'BP_AJBInGameMovableStand_C_UpdateTransparence::CallFunc_Concat_StrStr_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateTransparence, CallFunc_Less_IntInt_ReturnValue) == 0x0000D0, "Member 'BP_AJBInGameMovableStand_C_UpdateTransparence::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateTransparence, CallFunc_Concat_StrStr_ReturnValue6) == 0x0000D8, "Member 'BP_AJBInGameMovableStand_C_UpdateTransparence::CallFunc_Concat_StrStr_ReturnValue6' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.ChangeEnableCollision
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) BP_AJBInGameMovableStand_C_ChangeEnableCollision final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetCollisionProfileName_ProfileName;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select_Default;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_ChangeEnableCollision) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_ChangeEnableCollision");
static_assert(sizeof(BP_AJBInGameMovableStand_C_ChangeEnableCollision) == 0x000020, "Wrong size on BP_AJBInGameMovableStand_C_ChangeEnableCollision");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ChangeEnableCollision, bEnable) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_ChangeEnableCollision::bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ChangeEnableCollision, Temp_bool_Variable) == 0x000001, "Member 'BP_AJBInGameMovableStand_C_ChangeEnableCollision::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ChangeEnableCollision, Temp_name_Variable) == 0x000008, "Member 'BP_AJBInGameMovableStand_C_ChangeEnableCollision::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ChangeEnableCollision, CallFunc_GetCollisionProfileName_ProfileName) == 0x000010, "Member 'BP_AJBInGameMovableStand_C_ChangeEnableCollision::CallFunc_GetCollisionProfileName_ProfileName' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ChangeEnableCollision, K2Node_Select_Default) == 0x000018, "Member 'BP_AJBInGameMovableStand_C_ChangeEnableCollision::K2Node_Select_Default' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.GetCollisionProfileName
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) BP_AJBInGameMovableStand_C_GetCollisionProfileName final
{
public:
	class FName                                   ProfileName;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_GetCollisionProfileName) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_GetCollisionProfileName");
static_assert(sizeof(BP_AJBInGameMovableStand_C_GetCollisionProfileName) == 0x000008, "Wrong size on BP_AJBInGameMovableStand_C_GetCollisionProfileName");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetCollisionProfileName, ProfileName) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_GetCollisionProfileName::ProfileName' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.SetPassiveSkillParticleVisibility
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameMovableStand_C_SetPassiveSkillParticleVisibility final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_SetPassiveSkillParticleVisibility) == 0x000001, "Wrong alignment on BP_AJBInGameMovableStand_C_SetPassiveSkillParticleVisibility");
static_assert(sizeof(BP_AJBInGameMovableStand_C_SetPassiveSkillParticleVisibility) == 0x000001, "Wrong size on BP_AJBInGameMovableStand_C_SetPassiveSkillParticleVisibility");
static_assert(offsetof(BP_AJBInGameMovableStand_C_SetPassiveSkillParticleVisibility, bNewVisibility) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_SetPassiveSkillParticleVisibility::bNewVisibility' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.ChangeStatus
// 0x0050 (0x0050 - 0x0000)
struct BP_AJBInGameMovableStand_C_ChangeStatus final
{
public:
	bool                                          bShouldAddNewTag;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           NewTag;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	float                                         NewFloatValue;                                     // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Temp_MatchedTag;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 Temp_ExtractedValues;                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	struct FGameplayTag                           CallFunc_MakeLiteralGameplayTag_ReturnValue;       // 0x0030(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_MatchesTag_ReturnValue;                   // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MultiplyFloatValues_ResultParam;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 CallFunc_ExtractFloatValuesFromTagValueMap_ReturnValues; // 0x0040(0x0010)(ZeroConstructor, ReferenceParm)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_ChangeStatus) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_ChangeStatus");
static_assert(sizeof(BP_AJBInGameMovableStand_C_ChangeStatus) == 0x000050, "Wrong size on BP_AJBInGameMovableStand_C_ChangeStatus");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ChangeStatus, bShouldAddNewTag) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_ChangeStatus::bShouldAddNewTag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ChangeStatus, NewTag) == 0x000008, "Member 'BP_AJBInGameMovableStand_C_ChangeStatus::NewTag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ChangeStatus, NewFloatValue) == 0x000010, "Member 'BP_AJBInGameMovableStand_C_ChangeStatus::NewFloatValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ChangeStatus, Temp_MatchedTag) == 0x000018, "Member 'BP_AJBInGameMovableStand_C_ChangeStatus::Temp_MatchedTag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ChangeStatus, Temp_ExtractedValues) == 0x000020, "Member 'BP_AJBInGameMovableStand_C_ChangeStatus::Temp_ExtractedValues' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ChangeStatus, CallFunc_MakeLiteralGameplayTag_ReturnValue) == 0x000030, "Member 'BP_AJBInGameMovableStand_C_ChangeStatus::CallFunc_MakeLiteralGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ChangeStatus, CallFunc_MatchesTag_ReturnValue) == 0x000038, "Member 'BP_AJBInGameMovableStand_C_ChangeStatus::CallFunc_MatchesTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ChangeStatus, CallFunc_MultiplyFloatValues_ResultParam) == 0x00003C, "Member 'BP_AJBInGameMovableStand_C_ChangeStatus::CallFunc_MultiplyFloatValues_ResultParam' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ChangeStatus, CallFunc_ExtractFloatValuesFromTagValueMap_ReturnValues) == 0x000040, "Member 'BP_AJBInGameMovableStand_C_ChangeStatus::CallFunc_ExtractFloatValuesFromTagValueMap_ReturnValues' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.DamageAffecterAreaIn
// 0x0070 (0x0070 - 0x0000)
struct BP_AJBInGameMovableStand_C_DamageAffecterAreaIn final
{
public:
	class ABP_AJBInGameCharacter_C*               OperatorCharacter;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EffectTag;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SETag;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           TempSE;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          TempParticleEffect;                                // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue;     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerController_ReturnValue;           // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_ContinuedDamageKeepInfo            K2Node_MakeStruct_ST_ContinuedDamageKeepInfo;      // 0x0030(0x0010)(ContainsInstancedReference, HasGetValueTypeHash)
	class UAkComponent*                           CallFunc_RequestWwiseEventAttachedOnLocal_AkComponent; // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue1;    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerController_ReturnValue1;          // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_ContinuedDamageKeepInfo            CallFunc_Map_Find_Value;                           // 0x0050(0x0010)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameParticleEffect_C*          CallFunc_RequestParticleEffectAttachedOnLocal_ParticleEffect; // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_DamageAffecterAreaIn) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_DamageAffecterAreaIn");
static_assert(sizeof(BP_AJBInGameMovableStand_C_DamageAffecterAreaIn) == 0x000070, "Wrong size on BP_AJBInGameMovableStand_C_DamageAffecterAreaIn");
static_assert(offsetof(BP_AJBInGameMovableStand_C_DamageAffecterAreaIn, OperatorCharacter) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_DamageAffecterAreaIn::OperatorCharacter' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_DamageAffecterAreaIn, EffectTag) == 0x000008, "Member 'BP_AJBInGameMovableStand_C_DamageAffecterAreaIn::EffectTag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_DamageAffecterAreaIn, SETag) == 0x000010, "Member 'BP_AJBInGameMovableStand_C_DamageAffecterAreaIn::SETag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_DamageAffecterAreaIn, TempSE) == 0x000018, "Member 'BP_AJBInGameMovableStand_C_DamageAffecterAreaIn::TempSE' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_DamageAffecterAreaIn, TempParticleEffect) == 0x000020, "Member 'BP_AJBInGameMovableStand_C_DamageAffecterAreaIn::TempParticleEffect' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_DamageAffecterAreaIn, CallFunc_HasLocalSharedController_ReturnValue) == 0x000028, "Member 'BP_AJBInGameMovableStand_C_DamageAffecterAreaIn::CallFunc_HasLocalSharedController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_DamageAffecterAreaIn, CallFunc_IsPlayerController_ReturnValue) == 0x000029, "Member 'BP_AJBInGameMovableStand_C_DamageAffecterAreaIn::CallFunc_IsPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_DamageAffecterAreaIn, K2Node_MakeStruct_ST_ContinuedDamageKeepInfo) == 0x000030, "Member 'BP_AJBInGameMovableStand_C_DamageAffecterAreaIn::K2Node_MakeStruct_ST_ContinuedDamageKeepInfo' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_DamageAffecterAreaIn, CallFunc_RequestWwiseEventAttachedOnLocal_AkComponent) == 0x000040, "Member 'BP_AJBInGameMovableStand_C_DamageAffecterAreaIn::CallFunc_RequestWwiseEventAttachedOnLocal_AkComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_DamageAffecterAreaIn, CallFunc_HasLocalSharedController_ReturnValue1) == 0x000048, "Member 'BP_AJBInGameMovableStand_C_DamageAffecterAreaIn::CallFunc_HasLocalSharedController_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_DamageAffecterAreaIn, CallFunc_IsPlayerController_ReturnValue1) == 0x000049, "Member 'BP_AJBInGameMovableStand_C_DamageAffecterAreaIn::CallFunc_IsPlayerController_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_DamageAffecterAreaIn, CallFunc_Map_Find_Value) == 0x000050, "Member 'BP_AJBInGameMovableStand_C_DamageAffecterAreaIn::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_DamageAffecterAreaIn, CallFunc_Map_Find_ReturnValue) == 0x000060, "Member 'BP_AJBInGameMovableStand_C_DamageAffecterAreaIn::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_DamageAffecterAreaIn, CallFunc_RequestParticleEffectAttachedOnLocal_ParticleEffect) == 0x000068, "Member 'BP_AJBInGameMovableStand_C_DamageAffecterAreaIn::CallFunc_RequestParticleEffectAttachedOnLocal_ParticleEffect' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.DamageAffecterAreaOut
// 0x0048 (0x0048 - 0x0000)
struct BP_AJBInGameMovableStand_C_DamageAffecterAreaOut final
{
public:
	class ABP_AJBInGameCharacter_C*               OperatorCharacter;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EffectTag;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SETag;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           TempSE;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          TempParticleEffect;                                // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerController_ReturnValue;           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerController_ReturnValue1;          // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue;     // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasLocalSharedController_ReturnValue1;    // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_ContinuedDamageKeepInfo            CallFunc_Map_Find_Value;                           // 0x0030(0x0010)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_DamageAffecterAreaOut) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_DamageAffecterAreaOut");
static_assert(sizeof(BP_AJBInGameMovableStand_C_DamageAffecterAreaOut) == 0x000048, "Wrong size on BP_AJBInGameMovableStand_C_DamageAffecterAreaOut");
static_assert(offsetof(BP_AJBInGameMovableStand_C_DamageAffecterAreaOut, OperatorCharacter) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_DamageAffecterAreaOut::OperatorCharacter' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_DamageAffecterAreaOut, EffectTag) == 0x000008, "Member 'BP_AJBInGameMovableStand_C_DamageAffecterAreaOut::EffectTag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_DamageAffecterAreaOut, SETag) == 0x000010, "Member 'BP_AJBInGameMovableStand_C_DamageAffecterAreaOut::SETag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_DamageAffecterAreaOut, TempSE) == 0x000018, "Member 'BP_AJBInGameMovableStand_C_DamageAffecterAreaOut::TempSE' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_DamageAffecterAreaOut, TempParticleEffect) == 0x000020, "Member 'BP_AJBInGameMovableStand_C_DamageAffecterAreaOut::TempParticleEffect' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_DamageAffecterAreaOut, CallFunc_IsPlayerController_ReturnValue) == 0x000028, "Member 'BP_AJBInGameMovableStand_C_DamageAffecterAreaOut::CallFunc_IsPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_DamageAffecterAreaOut, CallFunc_IsPlayerController_ReturnValue1) == 0x000029, "Member 'BP_AJBInGameMovableStand_C_DamageAffecterAreaOut::CallFunc_IsPlayerController_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_DamageAffecterAreaOut, CallFunc_HasLocalSharedController_ReturnValue) == 0x00002A, "Member 'BP_AJBInGameMovableStand_C_DamageAffecterAreaOut::CallFunc_HasLocalSharedController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_DamageAffecterAreaOut, CallFunc_HasLocalSharedController_ReturnValue1) == 0x00002B, "Member 'BP_AJBInGameMovableStand_C_DamageAffecterAreaOut::CallFunc_HasLocalSharedController_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_DamageAffecterAreaOut, CallFunc_Map_Find_Value) == 0x000030, "Member 'BP_AJBInGameMovableStand_C_DamageAffecterAreaOut::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_DamageAffecterAreaOut, CallFunc_Map_Find_ReturnValue) == 0x000040, "Member 'BP_AJBInGameMovableStand_C_DamageAffecterAreaOut::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_DamageAffecterAreaOut, CallFunc_Map_Remove_ReturnValue) == 0x000041, "Member 'BP_AJBInGameMovableStand_C_DamageAffecterAreaOut::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_DamageAffecterAreaOut, CallFunc_IsValid_ReturnValue) == 0x000042, "Member 'BP_AJBInGameMovableStand_C_DamageAffecterAreaOut::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_DamageAffecterAreaOut, CallFunc_IsValid_ReturnValue1) == 0x000043, "Member 'BP_AJBInGameMovableStand_C_DamageAffecterAreaOut::CallFunc_IsValid_ReturnValue1' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.CalcCurrentRotationValue
// 0x0018 (0x0018 - 0x0000)
struct BP_AJBInGameMovableStand_C_CalcCurrentRotationValue final
{
public:
	float                                         TurnedRotation;                                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LookupRotation;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempLookupRotation;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempTurnedRotation;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcDualZoneCameraRotate_Rotation;        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcDualZoneCameraRotate_Rotation1;       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_CalcCurrentRotationValue) == 0x000004, "Wrong alignment on BP_AJBInGameMovableStand_C_CalcCurrentRotationValue");
static_assert(sizeof(BP_AJBInGameMovableStand_C_CalcCurrentRotationValue) == 0x000018, "Wrong size on BP_AJBInGameMovableStand_C_CalcCurrentRotationValue");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CalcCurrentRotationValue, TurnedRotation) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_CalcCurrentRotationValue::TurnedRotation' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CalcCurrentRotationValue, LookupRotation) == 0x000004, "Member 'BP_AJBInGameMovableStand_C_CalcCurrentRotationValue::LookupRotation' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CalcCurrentRotationValue, TempLookupRotation) == 0x000008, "Member 'BP_AJBInGameMovableStand_C_CalcCurrentRotationValue::TempLookupRotation' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CalcCurrentRotationValue, TempTurnedRotation) == 0x00000C, "Member 'BP_AJBInGameMovableStand_C_CalcCurrentRotationValue::TempTurnedRotation' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CalcCurrentRotationValue, CallFunc_CalcDualZoneCameraRotate_Rotation) == 0x000010, "Member 'BP_AJBInGameMovableStand_C_CalcCurrentRotationValue::CallFunc_CalcDualZoneCameraRotate_Rotation' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CalcCurrentRotationValue, CallFunc_CalcDualZoneCameraRotate_Rotation1) == 0x000014, "Member 'BP_AJBInGameMovableStand_C_CalcCurrentRotationValue::CallFunc_CalcDualZoneCameraRotate_Rotation1' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.UpdateMovementForwardInput
// 0x0014 (0x0014 - 0x0000)
struct BP_AJBInGameMovableStand_C_UpdateMovementForwardInput final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorldDirection;                                    // 0x0004(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleValue;                                        // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_UpdateMovementForwardInput) == 0x000004, "Wrong alignment on BP_AJBInGameMovableStand_C_UpdateMovementForwardInput");
static_assert(sizeof(BP_AJBInGameMovableStand_C_UpdateMovementForwardInput) == 0x000014, "Wrong size on BP_AJBInGameMovableStand_C_UpdateMovementForwardInput");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMovementForwardInput, Value) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_UpdateMovementForwardInput::Value' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMovementForwardInput, WorldDirection) == 0x000004, "Member 'BP_AJBInGameMovableStand_C_UpdateMovementForwardInput::WorldDirection' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMovementForwardInput, ScaleValue) == 0x000010, "Member 'BP_AJBInGameMovableStand_C_UpdateMovementForwardInput::ScaleValue' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.UpdateMovementRightInput
// 0x0070 (0x0070 - 0x0000)
struct BP_AJBInGameMovableStand_C_UpdateMovementRightInput final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorldDirection;                                    // 0x0004(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleValue;                                        // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable1;                              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcInputRightScaleEasyOperation_InputRightScale; // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckChangeableSpeed_bChangeable;         // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable1;                               // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorRightVector_ReturnValue;          // 0x004C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select1_Default;                            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x005C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_UpdateMovementRightInput) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_UpdateMovementRightInput");
static_assert(sizeof(BP_AJBInGameMovableStand_C_UpdateMovementRightInput) == 0x000070, "Wrong size on BP_AJBInGameMovableStand_C_UpdateMovementRightInput");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMovementRightInput, Value) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_UpdateMovementRightInput::Value' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMovementRightInput, WorldDirection) == 0x000004, "Member 'BP_AJBInGameMovableStand_C_UpdateMovementRightInput::WorldDirection' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMovementRightInput, ScaleValue) == 0x000010, "Member 'BP_AJBInGameMovableStand_C_UpdateMovementRightInput::ScaleValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMovementRightInput, Temp_float_Variable) == 0x000014, "Member 'BP_AJBInGameMovableStand_C_UpdateMovementRightInput::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMovementRightInput, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'BP_AJBInGameMovableStand_C_UpdateMovementRightInput::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMovementRightInput, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000020, "Member 'BP_AJBInGameMovableStand_C_UpdateMovementRightInput::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMovementRightInput, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_AJBInGameMovableStand_C_UpdateMovementRightInput::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMovementRightInput, Temp_bool_Variable) == 0x000029, "Member 'BP_AJBInGameMovableStand_C_UpdateMovementRightInput::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMovementRightInput, Temp_float_Variable1) == 0x00002C, "Member 'BP_AJBInGameMovableStand_C_UpdateMovementRightInput::Temp_float_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMovementRightInput, CallFunc_CalcInputRightScaleEasyOperation_InputRightScale) == 0x000030, "Member 'BP_AJBInGameMovableStand_C_UpdateMovementRightInput::CallFunc_CalcInputRightScaleEasyOperation_InputRightScale' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMovementRightInput, CallFunc_CheckChangeableSpeed_bChangeable) == 0x000034, "Member 'BP_AJBInGameMovableStand_C_UpdateMovementRightInput::CallFunc_CheckChangeableSpeed_bChangeable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMovementRightInput, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000038, "Member 'BP_AJBInGameMovableStand_C_UpdateMovementRightInput::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMovementRightInput, K2Node_Select_Default) == 0x00003C, "Member 'BP_AJBInGameMovableStand_C_UpdateMovementRightInput::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMovementRightInput, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000040, "Member 'BP_AJBInGameMovableStand_C_UpdateMovementRightInput::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMovementRightInput, Temp_bool_Variable1) == 0x000044, "Member 'BP_AJBInGameMovableStand_C_UpdateMovementRightInput::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMovementRightInput, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x000048, "Member 'BP_AJBInGameMovableStand_C_UpdateMovementRightInput::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMovementRightInput, CallFunc_GetActorRightVector_ReturnValue) == 0x00004C, "Member 'BP_AJBInGameMovableStand_C_UpdateMovementRightInput::CallFunc_GetActorRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMovementRightInput, K2Node_Select1_Default) == 0x000058, "Member 'BP_AJBInGameMovableStand_C_UpdateMovementRightInput::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMovementRightInput, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00005C, "Member 'BP_AJBInGameMovableStand_C_UpdateMovementRightInput::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMovementRightInput, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x000068, "Member 'BP_AJBInGameMovableStand_C_UpdateMovementRightInput::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.FilteringMovementDistanceLimit
// 0x00D0 (0x00D0 - 0x0000)
struct BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit final
{
public:
	struct FVector                                InputWorldDirection;                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputScale;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OutputWorldDirection;                              // 0x0010(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutputScale;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempWorldDirection_CharacterToStand;               // 0x0020(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempOutputScale;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempOutputWorldDirection;                          // 0x0030(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempLeaveRate;                                     // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPoliticMovementDistanceLimit_MovementDistanceLimit; // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPoliticMovementDistanceLimit_MovementDistanceLimit1; // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue1;     // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable1;                              // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue2;     // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable1;                               // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_76[0x2];                                       // 0x0076(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select1_Default;                            // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0090(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue1;         // 0x009C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00A8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x00B4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit");
static_assert(sizeof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit) == 0x0000D0, "Wrong size on BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, InputWorldDirection) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::InputWorldDirection' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, InputScale) == 0x00000C, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::InputScale' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, OutputWorldDirection) == 0x000010, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::OutputWorldDirection' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, OutputScale) == 0x00001C, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::OutputScale' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, TempWorldDirection_CharacterToStand) == 0x000020, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::TempWorldDirection_CharacterToStand' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, TempOutputScale) == 0x00002C, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::TempOutputScale' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, TempOutputWorldDirection) == 0x000030, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::TempOutputWorldDirection' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, TempLeaveRate) == 0x00003C, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::TempLeaveRate' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, CallFunc_GetPoliticMovementDistanceLimit_MovementDistanceLimit) == 0x000040, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::CallFunc_GetPoliticMovementDistanceLimit_MovementDistanceLimit' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000044, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000045, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, CallFunc_GetPoliticMovementDistanceLimit_MovementDistanceLimit1) == 0x000048, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::CallFunc_GetPoliticMovementDistanceLimit_MovementDistanceLimit1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00004C, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, Temp_float_Variable) == 0x000050, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, CallFunc_MapRangeClamped_ReturnValue) == 0x000054, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000058, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, CallFunc_GreaterEqual_FloatFloat_ReturnValue1) == 0x00005C, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::CallFunc_GreaterEqual_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, Temp_bool_Variable) == 0x00005D, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, CallFunc_Dot_VectorVector_ReturnValue) == 0x000060, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, CallFunc_Add_FloatFloat_ReturnValue) == 0x000064, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, K2Node_Select_Default) == 0x000068, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00006C, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, Temp_float_Variable1) == 0x000070, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::Temp_float_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, CallFunc_GreaterEqual_FloatFloat_ReturnValue2) == 0x000074, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::CallFunc_GreaterEqual_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, Temp_bool_Variable1) == 0x000075, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, CallFunc_GetOwner_ReturnValue) == 0x000078, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000080, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, K2Node_DynamicCast_bSuccess) == 0x000088, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, K2Node_Select1_Default) == 0x00008C, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000090, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, CallFunc_K2_GetActorLocation_ReturnValue1) == 0x00009C, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::CallFunc_K2_GetActorLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000A8, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, CallFunc_Normal_ReturnValue) == 0x0000B4, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x0000C0, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, CallFunc_VSize_ReturnValue) == 0x0000C4, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000C8, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit, CallFunc_FClamp_ReturnValue) == 0x0000CC, "Member 'BP_AJBInGameMovableStand_C_FilteringMovementDistanceLimit::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.SetSkeletalMeshWithSkin
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBInGameMovableStand_C_SetSkeletalMeshWithSkin final
{
public:
	class USkeletalMesh*                          NewMesh;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bReintPose;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_SetSkeletalMeshWithSkin) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_SetSkeletalMeshWithSkin");
static_assert(sizeof(BP_AJBInGameMovableStand_C_SetSkeletalMeshWithSkin) == 0x000010, "Wrong size on BP_AJBInGameMovableStand_C_SetSkeletalMeshWithSkin");
static_assert(offsetof(BP_AJBInGameMovableStand_C_SetSkeletalMeshWithSkin, NewMesh) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_SetSkeletalMeshWithSkin::NewMesh' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_SetSkeletalMeshWithSkin, bReintPose) == 0x000008, "Member 'BP_AJBInGameMovableStand_C_SetSkeletalMeshWithSkin::bReintPose' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.UpdateMovementUpInput
// 0x0070 (0x0070 - 0x0000)
struct BP_AJBInGameMovableStand_C_UpdateMovementUpInput final
{
public:
	struct FVector                                WorldDirection;                                    // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempWorldLocation;                                 // 0x000C(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcInputScaleDown_InputScale;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_FilteringMovementDistanceLimit_OutputWorldDirection; // 0x001C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FilteringMovementDistanceLimit_OutputScale; // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x002C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0038(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcInputScaleUp_InputScale;              // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_FilteringMovementDistanceLimit_OutputWorldDirection1; // 0x0048(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FilteringMovementDistanceLimit_OutputScale1; // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue1;        // 0x0058(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue1;            // 0x0064(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_UpdateMovementUpInput) == 0x000004, "Wrong alignment on BP_AJBInGameMovableStand_C_UpdateMovementUpInput");
static_assert(sizeof(BP_AJBInGameMovableStand_C_UpdateMovementUpInput) == 0x000070, "Wrong size on BP_AJBInGameMovableStand_C_UpdateMovementUpInput");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMovementUpInput, WorldDirection) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_UpdateMovementUpInput::WorldDirection' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMovementUpInput, TempWorldLocation) == 0x00000C, "Member 'BP_AJBInGameMovableStand_C_UpdateMovementUpInput::TempWorldLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMovementUpInput, CallFunc_CalcInputScaleDown_InputScale) == 0x000018, "Member 'BP_AJBInGameMovableStand_C_UpdateMovementUpInput::CallFunc_CalcInputScaleDown_InputScale' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMovementUpInput, CallFunc_FilteringMovementDistanceLimit_OutputWorldDirection) == 0x00001C, "Member 'BP_AJBInGameMovableStand_C_UpdateMovementUpInput::CallFunc_FilteringMovementDistanceLimit_OutputWorldDirection' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMovementUpInput, CallFunc_FilteringMovementDistanceLimit_OutputScale) == 0x000028, "Member 'BP_AJBInGameMovableStand_C_UpdateMovementUpInput::CallFunc_FilteringMovementDistanceLimit_OutputScale' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMovementUpInput, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00002C, "Member 'BP_AJBInGameMovableStand_C_UpdateMovementUpInput::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMovementUpInput, CallFunc_Add_VectorVector_ReturnValue) == 0x000038, "Member 'BP_AJBInGameMovableStand_C_UpdateMovementUpInput::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMovementUpInput, CallFunc_CalcInputScaleUp_InputScale) == 0x000044, "Member 'BP_AJBInGameMovableStand_C_UpdateMovementUpInput::CallFunc_CalcInputScaleUp_InputScale' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMovementUpInput, CallFunc_FilteringMovementDistanceLimit_OutputWorldDirection1) == 0x000048, "Member 'BP_AJBInGameMovableStand_C_UpdateMovementUpInput::CallFunc_FilteringMovementDistanceLimit_OutputWorldDirection1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMovementUpInput, CallFunc_FilteringMovementDistanceLimit_OutputScale1) == 0x000054, "Member 'BP_AJBInGameMovableStand_C_UpdateMovementUpInput::CallFunc_FilteringMovementDistanceLimit_OutputScale1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMovementUpInput, CallFunc_Multiply_VectorFloat_ReturnValue1) == 0x000058, "Member 'BP_AJBInGameMovableStand_C_UpdateMovementUpInput::CallFunc_Multiply_VectorFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMovementUpInput, CallFunc_Add_VectorVector_ReturnValue1) == 0x000064, "Member 'BP_AJBInGameMovableStand_C_UpdateMovementUpInput::CallFunc_Add_VectorVector_ReturnValue1' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.ApplyMovableStandParameter
// 0x0118 (0x0118 - 0x0000)
struct BP_AJBInGameMovableStand_C_ApplyMovableStandParameter final
{
public:
	class FText                                   CallFunc_Conv_NameToText_ReturnValue;              // 0x0000(0x0018)()
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0020(0x0040)(HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetCharacterName_CharacterName;           // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_NameToText_ReturnValue1;             // 0x0080(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData1;             // 0x0098(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00D8(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00E8(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_ApplyMovableStandParameter) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_ApplyMovableStandParameter");
static_assert(sizeof(BP_AJBInGameMovableStand_C_ApplyMovableStandParameter) == 0x000118, "Wrong size on BP_AJBInGameMovableStand_C_ApplyMovableStandParameter");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ApplyMovableStandParameter, CallFunc_Conv_NameToText_ReturnValue) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_ApplyMovableStandParameter::CallFunc_Conv_NameToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ApplyMovableStandParameter, CallFunc_GetObjectClass_ReturnValue) == 0x000018, "Member 'BP_AJBInGameMovableStand_C_ApplyMovableStandParameter::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ApplyMovableStandParameter, K2Node_MakeStruct_FormatArgumentData) == 0x000020, "Member 'BP_AJBInGameMovableStand_C_ApplyMovableStandParameter::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ApplyMovableStandParameter, CallFunc_GetOwner_ReturnValue) == 0x000060, "Member 'BP_AJBInGameMovableStand_C_ApplyMovableStandParameter::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ApplyMovableStandParameter, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000068, "Member 'BP_AJBInGameMovableStand_C_ApplyMovableStandParameter::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ApplyMovableStandParameter, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'BP_AJBInGameMovableStand_C_ApplyMovableStandParameter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ApplyMovableStandParameter, CallFunc_GetCharacterName_CharacterName) == 0x000078, "Member 'BP_AJBInGameMovableStand_C_ApplyMovableStandParameter::CallFunc_GetCharacterName_CharacterName' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ApplyMovableStandParameter, CallFunc_Conv_NameToText_ReturnValue1) == 0x000080, "Member 'BP_AJBInGameMovableStand_C_ApplyMovableStandParameter::CallFunc_Conv_NameToText_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ApplyMovableStandParameter, K2Node_MakeStruct_FormatArgumentData1) == 0x000098, "Member 'BP_AJBInGameMovableStand_C_ApplyMovableStandParameter::K2Node_MakeStruct_FormatArgumentData1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ApplyMovableStandParameter, K2Node_MakeArray_Array) == 0x0000D8, "Member 'BP_AJBInGameMovableStand_C_ApplyMovableStandParameter::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ApplyMovableStandParameter, CallFunc_Format_ReturnValue) == 0x0000E8, "Member 'BP_AJBInGameMovableStand_C_ApplyMovableStandParameter::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ApplyMovableStandParameter, CallFunc_Conv_TextToString_ReturnValue) == 0x000100, "Member 'BP_AJBInGameMovableStand_C_ApplyMovableStandParameter::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ApplyMovableStandParameter, CallFunc_Conv_StringToName_ReturnValue) == 0x000110, "Member 'BP_AJBInGameMovableStand_C_ApplyMovableStandParameter::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.SetupMaterials
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBInGameMovableStand_C_SetupMaterials final
{
public:
	TArray<struct FST_CustomSkinMaterials>        StandMaterial;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_SetupMaterials) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_SetupMaterials");
static_assert(sizeof(BP_AJBInGameMovableStand_C_SetupMaterials) == 0x000010, "Wrong size on BP_AJBInGameMovableStand_C_SetupMaterials");
static_assert(offsetof(BP_AJBInGameMovableStand_C_SetupMaterials, StandMaterial) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_SetupMaterials::StandMaterial' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.UpdateMaterials
// 0x0058 (0x0058 - 0x0000)
struct BP_AJBInGameMovableStand_C_UpdateMaterials final
{
public:
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumMaterials_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_CustomSkinMaterials                CallFunc_Array_Get_Item;                           // 0x0020(0x0010)(HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     CallFunc_Array_Get_Item1;                          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_UpdateMaterials) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_UpdateMaterials");
static_assert(sizeof(BP_AJBInGameMovableStand_C_UpdateMaterials) == 0x000058, "Wrong size on BP_AJBInGameMovableStand_C_UpdateMaterials");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMaterials, Temp_int_Loop_Counter_Variable) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_UpdateMaterials::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMaterials, CallFunc_IsDedicatedServer_ReturnValue) == 0x000004, "Member 'BP_AJBInGameMovableStand_C_UpdateMaterials::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMaterials, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_AJBInGameMovableStand_C_UpdateMaterials::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMaterials, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'BP_AJBInGameMovableStand_C_UpdateMaterials::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMaterials, CallFunc_GetNumMaterials_ReturnValue) == 0x000010, "Member 'BP_AJBInGameMovableStand_C_UpdateMaterials::CallFunc_GetNumMaterials_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMaterials, CallFunc_Subtract_IntInt_ReturnValue) == 0x000014, "Member 'BP_AJBInGameMovableStand_C_UpdateMaterials::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMaterials, CallFunc_MakeLiteralInt_ReturnValue) == 0x000018, "Member 'BP_AJBInGameMovableStand_C_UpdateMaterials::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMaterials, Temp_int_Variable) == 0x00001C, "Member 'BP_AJBInGameMovableStand_C_UpdateMaterials::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMaterials, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_AJBInGameMovableStand_C_UpdateMaterials::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMaterials, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000030, "Member 'BP_AJBInGameMovableStand_C_UpdateMaterials::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMaterials, CallFunc_Array_Add_ReturnValue) == 0x000038, "Member 'BP_AJBInGameMovableStand_C_UpdateMaterials::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMaterials, CallFunc_Array_Get_Item1) == 0x000040, "Member 'BP_AJBInGameMovableStand_C_UpdateMaterials::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMaterials, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'BP_AJBInGameMovableStand_C_UpdateMaterials::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMaterials, CallFunc_Less_IntInt_ReturnValue) == 0x00004C, "Member 'BP_AJBInGameMovableStand_C_UpdateMaterials::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMaterials, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00004D, "Member 'BP_AJBInGameMovableStand_C_UpdateMaterials::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMaterials, CallFunc_Add_IntInt_ReturnValue1) == 0x000050, "Member 'BP_AJBInGameMovableStand_C_UpdateMaterials::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_UpdateMaterials, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000054, "Member 'BP_AJBInGameMovableStand_C_UpdateMaterials::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.AddControllerInputs
// 0x0108 (0x0108 - 0x0000)
struct BP_AJBInGameMovableStand_C_AddControllerInputs final
{
public:
	float                                         TempAddValueByCameraControl;                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempLookupScale;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempTurnedScale;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempLookupRotation;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempTurnedRotation;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character1;     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_CalcCameraConfigScale_UpDownScale;        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcCameraConfigScale_RightLeftScale;     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue1;        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue2;                    // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character2;     // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable1;                              // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue3;                    // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character3;     // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable2;                              // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcFinalYawInputOnEasyOperation_InputValue; // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECameraInputMode                              Temp_byte_Variable;                                // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable3;                              // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECameraInputMode                              Temp_byte_Variable1;                               // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable4;                              // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable1;                               // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable5;                              // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue1;     // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BE[0x2];                                       // 0x00BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select1_Default;                            // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcCurrentRotationValue_TurnedRotation;  // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalcCurrentRotationValue_LookupRotation;  // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select2_Default;                            // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable2;                               // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue3;         // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue4;         // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select3_Default;                            // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue5;         // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable3;                               // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select4_Default;                            // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select5_Default;                            // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue6;         // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue7;         // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue8;         // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue9;         // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_AddControllerInputs) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_AddControllerInputs");
static_assert(sizeof(BP_AJBInGameMovableStand_C_AddControllerInputs) == 0x000108, "Wrong size on BP_AJBInGameMovableStand_C_AddControllerInputs");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, TempAddValueByCameraControl) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::TempAddValueByCameraControl' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, TempLookupScale) == 0x000004, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::TempLookupScale' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, TempTurnedScale) == 0x000008, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::TempTurnedScale' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, TempLookupRotation) == 0x00000C, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::TempLookupRotation' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, TempTurnedRotation) == 0x000010, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::TempTurnedRotation' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, CallFunc_GetOwner_ReturnValue1) == 0x000020, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000028, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, K2Node_DynamicCast_AsBP_AJBIn_Game_Character1) == 0x000038, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::K2Node_DynamicCast_AsBP_AJBIn_Game_Character1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, K2Node_DynamicCast_bSuccess1) == 0x000040, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, CallFunc_CalcCameraConfigScale_UpDownScale) == 0x000044, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::CallFunc_CalcCameraConfigScale_UpDownScale' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, CallFunc_CalcCameraConfigScale_RightLeftScale) == 0x000048, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::CallFunc_CalcCameraConfigScale_RightLeftScale' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, Temp_bool_Variable) == 0x00004C, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000050, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000054, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, CallFunc_GetWorldDeltaSeconds_ReturnValue1) == 0x000058, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::CallFunc_GetWorldDeltaSeconds_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x00005C, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, Temp_float_Variable) == 0x000060, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, CallFunc_GetOwner_ReturnValue2) == 0x000068, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::CallFunc_GetOwner_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, K2Node_DynamicCast_AsBP_AJBIn_Game_Character2) == 0x000070, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::K2Node_DynamicCast_AsBP_AJBIn_Game_Character2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, K2Node_DynamicCast_bSuccess2) == 0x000078, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, K2Node_Select_Default) == 0x00007C, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, Temp_float_Variable1) == 0x000080, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::Temp_float_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, CallFunc_GetOwner_ReturnValue3) == 0x000088, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::CallFunc_GetOwner_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, K2Node_DynamicCast_AsBP_AJBIn_Game_Character3) == 0x000090, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::K2Node_DynamicCast_AsBP_AJBIn_Game_Character3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, K2Node_DynamicCast_bSuccess3) == 0x000098, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, Temp_float_Variable2) == 0x00009C, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::Temp_float_Variable2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, CallFunc_CalcFinalYawInputOnEasyOperation_InputValue) == 0x0000A0, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::CallFunc_CalcFinalYawInputOnEasyOperation_InputValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, Temp_byte_Variable) == 0x0000A4, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, Temp_float_Variable3) == 0x0000A8, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::Temp_float_Variable3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, Temp_byte_Variable1) == 0x0000AC, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, Temp_float_Variable4) == 0x0000B0, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::Temp_float_Variable4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, Temp_bool_Variable1) == 0x0000B4, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, Temp_float_Variable5) == 0x0000B8, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::Temp_float_Variable5' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0000BC, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, CallFunc_GreaterEqual_FloatFloat_ReturnValue1) == 0x0000BD, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::CallFunc_GreaterEqual_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, K2Node_Select1_Default) == 0x0000C0, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, CallFunc_CalcCurrentRotationValue_TurnedRotation) == 0x0000C4, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::CallFunc_CalcCurrentRotationValue_TurnedRotation' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, CallFunc_CalcCurrentRotationValue_LookupRotation) == 0x0000C8, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::CallFunc_CalcCurrentRotationValue_LookupRotation' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, K2Node_Select2_Default) == 0x0000CC, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::K2Node_Select2_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x0000D0, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, Temp_bool_Variable2) == 0x0000D4, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, CallFunc_Multiply_FloatFloat_ReturnValue3) == 0x0000D8, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::CallFunc_Multiply_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, CallFunc_Multiply_FloatFloat_ReturnValue4) == 0x0000DC, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::CallFunc_Multiply_FloatFloat_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, K2Node_Select3_Default) == 0x0000E0, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::K2Node_Select3_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, CallFunc_Multiply_FloatFloat_ReturnValue5) == 0x0000E4, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::CallFunc_Multiply_FloatFloat_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, Temp_bool_Variable3) == 0x0000E8, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::Temp_bool_Variable3' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, K2Node_Select4_Default) == 0x0000EC, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::K2Node_Select4_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, K2Node_Select5_Default) == 0x0000F0, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::K2Node_Select5_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, CallFunc_Multiply_FloatFloat_ReturnValue6) == 0x0000F4, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::CallFunc_Multiply_FloatFloat_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, CallFunc_Multiply_FloatFloat_ReturnValue7) == 0x0000F8, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::CallFunc_Multiply_FloatFloat_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, CallFunc_Multiply_FloatFloat_ReturnValue8) == 0x0000FC, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::CallFunc_Multiply_FloatFloat_ReturnValue8' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_AddControllerInputs, CallFunc_Multiply_FloatFloat_ReturnValue9) == 0x000100, "Member 'BP_AJBInGameMovableStand_C_AddControllerInputs::CallFunc_Multiply_FloatFloat_ReturnValue9' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.ChangeStandMovementMode
// 0x0005 (0x0005 - 0x0000)
struct BP_AJBInGameMovableStand_C_ChangeStandMovementMode final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EMovementMode                                 Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 Temp_byte_Variable1;                               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_ChangeStandMovementMode) == 0x000001, "Wrong alignment on BP_AJBInGameMovableStand_C_ChangeStandMovementMode");
static_assert(sizeof(BP_AJBInGameMovableStand_C_ChangeStandMovementMode) == 0x000005, "Wrong size on BP_AJBInGameMovableStand_C_ChangeStandMovementMode");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ChangeStandMovementMode, bEnable) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_ChangeStandMovementMode::bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ChangeStandMovementMode, Temp_bool_Variable) == 0x000001, "Member 'BP_AJBInGameMovableStand_C_ChangeStandMovementMode::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ChangeStandMovementMode, Temp_byte_Variable) == 0x000002, "Member 'BP_AJBInGameMovableStand_C_ChangeStandMovementMode::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ChangeStandMovementMode, Temp_byte_Variable1) == 0x000003, "Member 'BP_AJBInGameMovableStand_C_ChangeStandMovementMode::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_ChangeStandMovementMode, K2Node_Select_Default) == 0x000004, "Member 'BP_AJBInGameMovableStand_C_ChangeStandMovementMode::K2Node_Select_Default' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.GetStandInfoForChangingSkin
// 0x01D0 (0x01D0 - 0x0000)
struct BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin final
{
public:
	class FString                                 StandName;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	uint8                                         skinID;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0020(0x0010)(ZeroConstructor, ReferenceParm)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAJBCharacterInfo                      CallFunc_GetDataTableRowFromName_OutRow;           // 0x0040(0x00E8)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAJBGameInstance_bSuccess;              // 0x012A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12B[0x5];                                      // 0x012B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBGameInstance_C*                  CallFunc_GetAJBGameInstance_AJB_Game_Instance;     // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMatchingPlayerInfo                    CallFunc_TryGetMatchingPlayerInfoByPlayerID_Out;   // 0x0138(0x0088)()
	bool                                          CallFunc_TryGetMatchingPlayerInfoByPlayerID_ReturnValue; // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C1[0x3];                                      // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin");
static_assert(sizeof(BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin) == 0x0001D0, "Wrong size on BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin, StandName) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin::StandName' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin, skinID) == 0x000010, "Member 'BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin::skinID' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin, Temp_int_Array_Index_Variable) == 0x000014, "Member 'BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000020, "Member 'BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin, CallFunc_GetDataTableRowFromName_OutRow) == 0x000040, "Member 'BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000128, "Member 'BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin, CallFunc_Less_IntInt_ReturnValue) == 0x000129, "Member 'BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin, CallFunc_GetAJBGameInstance_bSuccess) == 0x00012A, "Member 'BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin::CallFunc_GetAJBGameInstance_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin, CallFunc_GetAJBGameInstance_AJB_Game_Instance) == 0x000130, "Member 'BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin::CallFunc_GetAJBGameInstance_AJB_Game_Instance' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin, CallFunc_TryGetMatchingPlayerInfoByPlayerID_Out) == 0x000138, "Member 'BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin::CallFunc_TryGetMatchingPlayerInfoByPlayerID_Out' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin, CallFunc_TryGetMatchingPlayerInfoByPlayerID_ReturnValue) == 0x0001C0, "Member 'BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin::CallFunc_TryGetMatchingPlayerInfoByPlayerID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin, CallFunc_Conv_ByteToInt_ReturnValue) == 0x0001C4, "Member 'BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0001C8, "Member 'BP_AJBInGameMovableStand_C_GetStandInfoForChangingSkin::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.CalcInputScaleUp
// 0x0024 (0x0024 - 0x0000)
struct BP_AJBInGameMovableStand_C_CalcInputScaleUp final
{
public:
	float                                         InputScale;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckChangeableSpeed_bChangeable;         // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_CalcInputScaleUp) == 0x000004, "Wrong alignment on BP_AJBInGameMovableStand_C_CalcInputScaleUp");
static_assert(sizeof(BP_AJBInGameMovableStand_C_CalcInputScaleUp) == 0x000024, "Wrong size on BP_AJBInGameMovableStand_C_CalcInputScaleUp");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CalcInputScaleUp, InputScale) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_CalcInputScaleUp::InputScale' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CalcInputScaleUp, Temp_bool_Variable) == 0x000004, "Member 'BP_AJBInGameMovableStand_C_CalcInputScaleUp::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CalcInputScaleUp, Temp_float_Variable) == 0x000008, "Member 'BP_AJBInGameMovableStand_C_CalcInputScaleUp::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CalcInputScaleUp, CallFunc_CheckChangeableSpeed_bChangeable) == 0x00000C, "Member 'BP_AJBInGameMovableStand_C_CalcInputScaleUp::CallFunc_CheckChangeableSpeed_bChangeable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CalcInputScaleUp, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_AJBInGameMovableStand_C_CalcInputScaleUp::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CalcInputScaleUp, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_AJBInGameMovableStand_C_CalcInputScaleUp::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CalcInputScaleUp, K2Node_Select_Default) == 0x000018, "Member 'BP_AJBInGameMovableStand_C_CalcInputScaleUp::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CalcInputScaleUp, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x00001C, "Member 'BP_AJBInGameMovableStand_C_CalcInputScaleUp::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CalcInputScaleUp, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x000020, "Member 'BP_AJBInGameMovableStand_C_CalcInputScaleUp::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.CalcInputScaleDown
// 0x0024 (0x0024 - 0x0000)
struct BP_AJBInGameMovableStand_C_CalcInputScaleDown final
{
public:
	float                                         InputScale;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckChangeableSpeed_bChangeable;         // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue1;         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue2;         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_CalcInputScaleDown) == 0x000004, "Wrong alignment on BP_AJBInGameMovableStand_C_CalcInputScaleDown");
static_assert(sizeof(BP_AJBInGameMovableStand_C_CalcInputScaleDown) == 0x000024, "Wrong size on BP_AJBInGameMovableStand_C_CalcInputScaleDown");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CalcInputScaleDown, InputScale) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_CalcInputScaleDown::InputScale' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CalcInputScaleDown, Temp_bool_Variable) == 0x000004, "Member 'BP_AJBInGameMovableStand_C_CalcInputScaleDown::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CalcInputScaleDown, Temp_float_Variable) == 0x000008, "Member 'BP_AJBInGameMovableStand_C_CalcInputScaleDown::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CalcInputScaleDown, CallFunc_CheckChangeableSpeed_bChangeable) == 0x00000C, "Member 'BP_AJBInGameMovableStand_C_CalcInputScaleDown::CallFunc_CheckChangeableSpeed_bChangeable' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CalcInputScaleDown, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_AJBInGameMovableStand_C_CalcInputScaleDown::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CalcInputScaleDown, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_AJBInGameMovableStand_C_CalcInputScaleDown::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CalcInputScaleDown, K2Node_Select_Default) == 0x000018, "Member 'BP_AJBInGameMovableStand_C_CalcInputScaleDown::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CalcInputScaleDown, CallFunc_Multiply_FloatFloat_ReturnValue1) == 0x00001C, "Member 'BP_AJBInGameMovableStand_C_CalcInputScaleDown::CallFunc_Multiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CalcInputScaleDown, CallFunc_Multiply_FloatFloat_ReturnValue2) == 0x000020, "Member 'BP_AJBInGameMovableStand_C_CalcInputScaleDown::CallFunc_Multiply_FloatFloat_ReturnValue2' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.CheckMoveZAxis
// 0x0002 (0x0002 - 0x0000)
struct BP_AJBInGameMovableStand_C_CheckMoveZAxis final
{
public:
	bool                                          bMove;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_CheckMoveZAxis) == 0x000001, "Wrong alignment on BP_AJBInGameMovableStand_C_CheckMoveZAxis");
static_assert(sizeof(BP_AJBInGameMovableStand_C_CheckMoveZAxis) == 0x000002, "Wrong size on BP_AJBInGameMovableStand_C_CheckMoveZAxis");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckMoveZAxis, bMove) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_CheckMoveZAxis::bMove' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckMoveZAxis, CallFunc_BooleanOR_ReturnValue) == 0x000001, "Member 'BP_AJBInGameMovableStand_C_CheckMoveZAxis::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.CheckChangeableSpeed
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameMovableStand_C_CheckChangeableSpeed final
{
public:
	bool                                          bChangeable;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_CheckChangeableSpeed) == 0x000001, "Wrong alignment on BP_AJBInGameMovableStand_C_CheckChangeableSpeed");
static_assert(sizeof(BP_AJBInGameMovableStand_C_CheckChangeableSpeed) == 0x000001, "Wrong size on BP_AJBInGameMovableStand_C_CheckChangeableSpeed");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckChangeableSpeed, bChangeable) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_CheckChangeableSpeed::bChangeable' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.GetPoliticMovementDistanceLimit
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBInGameMovableStand_C_GetPoliticMovementDistanceLimit final
{
public:
	float                                         MovementDistanceLimit;                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_GetPoliticMovementDistanceLimit) == 0x000004, "Wrong alignment on BP_AJBInGameMovableStand_C_GetPoliticMovementDistanceLimit");
static_assert(sizeof(BP_AJBInGameMovableStand_C_GetPoliticMovementDistanceLimit) == 0x000004, "Wrong size on BP_AJBInGameMovableStand_C_GetPoliticMovementDistanceLimit");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetPoliticMovementDistanceLimit, MovementDistanceLimit) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_GetPoliticMovementDistanceLimit::MovementDistanceLimit' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.GetCapsuleBothEndPoints
// 0x0090 (0x0090 - 0x0000)
struct BP_AJBInGameMovableStand_C_GetCapsuleBothEndPoints final
{
public:
	struct FVector                                TopPoint;                                          // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BottomPoint;                                       // 0x000C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorUpVector_ReturnValue;             // 0x0018(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue;       // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_NegateVector_ReturnValue;                 // 0x0028(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0034(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorUpVector_ReturnValue1;            // 0x0040(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue1;         // 0x004C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0060(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue1;        // 0x006C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0078(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue1;            // 0x0084(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_GetCapsuleBothEndPoints) == 0x000004, "Wrong alignment on BP_AJBInGameMovableStand_C_GetCapsuleBothEndPoints");
static_assert(sizeof(BP_AJBInGameMovableStand_C_GetCapsuleBothEndPoints) == 0x000090, "Wrong size on BP_AJBInGameMovableStand_C_GetCapsuleBothEndPoints");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetCapsuleBothEndPoints, TopPoint) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_GetCapsuleBothEndPoints::TopPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetCapsuleBothEndPoints, BottomPoint) == 0x00000C, "Member 'BP_AJBInGameMovableStand_C_GetCapsuleBothEndPoints::BottomPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetCapsuleBothEndPoints, CallFunc_GetActorUpVector_ReturnValue) == 0x000018, "Member 'BP_AJBInGameMovableStand_C_GetCapsuleBothEndPoints::CallFunc_GetActorUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetCapsuleBothEndPoints, CallFunc_GetScaledCapsuleRadius_ReturnValue) == 0x000024, "Member 'BP_AJBInGameMovableStand_C_GetCapsuleBothEndPoints::CallFunc_GetScaledCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetCapsuleBothEndPoints, CallFunc_NegateVector_ReturnValue) == 0x000028, "Member 'BP_AJBInGameMovableStand_C_GetCapsuleBothEndPoints::CallFunc_NegateVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetCapsuleBothEndPoints, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000034, "Member 'BP_AJBInGameMovableStand_C_GetCapsuleBothEndPoints::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetCapsuleBothEndPoints, CallFunc_GetActorUpVector_ReturnValue1) == 0x000040, "Member 'BP_AJBInGameMovableStand_C_GetCapsuleBothEndPoints::CallFunc_GetActorUpVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetCapsuleBothEndPoints, CallFunc_K2_GetActorLocation_ReturnValue1) == 0x00004C, "Member 'BP_AJBInGameMovableStand_C_GetCapsuleBothEndPoints::CallFunc_K2_GetActorLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetCapsuleBothEndPoints, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000058, "Member 'BP_AJBInGameMovableStand_C_GetCapsuleBothEndPoints::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetCapsuleBothEndPoints, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00005C, "Member 'BP_AJBInGameMovableStand_C_GetCapsuleBothEndPoints::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetCapsuleBothEndPoints, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000060, "Member 'BP_AJBInGameMovableStand_C_GetCapsuleBothEndPoints::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetCapsuleBothEndPoints, CallFunc_Multiply_VectorFloat_ReturnValue1) == 0x00006C, "Member 'BP_AJBInGameMovableStand_C_GetCapsuleBothEndPoints::CallFunc_Multiply_VectorFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetCapsuleBothEndPoints, CallFunc_Add_VectorVector_ReturnValue) == 0x000078, "Member 'BP_AJBInGameMovableStand_C_GetCapsuleBothEndPoints::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetCapsuleBothEndPoints, CallFunc_Add_VectorVector_ReturnValue1) == 0x000084, "Member 'BP_AJBInGameMovableStand_C_GetCapsuleBothEndPoints::CallFunc_Add_VectorVector_ReturnValue1' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.GetStandName
// 0x0058 (0x0058 - 0x0000)
struct BP_AJBInGameMovableStand_C_GetStandName final
{
public:
	class FName                                   StandName;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Split_LeftS;                              // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Split_RightS;                             // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Split_ReturnValue;                        // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetSubstring_ReturnValue;                 // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_GetStandName) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_GetStandName");
static_assert(sizeof(BP_AJBInGameMovableStand_C_GetStandName) == 0x000058, "Wrong size on BP_AJBInGameMovableStand_C_GetStandName");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetStandName, StandName) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_GetStandName::StandName' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetStandName, CallFunc_GetObjectName_ReturnValue) == 0x000008, "Member 'BP_AJBInGameMovableStand_C_GetStandName::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetStandName, CallFunc_Split_LeftS) == 0x000018, "Member 'BP_AJBInGameMovableStand_C_GetStandName::CallFunc_Split_LeftS' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetStandName, CallFunc_Split_RightS) == 0x000028, "Member 'BP_AJBInGameMovableStand_C_GetStandName::CallFunc_Split_RightS' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetStandName, CallFunc_Split_ReturnValue) == 0x000038, "Member 'BP_AJBInGameMovableStand_C_GetStandName::CallFunc_Split_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetStandName, CallFunc_GetSubstring_ReturnValue) == 0x000040, "Member 'BP_AJBInGameMovableStand_C_GetStandName::CallFunc_GetSubstring_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetStandName, CallFunc_Conv_StringToName_ReturnValue) == 0x000050, "Member 'BP_AJBInGameMovableStand_C_GetStandName::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.OwnHitParam
// 0x0058 (0x0058 - 0x0000)
struct BP_AJBInGameMovableStand_C_OwnHitParam final
{
public:
	bool                                          bCharacter;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bLeftAP;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ParticleTagBlockedByAAP;                           // 0x0008(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SETagBlockedByAAP;                                 // 0x0010(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ParticleTagBlocked;                                // 0x0018(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBI_AJBInterface_C>    K2Node_DynamicCast_AsBI_AJBInterface;              // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OwnHitParam_bCharacter;                   // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OwnHitParam_bLeftAP;                      // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_OwnHitParam_ParticleTagBlockedByAAP;      // 0x0040(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_OwnHitParam_SETagBlockedByAAP;            // 0x0048(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_OwnHitParam_ParticleTagBlocked;           // 0x0050(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_OwnHitParam) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_OwnHitParam");
static_assert(sizeof(BP_AJBInGameMovableStand_C_OwnHitParam) == 0x000058, "Wrong size on BP_AJBInGameMovableStand_C_OwnHitParam");
static_assert(offsetof(BP_AJBInGameMovableStand_C_OwnHitParam, bCharacter) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_OwnHitParam::bCharacter' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_OwnHitParam, bLeftAP) == 0x000001, "Member 'BP_AJBInGameMovableStand_C_OwnHitParam::bLeftAP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_OwnHitParam, ParticleTagBlockedByAAP) == 0x000008, "Member 'BP_AJBInGameMovableStand_C_OwnHitParam::ParticleTagBlockedByAAP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_OwnHitParam, SETagBlockedByAAP) == 0x000010, "Member 'BP_AJBInGameMovableStand_C_OwnHitParam::SETagBlockedByAAP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_OwnHitParam, ParticleTagBlocked) == 0x000018, "Member 'BP_AJBInGameMovableStand_C_OwnHitParam::ParticleTagBlocked' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_OwnHitParam, CallFunc_GetOwner_ReturnValue) == 0x000020, "Member 'BP_AJBInGameMovableStand_C_OwnHitParam::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_OwnHitParam, K2Node_DynamicCast_AsBI_AJBInterface) == 0x000028, "Member 'BP_AJBInGameMovableStand_C_OwnHitParam::K2Node_DynamicCast_AsBI_AJBInterface' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_OwnHitParam, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_AJBInGameMovableStand_C_OwnHitParam::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_OwnHitParam, CallFunc_OwnHitParam_bCharacter) == 0x000039, "Member 'BP_AJBInGameMovableStand_C_OwnHitParam::CallFunc_OwnHitParam_bCharacter' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_OwnHitParam, CallFunc_OwnHitParam_bLeftAP) == 0x00003A, "Member 'BP_AJBInGameMovableStand_C_OwnHitParam::CallFunc_OwnHitParam_bLeftAP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_OwnHitParam, CallFunc_OwnHitParam_ParticleTagBlockedByAAP) == 0x000040, "Member 'BP_AJBInGameMovableStand_C_OwnHitParam::CallFunc_OwnHitParam_ParticleTagBlockedByAAP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_OwnHitParam, CallFunc_OwnHitParam_SETagBlockedByAAP) == 0x000048, "Member 'BP_AJBInGameMovableStand_C_OwnHitParam::CallFunc_OwnHitParam_SETagBlockedByAAP' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_OwnHitParam, CallFunc_OwnHitParam_ParticleTagBlocked) == 0x000050, "Member 'BP_AJBInGameMovableStand_C_OwnHitParam::CallFunc_OwnHitParam_ParticleTagBlocked' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.CheckTargetSelf
// 0x0030 (0x0030 - 0x0000)
struct BP_AJBInGameMovableStand_C_CheckTargetSelf final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bForDamageOverlap;                                 // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIgnoreMovableStand;                               // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIncludeSelf;                                      // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bAfterReflectShouldHitOwner;                       // 0x000B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bTarget;                                           // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAppearance_ReturnValue;                 // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBI_AJBInterface_C>    K2Node_DynamicCast_AsBI_AJBInterface;              // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckTargetSelf_bTarget;                  // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_CheckTargetSelf) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_CheckTargetSelf");
static_assert(sizeof(BP_AJBInGameMovableStand_C_CheckTargetSelf) == 0x000030, "Wrong size on BP_AJBInGameMovableStand_C_CheckTargetSelf");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckTargetSelf, DamageCauser) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_CheckTargetSelf::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckTargetSelf, bForDamageOverlap) == 0x000008, "Member 'BP_AJBInGameMovableStand_C_CheckTargetSelf::bForDamageOverlap' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckTargetSelf, bIgnoreMovableStand) == 0x000009, "Member 'BP_AJBInGameMovableStand_C_CheckTargetSelf::bIgnoreMovableStand' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckTargetSelf, bIncludeSelf) == 0x00000A, "Member 'BP_AJBInGameMovableStand_C_CheckTargetSelf::bIncludeSelf' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckTargetSelf, bAfterReflectShouldHitOwner) == 0x00000B, "Member 'BP_AJBInGameMovableStand_C_CheckTargetSelf::bAfterReflectShouldHitOwner' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckTargetSelf, bTarget) == 0x00000C, "Member 'BP_AJBInGameMovableStand_C_CheckTargetSelf::bTarget' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckTargetSelf, CallFunc_IsAppearance_ReturnValue) == 0x00000D, "Member 'BP_AJBInGameMovableStand_C_CheckTargetSelf::CallFunc_IsAppearance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckTargetSelf, CallFunc_Not_PreBool_ReturnValue) == 0x00000E, "Member 'BP_AJBInGameMovableStand_C_CheckTargetSelf::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckTargetSelf, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'BP_AJBInGameMovableStand_C_CheckTargetSelf::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckTargetSelf, K2Node_DynamicCast_AsBI_AJBInterface) == 0x000018, "Member 'BP_AJBInGameMovableStand_C_CheckTargetSelf::K2Node_DynamicCast_AsBI_AJBInterface' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckTargetSelf, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_AJBInGameMovableStand_C_CheckTargetSelf::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckTargetSelf, CallFunc_CheckTargetSelf_bTarget) == 0x000029, "Member 'BP_AJBInGameMovableStand_C_CheckTargetSelf::CallFunc_CheckTargetSelf_bTarget' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckTargetSelf, CallFunc_BooleanAND_ReturnValue) == 0x00002A, "Member 'BP_AJBInGameMovableStand_C_CheckTargetSelf::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckTargetSelf, CallFunc_BooleanAND_ReturnValue1) == 0x00002B, "Member 'BP_AJBInGameMovableStand_C_CheckTargetSelf::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.IfCheckDamageOverlap
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameMovableStand_C_IfCheckDamageOverlap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_IfCheckDamageOverlap) == 0x000001, "Wrong alignment on BP_AJBInGameMovableStand_C_IfCheckDamageOverlap");
static_assert(sizeof(BP_AJBInGameMovableStand_C_IfCheckDamageOverlap) == 0x000001, "Wrong size on BP_AJBInGameMovableStand_C_IfCheckDamageOverlap");
static_assert(offsetof(BP_AJBInGameMovableStand_C_IfCheckDamageOverlap, ReturnValue) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_IfCheckDamageOverlap::ReturnValue' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.CheckDisableDamage
// 0x0040 (0x0040 - 0x0000)
struct BP_AJBInGameMovableStand_C_CheckDisableDamage final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIgnoreSelf;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDisableDamage;                                    // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBInterface_C>    CallFunc_CheckDisableDamage_self_CastInput;        // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckDisableDamage_bDisableDamage;        // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_CheckDisableDamage) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_CheckDisableDamage");
static_assert(sizeof(BP_AJBInGameMovableStand_C_CheckDisableDamage) == 0x000040, "Wrong size on BP_AJBInGameMovableStand_C_CheckDisableDamage");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckDisableDamage, DamageCauser) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_CheckDisableDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckDisableDamage, bIgnoreSelf) == 0x000008, "Member 'BP_AJBInGameMovableStand_C_CheckDisableDamage::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckDisableDamage, bDisableDamage) == 0x000009, "Member 'BP_AJBInGameMovableStand_C_CheckDisableDamage::bDisableDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckDisableDamage, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'BP_AJBInGameMovableStand_C_CheckDisableDamage::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckDisableDamage, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000018, "Member 'BP_AJBInGameMovableStand_C_CheckDisableDamage::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckDisableDamage, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_AJBInGameMovableStand_C_CheckDisableDamage::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckDisableDamage, CallFunc_CheckDisableDamage_self_CastInput) == 0x000028, "Member 'BP_AJBInGameMovableStand_C_CheckDisableDamage::CallFunc_CheckDisableDamage_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckDisableDamage, CallFunc_CheckDisableDamage_bDisableDamage) == 0x000038, "Member 'BP_AJBInGameMovableStand_C_CheckDisableDamage::CallFunc_CheckDisableDamage_bDisableDamage' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.CheckDisablePassive
// 0x0048 (0x0048 - 0x0000)
struct BP_AJBInGameMovableStand_C_CheckDisablePassive final
{
public:
	class AActor*                                 PassiveCauser;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           PassiveTag;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          bIgnoreSelf;                                       // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDisablePassive;                                   // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBInterface_C>    CallFunc_CheckDisablePassive_self_CastInput;       // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckDisablePassive_bDisablePassive;      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_CheckDisablePassive) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_CheckDisablePassive");
static_assert(sizeof(BP_AJBInGameMovableStand_C_CheckDisablePassive) == 0x000048, "Wrong size on BP_AJBInGameMovableStand_C_CheckDisablePassive");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckDisablePassive, PassiveCauser) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_CheckDisablePassive::PassiveCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckDisablePassive, PassiveTag) == 0x000008, "Member 'BP_AJBInGameMovableStand_C_CheckDisablePassive::PassiveTag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckDisablePassive, bIgnoreSelf) == 0x000010, "Member 'BP_AJBInGameMovableStand_C_CheckDisablePassive::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckDisablePassive, bDisablePassive) == 0x000011, "Member 'BP_AJBInGameMovableStand_C_CheckDisablePassive::bDisablePassive' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckDisablePassive, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'BP_AJBInGameMovableStand_C_CheckDisablePassive::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckDisablePassive, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000020, "Member 'BP_AJBInGameMovableStand_C_CheckDisablePassive::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckDisablePassive, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_AJBInGameMovableStand_C_CheckDisablePassive::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckDisablePassive, CallFunc_CheckDisablePassive_self_CastInput) == 0x000030, "Member 'BP_AJBInGameMovableStand_C_CheckDisablePassive::CallFunc_CheckDisablePassive_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckDisablePassive, CallFunc_CheckDisablePassive_bDisablePassive) == 0x000040, "Member 'BP_AJBInGameMovableStand_C_CheckDisablePassive::CallFunc_CheckDisablePassive_bDisablePassive' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.CheckDisableAreaDamage
// 0x0038 (0x0038 - 0x0000)
struct BP_AJBInGameMovableStand_C_CheckDisableAreaDamage final
{
public:
	bool                                          bDisableAreadamage;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBInterface_C>    CallFunc_CheckDisableAreaDamage_self_CastInput;    // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckDisableAreaDamage_bDisableAreadamage; // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_CheckDisableAreaDamage) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_CheckDisableAreaDamage");
static_assert(sizeof(BP_AJBInGameMovableStand_C_CheckDisableAreaDamage) == 0x000038, "Wrong size on BP_AJBInGameMovableStand_C_CheckDisableAreaDamage");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckDisableAreaDamage, bDisableAreadamage) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_CheckDisableAreaDamage::bDisableAreadamage' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckDisableAreaDamage, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBInGameMovableStand_C_CheckDisableAreaDamage::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckDisableAreaDamage, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000010, "Member 'BP_AJBInGameMovableStand_C_CheckDisableAreaDamage::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckDisableAreaDamage, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AJBInGameMovableStand_C_CheckDisableAreaDamage::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckDisableAreaDamage, CallFunc_CheckDisableAreaDamage_self_CastInput) == 0x000020, "Member 'BP_AJBInGameMovableStand_C_CheckDisableAreaDamage::CallFunc_CheckDisableAreaDamage_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckDisableAreaDamage, CallFunc_CheckDisableAreaDamage_bDisableAreadamage) == 0x000030, "Member 'BP_AJBInGameMovableStand_C_CheckDisableAreaDamage::CallFunc_CheckDisableAreaDamage_bDisableAreadamage' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.CheckNoDamage
// 0x0040 (0x0040 - 0x0000)
struct BP_AJBInGameMovableStand_C_CheckNoDamage final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNoDamage;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBInterface_C>    CallFunc_CheckNoDamage_self_CastInput;             // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckNoDamage_bNoDamage;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_CheckNoDamage) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_CheckNoDamage");
static_assert(sizeof(BP_AJBInGameMovableStand_C_CheckNoDamage) == 0x000040, "Wrong size on BP_AJBInGameMovableStand_C_CheckNoDamage");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckNoDamage, DamageCauser) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_CheckNoDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckNoDamage, bNoDamage) == 0x000008, "Member 'BP_AJBInGameMovableStand_C_CheckNoDamage::bNoDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckNoDamage, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'BP_AJBInGameMovableStand_C_CheckNoDamage::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckNoDamage, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000018, "Member 'BP_AJBInGameMovableStand_C_CheckNoDamage::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckNoDamage, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_AJBInGameMovableStand_C_CheckNoDamage::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckNoDamage, CallFunc_CheckNoDamage_self_CastInput) == 0x000028, "Member 'BP_AJBInGameMovableStand_C_CheckNoDamage::CallFunc_CheckNoDamage_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckNoDamage, CallFunc_CheckNoDamage_bNoDamage) == 0x000038, "Member 'BP_AJBInGameMovableStand_C_CheckNoDamage::CallFunc_CheckNoDamage_bNoDamage' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.IsReactedByReticule
// 0x0028 (0x0028 - 0x0000)
struct BP_AJBInGameMovableStand_C_IsReactedByReticule final
{
public:
	bool                                          bResult;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBI_AJBInterface_C>    K2Node_DynamicCast_AsBI_AJBInterface;              // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsReactedByReticule_bResult;              // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_IsReactedByReticule) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_IsReactedByReticule");
static_assert(sizeof(BP_AJBInGameMovableStand_C_IsReactedByReticule) == 0x000028, "Wrong size on BP_AJBInGameMovableStand_C_IsReactedByReticule");
static_assert(offsetof(BP_AJBInGameMovableStand_C_IsReactedByReticule, bResult) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_IsReactedByReticule::bResult' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_IsReactedByReticule, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBInGameMovableStand_C_IsReactedByReticule::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_IsReactedByReticule, K2Node_DynamicCast_AsBI_AJBInterface) == 0x000010, "Member 'BP_AJBInGameMovableStand_C_IsReactedByReticule::K2Node_DynamicCast_AsBI_AJBInterface' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_IsReactedByReticule, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_AJBInGameMovableStand_C_IsReactedByReticule::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_IsReactedByReticule, CallFunc_IsReactedByReticule_bResult) == 0x000021, "Member 'BP_AJBInGameMovableStand_C_IsReactedByReticule::CallFunc_IsReactedByReticule_bResult' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.IgnoreTrace
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBInGameMovableStand_C_IgnoreTrace final
{
public:
	class AActor*                                 Owner_0;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPairOnly;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIgnore;                                           // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_IgnoreTrace) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_IgnoreTrace");
static_assert(sizeof(BP_AJBInGameMovableStand_C_IgnoreTrace) == 0x000010, "Wrong size on BP_AJBInGameMovableStand_C_IgnoreTrace");
static_assert(offsetof(BP_AJBInGameMovableStand_C_IgnoreTrace, Owner_0) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_IgnoreTrace::Owner_0' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_IgnoreTrace, bPairOnly) == 0x000008, "Member 'BP_AJBInGameMovableStand_C_IgnoreTrace::bPairOnly' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_IgnoreTrace, bIgnore) == 0x000009, "Member 'BP_AJBInGameMovableStand_C_IgnoreTrace::bIgnore' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.CheckDisableDirectDamage
// 0x0040 (0x0040 - 0x0000)
struct BP_AJBInGameMovableStand_C_CheckDisableDirectDamage final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisableDirectDamage;                              // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBInterface_C>    CallFunc_CheckDisableDirectDamage_self_CastInput;  // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckDisableDirectDamage_bDisableDirectDamage; // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_CheckDisableDirectDamage) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_CheckDisableDirectDamage");
static_assert(sizeof(BP_AJBInGameMovableStand_C_CheckDisableDirectDamage) == 0x000040, "Wrong size on BP_AJBInGameMovableStand_C_CheckDisableDirectDamage");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckDisableDirectDamage, DamageCauser) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_CheckDisableDirectDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckDisableDirectDamage, bDisableDirectDamage) == 0x000008, "Member 'BP_AJBInGameMovableStand_C_CheckDisableDirectDamage::bDisableDirectDamage' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckDisableDirectDamage, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'BP_AJBInGameMovableStand_C_CheckDisableDirectDamage::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckDisableDirectDamage, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000018, "Member 'BP_AJBInGameMovableStand_C_CheckDisableDirectDamage::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckDisableDirectDamage, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_AJBInGameMovableStand_C_CheckDisableDirectDamage::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckDisableDirectDamage, CallFunc_CheckDisableDirectDamage_self_CastInput) == 0x000028, "Member 'BP_AJBInGameMovableStand_C_CheckDisableDirectDamage::CallFunc_CheckDisableDirectDamage_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckDisableDirectDamage, CallFunc_CheckDisableDirectDamage_bDisableDirectDamage) == 0x000038, "Member 'BP_AJBInGameMovableStand_C_CheckDisableDirectDamage::CallFunc_CheckDisableDirectDamage_bDisableDirectDamage' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.CheckAreaIn
// 0x0070 (0x0070 - 0x0000)
struct BP_AJBInGameMovableStand_C_CheckAreaIn final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         Radius;                                            // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Length;                                            // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PartitionNum;                                      // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCheckUnder;                                       // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ValidGroundOffsetZ;                                // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseBoxCollision;                                  // 0x002C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BoxExtent;                                         // 0x0030(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTarget;                                           // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetCapsuleBothEndPoints_TopPoint;         // 0x0040(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCapsuleBothEndPoints_BottomPoint;      // 0x004C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0058(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleRadius_ReturnValue;       // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HitCheck_ContinuedSphere_Sphere_bHit;     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSphereInBox_ReturnValue;                // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSphereInBox_ReturnValue1;               // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSphereInBox_ReturnValue2;               // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue1;                   // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_CheckAreaIn) == 0x000004, "Wrong alignment on BP_AJBInGameMovableStand_C_CheckAreaIn");
static_assert(sizeof(BP_AJBInGameMovableStand_C_CheckAreaIn) == 0x000070, "Wrong size on BP_AJBInGameMovableStand_C_CheckAreaIn");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckAreaIn, Location) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_CheckAreaIn::Location' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckAreaIn, Rotation) == 0x00000C, "Member 'BP_AJBInGameMovableStand_C_CheckAreaIn::Rotation' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckAreaIn, Radius) == 0x000018, "Member 'BP_AJBInGameMovableStand_C_CheckAreaIn::Radius' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckAreaIn, Length) == 0x00001C, "Member 'BP_AJBInGameMovableStand_C_CheckAreaIn::Length' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckAreaIn, PartitionNum) == 0x000020, "Member 'BP_AJBInGameMovableStand_C_CheckAreaIn::PartitionNum' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckAreaIn, bCheckUnder) == 0x000024, "Member 'BP_AJBInGameMovableStand_C_CheckAreaIn::bCheckUnder' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckAreaIn, ValidGroundOffsetZ) == 0x000028, "Member 'BP_AJBInGameMovableStand_C_CheckAreaIn::ValidGroundOffsetZ' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckAreaIn, bUseBoxCollision) == 0x00002C, "Member 'BP_AJBInGameMovableStand_C_CheckAreaIn::bUseBoxCollision' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckAreaIn, BoxExtent) == 0x000030, "Member 'BP_AJBInGameMovableStand_C_CheckAreaIn::BoxExtent' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckAreaIn, bTarget) == 0x00003C, "Member 'BP_AJBInGameMovableStand_C_CheckAreaIn::bTarget' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckAreaIn, CallFunc_GetCapsuleBothEndPoints_TopPoint) == 0x000040, "Member 'BP_AJBInGameMovableStand_C_CheckAreaIn::CallFunc_GetCapsuleBothEndPoints_TopPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckAreaIn, CallFunc_GetCapsuleBothEndPoints_BottomPoint) == 0x00004C, "Member 'BP_AJBInGameMovableStand_C_CheckAreaIn::CallFunc_GetCapsuleBothEndPoints_BottomPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckAreaIn, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000058, "Member 'BP_AJBInGameMovableStand_C_CheckAreaIn::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckAreaIn, CallFunc_GetScaledCapsuleRadius_ReturnValue) == 0x000064, "Member 'BP_AJBInGameMovableStand_C_CheckAreaIn::CallFunc_GetScaledCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckAreaIn, CallFunc_HitCheck_ContinuedSphere_Sphere_bHit) == 0x000068, "Member 'BP_AJBInGameMovableStand_C_CheckAreaIn::CallFunc_HitCheck_ContinuedSphere_Sphere_bHit' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckAreaIn, CallFunc_IsSphereInBox_ReturnValue) == 0x000069, "Member 'BP_AJBInGameMovableStand_C_CheckAreaIn::CallFunc_IsSphereInBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckAreaIn, CallFunc_IsSphereInBox_ReturnValue1) == 0x00006A, "Member 'BP_AJBInGameMovableStand_C_CheckAreaIn::CallFunc_IsSphereInBox_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckAreaIn, CallFunc_IsSphereInBox_ReturnValue2) == 0x00006B, "Member 'BP_AJBInGameMovableStand_C_CheckAreaIn::CallFunc_IsSphereInBox_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckAreaIn, CallFunc_BooleanOR_ReturnValue) == 0x00006C, "Member 'BP_AJBInGameMovableStand_C_CheckAreaIn::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_CheckAreaIn, CallFunc_BooleanOR_ReturnValue1) == 0x00006D, "Member 'BP_AJBInGameMovableStand_C_CheckAreaIn::CallFunc_BooleanOR_ReturnValue1' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.IgnoreAttackHitNotifyOnAreaIn
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameMovableStand_C_IgnoreAttackHitNotifyOnAreaIn final
{
public:
	bool                                          bIgnore;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_IgnoreAttackHitNotifyOnAreaIn) == 0x000001, "Wrong alignment on BP_AJBInGameMovableStand_C_IgnoreAttackHitNotifyOnAreaIn");
static_assert(sizeof(BP_AJBInGameMovableStand_C_IgnoreAttackHitNotifyOnAreaIn) == 0x000001, "Wrong size on BP_AJBInGameMovableStand_C_IgnoreAttackHitNotifyOnAreaIn");
static_assert(offsetof(BP_AJBInGameMovableStand_C_IgnoreAttackHitNotifyOnAreaIn, bIgnore) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_IgnoreAttackHitNotifyOnAreaIn::bIgnore' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.GetGameplayTags
// 0x0020 (0x0020 - 0x0000)
struct BP_AJBInGameMovableStand_C_GetGameplayTags final
{
public:
	struct FGameplayTagContainer                  TagContainerCopy;                                  // 0x0000(0x0020)(Parm, OutParm)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_GetGameplayTags) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_GetGameplayTags");
static_assert(sizeof(BP_AJBInGameMovableStand_C_GetGameplayTags) == 0x000020, "Wrong size on BP_AJBInGameMovableStand_C_GetGameplayTags");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetGameplayTags, TagContainerCopy) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_GetGameplayTags::TagContainerCopy' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.GetPrimitivesToChangeStencil
// 0x0028 (0x0028 - 0x0000)
struct BP_AJBInGameMovableStand_C_GetPrimitivesToChangeStencil final
{
public:
	E_StencilDigit                                StencilDigit;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            PrimitiveComponents;                               // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<class UPrimitiveComponent*>            K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ZeroConstructor, ReferenceParm)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_GetPrimitivesToChangeStencil) == 0x000008, "Wrong alignment on BP_AJBInGameMovableStand_C_GetPrimitivesToChangeStencil");
static_assert(sizeof(BP_AJBInGameMovableStand_C_GetPrimitivesToChangeStencil) == 0x000028, "Wrong size on BP_AJBInGameMovableStand_C_GetPrimitivesToChangeStencil");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetPrimitivesToChangeStencil, StencilDigit) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_GetPrimitivesToChangeStencil::StencilDigit' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetPrimitivesToChangeStencil, PrimitiveComponents) == 0x000008, "Member 'BP_AJBInGameMovableStand_C_GetPrimitivesToChangeStencil::PrimitiveComponents' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetPrimitivesToChangeStencil, K2Node_MakeArray_Array) == 0x000018, "Member 'BP_AJBInGameMovableStand_C_GetPrimitivesToChangeStencil::K2Node_MakeArray_Array' has a wrong offset!");

// Function BP_AJBInGameMovableStand.BP_AJBInGameMovableStand_C.GetTargetLocation
// 0x0018 (0x0018 - 0x0000)
struct BP_AJBInGameMovableStand_C_GetTargetLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x000C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameMovableStand_C_GetTargetLocation) == 0x000004, "Wrong alignment on BP_AJBInGameMovableStand_C_GetTargetLocation");
static_assert(sizeof(BP_AJBInGameMovableStand_C_GetTargetLocation) == 0x000018, "Wrong size on BP_AJBInGameMovableStand_C_GetTargetLocation");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetTargetLocation, Location) == 0x000000, "Member 'BP_AJBInGameMovableStand_C_GetTargetLocation::Location' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameMovableStand_C_GetTargetLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00000C, "Member 'BP_AJBInGameMovableStand_C_GetTargetLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

}

