#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPF_AJBPvEFunctionLibrary

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "EPvEGameDifficulty_structs.hpp"
#include "E_AJBInGamePvE_GamePhase_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPF_AJBPvEFunctionLibrary.BPF_AJBPvEFunctionLibrary_C
// 0x0000 (0x0028 - 0x0028)
class UBPF_AJBPvEFunctionLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void GetAJBPvEGameState(class UObject* __WorldContext, bool* IsValid, class ABP_AJBPvEGameState_C** BP_AJB_PvE_GameState);
	static void IsPvENPC(class AActor* Object, class UObject* __WorldContext, bool* IsPvENPC_0);
	static void GetDroppedItemClassRandomly(EPvEGameDifficulty TargetDifficulty, int32 TargetWaveIndex, class UObject* __WorldContext, class UClass** ItemClass);
	static void FindDroppedItemTable(EPvEGameDifficulty TargetDifficulty, int32 TargetWaveIndex, class UObject* __WorldContext, struct FST_AJBInGamePvE_DroppedItemTableRow* Out_Row);
	static void GetRandomIndexWithProbability(TArray<float>& Probabilities, float MaxProbability, class UObject* __WorldContext, bool* IsHitItem, float* HitProbability, int32* HitItemIndex);
	static void TerminateNPC(class AActor* Target, class UObject* __WorldContext);
	static void SuspendDeadNPC(class AActor* Target, class UObject* __WorldContext);
	static void GetDelayedCleaningNPCTime(class UObject* __WorldContext, float* DelayedTime);
	static void SetPvEDifficulty(EPvEGameDifficulty NewDifficulty, class UObject* __WorldContext);
	static void GetPvEDifficulty(class UObject* __WorldContext, EPvEGameDifficulty* Difficulty);
	static void GetAILevelForPvE(EPvEGameDifficulty Difficulty, class UObject* __WorldContext, uint8* AI_Level);
	static void CastPvEDifficultyNumToEnum(int32 DifficultyNum, class UObject* __WorldContext, EPvEGameDifficulty* Difficulty);
	static void CastPvEDifficultyToNum(EPvEGameDifficulty Difficulty, class UObject* __WorldContext, int32* DifficultyNum);
	static void GetPvECurrentPhase(class UObject* __WorldContext, E_AJBInGamePvE_GamePhase* CurrentPhase);
	static void IsEnabledToSpawnEnemy(class UObject* __WorldContext, bool* IsEnabled);
	static void HasPvEGameFinished(class UObject* __WorldContext, bool* HasFinished);
	static void IsPvELastWave(class UObject* __WorldContext, bool* IsLastWave);
	static void GetPvECurrentWaveIndex(class UObject* __WorldContext, int32* WaveIndex);
	static void GetPvELastWaveIndex(class UObject* __WorldContext, int32* LastWaveIndex);
	static void GetAJBInGamePvEHUD(class UObject* __WorldContext, bool* bSuccess, class ABP_AJBInGamePvEHUD_C** InGamePvEHUD);
	static void GetPvEScoreRankDBIVoiceTag(const struct FST_AJBPvEScoreResult& Result, class UObject* __WorldContext, struct FGameplayTag* VoiceTag);
	static struct FGameplayTag GetPvEBeginWaveDBIVoiceTag(int32 WaveIndex, class UObject* __WorldContext);
	static struct FGameplayTag GetPvEEndWaveDBIVoiceTag(int32 WaveIndex, class UObject* __WorldContext);
	static void GetPvERemainingTimeInPhase(class UObject* __WorldContext, float* RemainingTimeInPhase);
	static void GetPvEPhaseManager(class UObject* __WorldContext, class ABP_AJBInGamePvE_PhaseManager_C** PhaseManager);
	static void GetPvESpawnManager(class UObject* __WorldContext, class ABP_AJBInGamePvE_EnemySpawnManager_C** SpawnManager);
	static float Debug_GetOrDefaults_Float(TArray<float>& Array, int32 Index_0, float DefaultValue, class UObject* __WorldContext);
	static void FindBossDataByID(int32 BossID, class UObject* __WorldContext, struct FST_AJBInGamePvE_BossInfo* BossData);
	static void MakePvEEnemyInfoByTag(const struct FGameplayTag& CharacterTag, class UObject* __WorldContext, struct FST_AJBInGamePvE_EnemyInfo* PvEEnemyInfo);
	static void CleanNPC(class AActor* Target, float Delay, class UObject* __WorldContext);
	static void Debug_GetPvEScoreResults(class UObject* __WorldContext, struct FST_AJBPvEScoreResult* ScoreResults);
	static void DestroyStand(class AAJBInGameCharacter* Target, class UObject* __WorldContext);
	static void DetermineAndGetPvEScoreResults(bool IsIncludingBonus, class UObject* __WorldContext, struct FST_AJBPvEScoreResult* ScoreResults);
	static void GetPvEDeterminedScoreResults(class UObject* __WorldContext, struct FST_AJBPvEScoreResult* ScoreResults);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPF_AJBPvEFunctionLibrary_C">();
	}
	static class UBPF_AJBPvEFunctionLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPF_AJBPvEFunctionLibrary_C>();
	}
};
static_assert(alignof(UBPF_AJBPvEFunctionLibrary_C) == 0x000008, "Wrong alignment on UBPF_AJBPvEFunctionLibrary_C");
static_assert(sizeof(UBPF_AJBPvEFunctionLibrary_C) == 0x000028, "Wrong size on UBPF_AJBPvEFunctionLibrary_C");

}

