#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AJB_CommonExtension

#include "Basic.hpp"

#include "AIModule_classes.hpp"


namespace SDK
{

// Class AJB_CommonExtension.BTComposite_RandomSequence
// 0x0018 (0x00A8 - 0x0090)
class UBTComposite_RandomSequence final : public UBTCompositeNode
{
public:
	uint8                                         Pad_90[0x18];                                      // 0x0090(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTComposite_RandomSequence">();
	}
	static class UBTComposite_RandomSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTComposite_RandomSequence>();
	}
};
static_assert(alignof(UBTComposite_RandomSequence) == 0x000008, "Wrong alignment on UBTComposite_RandomSequence");
static_assert(sizeof(UBTComposite_RandomSequence) == 0x0000A8, "Wrong size on UBTComposite_RandomSequence");

// Class AJB_CommonExtension.BTComposite_WeightedRandom
// 0x0008 (0x0098 - 0x0090)
class UBTComposite_WeightedRandom final : public UBTCompositeNode
{
public:
	float                                         LeftChildSelectingRate;                            // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTComposite_WeightedRandom">();
	}
	static class UBTComposite_WeightedRandom* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTComposite_WeightedRandom>();
	}
};
static_assert(alignof(UBTComposite_WeightedRandom) == 0x000008, "Wrong alignment on UBTComposite_WeightedRandom");
static_assert(sizeof(UBTComposite_WeightedRandom) == 0x000098, "Wrong size on UBTComposite_WeightedRandom");
static_assert(offsetof(UBTComposite_WeightedRandom, LeftChildSelectingRate) == 0x000090, "Member 'UBTComposite_WeightedRandom::LeftChildSelectingRate' has a wrong offset!");

// Class AJB_CommonExtension.EnvQueryTest_DistanceAlongLine
// 0x0010 (0x01D0 - 0x01C0)
class UEnvQueryTest_DistanceAlongLine final : public UEnvQueryTest
{
public:
	TSubclassOf<class UEnvQueryContext>           LineFromActor;                                     // 0x01C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UEnvQueryContext>           LineToVector;                                      // 0x01C8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvQueryTest_DistanceAlongLine">();
	}
	static class UEnvQueryTest_DistanceAlongLine* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvQueryTest_DistanceAlongLine>();
	}
};
static_assert(alignof(UEnvQueryTest_DistanceAlongLine) == 0x000008, "Wrong alignment on UEnvQueryTest_DistanceAlongLine");
static_assert(sizeof(UEnvQueryTest_DistanceAlongLine) == 0x0001D0, "Wrong size on UEnvQueryTest_DistanceAlongLine");
static_assert(offsetof(UEnvQueryTest_DistanceAlongLine, LineFromActor) == 0x0001C0, "Member 'UEnvQueryTest_DistanceAlongLine::LineFromActor' has a wrong offset!");
static_assert(offsetof(UEnvQueryTest_DistanceAlongLine, LineToVector) == 0x0001C8, "Member 'UEnvQueryTest_DistanceAlongLine::LineToVector' has a wrong offset!");

// Class AJB_CommonExtension.EnvQueryTest_DistanceToLine
// 0x0010 (0x01D0 - 0x01C0)
class UEnvQueryTest_DistanceToLine final : public UEnvQueryTest
{
public:
	TSubclassOf<class UEnvQueryContext>           LineFromActor;                                     // 0x01C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UEnvQueryContext>           LineToVector;                                      // 0x01C8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvQueryTest_DistanceToLine">();
	}
	static class UEnvQueryTest_DistanceToLine* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvQueryTest_DistanceToLine>();
	}
};
static_assert(alignof(UEnvQueryTest_DistanceToLine) == 0x000008, "Wrong alignment on UEnvQueryTest_DistanceToLine");
static_assert(sizeof(UEnvQueryTest_DistanceToLine) == 0x0001D0, "Wrong size on UEnvQueryTest_DistanceToLine");
static_assert(offsetof(UEnvQueryTest_DistanceToLine, LineFromActor) == 0x0001C0, "Member 'UEnvQueryTest_DistanceToLine::LineFromActor' has a wrong offset!");
static_assert(offsetof(UEnvQueryTest_DistanceToLine, LineToVector) == 0x0001C8, "Member 'UEnvQueryTest_DistanceToLine::LineToVector' has a wrong offset!");

// Class AJB_CommonExtension.EnvQueryTest_RandomScore
// 0x0008 (0x01C8 - 0x01C0)
class UEnvQueryTest_RandomScore final : public UEnvQueryTest
{
public:
	float                                         RandomValueMin;                                    // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomValueMax;                                    // 0x01C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvQueryTest_RandomScore">();
	}
	static class UEnvQueryTest_RandomScore* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvQueryTest_RandomScore>();
	}
};
static_assert(alignof(UEnvQueryTest_RandomScore) == 0x000008, "Wrong alignment on UEnvQueryTest_RandomScore");
static_assert(sizeof(UEnvQueryTest_RandomScore) == 0x0001C8, "Wrong size on UEnvQueryTest_RandomScore");
static_assert(offsetof(UEnvQueryTest_RandomScore, RandomValueMin) == 0x0001C0, "Member 'UEnvQueryTest_RandomScore::RandomValueMin' has a wrong offset!");
static_assert(offsetof(UEnvQueryTest_RandomScore, RandomValueMax) == 0x0001C4, "Member 'UEnvQueryTest_RandomScore::RandomValueMax' has a wrong offset!");

}

