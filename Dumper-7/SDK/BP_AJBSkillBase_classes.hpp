#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBSkillBase

#include "Basic.hpp"

#include "E_VoiceProcessType_structs.hpp"
#include "E_SidlingFinishTiming_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "AJB_structs.hpp"
#include "AJB_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBSkillBase.BP_AJBSkillBase_C
// 0x00D8 (0x01E8 - 0x0110)
class UBP_AJBSkillBase_C : public UAJBInGameSkillComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0110(0x0008)(Transient, DuplicateTransient)
	struct FGameplayTag                           SkillTag;                                          // 0x0118(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         ConsumptionMP;                                     // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ConsumptionMPOnCritical;                           // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         s_;                                                // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Damage;                                            // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDefaultLock;                                      // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LeftUseNum;                                        // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Phase;                                             // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  GameplayTagContainer;                              // 0x0140(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         StateTime;                                         // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         SkillState;                                        // 0x0164(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bContinuedHealMP;                                  // 0x0165(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CustomConsumeSkill;                                // 0x0166(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShouldCancelOnLandingStop;                        // 0x0167(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShouldCancelOnDash;                               // 0x0168(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bWithCharacterMovement;                            // 0x0169(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16A[0x6];                                      // 0x016A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           PassiveSkillTag;                                   // 0x0170(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         DamageOnSeparate;                                  // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PassiveSkillDuration_Sec_;                         // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAJBSkillType                                 SkillType;                                         // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bMovable;                                          // 0x0181(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bRotatable;                                        // 0x0182(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_183[0x1];                                      // 0x0183(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UseCount;                                          // 0x0184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDuringTheWorld;                                   // 0x0188(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PropertiesForUIReplicationFrequency;               // 0x018C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         _ForSkipOwner_LeftUseNum;                          // 0x0190(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_194[0x4];                                      // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  _ForSkipOwner_GamePlayTagContainer;                // 0x0198(0x0020)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify)
	bool                                          bIsInteractable;                                   // 0x01B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bRequireStand;                                     // 0x01B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         EffectiveState;                                    // 0x01BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAggregateEffectiveCountWithEffectiveState;        // 0x01BB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAggregateEffectiveTimeWithEffectiveState;         // 0x01BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInvisibleReticleMPBar;                            // 0x01BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1BE[0x2];                                      // 0x01BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SerialNumber;                                      // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldSidleOnReady;                               // 0x01C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_SidlingFinishTiming                         SidlingFinishTiming;                               // 0x01C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C6[0x2];                                      // 0x01C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExtensionTimeToChangeNormalWalkingMode;            // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisableChangeSidlingMode;                         // 0x01CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bImpossibleDash;                                   // 0x01CD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShouldCancelWhenOwnerBecomingLastSurvivor;        // 0x01CE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         RepSkillState;                                     // 0x01CF(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	ESkillFlowState                               RepSkillFlowState;                                 // 0x01D0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          bMulticastHasCome;                                 // 0x01D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShouldRestoreSkillState;                          // 0x01D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bMulticastHasComeForSkillFlowState;                // 0x01D3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCustomStandTransformSettings;                     // 0x01D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bContinueOnSpecialBreakDown;                       // 0x01D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CustomCallSkillComsumend;                          // 0x01D6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bManageSkillFlowStateForRepNotifyOnly;             // 0x01D7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShouldCancelDashOnReady;                          // 0x01D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCustomActiveWidget;                               // 0x01D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCustomInactiveWidget;                             // 0x01DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShouldUpdateMeshLocation;                         // 0x01DB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCustomTryNotifyUltimateSkillUsedServer;           // 0x01DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCountSucceedOnSkillConsumed;                      // 0x01DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCanUseOnCritical;                                 // 0x01DE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1DF[0x1];                                      // 0x01DF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DecreaseConsumptionMP;                             // 0x01E0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bForceIncrementUseCount;                           // 0x01E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_AJBSkillBase(int32 EntryPoint);
	void ROS_FinishSkillAnimation();
	void MC_FinishSkillAnimation();
	void ROS_CancelSkillAnimation();
	void MC_CancelSkillAnimation();
	void ROS_RequestPowerDown(float Value);
	void RequestPowerDown(float Value);
	void ROS_RequestTimeRewind(float Value);
	void RequestTimeRewind(float Value);
	void ROS_RequestDecrease(int32 Num);
	void RequestDecrease(int32 Num);
	void Lock_Server();
	void FinishSkillAnimation_Local();
	void FinishSkillAnimation_All();
	void CancelSkillAnimation_Local();
	void CancelSkillAnimation_All();
	void ROS_RequestPowerUp(float Value);
	void RequestPowerUp(float Value);
	void Unlock_Server();
	void OnRep_bActive();
	void OnDisconnected();
	void StateBeginPlay(bool bShouldRestore);
	void OnSetViewTargetToNewSpectatorForSkillFlowState();
	void CheckSkillFlowState(bool bShouldRestore);
	void ReceiveBeginPlay();
	void MC_ReadySkill(class UBP_AJBSkillBase_C* ReadySkill_0);
	void ROS_ReadySkill(class UBP_AJBSkillBase_C* ReadySkill_0);
	void InitializeComponentBP();
	void RequestSetLeftUseNum(int32 Num);
	void ROS_RequestIncrease(int32 Num);
	void ROS_RequestTimeExtension(float Value);
	void RequestIncrease(int32 Num);
	void RequestTimeExtension(float Value);
	void OnStartSelfSpectatorReplicateProperties();
	void ROS_ReplicatePropertiesForUI(int32 LeftUseNum_0, const struct FGameplayTagContainer& GameplayTagContainer_0);
	void ReplicatePropertiesForUI();
	void OnCancel();
	void InactiveWidget();
	void ActiveWidget();
	void OnActive();
	void ReceiveTick(float DeltaSeconds);
	void RemoveGameplayTag(const struct FGameplayTag& Tag);
	void AddGameplayTag(const struct FGameplayTag& Tag, class UObject* Operator, class UObject* Target, const struct FGameplayTag& CauserType, int32 SerialNumber_0);
	void OnReady();
	void OnInactive();
	void OnRelatedCharacterBecomeLastSurvivor();
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);
	void AddGameplayTagWithFloat(const struct FGameplayTag& Tag, float FloatValue);
	bool CanUseSkill(struct FGameplayTagContainer* TagContainer);
	void UseMP(float ConsumptionMP_0);
	void PhaseUp();
	void ConsumeSkill();
	void IsSatisfiedLeftNum(bool* IsSatisfied);
	void ChangeState(uint8 NextState);
	void UnLock();
	void CheckSkillState(uint8 State, bool* bMatch);
	void Increase_Local(int32 Num);
	void ReserveInactive();
	void InitializeVariables();
	void UnreserveInactive();
	bool CheckSkillAction();
	void CheckPossibleInteract(bool* bPossibleInteract);
	void DuringTheWorld(bool* Result);
	void OnRep__ForSkipOwner_LeftUseNum();
	void OnRep__ForSkipOwner_GamePlayTagContainer();
	void TryToSpeakVoice(const struct FGameplayTag& VoiceTag, E_VoiceProcessType VoiceProcessType, bool bSpeakEvenIfNotAlive, bool bSpeakEvenIfDuringTheWorld, bool bSpeakEvenIfNotLocalEnv, bool bAlsoSpeakOnPairEnv, bool bIgnoreIfDuringTheWorld, bool* bWillBeSpoken);
	void ReserveBreakVoice(const struct FGameplayTag& VoiceEventTagToStop);
	void AddMP(float RecoveryMP);
	void ChangeEnableSeal(bool bEnable);
	void AggregateEffectiveCountWithEffectiveState(uint8 NewState, uint8 PreState);
	void GenerateSerialNumber(int32* SerialNumber_0);
	void TimeExtension_Server(float Value);
	void Increase_Server(int32 Num);
	void SetLeftUseNum_Local(int32 NewLeftUseNum);
	void ApplySkillParameter();
	void OnRep_RepSkillState();
	void OnRep_RepSkillFlowState();
	void CheckStateCanAccompany(bool* bCanAccompany);
	void MPUpdateSettingOnActivate();
	void PowerUpServer(float Value);
	void GetSkillTypeAsName(class FName* Name_0);
	void TryNotifyUltimateSkillUsedServer();
	void GetPoliticConsumptionMP(float* ConsumptionMP_0);
	void ShouldCancelOnLandingStop(bool* bShouldCancel);
	void s__0(float* Param_s__0);
	void Lock();
	void Decrease_Local(int32 Num);
	void GetPossibleUseCount(int32 NecessaryCount, int32* PossibleUseCount);
	void Decrease_Server(int32 Num);
	void TimeRewind_Server(float Value);
	void PowerDown_Server(float Value);
	void ResetUseCount();
	void GetGameplayTags(struct FGameplayTagContainer* TagContainerCopy);
	void GetPassiveSkillTag(struct FGameplayTag* PassiveSkillTag_0);
	void GetDuration(float* Duration);
	void GetCauserOwnerCharacterBP(class ABP_AJBInGameCharacter_C** CharacterBP);

	bool IsInPreview() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBSkillBase_C">();
	}
	static class UBP_AJBSkillBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBSkillBase_C>();
	}
};
static_assert(alignof(UBP_AJBSkillBase_C) == 0x000008, "Wrong alignment on UBP_AJBSkillBase_C");
static_assert(sizeof(UBP_AJBSkillBase_C) == 0x0001E8, "Wrong size on UBP_AJBSkillBase_C");
static_assert(offsetof(UBP_AJBSkillBase_C, UberGraphFrame) == 0x000110, "Member 'UBP_AJBSkillBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, SkillTag) == 0x000118, "Member 'UBP_AJBSkillBase_C::SkillTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, ConsumptionMP) == 0x000120, "Member 'UBP_AJBSkillBase_C::ConsumptionMP' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, ConsumptionMPOnCritical) == 0x000124, "Member 'UBP_AJBSkillBase_C::ConsumptionMPOnCritical' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, s_) == 0x000128, "Member 'UBP_AJBSkillBase_C::s_' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, Damage) == 0x00012C, "Member 'UBP_AJBSkillBase_C::Damage' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, bDefaultLock) == 0x000130, "Member 'UBP_AJBSkillBase_C::bDefaultLock' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, LeftUseNum) == 0x000134, "Member 'UBP_AJBSkillBase_C::LeftUseNum' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, Phase) == 0x000138, "Member 'UBP_AJBSkillBase_C::Phase' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, GameplayTagContainer) == 0x000140, "Member 'UBP_AJBSkillBase_C::GameplayTagContainer' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, StateTime) == 0x000160, "Member 'UBP_AJBSkillBase_C::StateTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, SkillState) == 0x000164, "Member 'UBP_AJBSkillBase_C::SkillState' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, bContinuedHealMP) == 0x000165, "Member 'UBP_AJBSkillBase_C::bContinuedHealMP' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, CustomConsumeSkill) == 0x000166, "Member 'UBP_AJBSkillBase_C::CustomConsumeSkill' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, bShouldCancelOnLandingStop) == 0x000167, "Member 'UBP_AJBSkillBase_C::bShouldCancelOnLandingStop' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, bShouldCancelOnDash) == 0x000168, "Member 'UBP_AJBSkillBase_C::bShouldCancelOnDash' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, bWithCharacterMovement) == 0x000169, "Member 'UBP_AJBSkillBase_C::bWithCharacterMovement' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, PassiveSkillTag) == 0x000170, "Member 'UBP_AJBSkillBase_C::PassiveSkillTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, DamageOnSeparate) == 0x000178, "Member 'UBP_AJBSkillBase_C::DamageOnSeparate' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, PassiveSkillDuration_Sec_) == 0x00017C, "Member 'UBP_AJBSkillBase_C::PassiveSkillDuration_Sec_' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, SkillType) == 0x000180, "Member 'UBP_AJBSkillBase_C::SkillType' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, bMovable) == 0x000181, "Member 'UBP_AJBSkillBase_C::bMovable' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, bRotatable) == 0x000182, "Member 'UBP_AJBSkillBase_C::bRotatable' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, UseCount) == 0x000184, "Member 'UBP_AJBSkillBase_C::UseCount' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, bDuringTheWorld) == 0x000188, "Member 'UBP_AJBSkillBase_C::bDuringTheWorld' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, PropertiesForUIReplicationFrequency) == 0x00018C, "Member 'UBP_AJBSkillBase_C::PropertiesForUIReplicationFrequency' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, _ForSkipOwner_LeftUseNum) == 0x000190, "Member 'UBP_AJBSkillBase_C::_ForSkipOwner_LeftUseNum' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, _ForSkipOwner_GamePlayTagContainer) == 0x000198, "Member 'UBP_AJBSkillBase_C::_ForSkipOwner_GamePlayTagContainer' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, bIsInteractable) == 0x0001B8, "Member 'UBP_AJBSkillBase_C::bIsInteractable' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, bRequireStand) == 0x0001B9, "Member 'UBP_AJBSkillBase_C::bRequireStand' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, EffectiveState) == 0x0001BA, "Member 'UBP_AJBSkillBase_C::EffectiveState' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, bAggregateEffectiveCountWithEffectiveState) == 0x0001BB, "Member 'UBP_AJBSkillBase_C::bAggregateEffectiveCountWithEffectiveState' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, bAggregateEffectiveTimeWithEffectiveState) == 0x0001BC, "Member 'UBP_AJBSkillBase_C::bAggregateEffectiveTimeWithEffectiveState' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, bInvisibleReticleMPBar) == 0x0001BD, "Member 'UBP_AJBSkillBase_C::bInvisibleReticleMPBar' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, SerialNumber) == 0x0001C0, "Member 'UBP_AJBSkillBase_C::SerialNumber' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, bShouldSidleOnReady) == 0x0001C4, "Member 'UBP_AJBSkillBase_C::bShouldSidleOnReady' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, SidlingFinishTiming) == 0x0001C5, "Member 'UBP_AJBSkillBase_C::SidlingFinishTiming' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, ExtensionTimeToChangeNormalWalkingMode) == 0x0001C8, "Member 'UBP_AJBSkillBase_C::ExtensionTimeToChangeNormalWalkingMode' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, bDisableChangeSidlingMode) == 0x0001CC, "Member 'UBP_AJBSkillBase_C::bDisableChangeSidlingMode' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, bImpossibleDash) == 0x0001CD, "Member 'UBP_AJBSkillBase_C::bImpossibleDash' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, bShouldCancelWhenOwnerBecomingLastSurvivor) == 0x0001CE, "Member 'UBP_AJBSkillBase_C::bShouldCancelWhenOwnerBecomingLastSurvivor' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, RepSkillState) == 0x0001CF, "Member 'UBP_AJBSkillBase_C::RepSkillState' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, RepSkillFlowState) == 0x0001D0, "Member 'UBP_AJBSkillBase_C::RepSkillFlowState' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, bMulticastHasCome) == 0x0001D1, "Member 'UBP_AJBSkillBase_C::bMulticastHasCome' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, bShouldRestoreSkillState) == 0x0001D2, "Member 'UBP_AJBSkillBase_C::bShouldRestoreSkillState' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, bMulticastHasComeForSkillFlowState) == 0x0001D3, "Member 'UBP_AJBSkillBase_C::bMulticastHasComeForSkillFlowState' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, bCustomStandTransformSettings) == 0x0001D4, "Member 'UBP_AJBSkillBase_C::bCustomStandTransformSettings' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, bContinueOnSpecialBreakDown) == 0x0001D5, "Member 'UBP_AJBSkillBase_C::bContinueOnSpecialBreakDown' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, CustomCallSkillComsumend) == 0x0001D6, "Member 'UBP_AJBSkillBase_C::CustomCallSkillComsumend' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, bManageSkillFlowStateForRepNotifyOnly) == 0x0001D7, "Member 'UBP_AJBSkillBase_C::bManageSkillFlowStateForRepNotifyOnly' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, bShouldCancelDashOnReady) == 0x0001D8, "Member 'UBP_AJBSkillBase_C::bShouldCancelDashOnReady' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, bCustomActiveWidget) == 0x0001D9, "Member 'UBP_AJBSkillBase_C::bCustomActiveWidget' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, bCustomInactiveWidget) == 0x0001DA, "Member 'UBP_AJBSkillBase_C::bCustomInactiveWidget' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, bShouldUpdateMeshLocation) == 0x0001DB, "Member 'UBP_AJBSkillBase_C::bShouldUpdateMeshLocation' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, bCustomTryNotifyUltimateSkillUsedServer) == 0x0001DC, "Member 'UBP_AJBSkillBase_C::bCustomTryNotifyUltimateSkillUsedServer' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, bCountSucceedOnSkillConsumed) == 0x0001DD, "Member 'UBP_AJBSkillBase_C::bCountSucceedOnSkillConsumed' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, bCanUseOnCritical) == 0x0001DE, "Member 'UBP_AJBSkillBase_C::bCanUseOnCritical' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, DecreaseConsumptionMP) == 0x0001E0, "Member 'UBP_AJBSkillBase_C::DecreaseConsumptionMP' has a wrong offset!");
static_assert(offsetof(UBP_AJBSkillBase_C, bForceIncrementUseCount) == 0x0001E4, "Member 'UBP_AJBSkillBase_C::bForceIncrementUseCount' has a wrong offset!");

}

