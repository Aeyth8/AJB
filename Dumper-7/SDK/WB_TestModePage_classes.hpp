#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_TestModePage

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "AJB_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "ST_TestModeText_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_TestModePage.WB_TestModePage_C
// 0x0118 (0x0360 - 0x0248)
class UWB_TestModePage_C final : public UAJBUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0248(0x0008)(Transient, DuplicateTransient)
	class UCanvasPanel*                           CanvasPanelRoot;                                   // 0x0250(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           Footer;                                            // 0x0258(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           Header;                                            // 0x0260(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           Main;                                              // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             PageTitle;                                         // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TArray<class UWB_TestModeMenuItemBase_C*>     MenuItems;                                         // 0x0278(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FSlateFontInfo                         FontInfo;                                          // 0x0288(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         ValueOffsetX;                                      // 0x02D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         LineSpaceSize;                                     // 0x02DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         SelectIndex;                                       // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              BasePosition;                                      // 0x02E4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TitleText;                                         // 0x02F0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ExposeOnSpawn)
	bool                                          bShowHeader;                                       // 0x0308(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_TestModeText                       DefaultHelpText;                                   // 0x0310(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash)
	struct FST_TestModeText                       SwitchHelpText;                                    // 0x0338(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WB_TestModePage(int32 EntryPoint);
	void PreConstruct(bool IsDesignTime);
	void SetFocusMenuItem(class FName SelectItemMenu);
	void OnCancel();
	void OnDecide();
	void OnPrev();
	void OnNext();
	void Construct();
	void CreateMenuItemInteger(const class FText& Label, int32 Value, int32 DefaultValue, int32 ValueMin, int32 ValueMax, bool IsLoop, float InValueOffsetX, class UWB_TestModeMenuItemInteger_C** MenuItem);
	void CreateMenuItemSelectText(const class FText& Label, TArray<class FText>& SelectText, int32 SelectIndex_0, int32 DefaultIndex, bool IsLoop, bool bAlignRight, float ValueOffsetX_0, class UWB_TestModeMenuItemSelectText_C** MenuItem);
	void CreateMenuItemOpenPage(class FName OpenPage, const class FText& Label, class UWB_TestModeMenuItemOpenPage_C** MenuItem);
	void FindFocus(class FName InputPin);
	void MoveFocus(bool bIsNext);
	void CreateMenuItemButton(const class FText& Label, class UWB_TestModeMenuItemBase_C** MenuItem);
	void AddMenuItemWidget(class UUserWidget* AddWidget);
	void CreateMenuItemExit(class UWB_TestModeMenuItemOpenPage_C** MenuItem);
	void SetOtherMenuItemsCanSelect(class UObject* BaseMenuItem, bool bCanSelect);
	class UWB_AJBTestModeReadOnlyValue_C* CreateReadOnlyLabel(const struct FST_TestModeText& LabelData, float ValueOffset, float IndentOffset);
	void AddSpaceLine(int32 LineNum);
	void CreateMenuItemLockButton(const class FText& Label, float StatusOffsetX, class UWB_TestModeMenuItem_StatusLockButton_C** MenuItem);
	class UWB_AJBTestModeText_C* AddFooterText(TArray<struct FST_TestModeText>& TextData, EHorizontalAlignment InHorizontalAlignment, EVerticalAlignment InVerticalAlignment);
	void CreateMenuItemDummyExit(class UWB_TestModeMenuItemOpenPage_C** MenuItem);
	void IsLock(bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_TestModePage_C">();
	}
	static class UWB_TestModePage_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_TestModePage_C>();
	}
};
static_assert(alignof(UWB_TestModePage_C) == 0x000008, "Wrong alignment on UWB_TestModePage_C");
static_assert(sizeof(UWB_TestModePage_C) == 0x000360, "Wrong size on UWB_TestModePage_C");
static_assert(offsetof(UWB_TestModePage_C, UberGraphFrame) == 0x000248, "Member 'UWB_TestModePage_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_TestModePage_C, CanvasPanelRoot) == 0x000250, "Member 'UWB_TestModePage_C::CanvasPanelRoot' has a wrong offset!");
static_assert(offsetof(UWB_TestModePage_C, Footer) == 0x000258, "Member 'UWB_TestModePage_C::Footer' has a wrong offset!");
static_assert(offsetof(UWB_TestModePage_C, Header) == 0x000260, "Member 'UWB_TestModePage_C::Header' has a wrong offset!");
static_assert(offsetof(UWB_TestModePage_C, Main) == 0x000268, "Member 'UWB_TestModePage_C::Main' has a wrong offset!");
static_assert(offsetof(UWB_TestModePage_C, PageTitle) == 0x000270, "Member 'UWB_TestModePage_C::PageTitle' has a wrong offset!");
static_assert(offsetof(UWB_TestModePage_C, MenuItems) == 0x000278, "Member 'UWB_TestModePage_C::MenuItems' has a wrong offset!");
static_assert(offsetof(UWB_TestModePage_C, FontInfo) == 0x000288, "Member 'UWB_TestModePage_C::FontInfo' has a wrong offset!");
static_assert(offsetof(UWB_TestModePage_C, ValueOffsetX) == 0x0002D8, "Member 'UWB_TestModePage_C::ValueOffsetX' has a wrong offset!");
static_assert(offsetof(UWB_TestModePage_C, LineSpaceSize) == 0x0002DC, "Member 'UWB_TestModePage_C::LineSpaceSize' has a wrong offset!");
static_assert(offsetof(UWB_TestModePage_C, SelectIndex) == 0x0002E0, "Member 'UWB_TestModePage_C::SelectIndex' has a wrong offset!");
static_assert(offsetof(UWB_TestModePage_C, BasePosition) == 0x0002E4, "Member 'UWB_TestModePage_C::BasePosition' has a wrong offset!");
static_assert(offsetof(UWB_TestModePage_C, TitleText) == 0x0002F0, "Member 'UWB_TestModePage_C::TitleText' has a wrong offset!");
static_assert(offsetof(UWB_TestModePage_C, bShowHeader) == 0x000308, "Member 'UWB_TestModePage_C::bShowHeader' has a wrong offset!");
static_assert(offsetof(UWB_TestModePage_C, DefaultHelpText) == 0x000310, "Member 'UWB_TestModePage_C::DefaultHelpText' has a wrong offset!");
static_assert(offsetof(UWB_TestModePage_C, SwitchHelpText) == 0x000338, "Member 'UWB_TestModePage_C::SwitchHelpText' has a wrong offset!");

}

