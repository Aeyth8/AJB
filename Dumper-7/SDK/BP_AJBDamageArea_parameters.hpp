#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBDamageArea

#include "Basic.hpp"

#include "AJB_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_AJBDamageArea.BP_AJBDamageArea_C.ExecuteUbergraph_BP_AJBDamageArea
// 0x01B0 (0x01B0 - 0x0000)
struct BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Radius;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_Location;                       // 0x0008(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_RemainingTime;                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable; // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0020(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(int32 Timespan_Until_Start_Reduction)> K2Node_CreateDelegate_OutputDelegate1;     // 0x0030(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable1; // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable1;                // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable1;                      // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable2; // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAJBHighlightManager_bIsValid;          // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBHighlightManager*                   CallFunc_GetAJBHighlightManager_ReturnValue;       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayingReplay_ReturnValue;              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Timespan_Until_Start_Reduction; // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_AJBDamageAreaLocal_C*               CallFunc_GetComponentByClass_ReturnValue;          // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float Radius, const struct FVector& Location, float RemainingTime)> K2Node_CreateDelegate_OutputDelegate2; // 0x0070(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacter*                    K2Node_Event_Operator;                             // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Time;                                 // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGeneralTiming                                K2Node_Event_Timing;                               // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bEnable;                              // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bOperatorIsEmpty;                     // 0x0096(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_97[0x1];                                       // 0x0097(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(float Radius, const struct FVector& Location)> K2Node_CreateDelegate_OutputDelegate3; // 0x0098(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate4;             // 0x00A8(0x0010)(ZeroConstructor, NoDestructor)
	class UAkComponent*                           CallFunc_RequestWwiseEventOnLocal_AkComponent;     // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable2;                // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C2[0x2];                                       // 0x00C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_Radius2;                        // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_Location2;                      // 0x00C8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x00D8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate5;             // 0x0168(0x0010)(ZeroConstructor, NoDestructor)
	float                                         K2Node_CustomEvent_Radius1;                        // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_Location1;                      // 0x017C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue1;                // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_AJBDamageAreaLocal_C*               CallFunc_GetComponentByClass_ReturnValue1;         // 0x0190(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_199[0x3];                                      // 0x0199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurrentSafeArea_Radius;                // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCurrentSafeArea_Location;              // 0x01A0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable2;                      // 0x01AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea) == 0x000008, "Wrong alignment on BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea");
static_assert(sizeof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea) == 0x0001B0, "Wrong size on BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, EntryPoint) == 0x000000, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, K2Node_CustomEvent_Radius) == 0x000004, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::K2Node_CustomEvent_Radius' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, K2Node_CustomEvent_Location) == 0x000008, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::K2Node_CustomEvent_Location' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, K2Node_CustomEvent_RemainingTime) == 0x000014, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::K2Node_CustomEvent_RemainingTime' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, Temp_bool_Has_Been_Initd_Variable) == 0x000018, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable) == 0x000019, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, Temp_bool_IsClosed_Variable) == 0x00001A, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, K2Node_CreateDelegate_OutputDelegate) == 0x000020, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, K2Node_CreateDelegate_OutputDelegate1) == 0x000030, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable1) == 0x000040, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, Temp_bool_Has_Been_Initd_Variable1) == 0x000041, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::Temp_bool_Has_Been_Initd_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, Temp_bool_IsClosed_Variable1) == 0x000042, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::Temp_bool_IsClosed_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable2) == 0x000043, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable2' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, CallFunc_GetAJBHighlightManager_bIsValid) == 0x000044, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::CallFunc_GetAJBHighlightManager_bIsValid' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, CallFunc_GetAJBHighlightManager_ReturnValue) == 0x000048, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::CallFunc_GetAJBHighlightManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, CallFunc_IsPlayingReplay_ReturnValue) == 0x000050, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::CallFunc_IsPlayingReplay_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, K2Node_Event_DeltaSeconds) == 0x000054, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, K2Node_CustomEvent_Timespan_Until_Start_Reduction) == 0x000058, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::K2Node_CustomEvent_Timespan_Until_Start_Reduction' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, CallFunc_GetGameState_ReturnValue) == 0x000060, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, CallFunc_GetComponentByClass_ReturnValue) == 0x000068, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, K2Node_CreateDelegate_OutputDelegate2) == 0x000070, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::K2Node_CreateDelegate_OutputDelegate2' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, CallFunc_IsValid_ReturnValue) == 0x000080, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, K2Node_Event_Operator) == 0x000088, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::K2Node_Event_Operator' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, K2Node_Event_Time) == 0x000090, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::K2Node_Event_Time' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, K2Node_Event_Timing) == 0x000094, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::K2Node_Event_Timing' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, K2Node_Event_bEnable) == 0x000095, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::K2Node_Event_bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, K2Node_Event_bOperatorIsEmpty) == 0x000096, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::K2Node_Event_bOperatorIsEmpty' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, K2Node_CreateDelegate_OutputDelegate3) == 0x000098, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::K2Node_CreateDelegate_OutputDelegate3' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, K2Node_CreateDelegate_OutputDelegate4) == 0x0000A8, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::K2Node_CreateDelegate_OutputDelegate4' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, CallFunc_RequestWwiseEventOnLocal_AkComponent) == 0x0000B8, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::CallFunc_RequestWwiseEventOnLocal_AkComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, CallFunc_IsValid_ReturnValue1) == 0x0000C0, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, Temp_bool_Has_Been_Initd_Variable2) == 0x0000C1, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::Temp_bool_Has_Been_Initd_Variable2' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, K2Node_CustomEvent_Radius2) == 0x0000C4, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::K2Node_CustomEvent_Radius2' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, K2Node_CustomEvent_Location2) == 0x0000C8, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::K2Node_CustomEvent_Location2' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x0000D8, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, CallFunc_K2_SetActorLocation_ReturnValue) == 0x000160, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000164, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, K2Node_CreateDelegate_OutputDelegate5) == 0x000168, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::K2Node_CreateDelegate_OutputDelegate5' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, K2Node_CustomEvent_Radius1) == 0x000178, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::K2Node_CustomEvent_Radius1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, K2Node_CustomEvent_Location1) == 0x00017C, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::K2Node_CustomEvent_Location1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, CallFunc_GetGameState_ReturnValue1) == 0x000188, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::CallFunc_GetGameState_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, CallFunc_GetComponentByClass_ReturnValue1) == 0x000190, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::CallFunc_GetComponentByClass_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, CallFunc_IsValid_ReturnValue2) == 0x000198, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, CallFunc_GetCurrentSafeArea_Radius) == 0x00019C, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::CallFunc_GetCurrentSafeArea_Radius' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, CallFunc_GetCurrentSafeArea_Location) == 0x0001A0, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::CallFunc_GetCurrentSafeArea_Location' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea, Temp_bool_IsClosed_Variable2) == 0x0001AC, "Member 'BP_AJBDamageArea_C_ExecuteUbergraph_BP_AJBDamageArea::Temp_bool_IsClosed_Variable2' has a wrong offset!");

// Function BP_AJBDamageArea.BP_AJBDamageArea_C.ProceedReduction
// 0x0014 (0x0014 - 0x0000)
struct BP_AJBDamageArea_C_ProceedReduction final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainingTime;                                     // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBDamageArea_C_ProceedReduction) == 0x000004, "Wrong alignment on BP_AJBDamageArea_C_ProceedReduction");
static_assert(sizeof(BP_AJBDamageArea_C_ProceedReduction) == 0x000014, "Wrong size on BP_AJBDamageArea_C_ProceedReduction");
static_assert(offsetof(BP_AJBDamageArea_C_ProceedReduction, Radius) == 0x000000, "Member 'BP_AJBDamageArea_C_ProceedReduction::Radius' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ProceedReduction, Location) == 0x000004, "Member 'BP_AJBDamageArea_C_ProceedReduction::Location' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ProceedReduction, RemainingTime) == 0x000010, "Member 'BP_AJBDamageArea_C_ProceedReduction::RemainingTime' has a wrong offset!");

// Function BP_AJBDamageArea.BP_AJBDamageArea_C.OnCompletedSetup
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBDamageArea_C_OnCompletedSetup final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBDamageArea_C_OnCompletedSetup) == 0x000004, "Wrong alignment on BP_AJBDamageArea_C_OnCompletedSetup");
static_assert(sizeof(BP_AJBDamageArea_C_OnCompletedSetup) == 0x000010, "Wrong size on BP_AJBDamageArea_C_OnCompletedSetup");
static_assert(offsetof(BP_AJBDamageArea_C_OnCompletedSetup, Radius) == 0x000000, "Member 'BP_AJBDamageArea_C_OnCompletedSetup::Radius' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_OnCompletedSetup, Location) == 0x000004, "Member 'BP_AJBDamageArea_C_OnCompletedSetup::Location' has a wrong offset!");

// Function BP_AJBDamageArea.BP_AJBDamageArea_C.UpdateTransform
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBDamageArea_C_UpdateTransform final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBDamageArea_C_UpdateTransform) == 0x000004, "Wrong alignment on BP_AJBDamageArea_C_UpdateTransform");
static_assert(sizeof(BP_AJBDamageArea_C_UpdateTransform) == 0x000010, "Wrong size on BP_AJBDamageArea_C_UpdateTransform");
static_assert(offsetof(BP_AJBDamageArea_C_UpdateTransform, Radius) == 0x000000, "Member 'BP_AJBDamageArea_C_UpdateTransform::Radius' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_UpdateTransform, Location) == 0x000004, "Member 'BP_AJBDamageArea_C_UpdateTransform::Location' has a wrong offset!");

// Function BP_AJBDamageArea.BP_AJBDamageArea_C.NotifyTheWorld
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBDamageArea_C_NotifyTheWorld final
{
public:
	class AAJBInGameCharacter*                    Operator;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGeneralTiming                                Timing;                                            // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnable;                                           // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bOperatorIsEmpty;                                  // 0x000E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBDamageArea_C_NotifyTheWorld) == 0x000008, "Wrong alignment on BP_AJBDamageArea_C_NotifyTheWorld");
static_assert(sizeof(BP_AJBDamageArea_C_NotifyTheWorld) == 0x000010, "Wrong size on BP_AJBDamageArea_C_NotifyTheWorld");
static_assert(offsetof(BP_AJBDamageArea_C_NotifyTheWorld, Operator) == 0x000000, "Member 'BP_AJBDamageArea_C_NotifyTheWorld::Operator' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_NotifyTheWorld, Time) == 0x000008, "Member 'BP_AJBDamageArea_C_NotifyTheWorld::Time' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_NotifyTheWorld, Timing) == 0x00000C, "Member 'BP_AJBDamageArea_C_NotifyTheWorld::Timing' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_NotifyTheWorld, bEnable) == 0x00000D, "Member 'BP_AJBDamageArea_C_NotifyTheWorld::bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_NotifyTheWorld, bOperatorIsEmpty) == 0x00000E, "Member 'BP_AJBDamageArea_C_NotifyTheWorld::bOperatorIsEmpty' has a wrong offset!");

// Function BP_AJBDamageArea.BP_AJBDamageArea_C.PreAnnounceReduction
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBDamageArea_C_PreAnnounceReduction final
{
public:
	int32                                         Timespan_Until_Start_Reduction;                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBDamageArea_C_PreAnnounceReduction) == 0x000004, "Wrong alignment on BP_AJBDamageArea_C_PreAnnounceReduction");
static_assert(sizeof(BP_AJBDamageArea_C_PreAnnounceReduction) == 0x000004, "Wrong size on BP_AJBDamageArea_C_PreAnnounceReduction");
static_assert(offsetof(BP_AJBDamageArea_C_PreAnnounceReduction, Timespan_Until_Start_Reduction) == 0x000000, "Member 'BP_AJBDamageArea_C_PreAnnounceReduction::Timespan_Until_Start_Reduction' has a wrong offset!");

// Function BP_AJBDamageArea.BP_AJBDamageArea_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBDamageArea_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBDamageArea_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_AJBDamageArea_C_ReceiveTick");
static_assert(sizeof(BP_AJBDamageArea_C_ReceiveTick) == 0x000004, "Wrong size on BP_AJBDamageArea_C_ReceiveTick");
static_assert(offsetof(BP_AJBDamageArea_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_AJBDamageArea_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_AJBDamageArea.BP_AJBDamageArea_C.UserConstructionScript
// 0x0140 (0x0140 - 0x0000)
struct BP_AJBDamageArea_C_UserConstructionScript final
{
public:
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0000(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0010(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0040(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x004C(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0058(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCylinderRadius_ReturnValue;            // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0074(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0080(0x0030)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x00B0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBDamageArea_C_UserConstructionScript) == 0x000010, "Wrong alignment on BP_AJBDamageArea_C_UserConstructionScript");
static_assert(sizeof(BP_AJBDamageArea_C_UserConstructionScript) == 0x000140, "Wrong size on BP_AJBDamageArea_C_UserConstructionScript");
static_assert(offsetof(BP_AJBDamageArea_C_UserConstructionScript, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000000, "Member 'BP_AJBDamageArea_C_UserConstructionScript::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_UserConstructionScript, CallFunc_GetTransform_ReturnValue) == 0x000010, "Member 'BP_AJBDamageArea_C_UserConstructionScript::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_UserConstructionScript, CallFunc_BreakTransform_Location) == 0x000040, "Member 'BP_AJBDamageArea_C_UserConstructionScript::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_UserConstructionScript, CallFunc_BreakTransform_Rotation) == 0x00004C, "Member 'BP_AJBDamageArea_C_UserConstructionScript::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_UserConstructionScript, CallFunc_BreakTransform_Scale) == 0x000058, "Member 'BP_AJBDamageArea_C_UserConstructionScript::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_UserConstructionScript, CallFunc_GetCylinderRadius_ReturnValue) == 0x000064, "Member 'BP_AJBDamageArea_C_UserConstructionScript::CallFunc_GetCylinderRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_UserConstructionScript, CallFunc_BreakVector_X) == 0x000068, "Member 'BP_AJBDamageArea_C_UserConstructionScript::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_UserConstructionScript, CallFunc_BreakVector_Y) == 0x00006C, "Member 'BP_AJBDamageArea_C_UserConstructionScript::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_UserConstructionScript, CallFunc_BreakVector_Z) == 0x000070, "Member 'BP_AJBDamageArea_C_UserConstructionScript::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_UserConstructionScript, CallFunc_MakeVector_ReturnValue) == 0x000074, "Member 'BP_AJBDamageArea_C_UserConstructionScript::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_UserConstructionScript, CallFunc_MakeTransform_ReturnValue) == 0x000080, "Member 'BP_AJBDamageArea_C_UserConstructionScript::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_UserConstructionScript, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x0000B0, "Member 'BP_AJBDamageArea_C_UserConstructionScript::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_UserConstructionScript, CallFunc_K2_SetActorTransform_ReturnValue) == 0x000138, "Member 'BP_AJBDamageArea_C_UserConstructionScript::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");

// Function BP_AJBDamageArea.BP_AJBDamageArea_C.ApplyScaleToTransform
// 0x0140 (0x0140 - 0x0000)
struct BP_AJBDamageArea_C_ApplyScaleToTransform final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetRelativeTransform_ReturnValue;         // 0x0010(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0040(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x004C(0x000C)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0058(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0070(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0080(0x0030)(IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeTransform_SweepHitResult;   // 0x00B0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_AJBDamageArea_C_ApplyScaleToTransform) == 0x000010, "Wrong alignment on BP_AJBDamageArea_C_ApplyScaleToTransform");
static_assert(sizeof(BP_AJBDamageArea_C_ApplyScaleToTransform) == 0x000140, "Wrong size on BP_AJBDamageArea_C_ApplyScaleToTransform");
static_assert(offsetof(BP_AJBDamageArea_C_ApplyScaleToTransform, Scale) == 0x000000, "Member 'BP_AJBDamageArea_C_ApplyScaleToTransform::Scale' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ApplyScaleToTransform, CallFunc_GetRelativeTransform_ReturnValue) == 0x000010, "Member 'BP_AJBDamageArea_C_ApplyScaleToTransform::CallFunc_GetRelativeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ApplyScaleToTransform, CallFunc_BreakTransform_Location) == 0x000040, "Member 'BP_AJBDamageArea_C_ApplyScaleToTransform::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ApplyScaleToTransform, CallFunc_BreakTransform_Rotation) == 0x00004C, "Member 'BP_AJBDamageArea_C_ApplyScaleToTransform::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ApplyScaleToTransform, CallFunc_BreakTransform_Scale) == 0x000058, "Member 'BP_AJBDamageArea_C_ApplyScaleToTransform::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ApplyScaleToTransform, CallFunc_BreakVector_X) == 0x000064, "Member 'BP_AJBDamageArea_C_ApplyScaleToTransform::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ApplyScaleToTransform, CallFunc_BreakVector_Y) == 0x000068, "Member 'BP_AJBDamageArea_C_ApplyScaleToTransform::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ApplyScaleToTransform, CallFunc_BreakVector_Z) == 0x00006C, "Member 'BP_AJBDamageArea_C_ApplyScaleToTransform::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ApplyScaleToTransform, CallFunc_MakeVector_ReturnValue) == 0x000070, "Member 'BP_AJBDamageArea_C_ApplyScaleToTransform::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ApplyScaleToTransform, CallFunc_MakeTransform_ReturnValue) == 0x000080, "Member 'BP_AJBDamageArea_C_ApplyScaleToTransform::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_ApplyScaleToTransform, CallFunc_K2_SetRelativeTransform_SweepHitResult) == 0x0000B0, "Member 'BP_AJBDamageArea_C_ApplyScaleToTransform::CallFunc_K2_SetRelativeTransform_SweepHitResult' has a wrong offset!");

// Function BP_AJBDamageArea.BP_AJBDamageArea_C.GetCylinderRadius
// 0x002C (0x002C - 0x0000)
struct BP_AJBDamageArea_C_GetCylinderRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0004(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue1;     // 0x0010(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x001C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBDamageArea_C_GetCylinderRadius) == 0x000004, "Wrong alignment on BP_AJBDamageArea_C_GetCylinderRadius");
static_assert(sizeof(BP_AJBDamageArea_C_GetCylinderRadius) == 0x00002C, "Wrong size on BP_AJBDamageArea_C_GetCylinderRadius");
static_assert(offsetof(BP_AJBDamageArea_C_GetCylinderRadius, ReturnValue) == 0x000000, "Member 'BP_AJBDamageArea_C_GetCylinderRadius::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_GetCylinderRadius, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000004, "Member 'BP_AJBDamageArea_C_GetCylinderRadius::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_GetCylinderRadius, CallFunc_K2_GetComponentLocation_ReturnValue1) == 0x000010, "Member 'BP_AJBDamageArea_C_GetCylinderRadius::CallFunc_K2_GetComponentLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_GetCylinderRadius, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00001C, "Member 'BP_AJBDamageArea_C_GetCylinderRadius::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBDamageArea_C_GetCylinderRadius, CallFunc_VSize_ReturnValue) == 0x000028, "Member 'BP_AJBDamageArea_C_GetCylinderRadius::CallFunc_VSize_ReturnValue' has a wrong offset!");

}

