#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameStand_PPH

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_AJBInGameStand_classes.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBInGameStand_PPH.BP_AJBInGameStand_PPH_C
// 0x00B8 (0x0598 - 0x04E0)
class ABP_AJBInGameStand_PPH_C final : public ABP_AJBInGameStand_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBInGameStand_PPH_C;            // 0x04E0(0x0008)(Transient, DuplicateTransient)
	class UParticleSystemComponent*               Spine;                                             // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               R_Thigh;                                           // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               L_Thigh;                                           // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               R_Hand;                                            // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               L_Hand;                                            // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               R_Forearm;                                         // 0x0510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               L_Forearm;                                         // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               R_UpperArm;                                        // 0x0520(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               L_UpperArm;                                        // 0x0528(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Head;                                              // 0x0530(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ShotPoint;                                         // 0x0538(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         LeftCapsuleNum;                                    // 0x0540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CapsuleNum;                                        // 0x0544(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         _ForSkipOwner_LeftCapsuleNum;                      // 0x0548(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         CapsuleIncreaseInterval_s_;                        // 0x054C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CapsuleIncreaseIntervalOnFerocious_s_;             // 0x0550(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentCapsuleTime;                                // 0x0554(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableUpdateCapsule;                              // 0x0558(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShowCapsuleDebug;                                 // 0x0559(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55A[0x6];                                      // 0x055A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_AJBInGameCharacter_C*>       VirusTargetCharacterList;                          // 0x0560(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         PropertiesForUIReplicationFrequency;               // 0x0570(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_574[0x4];                                      // 0x0574(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CapsuleSocketList;                                 // 0x0578(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FGameplayTag                           CapsuleIncreaseParticleTag;                        // 0x0588(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebugCapsuleConsumeInfinity;                      // 0x0590(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_AJBInGameStand_PPH(int32 EntryPoint);
	void MC_OnCapsuleIncreased(int32 AfterCapsuleNum);
	void ROS_OnCapsuleIncreased(int32 AfterCapsuleNum);
	void OnCapsuleIncreasedCore(int32 AfterCapsuleNum);
	void OnCapsuleIncreased();
	void OnStartSelfSpectatorReplicateProperties();
	void ROS_ReplicatePropertiesForUI(int32 LeftCapsuleNum_0);
	void ReplicatePropertiesForUI();
	void OnPassiveRemoved(const struct FGameplayTag& RemoveCondition, const struct FGameplayTag& SecondTag, class ABP_AJBInGameCharacter_C* CharacterBP);
	void AddVirusTargetCharacterList(class AAJBInGameCharacterBase* TargetCharacter);
	void OnReady();
	void OnReturn();
	void OnLaunch();
	void OnCompleted_EC2D9FAB43A3B565C434509B253BEDCC(class FName NotifyName);
	void OnBlendOut_EC2D9FAB43A3B565C434509B253BEDCC(class FName NotifyName);
	void OnInterrupted_EC2D9FAB43A3B565C434509B253BEDCC(class FName NotifyName);
	void OnNotifyBegin_EC2D9FAB43A3B565C434509B253BEDCC(class FName NotifyName);
	void OnNotifyEnd_EC2D9FAB43A3B565C434509B253BEDCC(class FName NotifyName);
	void ReceiveTheWorld(float Time, bool bEnable);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void PlayAppearMontage();
	void OnRep__ForSkipOwner_LeftCapsuleNum();
	void IncreaseCapsule(int32 IncreaseNum);
	void DecreaseCapsule(int32 DecreaseNum);
	void UpdateCapsuleTime(float DeltaSeconds);
	void ResetCapsuleTime();
	void ChangeEnableCapsuleTime(bool bEnable);
	void PossibleDecreaseCapsule(int32 DecreaseNum, bool* bPossibleDecrease);
	void ShouldUpdateCapsuleTime(bool* bShouldUpdate);
	void CheckCapsuleFull(bool* bCapsuleFull);
	void CheckCapsuleEmpty(bool* bCapsuleEmpty);
	void InitializeCapsule();
	void CalcCapsuleInterval(float* CapsuleInterval);
	void IncreaseCapsuleFull();
	void ChangeEnableShouldUpdate(class ABP_AJBInGameCharacter_C* CharacterBP, bool bEnable, bool bIgnoreActiveCheck);
	void RemoveVirusInfections();
	void GetStandAttackOffset(int32 CloseRangeSkillNo, struct FVector* StandAttackOffset);
	void GetAttackRange(int32 CloseRangeSkillNo, float* AttackRange);
	void GetAttackCollisionRadius(int32 CloseRangeSkillNo, float* Radius);
	void GetAttackLocation(const struct FVector& TargetLocation, struct FVector* Location);
	void GetLaunchedActorHomeLocation(int32 CloseRangeSkillNo, struct FVector* Location);
	void GetCloseRangeLaunchedActor(int32 CloseRangeSkillNo, class AActor** LaunchedActor);
	void GetDamageActorTargetLocation(struct FVector* Location);
	void GetDummyShotLocation(struct FVector* Location);
	void ShouldShowNGPoint(bool* bResult);
	void GetShutTraceRadius(float* Radius);
	void GetShotLocation(bool bConsiderCharacterCapsuleRadius, const struct FGameplayTag& SkillTag, TArray<struct FVector>* Locations);
	void CheckLocallyControlled(bool* bLocallyControlled);
	void UserConstructionScript();
	void IsContinuousAccompany(bool* Param_IsContinuousAccompany_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBInGameStand_PPH_C">();
	}
	static class ABP_AJBInGameStand_PPH_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBInGameStand_PPH_C>();
	}
};
static_assert(alignof(ABP_AJBInGameStand_PPH_C) == 0x000008, "Wrong alignment on ABP_AJBInGameStand_PPH_C");
static_assert(sizeof(ABP_AJBInGameStand_PPH_C) == 0x000598, "Wrong size on ABP_AJBInGameStand_PPH_C");
static_assert(offsetof(ABP_AJBInGameStand_PPH_C, UberGraphFrame_BP_AJBInGameStand_PPH_C) == 0x0004E0, "Member 'ABP_AJBInGameStand_PPH_C::UberGraphFrame_BP_AJBInGameStand_PPH_C' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_PPH_C, Spine) == 0x0004E8, "Member 'ABP_AJBInGameStand_PPH_C::Spine' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_PPH_C, R_Thigh) == 0x0004F0, "Member 'ABP_AJBInGameStand_PPH_C::R_Thigh' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_PPH_C, L_Thigh) == 0x0004F8, "Member 'ABP_AJBInGameStand_PPH_C::L_Thigh' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_PPH_C, R_Hand) == 0x000500, "Member 'ABP_AJBInGameStand_PPH_C::R_Hand' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_PPH_C, L_Hand) == 0x000508, "Member 'ABP_AJBInGameStand_PPH_C::L_Hand' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_PPH_C, R_Forearm) == 0x000510, "Member 'ABP_AJBInGameStand_PPH_C::R_Forearm' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_PPH_C, L_Forearm) == 0x000518, "Member 'ABP_AJBInGameStand_PPH_C::L_Forearm' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_PPH_C, R_UpperArm) == 0x000520, "Member 'ABP_AJBInGameStand_PPH_C::R_UpperArm' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_PPH_C, L_UpperArm) == 0x000528, "Member 'ABP_AJBInGameStand_PPH_C::L_UpperArm' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_PPH_C, Head) == 0x000530, "Member 'ABP_AJBInGameStand_PPH_C::Head' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_PPH_C, ShotPoint) == 0x000538, "Member 'ABP_AJBInGameStand_PPH_C::ShotPoint' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_PPH_C, LeftCapsuleNum) == 0x000540, "Member 'ABP_AJBInGameStand_PPH_C::LeftCapsuleNum' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_PPH_C, CapsuleNum) == 0x000544, "Member 'ABP_AJBInGameStand_PPH_C::CapsuleNum' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_PPH_C, _ForSkipOwner_LeftCapsuleNum) == 0x000548, "Member 'ABP_AJBInGameStand_PPH_C::_ForSkipOwner_LeftCapsuleNum' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_PPH_C, CapsuleIncreaseInterval_s_) == 0x00054C, "Member 'ABP_AJBInGameStand_PPH_C::CapsuleIncreaseInterval_s_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_PPH_C, CapsuleIncreaseIntervalOnFerocious_s_) == 0x000550, "Member 'ABP_AJBInGameStand_PPH_C::CapsuleIncreaseIntervalOnFerocious_s_' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_PPH_C, CurrentCapsuleTime) == 0x000554, "Member 'ABP_AJBInGameStand_PPH_C::CurrentCapsuleTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_PPH_C, bEnableUpdateCapsule) == 0x000558, "Member 'ABP_AJBInGameStand_PPH_C::bEnableUpdateCapsule' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_PPH_C, bShowCapsuleDebug) == 0x000559, "Member 'ABP_AJBInGameStand_PPH_C::bShowCapsuleDebug' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_PPH_C, VirusTargetCharacterList) == 0x000560, "Member 'ABP_AJBInGameStand_PPH_C::VirusTargetCharacterList' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_PPH_C, PropertiesForUIReplicationFrequency) == 0x000570, "Member 'ABP_AJBInGameStand_PPH_C::PropertiesForUIReplicationFrequency' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_PPH_C, CapsuleSocketList) == 0x000578, "Member 'ABP_AJBInGameStand_PPH_C::CapsuleSocketList' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_PPH_C, CapsuleIncreaseParticleTag) == 0x000588, "Member 'ABP_AJBInGameStand_PPH_C::CapsuleIncreaseParticleTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameStand_PPH_C, bDebugCapsuleConsumeInfinity) == 0x000590, "Member 'ABP_AJBInGameStand_PPH_C::bDebugCapsuleConsumeInfinity' has a wrong offset!");

}

