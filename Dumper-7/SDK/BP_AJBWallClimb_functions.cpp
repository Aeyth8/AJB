#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBWallClimb

#include "Basic.hpp"

#include "BP_AJBWallClimb_classes.hpp"
#include "BP_AJBWallClimb_parameters.hpp"


namespace SDK
{

// Function BP_AJBWallClimb.BP_AJBWallClimb_C.ExecuteUbergraph_BP_AJBWallClimb
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBWallClimb_C::ExecuteUbergraph_BP_AJBWallClimb(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "ExecuteUbergraph_BP_AJBWallClimb");

	Params::BP_AJBWallClimb_C_ExecuteUbergraph_BP_AJBWallClimb Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBWallClimb_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "ReceiveEndPlay");

	Params::BP_AJBWallClimb_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.OnStandDestroyed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DestroyedActor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBWallClimb_C::OnStandDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "OnStandDestroyed");

	Params::BP_AJBWallClimb_C_OnStandDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.ChangeStandLaunchVelocityScale
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBWallClimb_C::ChangeStandLaunchVelocityScale(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "ChangeStandLaunchVelocityScale");

	Params::BP_AJBWallClimb_C_ChangeStandLaunchVelocityScale Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.ChangeCharacterMoveSpeedByStand
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBWallClimb_C::ChangeCharacterMoveSpeedByStand(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "ChangeCharacterMoveSpeedByStand");

	Params::BP_AJBWallClimb_C_ChangeCharacterMoveSpeedByStand Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.RetryRequestGionRainLoop
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBWallClimb_C::RetryRequestGionRainLoop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "RetryRequestGionRainLoop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.RequestActionGion
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBWallClimb_C::RequestActionGion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "RequestActionGion");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.Stop
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBWallClimb_C::Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "Stop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.OnJump
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBWallClimb_C::OnJump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "OnJump");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.CharacterBind
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBWallClimb_C::CharacterBind()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "CharacterBind");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.OnReleasedJump
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBWallClimb_C::OnReleasedJump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "OnReleasedJump");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.OnPressedJump
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBWallClimb_C::OnPressedJump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "OnPressedJump");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.ROS_Adjust
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBWallClimb_C::ROS_Adjust(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "ROS_Adjust");

	Params::BP_AJBWallClimb_C_ROS_Adjust Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.OnBeginState_End
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bCancel                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bRestore                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FRotator&                  Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void UBP_AJBWallClimb_C::OnBeginState_End(bool bCancel, bool bRestore, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "OnBeginState_End");

	Params::BP_AJBWallClimb_C_OnBeginState_End Parms{};

	Parms.bCancel = bCancel;
	Parms.bRestore = bRestore;
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.MC_BeginState_End
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bCancel                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FRotator&                  Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void UBP_AJBWallClimb_C::MC_BeginState_End(bool bCancel, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "MC_BeginState_End");

	Params::BP_AJBWallClimb_C_MC_BeginState_End Parms{};

	Parms.bCancel = bCancel;
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.ROS_BeginState_End
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bCancel                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FRotator&                  Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void UBP_AJBWallClimb_C::ROS_BeginState_End(bool bCancel, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "ROS_BeginState_End");

	Params::BP_AJBWallClimb_C_ROS_BeginState_End Parms{};

	Parms.bCancel = bCancel;
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.BeginState_End_OneShot
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bCancel                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FRotator&                  Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void UBP_AJBWallClimb_C::BeginState_End_OneShot(bool bCancel, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "BeginState_End_OneShot");

	Params::BP_AJBWallClimb_C_BeginState_End_OneShot Parms{};

	Parms.bCancel = bCancel;
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.StateBeginPlay
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bShouldRestore                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bUseNextState                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// uint8                                   NextState                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBWallClimb_C::StateBeginPlay(bool bShouldRestore, bool bUseNextState, uint8 NextState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "StateBeginPlay");

	Params::BP_AJBWallClimb_C_StateBeginPlay Parms{};

	Parms.bShouldRestore = bShouldRestore;
	Parms.bUseNextState = bUseNextState;
	Parms.NextState = NextState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBWallClimb_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "ReceiveTick");

	Params::BP_AJBWallClimb_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.MC_BeginState_Action
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FRotator&                  Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void UBP_AJBWallClimb_C::MC_BeginState_Action(const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "MC_BeginState_Action");

	Params::BP_AJBWallClimb_C_MC_BeginState_Action Parms{};

	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.ROS_BeginState_Action
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FRotator&                  Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void UBP_AJBWallClimb_C::ROS_BeginState_Action(const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "ROS_BeginState_Action");

	Params::BP_AJBWallClimb_C_ROS_BeginState_Action Parms{};

	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.BeginState_End
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bCancel                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBWallClimb_C::BeginState_End(bool bCancel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "BeginState_End");

	Params::BP_AJBWallClimb_C_BeginState_End Parms{};

	Parms.bCancel = bCancel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.StateTick_Action
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBWallClimb_C::StateTick_Action(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "StateTick_Action");

	Params::BP_AJBWallClimb_C_StateTick_Action Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.OnBeginState_Action
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bRestore                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FRotator&                  Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void UBP_AJBWallClimb_C::OnBeginState_Action(bool bRestore, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "OnBeginState_Action");

	Params::BP_AJBWallClimb_C_OnBeginState_Action Parms{};

	Parms.bRestore = bRestore;
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.BeginStateActionOneShot
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FRotator&                  Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void UBP_AJBWallClimb_C::BeginStateActionOneShot(const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "BeginStateActionOneShot");

	Params::BP_AJBWallClimb_C_BeginStateActionOneShot Parms{};

	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.BeginState_Action
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBWallClimb_C::BeginState_Action()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "BeginState_Action");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.StateTickNone
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBWallClimb_C::StateTickNone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "StateTickNone");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.StateTick
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBWallClimb_C::StateTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "StateTick");

	Params::BP_AJBWallClimb_C_StateTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.ChangeStandMovementDistanceScale
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBWallClimb_C::ChangeStandMovementDistanceScale(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "ChangeStandMovementDistanceScale");

	Params::BP_AJBWallClimb_C_ChangeStandMovementDistanceScale Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.ChangeMovementDistanceScale
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBWallClimb_C::ChangeMovementDistanceScale(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "ChangeMovementDistanceScale");

	Params::BP_AJBWallClimb_C_ChangeMovementDistanceScale Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.OnCompleted_6D9C0F5845C72D1FE2E944AEDA339B26
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBWallClimb_C::OnCompleted_6D9C0F5845C72D1FE2E944AEDA339B26(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "OnCompleted_6D9C0F5845C72D1FE2E944AEDA339B26");

	Params::BP_AJBWallClimb_C_OnCompleted_6D9C0F5845C72D1FE2E944AEDA339B26 Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.OnBlendOut_6D9C0F5845C72D1FE2E944AEDA339B26
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBWallClimb_C::OnBlendOut_6D9C0F5845C72D1FE2E944AEDA339B26(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "OnBlendOut_6D9C0F5845C72D1FE2E944AEDA339B26");

	Params::BP_AJBWallClimb_C_OnBlendOut_6D9C0F5845C72D1FE2E944AEDA339B26 Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.OnInterrupted_6D9C0F5845C72D1FE2E944AEDA339B26
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBWallClimb_C::OnInterrupted_6D9C0F5845C72D1FE2E944AEDA339B26(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "OnInterrupted_6D9C0F5845C72D1FE2E944AEDA339B26");

	Params::BP_AJBWallClimb_C_OnInterrupted_6D9C0F5845C72D1FE2E944AEDA339B26 Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.OnNotifyBegin_6D9C0F5845C72D1FE2E944AEDA339B26
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBWallClimb_C::OnNotifyBegin_6D9C0F5845C72D1FE2E944AEDA339B26(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "OnNotifyBegin_6D9C0F5845C72D1FE2E944AEDA339B26");

	Params::BP_AJBWallClimb_C_OnNotifyBegin_6D9C0F5845C72D1FE2E944AEDA339B26 Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.OnNotifyEnd_6D9C0F5845C72D1FE2E944AEDA339B26
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBWallClimb_C::OnNotifyEnd_6D9C0F5845C72D1FE2E944AEDA339B26(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "OnNotifyEnd_6D9C0F5845C72D1FE2E944AEDA339B26");

	Params::BP_AJBWallClimb_C_OnNotifyEnd_6D9C0F5845C72D1FE2E944AEDA339B26 Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.CheckWall
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   bCanClimb_0                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult*                      WallHitResult                                          (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// float*                                  EffectiveHeight_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBWallClimb_C::CheckWall(bool* bCanClimb_0, struct FHitResult* WallHitResult, float* EffectiveHeight_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "CheckWall");

	Params::BP_AJBWallClimb_C_CheckWall Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bCanClimb_0 != nullptr)
		*bCanClimb_0 = Parms.bCanClimb_0;

	if (WallHitResult != nullptr)
		*WallHitResult = std::move(Parms.WallHitResult);

	if (EffectiveHeight_0 != nullptr)
		*EffectiveHeight_0 = Parms.EffectiveHeight_0;
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.CalcAccensionDirection
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   WallNormal_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bAscensionContinue                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bIsTouchWall                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool*                                   bIsAvoidanceEdge                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

struct FVector UBP_AJBWallClimb_C::CalcAccensionDirection(const struct FVector& WallNormal_0, bool* bAscensionContinue, bool* bIsTouchWall, bool* bIsAvoidanceEdge)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "CalcAccensionDirection");

	Params::BP_AJBWallClimb_C_CalcAccensionDirection Parms{};

	Parms.WallNormal_0 = std::move(WallNormal_0);

	UObject::ProcessEvent(Func, &Parms);

	if (bAscensionContinue != nullptr)
		*bAscensionContinue = Parms.bAscensionContinue;

	if (bIsTouchWall != nullptr)
		*bIsTouchWall = Parms.bIsTouchWall;

	if (bIsAvoidanceEdge != nullptr)
		*bIsAvoidanceEdge = Parms.bIsAvoidanceEdge;

	return Parms.ReturnValue;
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.OnTouchWall
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_AJBWallClimb_C::OnTouchWall()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "OnTouchWall");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.CheckRest
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   bIsRest                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBWallClimb_C::CheckRest(bool* bIsRest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "CheckRest");

	Params::BP_AJBWallClimb_C_CheckRest Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bIsRest != nullptr)
		*bIsRest = Parms.bIsRest;
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.SetEnableDDWLeg
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsEnable                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bAnimation                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bUseSpecifiedRotation                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FRotator&                  Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void UBP_AJBWallClimb_C::SetEnableDDWLeg(bool bIsEnable, bool bAnimation, bool bUseSpecifiedRotation, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "SetEnableDDWLeg");

	Params::BP_AJBWallClimb_C_SetEnableDDWLeg Parms{};

	Parms.bIsEnable = bIsEnable;
	Parms.bAnimation = bAnimation;
	Parms.bUseSpecifiedRotation = bUseSpecifiedRotation;
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.CheckWallTraceForward
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   TraceStartPointOffset                                  (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult*                      OutHit                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_AJBWallClimb_C::CheckWallTraceForward(const struct FVector& TraceStartPointOffset, struct FHitResult* OutHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "CheckWallTraceForward");

	Params::BP_AJBWallClimb_C_CheckWallTraceForward Parms{};

	Parms.TraceStartPointOffset = std::move(TraceStartPointOffset);

	UObject::ProcessEvent(Func, &Parms);

	if (OutHit != nullptr)
		*OutHit = std::move(Parms.OutHit);

	return Parms.ReturnValue;
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.CheckEntrance
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FHitResult&                HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool*                                   bEntrance                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBWallClimb_C::CheckEntrance(const struct FHitResult& HitResult, bool* bEntrance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "CheckEntrance");

	Params::BP_AJBWallClimb_C_CheckEntrance Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	if (bEntrance != nullptr)
		*bEntrance = Parms.bEntrance;
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.GetHitResultConsiderEntrance
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FHitResult>&              HitResults                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference)
// struct FHitResult*                      HitResult                                              (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void UBP_AJBWallClimb_C::GetHitResultConsiderEntrance(TArray<struct FHitResult>& HitResults, struct FHitResult* HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "GetHitResultConsiderEntrance");

	Params::BP_AJBWallClimb_C_GetHitResultConsiderEntrance Parms{};

	Parms.HitResults = std::move(HitResults);

	UObject::ProcessEvent(Func, &Parms);

	HitResults = std::move(Parms.HitResults);

	if (HitResult != nullptr)
		*HitResult = std::move(Parms.HitResult);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.CheckWallTraceHeight1
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FHitResult&                HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// struct FHitResult*                      OutHit                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool*                                   bReturnValue                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBWallClimb_C::CheckWallTraceHeight1(const struct FHitResult& HitResult, struct FHitResult* OutHit, bool* bReturnValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "CheckWallTraceHeight1");

	Params::BP_AJBWallClimb_C_CheckWallTraceHeight1 Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	if (OutHit != nullptr)
		*OutHit = std::move(Parms.OutHit);

	if (bReturnValue != nullptr)
		*bReturnValue = Parms.bReturnValue;
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.CheckWallTraceHeight2
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FHitResult&                HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// struct FHitResult*                      OutHit                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_AJBWallClimb_C::CheckWallTraceHeight2(const struct FHitResult& HitResult, struct FHitResult* OutHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "CheckWallTraceHeight2");

	Params::BP_AJBWallClimb_C_CheckWallTraceHeight2 Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	if (OutHit != nullptr)
		*OutHit = std::move(Parms.OutHit);

	return Parms.ReturnValue;
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.CheckWallTraceHeight3
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FHitResult&                HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// float                                   DimpleCheckSampleLength                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult*                      OutHit                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_AJBWallClimb_C::CheckWallTraceHeight3(const struct FHitResult& HitResult, float DimpleCheckSampleLength, struct FHitResult* OutHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "CheckWallTraceHeight3");

	Params::BP_AJBWallClimb_C_CheckWallTraceHeight3 Parms{};

	Parms.HitResult = std::move(HitResult);
	Parms.DimpleCheckSampleLength = DimpleCheckSampleLength;

	UObject::ProcessEvent(Func, &Parms);

	if (OutHit != nullptr)
		*OutHit = std::move(Parms.OutHit);

	return Parms.ReturnValue;
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.CheckWallTraceRouteDetect1
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NumOfTrace                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   SensorPoint                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult*                      OutHit                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool*                                   bReturnValue                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBWallClimb_C::CheckWallTraceRouteDetect1(int32 NumOfTrace, const struct FVector& SensorPoint, struct FHitResult* OutHit, bool* bReturnValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "CheckWallTraceRouteDetect1");

	Params::BP_AJBWallClimb_C_CheckWallTraceRouteDetect1 Parms{};

	Parms.NumOfTrace = NumOfTrace;
	Parms.SensorPoint = std::move(SensorPoint);

	UObject::ProcessEvent(Func, &Parms);

	if (OutHit != nullptr)
		*OutHit = std::move(Parms.OutHit);

	if (bReturnValue != nullptr)
		*bReturnValue = Parms.bReturnValue;
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.CheckWallTraceRouteDetect2
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   StartLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   EndLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult*                      OutHit                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool*                                   bReturnValue                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBWallClimb_C::CheckWallTraceRouteDetect2(const struct FVector& StartLocation, const struct FVector& EndLocation, struct FHitResult* OutHit, bool* bReturnValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "CheckWallTraceRouteDetect2");

	Params::BP_AJBWallClimb_C_CheckWallTraceRouteDetect2 Parms{};

	Parms.StartLocation = std::move(StartLocation);
	Parms.EndLocation = std::move(EndLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (OutHit != nullptr)
		*OutHit = std::move(Parms.OutHit);

	if (bReturnValue != nullptr)
		*bReturnValue = Parms.bReturnValue;
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.CheckWallTraceRouteDetect3
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   StartLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   EndLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult*                      OutHit                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool*                                   bReturnValue                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBWallClimb_C::CheckWallTraceRouteDetect3(const struct FVector& StartLocation, const struct FVector& EndLocation, struct FHitResult* OutHit, bool* bReturnValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "CheckWallTraceRouteDetect3");

	Params::BP_AJBWallClimb_C_CheckWallTraceRouteDetect3 Parms{};

	Parms.StartLocation = std::move(StartLocation);
	Parms.EndLocation = std::move(EndLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (OutHit != nullptr)
		*OutHit = std::move(Parms.OutHit);

	if (bReturnValue != nullptr)
		*bReturnValue = Parms.bReturnValue;
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.RequestLegParticle
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              ParticleTag                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    bAttach                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bUseSpecifiedRotation                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FRotator&                  Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class ABP_AJBInGameParticleEffect_C**   Particle                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBWallClimb_C::RequestLegParticle(const struct FGameplayTag& ParticleTag, bool bAttach, bool bUseSpecifiedRotation, const struct FRotator& Rotation, class ABP_AJBInGameParticleEffect_C** Particle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "RequestLegParticle");

	Params::BP_AJBWallClimb_C_RequestLegParticle Parms{};

	Parms.ParticleTag = std::move(ParticleTag);
	Parms.bAttach = bAttach;
	Parms.bUseSpecifiedRotation = bUseSpecifiedRotation;
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);

	if (Particle != nullptr)
		*Particle = Parms.Particle;
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.TraceForwardCheck
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FHitResult&                HitResultCenter                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// const struct FHitResult&                HitResultRight                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// const struct FHitResult&                HitResultLeft                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool*                                   bSucceed                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBWallClimb_C::TraceForwardCheck(const struct FHitResult& HitResultCenter, const struct FHitResult& HitResultRight, const struct FHitResult& HitResultLeft, bool* bSucceed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "TraceForwardCheck");

	Params::BP_AJBWallClimb_C_TraceForwardCheck Parms{};

	Parms.HitResultCenter = std::move(HitResultCenter);
	Parms.HitResultRight = std::move(HitResultRight);
	Parms.HitResultLeft = std::move(HitResultLeft);

	UObject::ProcessEvent(Func, &Parms);

	if (bSucceed != nullptr)
		*bSucceed = Parms.bSucceed;
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.CheckSameWildcardObject
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              ComponentA                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              ComponentB                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bMatch                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBWallClimb_C::CheckSameWildcardObject(class UPrimitiveComponent* ComponentA, class UPrimitiveComponent* ComponentB, bool* bMatch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "CheckSameWildcardObject");

	Params::BP_AJBWallClimb_C_CheckSameWildcardObject Parms{};

	Parms.ComponentA = ComponentA;
	Parms.ComponentB = ComponentB;

	UObject::ProcessEvent(Func, &Parms);

	if (bMatch != nullptr)
		*bMatch = Parms.bMatch;
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.UpdateMP
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBWallClimb_C::UpdateMP(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "UpdateMP");

	Params::BP_AJBWallClimb_C_UpdateMP Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.CalcAscensionSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float*                                  AscensionSpeed_0                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBWallClimb_C::CalcAscensionSpeed(float* AscensionSpeed_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "CalcAscensionSpeed");

	Params::BP_AJBWallClimb_C_CalcAscensionSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AscensionSpeed_0 != nullptr)
		*AscensionSpeed_0 = Parms.AscensionSpeed_0;
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.CalcLaunchVelocityPower
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float*                                  LaunchPower                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBWallClimb_C::CalcLaunchVelocityPower(float* LaunchPower)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "CalcLaunchVelocityPower");

	Params::BP_AJBWallClimb_C_CalcLaunchVelocityPower Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LaunchPower != nullptr)
		*LaunchPower = Parms.LaunchPower;
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.GetWallAngleThreshold
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float*                                  WallAngleThreshold_0                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBWallClimb_C::GetWallAngleThreshold(float* WallAngleThreshold_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "GetWallAngleThreshold");

	Params::BP_AJBWallClimb_C_GetWallAngleThreshold Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WallAngleThreshold_0 != nullptr)
		*WallAngleThreshold_0 = Parms.WallAngleThreshold_0;
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.PossibleActive
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   bPossibleActive                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBWallClimb_C::PossibleActive(bool* bPossibleActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "PossibleActive");

	Params::BP_AJBWallClimb_C_PossibleActive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bPossibleActive != nullptr)
		*bPossibleActive = Parms.bPossibleActive;
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.PossibleActiveCheckWallAsAction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   bPossibleActive                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBWallClimb_C::PossibleActiveCheckWallAsAction(bool* bPossibleActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "PossibleActiveCheckWallAsAction");

	Params::BP_AJBWallClimb_C_PossibleActiveCheckWallAsAction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bPossibleActive != nullptr)
		*bPossibleActive = Parms.bPossibleActive;
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.ChangeEnableShowGuide
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBWallClimb_C::ChangeEnableShowGuide(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "ChangeEnableShowGuide");

	Params::BP_AJBWallClimb_C_ChangeEnableShowGuide Parms{};

	Parms.bEnable = bEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.GetCanClimbMinHeight
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float*                                  MinHeight                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBWallClimb_C::GetCanClimbMinHeight(float* MinHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "GetCanClimbMinHeight");

	Params::BP_AJBWallClimb_C_GetCanClimbMinHeight Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MinHeight != nullptr)
		*MinHeight = Parms.MinHeight;
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.GetPointOffsetRate
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FHitResult&                HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// float*                                  Rate                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBWallClimb_C::GetPointOffsetRate(const struct FHitResult& HitResult, float* Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "GetPointOffsetRate");

	Params::BP_AJBWallClimb_C_GetPointOffsetRate Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	if (Rate != nullptr)
		*Rate = Parms.Rate;
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_AJBWallClimb_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.OnRelatedCharacterBecomeLastSurvivor
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_AJBWallClimb_C::OnRelatedCharacterBecomeLastSurvivor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "OnRelatedCharacterBecomeLastSurvivor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBWallClimb.BP_AJBWallClimb_C.NotifyTheWorld
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAJBInGameCharacter*              Operator                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EGeneralTiming                          Timing                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bOperatorIsEmpty                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBWallClimb_C::NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBWallClimb_C", "NotifyTheWorld");

	Params::BP_AJBWallClimb_C_NotifyTheWorld Parms{};

	Parms.Operator = Operator;
	Parms.Time = Time;
	Parms.Timing = Timing;
	Parms.bEnable = bEnable;
	Parms.bOperatorIsEmpty = bOperatorIsEmpty;

	UObject::ProcessEvent(Func, &Parms);
}

}

