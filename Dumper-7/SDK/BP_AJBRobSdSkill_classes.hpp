#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBRobSdSkill

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_AJBCloseRangeSkill_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBRobSdSkill.BP_AJBRobSdSkill_C
// 0x0018 (0x0418 - 0x0400)
class UBP_AJBRobSdSkill_C final : public UBP_AJBCloseRangeSkill_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBRobSdSkill_C;                 // 0x0400(0x0008)(Transient, DuplicateTransient)
	float                                         SnapHandOffset;                                    // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40C[0x4];                                      // 0x040C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TempHitActor;                                      // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBRobSdSkill(int32 EntryPoint);
	void TrySpaekHitResultVoice(const struct FGameplayTag& VoiceTag, class AActor* HitActor);
	void RequestFailedEffects(class USceneComponent* AttachToComponent, const struct FVector& HitLocation);
	void SpeakRushHitVoice(bool bHitCharacter);
	void HitWait(class AActor* HitActor, class UActorComponent* HitComponent, const struct FVector& HitLocation, const struct FVector& HitNormal, float CuttingRate, EPhysicalSurface SurfaceType, bool bDisableDamage, bool bInvincible, bool bIsPenetration, bool bBlockedByAAP, bool bHeadShot, bool bAvoidSkill);
	void SpeakRushVoice();
	void CheckFailedTarget(class AActor* HitActor, bool* bFailedTarget);
	void SnapPostProcess(const struct FVector& BeforeLocation, class AActor* HitActor, struct FVector* AfterLocation);
	void FacePostProcess(const struct FRotator& BeforeRotation, class AActor* HitActor, struct FRotator* AfterRotation);
	void TimeExtension_Server(float Value);
	void TimeRewind_Server(float Value);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBRobSdSkill_C">();
	}
	static class UBP_AJBRobSdSkill_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBRobSdSkill_C>();
	}
};
static_assert(alignof(UBP_AJBRobSdSkill_C) == 0x000008, "Wrong alignment on UBP_AJBRobSdSkill_C");
static_assert(sizeof(UBP_AJBRobSdSkill_C) == 0x000418, "Wrong size on UBP_AJBRobSdSkill_C");
static_assert(offsetof(UBP_AJBRobSdSkill_C, UberGraphFrame_BP_AJBRobSdSkill_C) == 0x000400, "Member 'UBP_AJBRobSdSkill_C::UberGraphFrame_BP_AJBRobSdSkill_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBRobSdSkill_C, SnapHandOffset) == 0x000408, "Member 'UBP_AJBRobSdSkill_C::SnapHandOffset' has a wrong offset!");
static_assert(offsetof(UBP_AJBRobSdSkill_C, TempHitActor) == 0x000410, "Member 'UBP_AJBRobSdSkill_C::TempHitActor' has a wrong offset!");

}

