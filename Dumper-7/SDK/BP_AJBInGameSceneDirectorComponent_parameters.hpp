#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameSceneDirectorComponent

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_LastSurvivorCut_structs.hpp"


namespace SDK::Params
{

// Function BP_AJBInGameSceneDirectorComponent.BP_AJBInGameSceneDirectorComponent_C.ExecuteUbergraph_BP_AJBInGameSceneDirectorComponent
// 0x0014 (0x0014 - 0x0000)
struct BP_AJBInGameSceneDirectorComponent_C_ExecuteUbergraph_BP_AJBInGameSceneDirectorComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_CustomEvent_CurrentCut1;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_CustomEvent_BeforeCut;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_CustomEvent_CurrentCut;                     // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_CustomEvent_NextCut;                        // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_LastSurvivorCut                             K2Node_CustomEvent_NextCut1;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_CustomEvent_Cut;                            // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameSceneDirectorComponent_C_ExecuteUbergraph_BP_AJBInGameSceneDirectorComponent) == 0x000004, "Wrong alignment on BP_AJBInGameSceneDirectorComponent_C_ExecuteUbergraph_BP_AJBInGameSceneDirectorComponent");
static_assert(sizeof(BP_AJBInGameSceneDirectorComponent_C_ExecuteUbergraph_BP_AJBInGameSceneDirectorComponent) == 0x000014, "Wrong size on BP_AJBInGameSceneDirectorComponent_C_ExecuteUbergraph_BP_AJBInGameSceneDirectorComponent");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_ExecuteUbergraph_BP_AJBInGameSceneDirectorComponent, EntryPoint) == 0x000000, "Member 'BP_AJBInGameSceneDirectorComponent_C_ExecuteUbergraph_BP_AJBInGameSceneDirectorComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_ExecuteUbergraph_BP_AJBInGameSceneDirectorComponent, K2Node_CustomEvent_CurrentCut1) == 0x000004, "Member 'BP_AJBInGameSceneDirectorComponent_C_ExecuteUbergraph_BP_AJBInGameSceneDirectorComponent::K2Node_CustomEvent_CurrentCut1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_ExecuteUbergraph_BP_AJBInGameSceneDirectorComponent, K2Node_CustomEvent_BeforeCut) == 0x000005, "Member 'BP_AJBInGameSceneDirectorComponent_C_ExecuteUbergraph_BP_AJBInGameSceneDirectorComponent::K2Node_CustomEvent_BeforeCut' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_ExecuteUbergraph_BP_AJBInGameSceneDirectorComponent, K2Node_CustomEvent_CurrentCut) == 0x000006, "Member 'BP_AJBInGameSceneDirectorComponent_C_ExecuteUbergraph_BP_AJBInGameSceneDirectorComponent::K2Node_CustomEvent_CurrentCut' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_ExecuteUbergraph_BP_AJBInGameSceneDirectorComponent, K2Node_CustomEvent_NextCut) == 0x000007, "Member 'BP_AJBInGameSceneDirectorComponent_C_ExecuteUbergraph_BP_AJBInGameSceneDirectorComponent::K2Node_CustomEvent_NextCut' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_ExecuteUbergraph_BP_AJBInGameSceneDirectorComponent, K2Node_CustomEvent_NextCut1) == 0x000008, "Member 'BP_AJBInGameSceneDirectorComponent_C_ExecuteUbergraph_BP_AJBInGameSceneDirectorComponent::K2Node_CustomEvent_NextCut1' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_ExecuteUbergraph_BP_AJBInGameSceneDirectorComponent, K2Node_CustomEvent_Cut) == 0x000009, "Member 'BP_AJBInGameSceneDirectorComponent_C_ExecuteUbergraph_BP_AJBInGameSceneDirectorComponent::K2Node_CustomEvent_Cut' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_ExecuteUbergraph_BP_AJBInGameSceneDirectorComponent, K2Node_Event_DeltaSeconds) == 0x00000C, "Member 'BP_AJBInGameSceneDirectorComponent_C_ExecuteUbergraph_BP_AJBInGameSceneDirectorComponent::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_ExecuteUbergraph_BP_AJBInGameSceneDirectorComponent, CallFunc_Add_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_AJBInGameSceneDirectorComponent_C_ExecuteUbergraph_BP_AJBInGameSceneDirectorComponent::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameSceneDirectorComponent.BP_AJBInGameSceneDirectorComponent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBInGameSceneDirectorComponent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameSceneDirectorComponent_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_AJBInGameSceneDirectorComponent_C_ReceiveTick");
static_assert(sizeof(BP_AJBInGameSceneDirectorComponent_C_ReceiveTick) == 0x000004, "Wrong size on BP_AJBInGameSceneDirectorComponent_C_ReceiveTick");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_AJBInGameSceneDirectorComponent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_AJBInGameSceneDirectorComponent.BP_AJBInGameSceneDirectorComponent_C.CutEnd
// 0x0002 (0x0002 - 0x0000)
struct BP_AJBInGameSceneDirectorComponent_C_CutEnd final
{
public:
	uint8                                         CurrentCut_0;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         NextCut;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameSceneDirectorComponent_C_CutEnd) == 0x000001, "Wrong alignment on BP_AJBInGameSceneDirectorComponent_C_CutEnd");
static_assert(sizeof(BP_AJBInGameSceneDirectorComponent_C_CutEnd) == 0x000002, "Wrong size on BP_AJBInGameSceneDirectorComponent_C_CutEnd");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_CutEnd, CurrentCut_0) == 0x000000, "Member 'BP_AJBInGameSceneDirectorComponent_C_CutEnd::CurrentCut_0' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_CutEnd, NextCut) == 0x000001, "Member 'BP_AJBInGameSceneDirectorComponent_C_CutEnd::NextCut' has a wrong offset!");

// Function BP_AJBInGameSceneDirectorComponent.BP_AJBInGameSceneDirectorComponent_C.CutBegin
// 0x0002 (0x0002 - 0x0000)
struct BP_AJBInGameSceneDirectorComponent_C_CutBegin final
{
public:
	uint8                                         CurrentCut_0;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         BeforeCut_0;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameSceneDirectorComponent_C_CutBegin) == 0x000001, "Wrong alignment on BP_AJBInGameSceneDirectorComponent_C_CutBegin");
static_assert(sizeof(BP_AJBInGameSceneDirectorComponent_C_CutBegin) == 0x000002, "Wrong size on BP_AJBInGameSceneDirectorComponent_C_CutBegin");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_CutBegin, CurrentCut_0) == 0x000000, "Member 'BP_AJBInGameSceneDirectorComponent_C_CutBegin::CurrentCut_0' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_CutBegin, BeforeCut_0) == 0x000001, "Member 'BP_AJBInGameSceneDirectorComponent_C_CutBegin::BeforeCut_0' has a wrong offset!");

// Function BP_AJBInGameSceneDirectorComponent.BP_AJBInGameSceneDirectorComponent_C.ChangeCut
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameSceneDirectorComponent_C_ChangeCut final
{
public:
	E_LastSurvivorCut                             NextCut;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameSceneDirectorComponent_C_ChangeCut) == 0x000001, "Wrong alignment on BP_AJBInGameSceneDirectorComponent_C_ChangeCut");
static_assert(sizeof(BP_AJBInGameSceneDirectorComponent_C_ChangeCut) == 0x000001, "Wrong size on BP_AJBInGameSceneDirectorComponent_C_ChangeCut");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_ChangeCut, NextCut) == 0x000000, "Member 'BP_AJBInGameSceneDirectorComponent_C_ChangeCut::NextCut' has a wrong offset!");

// Function BP_AJBInGameSceneDirectorComponent.BP_AJBInGameSceneDirectorComponent_C.CutTick
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameSceneDirectorComponent_C_CutTick final
{
public:
	uint8                                         Cut;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameSceneDirectorComponent_C_CutTick) == 0x000001, "Wrong alignment on BP_AJBInGameSceneDirectorComponent_C_CutTick");
static_assert(sizeof(BP_AJBInGameSceneDirectorComponent_C_CutTick) == 0x000001, "Wrong size on BP_AJBInGameSceneDirectorComponent_C_CutTick");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_CutTick, Cut) == 0x000000, "Member 'BP_AJBInGameSceneDirectorComponent_C_CutTick::Cut' has a wrong offset!");

// Function BP_AJBInGameSceneDirectorComponent.BP_AJBInGameSceneDirectorComponent_C.UpdateRealDeltaTime
// 0x0020 (0x0020 - 0x0000)
struct BP_AJBInGameSceneDirectorComponent_C_UpdateRealDeltaTime final
{
public:
	struct FDateTime                              Temp_Now;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_Now_ReturnValue;                          // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FTimespan                              CallFunc_Subtract_DateTimeDateTime_ReturnValue;    // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTotalSeconds_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameSceneDirectorComponent_C_UpdateRealDeltaTime) == 0x000008, "Wrong alignment on BP_AJBInGameSceneDirectorComponent_C_UpdateRealDeltaTime");
static_assert(sizeof(BP_AJBInGameSceneDirectorComponent_C_UpdateRealDeltaTime) == 0x000020, "Wrong size on BP_AJBInGameSceneDirectorComponent_C_UpdateRealDeltaTime");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_UpdateRealDeltaTime, Temp_Now) == 0x000000, "Member 'BP_AJBInGameSceneDirectorComponent_C_UpdateRealDeltaTime::Temp_Now' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_UpdateRealDeltaTime, CallFunc_Now_ReturnValue) == 0x000008, "Member 'BP_AJBInGameSceneDirectorComponent_C_UpdateRealDeltaTime::CallFunc_Now_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_UpdateRealDeltaTime, CallFunc_Subtract_DateTimeDateTime_ReturnValue) == 0x000010, "Member 'BP_AJBInGameSceneDirectorComponent_C_UpdateRealDeltaTime::CallFunc_Subtract_DateTimeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_UpdateRealDeltaTime, CallFunc_GetTotalSeconds_ReturnValue) == 0x000018, "Member 'BP_AJBInGameSceneDirectorComponent_C_UpdateRealDeltaTime::CallFunc_GetTotalSeconds_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameSceneDirectorComponent.BP_AJBInGameSceneDirectorComponent_C.SwitchSceneCamera
// 0x0048 (0x0048 - 0x0000)
struct BP_AJBInGameSceneDirectorComponent_C_SwitchSceneCamera final
{
public:
	struct FGameplayTag                           SceneCameraTag;                                    // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	const class UClass*                           SceneCameraClass;                                  // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCreateCameraWhenIsNotFound;                       // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bSwitched;                                         // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameSceneCamera_C*             SceneCamera;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameSceneCamera_C*             CallFunc_CreateSceneCamera_Camera;                 // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameSceneCamera_C*             CallFunc_Map_Find_Value;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameSceneDirectorComponent_C_SwitchSceneCamera) == 0x000008, "Wrong alignment on BP_AJBInGameSceneDirectorComponent_C_SwitchSceneCamera");
static_assert(sizeof(BP_AJBInGameSceneDirectorComponent_C_SwitchSceneCamera) == 0x000048, "Wrong size on BP_AJBInGameSceneDirectorComponent_C_SwitchSceneCamera");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_SwitchSceneCamera, SceneCameraTag) == 0x000000, "Member 'BP_AJBInGameSceneDirectorComponent_C_SwitchSceneCamera::SceneCameraTag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_SwitchSceneCamera, SceneCameraClass) == 0x000008, "Member 'BP_AJBInGameSceneDirectorComponent_C_SwitchSceneCamera::SceneCameraClass' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_SwitchSceneCamera, bCreateCameraWhenIsNotFound) == 0x000010, "Member 'BP_AJBInGameSceneDirectorComponent_C_SwitchSceneCamera::bCreateCameraWhenIsNotFound' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_SwitchSceneCamera, bSwitched) == 0x000011, "Member 'BP_AJBInGameSceneDirectorComponent_C_SwitchSceneCamera::bSwitched' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_SwitchSceneCamera, SceneCamera) == 0x000018, "Member 'BP_AJBInGameSceneDirectorComponent_C_SwitchSceneCamera::SceneCamera' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_SwitchSceneCamera, CallFunc_GetPlayerController_ReturnValue) == 0x000020, "Member 'BP_AJBInGameSceneDirectorComponent_C_SwitchSceneCamera::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_SwitchSceneCamera, CallFunc_CreateSceneCamera_Camera) == 0x000028, "Member 'BP_AJBInGameSceneDirectorComponent_C_SwitchSceneCamera::CallFunc_CreateSceneCamera_Camera' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_SwitchSceneCamera, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'BP_AJBInGameSceneDirectorComponent_C_SwitchSceneCamera::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_SwitchSceneCamera, CallFunc_Map_Find_Value) == 0x000038, "Member 'BP_AJBInGameSceneDirectorComponent_C_SwitchSceneCamera::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_SwitchSceneCamera, CallFunc_Map_Find_ReturnValue) == 0x000040, "Member 'BP_AJBInGameSceneDirectorComponent_C_SwitchSceneCamera::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameSceneDirectorComponent.BP_AJBInGameSceneDirectorComponent_C.CreateSceneCamera
// 0x0060 (0x0060 - 0x0000)
struct BP_AJBInGameSceneDirectorComponent_C_CreateSceneCamera final
{
public:
	struct FGameplayTag                           SceneCameraTag;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 SceneCameraClass;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameSceneCamera_C*             Camera;                                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0020(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameSceneCamera_C*             CallFunc_FinishSpawningActor_ReturnValue;          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameSceneDirectorComponent_C_CreateSceneCamera) == 0x000010, "Wrong alignment on BP_AJBInGameSceneDirectorComponent_C_CreateSceneCamera");
static_assert(sizeof(BP_AJBInGameSceneDirectorComponent_C_CreateSceneCamera) == 0x000060, "Wrong size on BP_AJBInGameSceneDirectorComponent_C_CreateSceneCamera");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_CreateSceneCamera, SceneCameraTag) == 0x000000, "Member 'BP_AJBInGameSceneDirectorComponent_C_CreateSceneCamera::SceneCameraTag' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_CreateSceneCamera, SceneCameraClass) == 0x000008, "Member 'BP_AJBInGameSceneDirectorComponent_C_CreateSceneCamera::SceneCameraClass' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_CreateSceneCamera, Camera) == 0x000010, "Member 'BP_AJBInGameSceneDirectorComponent_C_CreateSceneCamera::Camera' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_CreateSceneCamera, CallFunc_GetPlayerController_ReturnValue) == 0x000018, "Member 'BP_AJBInGameSceneDirectorComponent_C_CreateSceneCamera::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_CreateSceneCamera, CallFunc_MakeTransform_ReturnValue) == 0x000020, "Member 'BP_AJBInGameSceneDirectorComponent_C_CreateSceneCamera::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_CreateSceneCamera, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000050, "Member 'BP_AJBInGameSceneDirectorComponent_C_CreateSceneCamera::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_CreateSceneCamera, CallFunc_FinishSpawningActor_ReturnValue) == 0x000058, "Member 'BP_AJBInGameSceneDirectorComponent_C_CreateSceneCamera::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function BP_AJBInGameSceneDirectorComponent.BP_AJBInGameSceneDirectorComponent_C.MoveCamera
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBInGameSceneDirectorComponent_C_MoveCamera final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBInGameSceneDirectorComponent_C_MoveCamera) == 0x000004, "Wrong alignment on BP_AJBInGameSceneDirectorComponent_C_MoveCamera");
static_assert(sizeof(BP_AJBInGameSceneDirectorComponent_C_MoveCamera) == 0x000004, "Wrong size on BP_AJBInGameSceneDirectorComponent_C_MoveCamera");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_MoveCamera, Rate) == 0x000000, "Member 'BP_AJBInGameSceneDirectorComponent_C_MoveCamera::Rate' has a wrong offset!");

// Function BP_AJBInGameSceneDirectorComponent.BP_AJBInGameSceneDirectorComponent_C.EnableTargetFollowing
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBInGameSceneDirectorComponent_C_EnableTargetFollowing final
{
public:
	bool                                          bLookAtTarget;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBInGameSceneDirectorComponent_C_EnableTargetFollowing) == 0x000001, "Wrong alignment on BP_AJBInGameSceneDirectorComponent_C_EnableTargetFollowing");
static_assert(sizeof(BP_AJBInGameSceneDirectorComponent_C_EnableTargetFollowing) == 0x000001, "Wrong size on BP_AJBInGameSceneDirectorComponent_C_EnableTargetFollowing");
static_assert(offsetof(BP_AJBInGameSceneDirectorComponent_C_EnableTargetFollowing, bLookAtTarget) == 0x000000, "Member 'BP_AJBInGameSceneDirectorComponent_C_EnableTargetFollowing::bLookAtTarget' has a wrong offset!");

}

