#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBC29Melee

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AJB_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BP_AJBChargeRushSkill_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBC29Melee.BP_AJBC29Melee_C
// 0x0210 (0x0630 - 0x0420)
class UBP_AJBC29Melee_C final : public UBP_AJBChargeRushSkill_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBC29Melee_C;                   // 0x0420(0x0008)(Transient, DuplicateTransient)
	struct FRotator                               FixedOwnerRot;                                     // 0x0428(0x000C)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	uint8                                         Pad_434[0x4];                                      // 0x0434(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFindFloorResult                       FixedFloorResult;                                  // 0x0438(0x0098)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, AdvancedDisplay)
	float                                         StopSpeedRate;                                     // 0x04D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DashAttackSpeed;                                   // 0x04D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RecoveryData_MaxFlySpeed;                          // 0x04D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_4DC[0x4];                                      // 0x04DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameParticleEffect_C*          ChargeRushLv0Particle;                             // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          ChargeRushLv1Particle;                             // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          ChargeRushLv2Particle;                             // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UAnimMontage*                           RushLv0Right;                                      // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           RushLv0Left;                                       // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           RushLv1;                                           // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           RushLv2;                                           // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           ChargeLv0;                                         // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           ChargeLv1;                                         // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           ChargeLv2;                                         // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ResistRatePhase1;                                  // 0x0530(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ResistRatePhase2;                                  // 0x0534(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ResistRatePhase3;                                  // 0x0538(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ResistTime;                                        // 0x053C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LaunchKnockbackConstant;                           // 0x0540(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackRange_cm__Lv0;                               // 0x054C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackRange_cm__Lv1;                               // 0x0550(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackRange_cm__Lv2;                               // 0x0554(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ResistPassiveTag;                                  // 0x0558(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         KnockbackIntensity_Lv0;                            // 0x0560(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KnockbackIntensity_Lv1;                            // 0x0564(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KnockbackIntensity_Lv2;                            // 0x0568(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KnockbackIntensity_Lv0ForStand;                    // 0x056C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KnockbackIntensity_Lv1ForStand;                    // 0x0570(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KnockbackIntensity_Lv2ForStand;                    // 0x0574(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KnockbackIntensity_HamonLv0;                       // 0x0578(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KnockbackIntensity_HamonLv1;                       // 0x057C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KnockbackIntensity_HamonLv2;                       // 0x0580(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KnockbackIntensity_HamonLv0ForStand;               // 0x0584(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KnockbackIntensity_HamonLv1ForStand;               // 0x0588(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KnockbackIntensity_HamonLv2ForStand;               // 0x058C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KnockbackIntensity_PSLv0;                          // 0x0590(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KnockbackIntensity_PSLv1;                          // 0x0594(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KnockbackIntensity_PSLv2;                          // 0x0598(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KnockbackIntensity_PSLv0ForStand;                  // 0x059C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KnockbackIntensity_PSLv1ForStand;                  // 0x05A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KnockbackIntensity_PSLv2ForStand;                  // 0x05A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           RushPSLv0Right;                                    // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           RushPSLv0Left;                                     // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PreDashStateTime_PSLv0;                            // 0x05B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Keep_RepeatCount;                                  // 0x05BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Keep_Redash;                                       // 0x05BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	uint8                                         Pad_5BE[0x2];                                      // 0x05BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PreDashStateTime_PSLv1;                            // 0x05C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PreDashStateTime_PSLv2;                            // 0x05C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           ChargePSLv0;                                       // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           ChargePSLv1;                                       // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           ChargePSLv2;                                       // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           RushPSLv1;                                         // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           RushPSLv2;                                         // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Damage_Lv0;                                        // 0x05F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Damage_Lv1;                                        // 0x05F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Damage_Lv2;                                        // 0x05F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Damage_PSLv0;                                      // 0x05FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Damage_PSLv1;                                      // 0x0600(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Damage_PSLv2;                                      // 0x0604(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackRange_cm__PSLv0;                             // 0x0608(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackRange_cm__PSLv1;                             // 0x060C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackRange_cm__PSLv2;                             // 0x0610(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackCollisionRadius_Lv0;                         // 0x0614(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackCollisionRadius_Lv1;                         // 0x0618(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackCollisionRadius_Lv2;                         // 0x061C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackCollisionRadius_PSLv0;                       // 0x0620(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackCollisionRadius_PSLv1;                       // 0x0624(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AttackCollisionRadius_PSLv2;                       // 0x0628(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBC29Melee(int32 EntryPoint);
	void RestoreDashAttack();
	void SetupDashAttack();
	void MC_Replicate_FixedStats_C29Melee(int32 ChargeLevel, const struct FRotator& OwnerRot);
	void ROS_Replicate_FixedStats_C29Melee(int32 ChargeLevel, const struct FRotator& OwnerRot);
	void Replicate_FixedStats_C29Melee_Local(int32 ChargeLevel, const struct FRotator& OwnerRot);
	void ROS_RestoreFromDashAttack();
	void ROS_SetupDashAttack();
	void RestoreFromDashAttackCharacter();
	void Stop_ChargePowerEffect();
	void Play_ChargePowerEffect(int32 ChargeLevel);
	void Stop_ChargeRushLv2Anim();
	void Stop_ChargeRushLv1Anim();
	void Stop_ChargeRushLv0Anim();
	void Stop_ChargeRushLv2Effect();
	void Play_ChargeRushLv2Effect();
	void Stop_ChargeRushLv1Effect();
	void Play_ChargeRushLv1Effect();
	void Stop_ChargeRushLv2Particle();
	void Stop_ChargeRushLv1Particle();
	void Stop_ChargeRushLv0Effect();
	void Stop_RushEffect();
	void Play_ChargeRushLv0Effect();
	void Play_RushEffect();
	void Stop_ChargeRushLv0Particle();
	void OnCompleted_7DDD297442D7CC4375E0C99BC9C2D689(class FName NotifyName);
	void Replicate_FixedStates();
	void FixChargeState_Local();
	void OnEndState(bool bCancel, bool bRestore);
	void OnChargeLevelChanged(int32 NewChargeLevel);
	void BeginState_Charging_Local();
	void OnBlendOut_7DDD297442D7CC4375E0C99BC9C2D689(class FName NotifyName);
	void OnInterrupted_7DDD297442D7CC4375E0C99BC9C2D689(class FName NotifyName);
	void OnNotifyBegin_7DDD297442D7CC4375E0C99BC9C2D689(class FName NotifyName);
	void OnNotifyEnd_7DDD297442D7CC4375E0C99BC9C2D689(class FName NotifyName);
	void OnCompleted_7DDD297442D7CC4375E0C99B94683D24(class FName NotifyName);
	void OnBlendOut_7DDD297442D7CC4375E0C99B94683D24(class FName NotifyName);
	void OnInterrupted_7DDD297442D7CC4375E0C99B94683D24(class FName NotifyName);
	void OnNotifyBegin_7DDD297442D7CC4375E0C99B94683D24(class FName NotifyName);
	void OnNotifyEnd_7DDD297442D7CC4375E0C99B94683D24(class FName NotifyName);
	void OnCompleted_7DDD297442D7CC4375E0C99B802B82BA(class FName NotifyName);
	void OnBlendOut_7DDD297442D7CC4375E0C99B802B82BA(class FName NotifyName);
	void OnInterrupted_7DDD297442D7CC4375E0C99B802B82BA(class FName NotifyName);
	void OnNotifyBegin_7DDD297442D7CC4375E0C99B802B82BA(class FName NotifyName);
	void OnNotifyEnd_7DDD297442D7CC4375E0C99B802B82BA(class FName NotifyName);
	void OnCompleted_7DDD297442D7CC4375E0C99B3E949723(class FName NotifyName);
	void OnBlendOut_7DDD297442D7CC4375E0C99B3E949723(class FName NotifyName);
	void OnInterrupted_7DDD297442D7CC4375E0C99B3E949723(class FName NotifyName);
	void OnNotifyBegin_7DDD297442D7CC4375E0C99B3E949723(class FName NotifyName);
	void OnNotifyEnd_7DDD297442D7CC4375E0C99B3E949723(class FName NotifyName);
	void SetDamageDestinationActor(class AActor* DestinationActor);
	void GetFixedOwnerRot(bool* IsFixed_0, struct FRotator* OwnerRot);
	void UpdateHitPoint();
	void IsRightRush(bool* IsRightRush_0);
	void GetKnockbackBasePower(class AActor* TargetActor_0, float* BasePower);
	void GetMontageRushLv0(class UAnimMontage** RushLv0Montage);
	void GetMontageChargingLv1(class UAnimMontage** ChargingLv1Montage);
	void GetMontageRushLv1(class UAnimMontage** RushLv1Montage);
	void GetMontageRushLv2(class UAnimMontage** RushLv2Montage);
	void GetPreDashTime(float* PreDashTime);
	void PlaySkillEndAnimation();
	void PlaySkillBeginAnimation();
	void ROS_HitWait(class AActor* HitActor, class UActorComponent* HitComponent, const struct FVector& HitLocation, const struct FVector& HitNormal, float CuttingRate, EPhysicalSurface SurfaceType, bool bDisableDamage, bool bInvincible, int32 SerialNumber_0, bool bIsPenetration, bool bBlockedByAAP, bool bHeadShot, bool bAvoidSkill);
	void OnDash(uint8 RepeatCount_0, bool bRedash);
	void HitWait(class AActor* HitActor, class UActorComponent* HitComponent, const struct FVector& HitLocation, const struct FVector& HitNormal, float CuttingRate, EPhysicalSurface SurfaceType, bool bDisableDamage, bool bInvincible, bool bIsPenetration, bool bBlockedByAAP, bool bHeadShot, bool bAvoidSkill);
	void Update_Dash(float DeltaSeconds);
	void DashToTarget(float Speed, float DeltaSeconds, bool* bReached);
	void TryGetDamageActor(class ABP_AJBDamageActor_C** DamageActor_0);
	void GetPoliticDamage(bool bHeadShot, int32* Damage_0);
	void GetLaunchedActorTarget(class AActor** LauncedActor);
	void DecideTarget(class AActor** TargetActor_0, class UActorComponent** TargetComponent_0, struct FVector* TargetHitLocation_0, struct FVector* TargetLocation_0);
	void GetPoliticAttackRange(float* AttackRange_cm__0);
	void GetPoliticAttackCollisionRadius(float* AttackCollisionRadius_0);
	void OnCancel();
	void GetDuration(float* Duration);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBC29Melee_C">();
	}
	static class UBP_AJBC29Melee_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBC29Melee_C>();
	}
};
static_assert(alignof(UBP_AJBC29Melee_C) == 0x000008, "Wrong alignment on UBP_AJBC29Melee_C");
static_assert(sizeof(UBP_AJBC29Melee_C) == 0x000630, "Wrong size on UBP_AJBC29Melee_C");
static_assert(offsetof(UBP_AJBC29Melee_C, UberGraphFrame_BP_AJBC29Melee_C) == 0x000420, "Member 'UBP_AJBC29Melee_C::UberGraphFrame_BP_AJBC29Melee_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, FixedOwnerRot) == 0x000428, "Member 'UBP_AJBC29Melee_C::FixedOwnerRot' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, FixedFloorResult) == 0x000438, "Member 'UBP_AJBC29Melee_C::FixedFloorResult' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, StopSpeedRate) == 0x0004D0, "Member 'UBP_AJBC29Melee_C::StopSpeedRate' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, DashAttackSpeed) == 0x0004D4, "Member 'UBP_AJBC29Melee_C::DashAttackSpeed' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, RecoveryData_MaxFlySpeed) == 0x0004D8, "Member 'UBP_AJBC29Melee_C::RecoveryData_MaxFlySpeed' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, ChargeRushLv0Particle) == 0x0004E0, "Member 'UBP_AJBC29Melee_C::ChargeRushLv0Particle' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, ChargeRushLv1Particle) == 0x0004E8, "Member 'UBP_AJBC29Melee_C::ChargeRushLv1Particle' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, ChargeRushLv2Particle) == 0x0004F0, "Member 'UBP_AJBC29Melee_C::ChargeRushLv2Particle' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, RushLv0Right) == 0x0004F8, "Member 'UBP_AJBC29Melee_C::RushLv0Right' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, RushLv0Left) == 0x000500, "Member 'UBP_AJBC29Melee_C::RushLv0Left' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, RushLv1) == 0x000508, "Member 'UBP_AJBC29Melee_C::RushLv1' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, RushLv2) == 0x000510, "Member 'UBP_AJBC29Melee_C::RushLv2' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, ChargeLv0) == 0x000518, "Member 'UBP_AJBC29Melee_C::ChargeLv0' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, ChargeLv1) == 0x000520, "Member 'UBP_AJBC29Melee_C::ChargeLv1' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, ChargeLv2) == 0x000528, "Member 'UBP_AJBC29Melee_C::ChargeLv2' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, ResistRatePhase1) == 0x000530, "Member 'UBP_AJBC29Melee_C::ResistRatePhase1' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, ResistRatePhase2) == 0x000534, "Member 'UBP_AJBC29Melee_C::ResistRatePhase2' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, ResistRatePhase3) == 0x000538, "Member 'UBP_AJBC29Melee_C::ResistRatePhase3' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, ResistTime) == 0x00053C, "Member 'UBP_AJBC29Melee_C::ResistTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, LaunchKnockbackConstant) == 0x000540, "Member 'UBP_AJBC29Melee_C::LaunchKnockbackConstant' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, AttackRange_cm__Lv0) == 0x00054C, "Member 'UBP_AJBC29Melee_C::AttackRange_cm__Lv0' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, AttackRange_cm__Lv1) == 0x000550, "Member 'UBP_AJBC29Melee_C::AttackRange_cm__Lv1' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, AttackRange_cm__Lv2) == 0x000554, "Member 'UBP_AJBC29Melee_C::AttackRange_cm__Lv2' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, ResistPassiveTag) == 0x000558, "Member 'UBP_AJBC29Melee_C::ResistPassiveTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, KnockbackIntensity_Lv0) == 0x000560, "Member 'UBP_AJBC29Melee_C::KnockbackIntensity_Lv0' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, KnockbackIntensity_Lv1) == 0x000564, "Member 'UBP_AJBC29Melee_C::KnockbackIntensity_Lv1' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, KnockbackIntensity_Lv2) == 0x000568, "Member 'UBP_AJBC29Melee_C::KnockbackIntensity_Lv2' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, KnockbackIntensity_Lv0ForStand) == 0x00056C, "Member 'UBP_AJBC29Melee_C::KnockbackIntensity_Lv0ForStand' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, KnockbackIntensity_Lv1ForStand) == 0x000570, "Member 'UBP_AJBC29Melee_C::KnockbackIntensity_Lv1ForStand' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, KnockbackIntensity_Lv2ForStand) == 0x000574, "Member 'UBP_AJBC29Melee_C::KnockbackIntensity_Lv2ForStand' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, KnockbackIntensity_HamonLv0) == 0x000578, "Member 'UBP_AJBC29Melee_C::KnockbackIntensity_HamonLv0' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, KnockbackIntensity_HamonLv1) == 0x00057C, "Member 'UBP_AJBC29Melee_C::KnockbackIntensity_HamonLv1' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, KnockbackIntensity_HamonLv2) == 0x000580, "Member 'UBP_AJBC29Melee_C::KnockbackIntensity_HamonLv2' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, KnockbackIntensity_HamonLv0ForStand) == 0x000584, "Member 'UBP_AJBC29Melee_C::KnockbackIntensity_HamonLv0ForStand' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, KnockbackIntensity_HamonLv1ForStand) == 0x000588, "Member 'UBP_AJBC29Melee_C::KnockbackIntensity_HamonLv1ForStand' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, KnockbackIntensity_HamonLv2ForStand) == 0x00058C, "Member 'UBP_AJBC29Melee_C::KnockbackIntensity_HamonLv2ForStand' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, KnockbackIntensity_PSLv0) == 0x000590, "Member 'UBP_AJBC29Melee_C::KnockbackIntensity_PSLv0' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, KnockbackIntensity_PSLv1) == 0x000594, "Member 'UBP_AJBC29Melee_C::KnockbackIntensity_PSLv1' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, KnockbackIntensity_PSLv2) == 0x000598, "Member 'UBP_AJBC29Melee_C::KnockbackIntensity_PSLv2' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, KnockbackIntensity_PSLv0ForStand) == 0x00059C, "Member 'UBP_AJBC29Melee_C::KnockbackIntensity_PSLv0ForStand' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, KnockbackIntensity_PSLv1ForStand) == 0x0005A0, "Member 'UBP_AJBC29Melee_C::KnockbackIntensity_PSLv1ForStand' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, KnockbackIntensity_PSLv2ForStand) == 0x0005A4, "Member 'UBP_AJBC29Melee_C::KnockbackIntensity_PSLv2ForStand' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, RushPSLv0Right) == 0x0005A8, "Member 'UBP_AJBC29Melee_C::RushPSLv0Right' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, RushPSLv0Left) == 0x0005B0, "Member 'UBP_AJBC29Melee_C::RushPSLv0Left' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, PreDashStateTime_PSLv0) == 0x0005B8, "Member 'UBP_AJBC29Melee_C::PreDashStateTime_PSLv0' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, Keep_RepeatCount) == 0x0005BC, "Member 'UBP_AJBC29Melee_C::Keep_RepeatCount' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, Keep_Redash) == 0x0005BD, "Member 'UBP_AJBC29Melee_C::Keep_Redash' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, PreDashStateTime_PSLv1) == 0x0005C0, "Member 'UBP_AJBC29Melee_C::PreDashStateTime_PSLv1' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, PreDashStateTime_PSLv2) == 0x0005C4, "Member 'UBP_AJBC29Melee_C::PreDashStateTime_PSLv2' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, ChargePSLv0) == 0x0005C8, "Member 'UBP_AJBC29Melee_C::ChargePSLv0' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, ChargePSLv1) == 0x0005D0, "Member 'UBP_AJBC29Melee_C::ChargePSLv1' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, ChargePSLv2) == 0x0005D8, "Member 'UBP_AJBC29Melee_C::ChargePSLv2' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, RushPSLv1) == 0x0005E0, "Member 'UBP_AJBC29Melee_C::RushPSLv1' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, RushPSLv2) == 0x0005E8, "Member 'UBP_AJBC29Melee_C::RushPSLv2' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, Damage_Lv0) == 0x0005F0, "Member 'UBP_AJBC29Melee_C::Damage_Lv0' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, Damage_Lv1) == 0x0005F4, "Member 'UBP_AJBC29Melee_C::Damage_Lv1' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, Damage_Lv2) == 0x0005F8, "Member 'UBP_AJBC29Melee_C::Damage_Lv2' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, Damage_PSLv0) == 0x0005FC, "Member 'UBP_AJBC29Melee_C::Damage_PSLv0' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, Damage_PSLv1) == 0x000600, "Member 'UBP_AJBC29Melee_C::Damage_PSLv1' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, Damage_PSLv2) == 0x000604, "Member 'UBP_AJBC29Melee_C::Damage_PSLv2' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, AttackRange_cm__PSLv0) == 0x000608, "Member 'UBP_AJBC29Melee_C::AttackRange_cm__PSLv0' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, AttackRange_cm__PSLv1) == 0x00060C, "Member 'UBP_AJBC29Melee_C::AttackRange_cm__PSLv1' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, AttackRange_cm__PSLv2) == 0x000610, "Member 'UBP_AJBC29Melee_C::AttackRange_cm__PSLv2' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, AttackCollisionRadius_Lv0) == 0x000614, "Member 'UBP_AJBC29Melee_C::AttackCollisionRadius_Lv0' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, AttackCollisionRadius_Lv1) == 0x000618, "Member 'UBP_AJBC29Melee_C::AttackCollisionRadius_Lv1' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, AttackCollisionRadius_Lv2) == 0x00061C, "Member 'UBP_AJBC29Melee_C::AttackCollisionRadius_Lv2' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, AttackCollisionRadius_PSLv0) == 0x000620, "Member 'UBP_AJBC29Melee_C::AttackCollisionRadius_PSLv0' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, AttackCollisionRadius_PSLv1) == 0x000624, "Member 'UBP_AJBC29Melee_C::AttackCollisionRadius_PSLv1' has a wrong offset!");
static_assert(offsetof(UBP_AJBC29Melee_C, AttackCollisionRadius_PSLv2) == 0x000628, "Member 'UBP_AJBC29Melee_C::AttackCollisionRadius_PSLv2' has a wrong offset!");

}

