#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBTheWorldAffecter

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AJB_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBTheWorldAffecter.BP_AJBTheWorldAffecter_C
// 0x0C38 (0x0F60 - 0x0328)
class ABP_AJBTheWorldAffecter_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_1_HueShift_39EF5ECC4406DDD2D15D2EA1A7ADCD40; // 0x0338(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_1_RadialBlurScale_39EF5ECC4406DDD2D15D2EA1A7ADCD40; // 0x033C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_1_SceneChange_39EF5ECC4406DDD2D15D2EA1A7ADCD40; // 0x0340(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_1__Direction_39EF5ECC4406DDD2D15D2EA1A7ADCD40; // 0x0344(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_345[0x3];                                      // 0x0345(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_1;                                        // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_RadialBlurScale_D77A832743FD05D9135205B6216D9688; // 0x0350(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_SceneChange_D77A832743FD05D9135205B6216D9688; // 0x0354(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_DepthFlashAlpha_D77A832743FD05D9135205B6216D9688; // 0x0358(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_SphereRadius_D77A832743FD05D9135205B6216D9688; // 0x035C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_D77A832743FD05D9135205B6216D9688; // 0x0360(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_361[0x7];                                      // 0x0361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StateTime;                                         // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETheWorldState                                Rep_CurrentState_Server_;                          // 0x0374(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_375[0x3];                                      // 0x0375(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterial*                              PPMaterial_TimeStop;                               // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterial*                              PPMaterial_RadialBlur;                             // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReadyTime;                                         // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ClearingTime;                                      // 0x038C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ExpandParticleTag;                                 // 0x0390(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         SkillTime;                                         // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39C[0x4];                                      // 0x039C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameParticleEffect_C*          SmokeParticleEffect;                               // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DMI_TimeStop;                                      // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DMI_RadialBlur;                                    // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ContractParticleTag;                               // 0x03B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SmokeEffectTag;                                    // 0x03C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           BeginTheWorldSETag;                                // 0x03C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EndTheWorldSETag;                                  // 0x03D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ThreshoudAreaRate;                                 // 0x03D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxHeightDiff_cm_;                                 // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E4[0x4];                                      // 0x03E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               PSComponent_Smoke;                                 // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<ETheWorldState>                        StateList_Server_;                                 // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class ABP_AJBInGameCharacter_C*>       Rep_OperatorCharacters_Server_;                    // 0x0400(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	TMap<class ABP_AJBInGameCharacter_C*, float>  ActiveTimeMap_Server_;                             // 0x0410(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<struct FGameplayTag>                   SkillTagList_Server_;                              // 0x0460(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<float>                                 CurrentTimes_Server_;                              // 0x0470(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<bool>                                  bFirstOperatorCharacter_Server_;                   // 0x0480(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<bool>                                  bCompleteNotifyBegin_Server_;                      // 0x0490(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<int32>                                 ReserveRemoveIndexList_Server_;                    // 0x04A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          bDebugDraw;                                        // 0x04B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B1[0x7];                                      // 0x04B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  bEndTheWorldCancel_Server_;                        // 0x04B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          bCompleteNotifyBeginMC_Server_;                    // 0x04C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C9[0x7];                                      // 0x04C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           BeginTheWorldGionTag;                              // 0x04D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TriggeredStandWorldLocation;                       // 0x04D8(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SerialNumberOnBegin;                               // 0x04E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Cahce_AffectCenterForHighlight;                    // 0x04E8(0x0008)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPostProcessSettings                   ExposureSettings;                                  // 0x04F0(0x0520)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FPostProcessSettings                   InitialExposureSettings;                           // 0x0A10(0x0520)(Edit, BlueprintVisible, DisableEditOnInstance)
	class APostProcessVolume*                     EnvironmentPPVolumeActor;                          // 0x0F30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BeginTheWorldSafetyTime;                           // 0x0F38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEndMulticastHasCome;                              // 0x0F3C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bBeginMulticastHasCome;                            // 0x0F3D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsPaused;                                         // 0x0F3E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCompletedSettingExposure;                         // 0x0F3F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ABP_AJBInGameParticleEffect_C*          ExpandParticle;                                    // 0x0F40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TimerHandleEnsureTimeDilation_ExpandParticle;      // 0x0F48(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class ABP_AJBInGameParticleEffect_C*          ContractParticle;                                  // 0x0F50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TimerHandleEnsureTimeDilation_ContractParticle;    // 0x0F58(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)

public:
	void ExecuteUbergraph_BP_AJBTheWorldAffecter(int32 EntryPoint);
	void EnsureTimeDilation_ContractParticle();
	void ForceChangeTimeDilation_ContractParticle();
	void RemoveTimeDilation_ContractParticle();
	void EnsureTimeDilation_ExpandParticle();
	void ForceChangeTimeDilation_ExpandParticle();
	void RemoveTimeDilation_ExpandParticle();
	void OnBeginTheWorld(bool bFirstAccess, class ABP_AJBInGameCharacter_C* OperatorCharacter, const TArray<class AActor*>& AppliedActors, const float ActiveTime, bool bRestore);
	void RestoreState_Active();
	void OnEndTheWorld(bool bExistOtherOperatorCharacter, const TArray<class AActor*>& AppliedActors, const float ActiveTime, class ABP_AJBInGameCharacter_C* OperatorCharacter, bool bSendNotify, bool bRestore);
	void RestoreState_None();
	void MC_NotifyBeginTheWorldForGameHud();
	void BeginTheWorldAffect(class ABP_AJBInGameCharacter_C* OperatorCharacter);
	void ReserveEndTheWorld(class ABP_AJBInGameCharacter_C* OperatorCharacter, bool bCancel);
	void UpdateRemainingTime();
	void EndAllTheWorld();
	void NotifyBeginToWorld(const TArray<class AActor*>& AppliedActors, float ActiveTime, bool bFirstAccess);
	void NotifyEndToWorld(bool bExistOtherOperatorCharacter, const TArray<class AActor*>& AppliedActors, float ActiveTime, class ABP_AJBInGameCharacter_C* OperatorCharacter);
	void MC_EndTheWorld(bool bExistOtherOperatorCharacter, const TArray<class AActor*>& AppliedActors, float ActiveTime, class ABP_AJBInGameCharacter_C* OperatorCharacter, bool bSendNotify);
	void ReceiveBeginPlay();
	void MC_EndState();
	void MC_BeginTheWorld(bool bFirstAccess, class ABP_AJBInGameCharacter_C* OperatorCharacter, const TArray<class AActor*>& AppliedActors, float ActiveTime);
	void MC_ReadyTheWorld(bool bFirstAccess, bool bSliding, class ABP_AJBInGameCharacter_C* OperatorCharacter, const struct FVector& OwnerLocation);
	void EndState();
	void ReceiveTick(float DeltaSeconds);
	void EndTheWorld(class ABP_AJBInGameCharacter_C* OperatorCharacter, bool bCancel);
	void BeginTheWorld(class ABP_AJBInGameCharacter_C* OperatorCharacter);
	void ReadyTheWorld_Server(class ABP_AJBInGameCharacter_C* OperatorCharacter, const struct FGameplayTag& SkillTag, float ActiveTime);
	void ListStateTick_Ready(class ABP_AJBInGameCharacter_C* OperatorCharacter);
	void StateTick_Clearing();
	void ListStateTick_Active(class ABP_AJBInGameCharacter_C* OperatorCharacter);
	void ListStateTick(float DeltaSeconds);
	void StateTick(float DeltaSeconds);
	void PlayClearingTimeline();
	void PlayReadyTimeline();
	void UpdateCenterPos();
	void OnRelatedCharacterBecomeLastSurvivor();
	void Timeline_1__EndEvent__EventFunc();
	void Timeline_1__UpdateFunc();
	void Timeline_1__FinishedFunc();
	void Timeline_0__EndEvent__EventFunc();
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void UserConstructionScript();
	void ChangeState(ETheWorldState NextState);
	void GetAffectCenterPosition(float* PositionX, float* PositionY);
	void CalcScreenLimit(const struct FVector2D& InValue, struct FVector2D* OutValue);
	void GetAppliedActors(TArray<class AActor*>* Actors);
	void CheckExistOperatorCharacter(bool* bExist);
	void ReserveRemoveOperatorCharacter(class ABP_AJBInGameCharacter_C* OperatorCharacter, bool bCancel, float* EffectiveTime);
	void AddOperatorCharacter(class ABP_AJBInGameCharacter_C* OperatorCharacter, const struct FGameplayTag& SkillTag, float ActiveTime);
	void UpdateCurrentTime(float DeltaSeconds);
	void ListChangeStateList(class ABP_AJBInGameCharacter_C* OperatorCharacter, ETheWorldState NextState);
	void GetActiveTime(class ABP_AJBInGameCharacter_C* OperatorCharacter, float* ActiveTime);
	void GetFirstOperatorCharacter(class ABP_AJBInGameCharacter_C* OperatorCharacter, bool* bFirstOperatorCharacter);
	void ExecuteRemoveOperatorCharacter();
	void GetRemainTime(float* RemainTime);
	void NotifyBeginTheWorldForGameHUD();
	void SetFlagCompleteNotifyBegin(class ABP_AJBInGameCharacter_C* OperatorCharacter);
	void CheckEndTheWorld(class ABP_AJBInGameCharacter_C* OperatorCharacter, bool* bCancel);
	void GetSkillTag(const class ABP_AJBInGameCharacter_C*& OperatorCharacter, bool* bIsFound, struct FGameplayTag* SkillTag);
	void GenerateSerialNumber(int32* SerialNumber);
	void SetSettings(struct FPostProcessSettings& ApplyTarget, const struct FPostProcessSettings& ApplySrc);
	void CacheEnvironmentPPVolumeActor();
	void ReserveEndTheWorldFromExternal_Server_(class ABP_AJBInGameCharacter_C* Character);
	void OnRep_Rep_CurrentState_Server_();
	void TryCreateDMI();
	void RestoreEnablePostProcess(bool bEnable);
	void DebugPrintMCNotify(const class FString& MCName, class ABP_AJBInGameCharacter_C* CharacterBP);
	void Pause();
	void ForceChangeTimeDilation(class ABP_AJBInGameParticleEffect_C*& AJBParticle);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBTheWorldAffecter_C">();
	}
	static class ABP_AJBTheWorldAffecter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBTheWorldAffecter_C>();
	}
};
static_assert(alignof(ABP_AJBTheWorldAffecter_C) == 0x000010, "Wrong alignment on ABP_AJBTheWorldAffecter_C");
static_assert(sizeof(ABP_AJBTheWorldAffecter_C) == 0x000F60, "Wrong size on ABP_AJBTheWorldAffecter_C");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, UberGraphFrame) == 0x000328, "Member 'ABP_AJBTheWorldAffecter_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, DefaultSceneRoot) == 0x000330, "Member 'ABP_AJBTheWorldAffecter_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, Timeline_1_HueShift_39EF5ECC4406DDD2D15D2EA1A7ADCD40) == 0x000338, "Member 'ABP_AJBTheWorldAffecter_C::Timeline_1_HueShift_39EF5ECC4406DDD2D15D2EA1A7ADCD40' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, Timeline_1_RadialBlurScale_39EF5ECC4406DDD2D15D2EA1A7ADCD40) == 0x00033C, "Member 'ABP_AJBTheWorldAffecter_C::Timeline_1_RadialBlurScale_39EF5ECC4406DDD2D15D2EA1A7ADCD40' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, Timeline_1_SceneChange_39EF5ECC4406DDD2D15D2EA1A7ADCD40) == 0x000340, "Member 'ABP_AJBTheWorldAffecter_C::Timeline_1_SceneChange_39EF5ECC4406DDD2D15D2EA1A7ADCD40' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, Timeline_1__Direction_39EF5ECC4406DDD2D15D2EA1A7ADCD40) == 0x000344, "Member 'ABP_AJBTheWorldAffecter_C::Timeline_1__Direction_39EF5ECC4406DDD2D15D2EA1A7ADCD40' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, Timeline_1) == 0x000348, "Member 'ABP_AJBTheWorldAffecter_C::Timeline_1' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, Timeline_0_RadialBlurScale_D77A832743FD05D9135205B6216D9688) == 0x000350, "Member 'ABP_AJBTheWorldAffecter_C::Timeline_0_RadialBlurScale_D77A832743FD05D9135205B6216D9688' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, Timeline_0_SceneChange_D77A832743FD05D9135205B6216D9688) == 0x000354, "Member 'ABP_AJBTheWorldAffecter_C::Timeline_0_SceneChange_D77A832743FD05D9135205B6216D9688' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, Timeline_0_DepthFlashAlpha_D77A832743FD05D9135205B6216D9688) == 0x000358, "Member 'ABP_AJBTheWorldAffecter_C::Timeline_0_DepthFlashAlpha_D77A832743FD05D9135205B6216D9688' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, Timeline_0_SphereRadius_D77A832743FD05D9135205B6216D9688) == 0x00035C, "Member 'ABP_AJBTheWorldAffecter_C::Timeline_0_SphereRadius_D77A832743FD05D9135205B6216D9688' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, Timeline_0__Direction_D77A832743FD05D9135205B6216D9688) == 0x000360, "Member 'ABP_AJBTheWorldAffecter_C::Timeline_0__Direction_D77A832743FD05D9135205B6216D9688' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, Timeline_0) == 0x000368, "Member 'ABP_AJBTheWorldAffecter_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, StateTime) == 0x000370, "Member 'ABP_AJBTheWorldAffecter_C::StateTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, Rep_CurrentState_Server_) == 0x000374, "Member 'ABP_AJBTheWorldAffecter_C::Rep_CurrentState_Server_' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, PPMaterial_TimeStop) == 0x000378, "Member 'ABP_AJBTheWorldAffecter_C::PPMaterial_TimeStop' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, PPMaterial_RadialBlur) == 0x000380, "Member 'ABP_AJBTheWorldAffecter_C::PPMaterial_RadialBlur' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, ReadyTime) == 0x000388, "Member 'ABP_AJBTheWorldAffecter_C::ReadyTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, ClearingTime) == 0x00038C, "Member 'ABP_AJBTheWorldAffecter_C::ClearingTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, ExpandParticleTag) == 0x000390, "Member 'ABP_AJBTheWorldAffecter_C::ExpandParticleTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, SkillTime) == 0x000398, "Member 'ABP_AJBTheWorldAffecter_C::SkillTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, SmokeParticleEffect) == 0x0003A0, "Member 'ABP_AJBTheWorldAffecter_C::SmokeParticleEffect' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, DMI_TimeStop) == 0x0003A8, "Member 'ABP_AJBTheWorldAffecter_C::DMI_TimeStop' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, DMI_RadialBlur) == 0x0003B0, "Member 'ABP_AJBTheWorldAffecter_C::DMI_RadialBlur' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, ContractParticleTag) == 0x0003B8, "Member 'ABP_AJBTheWorldAffecter_C::ContractParticleTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, SmokeEffectTag) == 0x0003C0, "Member 'ABP_AJBTheWorldAffecter_C::SmokeEffectTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, BeginTheWorldSETag) == 0x0003C8, "Member 'ABP_AJBTheWorldAffecter_C::BeginTheWorldSETag' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, EndTheWorldSETag) == 0x0003D0, "Member 'ABP_AJBTheWorldAffecter_C::EndTheWorldSETag' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, ThreshoudAreaRate) == 0x0003D8, "Member 'ABP_AJBTheWorldAffecter_C::ThreshoudAreaRate' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, MaxHeightDiff_cm_) == 0x0003E0, "Member 'ABP_AJBTheWorldAffecter_C::MaxHeightDiff_cm_' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, PSComponent_Smoke) == 0x0003E8, "Member 'ABP_AJBTheWorldAffecter_C::PSComponent_Smoke' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, StateList_Server_) == 0x0003F0, "Member 'ABP_AJBTheWorldAffecter_C::StateList_Server_' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, Rep_OperatorCharacters_Server_) == 0x000400, "Member 'ABP_AJBTheWorldAffecter_C::Rep_OperatorCharacters_Server_' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, ActiveTimeMap_Server_) == 0x000410, "Member 'ABP_AJBTheWorldAffecter_C::ActiveTimeMap_Server_' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, SkillTagList_Server_) == 0x000460, "Member 'ABP_AJBTheWorldAffecter_C::SkillTagList_Server_' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, CurrentTimes_Server_) == 0x000470, "Member 'ABP_AJBTheWorldAffecter_C::CurrentTimes_Server_' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, bFirstOperatorCharacter_Server_) == 0x000480, "Member 'ABP_AJBTheWorldAffecter_C::bFirstOperatorCharacter_Server_' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, bCompleteNotifyBegin_Server_) == 0x000490, "Member 'ABP_AJBTheWorldAffecter_C::bCompleteNotifyBegin_Server_' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, ReserveRemoveIndexList_Server_) == 0x0004A0, "Member 'ABP_AJBTheWorldAffecter_C::ReserveRemoveIndexList_Server_' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, bDebugDraw) == 0x0004B0, "Member 'ABP_AJBTheWorldAffecter_C::bDebugDraw' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, bEndTheWorldCancel_Server_) == 0x0004B8, "Member 'ABP_AJBTheWorldAffecter_C::bEndTheWorldCancel_Server_' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, bCompleteNotifyBeginMC_Server_) == 0x0004C8, "Member 'ABP_AJBTheWorldAffecter_C::bCompleteNotifyBeginMC_Server_' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, BeginTheWorldGionTag) == 0x0004D0, "Member 'ABP_AJBTheWorldAffecter_C::BeginTheWorldGionTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, TriggeredStandWorldLocation) == 0x0004D8, "Member 'ABP_AJBTheWorldAffecter_C::TriggeredStandWorldLocation' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, SerialNumberOnBegin) == 0x0004E4, "Member 'ABP_AJBTheWorldAffecter_C::SerialNumberOnBegin' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, Cahce_AffectCenterForHighlight) == 0x0004E8, "Member 'ABP_AJBTheWorldAffecter_C::Cahce_AffectCenterForHighlight' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, ExposureSettings) == 0x0004F0, "Member 'ABP_AJBTheWorldAffecter_C::ExposureSettings' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, InitialExposureSettings) == 0x000A10, "Member 'ABP_AJBTheWorldAffecter_C::InitialExposureSettings' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, EnvironmentPPVolumeActor) == 0x000F30, "Member 'ABP_AJBTheWorldAffecter_C::EnvironmentPPVolumeActor' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, BeginTheWorldSafetyTime) == 0x000F38, "Member 'ABP_AJBTheWorldAffecter_C::BeginTheWorldSafetyTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, bEndMulticastHasCome) == 0x000F3C, "Member 'ABP_AJBTheWorldAffecter_C::bEndMulticastHasCome' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, bBeginMulticastHasCome) == 0x000F3D, "Member 'ABP_AJBTheWorldAffecter_C::bBeginMulticastHasCome' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, bIsPaused) == 0x000F3E, "Member 'ABP_AJBTheWorldAffecter_C::bIsPaused' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, bCompletedSettingExposure) == 0x000F3F, "Member 'ABP_AJBTheWorldAffecter_C::bCompletedSettingExposure' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, ExpandParticle) == 0x000F40, "Member 'ABP_AJBTheWorldAffecter_C::ExpandParticle' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, TimerHandleEnsureTimeDilation_ExpandParticle) == 0x000F48, "Member 'ABP_AJBTheWorldAffecter_C::TimerHandleEnsureTimeDilation_ExpandParticle' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, ContractParticle) == 0x000F50, "Member 'ABP_AJBTheWorldAffecter_C::ContractParticle' has a wrong offset!");
static_assert(offsetof(ABP_AJBTheWorldAffecter_C, TimerHandleEnsureTimeDilation_ContractParticle) == 0x000F58, "Member 'ABP_AJBTheWorldAffecter_C::TimerHandleEnsureTimeDilation_ContractParticle' has a wrong offset!");

}

