#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBHistoryManageComponent

#include "Basic.hpp"

#include "AJB_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.ExecuteUbergraph_BP_AJBHistoryManageComponent
// 0x01D8 (0x01D8 - 0x0000)
struct BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue1;           // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacter*                    K2Node_Event_Operator;                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Time;                                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGeneralTiming                                K2Node_Event_Timing;                               // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bEnable;                              // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bOperatorIsEmpty;                     // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_37[0x1];                                       // 0x0037(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character1;     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue2;                    // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character2;     // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x006C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_CustomEvent_TargetCharacterBP;              // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              K2Node_CustomEvent_AccessedHistoryDateTime;        // 0x0080(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ABP_AJBHistoryActorBase_C*              CallFunc_Array_Get_Item;                           // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_UpdateLeftTime_RemoveIndexes;             // 0x00B0(0x0010)(ZeroConstructor, ReferenceParm)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x00C0(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x00D8(0x0008)(NoDestructor)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckIgnoreDistanceLimit_bLimit;          // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBBattleGameState_C*               K2Node_DynamicCast_AsBP_AJBBattle_Game_State;      // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess3;                      // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable1;                    // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_GetBattleStartGameTime_ReturnValue;       // 0x0108(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item1;                          // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              CallFunc_Subtract_DateTimeDateTime_ReturnValue;    // 0x0118(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTotalSeconds_ReturnValue;              // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CallFunc_Now_ReturnValue;                          // 0x0128(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FTimespan                              CallFunc_Subtract_DateTimeDateTime_ReturnValue1;   // 0x0130(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldAllRemoveTarget_bShouldRemove;      // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetTotalSeconds_ReturnValue1;             // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetViewTargetActor_ViewTargetActor;       // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable1;                   // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryGetPropertyOwnerCharacterFromActor_bSucceed; // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14D[0x3];                                      // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_TryGetPropertyOwnerCharacterFromActor_OutActor; // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue1;             // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x015D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsServer_ReturnValue1;                    // 0x015E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15F[0x1];                                      // 0x015F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0160(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsServer_ReturnValue2;                    // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue1;          // 0x0178(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue1;               // 0x0188(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetViewTargetActor_ViewTargetActor1;      // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue2;               // 0x01A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryGetPropertyOwnerCharacterFromActor_bSucceed1; // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B1[0x7];                                      // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_TryGetPropertyOwnerCharacterFromActor_OutActor1; // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue3;               // 0x01C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue1;     // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent) == 0x000008, "Wrong alignment on BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent");
static_assert(sizeof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent) == 0x0001D8, "Wrong size on BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, EntryPoint) == 0x000000, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_IsDedicatedServer_ReturnValue) == 0x000004, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000010, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_IsDedicatedServer_ReturnValue1) == 0x000019, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_IsDedicatedServer_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, K2Node_Event_Operator) == 0x000028, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::K2Node_Event_Operator' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, K2Node_Event_Time) == 0x000030, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::K2Node_Event_Time' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, K2Node_Event_Timing) == 0x000034, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::K2Node_Event_Timing' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, K2Node_Event_bEnable) == 0x000035, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::K2Node_Event_bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, K2Node_Event_bOperatorIsEmpty) == 0x000036, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::K2Node_Event_bOperatorIsEmpty' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_GetOwner_ReturnValue1) == 0x000040, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, K2Node_DynamicCast_AsBP_AJBIn_Game_Character1) == 0x000048, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::K2Node_DynamicCast_AsBP_AJBIn_Game_Character1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, K2Node_DynamicCast_bSuccess1) == 0x000050, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_GetOwner_ReturnValue2) == 0x000058, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_GetOwner_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, K2Node_DynamicCast_AsBP_AJBIn_Game_Character2) == 0x000060, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::K2Node_DynamicCast_AsBP_AJBIn_Game_Character2' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, K2Node_DynamicCast_bSuccess2) == 0x000068, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00006C, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, K2Node_CustomEvent_TargetCharacterBP) == 0x000078, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::K2Node_CustomEvent_TargetCharacterBP' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, K2Node_CustomEvent_AccessedHistoryDateTime) == 0x000080, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::K2Node_CustomEvent_AccessedHistoryDateTime' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_IsServer_ReturnValue) == 0x000088, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_IsServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, Temp_int_Array_Index_Variable) == 0x00008C, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_Concat_StrStr_ReturnValue) == 0x000090, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_Array_Get_Item) == 0x0000A0, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, K2Node_Event_DeltaSeconds) == 0x0000A8, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_UpdateLeftTime_RemoveIndexes) == 0x0000B0, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_UpdateLeftTime_RemoveIndexes' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, K2Node_CreateDelegate_OutputDelegate) == 0x0000C0, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_Array_Length_ReturnValue1) == 0x0000D0, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x0000D8, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_Subtract_IntInt_ReturnValue) == 0x0000E0, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_Max_ReturnValue) == 0x0000E4, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_CheckIgnoreDistanceLimit_bLimit) == 0x0000E8, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_CheckIgnoreDistanceLimit_bLimit' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_GetGameState_ReturnValue) == 0x0000F0, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, K2Node_DynamicCast_AsBP_AJBBattle_Game_State) == 0x0000F8, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::K2Node_DynamicCast_AsBP_AJBBattle_Game_State' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, K2Node_DynamicCast_bSuccess3) == 0x000100, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::K2Node_DynamicCast_bSuccess3' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, Temp_int_Array_Index_Variable1) == 0x000104, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::Temp_int_Array_Index_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_GetBattleStartGameTime_ReturnValue) == 0x000108, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_GetBattleStartGameTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_Array_Get_Item1) == 0x000110, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_Subtract_DateTimeDateTime_ReturnValue) == 0x000118, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_Subtract_DateTimeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_GetTotalSeconds_ReturnValue) == 0x000120, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_GetTotalSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_Now_ReturnValue) == 0x000128, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_Now_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_Subtract_DateTimeDateTime_ReturnValue1) == 0x000130, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_Subtract_DateTimeDateTime_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_ShouldAllRemoveTarget_bShouldRemove) == 0x000138, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_ShouldAllRemoveTarget_bShouldRemove' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_GetTotalSeconds_ReturnValue1) == 0x00013C, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_GetTotalSeconds_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_GetViewTargetActor_ViewTargetActor) == 0x000140, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_GetViewTargetActor_ViewTargetActor' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, Temp_int_Loop_Counter_Variable1) == 0x000148, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::Temp_int_Loop_Counter_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_TryGetPropertyOwnerCharacterFromActor_bSucceed) == 0x00014C, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_TryGetPropertyOwnerCharacterFromActor_bSucceed' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_TryGetPropertyOwnerCharacterFromActor_OutActor) == 0x000150, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_TryGetPropertyOwnerCharacterFromActor_OutActor' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_Subtract_IntInt_ReturnValue1) == 0x000158, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_Subtract_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x00015C, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00015D, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_IsServer_ReturnValue1) == 0x00015E, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_IsServer_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_Conv_FloatToString_ReturnValue) == 0x000160, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_IsServer_ReturnValue2) == 0x000170, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_IsServer_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_Conv_FloatToString_ReturnValue1) == 0x000178, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_Conv_FloatToString_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_Concat_StrStr_ReturnValue1) == 0x000188, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_Concat_StrStr_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_GetViewTargetActor_ViewTargetActor1) == 0x000198, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_GetViewTargetActor_ViewTargetActor1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_Concat_StrStr_ReturnValue2) == 0x0001A0, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_Concat_StrStr_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_TryGetPropertyOwnerCharacterFromActor_bSucceed1) == 0x0001B0, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_TryGetPropertyOwnerCharacterFromActor_bSucceed1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_TryGetPropertyOwnerCharacterFromActor_OutActor1) == 0x0001B8, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_TryGetPropertyOwnerCharacterFromActor_OutActor1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_Concat_StrStr_ReturnValue3) == 0x0001C0, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_Concat_StrStr_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_EqualEqual_ObjectObject_ReturnValue1) == 0x0001D0, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_EqualEqual_ObjectObject_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent, CallFunc_Not_PreBool_ReturnValue) == 0x0001D1, "Member 'BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBHistoryManageComponent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBHistoryManageComponent_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_AJBHistoryManageComponent_C_ReceiveTick");
static_assert(sizeof(BP_AJBHistoryManageComponent_C_ReceiveTick) == 0x000004, "Wrong size on BP_AJBHistoryManageComponent_C_ReceiveTick");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_AJBHistoryManageComponent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.AddIgnoreDistanceTargetServer
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBHistoryManageComponent_C_AddIgnoreDistanceTargetServer final
{
public:
	class ABP_AJBInGameCharacter_C*               TargetCharacterBP;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              AccessedHistoryDateTime;                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBHistoryManageComponent_C_AddIgnoreDistanceTargetServer) == 0x000008, "Wrong alignment on BP_AJBHistoryManageComponent_C_AddIgnoreDistanceTargetServer");
static_assert(sizeof(BP_AJBHistoryManageComponent_C_AddIgnoreDistanceTargetServer) == 0x000010, "Wrong size on BP_AJBHistoryManageComponent_C_AddIgnoreDistanceTargetServer");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_AddIgnoreDistanceTargetServer, TargetCharacterBP) == 0x000000, "Member 'BP_AJBHistoryManageComponent_C_AddIgnoreDistanceTargetServer::TargetCharacterBP' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_AddIgnoreDistanceTargetServer, AccessedHistoryDateTime) == 0x000008, "Member 'BP_AJBHistoryManageComponent_C_AddIgnoreDistanceTargetServer::AccessedHistoryDateTime' has a wrong offset!");

// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.NotifyTheWorld
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBHistoryManageComponent_C_NotifyTheWorld final
{
public:
	class AAJBInGameCharacter*                    Operator;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGeneralTiming                                Timing;                                            // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnable;                                           // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bOperatorIsEmpty;                                  // 0x000E(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBHistoryManageComponent_C_NotifyTheWorld) == 0x000008, "Wrong alignment on BP_AJBHistoryManageComponent_C_NotifyTheWorld");
static_assert(sizeof(BP_AJBHistoryManageComponent_C_NotifyTheWorld) == 0x000010, "Wrong size on BP_AJBHistoryManageComponent_C_NotifyTheWorld");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_NotifyTheWorld, Operator) == 0x000000, "Member 'BP_AJBHistoryManageComponent_C_NotifyTheWorld::Operator' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_NotifyTheWorld, Time) == 0x000008, "Member 'BP_AJBHistoryManageComponent_C_NotifyTheWorld::Time' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_NotifyTheWorld, Timing) == 0x00000C, "Member 'BP_AJBHistoryManageComponent_C_NotifyTheWorld::Timing' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_NotifyTheWorld, bEnable) == 0x00000D, "Member 'BP_AJBHistoryManageComponent_C_NotifyTheWorld::bEnable' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_NotifyTheWorld, bOperatorIsEmpty) == 0x00000E, "Member 'BP_AJBHistoryManageComponent_C_NotifyTheWorld::bOperatorIsEmpty' has a wrong offset!");

// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.GetHistoryAfterOnlyExists
// 0x0140 (0x0140 - 0x0000)
struct BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists final
{
public:
	TArray<struct FAJBHistoryInfo>                Before;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	TArray<struct FAJBHistoryInfo>                After;                                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	TArray<struct FAJBHistoryInfo>                Result;                                            // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor)
	bool                                          bTempBreak;                                        // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAJBHistoryInfo>                TempResult;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable1;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable1;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAJBHistoryInfo                        CallFunc_Array_Get_Item;                           // 0x0068(0x0060)()
	struct FAJBHistoryInfo                        CallFunc_Array_Get_Item1;                          // 0x00C8(0x0060)()
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_132[0x2];                                      // 0x0132(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue1;                 // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists) == 0x000008, "Wrong alignment on BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists");
static_assert(sizeof(BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists) == 0x000140, "Wrong size on BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists, Before) == 0x000000, "Member 'BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists::Before' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists, After) == 0x000010, "Member 'BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists::After' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists, Result) == 0x000020, "Member 'BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists::Result' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists, bTempBreak) == 0x000030, "Member 'BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists::bTempBreak' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists, TempResult) == 0x000038, "Member 'BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists::TempResult' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists, Temp_int_Loop_Counter_Variable) == 0x000048, "Member 'BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists, Temp_int_Array_Index_Variable) == 0x000050, "Member 'BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists, Temp_bool_True_if_break_was_hit_Variable) == 0x000054, "Member 'BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists, CallFunc_Not_PreBool_ReturnValue) == 0x000055, "Member 'BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists, Temp_int_Array_Index_Variable1) == 0x000058, "Member 'BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists::Temp_int_Array_Index_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists, Temp_int_Loop_Counter_Variable1) == 0x00005C, "Member 'BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists::Temp_int_Loop_Counter_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists, CallFunc_Add_IntInt_ReturnValue1) == 0x000060, "Member 'BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists, CallFunc_Array_Get_Item) == 0x000068, "Member 'BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists, CallFunc_Array_Get_Item1) == 0x0000C8, "Member 'BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists, CallFunc_Array_AddUnique_ReturnValue) == 0x000128, "Member 'BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists, CallFunc_Array_Length_ReturnValue) == 0x00012C, "Member 'BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000130, "Member 'BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists, CallFunc_Less_IntInt_ReturnValue) == 0x000131, "Member 'BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists, CallFunc_Array_Length_ReturnValue1) == 0x000134, "Member 'BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists, CallFunc_Less_IntInt_ReturnValue1) == 0x000138, "Member 'BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists::CallFunc_Less_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists, CallFunc_BooleanAND_ReturnValue) == 0x000139, "Member 'BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.UpdateHistoryInfo
// 0x0028 (0x0028 - 0x0000)
struct BP_AJBHistoryManageComponent_C_UpdateHistoryInfo final
{
public:
	TArray<struct FAJBHistoryInfo>                CallFunc_CollectHistoryInfoList_HistoryInfoList;   // 0x0000(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBHistoryManageComponent_C_UpdateHistoryInfo) == 0x000008, "Wrong alignment on BP_AJBHistoryManageComponent_C_UpdateHistoryInfo");
static_assert(sizeof(BP_AJBHistoryManageComponent_C_UpdateHistoryInfo) == 0x000028, "Wrong size on BP_AJBHistoryManageComponent_C_UpdateHistoryInfo");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryInfo, CallFunc_CollectHistoryInfoList_HistoryInfoList) == 0x000000, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryInfo::CallFunc_CollectHistoryInfoList_HistoryInfoList' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryInfo, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryInfo::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryInfo, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryInfo::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryInfo, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryInfo::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryInfo, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryInfo::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryInfo, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryInfo::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.UpdateHistoryActors
// 0x0270 (0x0270 - 0x0000)
struct BP_AJBHistoryManageComponent_C_UpdateHistoryActors final
{
public:
	TArray<int32>                                 TempDeleteList;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable1;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable1;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable2;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue2;                  // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable2;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable3;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable3;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_SortInt32Array_OutArray;                  // 0x0058(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue1;             // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBHistoryActorBase_C*              CallFunc_Array_Get_Item1;                          // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FAJBHistoryInfo>                CallFunc_GetHistoryAfterOnlyExists_Result;         // 0x0098(0x0010)(ZeroConstructor, ReferenceParm)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FAJBHistoryInfo                        CallFunc_Array_Get_Item2;                          // 0x00B8(0x0060)()
	int32                                         CallFunc_Array_Length_ReturnValue2;                // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue1;                 // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue1;            // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue1;               // 0x0130(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue2;               // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue3;               // 0x0158(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue4;               // 0x0168(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<struct FAJBHistoryInfo>                CallFunc_GetHistoryAfterOnlyExists_Result1;        // 0x0178(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue3;                // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAJBHistoryInfo                        CallFunc_Array_Get_Item3;                          // 0x0190(0x0060)()
	bool                                          CallFunc_Less_IntInt_ReturnValue2;                 // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F1[0x3];                                      // 0x01F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldSpawn_bShouldSpawn;                 // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_201[0x3];                                      // 0x0201(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_ShouldSpawn_NewLocation;                  // 0x0204(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0210(0x000C)(IsPlainOldData, NoDestructor)
	uint8                                         Pad_21C[0x4];                                      // 0x021C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0220(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBHistoryActorBase_C*              CallFunc_FinishSpawningActor_ReturnValue;          // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1;                   // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors) == 0x000010, "Wrong alignment on BP_AJBHistoryManageComponent_C_UpdateHistoryActors");
static_assert(sizeof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors) == 0x000270, "Wrong size on BP_AJBHistoryManageComponent_C_UpdateHistoryActors");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, TempDeleteList) == 0x000000, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::TempDeleteList' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, Temp_int_Loop_Counter_Variable1) == 0x000014, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::Temp_int_Loop_Counter_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_Add_IntInt_ReturnValue1) == 0x00001C, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, Temp_int_Array_Index_Variable) == 0x000020, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, Temp_int_Array_Index_Variable1) == 0x000024, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::Temp_int_Array_Index_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, Temp_int_Loop_Counter_Variable2) == 0x000028, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::Temp_int_Loop_Counter_Variable2' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_Add_IntInt_ReturnValue2) == 0x00002C, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_Add_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, Temp_int_Array_Index_Variable2) == 0x000030, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::Temp_int_Array_Index_Variable2' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, Temp_int_Array_Index_Variable3) == 0x000034, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::Temp_int_Array_Index_Variable3' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_Conv_IntToString_ReturnValue) == 0x000038, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, Temp_int_Loop_Counter_Variable3) == 0x000048, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::Temp_int_Loop_Counter_Variable3' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_Subtract_IntInt_ReturnValue) == 0x00004C, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000050, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_SortInt32Array_OutArray) == 0x000058, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_SortInt32Array_OutArray' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_Array_Add_ReturnValue) == 0x000068, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_Array_Get_Item) == 0x00006C, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_Array_Length_ReturnValue) == 0x000070, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_Subtract_IntInt_ReturnValue1) == 0x000074, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_Subtract_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_Max_ReturnValue) == 0x000078, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_Array_Get_Item1) == 0x000080, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_Array_Length_ReturnValue1) == 0x000088, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_Less_IntInt_ReturnValue) == 0x00008C, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_GetOwner_ReturnValue) == 0x000090, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_GetHistoryAfterOnlyExists_Result) == 0x000098, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_GetHistoryAfterOnlyExists_Result' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_Concat_StrStr_ReturnValue) == 0x0000A8, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_Array_Get_Item2) == 0x0000B8, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_Array_Get_Item2' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_Array_Length_ReturnValue2) == 0x000118, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_Array_Length_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_Less_IntInt_ReturnValue1) == 0x00011C, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_Less_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_Conv_IntToString_ReturnValue1) == 0x000120, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_Conv_IntToString_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_Concat_StrStr_ReturnValue1) == 0x000130, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_Concat_StrStr_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000140, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_Concat_StrStr_ReturnValue2) == 0x000148, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_Concat_StrStr_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_Concat_StrStr_ReturnValue3) == 0x000158, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_Concat_StrStr_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_Concat_StrStr_ReturnValue4) == 0x000168, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_Concat_StrStr_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_GetHistoryAfterOnlyExists_Result1) == 0x000178, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_GetHistoryAfterOnlyExists_Result1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_Array_Length_ReturnValue3) == 0x000188, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_Array_Length_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_Array_Get_Item3) == 0x000190, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_Array_Get_Item3' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_Less_IntInt_ReturnValue2) == 0x0001F0, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_Less_IntInt_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_BreakRotator_Roll) == 0x0001F4, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_BreakRotator_Pitch) == 0x0001F8, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_BreakRotator_Yaw) == 0x0001FC, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_ShouldSpawn_bShouldSpawn) == 0x000200, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_ShouldSpawn_bShouldSpawn' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_ShouldSpawn_NewLocation) == 0x000204, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_ShouldSpawn_NewLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_MakeRotator_ReturnValue) == 0x000210, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_MakeTransform_ReturnValue) == 0x000220, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000250, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_FinishSpawningActor_ReturnValue) == 0x000258, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryActors, CallFunc_Array_Add_ReturnValue1) == 0x000260, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryActors::CallFunc_Array_Add_ReturnValue1' has a wrong offset!");

// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.GetPoliticDistance
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBHistoryManageComponent_C_GetPoliticDistance final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBHistoryManageComponent_C_GetPoliticDistance) == 0x000004, "Wrong alignment on BP_AJBHistoryManageComponent_C_GetPoliticDistance");
static_assert(sizeof(BP_AJBHistoryManageComponent_C_GetPoliticDistance) == 0x000010, "Wrong size on BP_AJBHistoryManageComponent_C_GetPoliticDistance");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetPoliticDistance, Distance) == 0x000000, "Member 'BP_AJBHistoryManageComponent_C_GetPoliticDistance::Distance' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetPoliticDistance, Temp_bool_Variable) == 0x000004, "Member 'BP_AJBHistoryManageComponent_C_GetPoliticDistance::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetPoliticDistance, Temp_float_Variable) == 0x000008, "Member 'BP_AJBHistoryManageComponent_C_GetPoliticDistance::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetPoliticDistance, K2Node_Select_Default) == 0x00000C, "Member 'BP_AJBHistoryManageComponent_C_GetPoliticDistance::K2Node_Select_Default' has a wrong offset!");

// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.CollectHistoryInfoList
// 0x0148 (0x0148 - 0x0000)
struct BP_AJBHistoryManageComponent_C_CollectHistoryInfoList final
{
public:
	TArray<struct FAJBHistoryInfo>                HistoryInfoList;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<int32>                                 TempIgnorePlayerIDList;                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	struct FAJBHistoryInfo                        TempNewlyHistoryInfo;                              // 0x0020(0x0060)(Edit, BlueprintVisible)
	struct FVector                                CallFunc_GetPoliticOwnerLocation_Location;         // 0x0080(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAJBHistoryInfo                        CallFunc_Array_Get_Item;                           // 0x0090(0x0060)()
	TArray<int32>                                 CallFunc_MakeIgnoreDistancePlayerIDList_List;      // 0x00F0(0x0010)(ZeroConstructor, ReferenceParm)
	float                                         CallFunc_GetPoliticDistance_Distance;              // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_MakeIgnorePlayerIDList_IgnorePlayerIDList; // 0x0108(0x0010)(ZeroConstructor, ReferenceParm)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBBattleGameState_C*               K2Node_DynamicCast_AsBP_AJBBattle_Game_State;      // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAJBHistoryInfo>                CallFunc_GetHistory_HistoryInfoList;               // 0x0138(0x0010)(ZeroConstructor, ReferenceParm)
};
static_assert(alignof(BP_AJBHistoryManageComponent_C_CollectHistoryInfoList) == 0x000008, "Wrong alignment on BP_AJBHistoryManageComponent_C_CollectHistoryInfoList");
static_assert(sizeof(BP_AJBHistoryManageComponent_C_CollectHistoryInfoList) == 0x000148, "Wrong size on BP_AJBHistoryManageComponent_C_CollectHistoryInfoList");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_CollectHistoryInfoList, HistoryInfoList) == 0x000000, "Member 'BP_AJBHistoryManageComponent_C_CollectHistoryInfoList::HistoryInfoList' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_CollectHistoryInfoList, TempIgnorePlayerIDList) == 0x000010, "Member 'BP_AJBHistoryManageComponent_C_CollectHistoryInfoList::TempIgnorePlayerIDList' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_CollectHistoryInfoList, TempNewlyHistoryInfo) == 0x000020, "Member 'BP_AJBHistoryManageComponent_C_CollectHistoryInfoList::TempNewlyHistoryInfo' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_CollectHistoryInfoList, CallFunc_GetPoliticOwnerLocation_Location) == 0x000080, "Member 'BP_AJBHistoryManageComponent_C_CollectHistoryInfoList::CallFunc_GetPoliticOwnerLocation_Location' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_CollectHistoryInfoList, CallFunc_Array_Get_Item) == 0x000090, "Member 'BP_AJBHistoryManageComponent_C_CollectHistoryInfoList::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_CollectHistoryInfoList, CallFunc_MakeIgnoreDistancePlayerIDList_List) == 0x0000F0, "Member 'BP_AJBHistoryManageComponent_C_CollectHistoryInfoList::CallFunc_MakeIgnoreDistancePlayerIDList_List' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_CollectHistoryInfoList, CallFunc_GetPoliticDistance_Distance) == 0x000100, "Member 'BP_AJBHistoryManageComponent_C_CollectHistoryInfoList::CallFunc_GetPoliticDistance_Distance' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_CollectHistoryInfoList, CallFunc_MakeIgnorePlayerIDList_IgnorePlayerIDList) == 0x000108, "Member 'BP_AJBHistoryManageComponent_C_CollectHistoryInfoList::CallFunc_MakeIgnorePlayerIDList_IgnorePlayerIDList' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_CollectHistoryInfoList, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000118, "Member 'BP_AJBHistoryManageComponent_C_CollectHistoryInfoList::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_CollectHistoryInfoList, CallFunc_GetGameState_ReturnValue) == 0x000120, "Member 'BP_AJBHistoryManageComponent_C_CollectHistoryInfoList::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_CollectHistoryInfoList, K2Node_DynamicCast_AsBP_AJBBattle_Game_State) == 0x000128, "Member 'BP_AJBHistoryManageComponent_C_CollectHistoryInfoList::K2Node_DynamicCast_AsBP_AJBBattle_Game_State' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_CollectHistoryInfoList, K2Node_DynamicCast_bSuccess) == 0x000130, "Member 'BP_AJBHistoryManageComponent_C_CollectHistoryInfoList::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_CollectHistoryInfoList, CallFunc_GetHistory_HistoryInfoList) == 0x000138, "Member 'BP_AJBHistoryManageComponent_C_CollectHistoryInfoList::CallFunc_GetHistory_HistoryInfoList' has a wrong offset!");

// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.MakeIgnoreDistancePlayerIDList
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBHistoryManageComponent_C_MakeIgnoreDistancePlayerIDList final
{
public:
	TArray<int32>                                 List;                                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor)
};
static_assert(alignof(BP_AJBHistoryManageComponent_C_MakeIgnoreDistancePlayerIDList) == 0x000008, "Wrong alignment on BP_AJBHistoryManageComponent_C_MakeIgnoreDistancePlayerIDList");
static_assert(sizeof(BP_AJBHistoryManageComponent_C_MakeIgnoreDistancePlayerIDList) == 0x000010, "Wrong size on BP_AJBHistoryManageComponent_C_MakeIgnoreDistancePlayerIDList");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_MakeIgnoreDistancePlayerIDList, List) == 0x000000, "Member 'BP_AJBHistoryManageComponent_C_MakeIgnoreDistancePlayerIDList::List' has a wrong offset!");

// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.UpdateHistoryPerPlayerID
// 0x0030 (0x0030 - 0x0000)
struct BP_AJBHistoryManageComponent_C_UpdateHistoryPerPlayerID final
{
public:
	TArray<int32>                                 PlayerIDList;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBHistoryActorBase_C*              CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBHistoryManageComponent_C_UpdateHistoryPerPlayerID) == 0x000008, "Wrong alignment on BP_AJBHistoryManageComponent_C_UpdateHistoryPerPlayerID");
static_assert(sizeof(BP_AJBHistoryManageComponent_C_UpdateHistoryPerPlayerID) == 0x000030, "Wrong size on BP_AJBHistoryManageComponent_C_UpdateHistoryPerPlayerID");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryPerPlayerID, PlayerIDList) == 0x000000, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryPerPlayerID::PlayerIDList' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryPerPlayerID, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryPerPlayerID::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryPerPlayerID, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryPerPlayerID::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryPerPlayerID, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryPerPlayerID::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryPerPlayerID, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryPerPlayerID::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryPerPlayerID, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryPerPlayerID::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryPerPlayerID, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryPerPlayerID::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryPerPlayerID, CallFunc_Array_Contains_ReturnValue) == 0x000029, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryPerPlayerID::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryPerPlayerID, CallFunc_Not_PreBool_ReturnValue) == 0x00002A, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryPerPlayerID::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryPerPlayerID, CallFunc_Array_Add_ReturnValue) == 0x00002C, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryPerPlayerID::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.UpdateHistoryWithPlayerID
// 0x0070 (0x0070 - 0x0000)
struct BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID final
{
public:
	int32                                         PlayerID;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTempBreak;                                        // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TempSerialNumber;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 TempSerialNumberList;                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable1;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable1;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue1;                 // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item;                           // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_57[0x1];                                       // 0x0057(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue1;                // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBHistoryActorBase_C*              CallFunc_Array_Get_Item1;                          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue1;                 // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID) == 0x000008, "Wrong alignment on BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID");
static_assert(sizeof(BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID) == 0x000070, "Wrong size on BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID, PlayerID) == 0x000000, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID::PlayerID' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID, bTempBreak) == 0x000004, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID::bTempBreak' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID, TempSerialNumber) == 0x000008, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID::TempSerialNumber' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID, TempSerialNumberList) == 0x000010, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID::TempSerialNumberList' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID, Temp_int_Array_Index_Variable) == 0x000020, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID, Temp_int_Array_Index_Variable1) == 0x000024, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID::Temp_int_Array_Index_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID, CallFunc_Array_Add_ReturnValue) == 0x000030, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID, CallFunc_Not_PreBool_ReturnValue) == 0x000034, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID, Temp_int_Loop_Counter_Variable1) == 0x000038, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID::Temp_int_Loop_Counter_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID, Temp_bool_True_if_break_was_hit_Variable) == 0x00003C, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID, CallFunc_Not_PreBool_ReturnValue1) == 0x00003D, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID::CallFunc_Not_PreBool_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID, CallFunc_Add_IntInt_ReturnValue1) == 0x000040, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID, CallFunc_Array_Add_ReturnValue1) == 0x000044, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID::CallFunc_Array_Add_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000048, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID, CallFunc_Array_Get_Item) == 0x00004C, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID, CallFunc_Greater_IntInt_ReturnValue) == 0x000054, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID, CallFunc_Less_IntInt_ReturnValue) == 0x000055, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID, CallFunc_BooleanAND_ReturnValue) == 0x000056, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID, CallFunc_Array_Length_ReturnValue1) == 0x000058, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID::CallFunc_Array_Length_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID, CallFunc_Array_Get_Item1) == 0x000060, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID, CallFunc_Less_IntInt_ReturnValue1) == 0x000068, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID::CallFunc_Less_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000069, "Member 'BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.RemoveTarget
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBHistoryManageComponent_C_RemoveTarget final
{
public:
	class ABP_AJBInGameCharacter_C*               TargetCharacterBP;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBHistoryManageComponent_C_RemoveTarget) == 0x000008, "Wrong alignment on BP_AJBHistoryManageComponent_C_RemoveTarget");
static_assert(sizeof(BP_AJBHistoryManageComponent_C_RemoveTarget) == 0x000010, "Wrong size on BP_AJBHistoryManageComponent_C_RemoveTarget");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_RemoveTarget, TargetCharacterBP) == 0x000000, "Member 'BP_AJBHistoryManageComponent_C_RemoveTarget::TargetCharacterBP' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_RemoveTarget, CallFunc_Array_Find_ReturnValue) == 0x000008, "Member 'BP_AJBHistoryManageComponent_C_RemoveTarget::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_RemoveTarget, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00000C, "Member 'BP_AJBHistoryManageComponent_C_RemoveTarget::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.RemoveTargetByIndex
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBHistoryManageComponent_C_RemoveTargetByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue1;          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue2;          // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBHistoryManageComponent_C_RemoveTargetByIndex) == 0x000004, "Wrong alignment on BP_AJBHistoryManageComponent_C_RemoveTargetByIndex");
static_assert(sizeof(BP_AJBHistoryManageComponent_C_RemoveTargetByIndex) == 0x000008, "Wrong size on BP_AJBHistoryManageComponent_C_RemoveTargetByIndex");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_RemoveTargetByIndex, Index_0) == 0x000000, "Member 'BP_AJBHistoryManageComponent_C_RemoveTargetByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_RemoveTargetByIndex, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000004, "Member 'BP_AJBHistoryManageComponent_C_RemoveTargetByIndex::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_RemoveTargetByIndex, CallFunc_Array_IsValidIndex_ReturnValue1) == 0x000005, "Member 'BP_AJBHistoryManageComponent_C_RemoveTargetByIndex::CallFunc_Array_IsValidIndex_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_RemoveTargetByIndex, CallFunc_Array_IsValidIndex_ReturnValue2) == 0x000006, "Member 'BP_AJBHistoryManageComponent_C_RemoveTargetByIndex::CallFunc_Array_IsValidIndex_ReturnValue2' has a wrong offset!");

// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.AddTarget
// 0x0018 (0x0018 - 0x0000)
struct BP_AJBHistoryManageComponent_C_AddTarget final
{
public:
	class ABP_AJBInGameCharacter_C*               TargetCharacterBP;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue2;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBHistoryManageComponent_C_AddTarget) == 0x000008, "Wrong alignment on BP_AJBHistoryManageComponent_C_AddTarget");
static_assert(sizeof(BP_AJBHistoryManageComponent_C_AddTarget) == 0x000018, "Wrong size on BP_AJBHistoryManageComponent_C_AddTarget");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_AddTarget, TargetCharacterBP) == 0x000000, "Member 'BP_AJBHistoryManageComponent_C_AddTarget::TargetCharacterBP' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_AddTarget, CallFunc_Array_Add_ReturnValue) == 0x000008, "Member 'BP_AJBHistoryManageComponent_C_AddTarget::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_AddTarget, CallFunc_Array_Add_ReturnValue1) == 0x00000C, "Member 'BP_AJBHistoryManageComponent_C_AddTarget::CallFunc_Array_Add_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_AddTarget, CallFunc_Array_Add_ReturnValue2) == 0x000010, "Member 'BP_AJBHistoryManageComponent_C_AddTarget::CallFunc_Array_Add_ReturnValue2' has a wrong offset!");

// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.UpdateLeftTime
// 0x0178 (0x0178 - 0x0000)
struct BP_AJBHistoryManageComponent_C_UpdateLeftTime final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 RemoveIndexes;                                     // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<int32>                                 TempRemoveIndexes;                                 // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	int32                                         TempIndex;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAJBInGameCharacterBase*                CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0060(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0078(0x0040)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item1;                          // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue1;           // 0x00E0(0x0018)()
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData1;             // 0x0100(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0140(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0150(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0168(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBHistoryManageComponent_C_UpdateLeftTime) == 0x000008, "Wrong alignment on BP_AJBHistoryManageComponent_C_UpdateLeftTime");
static_assert(sizeof(BP_AJBHistoryManageComponent_C_UpdateLeftTime) == 0x000178, "Wrong size on BP_AJBHistoryManageComponent_C_UpdateLeftTime");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateLeftTime, DeltaSeconds) == 0x000000, "Member 'BP_AJBHistoryManageComponent_C_UpdateLeftTime::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateLeftTime, RemoveIndexes) == 0x000008, "Member 'BP_AJBHistoryManageComponent_C_UpdateLeftTime::RemoveIndexes' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateLeftTime, TempRemoveIndexes) == 0x000018, "Member 'BP_AJBHistoryManageComponent_C_UpdateLeftTime::TempRemoveIndexes' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateLeftTime, TempIndex) == 0x000028, "Member 'BP_AJBHistoryManageComponent_C_UpdateLeftTime::TempIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateLeftTime, Temp_int_Array_Index_Variable) == 0x00002C, "Member 'BP_AJBHistoryManageComponent_C_UpdateLeftTime::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateLeftTime, Temp_int_Loop_Counter_Variable) == 0x000030, "Member 'BP_AJBHistoryManageComponent_C_UpdateLeftTime::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateLeftTime, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'BP_AJBHistoryManageComponent_C_UpdateLeftTime::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateLeftTime, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_AJBHistoryManageComponent_C_UpdateLeftTime::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateLeftTime, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'BP_AJBHistoryManageComponent_C_UpdateLeftTime::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateLeftTime, CallFunc_GetDisplayName_ReturnValue) == 0x000048, "Member 'BP_AJBHistoryManageComponent_C_UpdateLeftTime::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateLeftTime, CallFunc_Less_IntInt_ReturnValue) == 0x000058, "Member 'BP_AJBHistoryManageComponent_C_UpdateLeftTime::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateLeftTime, CallFunc_Conv_StringToText_ReturnValue) == 0x000060, "Member 'BP_AJBHistoryManageComponent_C_UpdateLeftTime::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateLeftTime, K2Node_MakeStruct_FormatArgumentData) == 0x000078, "Member 'BP_AJBHistoryManageComponent_C_UpdateLeftTime::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateLeftTime, CallFunc_Array_Add_ReturnValue) == 0x0000B8, "Member 'BP_AJBHistoryManageComponent_C_UpdateLeftTime::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateLeftTime, CallFunc_Array_Get_Item1) == 0x0000BC, "Member 'BP_AJBHistoryManageComponent_C_UpdateLeftTime::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateLeftTime, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000C0, "Member 'BP_AJBHistoryManageComponent_C_UpdateLeftTime::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateLeftTime, CallFunc_Conv_FloatToString_ReturnValue) == 0x0000C8, "Member 'BP_AJBHistoryManageComponent_C_UpdateLeftTime::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateLeftTime, CallFunc_FMax_ReturnValue) == 0x0000D8, "Member 'BP_AJBHistoryManageComponent_C_UpdateLeftTime::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateLeftTime, CallFunc_Conv_StringToText_ReturnValue1) == 0x0000E0, "Member 'BP_AJBHistoryManageComponent_C_UpdateLeftTime::CallFunc_Conv_StringToText_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateLeftTime, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0000F8, "Member 'BP_AJBHistoryManageComponent_C_UpdateLeftTime::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateLeftTime, K2Node_MakeStruct_FormatArgumentData1) == 0x000100, "Member 'BP_AJBHistoryManageComponent_C_UpdateLeftTime::K2Node_MakeStruct_FormatArgumentData1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateLeftTime, K2Node_MakeArray_Array) == 0x000140, "Member 'BP_AJBHistoryManageComponent_C_UpdateLeftTime::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateLeftTime, CallFunc_Format_ReturnValue) == 0x000150, "Member 'BP_AJBHistoryManageComponent_C_UpdateLeftTime::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_UpdateLeftTime, CallFunc_Conv_TextToString_ReturnValue) == 0x000168, "Member 'BP_AJBHistoryManageComponent_C_UpdateLeftTime::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");

// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.MakeIgnorePlayerIDList
// 0x0040 (0x0040 - 0x0000)
struct BP_AJBHistoryManageComponent_C_MakeIgnorePlayerIDList final
{
public:
	TArray<int32>                                 IgnorePlayerIDList;                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<int32>                                 TempIgnorePlayerIDList;                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBHistoryManageComponent_C_MakeIgnorePlayerIDList) == 0x000008, "Wrong alignment on BP_AJBHistoryManageComponent_C_MakeIgnorePlayerIDList");
static_assert(sizeof(BP_AJBHistoryManageComponent_C_MakeIgnorePlayerIDList) == 0x000040, "Wrong size on BP_AJBHistoryManageComponent_C_MakeIgnorePlayerIDList");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_MakeIgnorePlayerIDList, IgnorePlayerIDList) == 0x000000, "Member 'BP_AJBHistoryManageComponent_C_MakeIgnorePlayerIDList::IgnorePlayerIDList' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_MakeIgnorePlayerIDList, TempIgnorePlayerIDList) == 0x000010, "Member 'BP_AJBHistoryManageComponent_C_MakeIgnorePlayerIDList::TempIgnorePlayerIDList' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_MakeIgnorePlayerIDList, CallFunc_GetOwner_ReturnValue) == 0x000020, "Member 'BP_AJBHistoryManageComponent_C_MakeIgnorePlayerIDList::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_MakeIgnorePlayerIDList, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000028, "Member 'BP_AJBHistoryManageComponent_C_MakeIgnorePlayerIDList::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_MakeIgnorePlayerIDList, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_AJBHistoryManageComponent_C_MakeIgnorePlayerIDList::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_MakeIgnorePlayerIDList, CallFunc_IsValid_ReturnValue) == 0x000031, "Member 'BP_AJBHistoryManageComponent_C_MakeIgnorePlayerIDList::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_MakeIgnorePlayerIDList, CallFunc_Array_Add_ReturnValue) == 0x000034, "Member 'BP_AJBHistoryManageComponent_C_MakeIgnorePlayerIDList::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_MakeIgnorePlayerIDList, CallFunc_Array_Add_ReturnValue1) == 0x000038, "Member 'BP_AJBHistoryManageComponent_C_MakeIgnorePlayerIDList::CallFunc_Array_Add_ReturnValue1' has a wrong offset!");

// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.CheckIgnoreDistanceLimit
// 0x0048 (0x0048 - 0x0000)
struct BP_AJBHistoryManageComponent_C_CheckIgnoreDistanceLimit final
{
public:
	bool                                          bLimit;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TempCount;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacterBase*                CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBHistoryManageComponent_C_CheckIgnoreDistanceLimit) == 0x000008, "Wrong alignment on BP_AJBHistoryManageComponent_C_CheckIgnoreDistanceLimit");
static_assert(sizeof(BP_AJBHistoryManageComponent_C_CheckIgnoreDistanceLimit) == 0x000048, "Wrong size on BP_AJBHistoryManageComponent_C_CheckIgnoreDistanceLimit");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_CheckIgnoreDistanceLimit, bLimit) == 0x000000, "Member 'BP_AJBHistoryManageComponent_C_CheckIgnoreDistanceLimit::bLimit' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_CheckIgnoreDistanceLimit, TempCount) == 0x000004, "Member 'BP_AJBHistoryManageComponent_C_CheckIgnoreDistanceLimit::TempCount' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_CheckIgnoreDistanceLimit, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_AJBHistoryManageComponent_C_CheckIgnoreDistanceLimit::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_CheckIgnoreDistanceLimit, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'BP_AJBHistoryManageComponent_C_CheckIgnoreDistanceLimit::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_CheckIgnoreDistanceLimit, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_AJBHistoryManageComponent_C_CheckIgnoreDistanceLimit::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_CheckIgnoreDistanceLimit, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_AJBHistoryManageComponent_C_CheckIgnoreDistanceLimit::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_CheckIgnoreDistanceLimit, CallFunc_Add_IntInt_ReturnValue1) == 0x000020, "Member 'BP_AJBHistoryManageComponent_C_CheckIgnoreDistanceLimit::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_CheckIgnoreDistanceLimit, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000028, "Member 'BP_AJBHistoryManageComponent_C_CheckIgnoreDistanceLimit::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_CheckIgnoreDistanceLimit, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_AJBHistoryManageComponent_C_CheckIgnoreDistanceLimit::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_CheckIgnoreDistanceLimit, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'BP_AJBHistoryManageComponent_C_CheckIgnoreDistanceLimit::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_CheckIgnoreDistanceLimit, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'BP_AJBHistoryManageComponent_C_CheckIgnoreDistanceLimit::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_CheckIgnoreDistanceLimit, Temp_int_Variable) == 0x00003C, "Member 'BP_AJBHistoryManageComponent_C_CheckIgnoreDistanceLimit::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_CheckIgnoreDistanceLimit, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000040, "Member 'BP_AJBHistoryManageComponent_C_CheckIgnoreDistanceLimit::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.ShouldAllRemoveTarget
// 0x0078 (0x0078 - 0x0000)
struct BP_AJBHistoryManageComponent_C_ShouldAllRemoveTarget final
{
public:
	bool                                          bShouldRemove;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue1;                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character1;     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBGameplayTagOwnerInterface_C> K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface; // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckCharacterBehavior_Active_bReturnValue; // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_GetGameplayTags_TagContainerCopy;         // 0x0050(0x0020)()
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckPassiveTagProhibition_bProhibitionTag; // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBHistoryManageComponent_C_ShouldAllRemoveTarget) == 0x000008, "Wrong alignment on BP_AJBHistoryManageComponent_C_ShouldAllRemoveTarget");
static_assert(sizeof(BP_AJBHistoryManageComponent_C_ShouldAllRemoveTarget) == 0x000078, "Wrong size on BP_AJBHistoryManageComponent_C_ShouldAllRemoveTarget");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldAllRemoveTarget, bShouldRemove) == 0x000000, "Member 'BP_AJBHistoryManageComponent_C_ShouldAllRemoveTarget::bShouldRemove' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldAllRemoveTarget, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_AJBHistoryManageComponent_C_ShouldAllRemoveTarget::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldAllRemoveTarget, CallFunc_GetOwner_ReturnValue1) == 0x000010, "Member 'BP_AJBHistoryManageComponent_C_ShouldAllRemoveTarget::CallFunc_GetOwner_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldAllRemoveTarget, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000018, "Member 'BP_AJBHistoryManageComponent_C_ShouldAllRemoveTarget::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldAllRemoveTarget, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_AJBHistoryManageComponent_C_ShouldAllRemoveTarget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldAllRemoveTarget, K2Node_DynamicCast_AsBP_AJBIn_Game_Character1) == 0x000028, "Member 'BP_AJBHistoryManageComponent_C_ShouldAllRemoveTarget::K2Node_DynamicCast_AsBP_AJBIn_Game_Character1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldAllRemoveTarget, K2Node_DynamicCast_bSuccess1) == 0x000030, "Member 'BP_AJBHistoryManageComponent_C_ShouldAllRemoveTarget::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldAllRemoveTarget, K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface) == 0x000038, "Member 'BP_AJBHistoryManageComponent_C_ShouldAllRemoveTarget::K2Node_DynamicCast_AsBI_AJBGameplay_Tag_Owner_Interface' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldAllRemoveTarget, K2Node_DynamicCast_bSuccess2) == 0x000048, "Member 'BP_AJBHistoryManageComponent_C_ShouldAllRemoveTarget::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldAllRemoveTarget, CallFunc_CheckCharacterBehavior_Active_bReturnValue) == 0x000049, "Member 'BP_AJBHistoryManageComponent_C_ShouldAllRemoveTarget::CallFunc_CheckCharacterBehavior_Active_bReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldAllRemoveTarget, CallFunc_GetGameplayTags_TagContainerCopy) == 0x000050, "Member 'BP_AJBHistoryManageComponent_C_ShouldAllRemoveTarget::CallFunc_GetGameplayTags_TagContainerCopy' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldAllRemoveTarget, CallFunc_Not_PreBool_ReturnValue) == 0x000070, "Member 'BP_AJBHistoryManageComponent_C_ShouldAllRemoveTarget::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldAllRemoveTarget, CallFunc_CheckPassiveTagProhibition_bProhibitionTag) == 0x000071, "Member 'BP_AJBHistoryManageComponent_C_ShouldAllRemoveTarget::CallFunc_CheckPassiveTagProhibition_bProhibitionTag' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldAllRemoveTarget, CallFunc_BooleanAND_ReturnValue) == 0x000072, "Member 'BP_AJBHistoryManageComponent_C_ShouldAllRemoveTarget::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.ShouldSpawn
// 0x0188 (0x0188 - 0x0000)
struct BP_AJBHistoryManageComponent_C_ShouldSpawn final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldSpawn;                                      // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NewLocation;                                       // 0x0010(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0020(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0030(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array1;                           // 0x0040(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0050(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue1;                  // 0x005C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0068(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_AJBLineTraceForObjects_OutHit;            // 0x0078(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_AJBLineTraceForObjects_ReturnValue;       // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0102(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_103[0x1];                                      // 0x0103(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x010C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0118(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0124(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0130(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0150(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0168(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0174(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ComponentHasTag_ReturnValue;              // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBHistoryManageComponent_C_ShouldSpawn) == 0x000008, "Wrong alignment on BP_AJBHistoryManageComponent_C_ShouldSpawn");
static_assert(sizeof(BP_AJBHistoryManageComponent_C_ShouldSpawn) == 0x000188, "Wrong size on BP_AJBHistoryManageComponent_C_ShouldSpawn");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldSpawn, Location) == 0x000000, "Member 'BP_AJBHistoryManageComponent_C_ShouldSpawn::Location' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldSpawn, bShouldSpawn) == 0x00000C, "Member 'BP_AJBHistoryManageComponent_C_ShouldSpawn::bShouldSpawn' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldSpawn, NewLocation) == 0x000010, "Member 'BP_AJBHistoryManageComponent_C_ShouldSpawn::NewLocation' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldSpawn, K2Node_MakeArray_Array) == 0x000020, "Member 'BP_AJBHistoryManageComponent_C_ShouldSpawn::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldSpawn, CallFunc_MakeVector_ReturnValue) == 0x000030, "Member 'BP_AJBHistoryManageComponent_C_ShouldSpawn::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldSpawn, K2Node_MakeArray_Array1) == 0x000040, "Member 'BP_AJBHistoryManageComponent_C_ShouldSpawn::K2Node_MakeArray_Array1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldSpawn, CallFunc_Add_VectorVector_ReturnValue) == 0x000050, "Member 'BP_AJBHistoryManageComponent_C_ShouldSpawn::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldSpawn, CallFunc_MakeVector_ReturnValue1) == 0x00005C, "Member 'BP_AJBHistoryManageComponent_C_ShouldSpawn::CallFunc_MakeVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldSpawn, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000068, "Member 'BP_AJBHistoryManageComponent_C_ShouldSpawn::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldSpawn, CallFunc_AJBLineTraceForObjects_OutHit) == 0x000078, "Member 'BP_AJBHistoryManageComponent_C_ShouldSpawn::CallFunc_AJBLineTraceForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldSpawn, CallFunc_AJBLineTraceForObjects_ReturnValue) == 0x000100, "Member 'BP_AJBHistoryManageComponent_C_ShouldSpawn::CallFunc_AJBLineTraceForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldSpawn, CallFunc_BreakHitResult_bBlockingHit) == 0x000101, "Member 'BP_AJBHistoryManageComponent_C_ShouldSpawn::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldSpawn, CallFunc_BreakHitResult_bInitialOverlap) == 0x000102, "Member 'BP_AJBHistoryManageComponent_C_ShouldSpawn::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldSpawn, CallFunc_BreakHitResult_Time) == 0x000104, "Member 'BP_AJBHistoryManageComponent_C_ShouldSpawn::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldSpawn, CallFunc_BreakHitResult_Distance) == 0x000108, "Member 'BP_AJBHistoryManageComponent_C_ShouldSpawn::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldSpawn, CallFunc_BreakHitResult_Location) == 0x00010C, "Member 'BP_AJBHistoryManageComponent_C_ShouldSpawn::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldSpawn, CallFunc_BreakHitResult_ImpactPoint) == 0x000118, "Member 'BP_AJBHistoryManageComponent_C_ShouldSpawn::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldSpawn, CallFunc_BreakHitResult_Normal) == 0x000124, "Member 'BP_AJBHistoryManageComponent_C_ShouldSpawn::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldSpawn, CallFunc_BreakHitResult_ImpactNormal) == 0x000130, "Member 'BP_AJBHistoryManageComponent_C_ShouldSpawn::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldSpawn, CallFunc_BreakHitResult_PhysMat) == 0x000140, "Member 'BP_AJBHistoryManageComponent_C_ShouldSpawn::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldSpawn, CallFunc_BreakHitResult_HitActor) == 0x000148, "Member 'BP_AJBHistoryManageComponent_C_ShouldSpawn::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldSpawn, CallFunc_BreakHitResult_HitComponent) == 0x000150, "Member 'BP_AJBHistoryManageComponent_C_ShouldSpawn::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldSpawn, CallFunc_BreakHitResult_HitBoneName) == 0x000158, "Member 'BP_AJBHistoryManageComponent_C_ShouldSpawn::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldSpawn, CallFunc_BreakHitResult_HitItem) == 0x000160, "Member 'BP_AJBHistoryManageComponent_C_ShouldSpawn::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldSpawn, CallFunc_BreakHitResult_FaceIndex) == 0x000164, "Member 'BP_AJBHistoryManageComponent_C_ShouldSpawn::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldSpawn, CallFunc_BreakHitResult_TraceStart) == 0x000168, "Member 'BP_AJBHistoryManageComponent_C_ShouldSpawn::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldSpawn, CallFunc_BreakHitResult_TraceEnd) == 0x000174, "Member 'BP_AJBHistoryManageComponent_C_ShouldSpawn::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldSpawn, CallFunc_ComponentHasTag_ReturnValue) == 0x000180, "Member 'BP_AJBHistoryManageComponent_C_ShouldSpawn::CallFunc_ComponentHasTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_ShouldSpawn, CallFunc_Not_PreBool_ReturnValue) == 0x000181, "Member 'BP_AJBHistoryManageComponent_C_ShouldSpawn::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.TryDestroyHistoryActorListAll
// 0x001C (0x001C - 0x0000)
struct BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListAll final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue1;             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListAll) == 0x000004, "Wrong alignment on BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListAll");
static_assert(sizeof(BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListAll) == 0x00001C, "Wrong size on BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListAll");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListAll, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListAll::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListAll, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListAll::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListAll, CallFunc_Subtract_IntInt_ReturnValue) == 0x000008, "Member 'BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListAll::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListAll, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00000C, "Member 'BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListAll::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListAll, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListAll::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListAll, CallFunc_Subtract_IntInt_ReturnValue1) == 0x000014, "Member 'BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListAll::CallFunc_Subtract_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListAll, CallFunc_Max_ReturnValue) == 0x000018, "Member 'BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListAll::CallFunc_Max_ReturnValue' has a wrong offset!");

// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.TryDestroyHistoryActorListByIndex
// 0x0058 (0x0058 - 0x0000)
struct BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ABP_AJBHistoryActorBase_C*              CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue1;               // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue2;               // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListByIndex) == 0x000008, "Wrong alignment on BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListByIndex");
static_assert(sizeof(BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListByIndex) == 0x000058, "Wrong size on BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListByIndex");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListByIndex, Index_0) == 0x000000, "Member 'BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListByIndex, CallFunc_Concat_StrStr_ReturnValue) == 0x000008, "Member 'BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListByIndex::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListByIndex, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListByIndex::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListByIndex, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000020, "Member 'BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListByIndex::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListByIndex, CallFunc_Conv_IntToString_ReturnValue) == 0x000028, "Member 'BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListByIndex::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListByIndex, CallFunc_Concat_StrStr_ReturnValue1) == 0x000038, "Member 'BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListByIndex::CallFunc_Concat_StrStr_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListByIndex, CallFunc_Concat_StrStr_ReturnValue2) == 0x000048, "Member 'BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListByIndex::CallFunc_Concat_StrStr_ReturnValue2' has a wrong offset!");

// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.GetPoliticOwnerLocation
// 0x0088 (0x0088 - 0x0000)
struct BP_AJBHistoryManageComponent_C_GetPoliticOwnerLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBInGameCharacterPropertyOwner_C> K2Node_DynamicCast_AsBI_AJBIn_Game_Character_Property_Owner; // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess1;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0044(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameCharacter_C*               CallFunc_GetPropertyStand_PropertyStandBP;         // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBI_AJBInGameCharacterPropertyOwner_C> K2Node_DynamicCast_AsBI_AJBIn_Game_Character_Property_Owner1; // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess2;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckTransfer_bTransfer;                  // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue1;     // 0x006C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x0078(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBHistoryManageComponent_C_GetPoliticOwnerLocation) == 0x000008, "Wrong alignment on BP_AJBHistoryManageComponent_C_GetPoliticOwnerLocation");
static_assert(sizeof(BP_AJBHistoryManageComponent_C_GetPoliticOwnerLocation) == 0x000088, "Wrong size on BP_AJBHistoryManageComponent_C_GetPoliticOwnerLocation");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetPoliticOwnerLocation, Location) == 0x000000, "Member 'BP_AJBHistoryManageComponent_C_GetPoliticOwnerLocation::Location' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetPoliticOwnerLocation, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'BP_AJBHistoryManageComponent_C_GetPoliticOwnerLocation::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetPoliticOwnerLocation, Temp_bool_Variable) == 0x000018, "Member 'BP_AJBHistoryManageComponent_C_GetPoliticOwnerLocation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetPoliticOwnerLocation, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000020, "Member 'BP_AJBHistoryManageComponent_C_GetPoliticOwnerLocation::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetPoliticOwnerLocation, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_AJBHistoryManageComponent_C_GetPoliticOwnerLocation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetPoliticOwnerLocation, K2Node_DynamicCast_AsBI_AJBIn_Game_Character_Property_Owner) == 0x000030, "Member 'BP_AJBHistoryManageComponent_C_GetPoliticOwnerLocation::K2Node_DynamicCast_AsBI_AJBIn_Game_Character_Property_Owner' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetPoliticOwnerLocation, K2Node_DynamicCast_bSuccess1) == 0x000040, "Member 'BP_AJBHistoryManageComponent_C_GetPoliticOwnerLocation::K2Node_DynamicCast_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetPoliticOwnerLocation, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000044, "Member 'BP_AJBHistoryManageComponent_C_GetPoliticOwnerLocation::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetPoliticOwnerLocation, CallFunc_GetPropertyStand_PropertyStandBP) == 0x000050, "Member 'BP_AJBHistoryManageComponent_C_GetPoliticOwnerLocation::CallFunc_GetPropertyStand_PropertyStandBP' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetPoliticOwnerLocation, K2Node_DynamicCast_AsBI_AJBIn_Game_Character_Property_Owner1) == 0x000058, "Member 'BP_AJBHistoryManageComponent_C_GetPoliticOwnerLocation::K2Node_DynamicCast_AsBI_AJBIn_Game_Character_Property_Owner1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetPoliticOwnerLocation, K2Node_DynamicCast_bSuccess2) == 0x000068, "Member 'BP_AJBHistoryManageComponent_C_GetPoliticOwnerLocation::K2Node_DynamicCast_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetPoliticOwnerLocation, CallFunc_CheckTransfer_bTransfer) == 0x000069, "Member 'BP_AJBHistoryManageComponent_C_GetPoliticOwnerLocation::CallFunc_CheckTransfer_bTransfer' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetPoliticOwnerLocation, CallFunc_K2_GetComponentLocation_ReturnValue1) == 0x00006C, "Member 'BP_AJBHistoryManageComponent_C_GetPoliticOwnerLocation::CallFunc_K2_GetComponentLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBHistoryManageComponent_C_GetPoliticOwnerLocation, K2Node_Select_Default) == 0x000078, "Member 'BP_AJBHistoryManageComponent_C_GetPoliticOwnerLocation::K2Node_Select_Default' has a wrong offset!");

}

