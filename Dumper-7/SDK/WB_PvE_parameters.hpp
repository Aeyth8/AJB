#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_PvE

#include "Basic.hpp"

#include "EPvEGameDifficulty_structs.hpp"
#include "SlateCore_structs.hpp"
#include "AJB_structs.hpp"


namespace SDK::Params
{

// Function WB_PvE.WB_PvE_C.ExecuteUbergraph_WB_PvE
// 0x02B0 (0x02B0 - 0x0000)
struct WB_PvE_C_ExecuteUbergraph_WB_PvE final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	class UFadeOutActionProxy*                    CallFunc_FadeOut_ReturnValue;                      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate1;             // 0x0028(0x0010)(ZeroConstructor, NoDestructor)
	class UFadeInActionProxy*                     CallFunc_FadeIn_ReturnValue;                       // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            Temp_byte_Variable;                                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Temp_byte_Variable1;                               // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Temp_byte_Variable2;                               // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Temp_byte_Variable3;                               // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Temp_byte_Variable4;                               // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate2;             // 0x0048(0x0010)(ZeroConstructor, NoDestructor)
	class UFadeInActionProxy*                     CallFunc_FadeIn_ReturnValue1;                      // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate3;             // 0x0060(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue3;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFadeOutActionProxy*                    CallFunc_FadeOut_ReturnValue1;                     // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue4;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue5;                     // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue6;                     // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_83[0x5];                                       // 0x0083(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate4;             // 0x0088(0x0010)(ZeroConstructor, NoDestructor)
	float                                         K2Node_CustomEvent_RemainingTime;                  // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBOutGameHUD_BP_bSuccess;             // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBOutGameHUD_C*                    CallFunc_GetAJBOutGameHUD_BP_Out_Game_HUD;         // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x00A8(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBButtonWidget*                       K2Node_ComponentBoundEvent_OwnerWidget4;           // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAJBButton*                             K2Node_ComponentBoundEvent_TargetButton4;          // 0x00F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAJBButtonWidget*                       K2Node_ComponentBoundEvent_OwnerWidget3;           // 0x00F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAJBButton*                             K2Node_ComponentBoundEvent_TargetButton3;          // 0x0100(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAJBButtonWidget*                       K2Node_ComponentBoundEvent_OwnerWidget2;           // 0x0108(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAJBButton*                             K2Node_ComponentBoundEvent_TargetButton2;          // 0x0110(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            K2Node_CustomEvent_GameDifficulty;                 // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           CallFunc_RequestWwiseEventOnLocal_AkComponent;     // 0x0120(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ChangeStateFromPlayerController_ReturnValue; // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetMenuBGLevelName_ReturnValue;           // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate5;             // 0x0138(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsPlayingAnimationButton_ReturnValue;     // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayingAnimationButton_ReturnValue1;    // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAJBGameInstance_bSuccess;              // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14B[0x5];                                      // 0x014B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBGameInstance_C*                  CallFunc_GetAJBGameInstance_AJB_Game_Instance;     // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetStageID_StageTypeID;                   // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FAJBStageAreaTitleInfo>    CallFunc_GetAJBAreaTitleMap_AreaTitleMap;          // 0x0160(0x0050)(ZeroConstructor)
	TArray<int32>                                 CallFunc_Map_Keys_Keys;                            // 0x01B0(0x0010)(ZeroConstructor, ReferenceParm)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue1;           // 0x01C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPvEGameDifficulty                            CallFunc_GetPreviousPvEGameDifficulty_PreviousDifficulty; // 0x01C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            CallFunc_GetNextPvEGameDifficulty_NextDifficulty;  // 0x01C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBGameInstance_bSuccess1;             // 0x01C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C5[0x3];                                      // 0x01C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBGameInstance_C*                  CallFunc_GetAJBGameInstance_AJB_Game_Instance1;    // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_Select_Default;                             // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D1[0x3];                                      // 0x01D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x01D4(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAJBBattleSettings                     K2Node_MakeStruct_AJBBattleSettings;               // 0x01D8(0x0008)(IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBButtonWidget*                       K2Node_ComponentBoundEvent_OwnerWidget1;           // 0x01E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAJBButton*                             K2Node_ComponentBoundEvent_TargetButton1;          // 0x01F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFadeOutActionProxy*                    CallFunc_FadeOut_ReturnValue2;                     // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue7;                     // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAJBOutGameHUD_BP_bSuccess1;            // 0x0201(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_202[0x6];                                      // 0x0202(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBOutGameHUD_C*                    CallFunc_GetAJBOutGameHUD_BP_Out_Game_HUD1;        // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBGameInstance_bSuccess2;             // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_211[0x7];                                      // 0x0211(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBGameInstance_C*                  CallFunc_GetAJBGameInstance_AJB_Game_Instance2;    // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_229[0x3];                                      // 0x0229(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           CallFunc_RequestWwiseEventOnLocal_AkComponent1;    // 0x0230(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue8;                     // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_239[0x7];                                      // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           CallFunc_RequestWwiseEventOnLocal_AkComponent2;    // 0x0240(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAJBButtonWidget*                       K2Node_ComponentBoundEvent_OwnerWidget;            // 0x0248(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAJBButton*                             K2Node_ComponentBoundEvent_TargetButton;           // 0x0250(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum1_CmpSuccess;                     // 0x0259(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAJBGameInstance_bSuccess3;             // 0x025A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25B[0x5];                                      // 0x025B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBGameInstance_C*                  CallFunc_GetAJBGameInstance_AJB_Game_Instance3;    // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate6;             // 0x0268(0x0010)(ZeroConstructor, NoDestructor)
	float                                         K2Node_Select1_Default;                            // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEditor_ReturnValue;                     // 0x027C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAMSystemErrorMode_ReturnValue;          // 0x027D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x027E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27F[0x1];                                      // 0x027F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UFadeInActionProxy*                     CallFunc_FadeIn_ReturnValue2;                      // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue9;                     // 0x0289(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x028A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28B[0x1];                                      // 0x028B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue10;                    // 0x0294(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_295[0x3];                                      // 0x0295(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate7;             // 0x0298(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue11;                    // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_C_ExecuteUbergraph_WB_PvE) == 0x000008, "Wrong alignment on WB_PvE_C_ExecuteUbergraph_WB_PvE");
static_assert(sizeof(WB_PvE_C_ExecuteUbergraph_WB_PvE) == 0x0002B0, "Wrong size on WB_PvE_C_ExecuteUbergraph_WB_PvE");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, EntryPoint) == 0x000000, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_FadeOut_ReturnValue) == 0x000018, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_FadeOut_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_IsValid_ReturnValue1) == 0x000021, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, Temp_bool_Variable) == 0x000022, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, K2Node_CreateDelegate_OutputDelegate1) == 0x000028, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_FadeIn_ReturnValue) == 0x000038, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_FadeIn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, Temp_byte_Variable) == 0x000040, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_IsValid_ReturnValue2) == 0x000041, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, Temp_byte_Variable1) == 0x000042, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, Temp_byte_Variable2) == 0x000043, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, Temp_byte_Variable3) == 0x000044, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::Temp_byte_Variable3' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, Temp_byte_Variable4) == 0x000045, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::Temp_byte_Variable4' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, K2Node_CreateDelegate_OutputDelegate2) == 0x000048, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::K2Node_CreateDelegate_OutputDelegate2' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_FadeIn_ReturnValue1) == 0x000058, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_FadeIn_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, K2Node_CreateDelegate_OutputDelegate3) == 0x000060, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::K2Node_CreateDelegate_OutputDelegate3' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_IsValid_ReturnValue3) == 0x000070, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_IsValid_ReturnValue3' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_FadeOut_ReturnValue1) == 0x000078, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_FadeOut_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_IsValid_ReturnValue4) == 0x000080, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_IsValid_ReturnValue4' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_IsValid_ReturnValue5) == 0x000081, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_IsValid_ReturnValue5' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_IsValid_ReturnValue6) == 0x000082, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_IsValid_ReturnValue6' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, K2Node_CreateDelegate_OutputDelegate4) == 0x000088, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::K2Node_CreateDelegate_OutputDelegate4' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, K2Node_CustomEvent_RemainingTime) == 0x000098, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::K2Node_CustomEvent_RemainingTime' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_GetAJBOutGameHUD_BP_bSuccess) == 0x00009C, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_GetAJBOutGameHUD_BP_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_GetAJBOutGameHUD_BP_Out_Game_HUD) == 0x0000A0, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_GetAJBOutGameHUD_BP_Out_Game_HUD' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, K2Node_Event_MyGeometry) == 0x0000A8, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, K2Node_Event_InDeltaTime) == 0x0000E0, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, K2Node_ComponentBoundEvent_OwnerWidget4) == 0x0000E8, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::K2Node_ComponentBoundEvent_OwnerWidget4' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, K2Node_ComponentBoundEvent_TargetButton4) == 0x0000F0, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::K2Node_ComponentBoundEvent_TargetButton4' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, K2Node_ComponentBoundEvent_OwnerWidget3) == 0x0000F8, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::K2Node_ComponentBoundEvent_OwnerWidget3' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, K2Node_ComponentBoundEvent_TargetButton3) == 0x000100, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::K2Node_ComponentBoundEvent_TargetButton3' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, K2Node_ComponentBoundEvent_OwnerWidget2) == 0x000108, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::K2Node_ComponentBoundEvent_OwnerWidget2' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, K2Node_ComponentBoundEvent_TargetButton2) == 0x000110, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::K2Node_ComponentBoundEvent_TargetButton2' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, K2Node_CustomEvent_GameDifficulty) == 0x000118, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::K2Node_CustomEvent_GameDifficulty' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_RequestWwiseEventOnLocal_AkComponent) == 0x000120, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_RequestWwiseEventOnLocal_AkComponent' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_ChangeStateFromPlayerController_ReturnValue) == 0x000128, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_ChangeStateFromPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_GetMenuBGLevelName_ReturnValue) == 0x000130, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_GetMenuBGLevelName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, K2Node_CreateDelegate_OutputDelegate5) == 0x000138, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::K2Node_CreateDelegate_OutputDelegate5' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_IsPlayingAnimationButton_ReturnValue) == 0x000148, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_IsPlayingAnimationButton_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_IsPlayingAnimationButton_ReturnValue1) == 0x000149, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_IsPlayingAnimationButton_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_GetAJBGameInstance_bSuccess) == 0x00014A, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_GetAJBGameInstance_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_GetAJBGameInstance_AJB_Game_Instance) == 0x000150, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_GetAJBGameInstance_AJB_Game_Instance' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_GetStageID_StageTypeID) == 0x000158, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_GetStageID_StageTypeID' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_GetAJBAreaTitleMap_AreaTitleMap) == 0x000160, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_GetAJBAreaTitleMap_AreaTitleMap' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_Map_Keys_Keys) == 0x0001B0, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x0001C0, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_NotEqual_ByteByte_ReturnValue1) == 0x0001C1, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_NotEqual_ByteByte_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_GetPreviousPvEGameDifficulty_PreviousDifficulty) == 0x0001C2, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_GetPreviousPvEGameDifficulty_PreviousDifficulty' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_GetNextPvEGameDifficulty_NextDifficulty) == 0x0001C3, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_GetNextPvEGameDifficulty_NextDifficulty' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_GetAJBGameInstance_bSuccess1) == 0x0001C4, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_GetAJBGameInstance_bSuccess1' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_GetAJBGameInstance_AJB_Game_Instance1) == 0x0001C8, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_GetAJBGameInstance_AJB_Game_Instance1' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, K2Node_Select_Default) == 0x0001D0, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, Temp_int_Variable) == 0x0001D4, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, K2Node_MakeStruct_AJBBattleSettings) == 0x0001D8, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::K2Node_MakeStruct_AJBBattleSettings' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_Array_Add_ReturnValue) == 0x0001E0, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, K2Node_ComponentBoundEvent_OwnerWidget1) == 0x0001E8, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::K2Node_ComponentBoundEvent_OwnerWidget1' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, K2Node_ComponentBoundEvent_TargetButton1) == 0x0001F0, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::K2Node_ComponentBoundEvent_TargetButton1' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_FadeOut_ReturnValue2) == 0x0001F8, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_FadeOut_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_IsValid_ReturnValue7) == 0x000200, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_IsValid_ReturnValue7' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_GetAJBOutGameHUD_BP_bSuccess1) == 0x000201, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_GetAJBOutGameHUD_BP_bSuccess1' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_GetAJBOutGameHUD_BP_Out_Game_HUD1) == 0x000208, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_GetAJBOutGameHUD_BP_Out_Game_HUD1' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_GetAJBGameInstance_bSuccess2) == 0x000210, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_GetAJBGameInstance_bSuccess2' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_GetAJBGameInstance_AJB_Game_Instance2) == 0x000218, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_GetAJBGameInstance_AJB_Game_Instance2' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_FTrunc_ReturnValue) == 0x000220, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_Clamp_ReturnValue) == 0x000224, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000228, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00022C, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_RequestWwiseEventOnLocal_AkComponent1) == 0x000230, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_RequestWwiseEventOnLocal_AkComponent1' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_IsValid_ReturnValue8) == 0x000238, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_IsValid_ReturnValue8' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_RequestWwiseEventOnLocal_AkComponent2) == 0x000240, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_RequestWwiseEventOnLocal_AkComponent2' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, K2Node_ComponentBoundEvent_OwnerWidget) == 0x000248, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::K2Node_ComponentBoundEvent_OwnerWidget' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, K2Node_ComponentBoundEvent_TargetButton) == 0x000250, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::K2Node_ComponentBoundEvent_TargetButton' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, K2Node_SwitchEnum_CmpSuccess) == 0x000258, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, K2Node_SwitchEnum1_CmpSuccess) == 0x000259, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::K2Node_SwitchEnum1_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_GetAJBGameInstance_bSuccess3) == 0x00025A, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_GetAJBGameInstance_bSuccess3' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_GetAJBGameInstance_AJB_Game_Instance3) == 0x000260, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_GetAJBGameInstance_AJB_Game_Instance3' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, K2Node_CreateDelegate_OutputDelegate6) == 0x000268, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::K2Node_CreateDelegate_OutputDelegate6' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, K2Node_Select1_Default) == 0x000278, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_IsEditor_ReturnValue) == 0x00027C, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_IsEditor_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_IsAMSystemErrorMode_ReturnValue) == 0x00027D, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_IsAMSystemErrorMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_Not_PreBool_ReturnValue) == 0x00027E, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_FadeIn_ReturnValue2) == 0x000280, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_FadeIn_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_BooleanAND_ReturnValue) == 0x000288, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_IsValid_ReturnValue9) == 0x000289, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_IsValid_ReturnValue9' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00028A, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00028C, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_FMax_ReturnValue) == 0x000290, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_IsValid_ReturnValue10) == 0x000294, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_IsValid_ReturnValue10' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, K2Node_CreateDelegate_OutputDelegate7) == 0x000298, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::K2Node_CreateDelegate_OutputDelegate7' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_ExecuteUbergraph_WB_PvE, CallFunc_IsValid_ReturnValue11) == 0x0002A8, "Member 'WB_PvE_C_ExecuteUbergraph_WB_PvE::CallFunc_IsValid_ReturnValue11' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.BndEvt__Debug_WB_CommonButton_Pair_K2Node_ComponentBoundEvent_4_OnAJBButtonEvent__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct WB_PvE_C_BndEvt__Debug_WB_CommonButton_Pair_K2Node_ComponentBoundEvent_4_OnAJBButtonEvent__DelegateSignature final
{
public:
	class UAJBButtonWidget*                       OwnerWidget;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAJBButton*                             TargetButton;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PvE_C_BndEvt__Debug_WB_CommonButton_Pair_K2Node_ComponentBoundEvent_4_OnAJBButtonEvent__DelegateSignature) == 0x000008, "Wrong alignment on WB_PvE_C_BndEvt__Debug_WB_CommonButton_Pair_K2Node_ComponentBoundEvent_4_OnAJBButtonEvent__DelegateSignature");
static_assert(sizeof(WB_PvE_C_BndEvt__Debug_WB_CommonButton_Pair_K2Node_ComponentBoundEvent_4_OnAJBButtonEvent__DelegateSignature) == 0x000010, "Wrong size on WB_PvE_C_BndEvt__Debug_WB_CommonButton_Pair_K2Node_ComponentBoundEvent_4_OnAJBButtonEvent__DelegateSignature");
static_assert(offsetof(WB_PvE_C_BndEvt__Debug_WB_CommonButton_Pair_K2Node_ComponentBoundEvent_4_OnAJBButtonEvent__DelegateSignature, OwnerWidget) == 0x000000, "Member 'WB_PvE_C_BndEvt__Debug_WB_CommonButton_Pair_K2Node_ComponentBoundEvent_4_OnAJBButtonEvent__DelegateSignature::OwnerWidget' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_BndEvt__Debug_WB_CommonButton_Pair_K2Node_ComponentBoundEvent_4_OnAJBButtonEvent__DelegateSignature, TargetButton) == 0x000008, "Member 'WB_PvE_C_BndEvt__Debug_WB_CommonButton_Pair_K2Node_ComponentBoundEvent_4_OnAJBButtonEvent__DelegateSignature::TargetButton' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.BndEvt__WB_CommonButton_Return_K2Node_ComponentBoundEvent_3_OnAJBButtonEvent__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct WB_PvE_C_BndEvt__WB_CommonButton_Return_K2Node_ComponentBoundEvent_3_OnAJBButtonEvent__DelegateSignature final
{
public:
	class UAJBButtonWidget*                       OwnerWidget;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAJBButton*                             TargetButton;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PvE_C_BndEvt__WB_CommonButton_Return_K2Node_ComponentBoundEvent_3_OnAJBButtonEvent__DelegateSignature) == 0x000008, "Wrong alignment on WB_PvE_C_BndEvt__WB_CommonButton_Return_K2Node_ComponentBoundEvent_3_OnAJBButtonEvent__DelegateSignature");
static_assert(sizeof(WB_PvE_C_BndEvt__WB_CommonButton_Return_K2Node_ComponentBoundEvent_3_OnAJBButtonEvent__DelegateSignature) == 0x000010, "Wrong size on WB_PvE_C_BndEvt__WB_CommonButton_Return_K2Node_ComponentBoundEvent_3_OnAJBButtonEvent__DelegateSignature");
static_assert(offsetof(WB_PvE_C_BndEvt__WB_CommonButton_Return_K2Node_ComponentBoundEvent_3_OnAJBButtonEvent__DelegateSignature, OwnerWidget) == 0x000000, "Member 'WB_PvE_C_BndEvt__WB_CommonButton_Return_K2Node_ComponentBoundEvent_3_OnAJBButtonEvent__DelegateSignature::OwnerWidget' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_BndEvt__WB_CommonButton_Return_K2Node_ComponentBoundEvent_3_OnAJBButtonEvent__DelegateSignature, TargetButton) == 0x000008, "Member 'WB_PvE_C_BndEvt__WB_CommonButton_Return_K2Node_ComponentBoundEvent_3_OnAJBButtonEvent__DelegateSignature::TargetButton' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.UpdateGameDifficulty
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_C_UpdateGameDifficulty final
{
public:
	EPvEGameDifficulty                            GameDifficulty;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PvE_C_UpdateGameDifficulty) == 0x000001, "Wrong alignment on WB_PvE_C_UpdateGameDifficulty");
static_assert(sizeof(WB_PvE_C_UpdateGameDifficulty) == 0x000001, "Wrong size on WB_PvE_C_UpdateGameDifficulty");
static_assert(offsetof(WB_PvE_C_UpdateGameDifficulty, GameDifficulty) == 0x000000, "Member 'WB_PvE_C_UpdateGameDifficulty::GameDifficulty' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.BndEvt__WB_ArrowButton_CPULevelUp_K2Node_ComponentBoundEvent_2_OnAJBButtonEvent__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct WB_PvE_C_BndEvt__WB_ArrowButton_CPULevelUp_K2Node_ComponentBoundEvent_2_OnAJBButtonEvent__DelegateSignature final
{
public:
	class UAJBButtonWidget*                       OwnerWidget;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAJBButton*                             TargetButton;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PvE_C_BndEvt__WB_ArrowButton_CPULevelUp_K2Node_ComponentBoundEvent_2_OnAJBButtonEvent__DelegateSignature) == 0x000008, "Wrong alignment on WB_PvE_C_BndEvt__WB_ArrowButton_CPULevelUp_K2Node_ComponentBoundEvent_2_OnAJBButtonEvent__DelegateSignature");
static_assert(sizeof(WB_PvE_C_BndEvt__WB_ArrowButton_CPULevelUp_K2Node_ComponentBoundEvent_2_OnAJBButtonEvent__DelegateSignature) == 0x000010, "Wrong size on WB_PvE_C_BndEvt__WB_ArrowButton_CPULevelUp_K2Node_ComponentBoundEvent_2_OnAJBButtonEvent__DelegateSignature");
static_assert(offsetof(WB_PvE_C_BndEvt__WB_ArrowButton_CPULevelUp_K2Node_ComponentBoundEvent_2_OnAJBButtonEvent__DelegateSignature, OwnerWidget) == 0x000000, "Member 'WB_PvE_C_BndEvt__WB_ArrowButton_CPULevelUp_K2Node_ComponentBoundEvent_2_OnAJBButtonEvent__DelegateSignature::OwnerWidget' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_BndEvt__WB_ArrowButton_CPULevelUp_K2Node_ComponentBoundEvent_2_OnAJBButtonEvent__DelegateSignature, TargetButton) == 0x000008, "Member 'WB_PvE_C_BndEvt__WB_ArrowButton_CPULevelUp_K2Node_ComponentBoundEvent_2_OnAJBButtonEvent__DelegateSignature::TargetButton' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.BndEvt__WB_ArrowButton_CPULevelDown_K2Node_ComponentBoundEvent_1_OnAJBButtonEvent__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct WB_PvE_C_BndEvt__WB_ArrowButton_CPULevelDown_K2Node_ComponentBoundEvent_1_OnAJBButtonEvent__DelegateSignature final
{
public:
	class UAJBButtonWidget*                       OwnerWidget;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAJBButton*                             TargetButton;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PvE_C_BndEvt__WB_ArrowButton_CPULevelDown_K2Node_ComponentBoundEvent_1_OnAJBButtonEvent__DelegateSignature) == 0x000008, "Wrong alignment on WB_PvE_C_BndEvt__WB_ArrowButton_CPULevelDown_K2Node_ComponentBoundEvent_1_OnAJBButtonEvent__DelegateSignature");
static_assert(sizeof(WB_PvE_C_BndEvt__WB_ArrowButton_CPULevelDown_K2Node_ComponentBoundEvent_1_OnAJBButtonEvent__DelegateSignature) == 0x000010, "Wrong size on WB_PvE_C_BndEvt__WB_ArrowButton_CPULevelDown_K2Node_ComponentBoundEvent_1_OnAJBButtonEvent__DelegateSignature");
static_assert(offsetof(WB_PvE_C_BndEvt__WB_ArrowButton_CPULevelDown_K2Node_ComponentBoundEvent_1_OnAJBButtonEvent__DelegateSignature, OwnerWidget) == 0x000000, "Member 'WB_PvE_C_BndEvt__WB_ArrowButton_CPULevelDown_K2Node_ComponentBoundEvent_1_OnAJBButtonEvent__DelegateSignature::OwnerWidget' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_BndEvt__WB_ArrowButton_CPULevelDown_K2Node_ComponentBoundEvent_1_OnAJBButtonEvent__DelegateSignature, TargetButton) == 0x000008, "Member 'WB_PvE_C_BndEvt__WB_ArrowButton_CPULevelDown_K2Node_ComponentBoundEvent_1_OnAJBButtonEvent__DelegateSignature::TargetButton' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.BndEvt__WB_CommonButton_START_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct WB_PvE_C_BndEvt__WB_CommonButton_START_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature final
{
public:
	class UAJBButtonWidget*                       OwnerWidget;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAJBButton*                             TargetButton;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PvE_C_BndEvt__WB_CommonButton_START_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature) == 0x000008, "Wrong alignment on WB_PvE_C_BndEvt__WB_CommonButton_START_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature");
static_assert(sizeof(WB_PvE_C_BndEvt__WB_CommonButton_START_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature) == 0x000010, "Wrong size on WB_PvE_C_BndEvt__WB_CommonButton_START_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature");
static_assert(offsetof(WB_PvE_C_BndEvt__WB_CommonButton_START_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature, OwnerWidget) == 0x000000, "Member 'WB_PvE_C_BndEvt__WB_CommonButton_START_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature::OwnerWidget' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_BndEvt__WB_CommonButton_START_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature, TargetButton) == 0x000008, "Member 'WB_PvE_C_BndEvt__WB_CommonButton_START_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature::TargetButton' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.Tick
// 0x003C (0x003C - 0x0000)
struct WB_PvE_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PvE_C_Tick) == 0x000004, "Wrong alignment on WB_PvE_C_Tick");
static_assert(sizeof(WB_PvE_C_Tick) == 0x00003C, "Wrong size on WB_PvE_C_Tick");
static_assert(offsetof(WB_PvE_C_Tick, MyGeometry) == 0x000000, "Member 'WB_PvE_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_Tick, InDeltaTime) == 0x000038, "Member 'WB_PvE_C_Tick::InDeltaTime' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.SetTimeCountDownRemainingTime
// 0x0004 (0x0004 - 0x0000)
struct WB_PvE_C_SetTimeCountDownRemainingTime final
{
public:
	float                                         RemainingTime_0;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PvE_C_SetTimeCountDownRemainingTime) == 0x000004, "Wrong alignment on WB_PvE_C_SetTimeCountDownRemainingTime");
static_assert(sizeof(WB_PvE_C_SetTimeCountDownRemainingTime) == 0x000004, "Wrong size on WB_PvE_C_SetTimeCountDownRemainingTime");
static_assert(offsetof(WB_PvE_C_SetTimeCountDownRemainingTime, RemainingTime_0) == 0x000000, "Member 'WB_PvE_C_SetTimeCountDownRemainingTime::RemainingTime_0' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.GetNextPvEGameDifficulty
// 0x0008 (0x0008 - 0x0000)
struct WB_PvE_C_GetNextPvEGameDifficulty final
{
public:
	EPvEGameDifficulty                            Difficulty;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            NextDifficulty;                                    // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            Temp_byte_Variable1;                               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            Temp_byte_Variable2;                               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            Temp_byte_Variable3;                               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            Temp_byte_Variable4;                               // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            K2Node_Select_Default;                             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PvE_C_GetNextPvEGameDifficulty) == 0x000001, "Wrong alignment on WB_PvE_C_GetNextPvEGameDifficulty");
static_assert(sizeof(WB_PvE_C_GetNextPvEGameDifficulty) == 0x000008, "Wrong size on WB_PvE_C_GetNextPvEGameDifficulty");
static_assert(offsetof(WB_PvE_C_GetNextPvEGameDifficulty, Difficulty) == 0x000000, "Member 'WB_PvE_C_GetNextPvEGameDifficulty::Difficulty' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_GetNextPvEGameDifficulty, NextDifficulty) == 0x000001, "Member 'WB_PvE_C_GetNextPvEGameDifficulty::NextDifficulty' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_GetNextPvEGameDifficulty, Temp_byte_Variable) == 0x000002, "Member 'WB_PvE_C_GetNextPvEGameDifficulty::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_GetNextPvEGameDifficulty, Temp_byte_Variable1) == 0x000003, "Member 'WB_PvE_C_GetNextPvEGameDifficulty::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_GetNextPvEGameDifficulty, Temp_byte_Variable2) == 0x000004, "Member 'WB_PvE_C_GetNextPvEGameDifficulty::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_GetNextPvEGameDifficulty, Temp_byte_Variable3) == 0x000005, "Member 'WB_PvE_C_GetNextPvEGameDifficulty::Temp_byte_Variable3' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_GetNextPvEGameDifficulty, Temp_byte_Variable4) == 0x000006, "Member 'WB_PvE_C_GetNextPvEGameDifficulty::Temp_byte_Variable4' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_GetNextPvEGameDifficulty, K2Node_Select_Default) == 0x000007, "Member 'WB_PvE_C_GetNextPvEGameDifficulty::K2Node_Select_Default' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.GetPreviousPvEGameDifficulty
// 0x0008 (0x0008 - 0x0000)
struct WB_PvE_C_GetPreviousPvEGameDifficulty final
{
public:
	EPvEGameDifficulty                            Difficulty;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            PreviousDifficulty;                                // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            Temp_byte_Variable1;                               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            Temp_byte_Variable2;                               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            Temp_byte_Variable3;                               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            Temp_byte_Variable4;                               // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            K2Node_Select_Default;                             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PvE_C_GetPreviousPvEGameDifficulty) == 0x000001, "Wrong alignment on WB_PvE_C_GetPreviousPvEGameDifficulty");
static_assert(sizeof(WB_PvE_C_GetPreviousPvEGameDifficulty) == 0x000008, "Wrong size on WB_PvE_C_GetPreviousPvEGameDifficulty");
static_assert(offsetof(WB_PvE_C_GetPreviousPvEGameDifficulty, Difficulty) == 0x000000, "Member 'WB_PvE_C_GetPreviousPvEGameDifficulty::Difficulty' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_GetPreviousPvEGameDifficulty, PreviousDifficulty) == 0x000001, "Member 'WB_PvE_C_GetPreviousPvEGameDifficulty::PreviousDifficulty' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_GetPreviousPvEGameDifficulty, Temp_byte_Variable) == 0x000002, "Member 'WB_PvE_C_GetPreviousPvEGameDifficulty::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_GetPreviousPvEGameDifficulty, Temp_byte_Variable1) == 0x000003, "Member 'WB_PvE_C_GetPreviousPvEGameDifficulty::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_GetPreviousPvEGameDifficulty, Temp_byte_Variable2) == 0x000004, "Member 'WB_PvE_C_GetPreviousPvEGameDifficulty::Temp_byte_Variable2' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_GetPreviousPvEGameDifficulty, Temp_byte_Variable3) == 0x000005, "Member 'WB_PvE_C_GetPreviousPvEGameDifficulty::Temp_byte_Variable3' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_GetPreviousPvEGameDifficulty, Temp_byte_Variable4) == 0x000006, "Member 'WB_PvE_C_GetPreviousPvEGameDifficulty::Temp_byte_Variable4' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_GetPreviousPvEGameDifficulty, K2Node_Select_Default) == 0x000007, "Member 'WB_PvE_C_GetPreviousPvEGameDifficulty::K2Node_Select_Default' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.SetPvEGameDifficultyText
// 0x0038 (0x0038 - 0x0000)
struct WB_PvE_C_SetPvEGameDifficultyText final
{
public:
	EPvEGameDifficulty                            Difficulty;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetAJBPvEGameDifficultyText_Title;        // 0x0008(0x0018)()
	class FText                                   CallFunc_GetAJBPvEGameDifficultyText_Level;        // 0x0020(0x0018)()
};
static_assert(alignof(WB_PvE_C_SetPvEGameDifficultyText) == 0x000008, "Wrong alignment on WB_PvE_C_SetPvEGameDifficultyText");
static_assert(sizeof(WB_PvE_C_SetPvEGameDifficultyText) == 0x000038, "Wrong size on WB_PvE_C_SetPvEGameDifficultyText");
static_assert(offsetof(WB_PvE_C_SetPvEGameDifficultyText, Difficulty) == 0x000000, "Member 'WB_PvE_C_SetPvEGameDifficultyText::Difficulty' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_SetPvEGameDifficultyText, CallFunc_GetAJBPvEGameDifficultyText_Title) == 0x000008, "Member 'WB_PvE_C_SetPvEGameDifficultyText::CallFunc_GetAJBPvEGameDifficultyText_Title' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_SetPvEGameDifficultyText, CallFunc_GetAJBPvEGameDifficultyText_Level) == 0x000020, "Member 'WB_PvE_C_SetPvEGameDifficultyText::CallFunc_GetAJBPvEGameDifficultyText_Level' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.OnInputTurnRate
// 0x0008 (0x0008 - 0x0000)
struct WB_PvE_C_OnInputTurnRate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_C_OnInputTurnRate) == 0x000004, "Wrong alignment on WB_PvE_C_OnInputTurnRate");
static_assert(sizeof(WB_PvE_C_OnInputTurnRate) == 0x000008, "Wrong size on WB_PvE_C_OnInputTurnRate");
static_assert(offsetof(WB_PvE_C_OnInputTurnRate, Value) == 0x000000, "Member 'WB_PvE_C_OnInputTurnRate::Value' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_OnInputTurnRate, ReturnValue) == 0x000004, "Member 'WB_PvE_C_OnInputTurnRate::ReturnValue' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.OnInputReleasedUp
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_C_OnInputReleasedUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_C_OnInputReleasedUp) == 0x000001, "Wrong alignment on WB_PvE_C_OnInputReleasedUp");
static_assert(sizeof(WB_PvE_C_OnInputReleasedUp) == 0x000001, "Wrong size on WB_PvE_C_OnInputReleasedUp");
static_assert(offsetof(WB_PvE_C_OnInputReleasedUp, ReturnValue) == 0x000000, "Member 'WB_PvE_C_OnInputReleasedUp::ReturnValue' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.OnInputReleasedTouch
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_C_OnInputReleasedTouch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_C_OnInputReleasedTouch) == 0x000001, "Wrong alignment on WB_PvE_C_OnInputReleasedTouch");
static_assert(sizeof(WB_PvE_C_OnInputReleasedTouch) == 0x000001, "Wrong size on WB_PvE_C_OnInputReleasedTouch");
static_assert(offsetof(WB_PvE_C_OnInputReleasedTouch, ReturnValue) == 0x000000, "Member 'WB_PvE_C_OnInputReleasedTouch::ReturnValue' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.OnInputReleasedRight
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_C_OnInputReleasedRight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_C_OnInputReleasedRight) == 0x000001, "Wrong alignment on WB_PvE_C_OnInputReleasedRight");
static_assert(sizeof(WB_PvE_C_OnInputReleasedRight) == 0x000001, "Wrong size on WB_PvE_C_OnInputReleasedRight");
static_assert(offsetof(WB_PvE_C_OnInputReleasedRight, ReturnValue) == 0x000000, "Member 'WB_PvE_C_OnInputReleasedRight::ReturnValue' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.OnInputReleasedLeft
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_C_OnInputReleasedLeft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_C_OnInputReleasedLeft) == 0x000001, "Wrong alignment on WB_PvE_C_OnInputReleasedLeft");
static_assert(sizeof(WB_PvE_C_OnInputReleasedLeft) == 0x000001, "Wrong size on WB_PvE_C_OnInputReleasedLeft");
static_assert(offsetof(WB_PvE_C_OnInputReleasedLeft, ReturnValue) == 0x000000, "Member 'WB_PvE_C_OnInputReleasedLeft::ReturnValue' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.OnInputReleasedDown
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_C_OnInputReleasedDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_C_OnInputReleasedDown) == 0x000001, "Wrong alignment on WB_PvE_C_OnInputReleasedDown");
static_assert(sizeof(WB_PvE_C_OnInputReleasedDown) == 0x000001, "Wrong size on WB_PvE_C_OnInputReleasedDown");
static_assert(offsetof(WB_PvE_C_OnInputReleasedDown, ReturnValue) == 0x000000, "Member 'WB_PvE_C_OnInputReleasedDown::ReturnValue' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.OnInputReleasedDecide
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_C_OnInputReleasedDecide final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_C_OnInputReleasedDecide) == 0x000001, "Wrong alignment on WB_PvE_C_OnInputReleasedDecide");
static_assert(sizeof(WB_PvE_C_OnInputReleasedDecide) == 0x000001, "Wrong size on WB_PvE_C_OnInputReleasedDecide");
static_assert(offsetof(WB_PvE_C_OnInputReleasedDecide, ReturnValue) == 0x000000, "Member 'WB_PvE_C_OnInputReleasedDecide::ReturnValue' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.OnInputReleasedCancel
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_C_OnInputReleasedCancel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_C_OnInputReleasedCancel) == 0x000001, "Wrong alignment on WB_PvE_C_OnInputReleasedCancel");
static_assert(sizeof(WB_PvE_C_OnInputReleasedCancel) == 0x000001, "Wrong size on WB_PvE_C_OnInputReleasedCancel");
static_assert(offsetof(WB_PvE_C_OnInputReleasedCancel, ReturnValue) == 0x000000, "Member 'WB_PvE_C_OnInputReleasedCancel::ReturnValue' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.OnInputPressedUp
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_C_OnInputPressedUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_C_OnInputPressedUp) == 0x000001, "Wrong alignment on WB_PvE_C_OnInputPressedUp");
static_assert(sizeof(WB_PvE_C_OnInputPressedUp) == 0x000001, "Wrong size on WB_PvE_C_OnInputPressedUp");
static_assert(offsetof(WB_PvE_C_OnInputPressedUp, ReturnValue) == 0x000000, "Member 'WB_PvE_C_OnInputPressedUp::ReturnValue' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.OnInputPressedTouch
// 0x000C (0x000C - 0x0000)
struct WB_PvE_C_OnInputPressedTouch final
{
public:
	float                                         LocationX;                                         // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LocationY;                                         // 0x0004(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_C_OnInputPressedTouch) == 0x000004, "Wrong alignment on WB_PvE_C_OnInputPressedTouch");
static_assert(sizeof(WB_PvE_C_OnInputPressedTouch) == 0x00000C, "Wrong size on WB_PvE_C_OnInputPressedTouch");
static_assert(offsetof(WB_PvE_C_OnInputPressedTouch, LocationX) == 0x000000, "Member 'WB_PvE_C_OnInputPressedTouch::LocationX' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_OnInputPressedTouch, LocationY) == 0x000004, "Member 'WB_PvE_C_OnInputPressedTouch::LocationY' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_OnInputPressedTouch, ReturnValue) == 0x000008, "Member 'WB_PvE_C_OnInputPressedTouch::ReturnValue' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.OnInputPressedRight
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_C_OnInputPressedRight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_C_OnInputPressedRight) == 0x000001, "Wrong alignment on WB_PvE_C_OnInputPressedRight");
static_assert(sizeof(WB_PvE_C_OnInputPressedRight) == 0x000001, "Wrong size on WB_PvE_C_OnInputPressedRight");
static_assert(offsetof(WB_PvE_C_OnInputPressedRight, ReturnValue) == 0x000000, "Member 'WB_PvE_C_OnInputPressedRight::ReturnValue' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.OnInputPressedLeft
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_C_OnInputPressedLeft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_C_OnInputPressedLeft) == 0x000001, "Wrong alignment on WB_PvE_C_OnInputPressedLeft");
static_assert(sizeof(WB_PvE_C_OnInputPressedLeft) == 0x000001, "Wrong size on WB_PvE_C_OnInputPressedLeft");
static_assert(offsetof(WB_PvE_C_OnInputPressedLeft, ReturnValue) == 0x000000, "Member 'WB_PvE_C_OnInputPressedLeft::ReturnValue' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.OnInputPressedDown
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_C_OnInputPressedDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_C_OnInputPressedDown) == 0x000001, "Wrong alignment on WB_PvE_C_OnInputPressedDown");
static_assert(sizeof(WB_PvE_C_OnInputPressedDown) == 0x000001, "Wrong size on WB_PvE_C_OnInputPressedDown");
static_assert(offsetof(WB_PvE_C_OnInputPressedDown, ReturnValue) == 0x000000, "Member 'WB_PvE_C_OnInputPressedDown::ReturnValue' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.OnInputPressedDecide
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_C_OnInputPressedDecide final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_C_OnInputPressedDecide) == 0x000001, "Wrong alignment on WB_PvE_C_OnInputPressedDecide");
static_assert(sizeof(WB_PvE_C_OnInputPressedDecide) == 0x000001, "Wrong size on WB_PvE_C_OnInputPressedDecide");
static_assert(offsetof(WB_PvE_C_OnInputPressedDecide, ReturnValue) == 0x000000, "Member 'WB_PvE_C_OnInputPressedDecide::ReturnValue' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.OnInputPressedCancel
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_C_OnInputPressedCancel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_C_OnInputPressedCancel) == 0x000001, "Wrong alignment on WB_PvE_C_OnInputPressedCancel");
static_assert(sizeof(WB_PvE_C_OnInputPressedCancel) == 0x000001, "Wrong size on WB_PvE_C_OnInputPressedCancel");
static_assert(offsetof(WB_PvE_C_OnInputPressedCancel, ReturnValue) == 0x000000, "Member 'WB_PvE_C_OnInputPressedCancel::ReturnValue' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.OnInputMoveRight
// 0x0008 (0x0008 - 0x0000)
struct WB_PvE_C_OnInputMoveRight final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_C_OnInputMoveRight) == 0x000004, "Wrong alignment on WB_PvE_C_OnInputMoveRight");
static_assert(sizeof(WB_PvE_C_OnInputMoveRight) == 0x000008, "Wrong size on WB_PvE_C_OnInputMoveRight");
static_assert(offsetof(WB_PvE_C_OnInputMoveRight, Value) == 0x000000, "Member 'WB_PvE_C_OnInputMoveRight::Value' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_OnInputMoveRight, ReturnValue) == 0x000004, "Member 'WB_PvE_C_OnInputMoveRight::ReturnValue' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.OnInputMoveForward
// 0x0008 (0x0008 - 0x0000)
struct WB_PvE_C_OnInputMoveForward final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_C_OnInputMoveForward) == 0x000004, "Wrong alignment on WB_PvE_C_OnInputMoveForward");
static_assert(sizeof(WB_PvE_C_OnInputMoveForward) == 0x000008, "Wrong size on WB_PvE_C_OnInputMoveForward");
static_assert(offsetof(WB_PvE_C_OnInputMoveForward, Value) == 0x000000, "Member 'WB_PvE_C_OnInputMoveForward::Value' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_OnInputMoveForward, ReturnValue) == 0x000004, "Member 'WB_PvE_C_OnInputMoveForward::ReturnValue' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.OnInputLookupRate
// 0x0008 (0x0008 - 0x0000)
struct WB_PvE_C_OnInputLookupRate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_C_OnInputLookupRate) == 0x000004, "Wrong alignment on WB_PvE_C_OnInputLookupRate");
static_assert(sizeof(WB_PvE_C_OnInputLookupRate) == 0x000008, "Wrong size on WB_PvE_C_OnInputLookupRate");
static_assert(offsetof(WB_PvE_C_OnInputLookupRate, Value) == 0x000000, "Member 'WB_PvE_C_OnInputLookupRate::Value' has a wrong offset!");
static_assert(offsetof(WB_PvE_C_OnInputLookupRate, ReturnValue) == 0x000004, "Member 'WB_PvE_C_OnInputLookupRate::ReturnValue' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.IsModeless
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_C_IsModeless final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_C_IsModeless) == 0x000001, "Wrong alignment on WB_PvE_C_IsModeless");
static_assert(sizeof(WB_PvE_C_IsModeless) == 0x000001, "Wrong size on WB_PvE_C_IsModeless");
static_assert(offsetof(WB_PvE_C_IsModeless, ReturnValue) == 0x000000, "Member 'WB_PvE_C_IsModeless::ReturnValue' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.OnInputReleasedR2
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_C_OnInputReleasedR2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_C_OnInputReleasedR2) == 0x000001, "Wrong alignment on WB_PvE_C_OnInputReleasedR2");
static_assert(sizeof(WB_PvE_C_OnInputReleasedR2) == 0x000001, "Wrong size on WB_PvE_C_OnInputReleasedR2");
static_assert(offsetof(WB_PvE_C_OnInputReleasedR2, ReturnValue) == 0x000000, "Member 'WB_PvE_C_OnInputReleasedR2::ReturnValue' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.OnInputReleasedR1
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_C_OnInputReleasedR1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_C_OnInputReleasedR1) == 0x000001, "Wrong alignment on WB_PvE_C_OnInputReleasedR1");
static_assert(sizeof(WB_PvE_C_OnInputReleasedR1) == 0x000001, "Wrong size on WB_PvE_C_OnInputReleasedR1");
static_assert(offsetof(WB_PvE_C_OnInputReleasedR1, ReturnValue) == 0x000000, "Member 'WB_PvE_C_OnInputReleasedR1::ReturnValue' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.OnInputReleasedL2
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_C_OnInputReleasedL2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_C_OnInputReleasedL2) == 0x000001, "Wrong alignment on WB_PvE_C_OnInputReleasedL2");
static_assert(sizeof(WB_PvE_C_OnInputReleasedL2) == 0x000001, "Wrong size on WB_PvE_C_OnInputReleasedL2");
static_assert(offsetof(WB_PvE_C_OnInputReleasedL2, ReturnValue) == 0x000000, "Member 'WB_PvE_C_OnInputReleasedL2::ReturnValue' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.OnInputReleasedL1
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_C_OnInputReleasedL1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_C_OnInputReleasedL1) == 0x000001, "Wrong alignment on WB_PvE_C_OnInputReleasedL1");
static_assert(sizeof(WB_PvE_C_OnInputReleasedL1) == 0x000001, "Wrong size on WB_PvE_C_OnInputReleasedL1");
static_assert(offsetof(WB_PvE_C_OnInputReleasedL1, ReturnValue) == 0x000000, "Member 'WB_PvE_C_OnInputReleasedL1::ReturnValue' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.OnInputPressedR2
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_C_OnInputPressedR2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_C_OnInputPressedR2) == 0x000001, "Wrong alignment on WB_PvE_C_OnInputPressedR2");
static_assert(sizeof(WB_PvE_C_OnInputPressedR2) == 0x000001, "Wrong size on WB_PvE_C_OnInputPressedR2");
static_assert(offsetof(WB_PvE_C_OnInputPressedR2, ReturnValue) == 0x000000, "Member 'WB_PvE_C_OnInputPressedR2::ReturnValue' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.OnInputPressedR1
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_C_OnInputPressedR1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_C_OnInputPressedR1) == 0x000001, "Wrong alignment on WB_PvE_C_OnInputPressedR1");
static_assert(sizeof(WB_PvE_C_OnInputPressedR1) == 0x000001, "Wrong size on WB_PvE_C_OnInputPressedR1");
static_assert(offsetof(WB_PvE_C_OnInputPressedR1, ReturnValue) == 0x000000, "Member 'WB_PvE_C_OnInputPressedR1::ReturnValue' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.OnInputPressedL2
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_C_OnInputPressedL2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_C_OnInputPressedL2) == 0x000001, "Wrong alignment on WB_PvE_C_OnInputPressedL2");
static_assert(sizeof(WB_PvE_C_OnInputPressedL2) == 0x000001, "Wrong size on WB_PvE_C_OnInputPressedL2");
static_assert(offsetof(WB_PvE_C_OnInputPressedL2, ReturnValue) == 0x000000, "Member 'WB_PvE_C_OnInputPressedL2::ReturnValue' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.OnInputPressedL1
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_C_OnInputPressedL1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_C_OnInputPressedL1) == 0x000001, "Wrong alignment on WB_PvE_C_OnInputPressedL1");
static_assert(sizeof(WB_PvE_C_OnInputPressedL1) == 0x000001, "Wrong size on WB_PvE_C_OnInputPressedL1");
static_assert(offsetof(WB_PvE_C_OnInputPressedL1, ReturnValue) == 0x000000, "Member 'WB_PvE_C_OnInputPressedL1::ReturnValue' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.OnInputReleasedL3
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_C_OnInputReleasedL3 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_C_OnInputReleasedL3) == 0x000001, "Wrong alignment on WB_PvE_C_OnInputReleasedL3");
static_assert(sizeof(WB_PvE_C_OnInputReleasedL3) == 0x000001, "Wrong size on WB_PvE_C_OnInputReleasedL3");
static_assert(offsetof(WB_PvE_C_OnInputReleasedL3, ReturnValue) == 0x000000, "Member 'WB_PvE_C_OnInputReleasedL3::ReturnValue' has a wrong offset!");

// Function WB_PvE.WB_PvE_C.OnInputPressedL3
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_C_OnInputPressedL3 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_C_OnInputPressedL3) == 0x000001, "Wrong alignment on WB_PvE_C_OnInputPressedL3");
static_assert(sizeof(WB_PvE_C_OnInputPressedL3) == 0x000001, "Wrong size on WB_PvE_C_OnInputPressedL3");
static_assert(offsetof(WB_PvE_C_OnInputPressedL3, ReturnValue) == 0x000000, "Member 'WB_PvE_C_OnInputPressedL3::ReturnValue' has a wrong offset!");

}

