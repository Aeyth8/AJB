#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameCharacter_CSR

#include "Basic.hpp"

#include "BP_AJBInGameCharacter_CSR_classes.hpp"
#include "BP_AJBInGameCharacter_CSR_parameters.hpp"


namespace SDK
{

// Function BP_AJBInGameCharacter_CSR.BP_AJBInGameCharacter_CSR_C.ExecuteUbergraph_BP_AJBInGameCharacter_CSR
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameCharacter_CSR_C::ExecuteUbergraph_BP_AJBInGameCharacter_CSR(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameCharacter_CSR_C", "ExecuteUbergraph_BP_AJBInGameCharacter_CSR");

	Params::BP_AJBInGameCharacter_CSR_C_ExecuteUbergraph_BP_AJBInGameCharacter_CSR Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameCharacter_CSR.BP_AJBInGameCharacter_CSR_C.SprinkleSP_Impl
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameCharacter_CSR_C::SprinkleSP_Impl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameCharacter_CSR_C", "SprinkleSP_Impl");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameCharacter_CSR.BP_AJBInGameCharacter_CSR_C.CharacterDead(Server)_Impl
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayTag&              DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   SerialNumber                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AttackDistance                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   KilledCharacterId                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WithSeparatedStandAttack                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HitEnemysSeparatedStand                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   UltimateSkillSerialNumberIfInEffect                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WasCriticalState                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   DeadPlayerId                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsDelayedSpecialDeath_0                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameCharacter_CSR_C::CharacterDead_Server__Impl(class AActor* DamageCauser, const struct FGameplayTag& DamageType, int32 SerialNumber, float AttackDistance, uint8 KilledCharacterId, bool WithSeparatedStandAttack, bool HitEnemysSeparatedStand, int32 UltimateSkillSerialNumberIfInEffect, bool WasCriticalState, int32 DeadPlayerId, bool IsDelayedSpecialDeath_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameCharacter_CSR_C", "CharacterDead(Server)_Impl");

	Params::BP_AJBInGameCharacter_CSR_C_CharacterDead_Server__Impl Parms{};

	Parms.DamageCauser = DamageCauser;
	Parms.DamageType = std::move(DamageType);
	Parms.SerialNumber = SerialNumber;
	Parms.AttackDistance = AttackDistance;
	Parms.KilledCharacterId = KilledCharacterId;
	Parms.WithSeparatedStandAttack = WithSeparatedStandAttack;
	Parms.HitEnemysSeparatedStand = HitEnemysSeparatedStand;
	Parms.UltimateSkillSerialNumberIfInEffect = UltimateSkillSerialNumberIfInEffect;
	Parms.WasCriticalState = WasCriticalState;
	Parms.DeadPlayerId = DeadPlayerId;
	Parms.IsDelayedSpecialDeath_0 = IsDelayedSpecialDeath_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameCharacter_CSR.BP_AJBInGameCharacter_CSR_C.GetBubbleCutterShotPointComponents
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class USceneComponent*>*         ShotPointComponents                                    (Parm, OutParm, ZeroConstructor)

void ABP_AJBInGameCharacter_CSR_C::GetBubbleCutterShotPointComponents(TArray<class USceneComponent*>* ShotPointComponents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameCharacter_CSR_C", "GetBubbleCutterShotPointComponents");

	Params::BP_AJBInGameCharacter_CSR_C_GetBubbleCutterShotPointComponents Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ShotPointComponents != nullptr)
		*ShotPointComponents = std::move(Parms.ShotPointComponents);
}


// Function BP_AJBInGameCharacter_CSR.BP_AJBInGameCharacter_CSR_C.GetBubbleLauncherShotPointComponents
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class USceneComponent*>*         ShotPointComponents                                    (Parm, OutParm, ZeroConstructor)

void ABP_AJBInGameCharacter_CSR_C::GetBubbleLauncherShotPointComponents(TArray<class USceneComponent*>* ShotPointComponents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameCharacter_CSR_C", "GetBubbleLauncherShotPointComponents");

	Params::BP_AJBInGameCharacter_CSR_C_GetBubbleLauncherShotPointComponents Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ShotPointComponents != nullptr)
		*ShotPointComponents = std::move(Parms.ShotPointComponents);
}


// Function BP_AJBInGameCharacter_CSR.BP_AJBInGameCharacter_CSR_C.GetBubbleLauncherShotPointDummyComponents
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class USceneComponent*>*         ShotPointComponents                                    (Parm, OutParm, ZeroConstructor)

void ABP_AJBInGameCharacter_CSR_C::GetBubbleLauncherShotPointDummyComponents(TArray<class USceneComponent*>* ShotPointComponents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameCharacter_CSR_C", "GetBubbleLauncherShotPointDummyComponents");

	Params::BP_AJBInGameCharacter_CSR_C_GetBubbleLauncherShotPointDummyComponents Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ShotPointComponents != nullptr)
		*ShotPointComponents = std::move(Parms.ShotPointComponents);
}


// Function BP_AJBInGameCharacter_CSR.BP_AJBInGameCharacter_CSR_C.GetHamonSkillByTag
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FGameplayTag&              SkillTag                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// TScriptInterface<class IBI_HamonTypeSkill_C>*HamonSkill                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameCharacter_CSR_C::GetHamonSkillByTag(const struct FGameplayTag& SkillTag, TScriptInterface<class IBI_HamonTypeSkill_C>* HamonSkill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameCharacter_CSR_C", "GetHamonSkillByTag");

	Params::BP_AJBInGameCharacter_CSR_C_GetHamonSkillByTag Parms{};

	Parms.SkillTag = std::move(SkillTag);

	UObject::ProcessEvent(Func, &Parms);

	if (HamonSkill != nullptr)
		*HamonSkill = Parms.HamonSkill;
}


// Function BP_AJBInGameCharacter_CSR.BP_AJBInGameCharacter_CSR_C.GetBubbleLensShotPointComponents
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class USceneComponent*>*         ShotPointComponents                                    (Parm, OutParm, ZeroConstructor)

void ABP_AJBInGameCharacter_CSR_C::GetBubbleLensShotPointComponents(TArray<class USceneComponent*>* ShotPointComponents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameCharacter_CSR_C", "GetBubbleLensShotPointComponents");

	Params::BP_AJBInGameCharacter_CSR_C_GetBubbleLensShotPointComponents Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ShotPointComponents != nullptr)
		*ShotPointComponents = std::move(Parms.ShotPointComponents);
}


// Function BP_AJBInGameCharacter_CSR.BP_AJBInGameCharacter_CSR_C.GetDummyShotLocation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         Location                                               (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameCharacter_CSR_C::GetDummyShotLocation(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameCharacter_CSR_C", "GetDummyShotLocation");

	Params::BP_AJBInGameCharacter_CSR_C_GetDummyShotLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function BP_AJBInGameCharacter_CSR.BP_AJBInGameCharacter_CSR_C.ShouldShowNGPoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   bResult                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameCharacter_CSR_C::ShouldShowNGPoint(bool* bResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameCharacter_CSR_C", "ShouldShowNGPoint");

	Params::BP_AJBInGameCharacter_CSR_C_ShouldShowNGPoint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bResult != nullptr)
		*bResult = Parms.bResult;
}


// Function BP_AJBInGameCharacter_CSR.BP_AJBInGameCharacter_CSR_C.GetShutTraceRadius
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float*                                  Radius                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameCharacter_CSR_C::GetShutTraceRadius(float* Radius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameCharacter_CSR_C", "GetShutTraceRadius");

	Params::BP_AJBInGameCharacter_CSR_C_GetShutTraceRadius Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Radius != nullptr)
		*Radius = Parms.Radius;
}


// Function BP_AJBInGameCharacter_CSR.BP_AJBInGameCharacter_CSR_C.GetShotLocation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bConsiderCharacterCapsuleRadius                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FGameplayTag&              SkillTag                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVector>*                 Locations                                              (Parm, OutParm, ZeroConstructor)

void ABP_AJBInGameCharacter_CSR_C::GetShotLocation(bool bConsiderCharacterCapsuleRadius, const struct FGameplayTag& SkillTag, TArray<struct FVector>* Locations)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameCharacter_CSR_C", "GetShotLocation");

	Params::BP_AJBInGameCharacter_CSR_C_GetShotLocation Parms{};

	Parms.bConsiderCharacterCapsuleRadius = bConsiderCharacterCapsuleRadius;
	Parms.SkillTag = std::move(SkillTag);

	UObject::ProcessEvent(Func, &Parms);

	if (Locations != nullptr)
		*Locations = std::move(Parms.Locations);
}


// Function BP_AJBInGameCharacter_CSR.BP_AJBInGameCharacter_CSR_C.CheckLocallyControlled
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   bLocallyControlled                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameCharacter_CSR_C::CheckLocallyControlled(bool* bLocallyControlled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameCharacter_CSR_C", "CheckLocallyControlled");

	Params::BP_AJBInGameCharacter_CSR_C_CheckLocallyControlled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bLocallyControlled != nullptr)
		*bLocallyControlled = Parms.bLocallyControlled;
}


// Function BP_AJBInGameCharacter_CSR.BP_AJBInGameCharacter_CSR_C.RequestGionOnFalldown
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameCharacter_CSR_C::RequestGionOnFalldown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameCharacter_CSR_C", "RequestGionOnFalldown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameCharacter_CSR.BP_AJBInGameCharacter_CSR_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_AJBInGameCharacter_CSR_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameCharacter_CSR_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameCharacter_CSR.BP_AJBInGameCharacter_CSR_C.OnDamageAreaIn
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameCharacter_CSR_C::OnDamageAreaIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameCharacter_CSR_C", "OnDamageAreaIn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameCharacter_CSR.BP_AJBInGameCharacter_CSR_C.SprinkleSP
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameCharacter_CSR_C::SprinkleSP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameCharacter_CSR_C", "SprinkleSP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameCharacter_CSR.BP_AJBInGameCharacter_CSR_C.ReleasedButton_ActiveBase
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameCharacter_CSR_C::ReleasedButton_ActiveBase()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameCharacter_CSR_C", "ReleasedButton_ActiveBase");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameCharacter_CSR.BP_AJBInGameCharacter_CSR_C.ReleasedButton_ActiveSpecial
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameCharacter_CSR_C::ReleasedButton_ActiveSpecial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameCharacter_CSR_C", "ReleasedButton_ActiveSpecial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameCharacter_CSR.BP_AJBInGameCharacter_CSR_C.PressedButton_ActiveSpecial
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameCharacter_CSR_C::PressedButton_ActiveSpecial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameCharacter_CSR_C", "PressedButton_ActiveSpecial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameCharacter_CSR.BP_AJBInGameCharacter_CSR_C.PressedButton_ActiveBase
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameCharacter_CSR_C::PressedButton_ActiveBase()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameCharacter_CSR_C", "PressedButton_ActiveBase");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameCharacter_CSR.BP_AJBInGameCharacter_CSR_C.ReleasedButton_Basic
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameCharacter_CSR_C::ReleasedButton_Basic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameCharacter_CSR_C", "ReleasedButton_Basic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameCharacter_CSR.BP_AJBInGameCharacter_CSR_C.UpdateCameraInput
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameCharacter_CSR_C::UpdateCameraInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameCharacter_CSR_C", "UpdateCameraInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameCharacter_CSR.BP_AJBInGameCharacter_CSR_C.PressedButton_Ultimate
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameCharacter_CSR_C::PressedButton_Ultimate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameCharacter_CSR_C", "PressedButton_Ultimate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameCharacter_CSR.BP_AJBInGameCharacter_CSR_C.PressedButton_Basic
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameCharacter_CSR_C::PressedButton_Basic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameCharacter_CSR_C", "PressedButton_Basic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameCharacter_CSR.BP_AJBInGameCharacter_CSR_C.NotifyTheWorld
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAJBInGameCharacter*              Operator                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EGeneralTiming                          Timing                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bOperatorIsEmpty                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameCharacter_CSR_C::NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameCharacter_CSR_C", "NotifyTheWorld");

	Params::BP_AJBInGameCharacter_CSR_C_NotifyTheWorld Parms{};

	Parms.Operator = Operator;
	Parms.Time = Time;
	Parms.Timing = Timing;
	Parms.bEnable = bEnable;
	Parms.bOperatorIsEmpty = bOperatorIsEmpty;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameCharacter_CSR.BP_AJBInGameCharacter_CSR_C.CharacterDead_TheMoment
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bWasCriticalState                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameCharacter_CSR_C::CharacterDead_TheMoment(bool bWasCriticalState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameCharacter_CSR_C", "CharacterDead_TheMoment");

	Params::BP_AJBInGameCharacter_CSR_C_CharacterDead_TheMoment Parms{};

	Parms.bWasCriticalState = bWasCriticalState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameCharacter_CSR.BP_AJBInGameCharacter_CSR_C.ROC_Die
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsLastDefeated                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bDiedOfKillZ                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameCharacter_CSR_C::ROC_Die(bool bIsLastDefeated, bool bDiedOfKillZ)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameCharacter_CSR_C", "ROC_Die");

	Params::BP_AJBInGameCharacter_CSR_C_ROC_Die Parms{};

	Parms.bIsLastDefeated = bIsLastDefeated;
	Parms.bDiedOfKillZ = bDiedOfKillZ;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameCharacter_CSR.BP_AJBInGameCharacter_CSR_C.CharacterDead(Server)
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayTag&              DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   SerialNumber                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AttackDistance                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   KilledCharacterId                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WithSeparatedStandAttack                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HitEnemysSeparatedStand                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   UltimateSkillSerialNumberIfInEffect                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WasCriticalState                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   DeadPlayerId                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsDelayedSpecialDeath_0                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameCharacter_CSR_C::CharacterDead_Server_(class AActor* DamageCauser, const struct FGameplayTag& DamageType, int32 SerialNumber, float AttackDistance, uint8 KilledCharacterId, bool WithSeparatedStandAttack, bool HitEnemysSeparatedStand, int32 UltimateSkillSerialNumberIfInEffect, bool WasCriticalState, int32 DeadPlayerId, bool IsDelayedSpecialDeath_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameCharacter_CSR_C", "CharacterDead(Server)");

	Params::BP_AJBInGameCharacter_CSR_C_CharacterDead_Server_ Parms{};

	Parms.DamageCauser = DamageCauser;
	Parms.DamageType = std::move(DamageType);
	Parms.SerialNumber = SerialNumber;
	Parms.AttackDistance = AttackDistance;
	Parms.KilledCharacterId = KilledCharacterId;
	Parms.WithSeparatedStandAttack = WithSeparatedStandAttack;
	Parms.HitEnemysSeparatedStand = HitEnemysSeparatedStand;
	Parms.UltimateSkillSerialNumberIfInEffect = UltimateSkillSerialNumberIfInEffect;
	Parms.WasCriticalState = WasCriticalState;
	Parms.DeadPlayerId = DeadPlayerId;
	Parms.IsDelayedSpecialDeath_0 = IsDelayedSpecialDeath_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGameCharacter_CSR.BP_AJBInGameCharacter_CSR_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGameCharacter_CSR_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameCharacter_CSR_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGameCharacter_CSR.BP_AJBInGameCharacter_CSR_C.CalcDamageRate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           DamagedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayTag&              DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// float*                                  DamageRate                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGameCharacter_CSR_C::CalcDamageRate(class AActor* DamagedActor, const struct FGameplayTag& DamageType, float* DamageRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameCharacter_CSR_C", "CalcDamageRate");

	Params::BP_AJBInGameCharacter_CSR_C_CalcDamageRate Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.DamageType = std::move(DamageType);

	UObject::ProcessEvent(Func, &Parms);

	if (DamageRate != nullptr)
		*DamageRate = Parms.DamageRate;
}


// Function BP_AJBInGameCharacter_CSR.BP_AJBInGameCharacter_CSR_C.OnBeforeInteract
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   bShouldInteract                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameCharacter_CSR_C::OnBeforeInteract(bool* bShouldInteract)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameCharacter_CSR_C", "OnBeforeInteract");

	Params::BP_AJBInGameCharacter_CSR_C_OnBeforeInteract Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bShouldInteract != nullptr)
		*bShouldInteract = Parms.bShouldInteract;
}


// Function BP_AJBInGameCharacter_CSR.BP_AJBInGameCharacter_CSR_C.CheckPossibleDash
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   bPossible                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameCharacter_CSR_C::CheckPossibleDash(bool* bPossible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameCharacter_CSR_C", "CheckPossibleDash");

	Params::BP_AJBInGameCharacter_CSR_C_CheckPossibleDash Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bPossible != nullptr)
		*bPossible = Parms.bPossible;
}


// Function BP_AJBInGameCharacter_CSR.BP_AJBInGameCharacter_CSR_C.CheckAnySkillActiveOnTiltOneDash
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   bAnySkillActive                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameCharacter_CSR_C::CheckAnySkillActiveOnTiltOneDash(bool* bAnySkillActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameCharacter_CSR_C", "CheckAnySkillActiveOnTiltOneDash");

	Params::BP_AJBInGameCharacter_CSR_C_CheckAnySkillActiveOnTiltOneDash Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bAnySkillActive != nullptr)
		*bAnySkillActive = Parms.bAnySkillActive;
}


// Function BP_AJBInGameCharacter_CSR.BP_AJBInGameCharacter_CSR_C.CheckSpecialKill
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_AJBInGameCharacter_C*         DeadCharacterBP                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bSpecialKill                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGameCharacter_CSR_C::CheckSpecialKill(class ABP_AJBInGameCharacter_C* DeadCharacterBP, bool* bSpecialKill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGameCharacter_CSR_C", "CheckSpecialKill");

	Params::BP_AJBInGameCharacter_CSR_C_CheckSpecialKill Parms{};

	Parms.DeadCharacterBP = DeadCharacterBP;

	UObject::ProcessEvent(Func, &Parms);

	if (bSpecialKill != nullptr)
		*bSpecialKill = Parms.bSpecialKill;
}

}

