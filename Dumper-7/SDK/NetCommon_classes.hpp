#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NetCommon

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "NetCommon_structs.hpp"


namespace SDK
{

// Class NetCommon.CNetMessage
// 0x0090 (0x00B8 - 0x0028)
class UCNetMessage final : public UObject
{
public:
	uint8                                         Pad_28[0x90];                                      // 0x0028(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CNetMessage">();
	}
	static class UCNetMessage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCNetMessage>();
	}
};
static_assert(alignof(UCNetMessage) == 0x000008, "Wrong alignment on UCNetMessage");
static_assert(sizeof(UCNetMessage) == 0x0000B8, "Wrong size on UCNetMessage");

// Class NetCommon.NetHttp
// 0x00E0 (0x0108 - 0x0028)
class UNetHttp final : public UObject
{
public:
	uint8                                         Pad_28[0x68];                                      // 0x0028(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RetryCount;                                        // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              RequestTime;                                       // 0x0098(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTimerHandle                           RetryTimer;                                        // 0x00A0(0x0008)(NoDestructor, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 dataBuff;                                          // 0x00A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class FString                                 RequestURL;                                        // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RequestLimitSec;                                   // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RequestSendMaxSeed;                                // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D0[0x18];                                      // 0x00D0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnReceive;                                         // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                   OnError;                                           // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UNetHttp* Create(class UObject* WorldContextObject);

	class UNetHttp* PostRequest(class UObject* WorldContextObject, const class FString& URL, class UNetMessage* Data, float limitSec, int32 SendMaxSpeed);
	class UNetHttp* SetHeader(class UObject* WorldContextObject, const class FString& hashKey, const class FString& UserID, const class FString& session, int32 Language, const class FString& Version, int32 Platform);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NetHttp">();
	}
	static class UNetHttp* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNetHttp>();
	}
};
static_assert(alignof(UNetHttp) == 0x000008, "Wrong alignment on UNetHttp");
static_assert(sizeof(UNetHttp) == 0x000108, "Wrong size on UNetHttp");
static_assert(offsetof(UNetHttp, RetryCount) == 0x000090, "Member 'UNetHttp::RetryCount' has a wrong offset!");
static_assert(offsetof(UNetHttp, RequestTime) == 0x000098, "Member 'UNetHttp::RequestTime' has a wrong offset!");
static_assert(offsetof(UNetHttp, RetryTimer) == 0x0000A0, "Member 'UNetHttp::RetryTimer' has a wrong offset!");
static_assert(offsetof(UNetHttp, dataBuff) == 0x0000A8, "Member 'UNetHttp::dataBuff' has a wrong offset!");
static_assert(offsetof(UNetHttp, RequestURL) == 0x0000B8, "Member 'UNetHttp::RequestURL' has a wrong offset!");
static_assert(offsetof(UNetHttp, RequestLimitSec) == 0x0000C8, "Member 'UNetHttp::RequestLimitSec' has a wrong offset!");
static_assert(offsetof(UNetHttp, RequestSendMaxSeed) == 0x0000CC, "Member 'UNetHttp::RequestSendMaxSeed' has a wrong offset!");
static_assert(offsetof(UNetHttp, OnReceive) == 0x0000E8, "Member 'UNetHttp::OnReceive' has a wrong offset!");
static_assert(offsetof(UNetHttp, OnError) == 0x0000F8, "Member 'UNetHttp::OnError' has a wrong offset!");

// Class NetCommon.NetMessage
// 0x0010 (0x0038 - 0x0028)
class UNetMessage final : public UObject
{
public:
	class UCNetMessage*                           cdata;                                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UNetMessage* Create(class UObject* WorldContextObject);

	class FString Dump(const class FString& prefix);
	class FString DumpHttp(const class FString& prefix);
	class UNetMessage* Set(int32 ID, const TArray<uint8>& Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NetMessage">();
	}
	static class UNetMessage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNetMessage>();
	}
};
static_assert(alignof(UNetMessage) == 0x000008, "Wrong alignment on UNetMessage");
static_assert(sizeof(UNetMessage) == 0x000038, "Wrong size on UNetMessage");
static_assert(offsetof(UNetMessage, cdata) == 0x000028, "Member 'UNetMessage::cdata' has a wrong offset!");

// Class NetCommon.NetSocket
// 0x00C8 (0x00F0 - 0x0028)
class UNetSocket final : public UObject
{
public:
	uint8                                         Pad_28[0xB8];                                      // 0x0028(0x00B8)(Fixing Size After Last Property [ Dumper-7 ])
	UMulticastDelegateProperty_                   OnEvent;                                           // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UNetSocket* Create(class UObject* WorldContextObject);

	void Connect(class UObject* WorldContextObject, const class FString& IP, const class FString& Port, float limitSec);
	void Disconnect(class UObject* WorldContextObject);
	const class FString GetCipherKey();
	ENetSocketCipherMode GetCipherMode();
	bool IsConnected();
	void ReceiveSocket();
	void Send(class UObject* WorldContextObject, class UNetMessage* Data);
	class UNetSocket* SetCipherMode(ENetSocketCipherMode Mode, const class FString& Key);
	class UNetSocket* SetHeader(class UObject* WorldContextObject, const class FString& marker, const class FString& Version, int32 Platform, const class FString& UserID);
	class UNetSocket* SetUseTickReceive(bool use);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NetSocket">();
	}
	static class UNetSocket* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNetSocket>();
	}
};
static_assert(alignof(UNetSocket) == 0x000008, "Wrong alignment on UNetSocket");
static_assert(sizeof(UNetSocket) == 0x0000F0, "Wrong size on UNetSocket");
static_assert(offsetof(UNetSocket, OnEvent) == 0x0000E0, "Member 'UNetSocket::OnEvent' has a wrong offset!");

// Class NetCommon.NetSocketEvent
// 0x0010 (0x0038 - 0x0028)
class UNetSocketEvent final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UNetSocketEvent* Create(class UObject* WorldContextObject);

	class UNetMessage* GetData();
	ENetSocketEventID GetEventID();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NetSocketEvent">();
	}
	static class UNetSocketEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNetSocketEvent>();
	}
};
static_assert(alignof(UNetSocketEvent) == 0x000008, "Wrong alignment on UNetSocketEvent");
static_assert(sizeof(UNetSocketEvent) == 0x000038, "Wrong size on UNetSocketEvent");

}

