#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameProjectileMTLBlade

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_AJBInGameProjectile_Straight_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBInGameProjectileMTLBlade.BP_AJBInGameProjectileMTLBlade_C
// 0x0028 (0x0500 - 0x04D8)
class ABP_AJBInGameProjectileMTLBlade_C final : public ABP_AJBInGameProjectile_Straight_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBInGameProjectileMTLBlade_C;   // 0x04D8(0x0008)(Transient, DuplicateTransient)
	class UParticleSystemComponent*               PS_RST_BladeGeneration_Idle;                       // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PS_BladeBeamGL;                                    // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PS_BladeBeam;                                      // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BladeMesh;                                         // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBInGameProjectileMTLBlade(int32 EntryPoint);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBInGameProjectileMTLBlade_C">();
	}
	static class ABP_AJBInGameProjectileMTLBlade_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBInGameProjectileMTLBlade_C>();
	}
};
static_assert(alignof(ABP_AJBInGameProjectileMTLBlade_C) == 0x000008, "Wrong alignment on ABP_AJBInGameProjectileMTLBlade_C");
static_assert(sizeof(ABP_AJBInGameProjectileMTLBlade_C) == 0x000500, "Wrong size on ABP_AJBInGameProjectileMTLBlade_C");
static_assert(offsetof(ABP_AJBInGameProjectileMTLBlade_C, UberGraphFrame_BP_AJBInGameProjectileMTLBlade_C) == 0x0004D8, "Member 'ABP_AJBInGameProjectileMTLBlade_C::UberGraphFrame_BP_AJBInGameProjectileMTLBlade_C' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectileMTLBlade_C, PS_RST_BladeGeneration_Idle) == 0x0004E0, "Member 'ABP_AJBInGameProjectileMTLBlade_C::PS_RST_BladeGeneration_Idle' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectileMTLBlade_C, PS_BladeBeamGL) == 0x0004E8, "Member 'ABP_AJBInGameProjectileMTLBlade_C::PS_BladeBeamGL' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectileMTLBlade_C, PS_BladeBeam) == 0x0004F0, "Member 'ABP_AJBInGameProjectileMTLBlade_C::PS_BladeBeam' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectileMTLBlade_C, BladeMesh) == 0x0004F8, "Member 'ABP_AJBInGameProjectileMTLBlade_C::BladeMesh' has a wrong offset!");

}

