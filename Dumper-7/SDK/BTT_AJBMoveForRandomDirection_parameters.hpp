#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_AJBMoveForRandomDirection

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BTT_AJBMoveForRandomDirection.BTT_AJBMoveForRandomDirection_C.ExecuteUbergraph_BTT_AJBMoveForRandomDirection
// 0x0078 (0x0078 - 0x0000)
struct BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RandomBool_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable1;                              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameAIImaginaryCharacter_C*    CallFunc_GetControllingImaginaryCharacter_ReturnValue; // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocation_ReturnValue;                  // 0x0030(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0040(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x0050(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x005C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0068(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection) == 0x000008, "Wrong alignment on BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection");
static_assert(sizeof(BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection) == 0x000078, "Wrong size on BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection");
static_assert(offsetof(BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection, EntryPoint) == 0x000000, "Member 'BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection::EntryPoint' has a wrong offset!");
static_assert(offsetof(BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection, CallFunc_RandomBool_ReturnValue) == 0x000004, "Member 'BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection::CallFunc_RandomBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection, Temp_bool_Variable) == 0x000005, "Member 'BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection, Temp_float_Variable) == 0x000008, "Member 'BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection, Temp_float_Variable1) == 0x00000C, "Member 'BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection::Temp_float_Variable1' has a wrong offset!");
static_assert(offsetof(BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection, K2Node_Event_OwnerController) == 0x000010, "Member 'BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection, K2Node_Event_ControlledPawn) == 0x000018, "Member 'BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection, K2Node_Select_Default) == 0x000020, "Member 'BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection, CallFunc_GetControllingImaginaryCharacter_ReturnValue) == 0x000028, "Member 'BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection::CallFunc_GetControllingImaginaryCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection, CallFunc_GetLocation_ReturnValue) == 0x000030, "Member 'BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection::CallFunc_GetLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection, CallFunc_RandomFloatInRange_ReturnValue) == 0x00003C, "Member 'BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection, CallFunc_MakeVector_ReturnValue) == 0x000040, "Member 'BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00004C, "Member 'BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection, CallFunc_RotateAngleAxis_ReturnValue) == 0x000050, "Member 'BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00005C, "Member 'BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection, CallFunc_Add_VectorVector_ReturnValue) == 0x000068, "Member 'BTT_AJBMoveForRandomDirection_C_ExecuteUbergraph_BTT_AJBMoveForRandomDirection::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function BTT_AJBMoveForRandomDirection.BTT_AJBMoveForRandomDirection_C.ReceiveExecuteAI
// 0x0010 (0x0010 - 0x0000)
struct BTT_AJBMoveForRandomDirection_C_ReceiveExecuteAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_AJBMoveForRandomDirection_C_ReceiveExecuteAI) == 0x000008, "Wrong alignment on BTT_AJBMoveForRandomDirection_C_ReceiveExecuteAI");
static_assert(sizeof(BTT_AJBMoveForRandomDirection_C_ReceiveExecuteAI) == 0x000010, "Wrong size on BTT_AJBMoveForRandomDirection_C_ReceiveExecuteAI");
static_assert(offsetof(BTT_AJBMoveForRandomDirection_C_ReceiveExecuteAI, OwnerController) == 0x000000, "Member 'BTT_AJBMoveForRandomDirection_C_ReceiveExecuteAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_AJBMoveForRandomDirection_C_ReceiveExecuteAI, ControlledPawn) == 0x000008, "Member 'BTT_AJBMoveForRandomDirection_C_ReceiveExecuteAI::ControlledPawn' has a wrong offset!");

}

