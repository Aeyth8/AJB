#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameDataStorage

#include "Basic.hpp"

#include "GameDataStorage_classes.hpp"
#include "GameDataStorage_parameters.hpp"


namespace SDK
{

// Function GameDataStorage.GameDataStorageManager.AddStorageValueAsByte
// (Native, Public, BlueprintCallable)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const uint8                             AddValue                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameDataStorageManager::AddStorageValueAsByte(const uint8 StorageCategory, const struct FGameplayTag& Key, const uint8 AddValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "AddStorageValueAsByte");

	Params::GameDataStorageManager_AddStorageValueAsByte Parms{};

	Parms.StorageCategory = StorageCategory;
	Parms.Key = std::move(Key);
	Parms.AddValue = AddValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameDataStorage.GameDataStorageManager.AddStorageValueAsFloat
// (Native, Public, BlueprintCallable)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             AddValue                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameDataStorageManager::AddStorageValueAsFloat(const uint8 StorageCategory, const struct FGameplayTag& Key, const float AddValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "AddStorageValueAsFloat");

	Params::GameDataStorageManager_AddStorageValueAsFloat Parms{};

	Parms.StorageCategory = StorageCategory;
	Parms.Key = std::move(Key);
	Parms.AddValue = AddValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameDataStorage.GameDataStorageManager.AddStorageValueAsInt
// (Native, Public, BlueprintCallable)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             AddValue                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameDataStorageManager::AddStorageValueAsInt(const uint8 StorageCategory, const struct FGameplayTag& Key, const int32 AddValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "AddStorageValueAsInt");

	Params::GameDataStorageManager_AddStorageValueAsInt Parms{};

	Parms.StorageCategory = StorageCategory;
	Parms.Key = std::move(Key);
	Parms.AddValue = AddValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameDataStorage.GameDataStorageManager.AddStorageValueAsRotator
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  AddValue                                               (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UGameDataStorageManager::AddStorageValueAsRotator(const uint8 StorageCategory, const struct FGameplayTag& Key, const struct FRotator& AddValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "AddStorageValueAsRotator");

	Params::GameDataStorageManager_AddStorageValueAsRotator Parms{};

	Parms.StorageCategory = StorageCategory;
	Parms.Key = std::move(Key);
	Parms.AddValue = std::move(AddValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameDataStorage.GameDataStorageManager.AddStorageValueAsVector
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   AddValue                                               (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameDataStorageManager::AddStorageValueAsVector(const uint8 StorageCategory, const struct FGameplayTag& Key, const struct FVector& AddValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "AddStorageValueAsVector");

	Params::GameDataStorageManager_AddStorageValueAsVector Parms{};

	Parms.StorageCategory = StorageCategory;
	Parms.Key = std::move(Key);
	Parms.AddValue = std::move(AddValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameDataStorage.GameDataStorageManager.AllReset
// (Native, Public, BlueprintCallable)

void UGameDataStorageManager::AllReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "AllReset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GameDataStorage.GameDataStorageManager.CreateDataStorageSaveDataArray
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TMap<uint8, struct FDataStorageSaveData>*OutSaveDataArray                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGameDataStorageManager::CreateDataStorageSaveDataArray(TMap<uint8, struct FDataStorageSaveData>* OutSaveDataArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "CreateDataStorageSaveDataArray");

	Params::GameDataStorageManager_CreateDataStorageSaveDataArray Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSaveDataArray != nullptr)
		*OutSaveDataArray = std::move(Parms.OutSaveDataArray);
}


// Function GameDataStorage.GameDataStorageManager.Initialize
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<uint8>&                    CategoryValues                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGameDataStorageManager::Initialize(const TArray<uint8>& CategoryValues)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "Initialize");

	Params::GameDataStorageManager_Initialize Parms{};

	Parms.CategoryValues = std::move(CategoryValues);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameDataStorage.GameDataStorageManager.JSONSerialize
// (Native, Public, BlueprintCallable)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    RemoveKeyName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTagContainer&     KeyBlackList                                           (Parm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGameDataStorageManager::JSONSerialize(const uint8 StorageCategory, const class FString& RemoveKeyName, const struct FGameplayTagContainer& KeyBlackList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "JSONSerialize");

	Params::GameDataStorageManager_JSONSerialize Parms{};

	Parms.StorageCategory = StorageCategory;
	Parms.RemoveKeyName = std::move(RemoveKeyName);
	Parms.KeyBlackList = std::move(KeyBlackList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameDataStorage.GameDataStorageManager.ResetCategory
// (Native, Public, BlueprintCallable)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameDataStorageManager::ResetCategory(const uint8 StorageCategory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "ResetCategory");

	Params::GameDataStorageManager_ResetCategory Parms{};

	Parms.StorageCategory = StorageCategory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameDataStorage.GameDataStorageManager.SetStorageValueAsByte
// (Native, Public, BlueprintCallable)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const uint8                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameDataStorageManager::SetStorageValueAsByte(const uint8 StorageCategory, const struct FGameplayTag& Key, const uint8 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "SetStorageValueAsByte");

	Params::GameDataStorageManager_SetStorageValueAsByte Parms{};

	Parms.StorageCategory = StorageCategory;
	Parms.Key = std::move(Key);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameDataStorage.GameDataStorageManager.SetStorageValueAsByteArray
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<uint8>&                    Values                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGameDataStorageManager::SetStorageValueAsByteArray(const uint8 StorageCategory, const struct FGameplayTag& Key, const TArray<uint8>& Values)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "SetStorageValueAsByteArray");

	Params::GameDataStorageManager_SetStorageValueAsByteArray Parms{};

	Parms.StorageCategory = StorageCategory;
	Parms.Key = std::move(Key);
	Parms.Values = std::move(Values);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameDataStorage.GameDataStorageManager.SetStorageValueAsFloat
// (Native, Public, BlueprintCallable)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameDataStorageManager::SetStorageValueAsFloat(const uint8 StorageCategory, const struct FGameplayTag& Key, const float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "SetStorageValueAsFloat");

	Params::GameDataStorageManager_SetStorageValueAsFloat Parms{};

	Parms.StorageCategory = StorageCategory;
	Parms.Key = std::move(Key);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameDataStorage.GameDataStorageManager.SetStorageValueAsFloatArray
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<float>&                    Values                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGameDataStorageManager::SetStorageValueAsFloatArray(const uint8 StorageCategory, const struct FGameplayTag& Key, const TArray<float>& Values)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "SetStorageValueAsFloatArray");

	Params::GameDataStorageManager_SetStorageValueAsFloatArray Parms{};

	Parms.StorageCategory = StorageCategory;
	Parms.Key = std::move(Key);
	Parms.Values = std::move(Values);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameDataStorage.GameDataStorageManager.SetStorageValueAsInt
// (Native, Public, BlueprintCallable)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameDataStorageManager::SetStorageValueAsInt(const uint8 StorageCategory, const struct FGameplayTag& Key, const int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "SetStorageValueAsInt");

	Params::GameDataStorageManager_SetStorageValueAsInt Parms{};

	Parms.StorageCategory = StorageCategory;
	Parms.Key = std::move(Key);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameDataStorage.GameDataStorageManager.SetStorageValueAsIntArray
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<int32>&                    Values                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGameDataStorageManager::SetStorageValueAsIntArray(const uint8 StorageCategory, const struct FGameplayTag& Key, const TArray<int32>& Values)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "SetStorageValueAsIntArray");

	Params::GameDataStorageManager_SetStorageValueAsIntArray Parms{};

	Parms.StorageCategory = StorageCategory;
	Parms.Key = std::move(Key);
	Parms.Values = std::move(Values);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameDataStorage.GameDataStorageManager.SetStorageValueAsRotator
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UGameDataStorageManager::SetStorageValueAsRotator(const uint8 StorageCategory, const struct FGameplayTag& Key, const struct FRotator& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "SetStorageValueAsRotator");

	Params::GameDataStorageManager_SetStorageValueAsRotator Parms{};

	Parms.StorageCategory = StorageCategory;
	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameDataStorage.GameDataStorageManager.SetStorageValueAsRotatorArray
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FRotator>&          Values                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGameDataStorageManager::SetStorageValueAsRotatorArray(const uint8 StorageCategory, const struct FGameplayTag& Key, const TArray<struct FRotator>& Values)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "SetStorageValueAsRotatorArray");

	Params::GameDataStorageManager_SetStorageValueAsRotatorArray Parms{};

	Parms.StorageCategory = StorageCategory;
	Parms.Key = std::move(Key);
	Parms.Values = std::move(Values);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameDataStorage.GameDataStorageManager.SetStorageValueAsString
// (Native, Public, BlueprintCallable)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameDataStorageManager::SetStorageValueAsString(const uint8 StorageCategory, const struct FGameplayTag& Key, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "SetStorageValueAsString");

	Params::GameDataStorageManager_SetStorageValueAsString Parms{};

	Parms.StorageCategory = StorageCategory;
	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameDataStorage.GameDataStorageManager.SetStorageValueAsStringArray
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            Values                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGameDataStorageManager::SetStorageValueAsStringArray(const uint8 StorageCategory, const struct FGameplayTag& Key, const TArray<class FString>& Values)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "SetStorageValueAsStringArray");

	Params::GameDataStorageManager_SetStorageValueAsStringArray Parms{};

	Parms.StorageCategory = StorageCategory;
	Parms.Key = std::move(Key);
	Parms.Values = std::move(Values);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameDataStorage.GameDataStorageManager.SetStorageValueAsVector
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameDataStorageManager::SetStorageValueAsVector(const uint8 StorageCategory, const struct FGameplayTag& Key, const struct FVector& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "SetStorageValueAsVector");

	Params::GameDataStorageManager_SetStorageValueAsVector Parms{};

	Parms.StorageCategory = StorageCategory;
	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameDataStorage.GameDataStorageManager.SetStorageValueAsVectorArray
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FVector>&           Values                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGameDataStorageManager::SetStorageValueAsVectorArray(const uint8 StorageCategory, const struct FGameplayTag& Key, const TArray<struct FVector>& Values)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "SetStorageValueAsVectorArray");

	Params::GameDataStorageManager_SetStorageValueAsVectorArray Parms{};

	Parms.StorageCategory = StorageCategory;
	Parms.Key = std::move(Key);
	Parms.Values = std::move(Values);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameDataStorage.GameDataStorageManager.SetupDataStorageArray
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TMap<uint8, struct FDataStorageSaveData>&SaveDataArray                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGameDataStorageManager::SetupDataStorageArray(const TMap<uint8, struct FDataStorageSaveData>& SaveDataArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "SetupDataStorageArray");

	Params::GameDataStorageManager_SetupDataStorageArray Parms{};

	Parms.SaveDataArray = std::move(SaveDataArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameDataStorage.GameDataStorageManager.SubStorageValueAsByte
// (Native, Public, BlueprintCallable)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const uint8                             SubValue                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameDataStorageManager::SubStorageValueAsByte(const uint8 StorageCategory, const struct FGameplayTag& Key, const uint8 SubValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "SubStorageValueAsByte");

	Params::GameDataStorageManager_SubStorageValueAsByte Parms{};

	Parms.StorageCategory = StorageCategory;
	Parms.Key = std::move(Key);
	Parms.SubValue = SubValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameDataStorage.GameDataStorageManager.SubStorageValueAsFloat
// (Native, Public, BlueprintCallable)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             SubValue                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameDataStorageManager::SubStorageValueAsFloat(const uint8 StorageCategory, const struct FGameplayTag& Key, const float SubValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "SubStorageValueAsFloat");

	Params::GameDataStorageManager_SubStorageValueAsFloat Parms{};

	Parms.StorageCategory = StorageCategory;
	Parms.Key = std::move(Key);
	Parms.SubValue = SubValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameDataStorage.GameDataStorageManager.SubStorageValueAsInt
// (Native, Public, BlueprintCallable)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             SubValue                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameDataStorageManager::SubStorageValueAsInt(const uint8 StorageCategory, const struct FGameplayTag& Key, const int32 SubValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "SubStorageValueAsInt");

	Params::GameDataStorageManager_SubStorageValueAsInt Parms{};

	Parms.StorageCategory = StorageCategory;
	Parms.Key = std::move(Key);
	Parms.SubValue = SubValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameDataStorage.GameDataStorageManager.SubStorageValueAsRotator
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  SubValue                                               (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UGameDataStorageManager::SubStorageValueAsRotator(const uint8 StorageCategory, const struct FGameplayTag& Key, const struct FRotator& SubValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "SubStorageValueAsRotator");

	Params::GameDataStorageManager_SubStorageValueAsRotator Parms{};

	Parms.StorageCategory = StorageCategory;
	Parms.Key = std::move(Key);
	Parms.SubValue = std::move(SubValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameDataStorage.GameDataStorageManager.SubStorageValueAsVector
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   SubValue                                               (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameDataStorageManager::SubStorageValueAsVector(const uint8 StorageCategory, const struct FGameplayTag& Key, const struct FVector& SubValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "SubStorageValueAsVector");

	Params::GameDataStorageManager_SubStorageValueAsVector Parms{};

	Parms.StorageCategory = StorageCategory;
	Parms.Key = std::move(Key);
	Parms.SubValue = std::move(SubValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameDataStorage.GameDataStorageManager.GetStorageValueAsByte
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8*                                  OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameDataStorageManager::GetStorageValueAsByte(const uint8 StorageCategory, const struct FGameplayTag& Key, uint8* OutValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "GetStorageValueAsByte");

	Params::GameDataStorageManager_GetStorageValueAsByte Parms{};

	Parms.StorageCategory = StorageCategory;
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = Parms.OutValue;

	return Parms.ReturnValue;
}


// Function GameDataStorage.GameDataStorageManager.GetStorageValueAsByteArray
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>*                          OutValues                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameDataStorageManager::GetStorageValueAsByteArray(const uint8 StorageCategory, const struct FGameplayTag& Key, TArray<uint8>* OutValues) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "GetStorageValueAsByteArray");

	Params::GameDataStorageManager_GetStorageValueAsByteArray Parms{};

	Parms.StorageCategory = StorageCategory;
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValues != nullptr)
		*OutValues = std::move(Parms.OutValues);

	return Parms.ReturnValue;
}


// Function GameDataStorage.GameDataStorageManager.GetStorageValueAsFloat
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameDataStorageManager::GetStorageValueAsFloat(const uint8 StorageCategory, const struct FGameplayTag& Key, float* OutValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "GetStorageValueAsFloat");

	Params::GameDataStorageManager_GetStorageValueAsFloat Parms{};

	Parms.StorageCategory = StorageCategory;
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = Parms.OutValue;

	return Parms.ReturnValue;
}


// Function GameDataStorage.GameDataStorageManager.GetStorageValueAsFloatArray
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<float>*                          OutValues                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameDataStorageManager::GetStorageValueAsFloatArray(const uint8 StorageCategory, const struct FGameplayTag& Key, TArray<float>* OutValues) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "GetStorageValueAsFloatArray");

	Params::GameDataStorageManager_GetStorageValueAsFloatArray Parms{};

	Parms.StorageCategory = StorageCategory;
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValues != nullptr)
		*OutValues = std::move(Parms.OutValues);

	return Parms.ReturnValue;
}


// Function GameDataStorage.GameDataStorageManager.GetStorageValueAsInt
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameDataStorageManager::GetStorageValueAsInt(const uint8 StorageCategory, const struct FGameplayTag& Key, int32* OutValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "GetStorageValueAsInt");

	Params::GameDataStorageManager_GetStorageValueAsInt Parms{};

	Parms.StorageCategory = StorageCategory;
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = Parms.OutValue;

	return Parms.ReturnValue;
}


// Function GameDataStorage.GameDataStorageManager.GetStorageValueAsIntArray
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>*                          OutValues                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameDataStorageManager::GetStorageValueAsIntArray(const uint8 StorageCategory, const struct FGameplayTag& Key, TArray<int32>* OutValues) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "GetStorageValueAsIntArray");

	Params::GameDataStorageManager_GetStorageValueAsIntArray Parms{};

	Parms.StorageCategory = StorageCategory;
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValues != nullptr)
		*OutValues = std::move(Parms.OutValues);

	return Parms.ReturnValue;
}


// Function GameDataStorage.GameDataStorageManager.GetStorageValueAsRotator
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator*                        OutValue                                               (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameDataStorageManager::GetStorageValueAsRotator(const uint8 StorageCategory, const struct FGameplayTag& Key, struct FRotator* OutValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "GetStorageValueAsRotator");

	Params::GameDataStorageManager_GetStorageValueAsRotator Parms{};

	Parms.StorageCategory = StorageCategory;
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = std::move(Parms.OutValue);

	return Parms.ReturnValue;
}


// Function GameDataStorage.GameDataStorageManager.GetStorageValueAsRotatorArray
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FRotator>*                OutValues                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameDataStorageManager::GetStorageValueAsRotatorArray(const uint8 StorageCategory, const struct FGameplayTag& Key, TArray<struct FRotator>* OutValues) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "GetStorageValueAsRotatorArray");

	Params::GameDataStorageManager_GetStorageValueAsRotatorArray Parms{};

	Parms.StorageCategory = StorageCategory;
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValues != nullptr)
		*OutValues = std::move(Parms.OutValues);

	return Parms.ReturnValue;
}


// Function GameDataStorage.GameDataStorageManager.GetStorageValueAsString
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          OutValue                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameDataStorageManager::GetStorageValueAsString(const uint8 StorageCategory, const struct FGameplayTag& Key, class FString* OutValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "GetStorageValueAsString");

	Params::GameDataStorageManager_GetStorageValueAsString Parms{};

	Parms.StorageCategory = StorageCategory;
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = std::move(Parms.OutValue);

	return Parms.ReturnValue;
}


// Function GameDataStorage.GameDataStorageManager.GetStorageValueAsStringArray
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>*                  OutValues                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameDataStorageManager::GetStorageValueAsStringArray(const uint8 StorageCategory, const struct FGameplayTag& Key, TArray<class FString>* OutValues) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "GetStorageValueAsStringArray");

	Params::GameDataStorageManager_GetStorageValueAsStringArray Parms{};

	Parms.StorageCategory = StorageCategory;
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValues != nullptr)
		*OutValues = std::move(Parms.OutValues);

	return Parms.ReturnValue;
}


// Function GameDataStorage.GameDataStorageManager.GetStorageValueAsVector
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutValue                                               (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameDataStorageManager::GetStorageValueAsVector(const uint8 StorageCategory, const struct FGameplayTag& Key, struct FVector* OutValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "GetStorageValueAsVector");

	Params::GameDataStorageManager_GetStorageValueAsVector Parms{};

	Parms.StorageCategory = StorageCategory;
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = std::move(Parms.OutValue);

	return Parms.ReturnValue;
}


// Function GameDataStorage.GameDataStorageManager.GetStorageValueAsVectorArray
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const uint8                             StorageCategory                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>*                 OutValues                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameDataStorageManager::GetStorageValueAsVectorArray(const uint8 StorageCategory, const struct FGameplayTag& Key, TArray<struct FVector>* OutValues) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameDataStorageManager", "GetStorageValueAsVectorArray");

	Params::GameDataStorageManager_GetStorageValueAsVectorArray Parms{};

	Parms.StorageCategory = StorageCategory;
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValues != nullptr)
		*OutValues = std::move(Parms.OutValues);

	return Parms.ReturnValue;
}

}

