#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBBladeGenerationSkill

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BP_AJBSnipeSkill_classes.hpp"
#include "AJB_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBBladeGenerationSkill.BP_AJBBladeGenerationSkill_C
// 0x0058 (0x02E0 - 0x0288)
class UBP_AJBBladeGenerationSkill_C final : public UBP_AJBSnipeSkill_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBBladeGenerationSkill_C;       // 0x0288(0x0008)(Transient, DuplicateTransient)
	float                                         StateTime_Action;                                  // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxShotNum;                                        // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShotSpan;                                          // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ShotCountLocal;                                    // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChargeTime;                                        // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ChargePhaseLocal;                                  // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShowDebugBladeGeneration;                         // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A9[0x3];                                      // 0x02A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChargeTimeCountLocal;                              // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShotTimeCountLocal;                                // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bReserveShotLocal;                                 // 0x02B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B5[0x3];                                      // 0x02B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameParticleEffect_C*          ChargeParticle;                                    // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ShootGionTag;                                      // 0x02C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         VisibledBladeNum;                                  // 0x02C8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2CC[0x4];                                      // 0x02CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           ChargeSEAkComponent;                               // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChargeTimeFirst;                                   // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBBladeGenerationSkill(int32 EntryPoint);
	void BindEvents();
	void OnOwnerDead_Server(const struct FGameplayTag& DamageType, class AActor* DeadActor, class AActor* DamageCauser);
	void ActionBladeLocal(int32 Index_0, int32 LeftNum, bool bSuccess);
	void MC_ActionBlade(int32 Index_0, bool bSuccess);
	void ROS_ActionBlade(int32 Index_0, int32 LeftNum, bool bSuccess);
	void ROS_SpawnBlade(const struct FVector& Location, const struct FRotator& Rotation, bool WithAddSerialNumber);
	void SpawnBladeLocal(const struct FVector& Location, const struct FRotator& Rotation, bool WithAddSerialNumber);
	void ReadyCancelCamouflage();
	void StopChargetStartSE();
	void MC_CompleteCharge(int32 Index_0, bool bPossibleChargeNext);
	void ROS_CompleteCharge(int32 Index_0, bool bPossibleChargeNext);
	void MC_EndState();
	void ROS_EndState();
	void EndStateLocal();
	void MC_BeginState_Action();
	void ROS_BeginState_Action();
	void BeginState_Action();
	void PrintStringBladeGeneration(const class FString& inString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration);
	void TryShotBladeLocal(bool* bSuccess, bool* bFinishShot);
	void TrySpawnChargeParticle(int32 Index_0);
	void TryDestroyChargeParticle();
	void TrySpawnOneShotParticle(int32 Index_0, const struct FGameplayTag& ParticleTag);
	void OnCompletedCharge(int32 Index_0, bool bPossibleChargeNext);
	void OnActionBlade(int32 Index_0, bool bSuccess);
	void OnCompletedChargeServer(int32 Index_0);
	void OnActionBladeServer(int32 LeftNum);
	void GetLeftBladeNum(int32* LeftNum);
	void UpdateBladeVisibility(int32 BladeNum);
	void InitializeBladeInfo();
	void OnRep_VisibledBladeNum();
	void PoliticChargeTime(float* ChargeTime_0);
	void EndState();
	void OnStateChargeUp();
	void OnStateAction();
	void TickStateChargeUp(float DeltaSeconds);
	void TickStateAction();
	void StateBeginPlay(bool bShouldRestore);
	void ReceiveBeginPlay();
	void OnCancel();
	void OnActive();
	void InitializeVariables();
	void CheckStateCanAccompany(bool* bCanAccompany);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBBladeGenerationSkill_C">();
	}
	static class UBP_AJBBladeGenerationSkill_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBBladeGenerationSkill_C>();
	}
};
static_assert(alignof(UBP_AJBBladeGenerationSkill_C) == 0x000008, "Wrong alignment on UBP_AJBBladeGenerationSkill_C");
static_assert(sizeof(UBP_AJBBladeGenerationSkill_C) == 0x0002E0, "Wrong size on UBP_AJBBladeGenerationSkill_C");
static_assert(offsetof(UBP_AJBBladeGenerationSkill_C, UberGraphFrame_BP_AJBBladeGenerationSkill_C) == 0x000288, "Member 'UBP_AJBBladeGenerationSkill_C::UberGraphFrame_BP_AJBBladeGenerationSkill_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBBladeGenerationSkill_C, StateTime_Action) == 0x000290, "Member 'UBP_AJBBladeGenerationSkill_C::StateTime_Action' has a wrong offset!");
static_assert(offsetof(UBP_AJBBladeGenerationSkill_C, MaxShotNum) == 0x000294, "Member 'UBP_AJBBladeGenerationSkill_C::MaxShotNum' has a wrong offset!");
static_assert(offsetof(UBP_AJBBladeGenerationSkill_C, ShotSpan) == 0x000298, "Member 'UBP_AJBBladeGenerationSkill_C::ShotSpan' has a wrong offset!");
static_assert(offsetof(UBP_AJBBladeGenerationSkill_C, ShotCountLocal) == 0x00029C, "Member 'UBP_AJBBladeGenerationSkill_C::ShotCountLocal' has a wrong offset!");
static_assert(offsetof(UBP_AJBBladeGenerationSkill_C, ChargeTime) == 0x0002A0, "Member 'UBP_AJBBladeGenerationSkill_C::ChargeTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBBladeGenerationSkill_C, ChargePhaseLocal) == 0x0002A4, "Member 'UBP_AJBBladeGenerationSkill_C::ChargePhaseLocal' has a wrong offset!");
static_assert(offsetof(UBP_AJBBladeGenerationSkill_C, bShowDebugBladeGeneration) == 0x0002A8, "Member 'UBP_AJBBladeGenerationSkill_C::bShowDebugBladeGeneration' has a wrong offset!");
static_assert(offsetof(UBP_AJBBladeGenerationSkill_C, ChargeTimeCountLocal) == 0x0002AC, "Member 'UBP_AJBBladeGenerationSkill_C::ChargeTimeCountLocal' has a wrong offset!");
static_assert(offsetof(UBP_AJBBladeGenerationSkill_C, ShotTimeCountLocal) == 0x0002B0, "Member 'UBP_AJBBladeGenerationSkill_C::ShotTimeCountLocal' has a wrong offset!");
static_assert(offsetof(UBP_AJBBladeGenerationSkill_C, bReserveShotLocal) == 0x0002B4, "Member 'UBP_AJBBladeGenerationSkill_C::bReserveShotLocal' has a wrong offset!");
static_assert(offsetof(UBP_AJBBladeGenerationSkill_C, ChargeParticle) == 0x0002B8, "Member 'UBP_AJBBladeGenerationSkill_C::ChargeParticle' has a wrong offset!");
static_assert(offsetof(UBP_AJBBladeGenerationSkill_C, ShootGionTag) == 0x0002C0, "Member 'UBP_AJBBladeGenerationSkill_C::ShootGionTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBBladeGenerationSkill_C, VisibledBladeNum) == 0x0002C8, "Member 'UBP_AJBBladeGenerationSkill_C::VisibledBladeNum' has a wrong offset!");
static_assert(offsetof(UBP_AJBBladeGenerationSkill_C, ChargeSEAkComponent) == 0x0002D0, "Member 'UBP_AJBBladeGenerationSkill_C::ChargeSEAkComponent' has a wrong offset!");
static_assert(offsetof(UBP_AJBBladeGenerationSkill_C, ChargeTimeFirst) == 0x0002D8, "Member 'UBP_AJBBladeGenerationSkill_C::ChargeTimeFirst' has a wrong offset!");

}

