#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBContinuationHealing

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BP_AJBPassiveSkillBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBContinuationHealing.BP_AJBContinuationHealing_C
// 0x0040 (0x0250 - 0x0210)
class UBP_AJBContinuationHealing_C : public UBP_AJBPassiveSkillBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBContinuationHealing_C;        // 0x0210(0x0008)(Transient, DuplicateTransient)
	float                                         HealInterval_s_;                                   // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HealingValue;                                      // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HealingMaxPercentage___;                           // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           EffectLoopParticleTag;                             // 0x0228(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EffectSETag;                                       // 0x0230(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInitialized;                                     // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_239[0x7];                                      // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameParticleEffect_C*          CurrentParticle;                                   // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RemainingTime;                                     // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBContinuationHealing(int32 EntryPoint);
	void SetParticleVisibility(bool bNewVisibility);
	void OnEffected__Server_();
	void MC_EndParticle();
	void MC_BeginParticle();
	void MC_OnApplyEffect();
	void TimerTick(float DeltaSeconds);
	void GetHealingLimitation(class ABP_AJBInGameCharacter_C* Target, int32* MaxHP);
	void SetRemainingTime(float NewValue);
	void SubRemainingTime(float Value);
	void OnActionInactivate(bool bTriggeredByStand);
	void OnActionActivate(bool bTriggeredByStand);
	void ChangeParticleVisibility(bool bNewVisibility);
	void ReceiveTick(float DeltaSeconds);
	void TryChangeParticleVisibility(bool bNewVisibility);

	void GetIntervalTime(float* IntervalTime) const;
	void GetRemainingTime(float* RemainingTime_0) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBContinuationHealing_C">();
	}
	static class UBP_AJBContinuationHealing_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBContinuationHealing_C>();
	}
};
static_assert(alignof(UBP_AJBContinuationHealing_C) == 0x000008, "Wrong alignment on UBP_AJBContinuationHealing_C");
static_assert(sizeof(UBP_AJBContinuationHealing_C) == 0x000250, "Wrong size on UBP_AJBContinuationHealing_C");
static_assert(offsetof(UBP_AJBContinuationHealing_C, UberGraphFrame_BP_AJBContinuationHealing_C) == 0x000210, "Member 'UBP_AJBContinuationHealing_C::UberGraphFrame_BP_AJBContinuationHealing_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBContinuationHealing_C, HealInterval_s_) == 0x000218, "Member 'UBP_AJBContinuationHealing_C::HealInterval_s_' has a wrong offset!");
static_assert(offsetof(UBP_AJBContinuationHealing_C, HealingValue) == 0x00021C, "Member 'UBP_AJBContinuationHealing_C::HealingValue' has a wrong offset!");
static_assert(offsetof(UBP_AJBContinuationHealing_C, HealingMaxPercentage___) == 0x000220, "Member 'UBP_AJBContinuationHealing_C::HealingMaxPercentage___' has a wrong offset!");
static_assert(offsetof(UBP_AJBContinuationHealing_C, EffectLoopParticleTag) == 0x000228, "Member 'UBP_AJBContinuationHealing_C::EffectLoopParticleTag' has a wrong offset!");
static_assert(offsetof(UBP_AJBContinuationHealing_C, EffectSETag) == 0x000230, "Member 'UBP_AJBContinuationHealing_C::EffectSETag' has a wrong offset!");
static_assert(offsetof(UBP_AJBContinuationHealing_C, IsInitialized) == 0x000238, "Member 'UBP_AJBContinuationHealing_C::IsInitialized' has a wrong offset!");
static_assert(offsetof(UBP_AJBContinuationHealing_C, CurrentParticle) == 0x000240, "Member 'UBP_AJBContinuationHealing_C::CurrentParticle' has a wrong offset!");
static_assert(offsetof(UBP_AJBContinuationHealing_C, RemainingTime) == 0x000248, "Member 'UBP_AJBContinuationHealing_C::RemainingTime' has a wrong offset!");

}

