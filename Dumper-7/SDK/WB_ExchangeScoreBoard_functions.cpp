#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_ExchangeScoreBoard

#include "Basic.hpp"

#include "WB_ExchangeScoreBoard_classes.hpp"
#include "WB_ExchangeScoreBoard_parameters.hpp"


namespace SDK
{

// Function WB_ExchangeScoreBoard.WB_ExchangeScoreBoard_C.ExecuteUbergraph_WB_ExchangeScoreBoard
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_ExchangeScoreBoard_C::ExecuteUbergraph_WB_ExchangeScoreBoard(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ExchangeScoreBoard_C", "ExecuteUbergraph_WB_ExchangeScoreBoard");

	Params::WB_ExchangeScoreBoard_C_ExecuteUbergraph_WB_ExchangeScoreBoard Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_ExchangeScoreBoard.WB_ExchangeScoreBoard_C.OnUpdate
// (BlueprintCallable, BlueprintEvent)

void UWB_ExchangeScoreBoard_C::OnUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ExchangeScoreBoard_C", "OnUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_ExchangeScoreBoard.WB_ExchangeScoreBoard_C.Initialize
// (BlueprintCallable, BlueprintEvent)

void UWB_ExchangeScoreBoard_C::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ExchangeScoreBoard_C", "Initialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_ExchangeScoreBoard.WB_ExchangeScoreBoard_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWB_ExchangeScoreBoard_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ExchangeScoreBoard_C", "Tick");

	Params::WB_ExchangeScoreBoard_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WB_ExchangeScoreBoard.WB_ExchangeScoreBoard_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWB_ExchangeScoreBoard_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ExchangeScoreBoard_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WB_ExchangeScoreBoard.WB_ExchangeScoreBoard_C.TryGetScoreBoardManager
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_ScoreBoardManager_C**         Output                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_ExchangeScoreBoard_C::TryGetScoreBoardManager(class ABP_ScoreBoardManager_C** Output, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ExchangeScoreBoard_C", "TryGetScoreBoardManager");

	Params::WB_ExchangeScoreBoard_C_TryGetScoreBoardManager Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Output != nullptr)
		*Output = Parms.Output;

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function WB_ExchangeScoreBoard.WB_ExchangeScoreBoard_C.FindScoreBoardRowByPlayerID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   PlayerID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UWB_ScoreBoardRow_C**             Widget                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UWB_ExchangeScoreBoard_C::FindScoreBoardRowByPlayerID(uint8 PlayerID, class UWB_ScoreBoardRow_C** Widget, bool* bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ExchangeScoreBoard_C", "FindScoreBoardRowByPlayerID");

	Params::WB_ExchangeScoreBoard_C_FindScoreBoardRowByPlayerID Parms{};

	Parms.PlayerID = PlayerID;

	UObject::ProcessEvent(Func, &Parms);

	if (Widget != nullptr)
		*Widget = Parms.Widget;

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;
}


// Function WB_ExchangeScoreBoard.WB_ExchangeScoreBoard_C.SortMatchingPlayerInfo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FMatchingPlayerInfo>&     MatchingPlayerInfo                                     (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<struct FMatchingPlayerInfo>*     SortedMatchingPlayerInfo                               (Parm, OutParm, ZeroConstructor)

void UWB_ExchangeScoreBoard_C::SortMatchingPlayerInfo(TArray<struct FMatchingPlayerInfo>& MatchingPlayerInfo, TArray<struct FMatchingPlayerInfo>* SortedMatchingPlayerInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WB_ExchangeScoreBoard_C", "SortMatchingPlayerInfo");

	Params::WB_ExchangeScoreBoard_C_SortMatchingPlayerInfo Parms{};

	Parms.MatchingPlayerInfo = std::move(MatchingPlayerInfo);

	UObject::ProcessEvent(Func, &Parms);

	MatchingPlayerInfo = std::move(Parms.MatchingPlayerInfo);

	if (SortedMatchingPlayerInfo != nullptr)
		*SortedMatchingPlayerInfo = std::move(Parms.SortedMatchingPlayerInfo);
}

}

