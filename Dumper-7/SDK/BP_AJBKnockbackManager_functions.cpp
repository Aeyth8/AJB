#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBKnockbackManager

#include "Basic.hpp"

#include "BP_AJBKnockbackManager_classes.hpp"
#include "BP_AJBKnockbackManager_parameters.hpp"


namespace SDK
{

// Function BP_AJBKnockbackManager.BP_AJBKnockbackManager_C.ExecuteUbergraph_BP_AJBKnockbackManager
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBKnockbackManager_C::ExecuteUbergraph_BP_AJBKnockbackManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBKnockbackManager_C", "ExecuteUbergraph_BP_AJBKnockbackManager");

	Params::BP_AJBKnockbackManager_C_ExecuteUbergraph_BP_AJBKnockbackManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBKnockbackManager.BP_AJBKnockbackManager_C.AddKnockbackResistPassive
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Operator                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayTag&              PassiveTag                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayTag&              CauserType                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void UBP_AJBKnockbackManager_C::AddKnockbackResistPassive(class UObject* Operator, const struct FGameplayTag& PassiveTag, const struct FGameplayTag& CauserType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBKnockbackManager_C", "AddKnockbackResistPassive");

	Params::BP_AJBKnockbackManager_C_AddKnockbackResistPassive Parms{};

	Parms.Operator = Operator;
	Parms.PassiveTag = std::move(PassiveTag);
	Parms.CauserType = std::move(CauserType);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBKnockbackManager.BP_AJBKnockbackManager_C.Knockback
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Power                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBKnockbackManager_C::Knockback(const struct FVector& Direction, float Power)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBKnockbackManager_C", "Knockback");

	Params::BP_AJBKnockbackManager_C_Knockback Parms{};

	Parms.Direction = std::move(Direction);
	Parms.Power = Power;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBKnockbackManager.BP_AJBKnockbackManager_C.ApplyTargetKnockbackRate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BasePower                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  Power                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBKnockbackManager_C::ApplyTargetKnockbackRate(class AActor* TargetActor, float BasePower, float* Power)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBKnockbackManager_C", "ApplyTargetKnockbackRate");

	Params::BP_AJBKnockbackManager_C_ApplyTargetKnockbackRate Parms{};

	Parms.TargetActor = TargetActor;
	Parms.BasePower = BasePower;

	UObject::ProcessEvent(Func, &Parms);

	if (Power != nullptr)
		*Power = Parms.Power;
}


// Function BP_AJBKnockbackManager.BP_AJBKnockbackManager_C.RequestKnockback_Server
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Causer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   KnockbackBasePower                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayTag&              CauserTag                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayTag&              ResistPassiveTag                                       (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBKnockbackManager_C::RequestKnockback_Server(class UObject* Causer, const struct FVector& Direction, float KnockbackBasePower, const struct FGameplayTag& CauserTag, const struct FGameplayTag& ResistPassiveTag, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBKnockbackManager_C", "RequestKnockback_Server");

	Params::BP_AJBKnockbackManager_C_RequestKnockback_Server Parms{};

	Parms.Causer = Causer;
	Parms.Direction = std::move(Direction);
	Parms.KnockbackBasePower = KnockbackBasePower;
	Parms.CauserTag = std::move(CauserTag);
	Parms.ResistPassiveTag = std::move(ResistPassiveTag);

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_AJBKnockbackManager.BP_AJBKnockbackManager_C.IsKnockbackTarget
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          Causer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsTarget                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBKnockbackManager_C::IsKnockbackTarget(class UObject* Causer, bool* IsTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBKnockbackManager_C", "IsKnockbackTarget");

	Params::BP_AJBKnockbackManager_C_IsKnockbackTarget Parms{};

	Parms.Causer = Causer;

	UObject::ProcessEvent(Func, &Parms);

	if (IsTarget != nullptr)
		*IsTarget = Parms.IsTarget;
}

}

