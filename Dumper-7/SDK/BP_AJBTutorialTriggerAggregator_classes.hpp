#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBTutorialTriggerAggregator

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AJB_structs.hpp"
#include "AJB_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "ST_TutorialMessageQueuedItem_structs.hpp"
#include "ETutorialType_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBTutorialTriggerAggregator.BP_AJBTutorialTriggerAggregator_C
// 0x0118 (0x0210 - 0x00F8)
class UBP_AJBTutorialTriggerAggregator_C final : public UAJBStringTableManagerComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00F8(0x0008)(Transient, DuplicateTransient)
	int32                                         KillCount;                                         // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MissAttackCount;                                   // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MessageDisplayMarginTime;                          // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ElapsedTimeSecFromTutorialStart;                   // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MissAttackThreshold;                               // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HPThreshold;                                       // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartMessageTimeSec;                               // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovePromptTimeSec;                                 // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ControlCameraPromptTimeSec;                        // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         JumpPromptTimeSec;                                 // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNeedToPromptJump;                                 // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bNeedToPromptCrouch;                               // 0x0129(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bNeedToPromptMove;                                 // 0x012A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bNeedToPromptControlCamera;                        // 0x012B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bNeedToPromptAttack;                               // 0x012C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAlreadyUsedTheWorld;                              // 0x012D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUltimateSkillIsUnlocked;                          // 0x012E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12F[0x1];                                      // 0x012F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ElapsedTimeLastMessageDisplayed;                   // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_TutorialMessageQueuedItem>  TutorialMessageQueue;                              // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         LastMessageDisplayTime;                            // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CrouchPromptTimeSec;                               // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EmotePromptTimeSec;                                // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InitialPlayerCount;                                // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              LastTime_Crouch;                                   // 0x0158(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              LastTime_DamageAreaShrinked;                       // 0x0160(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              LastTime_Kill;                                     // 0x0168(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              LastTime_DamageAreaDamage;                         // 0x0170(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              LastTime_MissAttack;                               // 0x0178(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TimerHandle_HPDecreased;                           // 0x0180(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FTimerHandle                           TimerHandle_Building;                              // 0x0188(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	float                                         ExploringBuildingPromptTimeSec;                    // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExploringBuildingPromptIntervalSec;                // 0x0194(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AdditionalExploringBuildingPromptLimit;            // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         KillCountThreshold;                                // 0x019C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AdditionalExploringBuildingPromptCount;            // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KillEnemiesMessageIntervalSec;                     // 0x01A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TimberHandle_KillEnemies;                          // 0x01A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	int32                                         AdditionalKillEnemiesMessageCount;                 // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AditionalKillEnemiesMessageLimit;                  // 0x01B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AdditionalMissAttackMessageLimit;                  // 0x01B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MissAttackMessageIntervalSec;                      // 0x01BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              LastTime_LackOfMP;                                 // 0x01C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         LackOfMPMessageLimit;                              // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LackOfMPMessageIntervalSec;                        // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AdditionalDashPromptLimit;                         // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AdditionalDashPromptCount;                         // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TimerHandle_Dash;                                  // 0x01D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	int32                                         LivingPlayerCount;                                 // 0x01E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBanMessages;                                      // 0x01E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E5[0x3];                                      // 0x01E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ApprovedMessagesToDisplay;                         // 0x01E8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bStop;                                             // 0x0208(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_AJBTutorialTriggerAggregator(int32 EntryPoint);
	void ChangeEnable(bool bEnable);
	void RequestBuildingMessage();
	void RequestEmoteMessage();
	void RequestCrouchMessage();
	void RequestCameraMessage();
	void RequestMoveMessage();
	void RequestJumpMessage();
	void RequestGameStartedMessage();
	void OnOpenTheGame();
	void OnTick_ConsumeMessage(float DeltaSeconds);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void TryToDisplayUltimateSkillMessage();
	void AggregateFailedToUseByLackOfMP();
	void OnTimer_KillEnemies();
	void OnTimer_HPDecreased();
	void AggregateR2SkillUseCount();
	void AggregateL1SkillUseCount();
	void ReceiveTutorialTrigger_NotAttack();
	void AggregateR2SkillUseCountEnemyIsNear();
	void AggregateMissAttack();
	void AggregateGionCount(int32 GionInfoBitMask);
	void AggregateCurrentHP(int32 CurrentHP);
	void AggregateDamageAreaShrinkCount();
	void AggregateSkillUnlockCount(int32 SkillType);
	void AggregateLivingPlayerCount(int32 LivingPlayerCount_0);
	void ReceiveTutorialTriggerWithInt(const struct FGameplayTag& TriggerTag, int32 IntParam);
	void AggregateItemCount(const struct FGameplayTag& Tag);
	void AggregateControlCamera();
	void AggregateMove();
	void ReceiveTutorialTrigger_ReceivedDamage(const struct FGameplayTag& DamageType, class AActor* DamageCauser, bool bIsRemainHP, bool bDamageIsCutByStatus, bool bDamageIsCutByAAP);
	void ReceiveTutorialTrigger(const struct FGameplayTag& TriggerTag);
	void AggregateJumpCount();
	void AggregateCrouchCount();
	void AggregateReceivedDamage(const struct FGameplayTag& DamageType, class AActor* DamageCauser, bool bRemainHP, bool bDamageIsCutByStatus, bool bDamageIsCutByAAP);
	void AggregateKillCount();
	void EnqueueMessage(const struct FGameplayTag& Tag, int32 Param);
	void GetTutorialMessageTypeFromTag(const struct FGameplayTag& Tag, ETutorialType* Result);
	void RequestMessage(const struct FST_TutorialMessageQueuedItem& MessageQueuedItem);
	void TryDequeueMessage(const struct FGameplayTag& Tag);
	void BanMessages(const struct FGameplayTagContainer& ExceptionMessageTags);
	bool MessageIsApprovedToDisplay(const struct FGameplayTag& MessageTag);
	void StopBanningMessages();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBTutorialTriggerAggregator_C">();
	}
	static class UBP_AJBTutorialTriggerAggregator_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBTutorialTriggerAggregator_C>();
	}
};
static_assert(alignof(UBP_AJBTutorialTriggerAggregator_C) == 0x000008, "Wrong alignment on UBP_AJBTutorialTriggerAggregator_C");
static_assert(sizeof(UBP_AJBTutorialTriggerAggregator_C) == 0x000210, "Wrong size on UBP_AJBTutorialTriggerAggregator_C");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, UberGraphFrame) == 0x0000F8, "Member 'UBP_AJBTutorialTriggerAggregator_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, KillCount) == 0x000100, "Member 'UBP_AJBTutorialTriggerAggregator_C::KillCount' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, MissAttackCount) == 0x000104, "Member 'UBP_AJBTutorialTriggerAggregator_C::MissAttackCount' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, MessageDisplayMarginTime) == 0x000108, "Member 'UBP_AJBTutorialTriggerAggregator_C::MessageDisplayMarginTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, ElapsedTimeSecFromTutorialStart) == 0x00010C, "Member 'UBP_AJBTutorialTriggerAggregator_C::ElapsedTimeSecFromTutorialStart' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, MissAttackThreshold) == 0x000110, "Member 'UBP_AJBTutorialTriggerAggregator_C::MissAttackThreshold' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, HPThreshold) == 0x000114, "Member 'UBP_AJBTutorialTriggerAggregator_C::HPThreshold' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, StartMessageTimeSec) == 0x000118, "Member 'UBP_AJBTutorialTriggerAggregator_C::StartMessageTimeSec' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, MovePromptTimeSec) == 0x00011C, "Member 'UBP_AJBTutorialTriggerAggregator_C::MovePromptTimeSec' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, ControlCameraPromptTimeSec) == 0x000120, "Member 'UBP_AJBTutorialTriggerAggregator_C::ControlCameraPromptTimeSec' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, JumpPromptTimeSec) == 0x000124, "Member 'UBP_AJBTutorialTriggerAggregator_C::JumpPromptTimeSec' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, bNeedToPromptJump) == 0x000128, "Member 'UBP_AJBTutorialTriggerAggregator_C::bNeedToPromptJump' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, bNeedToPromptCrouch) == 0x000129, "Member 'UBP_AJBTutorialTriggerAggregator_C::bNeedToPromptCrouch' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, bNeedToPromptMove) == 0x00012A, "Member 'UBP_AJBTutorialTriggerAggregator_C::bNeedToPromptMove' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, bNeedToPromptControlCamera) == 0x00012B, "Member 'UBP_AJBTutorialTriggerAggregator_C::bNeedToPromptControlCamera' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, bNeedToPromptAttack) == 0x00012C, "Member 'UBP_AJBTutorialTriggerAggregator_C::bNeedToPromptAttack' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, bAlreadyUsedTheWorld) == 0x00012D, "Member 'UBP_AJBTutorialTriggerAggregator_C::bAlreadyUsedTheWorld' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, bUltimateSkillIsUnlocked) == 0x00012E, "Member 'UBP_AJBTutorialTriggerAggregator_C::bUltimateSkillIsUnlocked' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, ElapsedTimeLastMessageDisplayed) == 0x000130, "Member 'UBP_AJBTutorialTriggerAggregator_C::ElapsedTimeLastMessageDisplayed' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, TutorialMessageQueue) == 0x000138, "Member 'UBP_AJBTutorialTriggerAggregator_C::TutorialMessageQueue' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, LastMessageDisplayTime) == 0x000148, "Member 'UBP_AJBTutorialTriggerAggregator_C::LastMessageDisplayTime' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, CrouchPromptTimeSec) == 0x00014C, "Member 'UBP_AJBTutorialTriggerAggregator_C::CrouchPromptTimeSec' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, EmotePromptTimeSec) == 0x000150, "Member 'UBP_AJBTutorialTriggerAggregator_C::EmotePromptTimeSec' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, InitialPlayerCount) == 0x000154, "Member 'UBP_AJBTutorialTriggerAggregator_C::InitialPlayerCount' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, LastTime_Crouch) == 0x000158, "Member 'UBP_AJBTutorialTriggerAggregator_C::LastTime_Crouch' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, LastTime_DamageAreaShrinked) == 0x000160, "Member 'UBP_AJBTutorialTriggerAggregator_C::LastTime_DamageAreaShrinked' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, LastTime_Kill) == 0x000168, "Member 'UBP_AJBTutorialTriggerAggregator_C::LastTime_Kill' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, LastTime_DamageAreaDamage) == 0x000170, "Member 'UBP_AJBTutorialTriggerAggregator_C::LastTime_DamageAreaDamage' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, LastTime_MissAttack) == 0x000178, "Member 'UBP_AJBTutorialTriggerAggregator_C::LastTime_MissAttack' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, TimerHandle_HPDecreased) == 0x000180, "Member 'UBP_AJBTutorialTriggerAggregator_C::TimerHandle_HPDecreased' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, TimerHandle_Building) == 0x000188, "Member 'UBP_AJBTutorialTriggerAggregator_C::TimerHandle_Building' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, ExploringBuildingPromptTimeSec) == 0x000190, "Member 'UBP_AJBTutorialTriggerAggregator_C::ExploringBuildingPromptTimeSec' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, ExploringBuildingPromptIntervalSec) == 0x000194, "Member 'UBP_AJBTutorialTriggerAggregator_C::ExploringBuildingPromptIntervalSec' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, AdditionalExploringBuildingPromptLimit) == 0x000198, "Member 'UBP_AJBTutorialTriggerAggregator_C::AdditionalExploringBuildingPromptLimit' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, KillCountThreshold) == 0x00019C, "Member 'UBP_AJBTutorialTriggerAggregator_C::KillCountThreshold' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, AdditionalExploringBuildingPromptCount) == 0x0001A0, "Member 'UBP_AJBTutorialTriggerAggregator_C::AdditionalExploringBuildingPromptCount' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, KillEnemiesMessageIntervalSec) == 0x0001A4, "Member 'UBP_AJBTutorialTriggerAggregator_C::KillEnemiesMessageIntervalSec' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, TimberHandle_KillEnemies) == 0x0001A8, "Member 'UBP_AJBTutorialTriggerAggregator_C::TimberHandle_KillEnemies' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, AdditionalKillEnemiesMessageCount) == 0x0001B0, "Member 'UBP_AJBTutorialTriggerAggregator_C::AdditionalKillEnemiesMessageCount' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, AditionalKillEnemiesMessageLimit) == 0x0001B4, "Member 'UBP_AJBTutorialTriggerAggregator_C::AditionalKillEnemiesMessageLimit' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, AdditionalMissAttackMessageLimit) == 0x0001B8, "Member 'UBP_AJBTutorialTriggerAggregator_C::AdditionalMissAttackMessageLimit' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, MissAttackMessageIntervalSec) == 0x0001BC, "Member 'UBP_AJBTutorialTriggerAggregator_C::MissAttackMessageIntervalSec' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, LastTime_LackOfMP) == 0x0001C0, "Member 'UBP_AJBTutorialTriggerAggregator_C::LastTime_LackOfMP' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, LackOfMPMessageLimit) == 0x0001C8, "Member 'UBP_AJBTutorialTriggerAggregator_C::LackOfMPMessageLimit' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, LackOfMPMessageIntervalSec) == 0x0001CC, "Member 'UBP_AJBTutorialTriggerAggregator_C::LackOfMPMessageIntervalSec' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, AdditionalDashPromptLimit) == 0x0001D0, "Member 'UBP_AJBTutorialTriggerAggregator_C::AdditionalDashPromptLimit' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, AdditionalDashPromptCount) == 0x0001D4, "Member 'UBP_AJBTutorialTriggerAggregator_C::AdditionalDashPromptCount' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, TimerHandle_Dash) == 0x0001D8, "Member 'UBP_AJBTutorialTriggerAggregator_C::TimerHandle_Dash' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, LivingPlayerCount) == 0x0001E0, "Member 'UBP_AJBTutorialTriggerAggregator_C::LivingPlayerCount' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, bBanMessages) == 0x0001E4, "Member 'UBP_AJBTutorialTriggerAggregator_C::bBanMessages' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, ApprovedMessagesToDisplay) == 0x0001E8, "Member 'UBP_AJBTutorialTriggerAggregator_C::ApprovedMessagesToDisplay' has a wrong offset!");
static_assert(offsetof(UBP_AJBTutorialTriggerAggregator_C, bStop) == 0x000208, "Member 'UBP_AJBTutorialTriggerAggregator_C::bStop' has a wrong offset!");

}

