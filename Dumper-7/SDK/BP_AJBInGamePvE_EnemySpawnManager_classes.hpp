#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGamePvE_EnemySpawnManager

#include "Basic.hpp"

#include "ST_AJBInGamePvE_BossSpawnTableRow_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AJB_structs.hpp"
#include "EPvEGameDifficulty_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "ST_AJBInGamePvE_EnemySpawnTableRow_structs.hpp"
#include "E_AJBInGamePvE_GamePhase_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C
// 0x00E8 (0x0410 - 0x0328)
class ABP_AJBInGamePvE_EnemySpawnManager_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_AJBInGamePvE_EnemySpawnVolume_C*> ShuffledSpawnAreaMap;                         // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<struct FAJBCharacterInfo>              CharacterInfoCache;                                // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FGameplayTag>                   AvailableCharactersCache;                          // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FGameplayTag>                   SpawnableCharactersInSpawnSet;                     // 0x0368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UDataTable*                             AJBInGamePvE_EnemySpawnTable;                      // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FST_AJBInGamePvE_EnemySpawnTableRow> CurrentSpawnSetsChunk;                        // 0x0380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         CurrentSpawnSetIndex;                              // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_394[0x4];                                      // 0x0394(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_AJBInGameCharacter_C*>       LivingEnemies;                                     // 0x0398(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<struct FST_AJBInGamePvE_BossSpawnTableRow> ReservedBosses;                                // 0x03A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UDataTable*                             DT_BossSpawnTable;                                 // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             DT_BossData;                                       // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_AJBInGameCharacter_C*>       LivingOtherEnemies;                                // 0x03C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	UMulticastDelegateProperty_                   OnBossSpawned;                                     // 0x03D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<struct FGameplayTag>                   DebugSpawnableCharacterFilter;                     // 0x03E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<int32>                                 SpawnBossStack;                                    // 0x03F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	int32                                         BossPlayerID;                                      // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBInGamePvE_EnemySpawnManager(int32 EntryPoint);
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);
	void BeginSpawnSetChecking();
	void ScheduledRefresh();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void RegisterBossInfo();
	void SpawnEnemies(const TArray<class ABP_AJBInGamePvE_EnemySpawnVolume_C*>& AreaTargets, const TArray<int32>& SpawnCounts);
	void ManageSpawnedEnemies();
	void SpawnBoss(const int32 BossID);
	void ManageSpawnedBosses();
	void UserConstructionScript();
	void ShuffleSpawnAreaMapping(TArray<class ABP_AJBInGamePvE_EnemySpawnVolume_C*>* ShuffledSpawnAreaMapping);
	void GetShuffledSpawnAreaMap(TArray<class ABP_AJBInGamePvE_EnemySpawnVolume_C*>* ShuffledSpawnAreaMap_0);
	void ConvertSpawnSetToArray(const struct FST_AJBInGamePvE_EnemySpawnTableRow& Row, TArray<int32>* SpawnAmountsInRow);
	void CollectSpawnSetsChunk(EPvEGameDifficulty Difficulty, int32 WaveIndex, TArray<struct FST_AJBInGamePvE_EnemySpawnTableRow>* SpawnSetsChunk);
	void GetCurrentSpawnSetsChunkCache(TArray<struct FST_AJBInGamePvE_EnemySpawnTableRow>* CurrentSpawnSetsChunk_0);
	void GetCurrentSpawnSetCache(struct FST_AJBInGamePvE_EnemySpawnTableRow* CurrentSpawnSet);
	void IncrementSpawnSet();
	void RefreshCurrentSpawnSetsChunkCache();
	void OnEnemyDied(const struct FGameplayTag& DamageType, class AActor* DeadActor, class AActor* DamageCauser);
	void RefreshLivingEnemies();
	void IsEnableToSpawnEnemies(bool* IsEnableToSpawnEnemies_0);
	void OnBeginWave(int32 NewWaveIndex, float NewWaveDuration);
	void ResetSpawnSetIndex();
	void OnEnemySpawned(const struct FGameplayTag& SpawnType, class ABP_AJBInGameAIController_C* EnemyController, class ABP_AJBInGameCharacter_C* SpawnedEnemy);
	void InitDelegates();
	void CollectBossTable(EPvEGameDifficulty Difficulty, int32 WaveIndex, TArray<struct FST_AJBInGamePvE_BossSpawnTableRow>* BossSpawnTable);
	void RefreshBossTableCache();
	void GetRandomSpawnArea(class ABP_AJBInGamePvE_EnemySpawnVolume_C** SpawnArea);
	void ConvertBossDataToEnemyData(const struct FST_AJBInGamePvE_BossInfo& BossInfo, struct FST_AJBInGamePvE_EnemyInfo* EnemyInfo);
	void CollectAvailableCharacters(TArray<struct FGameplayTag>* AvailableCharacters);
	void IsEnabledToRespawnEnemies(bool* IsEnabledToRespawn);
	void IsNoLivingNormalEnemies(bool* IsNoLivingEnemies);
	void IsNoLivingOtherEnemies(bool* IsNoLivingEnemies);
	void HasAllBossesSpawned(bool* HasAllBossesSpawned_0);
	void CollectCharacterTags(bool IsWithoutCache, TArray<struct FAJBCharacterInfo>* CharacterInfoArray);
	void ResetEnemyDuplicationSettings();
	void SelectRandomEnemiesWithoutDuplication(int32 EnemiesCount, TArray<struct FST_AJBInGamePvE_EnemyInfo>* RandomEnemies);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBInGamePvE_EnemySpawnManager_C">();
	}
	static class ABP_AJBInGamePvE_EnemySpawnManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBInGamePvE_EnemySpawnManager_C>();
	}
};
static_assert(alignof(ABP_AJBInGamePvE_EnemySpawnManager_C) == 0x000008, "Wrong alignment on ABP_AJBInGamePvE_EnemySpawnManager_C");
static_assert(sizeof(ABP_AJBInGamePvE_EnemySpawnManager_C) == 0x000410, "Wrong size on ABP_AJBInGamePvE_EnemySpawnManager_C");
static_assert(offsetof(ABP_AJBInGamePvE_EnemySpawnManager_C, UberGraphFrame) == 0x000328, "Member 'ABP_AJBInGamePvE_EnemySpawnManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvE_EnemySpawnManager_C, DefaultSceneRoot) == 0x000330, "Member 'ABP_AJBInGamePvE_EnemySpawnManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvE_EnemySpawnManager_C, ShuffledSpawnAreaMap) == 0x000338, "Member 'ABP_AJBInGamePvE_EnemySpawnManager_C::ShuffledSpawnAreaMap' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvE_EnemySpawnManager_C, CharacterInfoCache) == 0x000348, "Member 'ABP_AJBInGamePvE_EnemySpawnManager_C::CharacterInfoCache' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvE_EnemySpawnManager_C, AvailableCharactersCache) == 0x000358, "Member 'ABP_AJBInGamePvE_EnemySpawnManager_C::AvailableCharactersCache' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvE_EnemySpawnManager_C, SpawnableCharactersInSpawnSet) == 0x000368, "Member 'ABP_AJBInGamePvE_EnemySpawnManager_C::SpawnableCharactersInSpawnSet' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvE_EnemySpawnManager_C, AJBInGamePvE_EnemySpawnTable) == 0x000378, "Member 'ABP_AJBInGamePvE_EnemySpawnManager_C::AJBInGamePvE_EnemySpawnTable' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvE_EnemySpawnManager_C, CurrentSpawnSetsChunk) == 0x000380, "Member 'ABP_AJBInGamePvE_EnemySpawnManager_C::CurrentSpawnSetsChunk' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvE_EnemySpawnManager_C, CurrentSpawnSetIndex) == 0x000390, "Member 'ABP_AJBInGamePvE_EnemySpawnManager_C::CurrentSpawnSetIndex' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvE_EnemySpawnManager_C, LivingEnemies) == 0x000398, "Member 'ABP_AJBInGamePvE_EnemySpawnManager_C::LivingEnemies' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvE_EnemySpawnManager_C, ReservedBosses) == 0x0003A8, "Member 'ABP_AJBInGamePvE_EnemySpawnManager_C::ReservedBosses' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvE_EnemySpawnManager_C, DT_BossSpawnTable) == 0x0003B8, "Member 'ABP_AJBInGamePvE_EnemySpawnManager_C::DT_BossSpawnTable' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvE_EnemySpawnManager_C, DT_BossData) == 0x0003C0, "Member 'ABP_AJBInGamePvE_EnemySpawnManager_C::DT_BossData' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvE_EnemySpawnManager_C, LivingOtherEnemies) == 0x0003C8, "Member 'ABP_AJBInGamePvE_EnemySpawnManager_C::LivingOtherEnemies' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvE_EnemySpawnManager_C, OnBossSpawned) == 0x0003D8, "Member 'ABP_AJBInGamePvE_EnemySpawnManager_C::OnBossSpawned' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvE_EnemySpawnManager_C, DebugSpawnableCharacterFilter) == 0x0003E8, "Member 'ABP_AJBInGamePvE_EnemySpawnManager_C::DebugSpawnableCharacterFilter' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvE_EnemySpawnManager_C, SpawnBossStack) == 0x0003F8, "Member 'ABP_AJBInGamePvE_EnemySpawnManager_C::SpawnBossStack' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGamePvE_EnemySpawnManager_C, BossPlayerID) == 0x000408, "Member 'ABP_AJBInGamePvE_EnemySpawnManager_C::BossPlayerID' has a wrong offset!");

}

