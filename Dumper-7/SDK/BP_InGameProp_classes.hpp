#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InGameProp

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AJB_structs.hpp"
#include "AJB_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_InGameProp.BP_InGameProp_C
// 0x0048 (0x0370 - 0x0328)
class ABP_InGameProp_C : public AAJBInGameProp
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Mesh;                                              // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnPropDamaged;                                     // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FVector                                LastDamageHitLocation;                             // 0x0350(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35C[0x4];                                      // 0x035C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LastDamageCauser;                                  // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLastDamagePenetrating;                            // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_InGameProp(int32 EntryPoint);
	void DamageOverlapped(class AActor* DamageCauser, const struct FVector& HitLocation, bool bPenetrating, const struct FGameplayTag& FactorTag, bool bInvalidDamage);
	void AJBDamage(class AActor* DamagedActor, int32 DamageForHPAP, int32 DamageForAAP, int32 CutDamage, const struct FGameplayTag& DamageType, int32 SerialNumber, EDamagePriority DamagePriority, float AttackDistance, class AActor* DamageCauser, bool WithSeparatedStandAttack, bool HitEnemysSeparatedStand, bool bPenetrateAP, bool bNotUseCollision, bool IsEndured, const struct FAJBDamageDisplayParams& DamageDisplayParams, const struct FAJBDamageDisplayProperty& DamageDisplayProperty);
	void OnAreaDamageDisabled();
	void OnPassiveDisabled();
	void OnDamageDisabled();
	void UserConstructionScript();
	void GetLastDamageInfo(class AActor** LastDamageCauser_0, struct FVector* LastDamageHitLocation_0, bool* bLastDamagePenetrating_0);
	void CheckTargetSelf(class AActor* DamageCauser, bool bForDamageOverlap, bool bIgnoreMovableStand, bool bIncludeSelf, bool bAfterReflectShouldHitOwner, bool* bTarget);
	void OwnHitParam(bool* bCharacter, bool* bLeftAP, struct FGameplayTag* ParticleTagBlockedByAAP, struct FGameplayTag* SETagBlockedByAAP, struct FGameplayTag* ParticleTagBlocked);
	bool IfCheckDamageOverlap();
	void CheckDisableDamage(class AActor* DamageCauser, bool bIgnoreSelf, bool* bDisableDamage);
	void CheckDisablePassive(class AActor* PassiveCauser, const struct FGameplayTag& PassiveTag, bool bIgnoreSelf, bool* bDisablePassive);
	void CheckDisableAreaDamage(bool* bDisableAreadamage);
	void CheckNoDamage(class AActor* DamageCauser, bool* bNoDamage);
	void IsReactedByReticule(bool* bResult);
	void IgnoreTrace(class AActor* Owner_0, bool bPairOnly, bool* bIgnore);
	void CheckDisableDirectDamage(class AActor* DamageCauser, bool* bDisableDirectDamage);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_InGameProp_C">();
	}
	static class ABP_InGameProp_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_InGameProp_C>();
	}
};
static_assert(alignof(ABP_InGameProp_C) == 0x000008, "Wrong alignment on ABP_InGameProp_C");
static_assert(sizeof(ABP_InGameProp_C) == 0x000370, "Wrong size on ABP_InGameProp_C");
static_assert(offsetof(ABP_InGameProp_C, UberGraphFrame) == 0x000328, "Member 'ABP_InGameProp_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_InGameProp_C, Mesh) == 0x000330, "Member 'ABP_InGameProp_C::Mesh' has a wrong offset!");
static_assert(offsetof(ABP_InGameProp_C, DefaultSceneRoot) == 0x000338, "Member 'ABP_InGameProp_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_InGameProp_C, OnPropDamaged) == 0x000340, "Member 'ABP_InGameProp_C::OnPropDamaged' has a wrong offset!");
static_assert(offsetof(ABP_InGameProp_C, LastDamageHitLocation) == 0x000350, "Member 'ABP_InGameProp_C::LastDamageHitLocation' has a wrong offset!");
static_assert(offsetof(ABP_InGameProp_C, LastDamageCauser) == 0x000360, "Member 'ABP_InGameProp_C::LastDamageCauser' has a wrong offset!");
static_assert(offsetof(ABP_InGameProp_C, bLastDamagePenetrating) == 0x000368, "Member 'ABP_InGameProp_C::bLastDamagePenetrating' has a wrong offset!");

}

