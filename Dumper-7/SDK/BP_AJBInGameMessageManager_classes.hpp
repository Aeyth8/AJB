#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameMessageManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AJB_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBInGameMessageManager.BP_AJBInGameMessageManager_C
// 0x0020 (0x0350 - 0x0330)
class ABP_AJBInGameMessageManager_C final : public AAJBMessageManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0330(0x0008)(Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameHUD_C*                     InGameHUDOnClient;                                 // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsBoundCharacterEventsOnOwningClient;             // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_AJBInGameMessageManager(int32 EntryPoint);
	void ReceiveBeginPlay();
	void OnGameModeMessageRequested(int32 MessageType, float Value1, float Value2);
	void BindMessageGameModeEvents();
	void ActionLogMessage(int32 ActionLogType, float Value1, float Value2);
	void ROC_MessageRequestedOnClient(int32 MessageType, float Value1, float Value2);
	void OnMessageRequested(int32 MessageType, float Value1, float Value2);
	void UserConstructionScript();
	void ConvertMessageTextByMessageType(const class FString& Key, int32 MesssageType, const class FText& Value1, const class FText& Value2, class FText* Result, bool* bSuccess);
	void ShowActionLog(int32 ActionLogType, float Value1, float Value2);
	void SendHUDMessage(int32 MessageType, float Value1, float Value2);
	void ConvertMessageTextByActionLog(int32 MessageType, class FText* Result, bool* bSuccess);
	void GetInGameHUD(class ABP_AJBInGameHUD_C** InGameHUD, bool* bSuccess);
	void OnRep_bIsBoundCharacterEventsOnOwningClient();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBInGameMessageManager_C">();
	}
	static class ABP_AJBInGameMessageManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBInGameMessageManager_C>();
	}
};
static_assert(alignof(ABP_AJBInGameMessageManager_C) == 0x000008, "Wrong alignment on ABP_AJBInGameMessageManager_C");
static_assert(sizeof(ABP_AJBInGameMessageManager_C) == 0x000350, "Wrong size on ABP_AJBInGameMessageManager_C");
static_assert(offsetof(ABP_AJBInGameMessageManager_C, UberGraphFrame) == 0x000330, "Member 'ABP_AJBInGameMessageManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMessageManager_C, DefaultSceneRoot) == 0x000338, "Member 'ABP_AJBInGameMessageManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMessageManager_C, InGameHUDOnClient) == 0x000340, "Member 'ABP_AJBInGameMessageManager_C::InGameHUDOnClient' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameMessageManager_C, bIsBoundCharacterEventsOnOwningClient) == 0x000348, "Member 'ABP_AJBInGameMessageManager_C::bIsBoundCharacterEventsOnOwningClient' has a wrong offset!");

}

