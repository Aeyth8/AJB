#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: test1_AJB_AIController

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass test1_AJB_AIController.test1_AJB_AIController_C
// 0x0028 (0x0460 - 0x0438)
class Atest1_AJB_AIController_C final : public AAIController
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0438(0x0008)(Transient, DuplicateTransient)
	class UAIPerceptionComponent*                 AIPerception;                                      // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBlackboardComponent*                   BlackboardComponent;                               // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_AJBInGameCharacter_C*>       TargetCharacters;                                  // 0x0450(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void ExecuteUbergraph_test1_AJB_AIController(int32 EntryPoint);
	void SetTimerUpdateTargetPoint();
	void UpdateTargetPoint();
	void ResetPerception();
	void AddTargetCharacter(const class AActor*& Actor);
	void BndEvt__AIPerception_K2Node_ComponentBoundEvent_0_PerceptionUpdatedDelegate__DelegateSignature(const TArray<class AActor*>& UpdatedActors);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"test1_AJB_AIController_C">();
	}
	static class Atest1_AJB_AIController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<Atest1_AJB_AIController_C>();
	}
};
static_assert(alignof(Atest1_AJB_AIController_C) == 0x000008, "Wrong alignment on Atest1_AJB_AIController_C");
static_assert(sizeof(Atest1_AJB_AIController_C) == 0x000460, "Wrong size on Atest1_AJB_AIController_C");
static_assert(offsetof(Atest1_AJB_AIController_C, UberGraphFrame) == 0x000438, "Member 'Atest1_AJB_AIController_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(Atest1_AJB_AIController_C, AIPerception) == 0x000440, "Member 'Atest1_AJB_AIController_C::AIPerception' has a wrong offset!");
static_assert(offsetof(Atest1_AJB_AIController_C, BlackboardComponent) == 0x000448, "Member 'Atest1_AJB_AIController_C::BlackboardComponent' has a wrong offset!");
static_assert(offsetof(Atest1_AJB_AIController_C, TargetCharacters) == 0x000450, "Member 'Atest1_AJB_AIController_C::TargetCharacters' has a wrong offset!");

}

