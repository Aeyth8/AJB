#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGamePvE_EnemySpawnManager

#include "Basic.hpp"

#include "BP_AJBInGamePvE_EnemySpawnManager_classes.hpp"
#include "BP_AJBInGamePvE_EnemySpawnManager_parameters.hpp"


namespace SDK
{

// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.ExecuteUbergraph_BP_AJBInGamePvE_EnemySpawnManager
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGamePvE_EnemySpawnManager_C::ExecuteUbergraph_BP_AJBInGamePvE_EnemySpawnManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "ExecuteUbergraph_BP_AJBInGamePvE_EnemySpawnManager");

	Params::BP_AJBInGamePvE_EnemySpawnManager_C_ExecuteUbergraph_BP_AJBInGamePvE_EnemySpawnManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.NotifyTheWorld
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAJBInGameCharacter*              Operator                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EGeneralTiming                          Timing                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bOperatorIsEmpty                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGamePvE_EnemySpawnManager_C::NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "NotifyTheWorld");

	Params::BP_AJBInGamePvE_EnemySpawnManager_C_NotifyTheWorld Parms{};

	Parms.Operator = Operator;
	Parms.Time = Time;
	Parms.Timing = Timing;
	Parms.bEnable = bEnable;
	Parms.bOperatorIsEmpty = bOperatorIsEmpty;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.BeginSpawnSetChecking
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGamePvE_EnemySpawnManager_C::BeginSpawnSetChecking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "BeginSpawnSetChecking");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.ScheduledRefresh
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGamePvE_EnemySpawnManager_C::ScheduledRefresh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "ScheduledRefresh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGamePvE_EnemySpawnManager_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "ReceiveTick");

	Params::BP_AJBInGamePvE_EnemySpawnManager_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_AJBInGamePvE_EnemySpawnManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.RegisterBossInfo
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGamePvE_EnemySpawnManager_C::RegisterBossInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "RegisterBossInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.SpawnEnemies
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<class ABP_AJBInGamePvE_EnemySpawnVolume_C*>&AreaTargets                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// const TArray<int32>&                    SpawnCounts                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)

void ABP_AJBInGamePvE_EnemySpawnManager_C::SpawnEnemies(const TArray<class ABP_AJBInGamePvE_EnemySpawnVolume_C*>& AreaTargets, const TArray<int32>& SpawnCounts)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "SpawnEnemies");

	Params::BP_AJBInGamePvE_EnemySpawnManager_C_SpawnEnemies Parms{};

	Parms.AreaTargets = std::move(AreaTargets);
	Parms.SpawnCounts = std::move(SpawnCounts);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.ManageSpawnedEnemies
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGamePvE_EnemySpawnManager_C::ManageSpawnedEnemies()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "ManageSpawnedEnemies");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.SpawnBoss
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const int32                             BossID                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGamePvE_EnemySpawnManager_C::SpawnBoss(const int32 BossID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "SpawnBoss");

	Params::BP_AJBInGamePvE_EnemySpawnManager_C_SpawnBoss Parms{};

	Parms.BossID = BossID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.ManageSpawnedBosses
// (BlueprintCallable, BlueprintEvent)

void ABP_AJBInGamePvE_EnemySpawnManager_C::ManageSpawnedBosses()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "ManageSpawnedBosses");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGamePvE_EnemySpawnManager_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.ShuffleSpawnAreaMapping
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_AJBInGamePvE_EnemySpawnVolume_C*>*ShuffledSpawnAreaMapping                               (Parm, OutParm, ZeroConstructor)

void ABP_AJBInGamePvE_EnemySpawnManager_C::ShuffleSpawnAreaMapping(TArray<class ABP_AJBInGamePvE_EnemySpawnVolume_C*>* ShuffledSpawnAreaMapping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "ShuffleSpawnAreaMapping");

	Params::BP_AJBInGamePvE_EnemySpawnManager_C_ShuffleSpawnAreaMapping Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ShuffledSpawnAreaMapping != nullptr)
		*ShuffledSpawnAreaMapping = std::move(Parms.ShuffledSpawnAreaMapping);
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.GetShuffledSpawnAreaMap
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_AJBInGamePvE_EnemySpawnVolume_C*>*ShuffledSpawnAreaMap_0                                 (Parm, OutParm, ZeroConstructor)

void ABP_AJBInGamePvE_EnemySpawnManager_C::GetShuffledSpawnAreaMap(TArray<class ABP_AJBInGamePvE_EnemySpawnVolume_C*>* ShuffledSpawnAreaMap_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "GetShuffledSpawnAreaMap");

	Params::BP_AJBInGamePvE_EnemySpawnManager_C_GetShuffledSpawnAreaMap Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ShuffledSpawnAreaMap_0 != nullptr)
		*ShuffledSpawnAreaMap_0 = std::move(Parms.ShuffledSpawnAreaMap_0);
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.ConvertSpawnSetToArray
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FST_AJBInGamePvE_EnemySpawnTableRow&Row                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// TArray<int32>*                          SpawnAmountsInRow                                      (Parm, OutParm, ZeroConstructor)

void ABP_AJBInGamePvE_EnemySpawnManager_C::ConvertSpawnSetToArray(const struct FST_AJBInGamePvE_EnemySpawnTableRow& Row, TArray<int32>* SpawnAmountsInRow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "ConvertSpawnSetToArray");

	Params::BP_AJBInGamePvE_EnemySpawnManager_C_ConvertSpawnSetToArray Parms{};

	Parms.Row = std::move(Row);

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnAmountsInRow != nullptr)
		*SpawnAmountsInRow = std::move(Parms.SpawnAmountsInRow);
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.CollectSpawnSetsChunk
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPvEGameDifficulty                      Difficulty                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   WaveIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FST_AJBInGamePvE_EnemySpawnTableRow>*SpawnSetsChunk                                         (Parm, OutParm, ZeroConstructor)

void ABP_AJBInGamePvE_EnemySpawnManager_C::CollectSpawnSetsChunk(EPvEGameDifficulty Difficulty, int32 WaveIndex, TArray<struct FST_AJBInGamePvE_EnemySpawnTableRow>* SpawnSetsChunk)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "CollectSpawnSetsChunk");

	Params::BP_AJBInGamePvE_EnemySpawnManager_C_CollectSpawnSetsChunk Parms{};

	Parms.Difficulty = Difficulty;
	Parms.WaveIndex = WaveIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnSetsChunk != nullptr)
		*SpawnSetsChunk = std::move(Parms.SpawnSetsChunk);
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.GetCurrentSpawnSetsChunkCache
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FST_AJBInGamePvE_EnemySpawnTableRow>*CurrentSpawnSetsChunk_0                                (Parm, OutParm, ZeroConstructor)

void ABP_AJBInGamePvE_EnemySpawnManager_C::GetCurrentSpawnSetsChunkCache(TArray<struct FST_AJBInGamePvE_EnemySpawnTableRow>* CurrentSpawnSetsChunk_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "GetCurrentSpawnSetsChunkCache");

	Params::BP_AJBInGamePvE_EnemySpawnManager_C_GetCurrentSpawnSetsChunkCache Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentSpawnSetsChunk_0 != nullptr)
		*CurrentSpawnSetsChunk_0 = std::move(Parms.CurrentSpawnSetsChunk_0);
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.GetCurrentSpawnSetCache
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FST_AJBInGamePvE_EnemySpawnTableRow*CurrentSpawnSet                                        (Parm, OutParm, HasGetValueTypeHash)

void ABP_AJBInGamePvE_EnemySpawnManager_C::GetCurrentSpawnSetCache(struct FST_AJBInGamePvE_EnemySpawnTableRow* CurrentSpawnSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "GetCurrentSpawnSetCache");

	Params::BP_AJBInGamePvE_EnemySpawnManager_C_GetCurrentSpawnSetCache Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentSpawnSet != nullptr)
		*CurrentSpawnSet = std::move(Parms.CurrentSpawnSet);
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.IncrementSpawnSet
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGamePvE_EnemySpawnManager_C::IncrementSpawnSet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "IncrementSpawnSet");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.RefreshCurrentSpawnSetsChunkCache
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGamePvE_EnemySpawnManager_C::RefreshCurrentSpawnSetsChunkCache()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "RefreshCurrentSpawnSetsChunkCache");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.OnEnemyDied
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DeadActor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGamePvE_EnemySpawnManager_C::OnEnemyDied(const struct FGameplayTag& DamageType, class AActor* DeadActor, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "OnEnemyDied");

	Params::BP_AJBInGamePvE_EnemySpawnManager_C_OnEnemyDied Parms{};

	Parms.DamageType = std::move(DamageType);
	Parms.DeadActor = DeadActor;
	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.RefreshLivingEnemies
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGamePvE_EnemySpawnManager_C::RefreshLivingEnemies()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "RefreshLivingEnemies");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.IsEnableToSpawnEnemies
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   IsEnableToSpawnEnemies_0                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGamePvE_EnemySpawnManager_C::IsEnableToSpawnEnemies(bool* IsEnableToSpawnEnemies_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "IsEnableToSpawnEnemies");

	Params::BP_AJBInGamePvE_EnemySpawnManager_C_IsEnableToSpawnEnemies Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsEnableToSpawnEnemies_0 != nullptr)
		*IsEnableToSpawnEnemies_0 = Parms.IsEnableToSpawnEnemies_0;
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.OnBeginWave
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NewWaveIndex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   NewWaveDuration                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGamePvE_EnemySpawnManager_C::OnBeginWave(int32 NewWaveIndex, float NewWaveDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "OnBeginWave");

	Params::BP_AJBInGamePvE_EnemySpawnManager_C_OnBeginWave Parms{};

	Parms.NewWaveIndex = NewWaveIndex;
	Parms.NewWaveDuration = NewWaveDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.ResetSpawnSetIndex
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGamePvE_EnemySpawnManager_C::ResetSpawnSetIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "ResetSpawnSetIndex");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.OnEnemySpawned
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              SpawnType                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class ABP_AJBInGameAIController_C*      EnemyController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_AJBInGameCharacter_C*         SpawnedEnemy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGamePvE_EnemySpawnManager_C::OnEnemySpawned(const struct FGameplayTag& SpawnType, class ABP_AJBInGameAIController_C* EnemyController, class ABP_AJBInGameCharacter_C* SpawnedEnemy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "OnEnemySpawned");

	Params::BP_AJBInGamePvE_EnemySpawnManager_C_OnEnemySpawned Parms{};

	Parms.SpawnType = std::move(SpawnType);
	Parms.EnemyController = EnemyController;
	Parms.SpawnedEnemy = SpawnedEnemy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.InitDelegates
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGamePvE_EnemySpawnManager_C::InitDelegates()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "InitDelegates");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.CollectBossTable
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPvEGameDifficulty                      Difficulty                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   WaveIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FST_AJBInGamePvE_BossSpawnTableRow>*BossSpawnTable                                         (Parm, OutParm, ZeroConstructor)

void ABP_AJBInGamePvE_EnemySpawnManager_C::CollectBossTable(EPvEGameDifficulty Difficulty, int32 WaveIndex, TArray<struct FST_AJBInGamePvE_BossSpawnTableRow>* BossSpawnTable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "CollectBossTable");

	Params::BP_AJBInGamePvE_EnemySpawnManager_C_CollectBossTable Parms{};

	Parms.Difficulty = Difficulty;
	Parms.WaveIndex = WaveIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (BossSpawnTable != nullptr)
		*BossSpawnTable = std::move(Parms.BossSpawnTable);
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.RefreshBossTableCache
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGamePvE_EnemySpawnManager_C::RefreshBossTableCache()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "RefreshBossTableCache");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.GetRandomSpawnArea
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_AJBInGamePvE_EnemySpawnVolume_C**SpawnArea                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBInGamePvE_EnemySpawnManager_C::GetRandomSpawnArea(class ABP_AJBInGamePvE_EnemySpawnVolume_C** SpawnArea)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "GetRandomSpawnArea");

	Params::BP_AJBInGamePvE_EnemySpawnManager_C_GetRandomSpawnArea Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnArea != nullptr)
		*SpawnArea = Parms.SpawnArea;
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.ConvertBossDataToEnemyData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FST_AJBInGamePvE_BossInfo& BossInfo                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// struct FST_AJBInGamePvE_EnemyInfo*      EnemyInfo                                              (Parm, OutParm, HasGetValueTypeHash)

void ABP_AJBInGamePvE_EnemySpawnManager_C::ConvertBossDataToEnemyData(const struct FST_AJBInGamePvE_BossInfo& BossInfo, struct FST_AJBInGamePvE_EnemyInfo* EnemyInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "ConvertBossDataToEnemyData");

	Params::BP_AJBInGamePvE_EnemySpawnManager_C_ConvertBossDataToEnemyData Parms{};

	Parms.BossInfo = std::move(BossInfo);

	UObject::ProcessEvent(Func, &Parms);

	if (EnemyInfo != nullptr)
		*EnemyInfo = std::move(Parms.EnemyInfo);
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.CollectAvailableCharacters
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FGameplayTag>*            AvailableCharacters                                    (Parm, OutParm, ZeroConstructor)

void ABP_AJBInGamePvE_EnemySpawnManager_C::CollectAvailableCharacters(TArray<struct FGameplayTag>* AvailableCharacters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "CollectAvailableCharacters");

	Params::BP_AJBInGamePvE_EnemySpawnManager_C_CollectAvailableCharacters Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AvailableCharacters != nullptr)
		*AvailableCharacters = std::move(Parms.AvailableCharacters);
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.IsEnabledToRespawnEnemies
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   IsEnabledToRespawn                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGamePvE_EnemySpawnManager_C::IsEnabledToRespawnEnemies(bool* IsEnabledToRespawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "IsEnabledToRespawnEnemies");

	Params::BP_AJBInGamePvE_EnemySpawnManager_C_IsEnabledToRespawnEnemies Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsEnabledToRespawn != nullptr)
		*IsEnabledToRespawn = Parms.IsEnabledToRespawn;
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.IsNoLivingNormalEnemies
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   IsNoLivingEnemies                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGamePvE_EnemySpawnManager_C::IsNoLivingNormalEnemies(bool* IsNoLivingEnemies)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "IsNoLivingNormalEnemies");

	Params::BP_AJBInGamePvE_EnemySpawnManager_C_IsNoLivingNormalEnemies Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsNoLivingEnemies != nullptr)
		*IsNoLivingEnemies = Parms.IsNoLivingEnemies;
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.IsNoLivingOtherEnemies
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   IsNoLivingEnemies                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGamePvE_EnemySpawnManager_C::IsNoLivingOtherEnemies(bool* IsNoLivingEnemies)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "IsNoLivingOtherEnemies");

	Params::BP_AJBInGamePvE_EnemySpawnManager_C_IsNoLivingOtherEnemies Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsNoLivingEnemies != nullptr)
		*IsNoLivingEnemies = Parms.IsNoLivingEnemies;
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.HasAllBossesSpawned
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   HasAllBossesSpawned_0                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBInGamePvE_EnemySpawnManager_C::HasAllBossesSpawned(bool* HasAllBossesSpawned_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "HasAllBossesSpawned");

	Params::BP_AJBInGamePvE_EnemySpawnManager_C_HasAllBossesSpawned Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HasAllBossesSpawned_0 != nullptr)
		*HasAllBossesSpawned_0 = Parms.HasAllBossesSpawned_0;
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.CollectCharacterTags
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsWithoutCache                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<struct FAJBCharacterInfo>*       CharacterInfoArray                                     (Parm, OutParm, ZeroConstructor)

void ABP_AJBInGamePvE_EnemySpawnManager_C::CollectCharacterTags(bool IsWithoutCache, TArray<struct FAJBCharacterInfo>* CharacterInfoArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "CollectCharacterTags");

	Params::BP_AJBInGamePvE_EnemySpawnManager_C_CollectCharacterTags Parms{};

	Parms.IsWithoutCache = IsWithoutCache;

	UObject::ProcessEvent(Func, &Parms);

	if (CharacterInfoArray != nullptr)
		*CharacterInfoArray = std::move(Parms.CharacterInfoArray);
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.ResetEnemyDuplicationSettings
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBInGamePvE_EnemySpawnManager_C::ResetEnemyDuplicationSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "ResetEnemyDuplicationSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBInGamePvE_EnemySpawnManager.BP_AJBInGamePvE_EnemySpawnManager_C.SelectRandomEnemiesWithoutDuplication
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   EnemiesCount                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FST_AJBInGamePvE_EnemyInfo>*RandomEnemies                                          (Parm, OutParm, ZeroConstructor)

void ABP_AJBInGamePvE_EnemySpawnManager_C::SelectRandomEnemiesWithoutDuplication(int32 EnemiesCount, TArray<struct FST_AJBInGamePvE_EnemyInfo>* RandomEnemies)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBInGamePvE_EnemySpawnManager_C", "SelectRandomEnemiesWithoutDuplication");

	Params::BP_AJBInGamePvE_EnemySpawnManager_C_SelectRandomEnemiesWithoutDuplication Parms{};

	Parms.EnemiesCount = EnemiesCount;

	UObject::ProcessEvent(Func, &Parms);

	if (RandomEnemies != nullptr)
		*RandomEnemies = std::move(Parms.RandomEnemies);
}

}

