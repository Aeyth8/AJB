#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_ChallengeEventProgressWindow

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AJB_structs.hpp"
#include "AJB_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_ChallengeEventProgressWindow.WB_ChallengeEventProgressWindow_C
// 0x00F8 (0x03B8 - 0x02C0)
class UWB_ChallengeEventProgressWindow_C final : public UAJBWindowWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(Transient, DuplicateTransient)
	class UWidgetAnimation*                       Anim_Appear;                                       // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBRetainerBox*                        AJBRetainerBox_0;                                  // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBImage*                              BG;                                                // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_SnapTouchScrollBox_C*               ClassesScrollBox;                                  // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ChallengeEventProgressFooter_C*     Footer;                                            // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ChallengeEventProgressHeader_C*     Header;                                            // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ChallengeEventClassList_C*          WB_ChallengeEventClassList;                        // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_CommonButton_C*                     WB_CommonButton_Close;                             // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_WindowFrame_C*                      WB_WindowFrame;                                    // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FChallengeEventProgressContext         ProgressContext;                                   // 0x0310(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UWB_ChallengeEventClassItem_C*>  ClassUIItemsToProgress;                            // 0x0368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class AAJBHUDBase*                            AJBHUDBase;                                        // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_HUDCountDownTimerWrapper_C*         CountDownTimer;                                    // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeForCountDown;                                  // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaitBeforeShowReward;                              // 0x038C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaitBeforeEnableCloseButton;                       // 0x0390(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableApplyReward;                                // 0x0394(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_395[0x3];                                      // 0x0395(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ClassIndexToProgress;                              // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ClassIndexToScroll;                                // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           ExpUpSEAkComponent;                                // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	UMulticastDelegateProperty_                   OnPlayerOperationEnabled;                          // 0x03A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ExecuteUbergraph_WB_ChallengeEventProgressWindow(int32 EntryPoint);
	void PlayOnCloseSequence();
	void PlayOnOpenSequence();
	void OnCloseAnimationFinished();
	void OnOpenAnimationFinished();
	void OnCountDownTimerExpired();
	void OnExpUpFInishedOfClassItem();
	void BndEvt__ClassesScrollBox_K2Node_ComponentBoundEvent_2_OnSnapRightScrolled__DelegateSignature();
	void BndEvt__ClassesScrollBox_K2Node_ComponentBoundEvent_1_OnSnapLeftScrolled__DelegateSignature();
	void BndEvt__ClassesScrollBox_K2Node_ComponentBoundEvent_0_OnScrollMoved__DelegateSignature();
	void Scroll(int32 ClassIndexTo);
	void OnRewardWindowFinished();
	void OnDecidedCloseButton(class UAJBButtonWidget* OwnerWidget, class UAJBButton* TargetButton);
	void OnFooterAppearanceFinished();
	void ProgressNextClassItem();
	void ShowRewardWindow(const struct FChallengeEventClassContext& ClassContext);
	void StartToPlayerOperation();
	void ShowNextExp();
	void OnFinishedProgressOfClassItem(class UWB_ChallengeEventClassItem_C* ItemObj);
	void OnClosingWindow();
	void OnOpeningWindow();
	void Setup(const struct FChallengeEventProgressContext& ProgressContext_0, class AAJBHUDBase* AJBHUDBase_0);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Construct();
	void PreConstruct(bool IsDesignTime);
	void DebugSetupWithTestContext(class AAJBHUDBase* AJBHUDBase_0);
	int32 GetRestExpToClassUp();
	void SetEnableApplyReward(bool Enable);
	bool IsPlayerOperatable();
	void SetIsEnabledPlayerOperation(bool bInIsEnabled);
	void UpdateScrollArrowsVisibility();
	struct FAJBGameRewardInfo GetRewardInfoFromClassContext(const struct FChallengeEventClassContext& ClassContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_ChallengeEventProgressWindow_C">();
	}
	static class UWB_ChallengeEventProgressWindow_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_ChallengeEventProgressWindow_C>();
	}
};
static_assert(alignof(UWB_ChallengeEventProgressWindow_C) == 0x000008, "Wrong alignment on UWB_ChallengeEventProgressWindow_C");
static_assert(sizeof(UWB_ChallengeEventProgressWindow_C) == 0x0003B8, "Wrong size on UWB_ChallengeEventProgressWindow_C");
static_assert(offsetof(UWB_ChallengeEventProgressWindow_C, UberGraphFrame) == 0x0002C0, "Member 'UWB_ChallengeEventProgressWindow_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventProgressWindow_C, Anim_Appear) == 0x0002C8, "Member 'UWB_ChallengeEventProgressWindow_C::Anim_Appear' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventProgressWindow_C, AJBRetainerBox_0) == 0x0002D0, "Member 'UWB_ChallengeEventProgressWindow_C::AJBRetainerBox_0' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventProgressWindow_C, BG) == 0x0002D8, "Member 'UWB_ChallengeEventProgressWindow_C::BG' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventProgressWindow_C, ClassesScrollBox) == 0x0002E0, "Member 'UWB_ChallengeEventProgressWindow_C::ClassesScrollBox' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventProgressWindow_C, Footer) == 0x0002E8, "Member 'UWB_ChallengeEventProgressWindow_C::Footer' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventProgressWindow_C, Header) == 0x0002F0, "Member 'UWB_ChallengeEventProgressWindow_C::Header' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventProgressWindow_C, WB_ChallengeEventClassList) == 0x0002F8, "Member 'UWB_ChallengeEventProgressWindow_C::WB_ChallengeEventClassList' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventProgressWindow_C, WB_CommonButton_Close) == 0x000300, "Member 'UWB_ChallengeEventProgressWindow_C::WB_CommonButton_Close' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventProgressWindow_C, WB_WindowFrame) == 0x000308, "Member 'UWB_ChallengeEventProgressWindow_C::WB_WindowFrame' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventProgressWindow_C, ProgressContext) == 0x000310, "Member 'UWB_ChallengeEventProgressWindow_C::ProgressContext' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventProgressWindow_C, ClassUIItemsToProgress) == 0x000368, "Member 'UWB_ChallengeEventProgressWindow_C::ClassUIItemsToProgress' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventProgressWindow_C, AJBHUDBase) == 0x000378, "Member 'UWB_ChallengeEventProgressWindow_C::AJBHUDBase' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventProgressWindow_C, CountDownTimer) == 0x000380, "Member 'UWB_ChallengeEventProgressWindow_C::CountDownTimer' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventProgressWindow_C, TimeForCountDown) == 0x000388, "Member 'UWB_ChallengeEventProgressWindow_C::TimeForCountDown' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventProgressWindow_C, WaitBeforeShowReward) == 0x00038C, "Member 'UWB_ChallengeEventProgressWindow_C::WaitBeforeShowReward' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventProgressWindow_C, WaitBeforeEnableCloseButton) == 0x000390, "Member 'UWB_ChallengeEventProgressWindow_C::WaitBeforeEnableCloseButton' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventProgressWindow_C, bEnableApplyReward) == 0x000394, "Member 'UWB_ChallengeEventProgressWindow_C::bEnableApplyReward' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventProgressWindow_C, ClassIndexToProgress) == 0x000398, "Member 'UWB_ChallengeEventProgressWindow_C::ClassIndexToProgress' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventProgressWindow_C, ClassIndexToScroll) == 0x00039C, "Member 'UWB_ChallengeEventProgressWindow_C::ClassIndexToScroll' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventProgressWindow_C, ExpUpSEAkComponent) == 0x0003A0, "Member 'UWB_ChallengeEventProgressWindow_C::ExpUpSEAkComponent' has a wrong offset!");
static_assert(offsetof(UWB_ChallengeEventProgressWindow_C, OnPlayerOperationEnabled) == 0x0003A8, "Member 'UWB_ChallengeEventProgressWindow_C::OnPlayerOperationEnabled' has a wrong offset!");

}

