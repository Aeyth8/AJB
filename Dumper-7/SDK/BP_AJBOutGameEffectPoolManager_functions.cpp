#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBOutGameEffectPoolManager

#include "Basic.hpp"

#include "BP_AJBOutGameEffectPoolManager_classes.hpp"
#include "BP_AJBOutGameEffectPoolManager_parameters.hpp"


namespace SDK
{

// Function BP_AJBOutGameEffectPoolManager.BP_AJBOutGameEffectPoolManager_C.ExecuteUbergraph_BP_AJBOutGameEffectPoolManager
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBOutGameEffectPoolManager_C::ExecuteUbergraph_BP_AJBOutGameEffectPoolManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBOutGameEffectPoolManager_C", "ExecuteUbergraph_BP_AJBOutGameEffectPoolManager");

	Params::BP_AJBOutGameEffectPoolManager_C_ExecuteUbergraph_BP_AJBOutGameEffectPoolManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBOutGameEffectPoolManager.BP_AJBOutGameEffectPoolManager_C.ROC_RequestParticleEffectAttached
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              ParticleType                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class USceneComponent*                  AttachToComponent                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBOutGameEffectPoolManager_C::ROC_RequestParticleEffectAttached(const struct FGameplayTag& ParticleType, const struct FVector& Location, const struct FRotator& Rotation, class USceneComponent* AttachToComponent, class FName SocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBOutGameEffectPoolManager_C", "ROC_RequestParticleEffectAttached");

	Params::BP_AJBOutGameEffectPoolManager_C_ROC_RequestParticleEffectAttached Parms{};

	Parms.ParticleType = std::move(ParticleType);
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.AttachToComponent = AttachToComponent;
	Parms.SocketName = SocketName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBOutGameEffectPoolManager.BP_AJBOutGameEffectPoolManager_C.ROS_RequestParticleEffectAttached
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              ParticleType                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class USceneComponent*                  SceneComponentToAttach                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBOutGameEffectPoolManager_C::ROS_RequestParticleEffectAttached(const struct FGameplayTag& ParticleType, const struct FVector& Location, const struct FRotator& Rotation, class USceneComponent* SceneComponentToAttach, class FName SocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBOutGameEffectPoolManager_C", "ROS_RequestParticleEffectAttached");

	Params::BP_AJBOutGameEffectPoolManager_C_ROS_RequestParticleEffectAttached Parms{};

	Parms.ParticleType = std::move(ParticleType);
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.SceneComponentToAttach = SceneComponentToAttach;
	Parms.SocketName = SocketName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBOutGameEffectPoolManager.BP_AJBOutGameEffectPoolManager_C.ROC_RequestGionEffect
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              EffectType                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Owner_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_GionSpawnedSpace                      SpanwedSpaceInOwnersEnv                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_GionSpawnedSpace                      SpanwedSpaceInNotOwnersEnv                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayTag&              WwiseEventTag                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    bWwiseAutoPost                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bWwiseAutoDestroy                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class USceneComponent*                  SceneComponentToAttachWwise                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bGionDryRun                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bWwiseDryRun                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBOutGameEffectPoolManager_C::ROC_RequestGionEffect(const struct FGameplayTag& EffectType, class AActor* Owner_0, E_GionSpawnedSpace SpanwedSpaceInOwnersEnv, E_GionSpawnedSpace SpanwedSpaceInNotOwnersEnv, const struct FVector& Location, const struct FGameplayTag& WwiseEventTag, bool bWwiseAutoPost, bool bWwiseAutoDestroy, class USceneComponent* SceneComponentToAttachWwise, bool bGionDryRun, bool bWwiseDryRun)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBOutGameEffectPoolManager_C", "ROC_RequestGionEffect");

	Params::BP_AJBOutGameEffectPoolManager_C_ROC_RequestGionEffect Parms{};

	Parms.EffectType = std::move(EffectType);
	Parms.Owner_0 = Owner_0;
	Parms.SpanwedSpaceInOwnersEnv = SpanwedSpaceInOwnersEnv;
	Parms.SpanwedSpaceInNotOwnersEnv = SpanwedSpaceInNotOwnersEnv;
	Parms.Location = std::move(Location);
	Parms.WwiseEventTag = std::move(WwiseEventTag);
	Parms.bWwiseAutoPost = bWwiseAutoPost;
	Parms.bWwiseAutoDestroy = bWwiseAutoDestroy;
	Parms.SceneComponentToAttachWwise = SceneComponentToAttachWwise;
	Parms.bGionDryRun = bGionDryRun;
	Parms.bWwiseDryRun = bWwiseDryRun;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBOutGameEffectPoolManager.BP_AJBOutGameEffectPoolManager_C.ROS_RequestGionEffect
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              EffectType                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Owner_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_GionSpawnedSpace                      SpanwedSpaceInOwnersEnv                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_GionSpawnedSpace                      SpawnedSpaceInNotOwnersEnv                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayTag&              WwiseEventTag                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    bWwiseAutoPost                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bWwiseAutoDestroy                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class USceneComponent*                  SceneComponentToAttachWwise                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bGionDryRun                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bWwiseDryRun                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBOutGameEffectPoolManager_C::ROS_RequestGionEffect(const struct FGameplayTag& EffectType, class AActor* Owner_0, E_GionSpawnedSpace SpanwedSpaceInOwnersEnv, E_GionSpawnedSpace SpawnedSpaceInNotOwnersEnv, const struct FVector& Location, const struct FGameplayTag& WwiseEventTag, bool bWwiseAutoPost, bool bWwiseAutoDestroy, class USceneComponent* SceneComponentToAttachWwise, bool bGionDryRun, bool bWwiseDryRun)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBOutGameEffectPoolManager_C", "ROS_RequestGionEffect");

	Params::BP_AJBOutGameEffectPoolManager_C_ROS_RequestGionEffect Parms{};

	Parms.EffectType = std::move(EffectType);
	Parms.Owner_0 = Owner_0;
	Parms.SpanwedSpaceInOwnersEnv = SpanwedSpaceInOwnersEnv;
	Parms.SpawnedSpaceInNotOwnersEnv = SpawnedSpaceInNotOwnersEnv;
	Parms.Location = std::move(Location);
	Parms.WwiseEventTag = std::move(WwiseEventTag);
	Parms.bWwiseAutoPost = bWwiseAutoPost;
	Parms.bWwiseAutoDestroy = bWwiseAutoDestroy;
	Parms.SceneComponentToAttachWwise = SceneComponentToAttachWwise;
	Parms.bGionDryRun = bGionDryRun;
	Parms.bWwiseDryRun = bWwiseDryRun;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBOutGameEffectPoolManager.BP_AJBOutGameEffectPoolManager_C.ROC_RequestParticleEffect
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              ParticleType                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void ABP_AJBOutGameEffectPoolManager_C::ROC_RequestParticleEffect(const struct FGameplayTag& ParticleType, const struct FVector& Location, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBOutGameEffectPoolManager_C", "ROC_RequestParticleEffect");

	Params::BP_AJBOutGameEffectPoolManager_C_ROC_RequestParticleEffect Parms{};

	Parms.ParticleType = std::move(ParticleType);
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBOutGameEffectPoolManager.BP_AJBOutGameEffectPoolManager_C.ROS_RequestParticleEffect
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              ParticleType                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void ABP_AJBOutGameEffectPoolManager_C::ROS_RequestParticleEffect(const struct FGameplayTag& ParticleType, const struct FVector& Location, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBOutGameEffectPoolManager_C", "ROS_RequestParticleEffect");

	Params::BP_AJBOutGameEffectPoolManager_C_ROS_RequestParticleEffect Parms{};

	Parms.ParticleType = std::move(ParticleType);
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBOutGameEffectPoolManager.BP_AJBOutGameEffectPoolManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_AJBOutGameEffectPoolManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBOutGameEffectPoolManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBOutGameEffectPoolManager.BP_AJBOutGameEffectPoolManager_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_AJBOutGameEffectPoolManager_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBOutGameEffectPoolManager_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBOutGameEffectPoolManager.BP_AJBOutGameEffectPoolManager_C.IsOwnerEffect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           InputPin                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsOwnerClient                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBOutGameEffectPoolManager_C::IsOwnerEffect(class AActor* InputPin, bool* IsOwnerClient)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBOutGameEffectPoolManager_C", "IsOwnerEffect");

	Params::BP_AJBOutGameEffectPoolManager_C_IsOwnerEffect Parms{};

	Parms.InputPin = InputPin;

	UObject::ProcessEvent(Func, &Parms);

	if (IsOwnerClient != nullptr)
		*IsOwnerClient = Parms.IsOwnerClient;
}


// Function BP_AJBOutGameEffectPoolManager.BP_AJBOutGameEffectPoolManager_C.SetupEffectScreen
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_AJBOutGameEffectPoolManager_C::SetupEffectScreen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBOutGameEffectPoolManager_C", "SetupEffectScreen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBOutGameEffectPoolManager.BP_AJBOutGameEffectPoolManager_C.EmitParticleEffect
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              ParticleType                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class ABP_AJBInGameParticleEffect_C**   ParticleEffect                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBOutGameEffectPoolManager_C::EmitParticleEffect(const struct FGameplayTag& ParticleType, const struct FVector& Location, const struct FRotator& Rotation, class ABP_AJBInGameParticleEffect_C** ParticleEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBOutGameEffectPoolManager_C", "EmitParticleEffect");

	Params::BP_AJBOutGameEffectPoolManager_C_EmitParticleEffect Parms{};

	Parms.ParticleType = std::move(ParticleType);
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);

	if (ParticleEffect != nullptr)
		*ParticleEffect = Parms.ParticleEffect;
}


// Function BP_AJBOutGameEffectPoolManager.BP_AJBOutGameEffectPoolManager_C.RequestParticleEffectOnAll
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              ParticleType                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void ABP_AJBOutGameEffectPoolManager_C::RequestParticleEffectOnAll(const struct FGameplayTag& ParticleType, const struct FVector& Location, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBOutGameEffectPoolManager_C", "RequestParticleEffectOnAll");

	Params::BP_AJBOutGameEffectPoolManager_C_RequestParticleEffectOnAll Parms{};

	Parms.ParticleType = std::move(ParticleType);
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBOutGameEffectPoolManager.BP_AJBOutGameEffectPoolManager_C.LocalGionEffect
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              EffectType                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Owner_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_GionSpawnedSpace                      SpanwedSpaceInOwnersEnv                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_GionSpawnedSpace                      SpanwedSpaceInNotOwnersEnv                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayTag&              WwiseEventTag                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    bWwiseAutoPost                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bWwiseAutoDestroy                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class USceneComponent*                  SceneComponentToAttachWwise                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bGionDryRun                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bWwiseDryRun                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UAkComponent**                    AkComponent_LocalOnly_                                 (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bFullfilGionDisplayingCondition                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBOutGameEffectPoolManager_C::LocalGionEffect(const struct FGameplayTag& EffectType, class AActor* Owner_0, E_GionSpawnedSpace SpanwedSpaceInOwnersEnv, E_GionSpawnedSpace SpanwedSpaceInNotOwnersEnv, const struct FVector& Location, const struct FGameplayTag& WwiseEventTag, bool bWwiseAutoPost, bool bWwiseAutoDestroy, class USceneComponent* SceneComponentToAttachWwise, bool bGionDryRun, bool bWwiseDryRun, class UAkComponent** AkComponent_LocalOnly_, bool* bFullfilGionDisplayingCondition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBOutGameEffectPoolManager_C", "LocalGionEffect");

	Params::BP_AJBOutGameEffectPoolManager_C_LocalGionEffect Parms{};

	Parms.EffectType = std::move(EffectType);
	Parms.Owner_0 = Owner_0;
	Parms.SpanwedSpaceInOwnersEnv = SpanwedSpaceInOwnersEnv;
	Parms.SpanwedSpaceInNotOwnersEnv = SpanwedSpaceInNotOwnersEnv;
	Parms.Location = std::move(Location);
	Parms.WwiseEventTag = std::move(WwiseEventTag);
	Parms.bWwiseAutoPost = bWwiseAutoPost;
	Parms.bWwiseAutoDestroy = bWwiseAutoDestroy;
	Parms.SceneComponentToAttachWwise = SceneComponentToAttachWwise;
	Parms.bGionDryRun = bGionDryRun;
	Parms.bWwiseDryRun = bWwiseDryRun;

	UObject::ProcessEvent(Func, &Parms);

	if (AkComponent_LocalOnly_ != nullptr)
		*AkComponent_LocalOnly_ = Parms.AkComponent_LocalOnly_;

	if (bFullfilGionDisplayingCondition != nullptr)
		*bFullfilGionDisplayingCondition = Parms.bFullfilGionDisplayingCondition;
}


// Function BP_AJBOutGameEffectPoolManager.BP_AJBOutGameEffectPoolManager_C.ShouldSpawnGionIn3DWorldSpace
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FGameplayTag&              EffectType                                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Owner_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_GionSpawnedSpace                      GionSpawnedSpaceInOwnersEnv                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_GionSpawnedSpace                      GionSpawnedSpaceInNotOwnersEnv                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_AJBOutGameEffectPoolManager_C::ShouldSpawnGionIn3DWorldSpace(const struct FGameplayTag& EffectType, class AActor* Owner_0, E_GionSpawnedSpace GionSpawnedSpaceInOwnersEnv, E_GionSpawnedSpace GionSpawnedSpaceInNotOwnersEnv)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBOutGameEffectPoolManager_C", "ShouldSpawnGionIn3DWorldSpace");

	Params::BP_AJBOutGameEffectPoolManager_C_ShouldSpawnGionIn3DWorldSpace Parms{};

	Parms.EffectType = std::move(EffectType);
	Parms.Owner_0 = Owner_0;
	Parms.GionSpawnedSpaceInOwnersEnv = GionSpawnedSpaceInOwnersEnv;
	Parms.GionSpawnedSpaceInNotOwnersEnv = GionSpawnedSpaceInNotOwnersEnv;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_AJBOutGameEffectPoolManager.BP_AJBOutGameEffectPoolManager_C.EmitParticleEffectAttached
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              EffectTag                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class USceneComponent*                  AttachToComponent                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_AJBInGameParticleEffect_C**   ParticleEffect                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBOutGameEffectPoolManager_C::EmitParticleEffectAttached(const struct FGameplayTag& EffectTag, const struct FVector& Location, const struct FRotator& Rotation, class USceneComponent* AttachToComponent, class FName SocketName, class ABP_AJBInGameParticleEffect_C** ParticleEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBOutGameEffectPoolManager_C", "EmitParticleEffectAttached");

	Params::BP_AJBOutGameEffectPoolManager_C_EmitParticleEffectAttached Parms{};

	Parms.EffectTag = std::move(EffectTag);
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.AttachToComponent = AttachToComponent;
	Parms.SocketName = SocketName;

	UObject::ProcessEvent(Func, &Parms);

	if (ParticleEffect != nullptr)
		*ParticleEffect = Parms.ParticleEffect;
}


// Function BP_AJBOutGameEffectPoolManager.BP_AJBOutGameEffectPoolManager_C.RequestParticleEffectAttachedOnAll
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              ParticleType                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class USceneComponent*                  SceneComponentToAttach                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AJBOutGameEffectPoolManager_C::RequestParticleEffectAttachedOnAll(const struct FGameplayTag& ParticleType, const struct FVector& Location, const struct FRotator& Rotation, class USceneComponent* SceneComponentToAttach, class FName SocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBOutGameEffectPoolManager_C", "RequestParticleEffectAttachedOnAll");

	Params::BP_AJBOutGameEffectPoolManager_C_RequestParticleEffectAttachedOnAll Parms{};

	Parms.ParticleType = std::move(ParticleType);
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.SceneComponentToAttach = SceneComponentToAttach;
	Parms.SocketName = SocketName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBOutGameEffectPoolManager.BP_AJBOutGameEffectPoolManager_C.RequestGionEffect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              EffectTag                                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Owner_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_GionSpawnedSpace                      SpawnedSpaceInOwnersEnv                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_GionSpawnedSpace                      SpawnedSpaceInNotOwnersEnv                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   WorldLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsLocalOnly                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FGameplayTag&              WwiseEventTag                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    bWwiseAutoPost                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bWwiseAutoDestroy                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class USceneComponent*                  SceneComponentToAttachWwise                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bGionDryRun                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bWwiseDryRun                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UAkComponent**                    AkComponent_LocalOnly_                                 (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bFullfilDisplayCond_LocalOnly_                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBOutGameEffectPoolManager_C::RequestGionEffect(const struct FGameplayTag& EffectTag, class AActor* Owner_0, E_GionSpawnedSpace SpawnedSpaceInOwnersEnv, E_GionSpawnedSpace SpawnedSpaceInNotOwnersEnv, const struct FVector& WorldLocation, bool bIsLocalOnly, const struct FGameplayTag& WwiseEventTag, bool bWwiseAutoPost, bool bWwiseAutoDestroy, class USceneComponent* SceneComponentToAttachWwise, bool bGionDryRun, bool bWwiseDryRun, class UAkComponent** AkComponent_LocalOnly_, bool* bFullfilDisplayCond_LocalOnly_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBOutGameEffectPoolManager_C", "RequestGionEffect");

	Params::BP_AJBOutGameEffectPoolManager_C_RequestGionEffect Parms{};

	Parms.EffectTag = std::move(EffectTag);
	Parms.Owner_0 = Owner_0;
	Parms.SpawnedSpaceInOwnersEnv = SpawnedSpaceInOwnersEnv;
	Parms.SpawnedSpaceInNotOwnersEnv = SpawnedSpaceInNotOwnersEnv;
	Parms.WorldLocation = std::move(WorldLocation);
	Parms.bIsLocalOnly = bIsLocalOnly;
	Parms.WwiseEventTag = std::move(WwiseEventTag);
	Parms.bWwiseAutoPost = bWwiseAutoPost;
	Parms.bWwiseAutoDestroy = bWwiseAutoDestroy;
	Parms.SceneComponentToAttachWwise = SceneComponentToAttachWwise;
	Parms.bGionDryRun = bGionDryRun;
	Parms.bWwiseDryRun = bWwiseDryRun;

	UObject::ProcessEvent(Func, &Parms);

	if (AkComponent_LocalOnly_ != nullptr)
		*AkComponent_LocalOnly_ = Parms.AkComponent_LocalOnly_;

	if (bFullfilDisplayCond_LocalOnly_ != nullptr)
		*bFullfilDisplayCond_LocalOnly_ = Parms.bFullfilDisplayCond_LocalOnly_;
}


// Function BP_AJBOutGameEffectPoolManager.BP_AJBOutGameEffectPoolManager_C.ShouldPostWwiseEvent
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FGameplayTag&              WwiseEventTag                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   GionWorldLocation                                      (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FST_GionInfo&              GionInfo                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class AActor*                           Owner_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_GionSpawnedSpace                      SpanwedSpaceInOwnersEnv                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_GionSpawnedSpace                      SpanwedSpaceInNotOwnersEnv                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_AJBOutGameEffectPoolManager_C::ShouldPostWwiseEvent(const struct FGameplayTag& WwiseEventTag, const struct FVector& GionWorldLocation, const struct FST_GionInfo& GionInfo, class AActor* Owner_0, E_GionSpawnedSpace SpanwedSpaceInOwnersEnv, E_GionSpawnedSpace SpanwedSpaceInNotOwnersEnv, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBOutGameEffectPoolManager_C", "ShouldPostWwiseEvent");

	Params::BP_AJBOutGameEffectPoolManager_C_ShouldPostWwiseEvent Parms{};

	Parms.WwiseEventTag = std::move(WwiseEventTag);
	Parms.GionWorldLocation = std::move(GionWorldLocation);
	Parms.GionInfo = std::move(GionInfo);
	Parms.Owner_0 = Owner_0;
	Parms.SpanwedSpaceInOwnersEnv = SpanwedSpaceInOwnersEnv;
	Parms.SpanwedSpaceInNotOwnersEnv = SpanwedSpaceInNotOwnersEnv;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}

}

