#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTS_AJBNaviDirectorSHA

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTS_AJBNaviDirectorSHA.BTS_AJBNaviDirectorSHA_C
// 0x0238 (0x02D0 - 0x0098)
class UBTS_AJBNaviDirectorSHA_C final : public UBTService_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0098(0x0008)(Transient, DuplicateTransient)
	class AEventTagLocker*                        NaviGoalEventTagLocker;                            // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AEventTagLocker*                        IsStoppingEventTagLocker;                          // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameAIImaginaryCharacter_C*    EnemyCharacter;                                    // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNavigationPath*                        NavigationPath;                                    // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_AJBInGameAIRecognition_C*           Recognition;                                       // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SheerHeartAttackSearchRadiusParam;                 // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBInGameAIEnvironment_C*           Environment;                                       // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_AJBInGameAIImaginaryCharacter_C*> DebugEnemyCandidates;                         // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         SheerHeartAttackUpdateEnemyParam;                  // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_AJBInGameAIImaginaryCharacter_C*> AllEnemiesCache;                              // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         SheerHeartAttackUpdateEnemyIfNotFoundParam;        // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlackboardKeySelector                 PathToApproachKey;                                 // 0x0108(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 FinalDestinationKey;                               // 0x0130(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 GateActorKey;                                      // 0x0158(0x0028)(Edit, BlueprintVisible)
	class ABP_AJBInGameAIImaginaryCharacter_C*    LastEnemyCharacter;                                // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           LastNaviGoalEventTag;                              // 0x0188(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         SheerHeartAttackUpdateEnemyGoStraight;             // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_194[0x4];                                      // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameAIImaginaryCharacter_C*    ImaginaryCharacterSHA;                             // 0x0198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBlackboardKeySelector                 FocusingEnemyKey;                                  // 0x01A0(0x0028)(Edit, BlueprintVisible)
	class UBP_AJBAIInGameCharacterHandle_C*       EnemyCharacterHandle;                              // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 EnemyLastInteractedActor;                          // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SheerHeartAttackDistanceToEnemyLastInteractedGateParam; // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AEventTagLocker*                        DebugNaviCharaTagLocker;                           // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SheerHeartAttackTimeToForgetEnemyLastInteractedGateParam; // 0x01E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EC[0x4];                                      // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBAIHouseInfo_C*                   HouseInfoTargetOn;                                 // 0x01F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<struct FGameplayTag, float>              JumpZVelocityParamDictionary;                      // 0x01F8(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FGameplayTag                           JumpZVelocityCurrentTag;                           // 0x0248(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceThreshIfLastPathPointGoTheGateReachable;   // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_254[0x4];                                      // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DebugStringCache;                                  // 0x0258(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class AActor*>                         AllBurningActors;                                  // 0x0268(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	class AActor*                                 BurningActorToFollow;                              // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsTargetIndoor;                                   // 0x0280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_281[0x3];                                      // 0x0281(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BurningActorToFollowLocationCache;                 // 0x0284(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ActorToFolowLocationCache;                         // 0x0290(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 NearestDoorsNotInHouse;                            // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBlackboardKeySelector                 ForceCloseDoorKey;                                 // 0x02A8(0x0028)(Edit, BlueprintVisible)

public:
	void ExecuteUbergraph_BTS_AJBNaviDirectorSHA(int32 EntryPoint);
	void CacheBurningActor(class AActor* BurningActorToFollow_0, class UNavigationPath* InputPin);
	void TryGoToDoorNotInHouse();
	void FindDoorsNotInHouseAround();
	void InitializeFindingDoorNotInHouseAround();
	void ApproachFromIndoorOnPathExists();
	void ApproachFromOutdoorOnPathExists();
	void ApproachToRoofTop(class ABP_AJBAIHouseInfo_C* HouseInfo);
	void ApproachToEnemy();
	void GoToGate(class AActor* GateActor, class UNavigationPath* NavigationPath_0);
	void OnEnemyInteracted(class AActor* InteractTargetActor, class AActor* InteractingActor);
	void InitializeStoppingErrorDetection();
	void TickStoppingErrorDetection();
	void ApproachWithPathToEnemy();
	void GoStraightToEnemy(const class FString& SequenceFrom);
	void GoToClosedDoorInTheHouse(class ABP_AJBAIHouseInfo_C* HouseInfo);
	void GoOutside();
	void GoToTheGateEnemyInFromOutside();
	void ReceiveActivationAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ApproachWithPathIndirectly();
	void UpdateEnemyAndPath();
	void DebugDrawGate(class AActor* GateActor);
	void DebugDrawHouse(class ABP_AJBAIHouseInfo_C* HouseInfo);
	void StartDebugDraw();
	void DebugDraw();
	void OnEventTagUnlocked(const struct FGameplayTag& EventTag);
	void OnEventTagLocked(const struct FGameplayTag& EventTag);
	void OnBurningActorRemoved(class AActor* BurningActor);
	void OnBurningActorAdded(class AActor* BurningActor);
	void FindMostApproachableEnemy(class ABP_AJBInGameAIImaginaryCharacter_C** Character, class UNavigationPath** NavigationPath_0, float* Distance);
	void FindNearestClosedDoorInHouse(class ABP_AJBAIHouseInfo_C* HouseInfo, float PathDistanceThresh, bool bIncludeDoors1FFacingOut, class AAJBInGameGate** Door, class UNavigationPath** PathToDoor);
	class ABP_AJBAIHouseInfo_C* FindHouseInfoEnemyOn(class ABP_AJBInGameAIImaginaryCharacter_C* Enemy, class UBP_AJBAIInGameCharacterHandle_C* CharacterHandle);
	void SwitchJumpZVelocity(const struct FGameplayTag& NaviActionTag);
	void FindNearestGateReachable(class ABP_AJBInGameAIImaginaryCharacter_C* ImaginaryCharacter, TArray<class AActor*>& GateArray, class AActor** GateActor, class UNavigationPath** PathToGate, float* PathDistance);
	void FindMostApproachableBurningActor(bool CharacterSamePriority, class AActor** Actor, class UNavigationPath** NavigationPath_0, float* Distance);
	void FindNearestGateReachableByLocation(const struct FVector& Location, TArray<class AActor*>& GateArray, class AActor** GateActor, class UNavigationPath** PathToGate, float* PathDistance);
	class AActor* FindNearestDoorNotInHouse(const struct FVector& Location);
	void FindExpectedDoorInHouse(class ABP_AJBAIHouseInfo_C* HouseInfo, float PathDistanceThresh, const struct FVector& TargetLocation, class AAJBInGameGate** Door, class UNavigationPath** PathToDoor);
	void GetAllEnemies(TArray<class ABP_AJBInGameAIImaginaryCharacter_C*>* AllEnemies);
	void OverrideBehaviorToClosingBlockedDoor();
	void TestIsPathBlockedByDoor(bool* IsBlocked, class UNavigationPath** PathToDoor, class ABP_AJBGate_C** DoorActor, struct FVector* TraceImpactPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTS_AJBNaviDirectorSHA_C">();
	}
	static class UBTS_AJBNaviDirectorSHA_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTS_AJBNaviDirectorSHA_C>();
	}
};
static_assert(alignof(UBTS_AJBNaviDirectorSHA_C) == 0x000008, "Wrong alignment on UBTS_AJBNaviDirectorSHA_C");
static_assert(sizeof(UBTS_AJBNaviDirectorSHA_C) == 0x0002D0, "Wrong size on UBTS_AJBNaviDirectorSHA_C");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, UberGraphFrame) == 0x000098, "Member 'UBTS_AJBNaviDirectorSHA_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, NaviGoalEventTagLocker) == 0x0000A0, "Member 'UBTS_AJBNaviDirectorSHA_C::NaviGoalEventTagLocker' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, IsStoppingEventTagLocker) == 0x0000A8, "Member 'UBTS_AJBNaviDirectorSHA_C::IsStoppingEventTagLocker' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, EnemyCharacter) == 0x0000B0, "Member 'UBTS_AJBNaviDirectorSHA_C::EnemyCharacter' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, NavigationPath) == 0x0000B8, "Member 'UBTS_AJBNaviDirectorSHA_C::NavigationPath' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, Recognition) == 0x0000C0, "Member 'UBTS_AJBNaviDirectorSHA_C::Recognition' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, SheerHeartAttackSearchRadiusParam) == 0x0000C8, "Member 'UBTS_AJBNaviDirectorSHA_C::SheerHeartAttackSearchRadiusParam' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, Environment) == 0x0000D0, "Member 'UBTS_AJBNaviDirectorSHA_C::Environment' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, DebugEnemyCandidates) == 0x0000D8, "Member 'UBTS_AJBNaviDirectorSHA_C::DebugEnemyCandidates' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, SheerHeartAttackUpdateEnemyParam) == 0x0000E8, "Member 'UBTS_AJBNaviDirectorSHA_C::SheerHeartAttackUpdateEnemyParam' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, AllEnemiesCache) == 0x0000F0, "Member 'UBTS_AJBNaviDirectorSHA_C::AllEnemiesCache' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, SheerHeartAttackUpdateEnemyIfNotFoundParam) == 0x000100, "Member 'UBTS_AJBNaviDirectorSHA_C::SheerHeartAttackUpdateEnemyIfNotFoundParam' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, PathToApproachKey) == 0x000108, "Member 'UBTS_AJBNaviDirectorSHA_C::PathToApproachKey' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, FinalDestinationKey) == 0x000130, "Member 'UBTS_AJBNaviDirectorSHA_C::FinalDestinationKey' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, GateActorKey) == 0x000158, "Member 'UBTS_AJBNaviDirectorSHA_C::GateActorKey' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, LastEnemyCharacter) == 0x000180, "Member 'UBTS_AJBNaviDirectorSHA_C::LastEnemyCharacter' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, LastNaviGoalEventTag) == 0x000188, "Member 'UBTS_AJBNaviDirectorSHA_C::LastNaviGoalEventTag' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, SheerHeartAttackUpdateEnemyGoStraight) == 0x000190, "Member 'UBTS_AJBNaviDirectorSHA_C::SheerHeartAttackUpdateEnemyGoStraight' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, ImaginaryCharacterSHA) == 0x000198, "Member 'UBTS_AJBNaviDirectorSHA_C::ImaginaryCharacterSHA' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, FocusingEnemyKey) == 0x0001A0, "Member 'UBTS_AJBNaviDirectorSHA_C::FocusingEnemyKey' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, EnemyCharacterHandle) == 0x0001C8, "Member 'UBTS_AJBNaviDirectorSHA_C::EnemyCharacterHandle' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, EnemyLastInteractedActor) == 0x0001D0, "Member 'UBTS_AJBNaviDirectorSHA_C::EnemyLastInteractedActor' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, SheerHeartAttackDistanceToEnemyLastInteractedGateParam) == 0x0001D8, "Member 'UBTS_AJBNaviDirectorSHA_C::SheerHeartAttackDistanceToEnemyLastInteractedGateParam' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, DebugNaviCharaTagLocker) == 0x0001E0, "Member 'UBTS_AJBNaviDirectorSHA_C::DebugNaviCharaTagLocker' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, SheerHeartAttackTimeToForgetEnemyLastInteractedGateParam) == 0x0001E8, "Member 'UBTS_AJBNaviDirectorSHA_C::SheerHeartAttackTimeToForgetEnemyLastInteractedGateParam' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, HouseInfoTargetOn) == 0x0001F0, "Member 'UBTS_AJBNaviDirectorSHA_C::HouseInfoTargetOn' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, JumpZVelocityParamDictionary) == 0x0001F8, "Member 'UBTS_AJBNaviDirectorSHA_C::JumpZVelocityParamDictionary' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, JumpZVelocityCurrentTag) == 0x000248, "Member 'UBTS_AJBNaviDirectorSHA_C::JumpZVelocityCurrentTag' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, DistanceThreshIfLastPathPointGoTheGateReachable) == 0x000250, "Member 'UBTS_AJBNaviDirectorSHA_C::DistanceThreshIfLastPathPointGoTheGateReachable' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, DebugStringCache) == 0x000258, "Member 'UBTS_AJBNaviDirectorSHA_C::DebugStringCache' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, AllBurningActors) == 0x000268, "Member 'UBTS_AJBNaviDirectorSHA_C::AllBurningActors' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, BurningActorToFollow) == 0x000278, "Member 'UBTS_AJBNaviDirectorSHA_C::BurningActorToFollow' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, bIsTargetIndoor) == 0x000280, "Member 'UBTS_AJBNaviDirectorSHA_C::bIsTargetIndoor' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, BurningActorToFollowLocationCache) == 0x000284, "Member 'UBTS_AJBNaviDirectorSHA_C::BurningActorToFollowLocationCache' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, ActorToFolowLocationCache) == 0x000290, "Member 'UBTS_AJBNaviDirectorSHA_C::ActorToFolowLocationCache' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, NearestDoorsNotInHouse) == 0x0002A0, "Member 'UBTS_AJBNaviDirectorSHA_C::NearestDoorsNotInHouse' has a wrong offset!");
static_assert(offsetof(UBTS_AJBNaviDirectorSHA_C, ForceCloseDoorKey) == 0x0002A8, "Member 'UBTS_AJBNaviDirectorSHA_C::ForceCloseDoorKey' has a wrong offset!");

}

