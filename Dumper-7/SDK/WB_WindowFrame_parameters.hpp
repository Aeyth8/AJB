#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_WindowFrame

#include "Basic.hpp"

#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WB_WindowFrame.WB_WindowFrame_C.ExecuteUbergraph_WB_WindowFrame
// 0x0030 (0x0030 - 0x0000)
struct WB_WindowFrame_C_ExecuteUbergraph_WB_WindowFrame final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable1;                               // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bVisible;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_CustomEvent_InText;                         // 0x0010(0x0018)()
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_WindowFrame_C_ExecuteUbergraph_WB_WindowFrame) == 0x000008, "Wrong alignment on WB_WindowFrame_C_ExecuteUbergraph_WB_WindowFrame");
static_assert(sizeof(WB_WindowFrame_C_ExecuteUbergraph_WB_WindowFrame) == 0x000030, "Wrong size on WB_WindowFrame_C_ExecuteUbergraph_WB_WindowFrame");
static_assert(offsetof(WB_WindowFrame_C_ExecuteUbergraph_WB_WindowFrame, EntryPoint) == 0x000000, "Member 'WB_WindowFrame_C_ExecuteUbergraph_WB_WindowFrame::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_WindowFrame_C_ExecuteUbergraph_WB_WindowFrame, Temp_bool_Variable) == 0x000004, "Member 'WB_WindowFrame_C_ExecuteUbergraph_WB_WindowFrame::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_WindowFrame_C_ExecuteUbergraph_WB_WindowFrame, Temp_byte_Variable) == 0x000005, "Member 'WB_WindowFrame_C_ExecuteUbergraph_WB_WindowFrame::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WB_WindowFrame_C_ExecuteUbergraph_WB_WindowFrame, Temp_byte_Variable1) == 0x000006, "Member 'WB_WindowFrame_C_ExecuteUbergraph_WB_WindowFrame::Temp_byte_Variable1' has a wrong offset!");
static_assert(offsetof(WB_WindowFrame_C_ExecuteUbergraph_WB_WindowFrame, K2Node_Event_IsDesignTime) == 0x000007, "Member 'WB_WindowFrame_C_ExecuteUbergraph_WB_WindowFrame::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WB_WindowFrame_C_ExecuteUbergraph_WB_WindowFrame, K2Node_CustomEvent_bVisible) == 0x000008, "Member 'WB_WindowFrame_C_ExecuteUbergraph_WB_WindowFrame::K2Node_CustomEvent_bVisible' has a wrong offset!");
static_assert(offsetof(WB_WindowFrame_C_ExecuteUbergraph_WB_WindowFrame, K2Node_CustomEvent_InText) == 0x000010, "Member 'WB_WindowFrame_C_ExecuteUbergraph_WB_WindowFrame::K2Node_CustomEvent_InText' has a wrong offset!");
static_assert(offsetof(WB_WindowFrame_C_ExecuteUbergraph_WB_WindowFrame, K2Node_Select_Default) == 0x000028, "Member 'WB_WindowFrame_C_ExecuteUbergraph_WB_WindowFrame::K2Node_Select_Default' has a wrong offset!");

// Function WB_WindowFrame.WB_WindowFrame_C.SetTextTitle
// 0x0018 (0x0018 - 0x0000)
struct WB_WindowFrame_C_SetTextTitle final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WB_WindowFrame_C_SetTextTitle) == 0x000008, "Wrong alignment on WB_WindowFrame_C_SetTextTitle");
static_assert(sizeof(WB_WindowFrame_C_SetTextTitle) == 0x000018, "Wrong size on WB_WindowFrame_C_SetTextTitle");
static_assert(offsetof(WB_WindowFrame_C_SetTextTitle, InText) == 0x000000, "Member 'WB_WindowFrame_C_SetTextTitle::InText' has a wrong offset!");

// Function WB_WindowFrame.WB_WindowFrame_C.SetVisibleTitle
// 0x0001 (0x0001 - 0x0000)
struct WB_WindowFrame_C_SetVisibleTitle final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_WindowFrame_C_SetVisibleTitle) == 0x000001, "Wrong alignment on WB_WindowFrame_C_SetVisibleTitle");
static_assert(sizeof(WB_WindowFrame_C_SetVisibleTitle) == 0x000001, "Wrong size on WB_WindowFrame_C_SetVisibleTitle");
static_assert(offsetof(WB_WindowFrame_C_SetVisibleTitle, bVisible) == 0x000000, "Member 'WB_WindowFrame_C_SetVisibleTitle::bVisible' has a wrong offset!");

// Function WB_WindowFrame.WB_WindowFrame_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WB_WindowFrame_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_WindowFrame_C_PreConstruct) == 0x000001, "Wrong alignment on WB_WindowFrame_C_PreConstruct");
static_assert(sizeof(WB_WindowFrame_C_PreConstruct) == 0x000001, "Wrong size on WB_WindowFrame_C_PreConstruct");
static_assert(offsetof(WB_WindowFrame_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WB_WindowFrame_C_PreConstruct::IsDesignTime' has a wrong offset!");

}

