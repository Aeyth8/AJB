#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_PvE_ScoreWindow

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "ST_AJBPvEScoreResult_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "EPvEGameDifficulty_structs.hpp"


namespace SDK::Params
{

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.ExecuteUbergraph_WB_PvE_ScoreWindow
// 0x00E8 (0x00E8 - 0x0000)
struct WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBButtonWidget*                       K2Node_ComponentBoundEvent_OwnerWidget;            // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAJBButton*                             K2Node_ComponentBoundEvent_TargetButton;           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           CallFunc_RequestWwiseEventOnLocal_AkComponent;     // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           CallFunc_RequestWwiseEventOnLocal_AkComponent1;    // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            K2Node_CustomEvent_Difficulty;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_AJBPvEScoreResult                  K2Node_CustomEvent_ScoreResult;                    // 0x002C(0x0020)(HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_GetPvEScoreRankDBIVoiceTag_VoiceTag;      // 0x0050(0x0008)(NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           CallFunc_RequestWwiseEventOnLocal_AkComponent2;    // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBInGamePvEHUD_bSuccess;              // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGamePvEHUD_C*                  CallFunc_GetAJBInGamePvEHUD_InGamePvEHUD;          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_HUDCountDownTimerWrapper_C*         CallFunc_SpawnObject_ReturnValue;                  // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0078(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x00B8(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate1;             // 0x00C8(0x0010)(ZeroConstructor, NoDestructor)
	class UAkComponent*                           CallFunc_RequestWwiseEventOnLocal_AkComponent3;    // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow) == 0x000008, "Wrong alignment on WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow");
static_assert(sizeof(WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow) == 0x0000E8, "Wrong size on WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow");
static_assert(offsetof(WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow, EntryPoint) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow, K2Node_ComponentBoundEvent_OwnerWidget) == 0x000008, "Member 'WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow::K2Node_ComponentBoundEvent_OwnerWidget' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow, K2Node_ComponentBoundEvent_TargetButton) == 0x000010, "Member 'WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow::K2Node_ComponentBoundEvent_TargetButton' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow, CallFunc_RequestWwiseEventOnLocal_AkComponent) == 0x000018, "Member 'WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow::CallFunc_RequestWwiseEventOnLocal_AkComponent' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow, CallFunc_RequestWwiseEventOnLocal_AkComponent1) == 0x000020, "Member 'WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow::CallFunc_RequestWwiseEventOnLocal_AkComponent1' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow, K2Node_CustomEvent_Difficulty) == 0x000028, "Member 'WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow::K2Node_CustomEvent_Difficulty' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow, K2Node_CustomEvent_ScoreResult) == 0x00002C, "Member 'WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow::K2Node_CustomEvent_ScoreResult' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow, CallFunc_GetPvEScoreRankDBIVoiceTag_VoiceTag) == 0x000050, "Member 'WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow::CallFunc_GetPvEScoreRankDBIVoiceTag_VoiceTag' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow, CallFunc_RequestWwiseEventOnLocal_AkComponent2) == 0x000058, "Member 'WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow::CallFunc_RequestWwiseEventOnLocal_AkComponent2' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow, CallFunc_GetAJBInGamePvEHUD_bSuccess) == 0x000060, "Member 'WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow::CallFunc_GetAJBInGamePvEHUD_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow, CallFunc_GetAJBInGamePvEHUD_InGamePvEHUD) == 0x000068, "Member 'WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow::CallFunc_GetAJBInGamePvEHUD_InGamePvEHUD' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow, CallFunc_SpawnObject_ReturnValue) == 0x000070, "Member 'WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow, K2Node_Event_MyGeometry) == 0x000078, "Member 'WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow, K2Node_Event_InDeltaTime) == 0x0000B0, "Member 'WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow, K2Node_CreateDelegate_OutputDelegate) == 0x0000B8, "Member 'WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow, K2Node_CreateDelegate_OutputDelegate1) == 0x0000C8, "Member 'WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow, CallFunc_RequestWwiseEventOnLocal_AkComponent3) == 0x0000D8, "Member 'WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow::CallFunc_RequestWwiseEventOnLocal_AkComponent3' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow, K2Node_Event_IsDesignTime) == 0x0000E0, "Member 'WB_PvE_ScoreWindow_C_ExecuteUbergraph_WB_PvE_ScoreWindow::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_ScoreWindow_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_ScoreWindow_C_PreConstruct) == 0x000001, "Wrong alignment on WB_PvE_ScoreWindow_C_PreConstruct");
static_assert(sizeof(WB_PvE_ScoreWindow_C_PreConstruct) == 0x000001, "Wrong size on WB_PvE_ScoreWindow_C_PreConstruct");
static_assert(offsetof(WB_PvE_ScoreWindow_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.Tick
// 0x003C (0x003C - 0x0000)
struct WB_PvE_ScoreWindow_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PvE_ScoreWindow_C_Tick) == 0x000004, "Wrong alignment on WB_PvE_ScoreWindow_C_Tick");
static_assert(sizeof(WB_PvE_ScoreWindow_C_Tick) == 0x00003C, "Wrong size on WB_PvE_ScoreWindow_C_Tick");
static_assert(offsetof(WB_PvE_ScoreWindow_C_Tick, MyGeometry) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_Tick, InDeltaTime) == 0x000038, "Member 'WB_PvE_ScoreWindow_C_Tick::InDeltaTime' has a wrong offset!");

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.OpenWindowWithResult
// 0x0024 (0x0024 - 0x0000)
struct WB_PvE_ScoreWindow_C_OpenWindowWithResult final
{
public:
	EPvEGameDifficulty                            Difficulty;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_AJBPvEScoreResult                  ScoreResult;                                       // 0x0004(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(WB_PvE_ScoreWindow_C_OpenWindowWithResult) == 0x000004, "Wrong alignment on WB_PvE_ScoreWindow_C_OpenWindowWithResult");
static_assert(sizeof(WB_PvE_ScoreWindow_C_OpenWindowWithResult) == 0x000024, "Wrong size on WB_PvE_ScoreWindow_C_OpenWindowWithResult");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OpenWindowWithResult, Difficulty) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_OpenWindowWithResult::Difficulty' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OpenWindowWithResult, ScoreResult) == 0x000004, "Member 'WB_PvE_ScoreWindow_C_OpenWindowWithResult::ScoreResult' has a wrong offset!");

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.BndEvt__WB_CommonButton_Close_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct WB_PvE_ScoreWindow_C_BndEvt__WB_CommonButton_Close_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature final
{
public:
	class UAJBButtonWidget*                       OwnerWidget;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAJBButton*                             TargetButton;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PvE_ScoreWindow_C_BndEvt__WB_CommonButton_Close_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature) == 0x000008, "Wrong alignment on WB_PvE_ScoreWindow_C_BndEvt__WB_CommonButton_Close_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature");
static_assert(sizeof(WB_PvE_ScoreWindow_C_BndEvt__WB_CommonButton_Close_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature) == 0x000010, "Wrong size on WB_PvE_ScoreWindow_C_BndEvt__WB_CommonButton_Close_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature");
static_assert(offsetof(WB_PvE_ScoreWindow_C_BndEvt__WB_CommonButton_Close_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature, OwnerWidget) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_BndEvt__WB_CommonButton_Close_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature::OwnerWidget' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_BndEvt__WB_CommonButton_Close_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature, TargetButton) == 0x000008, "Member 'WB_PvE_ScoreWindow_C_BndEvt__WB_CommonButton_Close_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature::TargetButton' has a wrong offset!");

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.SetScoreRankText
// 0x0008 (0x0008 - 0x0000)
struct WB_PvE_ScoreWindow_C_SetScoreRankText final
{
public:
	int32                                         ScoreRank;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_ScoreWindow_C_SetScoreRankText) == 0x000004, "Wrong alignment on WB_PvE_ScoreWindow_C_SetScoreRankText");
static_assert(sizeof(WB_PvE_ScoreWindow_C_SetScoreRankText) == 0x000008, "Wrong size on WB_PvE_ScoreWindow_C_SetScoreRankText");
static_assert(offsetof(WB_PvE_ScoreWindow_C_SetScoreRankText, ScoreRank) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_SetScoreRankText::ScoreRank' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_SetScoreRankText, K2Node_SwitchInteger_CmpSuccess) == 0x000004, "Member 'WB_PvE_ScoreWindow_C_SetScoreRankText::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.UpdateResult
// 0x0290 (0x0290 - 0x0000)
struct WB_PvE_ScoreWindow_C_UpdateResult final
{
public:
	EPvEGameDifficulty                            Difficulty;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_AJBPvEScoreResult                  Result;                                            // 0x0004(0x0020)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetAJBPvEGameDifficultyText_Title;        // 0x0028(0x0018)()
	class FText                                   CallFunc_GetAJBPvEGameDifficultyText_Level;        // 0x0040(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0058(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData1;             // 0x0098(0x0040)(HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00E0(0x0010)(ZeroConstructor, ReferenceParm)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData2;             // 0x00F0(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0130(0x0018)()
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array1;                           // 0x0148(0x0010)(ZeroConstructor, ReferenceParm)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData3;             // 0x0158(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue1;                      // 0x0198(0x0018)()
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array2;                           // 0x01B0(0x0010)(ZeroConstructor, ReferenceParm)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue1;             // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue2;                      // 0x01C8(0x0018)()
	float                                         CallFunc_Conv_IntToFloat_ReturnValue2;             // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData4;             // 0x01E8(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0228(0x0018)()
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array3;                           // 0x0240(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue3;                      // 0x0250(0x0018)()
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array4;                           // 0x0268(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue4;                      // 0x0278(0x0018)()
};
static_assert(alignof(WB_PvE_ScoreWindow_C_UpdateResult) == 0x000008, "Wrong alignment on WB_PvE_ScoreWindow_C_UpdateResult");
static_assert(sizeof(WB_PvE_ScoreWindow_C_UpdateResult) == 0x000290, "Wrong size on WB_PvE_ScoreWindow_C_UpdateResult");
static_assert(offsetof(WB_PvE_ScoreWindow_C_UpdateResult, Difficulty) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_UpdateResult::Difficulty' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_UpdateResult, Result) == 0x000004, "Member 'WB_PvE_ScoreWindow_C_UpdateResult::Result' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_UpdateResult, CallFunc_GetAJBPvEGameDifficultyText_Title) == 0x000028, "Member 'WB_PvE_ScoreWindow_C_UpdateResult::CallFunc_GetAJBPvEGameDifficultyText_Title' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_UpdateResult, CallFunc_GetAJBPvEGameDifficultyText_Level) == 0x000040, "Member 'WB_PvE_ScoreWindow_C_UpdateResult::CallFunc_GetAJBPvEGameDifficultyText_Level' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_UpdateResult, K2Node_MakeStruct_FormatArgumentData) == 0x000058, "Member 'WB_PvE_ScoreWindow_C_UpdateResult::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_UpdateResult, K2Node_MakeStruct_FormatArgumentData1) == 0x000098, "Member 'WB_PvE_ScoreWindow_C_UpdateResult::K2Node_MakeStruct_FormatArgumentData1' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_UpdateResult, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0000D8, "Member 'WB_PvE_ScoreWindow_C_UpdateResult::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_UpdateResult, K2Node_MakeArray_Array) == 0x0000E0, "Member 'WB_PvE_ScoreWindow_C_UpdateResult::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_UpdateResult, K2Node_MakeStruct_FormatArgumentData2) == 0x0000F0, "Member 'WB_PvE_ScoreWindow_C_UpdateResult::K2Node_MakeStruct_FormatArgumentData2' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_UpdateResult, CallFunc_Format_ReturnValue) == 0x000130, "Member 'WB_PvE_ScoreWindow_C_UpdateResult::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_UpdateResult, K2Node_MakeArray_Array1) == 0x000148, "Member 'WB_PvE_ScoreWindow_C_UpdateResult::K2Node_MakeArray_Array1' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_UpdateResult, K2Node_MakeStruct_FormatArgumentData3) == 0x000158, "Member 'WB_PvE_ScoreWindow_C_UpdateResult::K2Node_MakeStruct_FormatArgumentData3' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_UpdateResult, CallFunc_Format_ReturnValue1) == 0x000198, "Member 'WB_PvE_ScoreWindow_C_UpdateResult::CallFunc_Format_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_UpdateResult, K2Node_MakeArray_Array2) == 0x0001B0, "Member 'WB_PvE_ScoreWindow_C_UpdateResult::K2Node_MakeArray_Array2' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_UpdateResult, CallFunc_Conv_IntToFloat_ReturnValue1) == 0x0001C0, "Member 'WB_PvE_ScoreWindow_C_UpdateResult::CallFunc_Conv_IntToFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_UpdateResult, CallFunc_Format_ReturnValue2) == 0x0001C8, "Member 'WB_PvE_ScoreWindow_C_UpdateResult::CallFunc_Format_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_UpdateResult, CallFunc_Conv_IntToFloat_ReturnValue2) == 0x0001E0, "Member 'WB_PvE_ScoreWindow_C_UpdateResult::CallFunc_Conv_IntToFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_UpdateResult, K2Node_MakeStruct_FormatArgumentData4) == 0x0001E8, "Member 'WB_PvE_ScoreWindow_C_UpdateResult::K2Node_MakeStruct_FormatArgumentData4' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_UpdateResult, CallFunc_Conv_IntToText_ReturnValue) == 0x000228, "Member 'WB_PvE_ScoreWindow_C_UpdateResult::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_UpdateResult, K2Node_MakeArray_Array3) == 0x000240, "Member 'WB_PvE_ScoreWindow_C_UpdateResult::K2Node_MakeArray_Array3' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_UpdateResult, CallFunc_Format_ReturnValue3) == 0x000250, "Member 'WB_PvE_ScoreWindow_C_UpdateResult::CallFunc_Format_ReturnValue3' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_UpdateResult, K2Node_MakeArray_Array4) == 0x000268, "Member 'WB_PvE_ScoreWindow_C_UpdateResult::K2Node_MakeArray_Array4' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_UpdateResult, CallFunc_Format_ReturnValue4) == 0x000278, "Member 'WB_PvE_ScoreWindow_C_UpdateResult::CallFunc_Format_ReturnValue4' has a wrong offset!");

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.OnInputTurnRate
// 0x0008 (0x0008 - 0x0000)
struct WB_PvE_ScoreWindow_C_OnInputTurnRate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_ScoreWindow_C_OnInputTurnRate) == 0x000004, "Wrong alignment on WB_PvE_ScoreWindow_C_OnInputTurnRate");
static_assert(sizeof(WB_PvE_ScoreWindow_C_OnInputTurnRate) == 0x000008, "Wrong size on WB_PvE_ScoreWindow_C_OnInputTurnRate");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OnInputTurnRate, Value) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_OnInputTurnRate::Value' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OnInputTurnRate, ReturnValue) == 0x000004, "Member 'WB_PvE_ScoreWindow_C_OnInputTurnRate::ReturnValue' has a wrong offset!");

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.OnInputReleasedUp
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_ScoreWindow_C_OnInputReleasedUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_ScoreWindow_C_OnInputReleasedUp) == 0x000001, "Wrong alignment on WB_PvE_ScoreWindow_C_OnInputReleasedUp");
static_assert(sizeof(WB_PvE_ScoreWindow_C_OnInputReleasedUp) == 0x000001, "Wrong size on WB_PvE_ScoreWindow_C_OnInputReleasedUp");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OnInputReleasedUp, ReturnValue) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_OnInputReleasedUp::ReturnValue' has a wrong offset!");

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.OnInputReleasedTouch
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_ScoreWindow_C_OnInputReleasedTouch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_ScoreWindow_C_OnInputReleasedTouch) == 0x000001, "Wrong alignment on WB_PvE_ScoreWindow_C_OnInputReleasedTouch");
static_assert(sizeof(WB_PvE_ScoreWindow_C_OnInputReleasedTouch) == 0x000001, "Wrong size on WB_PvE_ScoreWindow_C_OnInputReleasedTouch");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OnInputReleasedTouch, ReturnValue) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_OnInputReleasedTouch::ReturnValue' has a wrong offset!");

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.OnInputReleasedRight
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_ScoreWindow_C_OnInputReleasedRight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_ScoreWindow_C_OnInputReleasedRight) == 0x000001, "Wrong alignment on WB_PvE_ScoreWindow_C_OnInputReleasedRight");
static_assert(sizeof(WB_PvE_ScoreWindow_C_OnInputReleasedRight) == 0x000001, "Wrong size on WB_PvE_ScoreWindow_C_OnInputReleasedRight");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OnInputReleasedRight, ReturnValue) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_OnInputReleasedRight::ReturnValue' has a wrong offset!");

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.OnInputReleasedR2
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_ScoreWindow_C_OnInputReleasedR2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_ScoreWindow_C_OnInputReleasedR2) == 0x000001, "Wrong alignment on WB_PvE_ScoreWindow_C_OnInputReleasedR2");
static_assert(sizeof(WB_PvE_ScoreWindow_C_OnInputReleasedR2) == 0x000001, "Wrong size on WB_PvE_ScoreWindow_C_OnInputReleasedR2");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OnInputReleasedR2, ReturnValue) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_OnInputReleasedR2::ReturnValue' has a wrong offset!");

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.OnInputReleasedR1
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_ScoreWindow_C_OnInputReleasedR1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_ScoreWindow_C_OnInputReleasedR1) == 0x000001, "Wrong alignment on WB_PvE_ScoreWindow_C_OnInputReleasedR1");
static_assert(sizeof(WB_PvE_ScoreWindow_C_OnInputReleasedR1) == 0x000001, "Wrong size on WB_PvE_ScoreWindow_C_OnInputReleasedR1");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OnInputReleasedR1, ReturnValue) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_OnInputReleasedR1::ReturnValue' has a wrong offset!");

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.OnInputReleasedLeft
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_ScoreWindow_C_OnInputReleasedLeft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_ScoreWindow_C_OnInputReleasedLeft) == 0x000001, "Wrong alignment on WB_PvE_ScoreWindow_C_OnInputReleasedLeft");
static_assert(sizeof(WB_PvE_ScoreWindow_C_OnInputReleasedLeft) == 0x000001, "Wrong size on WB_PvE_ScoreWindow_C_OnInputReleasedLeft");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OnInputReleasedLeft, ReturnValue) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_OnInputReleasedLeft::ReturnValue' has a wrong offset!");

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.OnInputReleasedL3
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_ScoreWindow_C_OnInputReleasedL3 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_ScoreWindow_C_OnInputReleasedL3) == 0x000001, "Wrong alignment on WB_PvE_ScoreWindow_C_OnInputReleasedL3");
static_assert(sizeof(WB_PvE_ScoreWindow_C_OnInputReleasedL3) == 0x000001, "Wrong size on WB_PvE_ScoreWindow_C_OnInputReleasedL3");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OnInputReleasedL3, ReturnValue) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_OnInputReleasedL3::ReturnValue' has a wrong offset!");

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.OnInputReleasedL2
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_ScoreWindow_C_OnInputReleasedL2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_ScoreWindow_C_OnInputReleasedL2) == 0x000001, "Wrong alignment on WB_PvE_ScoreWindow_C_OnInputReleasedL2");
static_assert(sizeof(WB_PvE_ScoreWindow_C_OnInputReleasedL2) == 0x000001, "Wrong size on WB_PvE_ScoreWindow_C_OnInputReleasedL2");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OnInputReleasedL2, ReturnValue) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_OnInputReleasedL2::ReturnValue' has a wrong offset!");

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.OnInputReleasedL1
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_ScoreWindow_C_OnInputReleasedL1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_ScoreWindow_C_OnInputReleasedL1) == 0x000001, "Wrong alignment on WB_PvE_ScoreWindow_C_OnInputReleasedL1");
static_assert(sizeof(WB_PvE_ScoreWindow_C_OnInputReleasedL1) == 0x000001, "Wrong size on WB_PvE_ScoreWindow_C_OnInputReleasedL1");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OnInputReleasedL1, ReturnValue) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_OnInputReleasedL1::ReturnValue' has a wrong offset!");

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.OnInputReleasedDown
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_ScoreWindow_C_OnInputReleasedDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_ScoreWindow_C_OnInputReleasedDown) == 0x000001, "Wrong alignment on WB_PvE_ScoreWindow_C_OnInputReleasedDown");
static_assert(sizeof(WB_PvE_ScoreWindow_C_OnInputReleasedDown) == 0x000001, "Wrong size on WB_PvE_ScoreWindow_C_OnInputReleasedDown");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OnInputReleasedDown, ReturnValue) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_OnInputReleasedDown::ReturnValue' has a wrong offset!");

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.OnInputReleasedDecide
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_ScoreWindow_C_OnInputReleasedDecide final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_ScoreWindow_C_OnInputReleasedDecide) == 0x000001, "Wrong alignment on WB_PvE_ScoreWindow_C_OnInputReleasedDecide");
static_assert(sizeof(WB_PvE_ScoreWindow_C_OnInputReleasedDecide) == 0x000001, "Wrong size on WB_PvE_ScoreWindow_C_OnInputReleasedDecide");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OnInputReleasedDecide, ReturnValue) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_OnInputReleasedDecide::ReturnValue' has a wrong offset!");

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.OnInputReleasedCancel
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_ScoreWindow_C_OnInputReleasedCancel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_ScoreWindow_C_OnInputReleasedCancel) == 0x000001, "Wrong alignment on WB_PvE_ScoreWindow_C_OnInputReleasedCancel");
static_assert(sizeof(WB_PvE_ScoreWindow_C_OnInputReleasedCancel) == 0x000001, "Wrong size on WB_PvE_ScoreWindow_C_OnInputReleasedCancel");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OnInputReleasedCancel, ReturnValue) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_OnInputReleasedCancel::ReturnValue' has a wrong offset!");

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.OnInputPressedUp
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_ScoreWindow_C_OnInputPressedUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_ScoreWindow_C_OnInputPressedUp) == 0x000001, "Wrong alignment on WB_PvE_ScoreWindow_C_OnInputPressedUp");
static_assert(sizeof(WB_PvE_ScoreWindow_C_OnInputPressedUp) == 0x000001, "Wrong size on WB_PvE_ScoreWindow_C_OnInputPressedUp");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OnInputPressedUp, ReturnValue) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_OnInputPressedUp::ReturnValue' has a wrong offset!");

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.OnInputPressedTouch
// 0x000C (0x000C - 0x0000)
struct WB_PvE_ScoreWindow_C_OnInputPressedTouch final
{
public:
	float                                         LocationX;                                         // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LocationY;                                         // 0x0004(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_ScoreWindow_C_OnInputPressedTouch) == 0x000004, "Wrong alignment on WB_PvE_ScoreWindow_C_OnInputPressedTouch");
static_assert(sizeof(WB_PvE_ScoreWindow_C_OnInputPressedTouch) == 0x00000C, "Wrong size on WB_PvE_ScoreWindow_C_OnInputPressedTouch");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OnInputPressedTouch, LocationX) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_OnInputPressedTouch::LocationX' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OnInputPressedTouch, LocationY) == 0x000004, "Member 'WB_PvE_ScoreWindow_C_OnInputPressedTouch::LocationY' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OnInputPressedTouch, ReturnValue) == 0x000008, "Member 'WB_PvE_ScoreWindow_C_OnInputPressedTouch::ReturnValue' has a wrong offset!");

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.OnInputPressedRight
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_ScoreWindow_C_OnInputPressedRight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_ScoreWindow_C_OnInputPressedRight) == 0x000001, "Wrong alignment on WB_PvE_ScoreWindow_C_OnInputPressedRight");
static_assert(sizeof(WB_PvE_ScoreWindow_C_OnInputPressedRight) == 0x000001, "Wrong size on WB_PvE_ScoreWindow_C_OnInputPressedRight");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OnInputPressedRight, ReturnValue) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_OnInputPressedRight::ReturnValue' has a wrong offset!");

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.OnInputPressedR2
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_ScoreWindow_C_OnInputPressedR2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_ScoreWindow_C_OnInputPressedR2) == 0x000001, "Wrong alignment on WB_PvE_ScoreWindow_C_OnInputPressedR2");
static_assert(sizeof(WB_PvE_ScoreWindow_C_OnInputPressedR2) == 0x000001, "Wrong size on WB_PvE_ScoreWindow_C_OnInputPressedR2");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OnInputPressedR2, ReturnValue) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_OnInputPressedR2::ReturnValue' has a wrong offset!");

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.OnInputPressedR1
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_ScoreWindow_C_OnInputPressedR1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_ScoreWindow_C_OnInputPressedR1) == 0x000001, "Wrong alignment on WB_PvE_ScoreWindow_C_OnInputPressedR1");
static_assert(sizeof(WB_PvE_ScoreWindow_C_OnInputPressedR1) == 0x000001, "Wrong size on WB_PvE_ScoreWindow_C_OnInputPressedR1");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OnInputPressedR1, ReturnValue) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_OnInputPressedR1::ReturnValue' has a wrong offset!");

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.OnInputPressedLeft
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_ScoreWindow_C_OnInputPressedLeft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_ScoreWindow_C_OnInputPressedLeft) == 0x000001, "Wrong alignment on WB_PvE_ScoreWindow_C_OnInputPressedLeft");
static_assert(sizeof(WB_PvE_ScoreWindow_C_OnInputPressedLeft) == 0x000001, "Wrong size on WB_PvE_ScoreWindow_C_OnInputPressedLeft");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OnInputPressedLeft, ReturnValue) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_OnInputPressedLeft::ReturnValue' has a wrong offset!");

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.OnInputPressedL3
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_ScoreWindow_C_OnInputPressedL3 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_ScoreWindow_C_OnInputPressedL3) == 0x000001, "Wrong alignment on WB_PvE_ScoreWindow_C_OnInputPressedL3");
static_assert(sizeof(WB_PvE_ScoreWindow_C_OnInputPressedL3) == 0x000001, "Wrong size on WB_PvE_ScoreWindow_C_OnInputPressedL3");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OnInputPressedL3, ReturnValue) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_OnInputPressedL3::ReturnValue' has a wrong offset!");

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.OnInputPressedL2
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_ScoreWindow_C_OnInputPressedL2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_ScoreWindow_C_OnInputPressedL2) == 0x000001, "Wrong alignment on WB_PvE_ScoreWindow_C_OnInputPressedL2");
static_assert(sizeof(WB_PvE_ScoreWindow_C_OnInputPressedL2) == 0x000001, "Wrong size on WB_PvE_ScoreWindow_C_OnInputPressedL2");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OnInputPressedL2, ReturnValue) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_OnInputPressedL2::ReturnValue' has a wrong offset!");

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.OnInputPressedL1
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_ScoreWindow_C_OnInputPressedL1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_ScoreWindow_C_OnInputPressedL1) == 0x000001, "Wrong alignment on WB_PvE_ScoreWindow_C_OnInputPressedL1");
static_assert(sizeof(WB_PvE_ScoreWindow_C_OnInputPressedL1) == 0x000001, "Wrong size on WB_PvE_ScoreWindow_C_OnInputPressedL1");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OnInputPressedL1, ReturnValue) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_OnInputPressedL1::ReturnValue' has a wrong offset!");

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.OnInputPressedDown
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_ScoreWindow_C_OnInputPressedDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_ScoreWindow_C_OnInputPressedDown) == 0x000001, "Wrong alignment on WB_PvE_ScoreWindow_C_OnInputPressedDown");
static_assert(sizeof(WB_PvE_ScoreWindow_C_OnInputPressedDown) == 0x000001, "Wrong size on WB_PvE_ScoreWindow_C_OnInputPressedDown");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OnInputPressedDown, ReturnValue) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_OnInputPressedDown::ReturnValue' has a wrong offset!");

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.OnInputPressedDecide
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_ScoreWindow_C_OnInputPressedDecide final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_ScoreWindow_C_OnInputPressedDecide) == 0x000001, "Wrong alignment on WB_PvE_ScoreWindow_C_OnInputPressedDecide");
static_assert(sizeof(WB_PvE_ScoreWindow_C_OnInputPressedDecide) == 0x000001, "Wrong size on WB_PvE_ScoreWindow_C_OnInputPressedDecide");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OnInputPressedDecide, ReturnValue) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_OnInputPressedDecide::ReturnValue' has a wrong offset!");

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.OnInputPressedCancel
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_ScoreWindow_C_OnInputPressedCancel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_ScoreWindow_C_OnInputPressedCancel) == 0x000001, "Wrong alignment on WB_PvE_ScoreWindow_C_OnInputPressedCancel");
static_assert(sizeof(WB_PvE_ScoreWindow_C_OnInputPressedCancel) == 0x000001, "Wrong size on WB_PvE_ScoreWindow_C_OnInputPressedCancel");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OnInputPressedCancel, ReturnValue) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_OnInputPressedCancel::ReturnValue' has a wrong offset!");

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.OnInputMoveRight
// 0x0008 (0x0008 - 0x0000)
struct WB_PvE_ScoreWindow_C_OnInputMoveRight final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_ScoreWindow_C_OnInputMoveRight) == 0x000004, "Wrong alignment on WB_PvE_ScoreWindow_C_OnInputMoveRight");
static_assert(sizeof(WB_PvE_ScoreWindow_C_OnInputMoveRight) == 0x000008, "Wrong size on WB_PvE_ScoreWindow_C_OnInputMoveRight");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OnInputMoveRight, Value) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_OnInputMoveRight::Value' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OnInputMoveRight, ReturnValue) == 0x000004, "Member 'WB_PvE_ScoreWindow_C_OnInputMoveRight::ReturnValue' has a wrong offset!");

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.OnInputMoveForward
// 0x0008 (0x0008 - 0x0000)
struct WB_PvE_ScoreWindow_C_OnInputMoveForward final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_ScoreWindow_C_OnInputMoveForward) == 0x000004, "Wrong alignment on WB_PvE_ScoreWindow_C_OnInputMoveForward");
static_assert(sizeof(WB_PvE_ScoreWindow_C_OnInputMoveForward) == 0x000008, "Wrong size on WB_PvE_ScoreWindow_C_OnInputMoveForward");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OnInputMoveForward, Value) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_OnInputMoveForward::Value' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OnInputMoveForward, ReturnValue) == 0x000004, "Member 'WB_PvE_ScoreWindow_C_OnInputMoveForward::ReturnValue' has a wrong offset!");

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.OnInputLookupRate
// 0x0008 (0x0008 - 0x0000)
struct WB_PvE_ScoreWindow_C_OnInputLookupRate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_ScoreWindow_C_OnInputLookupRate) == 0x000004, "Wrong alignment on WB_PvE_ScoreWindow_C_OnInputLookupRate");
static_assert(sizeof(WB_PvE_ScoreWindow_C_OnInputLookupRate) == 0x000008, "Wrong size on WB_PvE_ScoreWindow_C_OnInputLookupRate");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OnInputLookupRate, Value) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_OnInputLookupRate::Value' has a wrong offset!");
static_assert(offsetof(WB_PvE_ScoreWindow_C_OnInputLookupRate, ReturnValue) == 0x000004, "Member 'WB_PvE_ScoreWindow_C_OnInputLookupRate::ReturnValue' has a wrong offset!");

// Function WB_PvE_ScoreWindow.WB_PvE_ScoreWindow_C.IsModeless
// 0x0001 (0x0001 - 0x0000)
struct WB_PvE_ScoreWindow_C_IsModeless final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PvE_ScoreWindow_C_IsModeless) == 0x000001, "Wrong alignment on WB_PvE_ScoreWindow_C_IsModeless");
static_assert(sizeof(WB_PvE_ScoreWindow_C_IsModeless) == 0x000001, "Wrong size on WB_PvE_ScoreWindow_C_IsModeless");
static_assert(offsetof(WB_PvE_ScoreWindow_C_IsModeless, ReturnValue) == 0x000000, "Member 'WB_PvE_ScoreWindow_C_IsModeless::ReturnValue' has a wrong offset!");

}

