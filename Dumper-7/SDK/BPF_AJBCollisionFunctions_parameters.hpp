#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPF_AJBCollisionFunctions

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AJB_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function BPF_AJBCollisionFunctions.BPF_AJBCollisionFunctions_C.HitCheck_Sphere_Sphere
// 0x0070 (0x0070 - 0x0000)
struct BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere final
{
public:
	struct FVector                                Location01;                                        // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius01;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location02;                                        // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius02;                                          // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHit;                                              // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X1;                           // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y1;                           // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z1;                           // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue1;         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue1; // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue2; // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue2;         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue3; // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue1;              // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue2;              // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere) == 0x000008, "Wrong alignment on BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere");
static_assert(sizeof(BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere) == 0x000070, "Wrong size on BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere, Location01) == 0x000000, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere::Location01' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere, Radius01) == 0x00000C, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere::Radius01' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere, Location02) == 0x000010, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere::Location02' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere, Radius02) == 0x00001C, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere::Radius02' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere, __WorldContext) == 0x000020, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere, bHit) == 0x000028, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere::bHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere, CallFunc_BreakVector_X) == 0x00002C, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere, CallFunc_BreakVector_Y) == 0x000030, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere, CallFunc_BreakVector_Z) == 0x000034, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere, CallFunc_Add_FloatFloat_ReturnValue) == 0x000038, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere, CallFunc_BreakVector_X1) == 0x00003C, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere::CallFunc_BreakVector_X1' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere, CallFunc_BreakVector_Y1) == 0x000040, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere::CallFunc_BreakVector_Y1' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere, CallFunc_BreakVector_Z1) == 0x000044, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere::CallFunc_BreakVector_Z1' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x000048, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00004C, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere, CallFunc_Subtract_FloatFloat_ReturnValue1) == 0x000050, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere::CallFunc_Subtract_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue1) == 0x000054, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue2) == 0x000058, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere, CallFunc_Subtract_FloatFloat_ReturnValue2) == 0x00005C, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere::CallFunc_Subtract_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue3) == 0x000060, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere, CallFunc_Add_FloatFloat_ReturnValue1) == 0x000064, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere::CallFunc_Add_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere, CallFunc_Add_FloatFloat_ReturnValue2) == 0x000068, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere::CallFunc_Add_FloatFloat_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00006C, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_Sphere_Sphere::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BPF_AJBCollisionFunctions.BPF_AJBCollisionFunctions_C.CalcHitLocation
// 0x0198 (0x0198 - 0x0000)
struct BPF_AJBCollisionFunctions_C_CalcHitLocation final
{
public:
	class AActor*                                 OwnActor;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSweep;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0010(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UObject*                                __WorldContext;                                    // 0x0098(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitImpactPoint;                                    // 0x00A0(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitImpactNormal;                                   // 0x00AC(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitLocation;                                       // 0x00B8(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00C6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C7[0x1];                                       // 0x00C7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00D0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00DC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00E8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00F4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0110(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0128(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0134(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0140(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x014C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue1;         // 0x0158(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_NegateVector_ReturnValue;                 // 0x0164(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x0170(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable1;                               // 0x017C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable2;                               // 0x017D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_17E[0x2];                                      // 0x017E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Select1_Default;                            // 0x0180(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select2_Default;                            // 0x018C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_AJBCollisionFunctions_C_CalcHitLocation) == 0x000008, "Wrong alignment on BPF_AJBCollisionFunctions_C_CalcHitLocation");
static_assert(sizeof(BPF_AJBCollisionFunctions_C_CalcHitLocation) == 0x000198, "Wrong size on BPF_AJBCollisionFunctions_C_CalcHitLocation");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHitLocation, OwnActor) == 0x000000, "Member 'BPF_AJBCollisionFunctions_C_CalcHitLocation::OwnActor' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHitLocation, bSweep) == 0x000008, "Member 'BPF_AJBCollisionFunctions_C_CalcHitLocation::bSweep' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHitLocation, HitResult) == 0x000010, "Member 'BPF_AJBCollisionFunctions_C_CalcHitLocation::HitResult' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHitLocation, __WorldContext) == 0x000098, "Member 'BPF_AJBCollisionFunctions_C_CalcHitLocation::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHitLocation, HitImpactPoint) == 0x0000A0, "Member 'BPF_AJBCollisionFunctions_C_CalcHitLocation::HitImpactPoint' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHitLocation, HitImpactNormal) == 0x0000AC, "Member 'BPF_AJBCollisionFunctions_C_CalcHitLocation::HitImpactNormal' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHitLocation, HitLocation) == 0x0000B8, "Member 'BPF_AJBCollisionFunctions_C_CalcHitLocation::HitLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHitLocation, Temp_bool_Variable) == 0x0000C4, "Member 'BPF_AJBCollisionFunctions_C_CalcHitLocation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHitLocation, CallFunc_BreakHitResult_bBlockingHit) == 0x0000C5, "Member 'BPF_AJBCollisionFunctions_C_CalcHitLocation::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHitLocation, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000C6, "Member 'BPF_AJBCollisionFunctions_C_CalcHitLocation::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHitLocation, CallFunc_BreakHitResult_Time) == 0x0000C8, "Member 'BPF_AJBCollisionFunctions_C_CalcHitLocation::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHitLocation, CallFunc_BreakHitResult_Distance) == 0x0000CC, "Member 'BPF_AJBCollisionFunctions_C_CalcHitLocation::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHitLocation, CallFunc_BreakHitResult_Location) == 0x0000D0, "Member 'BPF_AJBCollisionFunctions_C_CalcHitLocation::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHitLocation, CallFunc_BreakHitResult_ImpactPoint) == 0x0000DC, "Member 'BPF_AJBCollisionFunctions_C_CalcHitLocation::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHitLocation, CallFunc_BreakHitResult_Normal) == 0x0000E8, "Member 'BPF_AJBCollisionFunctions_C_CalcHitLocation::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHitLocation, CallFunc_BreakHitResult_ImpactNormal) == 0x0000F4, "Member 'BPF_AJBCollisionFunctions_C_CalcHitLocation::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHitLocation, CallFunc_BreakHitResult_PhysMat) == 0x000100, "Member 'BPF_AJBCollisionFunctions_C_CalcHitLocation::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHitLocation, CallFunc_BreakHitResult_HitActor) == 0x000108, "Member 'BPF_AJBCollisionFunctions_C_CalcHitLocation::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHitLocation, CallFunc_BreakHitResult_HitComponent) == 0x000110, "Member 'BPF_AJBCollisionFunctions_C_CalcHitLocation::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHitLocation, CallFunc_BreakHitResult_HitBoneName) == 0x000118, "Member 'BPF_AJBCollisionFunctions_C_CalcHitLocation::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHitLocation, CallFunc_BreakHitResult_HitItem) == 0x000120, "Member 'BPF_AJBCollisionFunctions_C_CalcHitLocation::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHitLocation, CallFunc_BreakHitResult_FaceIndex) == 0x000124, "Member 'BPF_AJBCollisionFunctions_C_CalcHitLocation::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHitLocation, CallFunc_BreakHitResult_TraceStart) == 0x000128, "Member 'BPF_AJBCollisionFunctions_C_CalcHitLocation::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHitLocation, CallFunc_BreakHitResult_TraceEnd) == 0x000134, "Member 'BPF_AJBCollisionFunctions_C_CalcHitLocation::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHitLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000140, "Member 'BPF_AJBCollisionFunctions_C_CalcHitLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHitLocation, CallFunc_GetActorForwardVector_ReturnValue) == 0x00014C, "Member 'BPF_AJBCollisionFunctions_C_CalcHitLocation::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHitLocation, CallFunc_K2_GetActorLocation_ReturnValue1) == 0x000158, "Member 'BPF_AJBCollisionFunctions_C_CalcHitLocation::CallFunc_K2_GetActorLocation_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHitLocation, CallFunc_NegateVector_ReturnValue) == 0x000164, "Member 'BPF_AJBCollisionFunctions_C_CalcHitLocation::CallFunc_NegateVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHitLocation, K2Node_Select_Default) == 0x000170, "Member 'BPF_AJBCollisionFunctions_C_CalcHitLocation::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHitLocation, Temp_bool_Variable1) == 0x00017C, "Member 'BPF_AJBCollisionFunctions_C_CalcHitLocation::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHitLocation, Temp_bool_Variable2) == 0x00017D, "Member 'BPF_AJBCollisionFunctions_C_CalcHitLocation::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHitLocation, K2Node_Select1_Default) == 0x000180, "Member 'BPF_AJBCollisionFunctions_C_CalcHitLocation::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHitLocation, K2Node_Select2_Default) == 0x00018C, "Member 'BPF_AJBCollisionFunctions_C_CalcHitLocation::K2Node_Select2_Default' has a wrong offset!");

// Function BPF_AJBCollisionFunctions.BPF_AJBCollisionFunctions_C.GetHitObjectTypesByPrevTrace
// 0x0028 (0x0028 - 0x0000)
struct BPF_AJBCollisionFunctions_C_GetHitObjectTypesByPrevTrace final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      NewParam;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ZeroConstructor, ReferenceParm)
};
static_assert(alignof(BPF_AJBCollisionFunctions_C_GetHitObjectTypesByPrevTrace) == 0x000008, "Wrong alignment on BPF_AJBCollisionFunctions_C_GetHitObjectTypesByPrevTrace");
static_assert(sizeof(BPF_AJBCollisionFunctions_C_GetHitObjectTypesByPrevTrace) == 0x000028, "Wrong size on BPF_AJBCollisionFunctions_C_GetHitObjectTypesByPrevTrace");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_GetHitObjectTypesByPrevTrace, __WorldContext) == 0x000000, "Member 'BPF_AJBCollisionFunctions_C_GetHitObjectTypesByPrevTrace::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_GetHitObjectTypesByPrevTrace, NewParam) == 0x000008, "Member 'BPF_AJBCollisionFunctions_C_GetHitObjectTypesByPrevTrace::NewParam' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_GetHitObjectTypesByPrevTrace, K2Node_MakeArray_Array) == 0x000018, "Member 'BPF_AJBCollisionFunctions_C_GetHitObjectTypesByPrevTrace::K2Node_MakeArray_Array' has a wrong offset!");

// Function BPF_AJBCollisionFunctions.BPF_AJBCollisionFunctions_C.AJBMultiLineTrace
// 0x01D8 (0x01D8 - 0x0000)
struct BPF_AJBCollisionFunctions_C_AJBMultiLineTrace final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Start;                                             // 0x0008(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x0014(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTargetHit;                                        // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UActorComponent*                        TargetComponent;                                   // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x0040(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      CallFunc_GetHitObjectTypesByPrevTrace_NewParam;    // 0x0058(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0070(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	TArray<struct FHitResult>                     CallFunc_LineTraceMultiForObjects_OutHits;         // 0x0080(0x0010)(ZeroConstructor, ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceMultiForObjects_ReturnValue;     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_Array_Get_Item;                           // 0x00A0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x012A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12B[0x1];                                      // 0x012B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0134(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0140(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x014C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0158(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0178(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0190(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x019C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBI_AJBInterface_C>    K2Node_DynamicCast_AsBI_AJBInterface;              // 0x01A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckTargetSelf_bTarget;                  // 0x01B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OwnHitParam_bCharacter;                   // 0x01BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_OwnHitParam_bLeftAP;                      // 0x01BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1BC[0x4];                                      // 0x01BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_OwnHitParam_ParticleTagBlockedByAAP;      // 0x01C0(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_OwnHitParam_SETagBlockedByAAP;            // 0x01C8(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_OwnHitParam_ParticleTagBlocked;           // 0x01D0(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace) == 0x000008, "Wrong alignment on BPF_AJBCollisionFunctions_C_AJBMultiLineTrace");
static_assert(sizeof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace) == 0x0001D8, "Wrong size on BPF_AJBCollisionFunctions_C_AJBMultiLineTrace");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, DamageCauser) == 0x000000, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::DamageCauser' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, Start) == 0x000008, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::Start' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, End) == 0x000014, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::End' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, __WorldContext) == 0x000020, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, bTargetHit) == 0x000028, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::bTargetHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, TargetActor) == 0x000030, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::TargetActor' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, TargetComponent) == 0x000038, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::TargetComponent' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, TargetLocation) == 0x000040, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::TargetLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, Temp_int_Loop_Counter_Variable) == 0x00004C, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, CallFunc_Add_IntInt_ReturnValue) == 0x000050, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, CallFunc_GetHitObjectTypesByPrevTrace_NewParam) == 0x000058, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::CallFunc_GetHitObjectTypesByPrevTrace_NewParam' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, Temp_int_Array_Index_Variable) == 0x000068, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, Temp_bool_True_if_break_was_hit_Variable) == 0x00006C, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, CallFunc_Not_PreBool_ReturnValue) == 0x00006D, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, Temp_object_Variable) == 0x000070, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, CallFunc_LineTraceMultiForObjects_OutHits) == 0x000080, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::CallFunc_LineTraceMultiForObjects_OutHits' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, CallFunc_LineTraceMultiForObjects_ReturnValue) == 0x000090, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::CallFunc_LineTraceMultiForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, CallFunc_Array_Length_ReturnValue) == 0x000094, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, CallFunc_Less_IntInt_ReturnValue) == 0x000098, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, CallFunc_Array_Get_Item) == 0x0000A0, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, CallFunc_BooleanAND_ReturnValue) == 0x000128, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, CallFunc_BreakHitResult_bBlockingHit) == 0x000129, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, CallFunc_BreakHitResult_bInitialOverlap) == 0x00012A, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, CallFunc_BreakHitResult_Time) == 0x00012C, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, CallFunc_BreakHitResult_Distance) == 0x000130, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, CallFunc_BreakHitResult_Location) == 0x000134, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, CallFunc_BreakHitResult_ImpactPoint) == 0x000140, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, CallFunc_BreakHitResult_Normal) == 0x00014C, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, CallFunc_BreakHitResult_ImpactNormal) == 0x000158, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, CallFunc_BreakHitResult_PhysMat) == 0x000168, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, CallFunc_BreakHitResult_HitActor) == 0x000170, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, CallFunc_BreakHitResult_HitComponent) == 0x000178, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, CallFunc_BreakHitResult_HitBoneName) == 0x000180, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, CallFunc_BreakHitResult_HitItem) == 0x000188, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, CallFunc_BreakHitResult_FaceIndex) == 0x00018C, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, CallFunc_BreakHitResult_TraceStart) == 0x000190, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, CallFunc_BreakHitResult_TraceEnd) == 0x00019C, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, K2Node_DynamicCast_AsBI_AJBInterface) == 0x0001A8, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::K2Node_DynamicCast_AsBI_AJBInterface' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, K2Node_DynamicCast_bSuccess) == 0x0001B8, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, CallFunc_CheckTargetSelf_bTarget) == 0x0001B9, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::CallFunc_CheckTargetSelf_bTarget' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, CallFunc_OwnHitParam_bCharacter) == 0x0001BA, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::CallFunc_OwnHitParam_bCharacter' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, CallFunc_OwnHitParam_bLeftAP) == 0x0001BB, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::CallFunc_OwnHitParam_bLeftAP' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, CallFunc_OwnHitParam_ParticleTagBlockedByAAP) == 0x0001C0, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::CallFunc_OwnHitParam_ParticleTagBlockedByAAP' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, CallFunc_OwnHitParam_SETagBlockedByAAP) == 0x0001C8, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::CallFunc_OwnHitParam_SETagBlockedByAAP' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AJBMultiLineTrace, CallFunc_OwnHitParam_ParticleTagBlocked) == 0x0001D0, "Member 'BPF_AJBCollisionFunctions_C_AJBMultiLineTrace::CallFunc_OwnHitParam_ParticleTagBlocked' has a wrong offset!");

// Function BPF_AJBCollisionFunctions.BPF_AJBCollisionFunctions_C.CalcHeadShot
// 0x01A8 (0x01A8 - 0x0000)
struct BPF_AJBCollisionFunctions_C_CalcHeadShot final
{
public:
	class AActor*                                 HitActor;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitLocation;                                       // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Direction;                                         // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TraceLength;                                       // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHeadShot;                                         // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0034(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0040(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0050(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array1;                           // 0x0068(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	TArray<struct FHitResult>                     CallFunc_AJBMultiSphereTraceForObjects_OutHits;    // 0x0078(0x0010)(ZeroConstructor, ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_AJBMultiSphereTraceForObjects_ReturnValue; // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_Array_Get_Item;                           // 0x0098(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_122[0x2];                                      // 0x0122(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x012C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0138(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0144(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0150(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0170(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0188(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0194(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBCollisionFunctions_C_CalcHeadShot) == 0x000008, "Wrong alignment on BPF_AJBCollisionFunctions_C_CalcHeadShot");
static_assert(sizeof(BPF_AJBCollisionFunctions_C_CalcHeadShot) == 0x0001A8, "Wrong size on BPF_AJBCollisionFunctions_C_CalcHeadShot");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, HitActor) == 0x000000, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::HitActor' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, HitLocation) == 0x000008, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::HitLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, Direction) == 0x000014, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::Direction' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, Radius) == 0x000020, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::Radius' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, TraceLength) == 0x000024, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::TraceLength' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, __WorldContext) == 0x000028, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, bHeadShot) == 0x000030, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::bHeadShot' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000034, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, K2Node_MakeArray_Array) == 0x000040, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, CallFunc_Add_VectorVector_ReturnValue) == 0x000050, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, Temp_int_Loop_Counter_Variable) == 0x00005C, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, Temp_int_Array_Index_Variable) == 0x000060, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, CallFunc_Add_IntInt_ReturnValue) == 0x000064, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, K2Node_MakeArray_Array1) == 0x000068, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::K2Node_MakeArray_Array1' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, CallFunc_AJBMultiSphereTraceForObjects_OutHits) == 0x000078, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::CallFunc_AJBMultiSphereTraceForObjects_OutHits' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, CallFunc_AJBMultiSphereTraceForObjects_ReturnValue) == 0x000088, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::CallFunc_AJBMultiSphereTraceForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, CallFunc_Array_Length_ReturnValue) == 0x00008C, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, CallFunc_Less_IntInt_ReturnValue) == 0x000090, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, CallFunc_Array_Get_Item) == 0x000098, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, CallFunc_BreakHitResult_bBlockingHit) == 0x000120, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, CallFunc_BreakHitResult_bInitialOverlap) == 0x000121, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, CallFunc_BreakHitResult_Time) == 0x000124, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, CallFunc_BreakHitResult_Distance) == 0x000128, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, CallFunc_BreakHitResult_Location) == 0x00012C, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, CallFunc_BreakHitResult_ImpactPoint) == 0x000138, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, CallFunc_BreakHitResult_Normal) == 0x000144, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, CallFunc_BreakHitResult_ImpactNormal) == 0x000150, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, CallFunc_BreakHitResult_PhysMat) == 0x000160, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, CallFunc_BreakHitResult_HitActor) == 0x000168, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, CallFunc_BreakHitResult_HitComponent) == 0x000170, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, CallFunc_BreakHitResult_HitBoneName) == 0x000178, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, CallFunc_BreakHitResult_HitItem) == 0x000180, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, CallFunc_BreakHitResult_FaceIndex) == 0x000184, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, CallFunc_BreakHitResult_TraceStart) == 0x000188, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, CallFunc_BreakHitResult_TraceEnd) == 0x000194, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcHeadShot, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0001A0, "Member 'BPF_AJBCollisionFunctions_C_CalcHeadShot::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function BPF_AJBCollisionFunctions.BPF_AJBCollisionFunctions_C.HitCheck_ContinuedSphere_Sphere
// 0x00B0 (0x00B0 - 0x0000)
struct BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere final
{
public:
	struct FVector                                Location01;                                        // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation01;                                        // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         Radius01;                                          // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Length01;                                          // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PartitionNum01;                                    // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location02;                                        // 0x0024(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius02;                                          // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCheckUnder;                                       // 0x0034(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ValidGroundOffsetZ;                                // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHit;                                              // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X1;                           // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y1;                           // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z1;                           // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue1;              // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0084(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0090(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00A0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HitCheck_Sphere_Sphere_bHit;              // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere) == 0x000008, "Wrong alignment on BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere");
static_assert(sizeof(BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere) == 0x0000B0, "Wrong size on BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere, Location01) == 0x000000, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere::Location01' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere, Rotation01) == 0x00000C, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere::Rotation01' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere, Radius01) == 0x000018, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere::Radius01' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere, Length01) == 0x00001C, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere::Length01' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere, PartitionNum01) == 0x000020, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere::PartitionNum01' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere, Location02) == 0x000024, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere::Location02' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere, Radius02) == 0x000030, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere::Radius02' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere, bCheckUnder) == 0x000034, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere::bCheckUnder' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere, ValidGroundOffsetZ) == 0x000038, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere::ValidGroundOffsetZ' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere, __WorldContext) == 0x000040, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere, bHit) == 0x000048, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere::bHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere, CallFunc_BreakVector_X) == 0x00004C, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere, CallFunc_BreakVector_Y) == 0x000050, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere, CallFunc_BreakVector_Z) == 0x000054, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere, CallFunc_Add_FloatFloat_ReturnValue) == 0x000058, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere, CallFunc_BreakVector_X1) == 0x00005C, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere::CallFunc_BreakVector_X1' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere, CallFunc_BreakVector_Y1) == 0x000060, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere::CallFunc_BreakVector_Y1' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere, CallFunc_BreakVector_Z1) == 0x000064, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere::CallFunc_BreakVector_Z1' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere, CallFunc_Add_FloatFloat_ReturnValue1) == 0x000068, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere::CallFunc_Add_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00006C, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere, Temp_int_Variable) == 0x000070, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere, CallFunc_Subtract_IntInt_ReturnValue) == 0x000074, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000078, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00007C, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000080, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere, CallFunc_MakeVector_ReturnValue) == 0x000084, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000090, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere, CallFunc_Add_IntInt_ReturnValue) == 0x00009C, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere, CallFunc_Add_VectorVector_ReturnValue) == 0x0000A0, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere, CallFunc_HitCheck_Sphere_Sphere_bHit) == 0x0000AC, "Member 'BPF_AJBCollisionFunctions_C_HitCheck_ContinuedSphere_Sphere::CallFunc_HitCheck_Sphere_Sphere_bHit' has a wrong offset!");

// Function BPF_AJBCollisionFunctions.BPF_AJBCollisionFunctions_C.PositioningSafeLocation
// 0x00F0 (0x00F0 - 0x0000)
struct BPF_AJBCollisionFunctions_C_PositioningSafeLocation final
{
public:
	struct FVector                                DesiredLocation;                                   // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ForwardDirection;                                  // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HalfHeight;                                        // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SmallAmount;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bIgnoreSelf;                                       // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AroundTraceNum;                                    // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AroundTraceIncScale;                               // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkyTraceNum;                                       // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SkyTraceInceScale;                                 // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	class UObject*                                __WorldContext;                                    // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPositioningSafeLocationResult                Result;                                            // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SafeLocation;                                      // 0x006C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 FirstHitActor;                                     // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 TempFirstHitActor;                                 // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TempTraceNum;                                      // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempTraceLengthScale;                              // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable1;                                // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SkyTrace_bFindSafeLocation;               // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_SkyTrace_SafeLocation;                    // 0x00A4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_SkyTrace_HitActor;                        // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue1;              // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AJBCapsuleTraceForObjectsOnePlace_bReturnValue; // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_AJBCapsuleTraceForObjectsOnePlace_HitActor; // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue1;                  // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_AroundTrace_bFindSafeLocation;            // 0x00CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CE[0x2];                                       // 0x00CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_AroundTrace_SafeLocation;                 // 0x00D0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_AroundTrace_HitActor;                     // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue1;              // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation) == 0x000008, "Wrong alignment on BPF_AJBCollisionFunctions_C_PositioningSafeLocation");
static_assert(sizeof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation) == 0x0000F0, "Wrong size on BPF_AJBCollisionFunctions_C_PositioningSafeLocation");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, DesiredLocation) == 0x000000, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::DesiredLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, ForwardDirection) == 0x00000C, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::ForwardDirection' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, Radius) == 0x000018, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::Radius' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, HalfHeight) == 0x00001C, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::HalfHeight' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, SmallAmount) == 0x000020, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::SmallAmount' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, ObjectTypes) == 0x000028, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::ObjectTypes' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, bIgnoreSelf) == 0x000038, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, AroundTraceNum) == 0x00003C, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::AroundTraceNum' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, AroundTraceIncScale) == 0x000040, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::AroundTraceIncScale' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, SkyTraceNum) == 0x000044, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::SkyTraceNum' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, SkyTraceInceScale) == 0x000048, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::SkyTraceInceScale' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, ActorsToIgnore) == 0x000050, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, __WorldContext) == 0x000060, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, Result) == 0x000068, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::Result' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, SafeLocation) == 0x00006C, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::SafeLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, FirstHitActor) == 0x000078, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::FirstHitActor' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, TempFirstHitActor) == 0x000080, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::TempFirstHitActor' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, TempTraceNum) == 0x000088, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::TempTraceNum' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, TempTraceLengthScale) == 0x00008C, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::TempTraceLengthScale' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, Temp_int_Variable) == 0x000090, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, CallFunc_Add_FloatFloat_ReturnValue) == 0x000094, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, Temp_int_Variable1) == 0x000098, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::Temp_int_Variable1' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, CallFunc_Add_IntInt_ReturnValue) == 0x00009C, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, CallFunc_Greater_IntInt_ReturnValue) == 0x0000A0, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, CallFunc_SkyTrace_bFindSafeLocation) == 0x0000A1, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::CallFunc_SkyTrace_bFindSafeLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, CallFunc_SkyTrace_SafeLocation) == 0x0000A4, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::CallFunc_SkyTrace_SafeLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, CallFunc_SkyTrace_HitActor) == 0x0000B0, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::CallFunc_SkyTrace_HitActor' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, CallFunc_Add_FloatFloat_ReturnValue1) == 0x0000B8, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::CallFunc_Add_FloatFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, CallFunc_AJBCapsuleTraceForObjectsOnePlace_bReturnValue) == 0x0000BC, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::CallFunc_AJBCapsuleTraceForObjectsOnePlace_bReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, CallFunc_AJBCapsuleTraceForObjectsOnePlace_HitActor) == 0x0000C0, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::CallFunc_AJBCapsuleTraceForObjectsOnePlace_HitActor' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, CallFunc_Add_IntInt_ReturnValue1) == 0x0000C8, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::CallFunc_Add_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, CallFunc_Not_PreBool_ReturnValue) == 0x0000CC, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, CallFunc_AroundTrace_bFindSafeLocation) == 0x0000CD, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::CallFunc_AroundTrace_bFindSafeLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, CallFunc_AroundTrace_SafeLocation) == 0x0000D0, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::CallFunc_AroundTrace_SafeLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, CallFunc_AroundTrace_HitActor) == 0x0000E0, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::CallFunc_AroundTrace_HitActor' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_PositioningSafeLocation, CallFunc_Greater_IntInt_ReturnValue1) == 0x0000E8, "Member 'BPF_AJBCollisionFunctions_C_PositioningSafeLocation::CallFunc_Greater_IntInt_ReturnValue1' has a wrong offset!");

// Function BPF_AJBCollisionFunctions.BPF_AJBCollisionFunctions_C.AroundTrace
// 0x00F0 (0x00F0 - 0x0000)
struct BPF_AJBCollisionFunctions_C_AroundTrace final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ForwardDirection;                                  // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CapsuleRadius;                                     // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CapsuleHeight;                                     // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SmallAmount;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bIgnoreSelf;                                       // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TraceLengthScale;                                  // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFindSafeLocation;                                 // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SafeLocation;                                      // 0x004C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 HitActor;                                          // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempRightVector;                                   // 0x0060(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalcRightVectorByForward_RightVector;     // 0x006C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_NegateVector_ReturnValue;                 // 0x0078(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_NegateVector_ReturnValue1;                // 0x0084(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OneDirectionTrace_bFindSafeLocation;      // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_OneDirectionTrace_SafeLocation;           // 0x0094(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_OneDirectionTrace_HitActor;               // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OneDirectionTrace_bFindSafeLocation1;     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_OneDirectionTrace_SafeLocation1;          // 0x00AC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_OneDirectionTrace_HitActor1;              // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OneDirectionTrace_bFindSafeLocation2;     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_OneDirectionTrace_SafeLocation2;          // 0x00C4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_OneDirectionTrace_HitActor2;              // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OneDirectionTrace_bFindSafeLocation3;     // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_OneDirectionTrace_SafeLocation3;          // 0x00DC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_OneDirectionTrace_HitActor3;              // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_AJBCollisionFunctions_C_AroundTrace) == 0x000008, "Wrong alignment on BPF_AJBCollisionFunctions_C_AroundTrace");
static_assert(sizeof(BPF_AJBCollisionFunctions_C_AroundTrace) == 0x0000F0, "Wrong size on BPF_AJBCollisionFunctions_C_AroundTrace");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AroundTrace, Location) == 0x000000, "Member 'BPF_AJBCollisionFunctions_C_AroundTrace::Location' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AroundTrace, ForwardDirection) == 0x00000C, "Member 'BPF_AJBCollisionFunctions_C_AroundTrace::ForwardDirection' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AroundTrace, CapsuleRadius) == 0x000018, "Member 'BPF_AJBCollisionFunctions_C_AroundTrace::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AroundTrace, CapsuleHeight) == 0x00001C, "Member 'BPF_AJBCollisionFunctions_C_AroundTrace::CapsuleHeight' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AroundTrace, SmallAmount) == 0x000020, "Member 'BPF_AJBCollisionFunctions_C_AroundTrace::SmallAmount' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AroundTrace, ObjectTypes) == 0x000028, "Member 'BPF_AJBCollisionFunctions_C_AroundTrace::ObjectTypes' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AroundTrace, bIgnoreSelf) == 0x000038, "Member 'BPF_AJBCollisionFunctions_C_AroundTrace::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AroundTrace, TraceLengthScale) == 0x00003C, "Member 'BPF_AJBCollisionFunctions_C_AroundTrace::TraceLengthScale' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AroundTrace, __WorldContext) == 0x000040, "Member 'BPF_AJBCollisionFunctions_C_AroundTrace::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AroundTrace, bFindSafeLocation) == 0x000048, "Member 'BPF_AJBCollisionFunctions_C_AroundTrace::bFindSafeLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AroundTrace, SafeLocation) == 0x00004C, "Member 'BPF_AJBCollisionFunctions_C_AroundTrace::SafeLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AroundTrace, HitActor) == 0x000058, "Member 'BPF_AJBCollisionFunctions_C_AroundTrace::HitActor' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AroundTrace, TempRightVector) == 0x000060, "Member 'BPF_AJBCollisionFunctions_C_AroundTrace::TempRightVector' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AroundTrace, CallFunc_CalcRightVectorByForward_RightVector) == 0x00006C, "Member 'BPF_AJBCollisionFunctions_C_AroundTrace::CallFunc_CalcRightVectorByForward_RightVector' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AroundTrace, CallFunc_NegateVector_ReturnValue) == 0x000078, "Member 'BPF_AJBCollisionFunctions_C_AroundTrace::CallFunc_NegateVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AroundTrace, CallFunc_NegateVector_ReturnValue1) == 0x000084, "Member 'BPF_AJBCollisionFunctions_C_AroundTrace::CallFunc_NegateVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AroundTrace, CallFunc_OneDirectionTrace_bFindSafeLocation) == 0x000090, "Member 'BPF_AJBCollisionFunctions_C_AroundTrace::CallFunc_OneDirectionTrace_bFindSafeLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AroundTrace, CallFunc_OneDirectionTrace_SafeLocation) == 0x000094, "Member 'BPF_AJBCollisionFunctions_C_AroundTrace::CallFunc_OneDirectionTrace_SafeLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AroundTrace, CallFunc_OneDirectionTrace_HitActor) == 0x0000A0, "Member 'BPF_AJBCollisionFunctions_C_AroundTrace::CallFunc_OneDirectionTrace_HitActor' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AroundTrace, CallFunc_OneDirectionTrace_bFindSafeLocation1) == 0x0000A8, "Member 'BPF_AJBCollisionFunctions_C_AroundTrace::CallFunc_OneDirectionTrace_bFindSafeLocation1' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AroundTrace, CallFunc_OneDirectionTrace_SafeLocation1) == 0x0000AC, "Member 'BPF_AJBCollisionFunctions_C_AroundTrace::CallFunc_OneDirectionTrace_SafeLocation1' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AroundTrace, CallFunc_OneDirectionTrace_HitActor1) == 0x0000B8, "Member 'BPF_AJBCollisionFunctions_C_AroundTrace::CallFunc_OneDirectionTrace_HitActor1' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AroundTrace, CallFunc_OneDirectionTrace_bFindSafeLocation2) == 0x0000C0, "Member 'BPF_AJBCollisionFunctions_C_AroundTrace::CallFunc_OneDirectionTrace_bFindSafeLocation2' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AroundTrace, CallFunc_OneDirectionTrace_SafeLocation2) == 0x0000C4, "Member 'BPF_AJBCollisionFunctions_C_AroundTrace::CallFunc_OneDirectionTrace_SafeLocation2' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AroundTrace, CallFunc_OneDirectionTrace_HitActor2) == 0x0000D0, "Member 'BPF_AJBCollisionFunctions_C_AroundTrace::CallFunc_OneDirectionTrace_HitActor2' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AroundTrace, CallFunc_OneDirectionTrace_bFindSafeLocation3) == 0x0000D8, "Member 'BPF_AJBCollisionFunctions_C_AroundTrace::CallFunc_OneDirectionTrace_bFindSafeLocation3' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AroundTrace, CallFunc_OneDirectionTrace_SafeLocation3) == 0x0000DC, "Member 'BPF_AJBCollisionFunctions_C_AroundTrace::CallFunc_OneDirectionTrace_SafeLocation3' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_AroundTrace, CallFunc_OneDirectionTrace_HitActor3) == 0x0000E8, "Member 'BPF_AJBCollisionFunctions_C_AroundTrace::CallFunc_OneDirectionTrace_HitActor3' has a wrong offset!");

// Function BPF_AJBCollisionFunctions.BPF_AJBCollisionFunctions_C.SkyTrace
// 0x00A8 (0x00A8 - 0x0000)
struct BPF_AJBCollisionFunctions_C_SkyTrace final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ForwardDirection;                                  // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CapsuleRadius;                                     // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CapsuleHeight;                                     // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SmallAmount;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bIgnoreSelf;                                       // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TraceLengthScale;                                  // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFindSafeLocation;                                 // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SafeLocation;                                      // 0x004C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 HitActor;                                          // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempUpVector;                                      // 0x0060(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempRightVector;                                   // 0x006C(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalcRightVectorByForward_RightVector;     // 0x0078(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalcUpVectorByForwardRight_UpVector;      // 0x0084(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OneDirectionTrace_bFindSafeLocation;      // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_OneDirectionTrace_SafeLocation;           // 0x0094(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_OneDirectionTrace_HitActor;               // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_AJBCollisionFunctions_C_SkyTrace) == 0x000008, "Wrong alignment on BPF_AJBCollisionFunctions_C_SkyTrace");
static_assert(sizeof(BPF_AJBCollisionFunctions_C_SkyTrace) == 0x0000A8, "Wrong size on BPF_AJBCollisionFunctions_C_SkyTrace");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_SkyTrace, Location) == 0x000000, "Member 'BPF_AJBCollisionFunctions_C_SkyTrace::Location' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_SkyTrace, ForwardDirection) == 0x00000C, "Member 'BPF_AJBCollisionFunctions_C_SkyTrace::ForwardDirection' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_SkyTrace, CapsuleRadius) == 0x000018, "Member 'BPF_AJBCollisionFunctions_C_SkyTrace::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_SkyTrace, CapsuleHeight) == 0x00001C, "Member 'BPF_AJBCollisionFunctions_C_SkyTrace::CapsuleHeight' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_SkyTrace, SmallAmount) == 0x000020, "Member 'BPF_AJBCollisionFunctions_C_SkyTrace::SmallAmount' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_SkyTrace, ObjectTypes) == 0x000028, "Member 'BPF_AJBCollisionFunctions_C_SkyTrace::ObjectTypes' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_SkyTrace, bIgnoreSelf) == 0x000038, "Member 'BPF_AJBCollisionFunctions_C_SkyTrace::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_SkyTrace, TraceLengthScale) == 0x00003C, "Member 'BPF_AJBCollisionFunctions_C_SkyTrace::TraceLengthScale' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_SkyTrace, __WorldContext) == 0x000040, "Member 'BPF_AJBCollisionFunctions_C_SkyTrace::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_SkyTrace, bFindSafeLocation) == 0x000048, "Member 'BPF_AJBCollisionFunctions_C_SkyTrace::bFindSafeLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_SkyTrace, SafeLocation) == 0x00004C, "Member 'BPF_AJBCollisionFunctions_C_SkyTrace::SafeLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_SkyTrace, HitActor) == 0x000058, "Member 'BPF_AJBCollisionFunctions_C_SkyTrace::HitActor' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_SkyTrace, TempUpVector) == 0x000060, "Member 'BPF_AJBCollisionFunctions_C_SkyTrace::TempUpVector' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_SkyTrace, TempRightVector) == 0x00006C, "Member 'BPF_AJBCollisionFunctions_C_SkyTrace::TempRightVector' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_SkyTrace, CallFunc_CalcRightVectorByForward_RightVector) == 0x000078, "Member 'BPF_AJBCollisionFunctions_C_SkyTrace::CallFunc_CalcRightVectorByForward_RightVector' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_SkyTrace, CallFunc_CalcUpVectorByForwardRight_UpVector) == 0x000084, "Member 'BPF_AJBCollisionFunctions_C_SkyTrace::CallFunc_CalcUpVectorByForwardRight_UpVector' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_SkyTrace, CallFunc_OneDirectionTrace_bFindSafeLocation) == 0x000090, "Member 'BPF_AJBCollisionFunctions_C_SkyTrace::CallFunc_OneDirectionTrace_bFindSafeLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_SkyTrace, CallFunc_OneDirectionTrace_SafeLocation) == 0x000094, "Member 'BPF_AJBCollisionFunctions_C_SkyTrace::CallFunc_OneDirectionTrace_SafeLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_SkyTrace, CallFunc_OneDirectionTrace_HitActor) == 0x0000A0, "Member 'BPF_AJBCollisionFunctions_C_SkyTrace::CallFunc_OneDirectionTrace_HitActor' has a wrong offset!");

// Function BPF_AJBCollisionFunctions.BPF_AJBCollisionFunctions_C.OneDirectionTrace
// 0x00B0 (0x00B0 - 0x0000)
struct BPF_AJBCollisionFunctions_C_OneDirectionTrace final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Direction;                                         // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CapsuleRadius;                                     // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CapsuleHeight;                                     // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SmallAmount;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
	bool                                          bIgnoreSelf;                                       // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TraceLengthScale;                                  // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFindSafeLocation;                                 // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SafeLocation;                                      // 0x004C(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 HitActor;                                          // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempTargetLocation;                                // 0x0060(0x000C)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0070(0x0010)(ZeroConstructor, ReferenceParm)
	bool                                          CallFunc_AJBCapsuleTraceForObjectsOnePlace_bReturnValue; // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_AJBCapsuleTraceForObjectsOnePlace_HitActor; // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0098(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00A4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_AJBCollisionFunctions_C_OneDirectionTrace) == 0x000008, "Wrong alignment on BPF_AJBCollisionFunctions_C_OneDirectionTrace");
static_assert(sizeof(BPF_AJBCollisionFunctions_C_OneDirectionTrace) == 0x0000B0, "Wrong size on BPF_AJBCollisionFunctions_C_OneDirectionTrace");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_OneDirectionTrace, Location) == 0x000000, "Member 'BPF_AJBCollisionFunctions_C_OneDirectionTrace::Location' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_OneDirectionTrace, Direction) == 0x00000C, "Member 'BPF_AJBCollisionFunctions_C_OneDirectionTrace::Direction' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_OneDirectionTrace, CapsuleRadius) == 0x000018, "Member 'BPF_AJBCollisionFunctions_C_OneDirectionTrace::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_OneDirectionTrace, CapsuleHeight) == 0x00001C, "Member 'BPF_AJBCollisionFunctions_C_OneDirectionTrace::CapsuleHeight' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_OneDirectionTrace, SmallAmount) == 0x000020, "Member 'BPF_AJBCollisionFunctions_C_OneDirectionTrace::SmallAmount' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_OneDirectionTrace, ObjectTypes) == 0x000028, "Member 'BPF_AJBCollisionFunctions_C_OneDirectionTrace::ObjectTypes' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_OneDirectionTrace, bIgnoreSelf) == 0x000038, "Member 'BPF_AJBCollisionFunctions_C_OneDirectionTrace::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_OneDirectionTrace, TraceLengthScale) == 0x00003C, "Member 'BPF_AJBCollisionFunctions_C_OneDirectionTrace::TraceLengthScale' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_OneDirectionTrace, __WorldContext) == 0x000040, "Member 'BPF_AJBCollisionFunctions_C_OneDirectionTrace::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_OneDirectionTrace, bFindSafeLocation) == 0x000048, "Member 'BPF_AJBCollisionFunctions_C_OneDirectionTrace::bFindSafeLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_OneDirectionTrace, SafeLocation) == 0x00004C, "Member 'BPF_AJBCollisionFunctions_C_OneDirectionTrace::SafeLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_OneDirectionTrace, HitActor) == 0x000058, "Member 'BPF_AJBCollisionFunctions_C_OneDirectionTrace::HitActor' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_OneDirectionTrace, TempTargetLocation) == 0x000060, "Member 'BPF_AJBCollisionFunctions_C_OneDirectionTrace::TempTargetLocation' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_OneDirectionTrace, K2Node_MakeArray_Array) == 0x000070, "Member 'BPF_AJBCollisionFunctions_C_OneDirectionTrace::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_OneDirectionTrace, CallFunc_AJBCapsuleTraceForObjectsOnePlace_bReturnValue) == 0x000080, "Member 'BPF_AJBCollisionFunctions_C_OneDirectionTrace::CallFunc_AJBCapsuleTraceForObjectsOnePlace_bReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_OneDirectionTrace, CallFunc_AJBCapsuleTraceForObjectsOnePlace_HitActor) == 0x000088, "Member 'BPF_AJBCollisionFunctions_C_OneDirectionTrace::CallFunc_AJBCapsuleTraceForObjectsOnePlace_HitActor' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_OneDirectionTrace, CallFunc_Not_PreBool_ReturnValue) == 0x000090, "Member 'BPF_AJBCollisionFunctions_C_OneDirectionTrace::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_OneDirectionTrace, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000094, "Member 'BPF_AJBCollisionFunctions_C_OneDirectionTrace::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_OneDirectionTrace, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000098, "Member 'BPF_AJBCollisionFunctions_C_OneDirectionTrace::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_OneDirectionTrace, CallFunc_Add_VectorVector_ReturnValue) == 0x0000A4, "Member 'BPF_AJBCollisionFunctions_C_OneDirectionTrace::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function BPF_AJBCollisionFunctions.BPF_AJBCollisionFunctions_C.CalcForwardSlopeInfoByCapsule
// 0x01D8 (0x01D8 - 0x0000)
struct BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule final
{
public:
	class ABP_AJBInGameCharacter_C*               CharacterBP;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ForwardValue;                                      // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHit;                                              // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Angle;                                             // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0028(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorUpVector_ReturnValue;             // 0x0034(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue1;       // 0x0040(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0050(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0060(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array1;                           // 0x0070(0x0010)(ConstParm, ZeroConstructor, ReferenceParm)
	float                                         CallFunc_GetCapsuleHalfHeight_CapsuleHalfHeight;   // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCapsuleRadius_CapsuleRadius;           // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue2;       // 0x0088(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0094(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00A0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00AC(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_AJBCapsuleTraceForObjects_OutHit;         // 0x00B8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_AJBCapsuleTraceForObjects_ReturnValue;    // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0142(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_143[0x1];                                      // 0x0143(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x014C(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0158(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0164(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0170(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0190(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01A8(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01B4(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue1;          // 0x01C0(0x000C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAcos_ReturnValue;                      // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule) == 0x000008, "Wrong alignment on BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule");
static_assert(sizeof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule) == 0x0001D8, "Wrong size on BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, CharacterBP) == 0x000000, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::CharacterBP' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, Location) == 0x000008, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::Location' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, ForwardValue) == 0x000014, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::ForwardValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, __WorldContext) == 0x000018, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, bHit) == 0x000020, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::bHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, Angle) == 0x000024, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::Angle' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, CallFunc_GetActorForwardVector_ReturnValue) == 0x000028, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, CallFunc_GetActorUpVector_ReturnValue) == 0x000034, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::CallFunc_GetActorUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, CallFunc_GetActorForwardVector_ReturnValue1) == 0x000040, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::CallFunc_GetActorForwardVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, K2Node_MakeArray_Array) == 0x000050, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, CallFunc_Cross_VectorVector_ReturnValue) == 0x000060, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, K2Node_MakeArray_Array1) == 0x000070, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::K2Node_MakeArray_Array1' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, CallFunc_GetCapsuleHalfHeight_CapsuleHalfHeight) == 0x000080, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::CallFunc_GetCapsuleHalfHeight_CapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, CallFunc_GetCapsuleRadius_CapsuleRadius) == 0x000084, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::CallFunc_GetCapsuleRadius_CapsuleRadius' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, CallFunc_GetActorForwardVector_ReturnValue2) == 0x000088, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::CallFunc_GetActorForwardVector_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, CallFunc_Normal_ReturnValue) == 0x000094, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000A0, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, CallFunc_Add_VectorVector_ReturnValue) == 0x0000AC, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, CallFunc_AJBCapsuleTraceForObjects_OutHit) == 0x0000B8, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::CallFunc_AJBCapsuleTraceForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, CallFunc_AJBCapsuleTraceForObjects_ReturnValue) == 0x000140, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::CallFunc_AJBCapsuleTraceForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, CallFunc_BreakHitResult_bBlockingHit) == 0x000141, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, CallFunc_BreakHitResult_bInitialOverlap) == 0x000142, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, CallFunc_BreakHitResult_Time) == 0x000144, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, CallFunc_BreakHitResult_Distance) == 0x000148, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, CallFunc_BreakHitResult_Location) == 0x00014C, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, CallFunc_BreakHitResult_ImpactPoint) == 0x000158, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, CallFunc_BreakHitResult_Normal) == 0x000164, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, CallFunc_BreakHitResult_ImpactNormal) == 0x000170, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, CallFunc_BreakHitResult_PhysMat) == 0x000180, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, CallFunc_BreakHitResult_HitActor) == 0x000188, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, CallFunc_BreakHitResult_HitComponent) == 0x000190, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, CallFunc_BreakHitResult_HitBoneName) == 0x000198, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, CallFunc_BreakHitResult_HitItem) == 0x0001A0, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, CallFunc_BreakHitResult_FaceIndex) == 0x0001A4, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, CallFunc_BreakHitResult_TraceStart) == 0x0001A8, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, CallFunc_BreakHitResult_TraceEnd) == 0x0001B4, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, CallFunc_Cross_VectorVector_ReturnValue1) == 0x0001C0, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::CallFunc_Cross_VectorVector_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, CallFunc_Dot_VectorVector_ReturnValue) == 0x0001CC, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule, CallFunc_DegAcos_ReturnValue) == 0x0001D0, "Member 'BPF_AJBCollisionFunctions_C_CalcForwardSlopeInfoByCapsule::CallFunc_DegAcos_ReturnValue' has a wrong offset!");

}

