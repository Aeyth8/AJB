#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBLaserImpactAffecter_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_AJBDamageAffecterBase_classes.hpp"
#include "AJB_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBLaserImpactAffecter_Base.BP_AJBLaserImpactAffecter_Base_C
// 0x0018 (0x0598 - 0x0580)
class ABP_AJBLaserImpactAffecter_Base_C : public ABP_AJBDamageAffecterBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBLaserImpactAffecter_Base_C;   // 0x0580(0x0008)(Transient, DuplicateTransient)
	class USphereComponent*                       CollisionToBreakWindow;                            // 0x0588(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAffecterEnabledValue;                            // 0x0590(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, AdvancedDisplay)
	bool                                          ShouldBreakWindow;                                 // 0x0591(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_AJBLaserImpactAffecter_Base(int32 EntryPoint);
	void MC_DrawDebugSphere(const struct FVector& Center, float Radius_0, int32 Segments, const struct FLinearColor& LineColor, float Thickness);
	void ROS_DrawDebugSphere();
	void IsAffecterEnabled(bool* IsEnabled);
	void SetAffecterEnabled(bool Value);
	void SetCollisionToBreakEnabled(bool IsEnabled);
	void OnRep_IsAffecterEnabledValue();
	void MC_TheWorldAleady(bool bEnable);
	void ReceiveBeginPlay();
	void AreaTick();
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);
	void UserConstructionScript();
	void DrawDebugSphere();
	void CalcAttackDistance(class AActor* DamagedActor, float* AttackDistance);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBLaserImpactAffecter_Base_C">();
	}
	static class ABP_AJBLaserImpactAffecter_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBLaserImpactAffecter_Base_C>();
	}
};
static_assert(alignof(ABP_AJBLaserImpactAffecter_Base_C) == 0x000008, "Wrong alignment on ABP_AJBLaserImpactAffecter_Base_C");
static_assert(sizeof(ABP_AJBLaserImpactAffecter_Base_C) == 0x000598, "Wrong size on ABP_AJBLaserImpactAffecter_Base_C");
static_assert(offsetof(ABP_AJBLaserImpactAffecter_Base_C, UberGraphFrame_BP_AJBLaserImpactAffecter_Base_C) == 0x000580, "Member 'ABP_AJBLaserImpactAffecter_Base_C::UberGraphFrame_BP_AJBLaserImpactAffecter_Base_C' has a wrong offset!");
static_assert(offsetof(ABP_AJBLaserImpactAffecter_Base_C, CollisionToBreakWindow) == 0x000588, "Member 'ABP_AJBLaserImpactAffecter_Base_C::CollisionToBreakWindow' has a wrong offset!");
static_assert(offsetof(ABP_AJBLaserImpactAffecter_Base_C, IsAffecterEnabledValue) == 0x000590, "Member 'ABP_AJBLaserImpactAffecter_Base_C::IsAffecterEnabledValue' has a wrong offset!");
static_assert(offsetof(ABP_AJBLaserImpactAffecter_Base_C, ShouldBreakWindow) == 0x000591, "Member 'ABP_AJBLaserImpactAffecter_Base_C::ShouldBreakWindow' has a wrong offset!");

}

