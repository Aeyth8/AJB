#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_LandmarkText

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Slate_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "WB_LandmarkBase_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_LandmarkText.WB_LandmarkText_C
// 0x00E0 (0x0350 - 0x0270)
class UWB_LandmarkText_C final : public UWB_LandmarkBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_WB_LandmarkText_C;                  // 0x0270(0x0008)(Transient, DuplicateTransient)
	class URetainerBox*                           RetainerBox_SubPixeler;                            // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScaleBox*                              ScaleBox_Scaler;                                   // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_Resizer;                                   // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_LandmarkInfo;                            // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   PC_Text;                                           // 0x0298(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ExposeOnSpawn)
	struct FSlateColor                            PC_ColorAndOpacity;                                // 0x02B0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, ExposeOnSpawn)
	struct FSlateFontInfo                         PC_Font;                                           // 0x02D8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector2D                              PC_ShadowOffset;                                   // 0x0328(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FLinearColor                           PC_ShadowColor;                                    // 0x0330(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         PC_MinDesiredWidth;                                // 0x0340(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          PC_AutoWrapText;                                   // 0x0344(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	ETextJustify                                  PC_Justification;                                  // 0x0345(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_346[0x2];                                      // 0x0346(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PrevScale;                                         // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WB_LandmarkText(int32 EntryPoint);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void SetInnerScale(float InnerScale_0);
	void PreConstruct(bool IsDesignTime);

	void GetContentWidget(class UWidget** ContentWidget) const;
	void GetResizerWidget(class USizeBox** SizeBox) const;
	class URetainerBox* GetRetainerBoxWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_LandmarkText_C">();
	}
	static class UWB_LandmarkText_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_LandmarkText_C>();
	}
};
static_assert(alignof(UWB_LandmarkText_C) == 0x000008, "Wrong alignment on UWB_LandmarkText_C");
static_assert(sizeof(UWB_LandmarkText_C) == 0x000350, "Wrong size on UWB_LandmarkText_C");
static_assert(offsetof(UWB_LandmarkText_C, UberGraphFrame_WB_LandmarkText_C) == 0x000270, "Member 'UWB_LandmarkText_C::UberGraphFrame_WB_LandmarkText_C' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkText_C, RetainerBox_SubPixeler) == 0x000278, "Member 'UWB_LandmarkText_C::RetainerBox_SubPixeler' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkText_C, ScaleBox_Scaler) == 0x000280, "Member 'UWB_LandmarkText_C::ScaleBox_Scaler' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkText_C, SizeBox_Resizer) == 0x000288, "Member 'UWB_LandmarkText_C::SizeBox_Resizer' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkText_C, TextBlock_LandmarkInfo) == 0x000290, "Member 'UWB_LandmarkText_C::TextBlock_LandmarkInfo' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkText_C, PC_Text) == 0x000298, "Member 'UWB_LandmarkText_C::PC_Text' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkText_C, PC_ColorAndOpacity) == 0x0002B0, "Member 'UWB_LandmarkText_C::PC_ColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkText_C, PC_Font) == 0x0002D8, "Member 'UWB_LandmarkText_C::PC_Font' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkText_C, PC_ShadowOffset) == 0x000328, "Member 'UWB_LandmarkText_C::PC_ShadowOffset' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkText_C, PC_ShadowColor) == 0x000330, "Member 'UWB_LandmarkText_C::PC_ShadowColor' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkText_C, PC_MinDesiredWidth) == 0x000340, "Member 'UWB_LandmarkText_C::PC_MinDesiredWidth' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkText_C, PC_AutoWrapText) == 0x000344, "Member 'UWB_LandmarkText_C::PC_AutoWrapText' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkText_C, PC_Justification) == 0x000345, "Member 'UWB_LandmarkText_C::PC_Justification' has a wrong offset!");
static_assert(offsetof(UWB_LandmarkText_C, PrevScale) == 0x000348, "Member 'UWB_LandmarkText_C::PrevScale' has a wrong offset!");

}

