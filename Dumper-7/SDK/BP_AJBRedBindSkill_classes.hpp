#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBRedBindSkill

#include "Basic.hpp"

#include "BP_AJBPlacementSkill_classes.hpp"
#include "Engine_structs.hpp"
#include "AJB_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBRedBindSkill.BP_AJBRedBindSkill_C
// 0x0020 (0x0340 - 0x0320)
class UBP_AJBRedBindSkill_C final : public UBP_AJBPlacementSkill_C
{
public:
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBRedBindSkill_C;               // 0x0318(0x0008)(Transient, DuplicateTransient)
	TArray<class UClass*>                         ExclusionPassiveClassList;                         // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class ABP_AJBInGameParticleEffect_C*          StartParticle;                                     // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PassiveSkillDurationForSHA_Sec_;                   // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBRedBindSkill(int32 EntryPoint);
	void OnSpawnObject(bool bPlacement, class AActor* Actor);
	void SpawnNewObject(const struct FTransform& Transform, class AActor* TargetActor);
	void ShouldAddPassive(class AAJBInGameCharacterBase* DamagedCharacterBase, class AActor* DamageCauser, bool* bShouldAddPassive);
	void CheckAnyExclusionPassiveActive(class AActor* Target, bool* bValid);
	void TraceObjectTransform(bool* bPossiblePlacement_0, struct FTransform* Transform, class AActor** TargetActor);
	void ChangePreviewUI(bool bPossiblePlacement_0);
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);
	void ConsumeSkill();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBRedBindSkill_C">();
	}
	static class UBP_AJBRedBindSkill_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AJBRedBindSkill_C>();
	}
};
static_assert(alignof(UBP_AJBRedBindSkill_C) == 0x000010, "Wrong alignment on UBP_AJBRedBindSkill_C");
static_assert(sizeof(UBP_AJBRedBindSkill_C) == 0x000340, "Wrong size on UBP_AJBRedBindSkill_C");
static_assert(offsetof(UBP_AJBRedBindSkill_C, UberGraphFrame_BP_AJBRedBindSkill_C) == 0x000318, "Member 'UBP_AJBRedBindSkill_C::UberGraphFrame_BP_AJBRedBindSkill_C' has a wrong offset!");
static_assert(offsetof(UBP_AJBRedBindSkill_C, ExclusionPassiveClassList) == 0x000320, "Member 'UBP_AJBRedBindSkill_C::ExclusionPassiveClassList' has a wrong offset!");
static_assert(offsetof(UBP_AJBRedBindSkill_C, StartParticle) == 0x000330, "Member 'UBP_AJBRedBindSkill_C::StartParticle' has a wrong offset!");
static_assert(offsetof(UBP_AJBRedBindSkill_C, PassiveSkillDurationForSHA_Sec_) == 0x000338, "Member 'UBP_AJBRedBindSkill_C::PassiveSkillDurationForSHA_Sec_' has a wrong offset!");

}

