#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_ReticleFighter

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function WB_ReticleFighter.WB_ReticleFighter_C.ExecuteUbergraph_WB_ReticleFighter
// 0x00A0 (0x00A0 - 0x0000)
struct WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacter*                    K2Node_Event_MyCharacter;                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bHeadShot;                            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bFinishBlow;                          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               K2Node_DynamicCast_AsBP_AJBIn_Game_Character;      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PredictionAttackHit_bHit;                 // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UImage*>                         K2Node_MakeArray_Array;                            // 0x0030(0x0010)(ZeroConstructor, ReferenceParm)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable;                              // 0x0048(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0050(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Update_ReticleColor_NewParam;             // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable1;                               // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_63[0x1];                                       // 0x0063(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_Event_Position;                             // 0x0064(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bOutOfScreen;                         // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Update_ReticleColor_NewParam1;            // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetViewportScale_ReturnValue;             // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetDesiredSize_ReturnValue;               // 0x0074(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue;         // 0x007C(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Divide_Vector2DFloat_ReturnValue1;        // 0x0084(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x008C(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select1_Default;                            // 0x0094(0x0008)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter) == 0x000008, "Wrong alignment on WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter");
static_assert(sizeof(WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter) == 0x0000A0, "Wrong size on WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter");
static_assert(offsetof(WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter, EntryPoint) == 0x000000, "Member 'WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter, Temp_bool_Variable) == 0x000004, "Member 'WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter, K2Node_Event_DeltaSeconds) == 0x000008, "Member 'WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter, K2Node_Event_MyCharacter) == 0x000010, "Member 'WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter::K2Node_Event_MyCharacter' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter, K2Node_Event_bHeadShot) == 0x000018, "Member 'WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter::K2Node_Event_bHeadShot' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter, K2Node_Event_bFinishBlow) == 0x000019, "Member 'WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter::K2Node_Event_bFinishBlow' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter, K2Node_DynamicCast_AsBP_AJBIn_Game_Character) == 0x000020, "Member 'WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter::K2Node_DynamicCast_AsBP_AJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter, CallFunc_PredictionAttackHit_bHit) == 0x000029, "Member 'WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter::CallFunc_PredictionAttackHit_bHit' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter, Temp_bool_Has_Been_Initd_Variable) == 0x00002A, "Member 'WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter, K2Node_MakeArray_Array) == 0x000030, "Member 'WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000040, "Member 'WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000044, "Member 'WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter, Temp_struct_Variable) == 0x000048, "Member 'WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter, K2Node_Select_Default) == 0x000050, "Member 'WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter, Temp_bool_IsClosed_Variable) == 0x000060, "Member 'WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter, CallFunc_Update_ReticleColor_NewParam) == 0x000061, "Member 'WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter::CallFunc_Update_ReticleColor_NewParam' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter, Temp_bool_Variable1) == 0x000062, "Member 'WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter, K2Node_Event_Position) == 0x000064, "Member 'WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter::K2Node_Event_Position' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter, K2Node_Event_bOutOfScreen) == 0x00006C, "Member 'WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter::K2Node_Event_bOutOfScreen' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter, CallFunc_Update_ReticleColor_NewParam1) == 0x00006D, "Member 'WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter::CallFunc_Update_ReticleColor_NewParam1' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter, CallFunc_GetViewportScale_ReturnValue) == 0x000070, "Member 'WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter::CallFunc_GetViewportScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter, CallFunc_GetDesiredSize_ReturnValue) == 0x000074, "Member 'WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter::CallFunc_GetDesiredSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter, CallFunc_Divide_Vector2DFloat_ReturnValue) == 0x00007C, "Member 'WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter::CallFunc_Divide_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter, CallFunc_Divide_Vector2DFloat_ReturnValue1) == 0x000084, "Member 'WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter::CallFunc_Divide_Vector2DFloat_ReturnValue1' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x00008C, "Member 'WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter, K2Node_Select1_Default) == 0x000094, "Member 'WB_ReticleFighter_C_ExecuteUbergraph_WB_ReticleFighter::K2Node_Select1_Default' has a wrong offset!");

// Function WB_ReticleFighter.WB_ReticleFighter_C.Update_ReticleColor
// 0x0040 (0x0040 - 0x0000)
struct WB_ReticleFighter_C_Update_ReticleColor final
{
public:
	struct FLinearColor                           NewColor_Hits;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           NewColor_Other;                                    // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewParam;                                          // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_ReticleFighter_C_Update_ReticleColor) == 0x000008, "Wrong alignment on WB_ReticleFighter_C_Update_ReticleColor");
static_assert(sizeof(WB_ReticleFighter_C_Update_ReticleColor) == 0x000040, "Wrong size on WB_ReticleFighter_C_Update_ReticleColor");
static_assert(offsetof(WB_ReticleFighter_C_Update_ReticleColor, NewColor_Hits) == 0x000000, "Member 'WB_ReticleFighter_C_Update_ReticleColor::NewColor_Hits' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_Update_ReticleColor, NewColor_Other) == 0x000010, "Member 'WB_ReticleFighter_C_Update_ReticleColor::NewColor_Other' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_Update_ReticleColor, NewParam) == 0x000020, "Member 'WB_ReticleFighter_C_Update_ReticleColor::NewParam' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_Update_ReticleColor, Temp_int_Array_Index_Variable) == 0x000024, "Member 'WB_ReticleFighter_C_Update_ReticleColor::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_Update_ReticleColor, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'WB_ReticleFighter_C_Update_ReticleColor::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_Update_ReticleColor, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'WB_ReticleFighter_C_Update_ReticleColor::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_Update_ReticleColor, CallFunc_Array_Get_Item) == 0x000030, "Member 'WB_ReticleFighter_C_Update_ReticleColor::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_Update_ReticleColor, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'WB_ReticleFighter_C_Update_ReticleColor::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_Update_ReticleColor, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'WB_ReticleFighter_C_Update_ReticleColor::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function WB_ReticleFighter.WB_ReticleFighter_C.UpdateReticlePosition
// 0x000C (0x000C - 0x0000)
struct WB_ReticleFighter_C_UpdateReticlePosition final
{
public:
	struct FVector2D                              Position;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOutOfScreen;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_ReticleFighter_C_UpdateReticlePosition) == 0x000004, "Wrong alignment on WB_ReticleFighter_C_UpdateReticlePosition");
static_assert(sizeof(WB_ReticleFighter_C_UpdateReticlePosition) == 0x00000C, "Wrong size on WB_ReticleFighter_C_UpdateReticlePosition");
static_assert(offsetof(WB_ReticleFighter_C_UpdateReticlePosition, Position) == 0x000000, "Member 'WB_ReticleFighter_C_UpdateReticlePosition::Position' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_UpdateReticlePosition, bOutOfScreen) == 0x000008, "Member 'WB_ReticleFighter_C_UpdateReticlePosition::bOutOfScreen' has a wrong offset!");

// Function WB_ReticleFighter.WB_ReticleFighter_C.OnHit
// 0x0002 (0x0002 - 0x0000)
struct WB_ReticleFighter_C_OnHit final
{
public:
	bool                                          bHeadShot;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bFInishBlow;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_ReticleFighter_C_OnHit) == 0x000001, "Wrong alignment on WB_ReticleFighter_C_OnHit");
static_assert(sizeof(WB_ReticleFighter_C_OnHit) == 0x000002, "Wrong size on WB_ReticleFighter_C_OnHit");
static_assert(offsetof(WB_ReticleFighter_C_OnHit, bHeadShot) == 0x000000, "Member 'WB_ReticleFighter_C_OnHit::bHeadShot' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_OnHit, bFInishBlow) == 0x000001, "Member 'WB_ReticleFighter_C_OnHit::bFInishBlow' has a wrong offset!");

// Function WB_ReticleFighter.WB_ReticleFighter_C.Update
// 0x0010 (0x0010 - 0x0000)
struct WB_ReticleFighter_C_Update final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacter*                    MyCharacter;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_ReticleFighter_C_Update) == 0x000008, "Wrong alignment on WB_ReticleFighter_C_Update");
static_assert(sizeof(WB_ReticleFighter_C_Update) == 0x000010, "Wrong size on WB_ReticleFighter_C_Update");
static_assert(offsetof(WB_ReticleFighter_C_Update, DeltaSeconds) == 0x000000, "Member 'WB_ReticleFighter_C_Update::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(WB_ReticleFighter_C_Update, MyCharacter) == 0x000008, "Member 'WB_ReticleFighter_C_Update::MyCharacter' has a wrong offset!");

}

