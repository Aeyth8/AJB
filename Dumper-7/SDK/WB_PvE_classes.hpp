#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_PvE

#include "Basic.hpp"

#include "EPvENextFlowEvent_structs.hpp"
#include "Engine_structs.hpp"
#include "ETrainingCPUStrength_structs.hpp"
#include "EPvEGameDifficulty_structs.hpp"
#include "AJB_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_PvE.WB_PvE_C
// 0x00A0 (0x0360 - 0x02C0)
class UWB_PvE_C final : public UAJBWindowWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(Transient, DuplicateTransient)
	class UWidgetAnimation*                       Anim_Close;                                        // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_Open;                                         // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          AJBText_Difficulty_High;                           // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UAJBTextBlock*                          AJBText_Difficulty_Low;                            // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_CommonButton_C*                     Debug_WB_CommonButton_Pair;                        // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class URetainerBox*                           RetainerBox_8;                                     // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VerticalBox_0;                                     // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ArrowButton_L_C*                    WB_ArrowButton_GameDifficultyDown;                 // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_ArrowButton_C*                      WB_ArrowButton_GameDifficultyUp;                   // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_CommonButton_C*                     WB_CommonButton_Return;                            // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWB_CommonButton_C*                     WB_CommonButton_START;                             // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class ABP_AJBOutGameHUD_C*                    CachedOutGameHUD;                                  // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CountDownMaxTime;                                  // 0x0328(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableUpdateTimeCountDown;                        // 0x032C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32D[0x3];                                      // 0x032D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RemainingTime;                                     // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentDisplayAreaIndex;                           // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCurrentRespawnable;                               // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ETrainingCPUStrength                          CurrentCPUStrength;                                // 0x0339(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33A[0x6];                                      // 0x033A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 DamageAreaIndexList;                               // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	EPvEGameDifficulty                            CurrentPvEGameDifficulty;                          // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            MaxPvEGameDifficulty;                              // 0x0351(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            MinPvEGameDifficulty;                              // 0x0352(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldStartGame;                                   // 0x0353(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         TakeOverRemainingTime;                             // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         MinimumCountDownTime;                              // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvENextFlowEvent                             NextFlow;                                          // 0x035C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WB_PvE(int32 EntryPoint);
	void StopTimeCountdown();
	void StartTimeCountdown();
	void BeginPvEPair();
	void BndEvt__Debug_WB_CommonButton_Pair_K2Node_ComponentBoundEvent_4_OnAJBButtonEvent__DelegateSignature(class UAJBButtonWidget* OwnerWidget, class UAJBButton* TargetButton);
	void BndEvt__WB_CommonButton_Return_K2Node_ComponentBoundEvent_3_OnAJBButtonEvent__DelegateSignature(class UAJBButtonWidget* OwnerWidget, class UAJBButton* TargetButton);
	void OnOpeningWindow();
	void UpdateGameDifficulty(EPvEGameDifficulty GameDifficulty);
	void BndEvt__WB_ArrowButton_CPULevelUp_K2Node_ComponentBoundEvent_2_OnAJBButtonEvent__DelegateSignature(class UAJBButtonWidget* OwnerWidget, class UAJBButton* TargetButton);
	void BndEvt__WB_ArrowButton_CPULevelDown_K2Node_ComponentBoundEvent_1_OnAJBButtonEvent__DelegateSignature(class UAJBButtonWidget* OwnerWidget, class UAJBButton* TargetButton);
	void BndEvt__WB_CommonButton_START_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature(class UAJBButtonWidget* OwnerWidget, class UAJBButton* TargetButton);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Construct();
	void OnCloseAnimationFinished();
	void OnClosingWindow();
	void SetTimeCountDownRemainingTime(float RemainingTime_0);
	void OnOpenAnimationFinished();
	void Finished_CB74CA88467641F8BFA41696FF4B96B3();
	void Finished_310B5629428A700EEAFA3F92B7288257();
	void Finished_28CCD97047E6586D3FE12D8813A4BC2F();
	void Finished_F0BDE32141A6A5AB486BC2B203AA6727();
	void Finished_2D594D5D4DB643C9EAD11797BBF90C5D();
	void Finished_1A8D146F42295851BFB2138B80B34848();
	void GetNextPvEGameDifficulty(EPvEGameDifficulty Difficulty, EPvEGameDifficulty* NextDifficulty);
	void GetPreviousPvEGameDifficulty(EPvEGameDifficulty Difficulty, EPvEGameDifficulty* PreviousDifficulty);
	void SetPvEGameDifficultyText(EPvEGameDifficulty Difficulty);
	bool OnInputTurnRate(float Value);
	bool OnInputReleasedUp();
	bool OnInputReleasedTouch();
	bool OnInputReleasedRight();
	bool OnInputReleasedLeft();
	bool OnInputReleasedDown();
	bool OnInputReleasedDecide();
	bool OnInputReleasedCancel();
	bool OnInputPressedUp();
	bool OnInputPressedTouch(const float LocationX, const float LocationY);
	bool OnInputPressedRight();
	bool OnInputPressedLeft();
	bool OnInputPressedDown();
	bool OnInputPressedDecide();
	bool OnInputPressedCancel();
	bool OnInputMoveRight(float Value);
	bool OnInputMoveForward(float Value);
	bool OnInputLookupRate(float Value);
	bool IsModeless();
	bool OnInputReleasedR2();
	bool OnInputReleasedR1();
	bool OnInputReleasedL2();
	bool OnInputReleasedL1();
	bool OnInputPressedR2();
	bool OnInputPressedR1();
	bool OnInputPressedL2();
	bool OnInputPressedL1();
	bool OnInputReleasedL3();
	bool OnInputPressedL3();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_PvE_C">();
	}
	static class UWB_PvE_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_PvE_C>();
	}
};
static_assert(alignof(UWB_PvE_C) == 0x000008, "Wrong alignment on UWB_PvE_C");
static_assert(sizeof(UWB_PvE_C) == 0x000360, "Wrong size on UWB_PvE_C");
static_assert(offsetof(UWB_PvE_C, UberGraphFrame) == 0x0002C0, "Member 'UWB_PvE_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_PvE_C, Anim_Close) == 0x0002C8, "Member 'UWB_PvE_C::Anim_Close' has a wrong offset!");
static_assert(offsetof(UWB_PvE_C, Anim_Open) == 0x0002D0, "Member 'UWB_PvE_C::Anim_Open' has a wrong offset!");
static_assert(offsetof(UWB_PvE_C, AJBText_Difficulty_High) == 0x0002D8, "Member 'UWB_PvE_C::AJBText_Difficulty_High' has a wrong offset!");
static_assert(offsetof(UWB_PvE_C, AJBText_Difficulty_Low) == 0x0002E0, "Member 'UWB_PvE_C::AJBText_Difficulty_Low' has a wrong offset!");
static_assert(offsetof(UWB_PvE_C, Debug_WB_CommonButton_Pair) == 0x0002E8, "Member 'UWB_PvE_C::Debug_WB_CommonButton_Pair' has a wrong offset!");
static_assert(offsetof(UWB_PvE_C, RetainerBox_8) == 0x0002F0, "Member 'UWB_PvE_C::RetainerBox_8' has a wrong offset!");
static_assert(offsetof(UWB_PvE_C, VerticalBox_0) == 0x0002F8, "Member 'UWB_PvE_C::VerticalBox_0' has a wrong offset!");
static_assert(offsetof(UWB_PvE_C, WB_ArrowButton_GameDifficultyDown) == 0x000300, "Member 'UWB_PvE_C::WB_ArrowButton_GameDifficultyDown' has a wrong offset!");
static_assert(offsetof(UWB_PvE_C, WB_ArrowButton_GameDifficultyUp) == 0x000308, "Member 'UWB_PvE_C::WB_ArrowButton_GameDifficultyUp' has a wrong offset!");
static_assert(offsetof(UWB_PvE_C, WB_CommonButton_Return) == 0x000310, "Member 'UWB_PvE_C::WB_CommonButton_Return' has a wrong offset!");
static_assert(offsetof(UWB_PvE_C, WB_CommonButton_START) == 0x000318, "Member 'UWB_PvE_C::WB_CommonButton_START' has a wrong offset!");
static_assert(offsetof(UWB_PvE_C, CachedOutGameHUD) == 0x000320, "Member 'UWB_PvE_C::CachedOutGameHUD' has a wrong offset!");
static_assert(offsetof(UWB_PvE_C, CountDownMaxTime) == 0x000328, "Member 'UWB_PvE_C::CountDownMaxTime' has a wrong offset!");
static_assert(offsetof(UWB_PvE_C, bEnableUpdateTimeCountDown) == 0x00032C, "Member 'UWB_PvE_C::bEnableUpdateTimeCountDown' has a wrong offset!");
static_assert(offsetof(UWB_PvE_C, RemainingTime) == 0x000330, "Member 'UWB_PvE_C::RemainingTime' has a wrong offset!");
static_assert(offsetof(UWB_PvE_C, CurrentDisplayAreaIndex) == 0x000334, "Member 'UWB_PvE_C::CurrentDisplayAreaIndex' has a wrong offset!");
static_assert(offsetof(UWB_PvE_C, bCurrentRespawnable) == 0x000338, "Member 'UWB_PvE_C::bCurrentRespawnable' has a wrong offset!");
static_assert(offsetof(UWB_PvE_C, CurrentCPUStrength) == 0x000339, "Member 'UWB_PvE_C::CurrentCPUStrength' has a wrong offset!");
static_assert(offsetof(UWB_PvE_C, DamageAreaIndexList) == 0x000340, "Member 'UWB_PvE_C::DamageAreaIndexList' has a wrong offset!");
static_assert(offsetof(UWB_PvE_C, CurrentPvEGameDifficulty) == 0x000350, "Member 'UWB_PvE_C::CurrentPvEGameDifficulty' has a wrong offset!");
static_assert(offsetof(UWB_PvE_C, MaxPvEGameDifficulty) == 0x000351, "Member 'UWB_PvE_C::MaxPvEGameDifficulty' has a wrong offset!");
static_assert(offsetof(UWB_PvE_C, MinPvEGameDifficulty) == 0x000352, "Member 'UWB_PvE_C::MinPvEGameDifficulty' has a wrong offset!");
static_assert(offsetof(UWB_PvE_C, ShouldStartGame) == 0x000353, "Member 'UWB_PvE_C::ShouldStartGame' has a wrong offset!");
static_assert(offsetof(UWB_PvE_C, TakeOverRemainingTime) == 0x000354, "Member 'UWB_PvE_C::TakeOverRemainingTime' has a wrong offset!");
static_assert(offsetof(UWB_PvE_C, MinimumCountDownTime) == 0x000358, "Member 'UWB_PvE_C::MinimumCountDownTime' has a wrong offset!");
static_assert(offsetof(UWB_PvE_C, NextFlow) == 0x00035C, "Member 'UWB_PvE_C::NextFlow' has a wrong offset!");

}

