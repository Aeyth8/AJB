#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBPvEGameState

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ST_AJBPvEScoreResult_structs.hpp"
#include "EPvEGameDifficulty_structs.hpp"
#include "ST_AJBInGamePvE_ScoreSettings_structs.hpp"
#include "AJB_structs.hpp"
#include "ST_AJBInGamePvE_ScoreRankSettings_structs.hpp"


namespace SDK::Params
{

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.ExecuteUbergraph_BP_AJBPvEGameState
// 0x0240 (0x0240 - 0x0000)
struct BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_BorderGroup;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            K2Node_CustomEvent_Difficulty;                     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsIncludingBonus;               // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_AJBPvEScoreResult                  CallFunc_GetScoreResults_ScoreResults;             // 0x000C(0x0020)(HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_OldScore;                       // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_NewScore;                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_OldKillCount;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_NewKillCount;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_OldRetiredCount;                // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_NewRetiredCount;                // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_CustomEvent_PlayerID;                       // 0x0048(0x0010)(ConstParm, ZeroConstructor, HasGetValueTypeHash)
	struct FMatchingPlayerInfo                    K2Node_CustomEvent_PlayerInfo;                     // 0x0058(0x0088)(ConstParm)
	bool                                          CallFunc_GetAJBGameInstance_bSuccess;              // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBGameInstance_C*                  CallFunc_GetAJBGameInstance_AJB_Game_Instance;     // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBGameInstance_bSuccess1;             // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBGameInstance_C*                  CallFunc_GetAJBGameInstance_AJB_Game_Instance1;    // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEditor_ReturnValue;                     // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAJBGameInstance_bSuccess2;             // 0x0102(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_103[0x5];                                      // 0x0103(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBGameInstance_C*                  CallFunc_GetAJBGameInstance_AJB_Game_Instance2;    // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddPP_ReturnValue;                        // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPvEPlayMode_IsPvEPlayMode;              // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsShipping_ReturnValue;                   // 0x0112(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0113(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue1;                 // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0115(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAJBGameInstance_bSuccess3;             // 0x0116(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_117[0x1];                                      // 0x0117(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBGameInstance_C*                  CallFunc_GetAJBGameInstance_AJB_Game_Instance3;    // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue1;                  // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEditor_ReturnValue1;                    // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsShipping_ReturnValue1;                  // 0x0122(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAJBInGameHUD_BP_bSuccess;              // 0x0123(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameHUD_C*                     CallFunc_GetAJBInGameHUD_BP_In_Game_HUD;           // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue2;                 // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue2;                  // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAJBInGameCharacter*                    K2Node_DynamicCast_AsAJBIn_Game_Character;         // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_AJBInGameMiniMapMaterialController_C*> CallFunc_GetAllActorsOfClass_OutActors;  // 0x0158(0x0010)(ZeroConstructor, ReferenceParm)
	class ABP_AJBInGameMiniMapMaterialController_C* CallFunc_Array_Get_Item;                         // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_AJBInGamePvE_PhaseManager_C*> CallFunc_GetAllActorsOfClass_OutActors1;          // 0x0178(0x0010)(ZeroConstructor, ReferenceParm)
	class ABP_AJBInGamePvE_PhaseManager_C*        CallFunc_Array_Get_Item1;                          // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_192[0x6];                                      // 0x0192(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_AJBInGamePvE_EnemySpawnManager_C*> CallFunc_GetAllActorsOfClass_OutActors2;     // 0x0198(0x0010)(ZeroConstructor, ReferenceParm)
	class ABP_AJBInGamePvE_EnemySpawnManager_C*   CallFunc_Array_Get_Item2;                          // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B1[0x3];                                      // 0x01B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_WaveIndex;                      // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_WaveDuration;                   // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGamePvE_PhaseManager_C*        CallFunc_GetPvEPhaseManager_PhaseManager;          // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsShipping_ReturnValue2;                  // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C9[0x3];                                      // 0x01C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetMaxWaveCount_MaxWaveCount;             // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue3;                 // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue3;                  // 0x01D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D3[0x5];                                      // 0x01D3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x01D8(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EC[0x4];                                      // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_Array_Get_Item3;                          // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_AJBInGamePvE_ScoreSettings         CallFunc_GetDataTableRowFromName_OutRow;           // 0x01F8(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_209[0x3];                                      // 0x0209(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0214(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_215[0x3];                                      // 0x0215(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(int32 WaveIndex, float WaveDuration)> K2Node_CreateDelegate_OutputDelegate;       // 0x0218(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         K2Node_CustomEvent_BorderGroup3;                   // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            K2Node_CustomEvent_Difficulty3;                    // 0x022C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsIncludingBonus3;              // 0x022D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22E[0x2];                                      // 0x022E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_BorderGroup2;                   // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            K2Node_CustomEvent_Difficulty2;                    // 0x0234(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsIncludingBonus2;              // 0x0235(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_236[0x2];                                      // 0x0236(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_BorderGroup1;                   // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            K2Node_CustomEvent_Difficulty1;                    // 0x023C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsIncludingBonus1;              // 0x023D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState) == 0x000008, "Wrong alignment on BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState");
static_assert(sizeof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState) == 0x000240, "Wrong size on BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, EntryPoint) == 0x000000, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, K2Node_CustomEvent_BorderGroup) == 0x000004, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::K2Node_CustomEvent_BorderGroup' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, K2Node_CustomEvent_Difficulty) == 0x000008, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::K2Node_CustomEvent_Difficulty' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, K2Node_CustomEvent_IsIncludingBonus) == 0x000009, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::K2Node_CustomEvent_IsIncludingBonus' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_GetScoreResults_ScoreResults) == 0x00000C, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_GetScoreResults_ScoreResults' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, K2Node_CustomEvent_OldScore) == 0x00002C, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::K2Node_CustomEvent_OldScore' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, K2Node_CustomEvent_NewScore) == 0x000030, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::K2Node_CustomEvent_NewScore' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, K2Node_CustomEvent_OldKillCount) == 0x000034, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::K2Node_CustomEvent_OldKillCount' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, K2Node_CustomEvent_NewKillCount) == 0x000038, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::K2Node_CustomEvent_NewKillCount' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, K2Node_CustomEvent_OldRetiredCount) == 0x00003C, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::K2Node_CustomEvent_OldRetiredCount' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, K2Node_CustomEvent_NewRetiredCount) == 0x000040, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::K2Node_CustomEvent_NewRetiredCount' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, K2Node_CustomEvent_PlayerID) == 0x000048, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::K2Node_CustomEvent_PlayerID' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, K2Node_CustomEvent_PlayerInfo) == 0x000058, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::K2Node_CustomEvent_PlayerInfo' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_GetAJBGameInstance_bSuccess) == 0x0000E0, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_GetAJBGameInstance_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_GetAJBGameInstance_AJB_Game_Instance) == 0x0000E8, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_GetAJBGameInstance_AJB_Game_Instance' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_GetAJBGameInstance_bSuccess1) == 0x0000F0, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_GetAJBGameInstance_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_GetAJBGameInstance_AJB_Game_Instance1) == 0x0000F8, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_GetAJBGameInstance_AJB_Game_Instance1' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_IsEditor_ReturnValue) == 0x000100, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_IsEditor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, Temp_bool_Has_Been_Initd_Variable) == 0x000101, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_GetAJBGameInstance_bSuccess2) == 0x000102, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_GetAJBGameInstance_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_GetAJBGameInstance_AJB_Game_Instance2) == 0x000108, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_GetAJBGameInstance_AJB_Game_Instance2' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_AddPP_ReturnValue) == 0x000110, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_AddPP_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_IsPvEPlayMode_IsPvEPlayMode) == 0x000111, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_IsPvEPlayMode_IsPvEPlayMode' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_IsShipping_ReturnValue) == 0x000112, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_IsShipping_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_Not_PreBool_ReturnValue) == 0x000113, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_Not_PreBool_ReturnValue1) == 0x000114, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_Not_PreBool_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_BooleanAND_ReturnValue) == 0x000115, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_GetAJBGameInstance_bSuccess3) == 0x000116, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_GetAJBGameInstance_bSuccess3' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_GetAJBGameInstance_AJB_Game_Instance3) == 0x000118, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_GetAJBGameInstance_AJB_Game_Instance3' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_BooleanAND_ReturnValue1) == 0x000120, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_BooleanAND_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_IsEditor_ReturnValue1) == 0x000121, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_IsEditor_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_IsShipping_ReturnValue1) == 0x000122, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_IsShipping_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_GetAJBInGameHUD_BP_bSuccess) == 0x000123, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_GetAJBInGameHUD_BP_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_GetAJBInGameHUD_BP_In_Game_HUD) == 0x000128, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_GetAJBInGameHUD_BP_In_Game_HUD' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_Not_PreBool_ReturnValue2) == 0x000130, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_Not_PreBool_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000138, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_BooleanAND_ReturnValue2) == 0x000140, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_BooleanAND_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, K2Node_DynamicCast_AsAJBIn_Game_Character) == 0x000148, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::K2Node_DynamicCast_AsAJBIn_Game_Character' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, K2Node_DynamicCast_bSuccess) == 0x000150, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_GetAllActorsOfClass_OutActors) == 0x000158, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_Array_Get_Item) == 0x000168, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000170, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_GetAllActorsOfClass_OutActors1) == 0x000178, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_GetAllActorsOfClass_OutActors1' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_Array_Get_Item1) == 0x000188, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_Array_Get_Item1' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_IsValid_ReturnValue) == 0x000190, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, Temp_bool_IsClosed_Variable) == 0x000191, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_GetAllActorsOfClass_OutActors2) == 0x000198, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_GetAllActorsOfClass_OutActors2' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_Array_Get_Item2) == 0x0001A8, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_Array_Get_Item2' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_IsValid_ReturnValue1) == 0x0001B0, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, Temp_int_Array_Index_Variable) == 0x0001B4, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, K2Node_CustomEvent_WaveIndex) == 0x0001B8, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::K2Node_CustomEvent_WaveIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, K2Node_CustomEvent_WaveDuration) == 0x0001BC, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::K2Node_CustomEvent_WaveDuration' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_GetPvEPhaseManager_PhaseManager) == 0x0001C0, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_GetPvEPhaseManager_PhaseManager' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_IsShipping_ReturnValue2) == 0x0001C8, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_IsShipping_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_GetMaxWaveCount_MaxWaveCount) == 0x0001CC, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_GetMaxWaveCount_MaxWaveCount' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_Not_PreBool_ReturnValue3) == 0x0001D0, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_Not_PreBool_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_NotEqual_IntInt_ReturnValue) == 0x0001D1, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_BooleanAND_ReturnValue3) == 0x0001D2, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_BooleanAND_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_GetDataTableRowNames_OutRowNames) == 0x0001D8, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, Temp_int_Loop_Counter_Variable) == 0x0001E8, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_Array_Get_Item3) == 0x0001F0, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_Array_Get_Item3' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_GetDataTableRowFromName_OutRow) == 0x0001F8, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000208, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_Add_IntInt_ReturnValue) == 0x00020C, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_Array_Length_ReturnValue) == 0x000210, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, CallFunc_Less_IntInt_ReturnValue) == 0x000214, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, K2Node_CreateDelegate_OutputDelegate) == 0x000218, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, K2Node_CustomEvent_BorderGroup3) == 0x000228, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::K2Node_CustomEvent_BorderGroup3' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, K2Node_CustomEvent_Difficulty3) == 0x00022C, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::K2Node_CustomEvent_Difficulty3' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, K2Node_CustomEvent_IsIncludingBonus3) == 0x00022D, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::K2Node_CustomEvent_IsIncludingBonus3' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, K2Node_CustomEvent_BorderGroup2) == 0x000230, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::K2Node_CustomEvent_BorderGroup2' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, K2Node_CustomEvent_Difficulty2) == 0x000234, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::K2Node_CustomEvent_Difficulty2' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, K2Node_CustomEvent_IsIncludingBonus2) == 0x000235, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::K2Node_CustomEvent_IsIncludingBonus2' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, K2Node_CustomEvent_BorderGroup1) == 0x000238, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::K2Node_CustomEvent_BorderGroup1' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, K2Node_CustomEvent_Difficulty1) == 0x00023C, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::K2Node_CustomEvent_Difficulty1' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState, K2Node_CustomEvent_IsIncludingBonus1) == 0x00023D, "Member 'BP_AJBPvEGameState_C_ExecuteUbergraph_BP_AJBPvEGameState::K2Node_CustomEvent_IsIncludingBonus1' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.DetermineScoreResults_Internal
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBPvEGameState_C_DetermineScoreResults_Internal final
{
public:
	int32                                         BorderGroup;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            Difficulty;                                        // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsIncludingBonus;                                  // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPvEGameState_C_DetermineScoreResults_Internal) == 0x000004, "Wrong alignment on BP_AJBPvEGameState_C_DetermineScoreResults_Internal");
static_assert(sizeof(BP_AJBPvEGameState_C_DetermineScoreResults_Internal) == 0x000008, "Wrong size on BP_AJBPvEGameState_C_DetermineScoreResults_Internal");
static_assert(offsetof(BP_AJBPvEGameState_C_DetermineScoreResults_Internal, BorderGroup) == 0x000000, "Member 'BP_AJBPvEGameState_C_DetermineScoreResults_Internal::BorderGroup' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_DetermineScoreResults_Internal, Difficulty) == 0x000004, "Member 'BP_AJBPvEGameState_C_DetermineScoreResults_Internal::Difficulty' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_DetermineScoreResults_Internal, IsIncludingBonus) == 0x000005, "Member 'BP_AJBPvEGameState_C_DetermineScoreResults_Internal::IsIncludingBonus' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.ROS_DetermineScoreResults
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBPvEGameState_C_ROS_DetermineScoreResults final
{
public:
	int32                                         BorderGroup;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            Difficulty;                                        // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsIncludingBonus;                                  // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPvEGameState_C_ROS_DetermineScoreResults) == 0x000004, "Wrong alignment on BP_AJBPvEGameState_C_ROS_DetermineScoreResults");
static_assert(sizeof(BP_AJBPvEGameState_C_ROS_DetermineScoreResults) == 0x000008, "Wrong size on BP_AJBPvEGameState_C_ROS_DetermineScoreResults");
static_assert(offsetof(BP_AJBPvEGameState_C_ROS_DetermineScoreResults, BorderGroup) == 0x000000, "Member 'BP_AJBPvEGameState_C_ROS_DetermineScoreResults::BorderGroup' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ROS_DetermineScoreResults, Difficulty) == 0x000004, "Member 'BP_AJBPvEGameState_C_ROS_DetermineScoreResults::Difficulty' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ROS_DetermineScoreResults, IsIncludingBonus) == 0x000005, "Member 'BP_AJBPvEGameState_C_ROS_DetermineScoreResults::IsIncludingBonus' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.MC_DetermineScoreResults
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBPvEGameState_C_MC_DetermineScoreResults final
{
public:
	int32                                         BorderGroup;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            Difficulty;                                        // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsIncludingBonus;                                  // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPvEGameState_C_MC_DetermineScoreResults) == 0x000004, "Wrong alignment on BP_AJBPvEGameState_C_MC_DetermineScoreResults");
static_assert(sizeof(BP_AJBPvEGameState_C_MC_DetermineScoreResults) == 0x000008, "Wrong size on BP_AJBPvEGameState_C_MC_DetermineScoreResults");
static_assert(offsetof(BP_AJBPvEGameState_C_MC_DetermineScoreResults, BorderGroup) == 0x000000, "Member 'BP_AJBPvEGameState_C_MC_DetermineScoreResults::BorderGroup' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_MC_DetermineScoreResults, Difficulty) == 0x000004, "Member 'BP_AJBPvEGameState_C_MC_DetermineScoreResults::Difficulty' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_MC_DetermineScoreResults, IsIncludingBonus) == 0x000005, "Member 'BP_AJBPvEGameState_C_MC_DetermineScoreResults::IsIncludingBonus' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.DetermineScoreResults
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBPvEGameState_C_DetermineScoreResults final
{
public:
	int32                                         BorderGroup;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            Difficulty;                                        // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsIncludingBonus;                                  // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPvEGameState_C_DetermineScoreResults) == 0x000004, "Wrong alignment on BP_AJBPvEGameState_C_DetermineScoreResults");
static_assert(sizeof(BP_AJBPvEGameState_C_DetermineScoreResults) == 0x000008, "Wrong size on BP_AJBPvEGameState_C_DetermineScoreResults");
static_assert(offsetof(BP_AJBPvEGameState_C_DetermineScoreResults, BorderGroup) == 0x000000, "Member 'BP_AJBPvEGameState_C_DetermineScoreResults::BorderGroup' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_DetermineScoreResults, Difficulty) == 0x000004, "Member 'BP_AJBPvEGameState_C_DetermineScoreResults::Difficulty' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_DetermineScoreResults, IsIncludingBonus) == 0x000005, "Member 'BP_AJBPvEGameState_C_DetermineScoreResults::IsIncludingBonus' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.OnEndWave
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBPvEGameState_C_OnEndWave final
{
public:
	int32                                         WaveIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaveDuration;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPvEGameState_C_OnEndWave) == 0x000004, "Wrong alignment on BP_AJBPvEGameState_C_OnEndWave");
static_assert(sizeof(BP_AJBPvEGameState_C_OnEndWave) == 0x000008, "Wrong size on BP_AJBPvEGameState_C_OnEndWave");
static_assert(offsetof(BP_AJBPvEGameState_C_OnEndWave, WaveIndex) == 0x000000, "Member 'BP_AJBPvEGameState_C_OnEndWave::WaveIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_OnEndWave, WaveDuration) == 0x000004, "Member 'BP_AJBPvEGameState_C_OnEndWave::WaveDuration' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.MC_SyncNPCMatchingInfo
// 0x0098 (0x0098 - 0x0000)
struct BP_AJBPvEGameState_C_MC_SyncNPCMatchingInfo final
{
public:
	class FString                                 PlayerID;                                          // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)
	struct FMatchingPlayerInfo                    PlayerInfo;                                        // 0x0010(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_AJBPvEGameState_C_MC_SyncNPCMatchingInfo) == 0x000008, "Wrong alignment on BP_AJBPvEGameState_C_MC_SyncNPCMatchingInfo");
static_assert(sizeof(BP_AJBPvEGameState_C_MC_SyncNPCMatchingInfo) == 0x000098, "Wrong size on BP_AJBPvEGameState_C_MC_SyncNPCMatchingInfo");
static_assert(offsetof(BP_AJBPvEGameState_C_MC_SyncNPCMatchingInfo, PlayerID) == 0x000000, "Member 'BP_AJBPvEGameState_C_MC_SyncNPCMatchingInfo::PlayerID' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_MC_SyncNPCMatchingInfo, PlayerInfo) == 0x000010, "Member 'BP_AJBPvEGameState_C_MC_SyncNPCMatchingInfo::PlayerInfo' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.MC_OnRetiredCountChanged
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBPvEGameState_C_MC_OnRetiredCountChanged final
{
public:
	int32                                         OldRetiredCount;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewRetiredCount;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPvEGameState_C_MC_OnRetiredCountChanged) == 0x000004, "Wrong alignment on BP_AJBPvEGameState_C_MC_OnRetiredCountChanged");
static_assert(sizeof(BP_AJBPvEGameState_C_MC_OnRetiredCountChanged) == 0x000008, "Wrong size on BP_AJBPvEGameState_C_MC_OnRetiredCountChanged");
static_assert(offsetof(BP_AJBPvEGameState_C_MC_OnRetiredCountChanged, OldRetiredCount) == 0x000000, "Member 'BP_AJBPvEGameState_C_MC_OnRetiredCountChanged::OldRetiredCount' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_MC_OnRetiredCountChanged, NewRetiredCount) == 0x000004, "Member 'BP_AJBPvEGameState_C_MC_OnRetiredCountChanged::NewRetiredCount' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.MC_OnKillCountChanged
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBPvEGameState_C_MC_OnKillCountChanged final
{
public:
	int32                                         OldKillCount;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewKillCount;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPvEGameState_C_MC_OnKillCountChanged) == 0x000004, "Wrong alignment on BP_AJBPvEGameState_C_MC_OnKillCountChanged");
static_assert(sizeof(BP_AJBPvEGameState_C_MC_OnKillCountChanged) == 0x000008, "Wrong size on BP_AJBPvEGameState_C_MC_OnKillCountChanged");
static_assert(offsetof(BP_AJBPvEGameState_C_MC_OnKillCountChanged, OldKillCount) == 0x000000, "Member 'BP_AJBPvEGameState_C_MC_OnKillCountChanged::OldKillCount' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_MC_OnKillCountChanged, NewKillCount) == 0x000004, "Member 'BP_AJBPvEGameState_C_MC_OnKillCountChanged::NewKillCount' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.MC_OnKillScoreChanged
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBPvEGameState_C_MC_OnKillScoreChanged final
{
public:
	int32                                         OldScore;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewScore;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPvEGameState_C_MC_OnKillScoreChanged) == 0x000004, "Wrong alignment on BP_AJBPvEGameState_C_MC_OnKillScoreChanged");
static_assert(sizeof(BP_AJBPvEGameState_C_MC_OnKillScoreChanged) == 0x000008, "Wrong size on BP_AJBPvEGameState_C_MC_OnKillScoreChanged");
static_assert(offsetof(BP_AJBPvEGameState_C_MC_OnKillScoreChanged, OldScore) == 0x000000, "Member 'BP_AJBPvEGameState_C_MC_OnKillScoreChanged::OldScore' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_MC_OnKillScoreChanged, NewScore) == 0x000004, "Member 'BP_AJBPvEGameState_C_MC_OnKillScoreChanged::NewScore' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.GetMobKillScore
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBPvEGameState_C_GetMobKillScore final
{
public:
	int32                                         Score;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPvEGameState_C_GetMobKillScore) == 0x000004, "Wrong alignment on BP_AJBPvEGameState_C_GetMobKillScore");
static_assert(sizeof(BP_AJBPvEGameState_C_GetMobKillScore) == 0x000004, "Wrong size on BP_AJBPvEGameState_C_GetMobKillScore");
static_assert(offsetof(BP_AJBPvEGameState_C_GetMobKillScore, Score) == 0x000000, "Member 'BP_AJBPvEGameState_C_GetMobKillScore::Score' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.SetMobKillScore
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBPvEGameState_C_SetMobKillScore final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTotalKillScore_Score;                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTotalKillScore_Score1;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_wildcard_Variable;                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPvEGameState_C_SetMobKillScore) == 0x000004, "Wrong alignment on BP_AJBPvEGameState_C_SetMobKillScore");
static_assert(sizeof(BP_AJBPvEGameState_C_SetMobKillScore) == 0x000010, "Wrong size on BP_AJBPvEGameState_C_SetMobKillScore");
static_assert(offsetof(BP_AJBPvEGameState_C_SetMobKillScore, Value) == 0x000000, "Member 'BP_AJBPvEGameState_C_SetMobKillScore::Value' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_SetMobKillScore, CallFunc_GetTotalKillScore_Score) == 0x000004, "Member 'BP_AJBPvEGameState_C_SetMobKillScore::CallFunc_GetTotalKillScore_Score' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_SetMobKillScore, CallFunc_GetTotalKillScore_Score1) == 0x000008, "Member 'BP_AJBPvEGameState_C_SetMobKillScore::CallFunc_GetTotalKillScore_Score1' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_SetMobKillScore, Temp_wildcard_Variable) == 0x00000C, "Member 'BP_AJBPvEGameState_C_SetMobKillScore::Temp_wildcard_Variable' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.AddMobKillScore
// 0x000C (0x000C - 0x0000)
struct BP_AJBPvEGameState_C_AddMobKillScore final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMobKillScore_Score;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPvEGameState_C_AddMobKillScore) == 0x000004, "Wrong alignment on BP_AJBPvEGameState_C_AddMobKillScore");
static_assert(sizeof(BP_AJBPvEGameState_C_AddMobKillScore) == 0x00000C, "Wrong size on BP_AJBPvEGameState_C_AddMobKillScore");
static_assert(offsetof(BP_AJBPvEGameState_C_AddMobKillScore, Value) == 0x000000, "Member 'BP_AJBPvEGameState_C_AddMobKillScore::Value' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_AddMobKillScore, CallFunc_GetMobKillScore_Score) == 0x000004, "Member 'BP_AJBPvEGameState_C_AddMobKillScore::CallFunc_GetMobKillScore_Score' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_AddMobKillScore, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_AJBPvEGameState_C_AddMobKillScore::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.GiveRewardOnWaveCleared
// 0x0080 (0x0080 - 0x0000)
struct BP_AJBPvEGameState_C_GiveRewardOnWaveCleared final
{
public:
	int32                                         WaveIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBInGameHUD_BP_bSuccess;              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameHUD_C*                     CallFunc_GetAJBInGameHUD_BP_In_Game_HUD;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeLiteralFloat_ReturnValue;             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class APlayerController*>              CallFunc_GetJoinPlayerControllers_OutPlayerControllers; // 0x0028(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGamePlayerController_C*        K2Node_DynamicCast_AsBP_AJBIn_Game_Player_Controller; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameCharacter_C*               CallFunc_GetAJBCharacter_CharacterBP;              // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBCharacter_bSuccess;                 // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AJBGameplayTagOwnerInterface_C> CallFunc_AddGameplayTagWithFloat_self_CastInput; // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPvEGameState_C_GiveRewardOnWaveCleared) == 0x000008, "Wrong alignment on BP_AJBPvEGameState_C_GiveRewardOnWaveCleared");
static_assert(sizeof(BP_AJBPvEGameState_C_GiveRewardOnWaveCleared) == 0x000080, "Wrong size on BP_AJBPvEGameState_C_GiveRewardOnWaveCleared");
static_assert(offsetof(BP_AJBPvEGameState_C_GiveRewardOnWaveCleared, WaveIndex) == 0x000000, "Member 'BP_AJBPvEGameState_C_GiveRewardOnWaveCleared::WaveIndex' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GiveRewardOnWaveCleared, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_AJBPvEGameState_C_GiveRewardOnWaveCleared::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GiveRewardOnWaveCleared, CallFunc_GetAJBInGameHUD_BP_bSuccess) == 0x000008, "Member 'BP_AJBPvEGameState_C_GiveRewardOnWaveCleared::CallFunc_GetAJBInGameHUD_BP_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GiveRewardOnWaveCleared, CallFunc_GetAJBInGameHUD_BP_In_Game_HUD) == 0x000010, "Member 'BP_AJBPvEGameState_C_GiveRewardOnWaveCleared::CallFunc_GetAJBInGameHUD_BP_In_Game_HUD' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GiveRewardOnWaveCleared, CallFunc_MakeLiteralFloat_ReturnValue) == 0x000018, "Member 'BP_AJBPvEGameState_C_GiveRewardOnWaveCleared::CallFunc_MakeLiteralFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GiveRewardOnWaveCleared, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'BP_AJBPvEGameState_C_GiveRewardOnWaveCleared::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GiveRewardOnWaveCleared, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000020, "Member 'BP_AJBPvEGameState_C_GiveRewardOnWaveCleared::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GiveRewardOnWaveCleared, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'BP_AJBPvEGameState_C_GiveRewardOnWaveCleared::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GiveRewardOnWaveCleared, CallFunc_GetJoinPlayerControllers_OutPlayerControllers) == 0x000028, "Member 'BP_AJBPvEGameState_C_GiveRewardOnWaveCleared::CallFunc_GetJoinPlayerControllers_OutPlayerControllers' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GiveRewardOnWaveCleared, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BP_AJBPvEGameState_C_GiveRewardOnWaveCleared::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GiveRewardOnWaveCleared, CallFunc_Array_Get_Item) == 0x000040, "Member 'BP_AJBPvEGameState_C_GiveRewardOnWaveCleared::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GiveRewardOnWaveCleared, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'BP_AJBPvEGameState_C_GiveRewardOnWaveCleared::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GiveRewardOnWaveCleared, K2Node_DynamicCast_AsBP_AJBIn_Game_Player_Controller) == 0x000050, "Member 'BP_AJBPvEGameState_C_GiveRewardOnWaveCleared::K2Node_DynamicCast_AsBP_AJBIn_Game_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GiveRewardOnWaveCleared, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'BP_AJBPvEGameState_C_GiveRewardOnWaveCleared::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GiveRewardOnWaveCleared, CallFunc_GetAJBCharacter_CharacterBP) == 0x000060, "Member 'BP_AJBPvEGameState_C_GiveRewardOnWaveCleared::CallFunc_GetAJBCharacter_CharacterBP' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GiveRewardOnWaveCleared, CallFunc_GetAJBCharacter_bSuccess) == 0x000068, "Member 'BP_AJBPvEGameState_C_GiveRewardOnWaveCleared::CallFunc_GetAJBCharacter_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GiveRewardOnWaveCleared, CallFunc_AddGameplayTagWithFloat_self_CastInput) == 0x000070, "Member 'BP_AJBPvEGameState_C_GiveRewardOnWaveCleared::CallFunc_AddGameplayTagWithFloat_self_CastInput' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.GetMobKillCount
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBPvEGameState_C_GetMobKillCount final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPvEGameState_C_GetMobKillCount) == 0x000004, "Wrong alignment on BP_AJBPvEGameState_C_GetMobKillCount");
static_assert(sizeof(BP_AJBPvEGameState_C_GetMobKillCount) == 0x000004, "Wrong size on BP_AJBPvEGameState_C_GetMobKillCount");
static_assert(offsetof(BP_AJBPvEGameState_C_GetMobKillCount, Count) == 0x000000, "Member 'BP_AJBPvEGameState_C_GetMobKillCount::Count' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.SetMobKillCount
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBPvEGameState_C_SetMobKillCount final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTotalKillCount_Count;                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTotalKillCount_Count1;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_wildcard_Variable;                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPvEGameState_C_SetMobKillCount) == 0x000004, "Wrong alignment on BP_AJBPvEGameState_C_SetMobKillCount");
static_assert(sizeof(BP_AJBPvEGameState_C_SetMobKillCount) == 0x000010, "Wrong size on BP_AJBPvEGameState_C_SetMobKillCount");
static_assert(offsetof(BP_AJBPvEGameState_C_SetMobKillCount, Value) == 0x000000, "Member 'BP_AJBPvEGameState_C_SetMobKillCount::Value' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_SetMobKillCount, CallFunc_GetTotalKillCount_Count) == 0x000004, "Member 'BP_AJBPvEGameState_C_SetMobKillCount::CallFunc_GetTotalKillCount_Count' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_SetMobKillCount, CallFunc_GetTotalKillCount_Count1) == 0x000008, "Member 'BP_AJBPvEGameState_C_SetMobKillCount::CallFunc_GetTotalKillCount_Count1' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_SetMobKillCount, Temp_wildcard_Variable) == 0x00000C, "Member 'BP_AJBPvEGameState_C_SetMobKillCount::Temp_wildcard_Variable' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.AddMobKillCount
// 0x000C (0x000C - 0x0000)
struct BP_AJBPvEGameState_C_AddMobKillCount final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMobKillCount_Count;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPvEGameState_C_AddMobKillCount) == 0x000004, "Wrong alignment on BP_AJBPvEGameState_C_AddMobKillCount");
static_assert(sizeof(BP_AJBPvEGameState_C_AddMobKillCount) == 0x00000C, "Wrong size on BP_AJBPvEGameState_C_AddMobKillCount");
static_assert(offsetof(BP_AJBPvEGameState_C_AddMobKillCount, Value) == 0x000000, "Member 'BP_AJBPvEGameState_C_AddMobKillCount::Value' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_AddMobKillCount, CallFunc_GetMobKillCount_Count) == 0x000004, "Member 'BP_AJBPvEGameState_C_AddMobKillCount::CallFunc_GetMobKillCount_Count' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_AddMobKillCount, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_AJBPvEGameState_C_AddMobKillCount::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.GetRetiredCount
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBPvEGameState_C_GetRetiredCount final
{
public:
	int32                                         TotalRetiredCount;                                 // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPvEGameState_C_GetRetiredCount) == 0x000004, "Wrong alignment on BP_AJBPvEGameState_C_GetRetiredCount");
static_assert(sizeof(BP_AJBPvEGameState_C_GetRetiredCount) == 0x000004, "Wrong size on BP_AJBPvEGameState_C_GetRetiredCount");
static_assert(offsetof(BP_AJBPvEGameState_C_GetRetiredCount, TotalRetiredCount) == 0x000000, "Member 'BP_AJBPvEGameState_C_GetRetiredCount::TotalRetiredCount' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.SetRetiredCount
// 0x000C (0x000C - 0x0000)
struct BP_AJBPvEGameState_C_SetRetiredCount final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetRetiredCount_TotalRetiredCount;        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_wildcard_Variable;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPvEGameState_C_SetRetiredCount) == 0x000004, "Wrong alignment on BP_AJBPvEGameState_C_SetRetiredCount");
static_assert(sizeof(BP_AJBPvEGameState_C_SetRetiredCount) == 0x00000C, "Wrong size on BP_AJBPvEGameState_C_SetRetiredCount");
static_assert(offsetof(BP_AJBPvEGameState_C_SetRetiredCount, Value) == 0x000000, "Member 'BP_AJBPvEGameState_C_SetRetiredCount::Value' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_SetRetiredCount, CallFunc_GetRetiredCount_TotalRetiredCount) == 0x000004, "Member 'BP_AJBPvEGameState_C_SetRetiredCount::CallFunc_GetRetiredCount_TotalRetiredCount' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_SetRetiredCount, Temp_wildcard_Variable) == 0x000008, "Member 'BP_AJBPvEGameState_C_SetRetiredCount::Temp_wildcard_Variable' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.AddRetiredCount
// 0x000C (0x000C - 0x0000)
struct BP_AJBPvEGameState_C_AddRetiredCount final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetRetiredCount_TotalRetiredCount;        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPvEGameState_C_AddRetiredCount) == 0x000004, "Wrong alignment on BP_AJBPvEGameState_C_AddRetiredCount");
static_assert(sizeof(BP_AJBPvEGameState_C_AddRetiredCount) == 0x00000C, "Wrong size on BP_AJBPvEGameState_C_AddRetiredCount");
static_assert(offsetof(BP_AJBPvEGameState_C_AddRetiredCount, Value) == 0x000000, "Member 'BP_AJBPvEGameState_C_AddRetiredCount::Value' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_AddRetiredCount, CallFunc_GetRetiredCount_TotalRetiredCount) == 0x000004, "Member 'BP_AJBPvEGameState_C_AddRetiredCount::CallFunc_GetRetiredCount_TotalRetiredCount' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_AddRetiredCount, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_AJBPvEGameState_C_AddRetiredCount::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.GetScoreResults
// 0x008C (0x008C - 0x0000)
struct BP_AJBPvEGameState_C_GetScoreResults final
{
public:
	int32                                         BorderGroup;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            Difficulty;                                        // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsIncludingBonus;                                  // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_AJBPvEScoreResult                  ScoreResults;                                      // 0x0008(0x0020)(Parm, OutParm, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetRetiredBonusScore_BonusScore;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsShipping_ReturnValue;                   // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTotalKillScore_Score;                  // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetScoreRank_ScoreRank;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetBossKillCount_Count;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMobKillScore_Score;                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetBossKillScore_Score;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable1;                               // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetRetiredCount_TotalRetiredCount;        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMobKillCount_Count;                    // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select1_Default;                            // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_AJBPvEScoreResult                  K2Node_MakeStruct_ST_AJBPvEScoreResult;            // 0x006C(0x0020)(HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPvEGameState_C_GetScoreResults) == 0x000004, "Wrong alignment on BP_AJBPvEGameState_C_GetScoreResults");
static_assert(sizeof(BP_AJBPvEGameState_C_GetScoreResults) == 0x00008C, "Wrong size on BP_AJBPvEGameState_C_GetScoreResults");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreResults, BorderGroup) == 0x000000, "Member 'BP_AJBPvEGameState_C_GetScoreResults::BorderGroup' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreResults, Difficulty) == 0x000004, "Member 'BP_AJBPvEGameState_C_GetScoreResults::Difficulty' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreResults, IsIncludingBonus) == 0x000005, "Member 'BP_AJBPvEGameState_C_GetScoreResults::IsIncludingBonus' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreResults, ScoreResults) == 0x000008, "Member 'BP_AJBPvEGameState_C_GetScoreResults::ScoreResults' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreResults, Temp_bool_Variable) == 0x000028, "Member 'BP_AJBPvEGameState_C_GetScoreResults::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreResults, CallFunc_GetRetiredBonusScore_BonusScore) == 0x00002C, "Member 'BP_AJBPvEGameState_C_GetScoreResults::CallFunc_GetRetiredBonusScore_BonusScore' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreResults, Temp_int_Variable) == 0x000030, "Member 'BP_AJBPvEGameState_C_GetScoreResults::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreResults, CallFunc_IsShipping_ReturnValue) == 0x000034, "Member 'BP_AJBPvEGameState_C_GetScoreResults::CallFunc_IsShipping_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreResults, CallFunc_Not_PreBool_ReturnValue) == 0x000035, "Member 'BP_AJBPvEGameState_C_GetScoreResults::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreResults, K2Node_Select_Default) == 0x000038, "Member 'BP_AJBPvEGameState_C_GetScoreResults::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreResults, CallFunc_GetTotalKillScore_Score) == 0x00003C, "Member 'BP_AJBPvEGameState_C_GetScoreResults::CallFunc_GetTotalKillScore_Score' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreResults, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000040, "Member 'BP_AJBPvEGameState_C_GetScoreResults::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreResults, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'BP_AJBPvEGameState_C_GetScoreResults::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreResults, CallFunc_BooleanAND_ReturnValue) == 0x000048, "Member 'BP_AJBPvEGameState_C_GetScoreResults::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreResults, CallFunc_GetScoreRank_ScoreRank) == 0x00004C, "Member 'BP_AJBPvEGameState_C_GetScoreResults::CallFunc_GetScoreRank_ScoreRank' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreResults, CallFunc_GetBossKillCount_Count) == 0x000050, "Member 'BP_AJBPvEGameState_C_GetScoreResults::CallFunc_GetBossKillCount_Count' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreResults, CallFunc_GetMobKillScore_Score) == 0x000054, "Member 'BP_AJBPvEGameState_C_GetScoreResults::CallFunc_GetMobKillScore_Score' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreResults, CallFunc_GetBossKillScore_Score) == 0x000058, "Member 'BP_AJBPvEGameState_C_GetScoreResults::CallFunc_GetBossKillScore_Score' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreResults, Temp_bool_Variable1) == 0x00005C, "Member 'BP_AJBPvEGameState_C_GetScoreResults::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreResults, CallFunc_GetRetiredCount_TotalRetiredCount) == 0x000060, "Member 'BP_AJBPvEGameState_C_GetScoreResults::CallFunc_GetRetiredCount_TotalRetiredCount' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreResults, CallFunc_GetMobKillCount_Count) == 0x000064, "Member 'BP_AJBPvEGameState_C_GetScoreResults::CallFunc_GetMobKillCount_Count' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreResults, K2Node_Select1_Default) == 0x000068, "Member 'BP_AJBPvEGameState_C_GetScoreResults::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreResults, K2Node_MakeStruct_ST_AJBPvEScoreResult) == 0x00006C, "Member 'BP_AJBPvEGameState_C_GetScoreResults::K2Node_MakeStruct_ST_AJBPvEScoreResult' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.GetRetiredBonusScore
// 0x002C (0x002C - 0x0000)
struct BP_AJBPvEGameState_C_GetRetiredBonusScore final
{
public:
	EPvEGameDifficulty                            Difficulty;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BonusScore;                                        // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetRetiredCount_TotalRetiredCount;        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_AJBInGamePvE_ScoreSettings         CallFunc_GetScoreSettings_ScoreSettings;           // 0x000C(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_GetScoreSettings_WasFound;                // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPvEGameState_C_GetRetiredBonusScore) == 0x000004, "Wrong alignment on BP_AJBPvEGameState_C_GetRetiredBonusScore");
static_assert(sizeof(BP_AJBPvEGameState_C_GetRetiredBonusScore) == 0x00002C, "Wrong size on BP_AJBPvEGameState_C_GetRetiredBonusScore");
static_assert(offsetof(BP_AJBPvEGameState_C_GetRetiredBonusScore, Difficulty) == 0x000000, "Member 'BP_AJBPvEGameState_C_GetRetiredBonusScore::Difficulty' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetRetiredBonusScore, BonusScore) == 0x000004, "Member 'BP_AJBPvEGameState_C_GetRetiredBonusScore::BonusScore' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetRetiredBonusScore, CallFunc_GetRetiredCount_TotalRetiredCount) == 0x000008, "Member 'BP_AJBPvEGameState_C_GetRetiredBonusScore::CallFunc_GetRetiredCount_TotalRetiredCount' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetRetiredBonusScore, CallFunc_GetScoreSettings_ScoreSettings) == 0x00000C, "Member 'BP_AJBPvEGameState_C_GetRetiredBonusScore::CallFunc_GetScoreSettings_ScoreSettings' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetRetiredBonusScore, CallFunc_GetScoreSettings_WasFound) == 0x00001C, "Member 'BP_AJBPvEGameState_C_GetRetiredBonusScore::CallFunc_GetScoreSettings_WasFound' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetRetiredBonusScore, CallFunc_Multiply_IntInt_ReturnValue) == 0x000020, "Member 'BP_AJBPvEGameState_C_GetRetiredBonusScore::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetRetiredBonusScore, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'BP_AJBPvEGameState_C_GetRetiredBonusScore::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetRetiredBonusScore, CallFunc_Max_ReturnValue) == 0x000028, "Member 'BP_AJBPvEGameState_C_GetRetiredBonusScore::CallFunc_Max_ReturnValue' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.GetScoreSettings
// 0x002C (0x002C - 0x0000)
struct BP_AJBPvEGameState_C_GetScoreSettings final
{
public:
	EPvEGameDifficulty                            Difficulty;                                        // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_AJBInGamePvE_ScoreSettings         ScoreSettings;                                     // 0x0004(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	bool                                          WasFound;                                          // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_AJBInGamePvE_ScoreSettings         CallFunc_Map_Find_Value;                           // 0x0018(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPvEGameState_C_GetScoreSettings) == 0x000004, "Wrong alignment on BP_AJBPvEGameState_C_GetScoreSettings");
static_assert(sizeof(BP_AJBPvEGameState_C_GetScoreSettings) == 0x00002C, "Wrong size on BP_AJBPvEGameState_C_GetScoreSettings");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreSettings, Difficulty) == 0x000000, "Member 'BP_AJBPvEGameState_C_GetScoreSettings::Difficulty' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreSettings, ScoreSettings) == 0x000004, "Member 'BP_AJBPvEGameState_C_GetScoreSettings::ScoreSettings' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreSettings, WasFound) == 0x000014, "Member 'BP_AJBPvEGameState_C_GetScoreSettings::WasFound' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreSettings, CallFunc_Map_Find_Value) == 0x000018, "Member 'BP_AJBPvEGameState_C_GetScoreSettings::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreSettings, CallFunc_Map_Find_ReturnValue) == 0x000028, "Member 'BP_AJBPvEGameState_C_GetScoreSettings::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.GetKnockDownScoreSetting
// 0x001C (0x001C - 0x0000)
struct BP_AJBPvEGameState_C_GetKnockDownScoreSetting final
{
public:
	EPvEGameDifficulty                            Difficulty;                                        // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         KnockDownScore;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_AJBInGamePvE_ScoreSettings         CallFunc_GetScoreSettings_ScoreSettings;           // 0x0008(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_GetScoreSettings_WasFound;                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPvEGameState_C_GetKnockDownScoreSetting) == 0x000004, "Wrong alignment on BP_AJBPvEGameState_C_GetKnockDownScoreSetting");
static_assert(sizeof(BP_AJBPvEGameState_C_GetKnockDownScoreSetting) == 0x00001C, "Wrong size on BP_AJBPvEGameState_C_GetKnockDownScoreSetting");
static_assert(offsetof(BP_AJBPvEGameState_C_GetKnockDownScoreSetting, Difficulty) == 0x000000, "Member 'BP_AJBPvEGameState_C_GetKnockDownScoreSetting::Difficulty' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetKnockDownScoreSetting, KnockDownScore) == 0x000004, "Member 'BP_AJBPvEGameState_C_GetKnockDownScoreSetting::KnockDownScore' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetKnockDownScoreSetting, CallFunc_GetScoreSettings_ScoreSettings) == 0x000008, "Member 'BP_AJBPvEGameState_C_GetKnockDownScoreSetting::CallFunc_GetScoreSettings_ScoreSettings' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetKnockDownScoreSetting, CallFunc_GetScoreSettings_WasFound) == 0x000018, "Member 'BP_AJBPvEGameState_C_GetKnockDownScoreSetting::CallFunc_GetScoreSettings_WasFound' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.GetScoreRank
// 0x0060 (0x0060 - 0x0000)
struct BP_AJBPvEGameState_C_GetScoreRank final
{
public:
	int32                                         Score;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BorderGroup;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            Difficulty;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ScoreRank;                                         // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_AJBInGamePvE_ScoreRankSettings     CallFunc_GetScoreRankSettings_ScoreRankSettings;   // 0x0014(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_GetScoreRankSettings_WasFound;            // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_ConvertScoreRankSettingsToArray_BorderArray; // 0x0030(0x0010)(ZeroConstructor, ReferenceParm)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue1;             // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue1;         // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPvEGameState_C_GetScoreRank) == 0x000008, "Wrong alignment on BP_AJBPvEGameState_C_GetScoreRank");
static_assert(sizeof(BP_AJBPvEGameState_C_GetScoreRank) == 0x000060, "Wrong size on BP_AJBPvEGameState_C_GetScoreRank");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRank, Score) == 0x000000, "Member 'BP_AJBPvEGameState_C_GetScoreRank::Score' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRank, BorderGroup) == 0x000004, "Member 'BP_AJBPvEGameState_C_GetScoreRank::BorderGroup' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRank, Difficulty) == 0x000008, "Member 'BP_AJBPvEGameState_C_GetScoreRank::Difficulty' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRank, ScoreRank) == 0x00000C, "Member 'BP_AJBPvEGameState_C_GetScoreRank::ScoreRank' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRank, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_AJBPvEGameState_C_GetScoreRank::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRank, CallFunc_GetScoreRankSettings_ScoreRankSettings) == 0x000014, "Member 'BP_AJBPvEGameState_C_GetScoreRank::CallFunc_GetScoreRankSettings_ScoreRankSettings' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRank, CallFunc_GetScoreRankSettings_WasFound) == 0x00002C, "Member 'BP_AJBPvEGameState_C_GetScoreRank::CallFunc_GetScoreRankSettings_WasFound' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRank, CallFunc_ConvertScoreRankSettingsToArray_BorderArray) == 0x000030, "Member 'BP_AJBPvEGameState_C_GetScoreRank::CallFunc_ConvertScoreRankSettingsToArray_BorderArray' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRank, CallFunc_Array_Get_Item) == 0x000040, "Member 'BP_AJBPvEGameState_C_GetScoreRank::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRank, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'BP_AJBPvEGameState_C_GetScoreRank::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRank, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000048, "Member 'BP_AJBPvEGameState_C_GetScoreRank::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRank, CallFunc_Subtract_IntInt_ReturnValue) == 0x00004C, "Member 'BP_AJBPvEGameState_C_GetScoreRank::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRank, CallFunc_Max_ReturnValue) == 0x000050, "Member 'BP_AJBPvEGameState_C_GetScoreRank::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRank, Temp_int_Loop_Counter_Variable) == 0x000054, "Member 'BP_AJBPvEGameState_C_GetScoreRank::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRank, CallFunc_Subtract_IntInt_ReturnValue1) == 0x000058, "Member 'BP_AJBPvEGameState_C_GetScoreRank::CallFunc_Subtract_IntInt_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRank, CallFunc_GreaterEqual_IntInt_ReturnValue1) == 0x00005C, "Member 'BP_AJBPvEGameState_C_GetScoreRank::CallFunc_GreaterEqual_IntInt_ReturnValue1' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.GetScoreRankSettings
// 0x0150 (0x0150 - 0x0000)
struct BP_AJBPvEGameState_C_GetScoreRankSettings final
{
public:
	int32                                         BorderGroup;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            Difficulty;                                        // 0x0004(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_AJBInGamePvE_ScoreRankSettings     ScoreRankSettings;                                 // 0x0008(0x0018)(Parm, OutParm, HasGetValueTypeHash)
	bool                                          WasFound;                                          // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             DT_ScoreRankSettings;                              // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0040(0x0040)(HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0090(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData1;             // 0x00A8(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00E8(0x0010)(ZeroConstructor, ReferenceParm)
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x00F8(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0108(0x0018)()
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_AJBInGamePvE_ScoreRankSettings     CallFunc_GetDataTableRowFromName_OutRow;           // 0x0128(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x014B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPvEGameState_C_GetScoreRankSettings) == 0x000008, "Wrong alignment on BP_AJBPvEGameState_C_GetScoreRankSettings");
static_assert(sizeof(BP_AJBPvEGameState_C_GetScoreRankSettings) == 0x000150, "Wrong size on BP_AJBPvEGameState_C_GetScoreRankSettings");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRankSettings, BorderGroup) == 0x000000, "Member 'BP_AJBPvEGameState_C_GetScoreRankSettings::BorderGroup' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRankSettings, Difficulty) == 0x000004, "Member 'BP_AJBPvEGameState_C_GetScoreRankSettings::Difficulty' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRankSettings, ScoreRankSettings) == 0x000008, "Member 'BP_AJBPvEGameState_C_GetScoreRankSettings::ScoreRankSettings' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRankSettings, WasFound) == 0x000020, "Member 'BP_AJBPvEGameState_C_GetScoreRankSettings::WasFound' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRankSettings, DT_ScoreRankSettings) == 0x000028, "Member 'BP_AJBPvEGameState_C_GetScoreRankSettings::DT_ScoreRankSettings' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRankSettings, Temp_int_Array_Index_Variable) == 0x000030, "Member 'BP_AJBPvEGameState_C_GetScoreRankSettings::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRankSettings, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'BP_AJBPvEGameState_C_GetScoreRankSettings::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRankSettings, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'BP_AJBPvEGameState_C_GetScoreRankSettings::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRankSettings, K2Node_MakeStruct_FormatArgumentData) == 0x000040, "Member 'BP_AJBPvEGameState_C_GetScoreRankSettings::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRankSettings, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000080, "Member 'BP_AJBPvEGameState_C_GetScoreRankSettings::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRankSettings, CallFunc_Conv_StringToText_ReturnValue) == 0x000090, "Member 'BP_AJBPvEGameState_C_GetScoreRankSettings::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRankSettings, K2Node_MakeStruct_FormatArgumentData1) == 0x0000A8, "Member 'BP_AJBPvEGameState_C_GetScoreRankSettings::K2Node_MakeStruct_FormatArgumentData1' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRankSettings, K2Node_MakeArray_Array) == 0x0000E8, "Member 'BP_AJBPvEGameState_C_GetScoreRankSettings::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRankSettings, CallFunc_GetDataTableRowNames_OutRowNames) == 0x0000F8, "Member 'BP_AJBPvEGameState_C_GetScoreRankSettings::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRankSettings, CallFunc_Format_ReturnValue) == 0x000108, "Member 'BP_AJBPvEGameState_C_GetScoreRankSettings::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRankSettings, CallFunc_Array_Get_Item) == 0x000120, "Member 'BP_AJBPvEGameState_C_GetScoreRankSettings::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRankSettings, CallFunc_GetDataTableRowFromName_OutRow) == 0x000128, "Member 'BP_AJBPvEGameState_C_GetScoreRankSettings::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRankSettings, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000140, "Member 'BP_AJBPvEGameState_C_GetScoreRankSettings::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRankSettings, CallFunc_Array_Length_ReturnValue) == 0x000144, "Member 'BP_AJBPvEGameState_C_GetScoreRankSettings::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRankSettings, CallFunc_Less_IntInt_ReturnValue) == 0x000148, "Member 'BP_AJBPvEGameState_C_GetScoreRankSettings::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRankSettings, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000149, "Member 'BP_AJBPvEGameState_C_GetScoreRankSettings::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRankSettings, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00014A, "Member 'BP_AJBPvEGameState_C_GetScoreRankSettings::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRankSettings, CallFunc_BooleanAND_ReturnValue) == 0x00014B, "Member 'BP_AJBPvEGameState_C_GetScoreRankSettings::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.ConvertScoreRankSettingsToArray
// 0x0048 (0x0048 - 0x0000)
struct BP_AJBPvEGameState_C_ConvertScoreRankSettingsToArray final
{
public:
	struct FST_AJBInGamePvE_ScoreRankSettings     ScoreRankSettings;                                 // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	TArray<int32>                                 BorderArray;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor)
	TArray<int32>                                 Ret;                                               // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue1;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue2;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue3;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPvEGameState_C_ConvertScoreRankSettingsToArray) == 0x000008, "Wrong alignment on BP_AJBPvEGameState_C_ConvertScoreRankSettingsToArray");
static_assert(sizeof(BP_AJBPvEGameState_C_ConvertScoreRankSettingsToArray) == 0x000048, "Wrong size on BP_AJBPvEGameState_C_ConvertScoreRankSettingsToArray");
static_assert(offsetof(BP_AJBPvEGameState_C_ConvertScoreRankSettingsToArray, ScoreRankSettings) == 0x000000, "Member 'BP_AJBPvEGameState_C_ConvertScoreRankSettingsToArray::ScoreRankSettings' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ConvertScoreRankSettingsToArray, BorderArray) == 0x000018, "Member 'BP_AJBPvEGameState_C_ConvertScoreRankSettingsToArray::BorderArray' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ConvertScoreRankSettingsToArray, Ret) == 0x000028, "Member 'BP_AJBPvEGameState_C_ConvertScoreRankSettingsToArray::Ret' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ConvertScoreRankSettingsToArray, CallFunc_Array_Add_ReturnValue) == 0x000038, "Member 'BP_AJBPvEGameState_C_ConvertScoreRankSettingsToArray::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ConvertScoreRankSettingsToArray, CallFunc_Array_Add_ReturnValue1) == 0x00003C, "Member 'BP_AJBPvEGameState_C_ConvertScoreRankSettingsToArray::CallFunc_Array_Add_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ConvertScoreRankSettingsToArray, CallFunc_Array_Add_ReturnValue2) == 0x000040, "Member 'BP_AJBPvEGameState_C_ConvertScoreRankSettingsToArray::CallFunc_Array_Add_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_ConvertScoreRankSettingsToArray, CallFunc_Array_Add_ReturnValue3) == 0x000044, "Member 'BP_AJBPvEGameState_C_ConvertScoreRankSettingsToArray::CallFunc_Array_Add_ReturnValue3' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.DetermineScoreRankBorderGroup
// 0x01F8 (0x01F8 - 0x0000)
struct BP_AJBPvEGameState_C_DetermineScoreRankBorderGroup final
{
public:
	int32                                         BorderGroup;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         TempCharacterID;                                   // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0008(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0018(0x0018)()
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAJBCharacterInfo                      CallFunc_GetCharacterInfoByCharaIndex_Out;         // 0x0038(0x00E8)()
	bool                                          CallFunc_GetCharacterInfoByCharaIndex_ReturnValue; // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array1;                           // 0x0128(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue1;                      // 0x0138(0x0018)()
	bool                                          CallFunc_GetAJBGameInstance_bSuccess;              // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBGameInstance_C*                  CallFunc_GetAJBGameInstance_AJB_Game_Instance;     // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLoginPlayer_ReturnValue;                // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatchingPlayerInfo                    CallFunc_TryGetMatchingPlayerInfoByPlayerID_Out;   // 0x0168(0x0088)()
	bool                                          CallFunc_TryGetMatchingPlayerInfoByPlayerID_ReturnValue; // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPvEGameState_C_DetermineScoreRankBorderGroup) == 0x000008, "Wrong alignment on BP_AJBPvEGameState_C_DetermineScoreRankBorderGroup");
static_assert(sizeof(BP_AJBPvEGameState_C_DetermineScoreRankBorderGroup) == 0x0001F8, "Wrong size on BP_AJBPvEGameState_C_DetermineScoreRankBorderGroup");
static_assert(offsetof(BP_AJBPvEGameState_C_DetermineScoreRankBorderGroup, BorderGroup) == 0x000000, "Member 'BP_AJBPvEGameState_C_DetermineScoreRankBorderGroup::BorderGroup' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_DetermineScoreRankBorderGroup, TempCharacterID) == 0x000004, "Member 'BP_AJBPvEGameState_C_DetermineScoreRankBorderGroup::TempCharacterID' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_DetermineScoreRankBorderGroup, K2Node_MakeArray_Array) == 0x000008, "Member 'BP_AJBPvEGameState_C_DetermineScoreRankBorderGroup::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_DetermineScoreRankBorderGroup, CallFunc_Format_ReturnValue) == 0x000018, "Member 'BP_AJBPvEGameState_C_DetermineScoreRankBorderGroup::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_DetermineScoreRankBorderGroup, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000030, "Member 'BP_AJBPvEGameState_C_DetermineScoreRankBorderGroup::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_DetermineScoreRankBorderGroup, CallFunc_GetCharacterInfoByCharaIndex_Out) == 0x000038, "Member 'BP_AJBPvEGameState_C_DetermineScoreRankBorderGroup::CallFunc_GetCharacterInfoByCharaIndex_Out' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_DetermineScoreRankBorderGroup, CallFunc_GetCharacterInfoByCharaIndex_ReturnValue) == 0x000120, "Member 'BP_AJBPvEGameState_C_DetermineScoreRankBorderGroup::CallFunc_GetCharacterInfoByCharaIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_DetermineScoreRankBorderGroup, K2Node_MakeArray_Array1) == 0x000128, "Member 'BP_AJBPvEGameState_C_DetermineScoreRankBorderGroup::K2Node_MakeArray_Array1' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_DetermineScoreRankBorderGroup, CallFunc_Format_ReturnValue1) == 0x000138, "Member 'BP_AJBPvEGameState_C_DetermineScoreRankBorderGroup::CallFunc_Format_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_DetermineScoreRankBorderGroup, CallFunc_GetAJBGameInstance_bSuccess) == 0x000150, "Member 'BP_AJBPvEGameState_C_DetermineScoreRankBorderGroup::CallFunc_GetAJBGameInstance_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_DetermineScoreRankBorderGroup, CallFunc_GetAJBGameInstance_AJB_Game_Instance) == 0x000158, "Member 'BP_AJBPvEGameState_C_DetermineScoreRankBorderGroup::CallFunc_GetAJBGameInstance_AJB_Game_Instance' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_DetermineScoreRankBorderGroup, CallFunc_IsLoginPlayer_ReturnValue) == 0x000160, "Member 'BP_AJBPvEGameState_C_DetermineScoreRankBorderGroup::CallFunc_IsLoginPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_DetermineScoreRankBorderGroup, CallFunc_TryGetMatchingPlayerInfoByPlayerID_Out) == 0x000168, "Member 'BP_AJBPvEGameState_C_DetermineScoreRankBorderGroup::CallFunc_TryGetMatchingPlayerInfoByPlayerID_Out' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_DetermineScoreRankBorderGroup, CallFunc_TryGetMatchingPlayerInfoByPlayerID_ReturnValue) == 0x0001F0, "Member 'BP_AJBPvEGameState_C_DetermineScoreRankBorderGroup::CallFunc_TryGetMatchingPlayerInfoByPlayerID_ReturnValue' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.GetDifficulty
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBPvEGameState_C_GetDifficulty final
{
public:
	EPvEGameDifficulty                            Difficulty;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBGameInstance_bSuccess;              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBGameInstance_C*                  CallFunc_GetAJBGameInstance_AJB_Game_Instance;     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPvEGameState_C_GetDifficulty) == 0x000008, "Wrong alignment on BP_AJBPvEGameState_C_GetDifficulty");
static_assert(sizeof(BP_AJBPvEGameState_C_GetDifficulty) == 0x000010, "Wrong size on BP_AJBPvEGameState_C_GetDifficulty");
static_assert(offsetof(BP_AJBPvEGameState_C_GetDifficulty, Difficulty) == 0x000000, "Member 'BP_AJBPvEGameState_C_GetDifficulty::Difficulty' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetDifficulty, CallFunc_GetAJBGameInstance_bSuccess) == 0x000001, "Member 'BP_AJBPvEGameState_C_GetDifficulty::CallFunc_GetAJBGameInstance_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetDifficulty, CallFunc_GetAJBGameInstance_AJB_Game_Instance) == 0x000008, "Member 'BP_AJBPvEGameState_C_GetDifficulty::CallFunc_GetAJBGameInstance_AJB_Game_Instance' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.GetScoreRankBorderGroup
// 0x000C (0x000C - 0x0000)
struct BP_AJBPvEGameState_C_GetScoreRankBorderGroup final
{
public:
	int32                                         BorderGroup;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_DetermineScoreRankBorderGroup_BorderGroup; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsShipping_ReturnValue;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBPvEGameState_C_GetScoreRankBorderGroup) == 0x000004, "Wrong alignment on BP_AJBPvEGameState_C_GetScoreRankBorderGroup");
static_assert(sizeof(BP_AJBPvEGameState_C_GetScoreRankBorderGroup) == 0x00000C, "Wrong size on BP_AJBPvEGameState_C_GetScoreRankBorderGroup");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRankBorderGroup, BorderGroup) == 0x000000, "Member 'BP_AJBPvEGameState_C_GetScoreRankBorderGroup::BorderGroup' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRankBorderGroup, CallFunc_DetermineScoreRankBorderGroup_BorderGroup) == 0x000004, "Member 'BP_AJBPvEGameState_C_GetScoreRankBorderGroup::CallFunc_DetermineScoreRankBorderGroup_BorderGroup' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRankBorderGroup, CallFunc_IsShipping_ReturnValue) == 0x000008, "Member 'BP_AJBPvEGameState_C_GetScoreRankBorderGroup::CallFunc_IsShipping_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRankBorderGroup, CallFunc_Not_PreBool_ReturnValue) == 0x000009, "Member 'BP_AJBPvEGameState_C_GetScoreRankBorderGroup::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRankBorderGroup, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00000A, "Member 'BP_AJBPvEGameState_C_GetScoreRankBorderGroup::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetScoreRankBorderGroup, CallFunc_BooleanOR_ReturnValue) == 0x00000B, "Member 'BP_AJBPvEGameState_C_GetScoreRankBorderGroup::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.GetBossKillScore
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBPvEGameState_C_GetBossKillScore final
{
public:
	int32                                         Score;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPvEGameState_C_GetBossKillScore) == 0x000004, "Wrong alignment on BP_AJBPvEGameState_C_GetBossKillScore");
static_assert(sizeof(BP_AJBPvEGameState_C_GetBossKillScore) == 0x000004, "Wrong size on BP_AJBPvEGameState_C_GetBossKillScore");
static_assert(offsetof(BP_AJBPvEGameState_C_GetBossKillScore, Score) == 0x000000, "Member 'BP_AJBPvEGameState_C_GetBossKillScore::Score' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.SetBossKillScore
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBPvEGameState_C_SetBossKillScore final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTotalKillScore_Score;                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTotalKillScore_Score1;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_wildcard_Variable;                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPvEGameState_C_SetBossKillScore) == 0x000004, "Wrong alignment on BP_AJBPvEGameState_C_SetBossKillScore");
static_assert(sizeof(BP_AJBPvEGameState_C_SetBossKillScore) == 0x000010, "Wrong size on BP_AJBPvEGameState_C_SetBossKillScore");
static_assert(offsetof(BP_AJBPvEGameState_C_SetBossKillScore, Value) == 0x000000, "Member 'BP_AJBPvEGameState_C_SetBossKillScore::Value' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_SetBossKillScore, CallFunc_GetTotalKillScore_Score) == 0x000004, "Member 'BP_AJBPvEGameState_C_SetBossKillScore::CallFunc_GetTotalKillScore_Score' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_SetBossKillScore, CallFunc_GetTotalKillScore_Score1) == 0x000008, "Member 'BP_AJBPvEGameState_C_SetBossKillScore::CallFunc_GetTotalKillScore_Score1' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_SetBossKillScore, Temp_wildcard_Variable) == 0x00000C, "Member 'BP_AJBPvEGameState_C_SetBossKillScore::Temp_wildcard_Variable' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.AddBossKillScore
// 0x000C (0x000C - 0x0000)
struct BP_AJBPvEGameState_C_AddBossKillScore final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetBossKillScore_Score;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPvEGameState_C_AddBossKillScore) == 0x000004, "Wrong alignment on BP_AJBPvEGameState_C_AddBossKillScore");
static_assert(sizeof(BP_AJBPvEGameState_C_AddBossKillScore) == 0x00000C, "Wrong size on BP_AJBPvEGameState_C_AddBossKillScore");
static_assert(offsetof(BP_AJBPvEGameState_C_AddBossKillScore, Value) == 0x000000, "Member 'BP_AJBPvEGameState_C_AddBossKillScore::Value' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_AddBossKillScore, CallFunc_GetBossKillScore_Score) == 0x000004, "Member 'BP_AJBPvEGameState_C_AddBossKillScore::CallFunc_GetBossKillScore_Score' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_AddBossKillScore, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_AJBPvEGameState_C_AddBossKillScore::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.GetBossKillCount
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBPvEGameState_C_GetBossKillCount final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPvEGameState_C_GetBossKillCount) == 0x000004, "Wrong alignment on BP_AJBPvEGameState_C_GetBossKillCount");
static_assert(sizeof(BP_AJBPvEGameState_C_GetBossKillCount) == 0x000004, "Wrong size on BP_AJBPvEGameState_C_GetBossKillCount");
static_assert(offsetof(BP_AJBPvEGameState_C_GetBossKillCount, Count) == 0x000000, "Member 'BP_AJBPvEGameState_C_GetBossKillCount::Count' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.SetBossKillCount
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBPvEGameState_C_SetBossKillCount final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTotalKillCount_Count;                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTotalKillCount_Count1;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_wildcard_Variable;                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPvEGameState_C_SetBossKillCount) == 0x000004, "Wrong alignment on BP_AJBPvEGameState_C_SetBossKillCount");
static_assert(sizeof(BP_AJBPvEGameState_C_SetBossKillCount) == 0x000010, "Wrong size on BP_AJBPvEGameState_C_SetBossKillCount");
static_assert(offsetof(BP_AJBPvEGameState_C_SetBossKillCount, Value) == 0x000000, "Member 'BP_AJBPvEGameState_C_SetBossKillCount::Value' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_SetBossKillCount, CallFunc_GetTotalKillCount_Count) == 0x000004, "Member 'BP_AJBPvEGameState_C_SetBossKillCount::CallFunc_GetTotalKillCount_Count' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_SetBossKillCount, CallFunc_GetTotalKillCount_Count1) == 0x000008, "Member 'BP_AJBPvEGameState_C_SetBossKillCount::CallFunc_GetTotalKillCount_Count1' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_SetBossKillCount, Temp_wildcard_Variable) == 0x00000C, "Member 'BP_AJBPvEGameState_C_SetBossKillCount::Temp_wildcard_Variable' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.AddBossKillCount
// 0x000C (0x000C - 0x0000)
struct BP_AJBPvEGameState_C_AddBossKillCount final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetBossKillCount_Count;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPvEGameState_C_AddBossKillCount) == 0x000004, "Wrong alignment on BP_AJBPvEGameState_C_AddBossKillCount");
static_assert(sizeof(BP_AJBPvEGameState_C_AddBossKillCount) == 0x00000C, "Wrong size on BP_AJBPvEGameState_C_AddBossKillCount");
static_assert(offsetof(BP_AJBPvEGameState_C_AddBossKillCount, Value) == 0x000000, "Member 'BP_AJBPvEGameState_C_AddBossKillCount::Value' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_AddBossKillCount, CallFunc_GetBossKillCount_Count) == 0x000004, "Member 'BP_AJBPvEGameState_C_AddBossKillCount::CallFunc_GetBossKillCount_Count' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_AddBossKillCount, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_AJBPvEGameState_C_AddBossKillCount::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.GetTotalKillScore
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBPvEGameState_C_GetTotalKillScore final
{
public:
	int32                                         Score;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetBossKillScore_Score;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMobKillScore_Score;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPvEGameState_C_GetTotalKillScore) == 0x000004, "Wrong alignment on BP_AJBPvEGameState_C_GetTotalKillScore");
static_assert(sizeof(BP_AJBPvEGameState_C_GetTotalKillScore) == 0x000010, "Wrong size on BP_AJBPvEGameState_C_GetTotalKillScore");
static_assert(offsetof(BP_AJBPvEGameState_C_GetTotalKillScore, Score) == 0x000000, "Member 'BP_AJBPvEGameState_C_GetTotalKillScore::Score' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetTotalKillScore, CallFunc_GetBossKillScore_Score) == 0x000004, "Member 'BP_AJBPvEGameState_C_GetTotalKillScore::CallFunc_GetBossKillScore_Score' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetTotalKillScore, CallFunc_GetMobKillScore_Score) == 0x000008, "Member 'BP_AJBPvEGameState_C_GetTotalKillScore::CallFunc_GetMobKillScore_Score' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetTotalKillScore, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_AJBPvEGameState_C_GetTotalKillScore::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.GetTotalKillCount
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBPvEGameState_C_GetTotalKillCount final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetBossKillCount_Count;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMobKillCount_Count;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPvEGameState_C_GetTotalKillCount) == 0x000004, "Wrong alignment on BP_AJBPvEGameState_C_GetTotalKillCount");
static_assert(sizeof(BP_AJBPvEGameState_C_GetTotalKillCount) == 0x000010, "Wrong size on BP_AJBPvEGameState_C_GetTotalKillCount");
static_assert(offsetof(BP_AJBPvEGameState_C_GetTotalKillCount, Count) == 0x000000, "Member 'BP_AJBPvEGameState_C_GetTotalKillCount::Count' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetTotalKillCount, CallFunc_GetBossKillCount_Count) == 0x000004, "Member 'BP_AJBPvEGameState_C_GetTotalKillCount::CallFunc_GetBossKillCount_Count' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetTotalKillCount, CallFunc_GetMobKillCount_Count) == 0x000008, "Member 'BP_AJBPvEGameState_C_GetTotalKillCount::CallFunc_GetMobKillCount_Count' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_GetTotalKillCount, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_AJBPvEGameState_C_GetTotalKillCount::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.GetDeterminedScoreResults
// 0x0020 (0x0020 - 0x0000)
struct BP_AJBPvEGameState_C_GetDeterminedScoreResults final
{
public:
	struct FST_AJBPvEScoreResult                  Results;                                           // 0x0000(0x0020)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPvEGameState_C_GetDeterminedScoreResults) == 0x000004, "Wrong alignment on BP_AJBPvEGameState_C_GetDeterminedScoreResults");
static_assert(sizeof(BP_AJBPvEGameState_C_GetDeterminedScoreResults) == 0x000020, "Wrong size on BP_AJBPvEGameState_C_GetDeterminedScoreResults");
static_assert(offsetof(BP_AJBPvEGameState_C_GetDeterminedScoreResults, Results) == 0x000000, "Member 'BP_AJBPvEGameState_C_GetDeterminedScoreResults::Results' has a wrong offset!");

// Function BP_AJBPvEGameState.BP_AJBPvEGameState_C.DetermineAndGetScoreResults
// 0x0048 (0x0048 - 0x0000)
struct BP_AJBPvEGameState_C_DetermineAndGetScoreResults final
{
public:
	int32                                         BorderGroup;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPvEGameDifficulty                            Difficulty;                                        // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsIncludingBonus;                                  // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_AJBPvEScoreResult                  Results;                                           // 0x0008(0x0020)(Parm, OutParm, HasGetValueTypeHash)
	struct FST_AJBPvEScoreResult                  CallFunc_GetDeterminedScoreResults_Results;        // 0x0028(0x0020)(HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBPvEGameState_C_DetermineAndGetScoreResults) == 0x000004, "Wrong alignment on BP_AJBPvEGameState_C_DetermineAndGetScoreResults");
static_assert(sizeof(BP_AJBPvEGameState_C_DetermineAndGetScoreResults) == 0x000048, "Wrong size on BP_AJBPvEGameState_C_DetermineAndGetScoreResults");
static_assert(offsetof(BP_AJBPvEGameState_C_DetermineAndGetScoreResults, BorderGroup) == 0x000000, "Member 'BP_AJBPvEGameState_C_DetermineAndGetScoreResults::BorderGroup' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_DetermineAndGetScoreResults, Difficulty) == 0x000004, "Member 'BP_AJBPvEGameState_C_DetermineAndGetScoreResults::Difficulty' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_DetermineAndGetScoreResults, IsIncludingBonus) == 0x000005, "Member 'BP_AJBPvEGameState_C_DetermineAndGetScoreResults::IsIncludingBonus' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_DetermineAndGetScoreResults, Results) == 0x000008, "Member 'BP_AJBPvEGameState_C_DetermineAndGetScoreResults::Results' has a wrong offset!");
static_assert(offsetof(BP_AJBPvEGameState_C_DetermineAndGetScoreResults, CallFunc_GetDeterminedScoreResults_Results) == 0x000028, "Member 'BP_AJBPvEGameState_C_DetermineAndGetScoreResults::CallFunc_GetDeterminedScoreResults_Results' has a wrong offset!");

}

