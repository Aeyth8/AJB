#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_AJBMoveForRandomDirection

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTT_AJBMoveForRandomDirection.BTT_AJBMoveForRandomDirection_C
// 0x0038 (0x00D8 - 0x00A0)
class UBTT_AJBMoveForRandomDirection_C final : public UBTTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(Transient, DuplicateTransient)
	struct FBlackboardKeySelector                 InputDirectionKey;                                 // 0x00A8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly)
	float                                         Duration;                                          // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BTT_AJBMoveForRandomDirection(int32 EntryPoint);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTT_AJBMoveForRandomDirection_C">();
	}
	static class UBTT_AJBMoveForRandomDirection_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTT_AJBMoveForRandomDirection_C>();
	}
};
static_assert(alignof(UBTT_AJBMoveForRandomDirection_C) == 0x000008, "Wrong alignment on UBTT_AJBMoveForRandomDirection_C");
static_assert(sizeof(UBTT_AJBMoveForRandomDirection_C) == 0x0000D8, "Wrong size on UBTT_AJBMoveForRandomDirection_C");
static_assert(offsetof(UBTT_AJBMoveForRandomDirection_C, UberGraphFrame) == 0x0000A0, "Member 'UBTT_AJBMoveForRandomDirection_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTT_AJBMoveForRandomDirection_C, InputDirectionKey) == 0x0000A8, "Member 'UBTT_AJBMoveForRandomDirection_C::InputDirectionKey' has a wrong offset!");
static_assert(offsetof(UBTT_AJBMoveForRandomDirection_C, Duration) == 0x0000D0, "Member 'UBTT_AJBMoveForRandomDirection_C::Duration' has a wrong offset!");
static_assert(offsetof(UBTT_AJBMoveForRandomDirection_C, Distance) == 0x0000D4, "Member 'UBTT_AJBMoveForRandomDirection_C::Distance' has a wrong offset!");

}

