#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AMActivatorPlugin

#include "Basic.hpp"

#include "AMActivatorPlugin_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function AMActivatorPlugin.AMActivationFunctionLibrary.GetOneTimeKey
// 0x0004 (0x0004 - 0x0000)
struct AMActivationFunctionLibrary_GetOneTimeKey final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AMActivationFunctionLibrary_GetOneTimeKey) == 0x000004, "Wrong alignment on AMActivationFunctionLibrary_GetOneTimeKey");
static_assert(sizeof(AMActivationFunctionLibrary_GetOneTimeKey) == 0x000004, "Wrong size on AMActivationFunctionLibrary_GetOneTimeKey");
static_assert(offsetof(AMActivationFunctionLibrary_GetOneTimeKey, ReturnValue) == 0x000000, "Member 'AMActivationFunctionLibrary_GetOneTimeKey::ReturnValue' has a wrong offset!");

// Function AMActivatorPlugin.AMActivationFunctionLibrary.GetOneTimeKeyExpiration
// 0x0008 (0x0008 - 0x0000)
struct AMActivationFunctionLibrary_GetOneTimeKeyExpiration final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AMActivationFunctionLibrary_GetOneTimeKeyExpiration) == 0x000008, "Wrong alignment on AMActivationFunctionLibrary_GetOneTimeKeyExpiration");
static_assert(sizeof(AMActivationFunctionLibrary_GetOneTimeKeyExpiration) == 0x000008, "Wrong size on AMActivationFunctionLibrary_GetOneTimeKeyExpiration");
static_assert(offsetof(AMActivationFunctionLibrary_GetOneTimeKeyExpiration, ReturnValue) == 0x000000, "Member 'AMActivationFunctionLibrary_GetOneTimeKeyExpiration::ReturnValue' has a wrong offset!");

// Function AMActivatorPlugin.AMActivationFunctionLibrary.GetOneTimeKeyLastStatus
// 0x0001 (0x0001 - 0x0000)
struct AMActivationFunctionLibrary_GetOneTimeKeyLastStatus final
{
public:
	EOnetimeKeyStatus                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AMActivationFunctionLibrary_GetOneTimeKeyLastStatus) == 0x000001, "Wrong alignment on AMActivationFunctionLibrary_GetOneTimeKeyLastStatus");
static_assert(sizeof(AMActivationFunctionLibrary_GetOneTimeKeyLastStatus) == 0x000001, "Wrong size on AMActivationFunctionLibrary_GetOneTimeKeyLastStatus");
static_assert(offsetof(AMActivationFunctionLibrary_GetOneTimeKeyLastStatus, ReturnValue) == 0x000000, "Member 'AMActivationFunctionLibrary_GetOneTimeKeyLastStatus::ReturnValue' has a wrong offset!");

// Function AMActivatorPlugin.AMActivationFunctionLibrary.GetSignatureGeneration
// 0x0004 (0x0004 - 0x0000)
struct AMActivationFunctionLibrary_GetSignatureGeneration final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AMActivationFunctionLibrary_GetSignatureGeneration) == 0x000004, "Wrong alignment on AMActivationFunctionLibrary_GetSignatureGeneration");
static_assert(sizeof(AMActivationFunctionLibrary_GetSignatureGeneration) == 0x000004, "Wrong size on AMActivationFunctionLibrary_GetSignatureGeneration");
static_assert(offsetof(AMActivationFunctionLibrary_GetSignatureGeneration, ReturnValue) == 0x000000, "Member 'AMActivationFunctionLibrary_GetSignatureGeneration::ReturnValue' has a wrong offset!");

// Function AMActivatorPlugin.AMActivationFunctionLibrary.GetSignatureLastStatus
// 0x0001 (0x0001 - 0x0000)
struct AMActivationFunctionLibrary_GetSignatureLastStatus final
{
public:
	ESignatureStatus                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AMActivationFunctionLibrary_GetSignatureLastStatus) == 0x000001, "Wrong alignment on AMActivationFunctionLibrary_GetSignatureLastStatus");
static_assert(sizeof(AMActivationFunctionLibrary_GetSignatureLastStatus) == 0x000001, "Wrong size on AMActivationFunctionLibrary_GetSignatureLastStatus");
static_assert(offsetof(AMActivationFunctionLibrary_GetSignatureLastStatus, ReturnValue) == 0x000000, "Member 'AMActivationFunctionLibrary_GetSignatureLastStatus::ReturnValue' has a wrong offset!");

// Function AMActivatorPlugin.AMActivationFunctionLibrary.initializeAMActivator
// 0x0010 (0x0010 - 0x0000)
struct AMActivationFunctionLibrary_initializeAMActivator final
{
public:
	class FString                                 serial;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AMActivationFunctionLibrary_initializeAMActivator) == 0x000008, "Wrong alignment on AMActivationFunctionLibrary_initializeAMActivator");
static_assert(sizeof(AMActivationFunctionLibrary_initializeAMActivator) == 0x000010, "Wrong size on AMActivationFunctionLibrary_initializeAMActivator");
static_assert(offsetof(AMActivationFunctionLibrary_initializeAMActivator, serial) == 0x000000, "Member 'AMActivationFunctionLibrary_initializeAMActivator::serial' has a wrong offset!");

// Function AMActivatorPlugin.AMActivationFunctionLibrary.IsBusy
// 0x0001 (0x0001 - 0x0000)
struct AMActivationFunctionLibrary_IsBusy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AMActivationFunctionLibrary_IsBusy) == 0x000001, "Wrong alignment on AMActivationFunctionLibrary_IsBusy");
static_assert(sizeof(AMActivationFunctionLibrary_IsBusy) == 0x000001, "Wrong size on AMActivationFunctionLibrary_IsBusy");
static_assert(offsetof(AMActivationFunctionLibrary_IsBusy, ReturnValue) == 0x000000, "Member 'AMActivationFunctionLibrary_IsBusy::ReturnValue' has a wrong offset!");

// Function AMActivatorPlugin.AMActivationFunctionLibrary.Lock
// 0x0001 (0x0001 - 0x0000)
struct AMActivationFunctionLibrary_Lock final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AMActivationFunctionLibrary_Lock) == 0x000001, "Wrong alignment on AMActivationFunctionLibrary_Lock");
static_assert(sizeof(AMActivationFunctionLibrary_Lock) == 0x000001, "Wrong size on AMActivationFunctionLibrary_Lock");
static_assert(offsetof(AMActivationFunctionLibrary_Lock, ReturnValue) == 0x000000, "Member 'AMActivationFunctionLibrary_Lock::ReturnValue' has a wrong offset!");

// Function AMActivatorPlugin.AMActivationFunctionLibrary.RequestOneTimeKey
// 0x0001 (0x0001 - 0x0000)
struct AMActivationFunctionLibrary_RequestOneTimeKey final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AMActivationFunctionLibrary_RequestOneTimeKey) == 0x000001, "Wrong alignment on AMActivationFunctionLibrary_RequestOneTimeKey");
static_assert(sizeof(AMActivationFunctionLibrary_RequestOneTimeKey) == 0x000001, "Wrong size on AMActivationFunctionLibrary_RequestOneTimeKey");
static_assert(offsetof(AMActivationFunctionLibrary_RequestOneTimeKey, ReturnValue) == 0x000000, "Member 'AMActivationFunctionLibrary_RequestOneTimeKey::ReturnValue' has a wrong offset!");

// Function AMActivatorPlugin.AMActivationFunctionLibrary.RequestSignature
// 0x0001 (0x0001 - 0x0000)
struct AMActivationFunctionLibrary_RequestSignature final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AMActivationFunctionLibrary_RequestSignature) == 0x000001, "Wrong alignment on AMActivationFunctionLibrary_RequestSignature");
static_assert(sizeof(AMActivationFunctionLibrary_RequestSignature) == 0x000001, "Wrong size on AMActivationFunctionLibrary_RequestSignature");
static_assert(offsetof(AMActivationFunctionLibrary_RequestSignature, ReturnValue) == 0x000000, "Member 'AMActivationFunctionLibrary_RequestSignature::ReturnValue' has a wrong offset!");

// Function AMActivatorPlugin.AMActivationFunctionLibrary.Restore
// 0x0001 (0x0001 - 0x0000)
struct AMActivationFunctionLibrary_Restore final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AMActivationFunctionLibrary_Restore) == 0x000001, "Wrong alignment on AMActivationFunctionLibrary_Restore");
static_assert(sizeof(AMActivationFunctionLibrary_Restore) == 0x000001, "Wrong size on AMActivationFunctionLibrary_Restore");
static_assert(offsetof(AMActivationFunctionLibrary_Restore, ReturnValue) == 0x000000, "Member 'AMActivationFunctionLibrary_Restore::ReturnValue' has a wrong offset!");

// Function AMActivatorPlugin.AMActivationFunctionLibrary.UnLock
// 0x0001 (0x0001 - 0x0000)
struct AMActivationFunctionLibrary_UnLock final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AMActivationFunctionLibrary_UnLock) == 0x000001, "Wrong alignment on AMActivationFunctionLibrary_UnLock");
static_assert(sizeof(AMActivationFunctionLibrary_UnLock) == 0x000001, "Wrong size on AMActivationFunctionLibrary_UnLock");
static_assert(offsetof(AMActivationFunctionLibrary_UnLock, ReturnValue) == 0x000000, "Member 'AMActivationFunctionLibrary_UnLock::ReturnValue' has a wrong offset!");

}

