#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBContinuationHealing

#include "Basic.hpp"

#include "BP_AJBContinuationHealing_classes.hpp"
#include "BP_AJBContinuationHealing_parameters.hpp"


namespace SDK
{

// Function BP_AJBContinuationHealing.BP_AJBContinuationHealing_C.ExecuteUbergraph_BP_AJBContinuationHealing
// ()
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBContinuationHealing_C::ExecuteUbergraph_BP_AJBContinuationHealing(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBContinuationHealing_C", "ExecuteUbergraph_BP_AJBContinuationHealing");

	Params::BP_AJBContinuationHealing_C_ExecuteUbergraph_BP_AJBContinuationHealing Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBContinuationHealing.BP_AJBContinuationHealing_C.SetParticleVisibility
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNewVisibility                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBContinuationHealing_C::SetParticleVisibility(bool bNewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBContinuationHealing_C", "SetParticleVisibility");

	Params::BP_AJBContinuationHealing_C_SetParticleVisibility Parms{};

	Parms.bNewVisibility = bNewVisibility;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBContinuationHealing.BP_AJBContinuationHealing_C.OnEffected (Server)
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBContinuationHealing_C::OnEffected__Server_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBContinuationHealing_C", "OnEffected (Server)");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBContinuationHealing.BP_AJBContinuationHealing_C.MC_EndParticle
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void UBP_AJBContinuationHealing_C::MC_EndParticle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBContinuationHealing_C", "MC_EndParticle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBContinuationHealing.BP_AJBContinuationHealing_C.MC_BeginParticle
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void UBP_AJBContinuationHealing_C::MC_BeginParticle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBContinuationHealing_C", "MC_BeginParticle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBContinuationHealing.BP_AJBContinuationHealing_C.MC_OnApplyEffect
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void UBP_AJBContinuationHealing_C::MC_OnApplyEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBContinuationHealing_C", "MC_OnApplyEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBContinuationHealing.BP_AJBContinuationHealing_C.TimerTick
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBContinuationHealing_C::TimerTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBContinuationHealing_C", "TimerTick");

	Params::BP_AJBContinuationHealing_C_TimerTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBContinuationHealing.BP_AJBContinuationHealing_C.GetHealingLimitation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_AJBInGameCharacter_C*         Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  MaxHP                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBContinuationHealing_C::GetHealingLimitation(class ABP_AJBInGameCharacter_C* Target, int32* MaxHP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBContinuationHealing_C", "GetHealingLimitation");

	Params::BP_AJBContinuationHealing_C_GetHealingLimitation Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);

	if (MaxHP != nullptr)
		*MaxHP = Parms.MaxHP;
}


// Function BP_AJBContinuationHealing.BP_AJBContinuationHealing_C.SetRemainingTime
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBContinuationHealing_C::SetRemainingTime(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBContinuationHealing_C", "SetRemainingTime");

	Params::BP_AJBContinuationHealing_C_SetRemainingTime Parms{};

	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBContinuationHealing.BP_AJBContinuationHealing_C.SubRemainingTime
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBContinuationHealing_C::SubRemainingTime(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBContinuationHealing_C", "SubRemainingTime");

	Params::BP_AJBContinuationHealing_C_SubRemainingTime Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBContinuationHealing.BP_AJBContinuationHealing_C.OnActionInactivate
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bTriggeredByStand                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBContinuationHealing_C::OnActionInactivate(bool bTriggeredByStand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBContinuationHealing_C", "OnActionInactivate");

	Params::BP_AJBContinuationHealing_C_OnActionInactivate Parms{};

	Parms.bTriggeredByStand = bTriggeredByStand;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBContinuationHealing.BP_AJBContinuationHealing_C.OnActionActivate
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bTriggeredByStand                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBContinuationHealing_C::OnActionActivate(bool bTriggeredByStand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBContinuationHealing_C", "OnActionActivate");

	Params::BP_AJBContinuationHealing_C_OnActionActivate Parms{};

	Parms.bTriggeredByStand = bTriggeredByStand;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBContinuationHealing.BP_AJBContinuationHealing_C.ChangeParticleVisibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNewVisibility                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBContinuationHealing_C::ChangeParticleVisibility(bool bNewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBContinuationHealing_C", "ChangeParticleVisibility");

	Params::BP_AJBContinuationHealing_C_ChangeParticleVisibility Parms{};

	Parms.bNewVisibility = bNewVisibility;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBContinuationHealing.BP_AJBContinuationHealing_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBContinuationHealing_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBContinuationHealing_C", "ReceiveTick");

	Params::BP_AJBContinuationHealing_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBContinuationHealing.BP_AJBContinuationHealing_C.TryChangeParticleVisibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNewVisibility                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBContinuationHealing_C::TryChangeParticleVisibility(bool bNewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBContinuationHealing_C", "TryChangeParticleVisibility");

	Params::BP_AJBContinuationHealing_C_TryChangeParticleVisibility Parms{};

	Parms.bNewVisibility = bNewVisibility;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBContinuationHealing.BP_AJBContinuationHealing_C.GetIntervalTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float*                                  IntervalTime                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBContinuationHealing_C::GetIntervalTime(float* IntervalTime) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBContinuationHealing_C", "GetIntervalTime");

	Params::BP_AJBContinuationHealing_C_GetIntervalTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IntervalTime != nullptr)
		*IntervalTime = Parms.IntervalTime;
}


// Function BP_AJBContinuationHealing.BP_AJBContinuationHealing_C.GetRemainingTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float*                                  RemainingTime_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBContinuationHealing_C::GetRemainingTime(float* RemainingTime_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBContinuationHealing_C", "GetRemainingTime");

	Params::BP_AJBContinuationHealing_C_GetRemainingTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RemainingTime_0 != nullptr)
		*RemainingTime_0 = Parms.RemainingTime_0;
}

}

