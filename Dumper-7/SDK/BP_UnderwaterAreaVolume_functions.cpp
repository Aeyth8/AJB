#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UnderwaterAreaVolume

#include "Basic.hpp"

#include "BP_UnderwaterAreaVolume_classes.hpp"
#include "BP_UnderwaterAreaVolume_parameters.hpp"


namespace SDK
{

// Function BP_UnderwaterAreaVolume.BP_UnderwaterAreaVolume_C.ExecuteUbergraph_BP_UnderwaterAreaVolume
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UnderwaterAreaVolume_C::ExecuteUbergraph_BP_UnderwaterAreaVolume(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAreaVolume_C", "ExecuteUbergraph_BP_UnderwaterAreaVolume");

	Params::BP_UnderwaterAreaVolume_C_ExecuteUbergraph_BP_UnderwaterAreaVolume Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UnderwaterAreaVolume.BP_UnderwaterAreaVolume_C.SpawnWaterSurfaceSplashEffect
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Owner_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UnderwaterAreaVolume_C::SpawnWaterSurfaceSplashEffect(const struct FVector& Location, class AActor* Owner_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAreaVolume_C", "SpawnWaterSurfaceSplashEffect");

	Params::BP_UnderwaterAreaVolume_C_SpawnWaterSurfaceSplashEffect Parms{};

	Parms.Location = std::move(Location);
	Parms.Owner_0 = Owner_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UnderwaterAreaVolume.BP_UnderwaterAreaVolume_C.OnEndComponentOverlap
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UnderwaterAreaVolume_C::OnEndComponentOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAreaVolume_C", "OnEndComponentOverlap");

	Params::BP_UnderwaterAreaVolume_C_OnEndComponentOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UnderwaterAreaVolume.BP_UnderwaterAreaVolume_C.OnBeginComponentOverlap
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FHitResult&                SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_UnderwaterAreaVolume_C::OnBeginComponentOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAreaVolume_C", "OnBeginComponentOverlap");

	Params::BP_UnderwaterAreaVolume_C_OnBeginComponentOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UnderwaterAreaVolume.BP_UnderwaterAreaVolume_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_UnderwaterAreaVolume_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAreaVolume_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UnderwaterAreaVolume.BP_UnderwaterAreaVolume_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_UnderwaterAreaVolume_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAreaVolume_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UnderwaterAreaVolume.BP_UnderwaterAreaVolume_C.GetWaterSurfaceZ
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float*                                  Z                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UnderwaterAreaVolume_C::GetWaterSurfaceZ(float* Z)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAreaVolume_C", "GetWaterSurfaceZ");

	Params::BP_UnderwaterAreaVolume_C_GetWaterSurfaceZ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Z != nullptr)
		*Z = Parms.Z;
}


// Function BP_UnderwaterAreaVolume.BP_UnderwaterAreaVolume_C.CalcProjectileEffectPosition
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_AJBInGameProjectile_C*        AJBInGame                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Intersection                                           (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UnderwaterAreaVolume_C::CalcProjectileEffectPosition(class ABP_AJBInGameProjectile_C* AJBInGame, struct FVector* Intersection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAreaVolume_C", "CalcProjectileEffectPosition");

	Params::BP_UnderwaterAreaVolume_C_CalcProjectileEffectPosition Parms{};

	Parms.AJBInGame = AJBInGame;

	UObject::ProcessEvent(Func, &Parms);

	if (Intersection != nullptr)
		*Intersection = std::move(Parms.Intersection);
}


// Function BP_UnderwaterAreaVolume.BP_UnderwaterAreaVolume_C.CalcDamageActorEffectPosition
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_AJBDamageActor_C*             AJBInGameDamageActor                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Intersection                                           (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_UnderwaterAreaVolume_C::CalcDamageActorEffectPosition(class ABP_AJBDamageActor_C* AJBInGameDamageActor, struct FVector* Intersection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UnderwaterAreaVolume_C", "CalcDamageActorEffectPosition");

	Params::BP_UnderwaterAreaVolume_C_CalcDamageActorEffectPosition Parms{};

	Parms.AJBInGameDamageActor = AJBInGameDamageActor;

	UObject::ProcessEvent(Func, &Parms);

	if (Intersection != nullptr)
		*Intersection = std::move(Parms.Intersection);
}

}

