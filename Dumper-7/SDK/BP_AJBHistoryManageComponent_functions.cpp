#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBHistoryManageComponent

#include "Basic.hpp"

#include "BP_AJBHistoryManageComponent_classes.hpp"
#include "BP_AJBHistoryManageComponent_parameters.hpp"


namespace SDK
{

// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.ExecuteUbergraph_BP_AJBHistoryManageComponent
// (HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBHistoryManageComponent_C::ExecuteUbergraph_BP_AJBHistoryManageComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBHistoryManageComponent_C", "ExecuteUbergraph_BP_AJBHistoryManageComponent");

	Params::BP_AJBHistoryManageComponent_C_ExecuteUbergraph_BP_AJBHistoryManageComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBHistoryManageComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBHistoryManageComponent_C", "ReceiveTick");

	Params::BP_AJBHistoryManageComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.AddIgnoreDistanceTargetServer
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_AJBInGameCharacter_C*         TargetCharacterBP                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FDateTime&                 AccessedHistoryDateTime                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void UBP_AJBHistoryManageComponent_C::AddIgnoreDistanceTargetServer(class ABP_AJBInGameCharacter_C* TargetCharacterBP, const struct FDateTime& AccessedHistoryDateTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBHistoryManageComponent_C", "AddIgnoreDistanceTargetServer");

	Params::BP_AJBHistoryManageComponent_C_AddIgnoreDistanceTargetServer Parms{};

	Parms.TargetCharacterBP = TargetCharacterBP;
	Parms.AccessedHistoryDateTime = std::move(AccessedHistoryDateTime);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.Check
// (BlueprintCallable, BlueprintEvent)

void UBP_AJBHistoryManageComponent_C::Check()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBHistoryManageComponent_C", "Check");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_AJBHistoryManageComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBHistoryManageComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.NotifyTheWorld
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAJBInGameCharacter*              Operator                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EGeneralTiming                          Timing                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bEnable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bOperatorIsEmpty                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBHistoryManageComponent_C::NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBHistoryManageComponent_C", "NotifyTheWorld");

	Params::BP_AJBHistoryManageComponent_C_NotifyTheWorld Parms{};

	Parms.Operator = Operator;
	Parms.Time = Time;
	Parms.Timing = Timing;
	Parms.bEnable = bEnable;
	Parms.bOperatorIsEmpty = bOperatorIsEmpty;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.OnRelatedCharacterBecomeLastSurvivor
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_AJBHistoryManageComponent_C::OnRelatedCharacterBecomeLastSurvivor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBHistoryManageComponent_C", "OnRelatedCharacterBecomeLastSurvivor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.GetHistoryAfterOnlyExists
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FAJBHistoryInfo>&         Before                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<struct FAJBHistoryInfo>&         After                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<struct FAJBHistoryInfo>*         Result                                                 (Parm, OutParm, ZeroConstructor)

void UBP_AJBHistoryManageComponent_C::GetHistoryAfterOnlyExists(TArray<struct FAJBHistoryInfo>& Before, TArray<struct FAJBHistoryInfo>& After, TArray<struct FAJBHistoryInfo>* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBHistoryManageComponent_C", "GetHistoryAfterOnlyExists");

	Params::BP_AJBHistoryManageComponent_C_GetHistoryAfterOnlyExists Parms{};

	Parms.Before = std::move(Before);
	Parms.After = std::move(After);

	UObject::ProcessEvent(Func, &Parms);

	Before = std::move(Parms.Before);
	After = std::move(Parms.After);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.UpdateHistoryInfo
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_AJBHistoryManageComponent_C::UpdateHistoryInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBHistoryManageComponent_C", "UpdateHistoryInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.UpdateHistoryActors
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_AJBHistoryManageComponent_C::UpdateHistoryActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBHistoryManageComponent_C", "UpdateHistoryActors");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.GetPoliticDistance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float*                                  Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBHistoryManageComponent_C::GetPoliticDistance(float* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBHistoryManageComponent_C", "GetPoliticDistance");

	Params::BP_AJBHistoryManageComponent_C_GetPoliticDistance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.CollectHistoryInfoList
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FAJBHistoryInfo>*         HistoryInfoList                                        (Parm, OutParm, ZeroConstructor)

void UBP_AJBHistoryManageComponent_C::CollectHistoryInfoList(TArray<struct FAJBHistoryInfo>* HistoryInfoList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBHistoryManageComponent_C", "CollectHistoryInfoList");

	Params::BP_AJBHistoryManageComponent_C_CollectHistoryInfoList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HistoryInfoList != nullptr)
		*HistoryInfoList = std::move(Parms.HistoryInfoList);
}


// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.MakeIgnoreDistancePlayerIDList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<int32>*                          List                                                   (Parm, OutParm, ZeroConstructor)

void UBP_AJBHistoryManageComponent_C::MakeIgnoreDistancePlayerIDList(TArray<int32>* List)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBHistoryManageComponent_C", "MakeIgnoreDistancePlayerIDList");

	Params::BP_AJBHistoryManageComponent_C_MakeIgnoreDistancePlayerIDList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (List != nullptr)
		*List = std::move(Parms.List);
}


// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.UpdateHistoryPerPlayerID
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_AJBHistoryManageComponent_C::UpdateHistoryPerPlayerID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBHistoryManageComponent_C", "UpdateHistoryPerPlayerID");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.UpdateHistoryWithPlayerID
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PlayerID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBHistoryManageComponent_C::UpdateHistoryWithPlayerID(int32 PlayerID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBHistoryManageComponent_C", "UpdateHistoryWithPlayerID");

	Params::BP_AJBHistoryManageComponent_C_UpdateHistoryWithPlayerID Parms{};

	Parms.PlayerID = PlayerID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.RemoveTarget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_AJBInGameCharacter_C*         TargetCharacterBP                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBHistoryManageComponent_C::RemoveTarget(class ABP_AJBInGameCharacter_C* TargetCharacterBP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBHistoryManageComponent_C", "RemoveTarget");

	Params::BP_AJBHistoryManageComponent_C_RemoveTarget Parms{};

	Parms.TargetCharacterBP = TargetCharacterBP;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.RemoveTargetByIndex
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBHistoryManageComponent_C::RemoveTargetByIndex(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBHistoryManageComponent_C", "RemoveTargetByIndex");

	Params::BP_AJBHistoryManageComponent_C_RemoveTargetByIndex Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.AddTarget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_AJBInGameCharacter_C*         TargetCharacterBP                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBHistoryManageComponent_C::AddTarget(class ABP_AJBInGameCharacter_C* TargetCharacterBP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBHistoryManageComponent_C", "AddTarget");

	Params::BP_AJBHistoryManageComponent_C_AddTarget Parms{};

	Parms.TargetCharacterBP = TargetCharacterBP;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.UpdateLeftTime
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>*                          RemoveIndexes                                          (Parm, OutParm, ZeroConstructor)

void UBP_AJBHistoryManageComponent_C::UpdateLeftTime(float DeltaSeconds, TArray<int32>* RemoveIndexes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBHistoryManageComponent_C", "UpdateLeftTime");

	Params::BP_AJBHistoryManageComponent_C_UpdateLeftTime Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (RemoveIndexes != nullptr)
		*RemoveIndexes = std::move(Parms.RemoveIndexes);
}


// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.MakeIgnorePlayerIDList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<int32>*                          IgnorePlayerIDList                                     (Parm, OutParm, ZeroConstructor)

void UBP_AJBHistoryManageComponent_C::MakeIgnorePlayerIDList(TArray<int32>* IgnorePlayerIDList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBHistoryManageComponent_C", "MakeIgnorePlayerIDList");

	Params::BP_AJBHistoryManageComponent_C_MakeIgnorePlayerIDList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IgnorePlayerIDList != nullptr)
		*IgnorePlayerIDList = std::move(Parms.IgnorePlayerIDList);
}


// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.CheckIgnoreDistanceLimit
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   bLimit                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBHistoryManageComponent_C::CheckIgnoreDistanceLimit(bool* bLimit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBHistoryManageComponent_C", "CheckIgnoreDistanceLimit");

	Params::BP_AJBHistoryManageComponent_C_CheckIgnoreDistanceLimit Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bLimit != nullptr)
		*bLimit = Parms.bLimit;
}


// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.RemoveMostOldestTarget
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_AJBHistoryManageComponent_C::RemoveMostOldestTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBHistoryManageComponent_C", "RemoveMostOldestTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.ShouldAllRemoveTarget
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   bShouldRemove                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_AJBHistoryManageComponent_C::ShouldAllRemoveTarget(bool* bShouldRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBHistoryManageComponent_C", "ShouldAllRemoveTarget");

	Params::BP_AJBHistoryManageComponent_C_ShouldAllRemoveTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bShouldRemove != nullptr)
		*bShouldRemove = Parms.bShouldRemove;
}


// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.RemoveAllTarget
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_AJBHistoryManageComponent_C::RemoveAllTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBHistoryManageComponent_C", "RemoveAllTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.ShouldSpawn
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bShouldSpawn                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector*                         NewLocation                                            (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBHistoryManageComponent_C::ShouldSpawn(const struct FVector& Location, bool* bShouldSpawn, struct FVector* NewLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBHistoryManageComponent_C", "ShouldSpawn");

	Params::BP_AJBHistoryManageComponent_C_ShouldSpawn Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);

	if (bShouldSpawn != nullptr)
		*bShouldSpawn = Parms.bShouldSpawn;

	if (NewLocation != nullptr)
		*NewLocation = std::move(Parms.NewLocation);
}


// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.TryDestroyHistoryActorListAll
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_AJBHistoryManageComponent_C::TryDestroyHistoryActorListAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBHistoryManageComponent_C", "TryDestroyHistoryActorListAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.TryDestroyHistoryActorListByIndex
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBHistoryManageComponent_C::TryDestroyHistoryActorListByIndex(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBHistoryManageComponent_C", "TryDestroyHistoryActorListByIndex");

	Params::BP_AJBHistoryManageComponent_C_TryDestroyHistoryActorListByIndex Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.GetPoliticOwnerLocation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector*                         Location                                               (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AJBHistoryManageComponent_C::GetPoliticOwnerLocation(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBHistoryManageComponent_C", "GetPoliticOwnerLocation");

	Params::BP_AJBHistoryManageComponent_C_GetPoliticOwnerLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function BP_AJBHistoryManageComponent.BP_AJBHistoryManageComponent_C.ResetHistoryInfoList
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_AJBHistoryManageComponent_C::ResetHistoryInfoList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AJBHistoryManageComponent_C", "ResetHistoryInfoList");

	UObject::ProcessEvent(Func, nullptr);
}

}

