#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_AJBWaitUntilNormalAttackFiringRange

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTT_AJBWaitUntilNormalAttackFiringRange.BTT_AJBWaitUntilNormalAttackFiringRange_C
// 0x0040 (0x00E0 - 0x00A0)
class UBTT_AJBWaitUntilNormalAttackFiringRange_C final : public UBTTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(Transient, DuplicateTransient)
	struct FBlackboardKeySelector                 RO_FocusingEnemy;                                  // 0x00A8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly)
	class ABP_AJBInGameAIImaginaryCharacter_C*    Enemy;                                             // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NormalAttackFiringRangeSq;                         // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BTT_AJBWaitUntilNormalAttackFiringRange(int32 EntryPoint);
	void ReceiveAbortAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTT_AJBWaitUntilNormalAttackFiringRange_C">();
	}
	static class UBTT_AJBWaitUntilNormalAttackFiringRange_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTT_AJBWaitUntilNormalAttackFiringRange_C>();
	}
};
static_assert(alignof(UBTT_AJBWaitUntilNormalAttackFiringRange_C) == 0x000008, "Wrong alignment on UBTT_AJBWaitUntilNormalAttackFiringRange_C");
static_assert(sizeof(UBTT_AJBWaitUntilNormalAttackFiringRange_C) == 0x0000E0, "Wrong size on UBTT_AJBWaitUntilNormalAttackFiringRange_C");
static_assert(offsetof(UBTT_AJBWaitUntilNormalAttackFiringRange_C, UberGraphFrame) == 0x0000A0, "Member 'UBTT_AJBWaitUntilNormalAttackFiringRange_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTT_AJBWaitUntilNormalAttackFiringRange_C, RO_FocusingEnemy) == 0x0000A8, "Member 'UBTT_AJBWaitUntilNormalAttackFiringRange_C::RO_FocusingEnemy' has a wrong offset!");
static_assert(offsetof(UBTT_AJBWaitUntilNormalAttackFiringRange_C, Enemy) == 0x0000D0, "Member 'UBTT_AJBWaitUntilNormalAttackFiringRange_C::Enemy' has a wrong offset!");
static_assert(offsetof(UBTT_AJBWaitUntilNormalAttackFiringRange_C, NormalAttackFiringRangeSq) == 0x0000D8, "Member 'UBTT_AJBWaitUntilNormalAttackFiringRange_C::NormalAttackFiringRangeSq' has a wrong offset!");

}

