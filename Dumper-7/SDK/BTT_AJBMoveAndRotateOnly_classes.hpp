#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_AJBMoveAndRotateOnly

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTT_AJBMoveAndRotateOnly.BTT_AJBMoveAndRotateOnly_C
// 0x0010 (0x00B0 - 0x00A0)
class UBTT_AJBMoveAndRotateOnly_C final : public UBTTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(Transient, DuplicateTransient)
	float                                         Duration;                                          // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BTT_AJBMoveAndRotateOnly(int32 EntryPoint);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTT_AJBMoveAndRotateOnly_C">();
	}
	static class UBTT_AJBMoveAndRotateOnly_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTT_AJBMoveAndRotateOnly_C>();
	}
};
static_assert(alignof(UBTT_AJBMoveAndRotateOnly_C) == 0x000008, "Wrong alignment on UBTT_AJBMoveAndRotateOnly_C");
static_assert(sizeof(UBTT_AJBMoveAndRotateOnly_C) == 0x0000B0, "Wrong size on UBTT_AJBMoveAndRotateOnly_C");
static_assert(offsetof(UBTT_AJBMoveAndRotateOnly_C, UberGraphFrame) == 0x0000A0, "Member 'UBTT_AJBMoveAndRotateOnly_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTT_AJBMoveAndRotateOnly_C, Duration) == 0x0000A8, "Member 'UBTT_AJBMoveAndRotateOnly_C::Duration' has a wrong offset!");

}

