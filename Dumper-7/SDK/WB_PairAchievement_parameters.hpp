#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_PairAchievement

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WB_PairAchievement.WB_PairAchievement_C.ExecuteUbergraph_WB_PairAchievement
// 0x00C0 (0x00C0 - 0x0000)
struct WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           CallFunc_RequestWwiseEventOnLocal_AkComponent;     // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           CallFunc_RequestWwiseEventOnLocal_AkComponent1;    // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAJBButtonWidget*                       K2Node_ComponentBoundEvent_OwnerWidget;            // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAJBButton*                             K2Node_ComponentBoundEvent_TargetButton;           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0028(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBInGameHUD_BP_bSuccess;              // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameHUD_C*                     CallFunc_GetAJBInGameHUD_BP_In_Game_HUD;           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0078(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_GetAJBInGameHUD_BP_bSuccess1;             // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameHUD_C*                     CallFunc_GetAJBInGameHUD_BP_In_Game_HUD1;          // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x00A8(0x0018)()
};
static_assert(alignof(WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement) == 0x000008, "Wrong alignment on WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement");
static_assert(sizeof(WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement) == 0x0000C0, "Wrong size on WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement");
static_assert(offsetof(WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement, EntryPoint) == 0x000000, "Member 'WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement, CallFunc_RequestWwiseEventOnLocal_AkComponent) == 0x000008, "Member 'WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement::CallFunc_RequestWwiseEventOnLocal_AkComponent' has a wrong offset!");
static_assert(offsetof(WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement, CallFunc_RequestWwiseEventOnLocal_AkComponent1) == 0x000010, "Member 'WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement::CallFunc_RequestWwiseEventOnLocal_AkComponent1' has a wrong offset!");
static_assert(offsetof(WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement, K2Node_ComponentBoundEvent_OwnerWidget) == 0x000018, "Member 'WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement::K2Node_ComponentBoundEvent_OwnerWidget' has a wrong offset!");
static_assert(offsetof(WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement, K2Node_ComponentBoundEvent_TargetButton) == 0x000020, "Member 'WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement::K2Node_ComponentBoundEvent_TargetButton' has a wrong offset!");
static_assert(offsetof(WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement, K2Node_Event_MyGeometry) == 0x000028, "Member 'WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement, K2Node_Event_InDeltaTime) == 0x000060, "Member 'WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement, CallFunc_GetAJBInGameHUD_BP_bSuccess) == 0x000064, "Member 'WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement::CallFunc_GetAJBInGameHUD_BP_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement, CallFunc_GetAJBInGameHUD_BP_In_Game_HUD) == 0x000068, "Member 'WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement::CallFunc_GetAJBInGameHUD_BP_In_Game_HUD' has a wrong offset!");
static_assert(offsetof(WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000070, "Member 'WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000071, "Member 'WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement, K2Node_CreateDelegate_OutputDelegate) == 0x000078, "Member 'WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement, CallFunc_GetAJBInGameHUD_BP_bSuccess1) == 0x000088, "Member 'WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement::CallFunc_GetAJBInGameHUD_BP_bSuccess1' has a wrong offset!");
static_assert(offsetof(WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement, CallFunc_GetAJBInGameHUD_BP_In_Game_HUD1) == 0x000090, "Member 'WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement::CallFunc_GetAJBInGameHUD_BP_In_Game_HUD1' has a wrong offset!");
static_assert(offsetof(WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement, K2Node_Event_IsDesignTime) == 0x000098, "Member 'WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00009C, "Member 'WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement, CallFunc_FMax_ReturnValue) == 0x0000A0, "Member 'WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement, CallFunc_Conv_StringToText_ReturnValue) == 0x0000A8, "Member 'WB_PairAchievement_C_ExecuteUbergraph_WB_PairAchievement::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

// Function WB_PairAchievement.WB_PairAchievement_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WB_PairAchievement_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PairAchievement_C_PreConstruct) == 0x000001, "Wrong alignment on WB_PairAchievement_C_PreConstruct");
static_assert(sizeof(WB_PairAchievement_C_PreConstruct) == 0x000001, "Wrong size on WB_PairAchievement_C_PreConstruct");
static_assert(offsetof(WB_PairAchievement_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WB_PairAchievement_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WB_PairAchievement.WB_PairAchievement_C.Tick
// 0x003C (0x003C - 0x0000)
struct WB_PairAchievement_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PairAchievement_C_Tick) == 0x000004, "Wrong alignment on WB_PairAchievement_C_Tick");
static_assert(sizeof(WB_PairAchievement_C_Tick) == 0x00003C, "Wrong size on WB_PairAchievement_C_Tick");
static_assert(offsetof(WB_PairAchievement_C_Tick, MyGeometry) == 0x000000, "Member 'WB_PairAchievement_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_PairAchievement_C_Tick, InDeltaTime) == 0x000038, "Member 'WB_PairAchievement_C_Tick::InDeltaTime' has a wrong offset!");

// Function WB_PairAchievement.WB_PairAchievement_C.BndEvt__WB_CommonButton_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct WB_PairAchievement_C_BndEvt__WB_CommonButton_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature final
{
public:
	class UAJBButtonWidget*                       OwnerWidget;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAJBButton*                             TargetButton;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_PairAchievement_C_BndEvt__WB_CommonButton_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature) == 0x000008, "Wrong alignment on WB_PairAchievement_C_BndEvt__WB_CommonButton_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature");
static_assert(sizeof(WB_PairAchievement_C_BndEvt__WB_CommonButton_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature) == 0x000010, "Wrong size on WB_PairAchievement_C_BndEvt__WB_CommonButton_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature");
static_assert(offsetof(WB_PairAchievement_C_BndEvt__WB_CommonButton_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature, OwnerWidget) == 0x000000, "Member 'WB_PairAchievement_C_BndEvt__WB_CommonButton_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature::OwnerWidget' has a wrong offset!");
static_assert(offsetof(WB_PairAchievement_C_BndEvt__WB_CommonButton_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature, TargetButton) == 0x000008, "Member 'WB_PairAchievement_C_BndEvt__WB_CommonButton_K2Node_ComponentBoundEvent_0_OnAJBButtonEvent__DelegateSignature::TargetButton' has a wrong offset!");

// Function WB_PairAchievement.WB_PairAchievement_C.OnInputTurnRate
// 0x0008 (0x0008 - 0x0000)
struct WB_PairAchievement_C_OnInputTurnRate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PairAchievement_C_OnInputTurnRate) == 0x000004, "Wrong alignment on WB_PairAchievement_C_OnInputTurnRate");
static_assert(sizeof(WB_PairAchievement_C_OnInputTurnRate) == 0x000008, "Wrong size on WB_PairAchievement_C_OnInputTurnRate");
static_assert(offsetof(WB_PairAchievement_C_OnInputTurnRate, Value) == 0x000000, "Member 'WB_PairAchievement_C_OnInputTurnRate::Value' has a wrong offset!");
static_assert(offsetof(WB_PairAchievement_C_OnInputTurnRate, ReturnValue) == 0x000004, "Member 'WB_PairAchievement_C_OnInputTurnRate::ReturnValue' has a wrong offset!");

// Function WB_PairAchievement.WB_PairAchievement_C.OnInputReleasedUp
// 0x0001 (0x0001 - 0x0000)
struct WB_PairAchievement_C_OnInputReleasedUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PairAchievement_C_OnInputReleasedUp) == 0x000001, "Wrong alignment on WB_PairAchievement_C_OnInputReleasedUp");
static_assert(sizeof(WB_PairAchievement_C_OnInputReleasedUp) == 0x000001, "Wrong size on WB_PairAchievement_C_OnInputReleasedUp");
static_assert(offsetof(WB_PairAchievement_C_OnInputReleasedUp, ReturnValue) == 0x000000, "Member 'WB_PairAchievement_C_OnInputReleasedUp::ReturnValue' has a wrong offset!");

// Function WB_PairAchievement.WB_PairAchievement_C.OnInputReleasedTouch
// 0x0001 (0x0001 - 0x0000)
struct WB_PairAchievement_C_OnInputReleasedTouch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PairAchievement_C_OnInputReleasedTouch) == 0x000001, "Wrong alignment on WB_PairAchievement_C_OnInputReleasedTouch");
static_assert(sizeof(WB_PairAchievement_C_OnInputReleasedTouch) == 0x000001, "Wrong size on WB_PairAchievement_C_OnInputReleasedTouch");
static_assert(offsetof(WB_PairAchievement_C_OnInputReleasedTouch, ReturnValue) == 0x000000, "Member 'WB_PairAchievement_C_OnInputReleasedTouch::ReturnValue' has a wrong offset!");

// Function WB_PairAchievement.WB_PairAchievement_C.OnInputReleasedRight
// 0x0001 (0x0001 - 0x0000)
struct WB_PairAchievement_C_OnInputReleasedRight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PairAchievement_C_OnInputReleasedRight) == 0x000001, "Wrong alignment on WB_PairAchievement_C_OnInputReleasedRight");
static_assert(sizeof(WB_PairAchievement_C_OnInputReleasedRight) == 0x000001, "Wrong size on WB_PairAchievement_C_OnInputReleasedRight");
static_assert(offsetof(WB_PairAchievement_C_OnInputReleasedRight, ReturnValue) == 0x000000, "Member 'WB_PairAchievement_C_OnInputReleasedRight::ReturnValue' has a wrong offset!");

// Function WB_PairAchievement.WB_PairAchievement_C.OnInputReleasedR2
// 0x0001 (0x0001 - 0x0000)
struct WB_PairAchievement_C_OnInputReleasedR2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PairAchievement_C_OnInputReleasedR2) == 0x000001, "Wrong alignment on WB_PairAchievement_C_OnInputReleasedR2");
static_assert(sizeof(WB_PairAchievement_C_OnInputReleasedR2) == 0x000001, "Wrong size on WB_PairAchievement_C_OnInputReleasedR2");
static_assert(offsetof(WB_PairAchievement_C_OnInputReleasedR2, ReturnValue) == 0x000000, "Member 'WB_PairAchievement_C_OnInputReleasedR2::ReturnValue' has a wrong offset!");

// Function WB_PairAchievement.WB_PairAchievement_C.OnInputReleasedR1
// 0x0001 (0x0001 - 0x0000)
struct WB_PairAchievement_C_OnInputReleasedR1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PairAchievement_C_OnInputReleasedR1) == 0x000001, "Wrong alignment on WB_PairAchievement_C_OnInputReleasedR1");
static_assert(sizeof(WB_PairAchievement_C_OnInputReleasedR1) == 0x000001, "Wrong size on WB_PairAchievement_C_OnInputReleasedR1");
static_assert(offsetof(WB_PairAchievement_C_OnInputReleasedR1, ReturnValue) == 0x000000, "Member 'WB_PairAchievement_C_OnInputReleasedR1::ReturnValue' has a wrong offset!");

// Function WB_PairAchievement.WB_PairAchievement_C.OnInputReleasedLeft
// 0x0001 (0x0001 - 0x0000)
struct WB_PairAchievement_C_OnInputReleasedLeft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PairAchievement_C_OnInputReleasedLeft) == 0x000001, "Wrong alignment on WB_PairAchievement_C_OnInputReleasedLeft");
static_assert(sizeof(WB_PairAchievement_C_OnInputReleasedLeft) == 0x000001, "Wrong size on WB_PairAchievement_C_OnInputReleasedLeft");
static_assert(offsetof(WB_PairAchievement_C_OnInputReleasedLeft, ReturnValue) == 0x000000, "Member 'WB_PairAchievement_C_OnInputReleasedLeft::ReturnValue' has a wrong offset!");

// Function WB_PairAchievement.WB_PairAchievement_C.OnInputReleasedL3
// 0x0001 (0x0001 - 0x0000)
struct WB_PairAchievement_C_OnInputReleasedL3 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PairAchievement_C_OnInputReleasedL3) == 0x000001, "Wrong alignment on WB_PairAchievement_C_OnInputReleasedL3");
static_assert(sizeof(WB_PairAchievement_C_OnInputReleasedL3) == 0x000001, "Wrong size on WB_PairAchievement_C_OnInputReleasedL3");
static_assert(offsetof(WB_PairAchievement_C_OnInputReleasedL3, ReturnValue) == 0x000000, "Member 'WB_PairAchievement_C_OnInputReleasedL3::ReturnValue' has a wrong offset!");

// Function WB_PairAchievement.WB_PairAchievement_C.OnInputReleasedL2
// 0x0001 (0x0001 - 0x0000)
struct WB_PairAchievement_C_OnInputReleasedL2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PairAchievement_C_OnInputReleasedL2) == 0x000001, "Wrong alignment on WB_PairAchievement_C_OnInputReleasedL2");
static_assert(sizeof(WB_PairAchievement_C_OnInputReleasedL2) == 0x000001, "Wrong size on WB_PairAchievement_C_OnInputReleasedL2");
static_assert(offsetof(WB_PairAchievement_C_OnInputReleasedL2, ReturnValue) == 0x000000, "Member 'WB_PairAchievement_C_OnInputReleasedL2::ReturnValue' has a wrong offset!");

// Function WB_PairAchievement.WB_PairAchievement_C.OnInputReleasedL1
// 0x0001 (0x0001 - 0x0000)
struct WB_PairAchievement_C_OnInputReleasedL1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PairAchievement_C_OnInputReleasedL1) == 0x000001, "Wrong alignment on WB_PairAchievement_C_OnInputReleasedL1");
static_assert(sizeof(WB_PairAchievement_C_OnInputReleasedL1) == 0x000001, "Wrong size on WB_PairAchievement_C_OnInputReleasedL1");
static_assert(offsetof(WB_PairAchievement_C_OnInputReleasedL1, ReturnValue) == 0x000000, "Member 'WB_PairAchievement_C_OnInputReleasedL1::ReturnValue' has a wrong offset!");

// Function WB_PairAchievement.WB_PairAchievement_C.OnInputReleasedDown
// 0x0001 (0x0001 - 0x0000)
struct WB_PairAchievement_C_OnInputReleasedDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PairAchievement_C_OnInputReleasedDown) == 0x000001, "Wrong alignment on WB_PairAchievement_C_OnInputReleasedDown");
static_assert(sizeof(WB_PairAchievement_C_OnInputReleasedDown) == 0x000001, "Wrong size on WB_PairAchievement_C_OnInputReleasedDown");
static_assert(offsetof(WB_PairAchievement_C_OnInputReleasedDown, ReturnValue) == 0x000000, "Member 'WB_PairAchievement_C_OnInputReleasedDown::ReturnValue' has a wrong offset!");

// Function WB_PairAchievement.WB_PairAchievement_C.OnInputReleasedDecide
// 0x0001 (0x0001 - 0x0000)
struct WB_PairAchievement_C_OnInputReleasedDecide final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PairAchievement_C_OnInputReleasedDecide) == 0x000001, "Wrong alignment on WB_PairAchievement_C_OnInputReleasedDecide");
static_assert(sizeof(WB_PairAchievement_C_OnInputReleasedDecide) == 0x000001, "Wrong size on WB_PairAchievement_C_OnInputReleasedDecide");
static_assert(offsetof(WB_PairAchievement_C_OnInputReleasedDecide, ReturnValue) == 0x000000, "Member 'WB_PairAchievement_C_OnInputReleasedDecide::ReturnValue' has a wrong offset!");

// Function WB_PairAchievement.WB_PairAchievement_C.OnInputReleasedCancel
// 0x0001 (0x0001 - 0x0000)
struct WB_PairAchievement_C_OnInputReleasedCancel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PairAchievement_C_OnInputReleasedCancel) == 0x000001, "Wrong alignment on WB_PairAchievement_C_OnInputReleasedCancel");
static_assert(sizeof(WB_PairAchievement_C_OnInputReleasedCancel) == 0x000001, "Wrong size on WB_PairAchievement_C_OnInputReleasedCancel");
static_assert(offsetof(WB_PairAchievement_C_OnInputReleasedCancel, ReturnValue) == 0x000000, "Member 'WB_PairAchievement_C_OnInputReleasedCancel::ReturnValue' has a wrong offset!");

// Function WB_PairAchievement.WB_PairAchievement_C.OnInputPressedUp
// 0x0001 (0x0001 - 0x0000)
struct WB_PairAchievement_C_OnInputPressedUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PairAchievement_C_OnInputPressedUp) == 0x000001, "Wrong alignment on WB_PairAchievement_C_OnInputPressedUp");
static_assert(sizeof(WB_PairAchievement_C_OnInputPressedUp) == 0x000001, "Wrong size on WB_PairAchievement_C_OnInputPressedUp");
static_assert(offsetof(WB_PairAchievement_C_OnInputPressedUp, ReturnValue) == 0x000000, "Member 'WB_PairAchievement_C_OnInputPressedUp::ReturnValue' has a wrong offset!");

// Function WB_PairAchievement.WB_PairAchievement_C.OnInputPressedTouch
// 0x000C (0x000C - 0x0000)
struct WB_PairAchievement_C_OnInputPressedTouch final
{
public:
	float                                         LocationX;                                         // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LocationY;                                         // 0x0004(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PairAchievement_C_OnInputPressedTouch) == 0x000004, "Wrong alignment on WB_PairAchievement_C_OnInputPressedTouch");
static_assert(sizeof(WB_PairAchievement_C_OnInputPressedTouch) == 0x00000C, "Wrong size on WB_PairAchievement_C_OnInputPressedTouch");
static_assert(offsetof(WB_PairAchievement_C_OnInputPressedTouch, LocationX) == 0x000000, "Member 'WB_PairAchievement_C_OnInputPressedTouch::LocationX' has a wrong offset!");
static_assert(offsetof(WB_PairAchievement_C_OnInputPressedTouch, LocationY) == 0x000004, "Member 'WB_PairAchievement_C_OnInputPressedTouch::LocationY' has a wrong offset!");
static_assert(offsetof(WB_PairAchievement_C_OnInputPressedTouch, ReturnValue) == 0x000008, "Member 'WB_PairAchievement_C_OnInputPressedTouch::ReturnValue' has a wrong offset!");

// Function WB_PairAchievement.WB_PairAchievement_C.OnInputPressedRight
// 0x0001 (0x0001 - 0x0000)
struct WB_PairAchievement_C_OnInputPressedRight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PairAchievement_C_OnInputPressedRight) == 0x000001, "Wrong alignment on WB_PairAchievement_C_OnInputPressedRight");
static_assert(sizeof(WB_PairAchievement_C_OnInputPressedRight) == 0x000001, "Wrong size on WB_PairAchievement_C_OnInputPressedRight");
static_assert(offsetof(WB_PairAchievement_C_OnInputPressedRight, ReturnValue) == 0x000000, "Member 'WB_PairAchievement_C_OnInputPressedRight::ReturnValue' has a wrong offset!");

// Function WB_PairAchievement.WB_PairAchievement_C.OnInputPressedR2
// 0x0001 (0x0001 - 0x0000)
struct WB_PairAchievement_C_OnInputPressedR2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PairAchievement_C_OnInputPressedR2) == 0x000001, "Wrong alignment on WB_PairAchievement_C_OnInputPressedR2");
static_assert(sizeof(WB_PairAchievement_C_OnInputPressedR2) == 0x000001, "Wrong size on WB_PairAchievement_C_OnInputPressedR2");
static_assert(offsetof(WB_PairAchievement_C_OnInputPressedR2, ReturnValue) == 0x000000, "Member 'WB_PairAchievement_C_OnInputPressedR2::ReturnValue' has a wrong offset!");

// Function WB_PairAchievement.WB_PairAchievement_C.OnInputPressedR1
// 0x0001 (0x0001 - 0x0000)
struct WB_PairAchievement_C_OnInputPressedR1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PairAchievement_C_OnInputPressedR1) == 0x000001, "Wrong alignment on WB_PairAchievement_C_OnInputPressedR1");
static_assert(sizeof(WB_PairAchievement_C_OnInputPressedR1) == 0x000001, "Wrong size on WB_PairAchievement_C_OnInputPressedR1");
static_assert(offsetof(WB_PairAchievement_C_OnInputPressedR1, ReturnValue) == 0x000000, "Member 'WB_PairAchievement_C_OnInputPressedR1::ReturnValue' has a wrong offset!");

// Function WB_PairAchievement.WB_PairAchievement_C.OnInputPressedLeft
// 0x0001 (0x0001 - 0x0000)
struct WB_PairAchievement_C_OnInputPressedLeft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PairAchievement_C_OnInputPressedLeft) == 0x000001, "Wrong alignment on WB_PairAchievement_C_OnInputPressedLeft");
static_assert(sizeof(WB_PairAchievement_C_OnInputPressedLeft) == 0x000001, "Wrong size on WB_PairAchievement_C_OnInputPressedLeft");
static_assert(offsetof(WB_PairAchievement_C_OnInputPressedLeft, ReturnValue) == 0x000000, "Member 'WB_PairAchievement_C_OnInputPressedLeft::ReturnValue' has a wrong offset!");

// Function WB_PairAchievement.WB_PairAchievement_C.OnInputPressedL3
// 0x0001 (0x0001 - 0x0000)
struct WB_PairAchievement_C_OnInputPressedL3 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PairAchievement_C_OnInputPressedL3) == 0x000001, "Wrong alignment on WB_PairAchievement_C_OnInputPressedL3");
static_assert(sizeof(WB_PairAchievement_C_OnInputPressedL3) == 0x000001, "Wrong size on WB_PairAchievement_C_OnInputPressedL3");
static_assert(offsetof(WB_PairAchievement_C_OnInputPressedL3, ReturnValue) == 0x000000, "Member 'WB_PairAchievement_C_OnInputPressedL3::ReturnValue' has a wrong offset!");

// Function WB_PairAchievement.WB_PairAchievement_C.OnInputPressedL2
// 0x0001 (0x0001 - 0x0000)
struct WB_PairAchievement_C_OnInputPressedL2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PairAchievement_C_OnInputPressedL2) == 0x000001, "Wrong alignment on WB_PairAchievement_C_OnInputPressedL2");
static_assert(sizeof(WB_PairAchievement_C_OnInputPressedL2) == 0x000001, "Wrong size on WB_PairAchievement_C_OnInputPressedL2");
static_assert(offsetof(WB_PairAchievement_C_OnInputPressedL2, ReturnValue) == 0x000000, "Member 'WB_PairAchievement_C_OnInputPressedL2::ReturnValue' has a wrong offset!");

// Function WB_PairAchievement.WB_PairAchievement_C.OnInputPressedL1
// 0x0001 (0x0001 - 0x0000)
struct WB_PairAchievement_C_OnInputPressedL1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PairAchievement_C_OnInputPressedL1) == 0x000001, "Wrong alignment on WB_PairAchievement_C_OnInputPressedL1");
static_assert(sizeof(WB_PairAchievement_C_OnInputPressedL1) == 0x000001, "Wrong size on WB_PairAchievement_C_OnInputPressedL1");
static_assert(offsetof(WB_PairAchievement_C_OnInputPressedL1, ReturnValue) == 0x000000, "Member 'WB_PairAchievement_C_OnInputPressedL1::ReturnValue' has a wrong offset!");

// Function WB_PairAchievement.WB_PairAchievement_C.OnInputPressedDown
// 0x0001 (0x0001 - 0x0000)
struct WB_PairAchievement_C_OnInputPressedDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PairAchievement_C_OnInputPressedDown) == 0x000001, "Wrong alignment on WB_PairAchievement_C_OnInputPressedDown");
static_assert(sizeof(WB_PairAchievement_C_OnInputPressedDown) == 0x000001, "Wrong size on WB_PairAchievement_C_OnInputPressedDown");
static_assert(offsetof(WB_PairAchievement_C_OnInputPressedDown, ReturnValue) == 0x000000, "Member 'WB_PairAchievement_C_OnInputPressedDown::ReturnValue' has a wrong offset!");

// Function WB_PairAchievement.WB_PairAchievement_C.OnInputPressedDecide
// 0x0001 (0x0001 - 0x0000)
struct WB_PairAchievement_C_OnInputPressedDecide final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PairAchievement_C_OnInputPressedDecide) == 0x000001, "Wrong alignment on WB_PairAchievement_C_OnInputPressedDecide");
static_assert(sizeof(WB_PairAchievement_C_OnInputPressedDecide) == 0x000001, "Wrong size on WB_PairAchievement_C_OnInputPressedDecide");
static_assert(offsetof(WB_PairAchievement_C_OnInputPressedDecide, ReturnValue) == 0x000000, "Member 'WB_PairAchievement_C_OnInputPressedDecide::ReturnValue' has a wrong offset!");

// Function WB_PairAchievement.WB_PairAchievement_C.OnInputPressedCancel
// 0x0001 (0x0001 - 0x0000)
struct WB_PairAchievement_C_OnInputPressedCancel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PairAchievement_C_OnInputPressedCancel) == 0x000001, "Wrong alignment on WB_PairAchievement_C_OnInputPressedCancel");
static_assert(sizeof(WB_PairAchievement_C_OnInputPressedCancel) == 0x000001, "Wrong size on WB_PairAchievement_C_OnInputPressedCancel");
static_assert(offsetof(WB_PairAchievement_C_OnInputPressedCancel, ReturnValue) == 0x000000, "Member 'WB_PairAchievement_C_OnInputPressedCancel::ReturnValue' has a wrong offset!");

// Function WB_PairAchievement.WB_PairAchievement_C.OnInputMoveRight
// 0x0008 (0x0008 - 0x0000)
struct WB_PairAchievement_C_OnInputMoveRight final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PairAchievement_C_OnInputMoveRight) == 0x000004, "Wrong alignment on WB_PairAchievement_C_OnInputMoveRight");
static_assert(sizeof(WB_PairAchievement_C_OnInputMoveRight) == 0x000008, "Wrong size on WB_PairAchievement_C_OnInputMoveRight");
static_assert(offsetof(WB_PairAchievement_C_OnInputMoveRight, Value) == 0x000000, "Member 'WB_PairAchievement_C_OnInputMoveRight::Value' has a wrong offset!");
static_assert(offsetof(WB_PairAchievement_C_OnInputMoveRight, ReturnValue) == 0x000004, "Member 'WB_PairAchievement_C_OnInputMoveRight::ReturnValue' has a wrong offset!");

// Function WB_PairAchievement.WB_PairAchievement_C.OnInputMoveForward
// 0x0008 (0x0008 - 0x0000)
struct WB_PairAchievement_C_OnInputMoveForward final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PairAchievement_C_OnInputMoveForward) == 0x000004, "Wrong alignment on WB_PairAchievement_C_OnInputMoveForward");
static_assert(sizeof(WB_PairAchievement_C_OnInputMoveForward) == 0x000008, "Wrong size on WB_PairAchievement_C_OnInputMoveForward");
static_assert(offsetof(WB_PairAchievement_C_OnInputMoveForward, Value) == 0x000000, "Member 'WB_PairAchievement_C_OnInputMoveForward::Value' has a wrong offset!");
static_assert(offsetof(WB_PairAchievement_C_OnInputMoveForward, ReturnValue) == 0x000004, "Member 'WB_PairAchievement_C_OnInputMoveForward::ReturnValue' has a wrong offset!");

// Function WB_PairAchievement.WB_PairAchievement_C.OnInputLookupRate
// 0x0008 (0x0008 - 0x0000)
struct WB_PairAchievement_C_OnInputLookupRate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PairAchievement_C_OnInputLookupRate) == 0x000004, "Wrong alignment on WB_PairAchievement_C_OnInputLookupRate");
static_assert(sizeof(WB_PairAchievement_C_OnInputLookupRate) == 0x000008, "Wrong size on WB_PairAchievement_C_OnInputLookupRate");
static_assert(offsetof(WB_PairAchievement_C_OnInputLookupRate, Value) == 0x000000, "Member 'WB_PairAchievement_C_OnInputLookupRate::Value' has a wrong offset!");
static_assert(offsetof(WB_PairAchievement_C_OnInputLookupRate, ReturnValue) == 0x000004, "Member 'WB_PairAchievement_C_OnInputLookupRate::ReturnValue' has a wrong offset!");

// Function WB_PairAchievement.WB_PairAchievement_C.IsModeless
// 0x0001 (0x0001 - 0x0000)
struct WB_PairAchievement_C_IsModeless final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WB_PairAchievement_C_IsModeless) == 0x000001, "Wrong alignment on WB_PairAchievement_C_IsModeless");
static_assert(sizeof(WB_PairAchievement_C_IsModeless) == 0x000001, "Wrong size on WB_PairAchievement_C_IsModeless");
static_assert(offsetof(WB_PairAchievement_C_IsModeless, ReturnValue) == 0x000000, "Member 'WB_PairAchievement_C_IsModeless::ReturnValue' has a wrong offset!");

}

