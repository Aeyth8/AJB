#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BI_ShotNGPoint

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function BI_ShotNGPoint.BI_ShotNGPoint_C.CheckLocallyControlled
// 0x0001 (0x0001 - 0x0000)
struct BI_ShotNGPoint_C_CheckLocallyControlled final
{
public:
	bool                                          bLocallyControlled;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_ShotNGPoint_C_CheckLocallyControlled) == 0x000001, "Wrong alignment on BI_ShotNGPoint_C_CheckLocallyControlled");
static_assert(sizeof(BI_ShotNGPoint_C_CheckLocallyControlled) == 0x000001, "Wrong size on BI_ShotNGPoint_C_CheckLocallyControlled");
static_assert(offsetof(BI_ShotNGPoint_C_CheckLocallyControlled, bLocallyControlled) == 0x000000, "Member 'BI_ShotNGPoint_C_CheckLocallyControlled::bLocallyControlled' has a wrong offset!");

// Function BI_ShotNGPoint.BI_ShotNGPoint_C.GetShotLocation
// 0x0020 (0x0020 - 0x0000)
struct BI_ShotNGPoint_C_GetShotLocation final
{
public:
	bool                                          bConsiderCharacterCapsuleRadius;                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           SkillTag;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        Locations;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor)
};
static_assert(alignof(BI_ShotNGPoint_C_GetShotLocation) == 0x000008, "Wrong alignment on BI_ShotNGPoint_C_GetShotLocation");
static_assert(sizeof(BI_ShotNGPoint_C_GetShotLocation) == 0x000020, "Wrong size on BI_ShotNGPoint_C_GetShotLocation");
static_assert(offsetof(BI_ShotNGPoint_C_GetShotLocation, bConsiderCharacterCapsuleRadius) == 0x000000, "Member 'BI_ShotNGPoint_C_GetShotLocation::bConsiderCharacterCapsuleRadius' has a wrong offset!");
static_assert(offsetof(BI_ShotNGPoint_C_GetShotLocation, SkillTag) == 0x000008, "Member 'BI_ShotNGPoint_C_GetShotLocation::SkillTag' has a wrong offset!");
static_assert(offsetof(BI_ShotNGPoint_C_GetShotLocation, Locations) == 0x000010, "Member 'BI_ShotNGPoint_C_GetShotLocation::Locations' has a wrong offset!");

// Function BI_ShotNGPoint.BI_ShotNGPoint_C.GetShutTraceRadius
// 0x0004 (0x0004 - 0x0000)
struct BI_ShotNGPoint_C_GetShutTraceRadius final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BI_ShotNGPoint_C_GetShutTraceRadius) == 0x000004, "Wrong alignment on BI_ShotNGPoint_C_GetShutTraceRadius");
static_assert(sizeof(BI_ShotNGPoint_C_GetShutTraceRadius) == 0x000004, "Wrong size on BI_ShotNGPoint_C_GetShutTraceRadius");
static_assert(offsetof(BI_ShotNGPoint_C_GetShutTraceRadius, Radius) == 0x000000, "Member 'BI_ShotNGPoint_C_GetShutTraceRadius::Radius' has a wrong offset!");

// Function BI_ShotNGPoint.BI_ShotNGPoint_C.ShouldShowNGPoint
// 0x0001 (0x0001 - 0x0000)
struct BI_ShotNGPoint_C_ShouldShowNGPoint final
{
public:
	bool                                          bResult;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BI_ShotNGPoint_C_ShouldShowNGPoint) == 0x000001, "Wrong alignment on BI_ShotNGPoint_C_ShouldShowNGPoint");
static_assert(sizeof(BI_ShotNGPoint_C_ShouldShowNGPoint) == 0x000001, "Wrong size on BI_ShotNGPoint_C_ShouldShowNGPoint");
static_assert(offsetof(BI_ShotNGPoint_C_ShouldShowNGPoint, bResult) == 0x000000, "Member 'BI_ShotNGPoint_C_ShouldShowNGPoint::bResult' has a wrong offset!");

// Function BI_ShotNGPoint.BI_ShotNGPoint_C.GetDummyShotLocation
// 0x000C (0x000C - 0x0000)
struct BI_ShotNGPoint_C_GetDummyShotLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BI_ShotNGPoint_C_GetDummyShotLocation) == 0x000004, "Wrong alignment on BI_ShotNGPoint_C_GetDummyShotLocation");
static_assert(sizeof(BI_ShotNGPoint_C_GetDummyShotLocation) == 0x00000C, "Wrong size on BI_ShotNGPoint_C_GetDummyShotLocation");
static_assert(offsetof(BI_ShotNGPoint_C_GetDummyShotLocation, Location) == 0x000000, "Member 'BI_ShotNGPoint_C_GetDummyShotLocation::Location' has a wrong offset!");

}

