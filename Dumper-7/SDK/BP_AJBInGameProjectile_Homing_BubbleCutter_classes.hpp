#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBInGameProjectile_Homing_BubbleCutter

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BP_AJBInGameProjectile_Homing_classes.hpp"
#include "AJB_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBInGameProjectile_Homing_BubbleCutter.BP_AJBInGameProjectile_Homing_BubbleCutter_C
// 0x0060 (0x05B0 - 0x0550)
class ABP_AJBInGameProjectile_Homing_BubbleCutter_C final : public ABP_AJBInGameProjectile_Homing_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AJBInGameProjectile_Homing_BubbleCutter_C; // 0x0550(0x0008)(Transient, DuplicateTransient)
	class UArrowComponent*                        Arrow1;                                            // 0x0558(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PS_Cutter_Hamon;                                   // 0x0560(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0568(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PS_Cutter;                                         // 0x0570(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHamonMode;                                       // 0x0578(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, AdvancedDisplay, ExposeOnSpawn)
	uint8                                         Pad_579[0x7];                                      // 0x0579(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LockedOnTarget;                                    // 0x0580(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          DoesOnlyHomingWhileIsNotOccluded;                  // 0x0588(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IgnoreHomingCollision;                             // 0x0589(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_58A[0x6];                                      // 0x058A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ShockWaveSETag;                                    // 0x0590(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           ShockWaveSE;                                       // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FGameplayTag                           HitCharacterSETag;                                 // 0x05A0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDuringTheWorld;                                  // 0x05A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)

public:
	void ExecuteUbergraph_BP_AJBInGameProjectile_Homing_BubbleCutter(int32 EntryPoint);
	void OnProjectileReflected_Server(class ABP_AJBInGameProjectile_Straight_C* ReflectedProjectile);
	void UpdateHomingTarget();
	void BeginState_AdditionalCheck();
	void UpdateProjectileMotion(float DeltaSeconds);
	void TickState_HomingDetection(float DeltaSeconds);
	void OnHamonStatusUpdated();
	void End_ProjectileShockWaveSE();
	void Pause_ProjectileShockWaveSE();
	void Internal_OnEnd_ProjectileShockWaveSE(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo);
	void UnlockResumeGate_ProjectileShockWaveSE();
	void Resume_ProjectileShockWaveSE();
	void Play_ProjectileShockWaveSE();
	void PlayHitSECharacter(class AActor* HitActor, const struct FVector& HitLocation_0, bool bHeadShot, EPhysicalSurface SurfaceType, float CuttingRate, bool bBlockedByAAP, const struct FGameplayTag& SETagBlockedByAAP);
	void GetHamonStatus(bool* IsHamonMode_0);
	void SetHamonStatus(bool IsHamonMode_0);
	void GetHamonTargetTag(class FName* HamonTargetTag);
	void GetHamonStatusTag(class FName* HamonStatusTag);
	void OnRep_IsHamonMode();
	void IsHomingTarget(class AActor* Target, bool* IsTarget);
	void GetLockedOnTarget(class AActor** LockedOnTarget_0);
	void SetLockedOnTarget(class AActor* LockedOnTarget_0);
	void CanHoming(bool* CanHoming_0);
	void ShouldLostTarget(class AActor* Target, bool* ShouldLost);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);
	void GetPoliticDamage(bool bHeadShot, int32* Damage_0);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBInGameProjectile_Homing_BubbleCutter_C">();
	}
	static class ABP_AJBInGameProjectile_Homing_BubbleCutter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBInGameProjectile_Homing_BubbleCutter_C>();
	}
};
static_assert(alignof(ABP_AJBInGameProjectile_Homing_BubbleCutter_C) == 0x000008, "Wrong alignment on ABP_AJBInGameProjectile_Homing_BubbleCutter_C");
static_assert(sizeof(ABP_AJBInGameProjectile_Homing_BubbleCutter_C) == 0x0005B0, "Wrong size on ABP_AJBInGameProjectile_Homing_BubbleCutter_C");
static_assert(offsetof(ABP_AJBInGameProjectile_Homing_BubbleCutter_C, UberGraphFrame_BP_AJBInGameProjectile_Homing_BubbleCutter_C) == 0x000550, "Member 'ABP_AJBInGameProjectile_Homing_BubbleCutter_C::UberGraphFrame_BP_AJBInGameProjectile_Homing_BubbleCutter_C' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Homing_BubbleCutter_C, Arrow1) == 0x000558, "Member 'ABP_AJBInGameProjectile_Homing_BubbleCutter_C::Arrow1' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Homing_BubbleCutter_C, PS_Cutter_Hamon) == 0x000560, "Member 'ABP_AJBInGameProjectile_Homing_BubbleCutter_C::PS_Cutter_Hamon' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Homing_BubbleCutter_C, Arrow) == 0x000568, "Member 'ABP_AJBInGameProjectile_Homing_BubbleCutter_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Homing_BubbleCutter_C, PS_Cutter) == 0x000570, "Member 'ABP_AJBInGameProjectile_Homing_BubbleCutter_C::PS_Cutter' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Homing_BubbleCutter_C, IsHamonMode) == 0x000578, "Member 'ABP_AJBInGameProjectile_Homing_BubbleCutter_C::IsHamonMode' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Homing_BubbleCutter_C, LockedOnTarget) == 0x000580, "Member 'ABP_AJBInGameProjectile_Homing_BubbleCutter_C::LockedOnTarget' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Homing_BubbleCutter_C, DoesOnlyHomingWhileIsNotOccluded) == 0x000588, "Member 'ABP_AJBInGameProjectile_Homing_BubbleCutter_C::DoesOnlyHomingWhileIsNotOccluded' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Homing_BubbleCutter_C, IgnoreHomingCollision) == 0x000589, "Member 'ABP_AJBInGameProjectile_Homing_BubbleCutter_C::IgnoreHomingCollision' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Homing_BubbleCutter_C, ShockWaveSETag) == 0x000590, "Member 'ABP_AJBInGameProjectile_Homing_BubbleCutter_C::ShockWaveSETag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Homing_BubbleCutter_C, ShockWaveSE) == 0x000598, "Member 'ABP_AJBInGameProjectile_Homing_BubbleCutter_C::ShockWaveSE' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Homing_BubbleCutter_C, HitCharacterSETag) == 0x0005A0, "Member 'ABP_AJBInGameProjectile_Homing_BubbleCutter_C::HitCharacterSETag' has a wrong offset!");
static_assert(offsetof(ABP_AJBInGameProjectile_Homing_BubbleCutter_C, IsDuringTheWorld) == 0x0005A8, "Member 'ABP_AJBInGameProjectile_Homing_BubbleCutter_C::IsDuringTheWorld' has a wrong offset!");

}

