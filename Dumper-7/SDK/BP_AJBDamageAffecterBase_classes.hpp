#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBDamageAffecterBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ST_DamageAffecterInfo_structs.hpp"
#include "AkAudio_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "AJB_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AJBDamageAffecterBase.BP_AJBDamageAffecterBase_C
// 0x0258 (0x0580 - 0x0328)
class ABP_AJBDamageAffecterBase_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Length;                                            // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PartitionNum;                                      // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         PrevAreaInActors;                                  // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AActor*>                         CurrentAreaInActors;                               // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<struct FST_DamageAffecterInfo>         AreaInfoList;                                      // 0x0368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         DamageInterval_s_;                                 // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AffecterDamage;                                    // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShowSphere;                                       // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_381[0x7];                                      // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           RangeAttackTag;                                    // 0x0388(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           RangeAttackTagOnRestore;                           // 0x0390(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TargetAddedEffectTag;                              // 0x0398(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SkillTag;                                          // 0x03A0(0x0008)(Edit, BlueprintVisible, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FGameplayTag                           DamageLoopSETag;                                   // 0x03A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_AJBInGameParticleEffect_C*          ParticleEffect;                                    // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableTheWorld;                                   // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B9[0x3];                                      // 0x03B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SerialNumber;                                      // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bLaunchFromSeparatedStand;                         // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_3C1[0x3];                                      // 0x03C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PastTimePrevTick;                                  // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentTime;                                       // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ActiveTime;                                        // 0x03CC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bUseOwnerTransform;                                // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAsProjectile;                                     // 0x03D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUseMultipleLocations;                             // 0x03D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D3[0x5];                                      // 0x03D3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        MultipleLocations;                                 // 0x03D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<float>                                 CurrentTimes;                                      // 0x03E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<float>                                 DelayTimes;                                        // 0x03F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<float>                                 MultipleScales;                                    // 0x0408(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<float>                                 ActiveGionIntervals;                               // 0x0418(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class ABP_AJBInGameParticleEffect_C*>  ParticleEffectList;                                // 0x0428(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<int32>                                 SerialNumbers;                                     // 0x0438(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<int32>                                 PrevAreaInIndexes;                                 // 0x0448(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<int32>                                 CurrrentAreaInIndexes;                             // 0x0458(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UAkComponent*>                   ActiveSEList;                                      // 0x0468(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	bool                                          bValidMultipleLocations;                           // 0x0478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_479[0x7];                                      // 0x0479(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_AJBInGameCharacter_C*>       KillCharacterList;                                 // 0x0480(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	UMulticastDelegateProperty_                   OnNotifyResultServer;                              // 0x0490(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bIgnoreMovableStand;                               // 0x04A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCheckUnder;                                       // 0x04A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A2[0x2];                                      // 0x04A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ValidGroundOffsetZ;                                // 0x04A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bConsiderTimeStopRangeAttackParticle;              // 0x04A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A9[0x7];                                      // 0x04A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           PassiveSkillTag;                                   // 0x04B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bIgnoreGivePassiveOnStealth;                       // 0x04B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIncludeSelf;                                      // 0x04B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShouldNotifyOnPassiveAddedFirst;                  // 0x04BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BB[0x5];                                      // 0x04BB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           AddPassiveFirstVoiceTag;                           // 0x04C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           AddPassiveFirstSelfVoiceTag;                       // 0x04C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldNotifyOnAreaIn;                             // 0x04D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCancelOnOwnerProhibitioned;                       // 0x04D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCancelOnOwnerCriticaled;                          // 0x04D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCancelOnOwnerDead;                                // 0x04D3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCancelOnBecomLastSurvivor;                        // 0x04D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bGivePassiveOnce;                                  // 0x04D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D6[0x2];                                      // 0x04D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AAJBInGameCharacterBase*>        PassiveAddedCharacterList;                         // 0x04D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          bShouldManagementMultipleLocationsEffect;          // 0x04E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUseSerialNumbers;                                 // 0x04E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4EA[0x6];                                      // 0x04EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 MultipleLocationsActorClass;                       // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FGameplayTag>                   CheckQueuedVoiceTagsOnPassiveAddedFirst;           // 0x04F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	struct FGameplayTag                           ActiveSETag;                                       // 0x0508(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           ActiveSE;                                          // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ActiveGionTag;                                     // 0x0518(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TimerHandleActiveGion;                             // 0x0520(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	float                                         ActiveGionInterval;                                // 0x0528(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RadiusRateForRandomActiveGion;                     // 0x052C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTempQueued;                                       // 0x0530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bSyncOnCahngeViewTarget;                           // 0x0531(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_532[0x2];                                      // 0x0532(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaitingReplicateTimeOnChangeViewTarget;            // 0x0534(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxTimeSEReplayRandomization;                      // 0x0538(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bRegisterToBurningActor_Multiple_;                 // 0x053C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53D[0x3];                                      // 0x053D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_BurningDummyActor_C*>        ActiveBurningDummyActors;                          // 0x0540(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          bBurningActorSamePriorityAsCharacter;              // 0x0550(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCancelledAffecter;                                // 0x0551(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUseBoxCollision;                                  // 0x0552(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_553[0x1];                                      // 0x0553(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BoxExtent;                                         // 0x0554(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShowBox;                                          // 0x0560(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsEnabledDamageAttenuation;                        // 0x0561(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_562[0x2];                                      // 0x0562(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FirstPhasePercentage;                              // 0x0564(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SecondPhasePercentage;                             // 0x0568(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThirdPhasePercentage;                              // 0x056C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FirstPhaseDamage;                                  // 0x0570(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SecondPhaseDamage;                                 // 0x0574(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ThirdPhaseDamage;                                  // 0x0578(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AJBDamageAffecterBase(int32 EntryPoint);
	void OnAddToMultipleLocationsCore(const struct FVector& Location, float Scale_0, float Radius_0, int32 SerialNumber_0, bool bRestore, float CurrentTime_0, bool StartWithRandamDelayGionAndSE);
	void SyncAffecterCore(const class ABP_AJBInGameWatcherCamera_C* WatcherCamera, const TArray<struct FVector>& MultipleLocations_0, const TArray<float>& MultipleScales_0, const TArray<float>& MultipleRadiuses, const TArray<float>& CurrentTimes_0);
	void OnWatchTarget_Server(class ABP_AJBInGameWatcherCamera_C* WatcherCamera, class AActor* BeforeViewTarget, class AActor* NewViewTarget);
	void TryRequestGion();
	void OnBecomeLastSurvivor_All(bool bBitesTheDust);
	void MC_OnRemoveFromMultipleLocations(int32 Index_0);
	void OnRemoveFromMultipleLocations(int32 Index_0);
	void MC_OnAddToMultipleLocations(const struct FVector& Location, float Scale_0, float Radius_0, int32 SerialNumber_0);
	void OnAddToMultipleLocations_Server(const struct FVector& Location, int32 Index_0, int32 SerialNumber_0);
	void MC_OnAddPassiveFirst(bool bAddSelf);
	void OnAddPassiveFirst(bool bAddSelf, class AAJBInGameCharacterBase* TargetCharacter);
	void CancelAffecter();
	void OnTheWorldChanged_Server(bool bEnable);
	void MC_TheWorldAleady(bool bEnable);
	void MC_OnNoDamageChanged(class UObject* TargetActor, class ABP_AJBInGameCharacter_C* OperaatorCharacter, bool bNewFlag);
	void ReceiveDestroyed();
	void MC_AreaOut(class AActor* TargetActor, class ABP_AJBInGameCharacter_C* OperatorCharacter);
	void MC_AreaIn(class AActor* TargetActor, class ABP_AJBInGameCharacter_C* OperatorCharacter, bool bNoDamage);
	void AreaInterval(const struct FST_DamageAffecterInfo& AffecterInfo);
	void CheckDamageInterval();
	void AreaContinue(class AActor* Actor);
	void AreaOut(class AActor* Actor);
	void AreaIn(class AActor* Actor);
	void UpdateInfo();
	void UpdateActors();
	void AreaTick();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void OnTheWorldChanged(bool bEnableTheWorld_0);
	void NotifyTheWorld(class AAJBInGameCharacter* Operator, float Time, EGeneralTiming Timing, bool bEnable, bool bOperatorIsEmpty);
	void UserConstructionScript();
	void GetScaledRadius(int32 Index_0, float* Radius_0);
	void GetActorsOnlyAfterExists(TArray<class AActor*>& BeforeActors, TArray<class AActor*>& AfterActors, TArray<class AActor*>* ActorList);
	void ForceResetAreaInfo();
	void DrawDebugSphere();
	void GetPartitionLocation(int32 Index_0, struct FVector* Location);
	void CalcAttackDistance(class AActor* DamagedActor, float* AttackDistance);
	void CheckTimeLimit(bool* bTimeLimit);
	void UpdateCurrentTime(float DeltaSeconds);
	void ShouldEnableInitialTheWorld_Server(bool* Should);
	void GetLocationAsCheckArea(TArray<struct FVector>* Location);
	void GetRotationAsCheckArea(struct FRotator* Rotation);
	void GetPoliticDamage(const struct FST_DamageAffecterInfo& AffecterInfo, int32* Damage);
	void AddToMultipleLocations(const struct FVector& NewLocation, float InScale, int32 InSerialNumber, float InDelayTime);
	void RemoveFromMultipleLocations(int32 RemovedIndex);
	void UpdateMultipleLocationsValid();
	void CheckAreaInEvenOne(class AActor* Target, TArray<struct FVector>& Locations, const struct FRotator& Rotation, float Length_0, int32 PartitionNum_0, bool bUseBoxCollision_0, const struct FVector& BoxExtent_0, bool* bTarget, int32* AffecterIndex);
	void TryGivePassive();
	void CalcScale(int32 Index_0, float* Scale_0);
	void CheckCancel(bool* bCancel);
	void PossibleGivePassive(class AAJBInGameCharacterBase* AJBCharacterBase, bool* bPossible);
	void RequestRangeAttackParticle(const struct FVector& RelativeLocation, float Scale_0, bool bRestore);
	void RequestActiveSE(const struct FVector& Location);
	void UpdateGionInterval(float DeltaSeconds);
	void RequestActiveGion(const struct FVector& BaseLocation, float InRadius);
	void GetSerialNumber(int32 Index_0, int32* SerialNumber_0);
	void GetCurrentHitIndex(class AActor* Actor, int32* AffecterIndex);
	void GetScaledRadiuses(TArray<float>* ScaledRadiuses);
	void GetRangeAttackTag(bool bRestore, struct FGameplayTag* RangeAttackTag_0);
	void TryEnableTheWorld(const class FString& Timing);
	void GetActiveTimeOnMultipleLocations(int32 Index_0, float* CurrentTime_0);
	void CheckActive(int32 Index_0, bool* bActive);
	void DrawDebugBox();
	void GiveDamage(const struct FST_DamageAffecterInfo& AffecterInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AJBDamageAffecterBase_C">();
	}
	static class ABP_AJBDamageAffecterBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AJBDamageAffecterBase_C>();
	}
};
static_assert(alignof(ABP_AJBDamageAffecterBase_C) == 0x000008, "Wrong alignment on ABP_AJBDamageAffecterBase_C");
static_assert(sizeof(ABP_AJBDamageAffecterBase_C) == 0x000580, "Wrong size on ABP_AJBDamageAffecterBase_C");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, UberGraphFrame) == 0x000328, "Member 'ABP_AJBDamageAffecterBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, DefaultSceneRoot) == 0x000330, "Member 'ABP_AJBDamageAffecterBase_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, Radius) == 0x000338, "Member 'ABP_AJBDamageAffecterBase_C::Radius' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, Length) == 0x00033C, "Member 'ABP_AJBDamageAffecterBase_C::Length' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, PartitionNum) == 0x000340, "Member 'ABP_AJBDamageAffecterBase_C::PartitionNum' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, Scale) == 0x000344, "Member 'ABP_AJBDamageAffecterBase_C::Scale' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, PrevAreaInActors) == 0x000348, "Member 'ABP_AJBDamageAffecterBase_C::PrevAreaInActors' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, CurrentAreaInActors) == 0x000358, "Member 'ABP_AJBDamageAffecterBase_C::CurrentAreaInActors' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, AreaInfoList) == 0x000368, "Member 'ABP_AJBDamageAffecterBase_C::AreaInfoList' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, DamageInterval_s_) == 0x000378, "Member 'ABP_AJBDamageAffecterBase_C::DamageInterval_s_' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, AffecterDamage) == 0x00037C, "Member 'ABP_AJBDamageAffecterBase_C::AffecterDamage' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bShowSphere) == 0x000380, "Member 'ABP_AJBDamageAffecterBase_C::bShowSphere' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, RangeAttackTag) == 0x000388, "Member 'ABP_AJBDamageAffecterBase_C::RangeAttackTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, RangeAttackTagOnRestore) == 0x000390, "Member 'ABP_AJBDamageAffecterBase_C::RangeAttackTagOnRestore' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, TargetAddedEffectTag) == 0x000398, "Member 'ABP_AJBDamageAffecterBase_C::TargetAddedEffectTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, SkillTag) == 0x0003A0, "Member 'ABP_AJBDamageAffecterBase_C::SkillTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, DamageLoopSETag) == 0x0003A8, "Member 'ABP_AJBDamageAffecterBase_C::DamageLoopSETag' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, ParticleEffect) == 0x0003B0, "Member 'ABP_AJBDamageAffecterBase_C::ParticleEffect' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bEnableTheWorld) == 0x0003B8, "Member 'ABP_AJBDamageAffecterBase_C::bEnableTheWorld' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, SerialNumber) == 0x0003BC, "Member 'ABP_AJBDamageAffecterBase_C::SerialNumber' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bLaunchFromSeparatedStand) == 0x0003C0, "Member 'ABP_AJBDamageAffecterBase_C::bLaunchFromSeparatedStand' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, PastTimePrevTick) == 0x0003C4, "Member 'ABP_AJBDamageAffecterBase_C::PastTimePrevTick' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, CurrentTime) == 0x0003C8, "Member 'ABP_AJBDamageAffecterBase_C::CurrentTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, ActiveTime) == 0x0003CC, "Member 'ABP_AJBDamageAffecterBase_C::ActiveTime' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bUseOwnerTransform) == 0x0003D0, "Member 'ABP_AJBDamageAffecterBase_C::bUseOwnerTransform' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bAsProjectile) == 0x0003D1, "Member 'ABP_AJBDamageAffecterBase_C::bAsProjectile' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bUseMultipleLocations) == 0x0003D2, "Member 'ABP_AJBDamageAffecterBase_C::bUseMultipleLocations' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, MultipleLocations) == 0x0003D8, "Member 'ABP_AJBDamageAffecterBase_C::MultipleLocations' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, CurrentTimes) == 0x0003E8, "Member 'ABP_AJBDamageAffecterBase_C::CurrentTimes' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, DelayTimes) == 0x0003F8, "Member 'ABP_AJBDamageAffecterBase_C::DelayTimes' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, MultipleScales) == 0x000408, "Member 'ABP_AJBDamageAffecterBase_C::MultipleScales' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, ActiveGionIntervals) == 0x000418, "Member 'ABP_AJBDamageAffecterBase_C::ActiveGionIntervals' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, ParticleEffectList) == 0x000428, "Member 'ABP_AJBDamageAffecterBase_C::ParticleEffectList' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, SerialNumbers) == 0x000438, "Member 'ABP_AJBDamageAffecterBase_C::SerialNumbers' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, PrevAreaInIndexes) == 0x000448, "Member 'ABP_AJBDamageAffecterBase_C::PrevAreaInIndexes' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, CurrrentAreaInIndexes) == 0x000458, "Member 'ABP_AJBDamageAffecterBase_C::CurrrentAreaInIndexes' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, ActiveSEList) == 0x000468, "Member 'ABP_AJBDamageAffecterBase_C::ActiveSEList' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bValidMultipleLocations) == 0x000478, "Member 'ABP_AJBDamageAffecterBase_C::bValidMultipleLocations' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, KillCharacterList) == 0x000480, "Member 'ABP_AJBDamageAffecterBase_C::KillCharacterList' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, OnNotifyResultServer) == 0x000490, "Member 'ABP_AJBDamageAffecterBase_C::OnNotifyResultServer' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bIgnoreMovableStand) == 0x0004A0, "Member 'ABP_AJBDamageAffecterBase_C::bIgnoreMovableStand' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bCheckUnder) == 0x0004A1, "Member 'ABP_AJBDamageAffecterBase_C::bCheckUnder' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, ValidGroundOffsetZ) == 0x0004A4, "Member 'ABP_AJBDamageAffecterBase_C::ValidGroundOffsetZ' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bConsiderTimeStopRangeAttackParticle) == 0x0004A8, "Member 'ABP_AJBDamageAffecterBase_C::bConsiderTimeStopRangeAttackParticle' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, PassiveSkillTag) == 0x0004B0, "Member 'ABP_AJBDamageAffecterBase_C::PassiveSkillTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bIgnoreGivePassiveOnStealth) == 0x0004B8, "Member 'ABP_AJBDamageAffecterBase_C::bIgnoreGivePassiveOnStealth' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bIncludeSelf) == 0x0004B9, "Member 'ABP_AJBDamageAffecterBase_C::bIncludeSelf' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bShouldNotifyOnPassiveAddedFirst) == 0x0004BA, "Member 'ABP_AJBDamageAffecterBase_C::bShouldNotifyOnPassiveAddedFirst' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, AddPassiveFirstVoiceTag) == 0x0004C0, "Member 'ABP_AJBDamageAffecterBase_C::AddPassiveFirstVoiceTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, AddPassiveFirstSelfVoiceTag) == 0x0004C8, "Member 'ABP_AJBDamageAffecterBase_C::AddPassiveFirstSelfVoiceTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bShouldNotifyOnAreaIn) == 0x0004D0, "Member 'ABP_AJBDamageAffecterBase_C::bShouldNotifyOnAreaIn' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bCancelOnOwnerProhibitioned) == 0x0004D1, "Member 'ABP_AJBDamageAffecterBase_C::bCancelOnOwnerProhibitioned' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bCancelOnOwnerCriticaled) == 0x0004D2, "Member 'ABP_AJBDamageAffecterBase_C::bCancelOnOwnerCriticaled' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bCancelOnOwnerDead) == 0x0004D3, "Member 'ABP_AJBDamageAffecterBase_C::bCancelOnOwnerDead' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bCancelOnBecomLastSurvivor) == 0x0004D4, "Member 'ABP_AJBDamageAffecterBase_C::bCancelOnBecomLastSurvivor' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bGivePassiveOnce) == 0x0004D5, "Member 'ABP_AJBDamageAffecterBase_C::bGivePassiveOnce' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, PassiveAddedCharacterList) == 0x0004D8, "Member 'ABP_AJBDamageAffecterBase_C::PassiveAddedCharacterList' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bShouldManagementMultipleLocationsEffect) == 0x0004E8, "Member 'ABP_AJBDamageAffecterBase_C::bShouldManagementMultipleLocationsEffect' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bUseSerialNumbers) == 0x0004E9, "Member 'ABP_AJBDamageAffecterBase_C::bUseSerialNumbers' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, MultipleLocationsActorClass) == 0x0004F0, "Member 'ABP_AJBDamageAffecterBase_C::MultipleLocationsActorClass' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, CheckQueuedVoiceTagsOnPassiveAddedFirst) == 0x0004F8, "Member 'ABP_AJBDamageAffecterBase_C::CheckQueuedVoiceTagsOnPassiveAddedFirst' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, ActiveSETag) == 0x000508, "Member 'ABP_AJBDamageAffecterBase_C::ActiveSETag' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, ActiveSE) == 0x000510, "Member 'ABP_AJBDamageAffecterBase_C::ActiveSE' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, ActiveGionTag) == 0x000518, "Member 'ABP_AJBDamageAffecterBase_C::ActiveGionTag' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, TimerHandleActiveGion) == 0x000520, "Member 'ABP_AJBDamageAffecterBase_C::TimerHandleActiveGion' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, ActiveGionInterval) == 0x000528, "Member 'ABP_AJBDamageAffecterBase_C::ActiveGionInterval' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, RadiusRateForRandomActiveGion) == 0x00052C, "Member 'ABP_AJBDamageAffecterBase_C::RadiusRateForRandomActiveGion' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bTempQueued) == 0x000530, "Member 'ABP_AJBDamageAffecterBase_C::bTempQueued' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bSyncOnCahngeViewTarget) == 0x000531, "Member 'ABP_AJBDamageAffecterBase_C::bSyncOnCahngeViewTarget' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, WaitingReplicateTimeOnChangeViewTarget) == 0x000534, "Member 'ABP_AJBDamageAffecterBase_C::WaitingReplicateTimeOnChangeViewTarget' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, MaxTimeSEReplayRandomization) == 0x000538, "Member 'ABP_AJBDamageAffecterBase_C::MaxTimeSEReplayRandomization' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bRegisterToBurningActor_Multiple_) == 0x00053C, "Member 'ABP_AJBDamageAffecterBase_C::bRegisterToBurningActor_Multiple_' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, ActiveBurningDummyActors) == 0x000540, "Member 'ABP_AJBDamageAffecterBase_C::ActiveBurningDummyActors' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bBurningActorSamePriorityAsCharacter) == 0x000550, "Member 'ABP_AJBDamageAffecterBase_C::bBurningActorSamePriorityAsCharacter' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bCancelledAffecter) == 0x000551, "Member 'ABP_AJBDamageAffecterBase_C::bCancelledAffecter' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bUseBoxCollision) == 0x000552, "Member 'ABP_AJBDamageAffecterBase_C::bUseBoxCollision' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, BoxExtent) == 0x000554, "Member 'ABP_AJBDamageAffecterBase_C::BoxExtent' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, bShowBox) == 0x000560, "Member 'ABP_AJBDamageAffecterBase_C::bShowBox' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, IsEnabledDamageAttenuation) == 0x000561, "Member 'ABP_AJBDamageAffecterBase_C::IsEnabledDamageAttenuation' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, FirstPhasePercentage) == 0x000564, "Member 'ABP_AJBDamageAffecterBase_C::FirstPhasePercentage' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, SecondPhasePercentage) == 0x000568, "Member 'ABP_AJBDamageAffecterBase_C::SecondPhasePercentage' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, ThirdPhasePercentage) == 0x00056C, "Member 'ABP_AJBDamageAffecterBase_C::ThirdPhasePercentage' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, FirstPhaseDamage) == 0x000570, "Member 'ABP_AJBDamageAffecterBase_C::FirstPhaseDamage' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, SecondPhaseDamage) == 0x000574, "Member 'ABP_AJBDamageAffecterBase_C::SecondPhaseDamage' has a wrong offset!");
static_assert(offsetof(ABP_AJBDamageAffecterBase_C, ThirdPhaseDamage) == 0x000578, "Member 'ABP_AJBDamageAffecterBase_C::ThirdPhaseDamage' has a wrong offset!");

}

