#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AJBTrainingSequence

#include "Basic.hpp"

#include "AJB_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function BP_AJBTrainingSequence.BP_AJBTrainingSequence_C.ExecuteUbergraph_BP_AJBTrainingSequence
// 0x01E0 (0x01E0 - 0x0000)
struct BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UAJBWindowWidget* TargetWidget)> K2Node_CreateDelegate_OutputDelegate;      // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	class UWB_PpBuyWindow_C*                      CallFunc_Create_ReturnValue;                       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable; // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UAJBWindowWidget* TargetWidget)> K2Node_CreateDelegate_OutputDelegate1;     // 0x0028(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_Window_SelectOperationType_C*       CallFunc_Create_ReturnValue1;                      // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate2;             // 0x0050(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdatePPCheckTimer_bTimerZero;            // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAJBGameInstance_bSuccess;              // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AJBGameInstance_C*                  CallFunc_GetAJBGameInstance_AJB_Game_Instance;     // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBInGamePlayerControllerBP_bSuccess;  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGamePlayerController_C*        CallFunc_GetAJBInGamePlayerControllerBP_In_Game_Player_Controller_BP; // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_GetCurrentFlowState_FlowState;            // 0x0088(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_GameplayTag_ReturnValue;       // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAJBInGameHUD_BP_bSuccess;              // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_93[0x5];                                       // 0x0093(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameHUD_C*                     CallFunc_GetAJBInGameHUD_BP_In_Game_HUD;           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActiveUI_bActive;                       // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBWindowWidget*                       K2Node_CustomEvent_TargetWidget3;                  // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAJBWindowWidget*                       K2Node_CustomEvent_TargetWidget2;                  // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBWindowWidget*                       K2Node_CustomEvent_TargetWidget1;                  // 0x00C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBInGameHUD_BP_bSuccess1;             // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameHUD_C*                     CallFunc_GetAJBInGameHUD_BP_In_Game_HUD1;          // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue1;             // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBInGameHUD_BP_bSuccess2;             // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameHUD_C*                     CallFunc_GetAJBInGameHUD_BP_In_Game_HUD2;          // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSelectedBuy_bSelected;                  // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x00EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable1;                // 0x00EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UAJBWindowWidget* TargetWidget)> K2Node_CreateDelegate_OutputDelegate3;     // 0x00F0(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue3;                     // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue4;                     // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_102[0x6];                                      // 0x0102(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_CommonWIndow_S_C*                   CallFunc_Create_ReturnValue2;                      // 0x0108(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAJBConfirmResult                             CallFunc_GetButtonResult_Result;                   // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue5;                     // 0x0112(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue6;                     // 0x0113(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAJBInGameHUD_BP_bSuccess3;             // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameHUD_C*                     CallFunc_GetAJBInGameHUD_BP_In_Game_HUD3;          // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue2;             // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate4;             // 0x0128(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsAJBArcadeTerminateGame_ReturnValue;     // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue7;                     // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable1;                      // 0x013A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable1; // 0x013B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAJBWindowWidget*                       K2Node_CustomEvent_TargetWidget;                   // 0x0140(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue3;             // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAJBConfirmResult                             CallFunc_GetButtonResult_Result1;                  // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum1_CmpSuccess;                     // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14B[0x5];                                      // 0x014B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UAJBWindowWidget* TargetWidget)> K2Node_CreateDelegate_OutputDelegate5;     // 0x0150(0x0010)(ZeroConstructor, NoDestructor)
	class UWB_CommonWIndow_S_C*                   CallFunc_Create_ReturnValue3;                      // 0x0160(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldActivateTrainingSequence_ShouldActivate; // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldForceExitWhenNoPP_ShouldForceExit;  // 0x0169(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16A[0x6];                                      // 0x016A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetConfirmExitText_ReturnValue;           // 0x0170(0x0018)()
	class FText                                   CallFunc_GetNoPPForceExitText_ReturnValue;         // 0x0188(0x0018)()
	class FText                                   CallFunc_GetTerminateGameText_ReturnValue;         // 0x01A0(0x0018)()
	bool                                          K2Node_CustomEvent_bTimeLimit;                     // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAJBInGameHUD_BP_bSuccess4;             // 0x01B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1BA[0x6];                                      // 0x01BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameHUD_C*                     CallFunc_GetAJBInGameHUD_BP_In_Game_HUD4;          // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PlayModeEquals_bResult;                   // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C9[0x7];                                      // 0x01C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           CallFunc_RequestWwiseEventOnLocal_AkComponent;     // 0x01D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence) == 0x000008, "Wrong alignment on BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence");
static_assert(sizeof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence) == 0x0001E0, "Wrong size on BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, EntryPoint) == 0x000000, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_Create_ReturnValue) == 0x000018, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable) == 0x000020, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, Temp_bool_IsClosed_Variable) == 0x000021, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, K2Node_CreateDelegate_OutputDelegate1) == 0x000028, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::K2Node_CreateDelegate_OutputDelegate1' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_MakeLiteralByte_ReturnValue) == 0x000038, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, Temp_float_Variable) == 0x00003C, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, Temp_bool_Variable) == 0x000040, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_Create_ReturnValue1) == 0x000048, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_Create_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, K2Node_CreateDelegate_OutputDelegate2) == 0x000050, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::K2Node_CreateDelegate_OutputDelegate2' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_IsValid_ReturnValue) == 0x000060, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, K2Node_Event_DeltaSeconds) == 0x000064, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_UpdatePPCheckTimer_bTimerZero) == 0x000068, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_UpdatePPCheckTimer_bTimerZero' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_GetAJBGameInstance_bSuccess) == 0x000069, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_GetAJBGameInstance_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_GetAJBGameInstance_AJB_Game_Instance) == 0x000070, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_GetAJBGameInstance_AJB_Game_Instance' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_GetAJBInGamePlayerControllerBP_bSuccess) == 0x000078, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_GetAJBInGamePlayerControllerBP_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_GetAJBInGamePlayerControllerBP_In_Game_Player_Controller_BP) == 0x000080, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_GetAJBInGamePlayerControllerBP_In_Game_Player_Controller_BP' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_GetCurrentFlowState_FlowState) == 0x000088, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_GetCurrentFlowState_FlowState' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_EqualEqual_GameplayTag_ReturnValue) == 0x000090, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_EqualEqual_GameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000091, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_GetAJBInGameHUD_BP_bSuccess) == 0x000092, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_GetAJBInGameHUD_BP_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_GetAJBInGameHUD_BP_In_Game_HUD) == 0x000098, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_GetAJBInGameHUD_BP_In_Game_HUD' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_IsActiveUI_bActive) == 0x0000A0, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_IsActiveUI_bActive' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, K2Node_CustomEvent_TargetWidget3) == 0x0000A8, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::K2Node_CustomEvent_TargetWidget3' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, K2Node_CustomEvent_TargetWidget2) == 0x0000B0, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::K2Node_CustomEvent_TargetWidget2' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, Temp_bool_Has_Been_Initd_Variable) == 0x0000B8, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, K2Node_CustomEvent_TargetWidget1) == 0x0000C0, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::K2Node_CustomEvent_TargetWidget1' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_GetAJBInGameHUD_BP_bSuccess1) == 0x0000C8, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_GetAJBInGameHUD_BP_bSuccess1' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_GetAJBInGameHUD_BP_In_Game_HUD1) == 0x0000D0, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_GetAJBInGameHUD_BP_In_Game_HUD1' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_MakeLiteralByte_ReturnValue1) == 0x0000D8, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_MakeLiteralByte_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_GetAJBInGameHUD_BP_bSuccess2) == 0x0000D9, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_GetAJBInGameHUD_BP_bSuccess2' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_GetAJBInGameHUD_BP_In_Game_HUD2) == 0x0000E0, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_GetAJBInGameHUD_BP_In_Game_HUD2' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_IsSelectedBuy_bSelected) == 0x0000E8, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_IsSelectedBuy_bSelected' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_IsValid_ReturnValue1) == 0x0000E9, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_IsValid_ReturnValue2) == 0x0000EA, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, Temp_bool_Has_Been_Initd_Variable1) == 0x0000EB, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::Temp_bool_Has_Been_Initd_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, K2Node_CreateDelegate_OutputDelegate3) == 0x0000F0, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::K2Node_CreateDelegate_OutputDelegate3' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_IsValid_ReturnValue3) == 0x000100, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_IsValid_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_IsValid_ReturnValue4) == 0x000101, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_IsValid_ReturnValue4' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_Create_ReturnValue2) == 0x000108, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_Create_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_GetButtonResult_Result) == 0x000110, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_GetButtonResult_Result' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, K2Node_SwitchEnum_CmpSuccess) == 0x000111, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_IsValid_ReturnValue5) == 0x000112, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_IsValid_ReturnValue5' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_IsValid_ReturnValue6) == 0x000113, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_IsValid_ReturnValue6' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_GetAJBInGameHUD_BP_bSuccess3) == 0x000114, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_GetAJBInGameHUD_BP_bSuccess3' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_GetAJBInGameHUD_BP_In_Game_HUD3) == 0x000118, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_GetAJBInGameHUD_BP_In_Game_HUD3' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_MakeLiteralByte_ReturnValue2) == 0x000120, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_MakeLiteralByte_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, K2Node_CreateDelegate_OutputDelegate4) == 0x000128, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::K2Node_CreateDelegate_OutputDelegate4' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_IsAJBArcadeTerminateGame_ReturnValue) == 0x000138, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_IsAJBArcadeTerminateGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_IsValid_ReturnValue7) == 0x000139, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_IsValid_ReturnValue7' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, Temp_bool_IsClosed_Variable1) == 0x00013A, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::Temp_bool_IsClosed_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable1) == 0x00013B, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, K2Node_CustomEvent_TargetWidget) == 0x000140, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::K2Node_CustomEvent_TargetWidget' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_MakeLiteralByte_ReturnValue3) == 0x000148, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_MakeLiteralByte_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_GetButtonResult_Result1) == 0x000149, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_GetButtonResult_Result1' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, K2Node_SwitchEnum1_CmpSuccess) == 0x00014A, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::K2Node_SwitchEnum1_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, K2Node_CreateDelegate_OutputDelegate5) == 0x000150, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::K2Node_CreateDelegate_OutputDelegate5' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_Create_ReturnValue3) == 0x000160, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_Create_ReturnValue3' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_ShouldActivateTrainingSequence_ShouldActivate) == 0x000168, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_ShouldActivateTrainingSequence_ShouldActivate' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_ShouldForceExitWhenNoPP_ShouldForceExit) == 0x000169, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_ShouldForceExitWhenNoPP_ShouldForceExit' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_GetConfirmExitText_ReturnValue) == 0x000170, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_GetConfirmExitText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_GetNoPPForceExitText_ReturnValue) == 0x000188, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_GetNoPPForceExitText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_GetTerminateGameText_ReturnValue) == 0x0001A0, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_GetTerminateGameText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, K2Node_CustomEvent_bTimeLimit) == 0x0001B8, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::K2Node_CustomEvent_bTimeLimit' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_GetAJBInGameHUD_BP_bSuccess4) == 0x0001B9, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_GetAJBInGameHUD_BP_bSuccess4' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_GetAJBInGameHUD_BP_In_Game_HUD4) == 0x0001C0, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_GetAJBInGameHUD_BP_In_Game_HUD4' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_PlayModeEquals_bResult) == 0x0001C8, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_PlayModeEquals_bResult' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, CallFunc_RequestWwiseEventOnLocal_AkComponent) == 0x0001D0, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::CallFunc_RequestWwiseEventOnLocal_AkComponent' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence, K2Node_Select_Default) == 0x0001D8, "Member 'BP_AJBTrainingSequence_C_ExecuteUbergraph_BP_AJBTrainingSequence::K2Node_Select_Default' has a wrong offset!");

// Function BP_AJBTrainingSequence.BP_AJBTrainingSequence_C.OnDecidedSelectOperationTypeButton
// 0x0001 (0x0001 - 0x0000)
struct BP_AJBTrainingSequence_C_OnDecidedSelectOperationTypeButton final
{
public:
	bool                                          bTimeLimit;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBTrainingSequence_C_OnDecidedSelectOperationTypeButton) == 0x000001, "Wrong alignment on BP_AJBTrainingSequence_C_OnDecidedSelectOperationTypeButton");
static_assert(sizeof(BP_AJBTrainingSequence_C_OnDecidedSelectOperationTypeButton) == 0x000001, "Wrong size on BP_AJBTrainingSequence_C_OnDecidedSelectOperationTypeButton");
static_assert(offsetof(BP_AJBTrainingSequence_C_OnDecidedSelectOperationTypeButton, bTimeLimit) == 0x000000, "Member 'BP_AJBTrainingSequence_C_OnDecidedSelectOperationTypeButton::bTimeLimit' has a wrong offset!");

// Function BP_AJBTrainingSequence.BP_AJBTrainingSequence_C.OnClosedTrainingEndConfirm
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBTrainingSequence_C_OnClosedTrainingEndConfirm final
{
public:
	class UAJBWindowWidget*                       TargetWidget;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBTrainingSequence_C_OnClosedTrainingEndConfirm) == 0x000008, "Wrong alignment on BP_AJBTrainingSequence_C_OnClosedTrainingEndConfirm");
static_assert(sizeof(BP_AJBTrainingSequence_C_OnClosedTrainingEndConfirm) == 0x000008, "Wrong size on BP_AJBTrainingSequence_C_OnClosedTrainingEndConfirm");
static_assert(offsetof(BP_AJBTrainingSequence_C_OnClosedTrainingEndConfirm, TargetWidget) == 0x000000, "Member 'BP_AJBTrainingSequence_C_OnClosedTrainingEndConfirm::TargetWidget' has a wrong offset!");

// Function BP_AJBTrainingSequence.BP_AJBTrainingSequence_C.OnClosedGameEndConfirm
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBTrainingSequence_C_OnClosedGameEndConfirm final
{
public:
	class UAJBWindowWidget*                       TargetWidget;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBTrainingSequence_C_OnClosedGameEndConfirm) == 0x000008, "Wrong alignment on BP_AJBTrainingSequence_C_OnClosedGameEndConfirm");
static_assert(sizeof(BP_AJBTrainingSequence_C_OnClosedGameEndConfirm) == 0x000008, "Wrong size on BP_AJBTrainingSequence_C_OnClosedGameEndConfirm");
static_assert(offsetof(BP_AJBTrainingSequence_C_OnClosedGameEndConfirm, TargetWidget) == 0x000000, "Member 'BP_AJBTrainingSequence_C_OnClosedGameEndConfirm::TargetWidget' has a wrong offset!");

// Function BP_AJBTrainingSequence.BP_AJBTrainingSequence_C.OnClosedPPBuyWindow
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBTrainingSequence_C_OnClosedPPBuyWindow final
{
public:
	class UAJBWindowWidget*                       TargetWidget;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBTrainingSequence_C_OnClosedPPBuyWindow) == 0x000008, "Wrong alignment on BP_AJBTrainingSequence_C_OnClosedPPBuyWindow");
static_assert(sizeof(BP_AJBTrainingSequence_C_OnClosedPPBuyWindow) == 0x000008, "Wrong size on BP_AJBTrainingSequence_C_OnClosedPPBuyWindow");
static_assert(offsetof(BP_AJBTrainingSequence_C_OnClosedPPBuyWindow, TargetWidget) == 0x000000, "Member 'BP_AJBTrainingSequence_C_OnClosedPPBuyWindow::TargetWidget' has a wrong offset!");

// Function BP_AJBTrainingSequence.BP_AJBTrainingSequence_C.OnClosedPPCheckConfirm
// 0x0008 (0x0008 - 0x0000)
struct BP_AJBTrainingSequence_C_OnClosedPPCheckConfirm final
{
public:
	class UAJBWindowWidget*                       TargetWidget;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBTrainingSequence_C_OnClosedPPCheckConfirm) == 0x000008, "Wrong alignment on BP_AJBTrainingSequence_C_OnClosedPPCheckConfirm");
static_assert(sizeof(BP_AJBTrainingSequence_C_OnClosedPPCheckConfirm) == 0x000008, "Wrong size on BP_AJBTrainingSequence_C_OnClosedPPCheckConfirm");
static_assert(offsetof(BP_AJBTrainingSequence_C_OnClosedPPCheckConfirm, TargetWidget) == 0x000000, "Member 'BP_AJBTrainingSequence_C_OnClosedPPCheckConfirm::TargetWidget' has a wrong offset!");

// Function BP_AJBTrainingSequence.BP_AJBTrainingSequence_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_AJBTrainingSequence_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBTrainingSequence_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_AJBTrainingSequence_C_ReceiveTick");
static_assert(sizeof(BP_AJBTrainingSequence_C_ReceiveTick) == 0x000004, "Wrong size on BP_AJBTrainingSequence_C_ReceiveTick");
static_assert(offsetof(BP_AJBTrainingSequence_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_AJBTrainingSequence_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_AJBTrainingSequence.BP_AJBTrainingSequence_C.UpdatePPCheckTimer
// 0x0020 (0x0020 - 0x0000)
struct BP_AJBTrainingSequence_C_UpdatePPCheckTimer final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTimerZero;                                        // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAJBInGameHUD_BP_bSuccess;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameHUD_C*                     CallFunc_GetAJBInGameHUD_BP_In_Game_HUD;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBTrainingSequence_C_UpdatePPCheckTimer) == 0x000008, "Wrong alignment on BP_AJBTrainingSequence_C_UpdatePPCheckTimer");
static_assert(sizeof(BP_AJBTrainingSequence_C_UpdatePPCheckTimer) == 0x000020, "Wrong size on BP_AJBTrainingSequence_C_UpdatePPCheckTimer");
static_assert(offsetof(BP_AJBTrainingSequence_C_UpdatePPCheckTimer, Delta) == 0x000000, "Member 'BP_AJBTrainingSequence_C_UpdatePPCheckTimer::Delta' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_UpdatePPCheckTimer, bTimerZero) == 0x000004, "Member 'BP_AJBTrainingSequence_C_UpdatePPCheckTimer::bTimerZero' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_UpdatePPCheckTimer, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000005, "Member 'BP_AJBTrainingSequence_C_UpdatePPCheckTimer::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_UpdatePPCheckTimer, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_AJBTrainingSequence_C_UpdatePPCheckTimer::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_UpdatePPCheckTimer, CallFunc_FMax_ReturnValue) == 0x00000C, "Member 'BP_AJBTrainingSequence_C_UpdatePPCheckTimer::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_UpdatePPCheckTimer, CallFunc_GetAJBInGameHUD_BP_bSuccess) == 0x000010, "Member 'BP_AJBTrainingSequence_C_UpdatePPCheckTimer::CallFunc_GetAJBInGameHUD_BP_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_UpdatePPCheckTimer, CallFunc_GetAJBInGameHUD_BP_In_Game_HUD) == 0x000018, "Member 'BP_AJBTrainingSequence_C_UpdatePPCheckTimer::CallFunc_GetAJBInGameHUD_BP_In_Game_HUD' has a wrong offset!");

// Function BP_AJBTrainingSequence.BP_AJBTrainingSequence_C.FinalizeSequence
// 0x0010 (0x0010 - 0x0000)
struct BP_AJBTrainingSequence_C_FinalizeSequence final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue1;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue2;                     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetAJBInGameHUD_BP_bSuccess;              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_AJBInGameHUD_C*                     CallFunc_GetAJBInGameHUD_BP_In_Game_HUD;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AJBTrainingSequence_C_FinalizeSequence) == 0x000008, "Wrong alignment on BP_AJBTrainingSequence_C_FinalizeSequence");
static_assert(sizeof(BP_AJBTrainingSequence_C_FinalizeSequence) == 0x000010, "Wrong size on BP_AJBTrainingSequence_C_FinalizeSequence");
static_assert(offsetof(BP_AJBTrainingSequence_C_FinalizeSequence, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_AJBTrainingSequence_C_FinalizeSequence::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_FinalizeSequence, CallFunc_IsValid_ReturnValue1) == 0x000001, "Member 'BP_AJBTrainingSequence_C_FinalizeSequence::CallFunc_IsValid_ReturnValue1' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_FinalizeSequence, CallFunc_IsValid_ReturnValue2) == 0x000002, "Member 'BP_AJBTrainingSequence_C_FinalizeSequence::CallFunc_IsValid_ReturnValue2' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_FinalizeSequence, CallFunc_GetAJBInGameHUD_BP_bSuccess) == 0x000003, "Member 'BP_AJBTrainingSequence_C_FinalizeSequence::CallFunc_GetAJBInGameHUD_BP_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_FinalizeSequence, CallFunc_GetAJBInGameHUD_BP_In_Game_HUD) == 0x000008, "Member 'BP_AJBTrainingSequence_C_FinalizeSequence::CallFunc_GetAJBInGameHUD_BP_In_Game_HUD' has a wrong offset!");

// Function BP_AJBTrainingSequence.BP_AJBTrainingSequence_C.ShouldActivateTrainingSequence
// 0x000F (0x000F - 0x0000)
struct BP_AJBTrainingSequence_C_ShouldActivateTrainingSequence final
{
public:
	bool                                          ShouldActivate;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayMode                                     Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable1;                               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable2;                               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable3;                               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable4;                               // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable5;                               // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable6;                               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable7;                               // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable8;                               // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable9;                               // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable10;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayMode                                     CallFunc_GetPlayMode_PlayMode;                     // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBTrainingSequence_C_ShouldActivateTrainingSequence) == 0x000001, "Wrong alignment on BP_AJBTrainingSequence_C_ShouldActivateTrainingSequence");
static_assert(sizeof(BP_AJBTrainingSequence_C_ShouldActivateTrainingSequence) == 0x00000F, "Wrong size on BP_AJBTrainingSequence_C_ShouldActivateTrainingSequence");
static_assert(offsetof(BP_AJBTrainingSequence_C_ShouldActivateTrainingSequence, ShouldActivate) == 0x000000, "Member 'BP_AJBTrainingSequence_C_ShouldActivateTrainingSequence::ShouldActivate' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ShouldActivateTrainingSequence, Temp_byte_Variable) == 0x000001, "Member 'BP_AJBTrainingSequence_C_ShouldActivateTrainingSequence::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ShouldActivateTrainingSequence, Temp_bool_Variable) == 0x000002, "Member 'BP_AJBTrainingSequence_C_ShouldActivateTrainingSequence::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ShouldActivateTrainingSequence, Temp_bool_Variable1) == 0x000003, "Member 'BP_AJBTrainingSequence_C_ShouldActivateTrainingSequence::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ShouldActivateTrainingSequence, Temp_bool_Variable2) == 0x000004, "Member 'BP_AJBTrainingSequence_C_ShouldActivateTrainingSequence::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ShouldActivateTrainingSequence, Temp_bool_Variable3) == 0x000005, "Member 'BP_AJBTrainingSequence_C_ShouldActivateTrainingSequence::Temp_bool_Variable3' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ShouldActivateTrainingSequence, Temp_bool_Variable4) == 0x000006, "Member 'BP_AJBTrainingSequence_C_ShouldActivateTrainingSequence::Temp_bool_Variable4' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ShouldActivateTrainingSequence, Temp_bool_Variable5) == 0x000007, "Member 'BP_AJBTrainingSequence_C_ShouldActivateTrainingSequence::Temp_bool_Variable5' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ShouldActivateTrainingSequence, Temp_bool_Variable6) == 0x000008, "Member 'BP_AJBTrainingSequence_C_ShouldActivateTrainingSequence::Temp_bool_Variable6' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ShouldActivateTrainingSequence, Temp_bool_Variable7) == 0x000009, "Member 'BP_AJBTrainingSequence_C_ShouldActivateTrainingSequence::Temp_bool_Variable7' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ShouldActivateTrainingSequence, Temp_bool_Variable8) == 0x00000A, "Member 'BP_AJBTrainingSequence_C_ShouldActivateTrainingSequence::Temp_bool_Variable8' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ShouldActivateTrainingSequence, Temp_bool_Variable9) == 0x00000B, "Member 'BP_AJBTrainingSequence_C_ShouldActivateTrainingSequence::Temp_bool_Variable9' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ShouldActivateTrainingSequence, Temp_bool_Variable10) == 0x00000C, "Member 'BP_AJBTrainingSequence_C_ShouldActivateTrainingSequence::Temp_bool_Variable10' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ShouldActivateTrainingSequence, CallFunc_GetPlayMode_PlayMode) == 0x00000D, "Member 'BP_AJBTrainingSequence_C_ShouldActivateTrainingSequence::CallFunc_GetPlayMode_PlayMode' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ShouldActivateTrainingSequence, K2Node_Select_Default) == 0x00000E, "Member 'BP_AJBTrainingSequence_C_ShouldActivateTrainingSequence::K2Node_Select_Default' has a wrong offset!");

// Function BP_AJBTrainingSequence.BP_AJBTrainingSequence_C.ShouldForceExitWhenNoPP
// 0x000F (0x000F - 0x0000)
struct BP_AJBTrainingSequence_C_ShouldForceExitWhenNoPP final
{
public:
	bool                                          ShouldForceExit;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayMode                                     Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable1;                               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable2;                               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable3;                               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable4;                               // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable5;                               // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable6;                               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable7;                               // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable8;                               // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable9;                               // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable10;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPlayMode                                     CallFunc_GetPlayMode_PlayMode;                     // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AJBTrainingSequence_C_ShouldForceExitWhenNoPP) == 0x000001, "Wrong alignment on BP_AJBTrainingSequence_C_ShouldForceExitWhenNoPP");
static_assert(sizeof(BP_AJBTrainingSequence_C_ShouldForceExitWhenNoPP) == 0x00000F, "Wrong size on BP_AJBTrainingSequence_C_ShouldForceExitWhenNoPP");
static_assert(offsetof(BP_AJBTrainingSequence_C_ShouldForceExitWhenNoPP, ShouldForceExit) == 0x000000, "Member 'BP_AJBTrainingSequence_C_ShouldForceExitWhenNoPP::ShouldForceExit' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ShouldForceExitWhenNoPP, Temp_byte_Variable) == 0x000001, "Member 'BP_AJBTrainingSequence_C_ShouldForceExitWhenNoPP::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ShouldForceExitWhenNoPP, Temp_bool_Variable) == 0x000002, "Member 'BP_AJBTrainingSequence_C_ShouldForceExitWhenNoPP::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ShouldForceExitWhenNoPP, Temp_bool_Variable1) == 0x000003, "Member 'BP_AJBTrainingSequence_C_ShouldForceExitWhenNoPP::Temp_bool_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ShouldForceExitWhenNoPP, Temp_bool_Variable2) == 0x000004, "Member 'BP_AJBTrainingSequence_C_ShouldForceExitWhenNoPP::Temp_bool_Variable2' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ShouldForceExitWhenNoPP, Temp_bool_Variable3) == 0x000005, "Member 'BP_AJBTrainingSequence_C_ShouldForceExitWhenNoPP::Temp_bool_Variable3' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ShouldForceExitWhenNoPP, Temp_bool_Variable4) == 0x000006, "Member 'BP_AJBTrainingSequence_C_ShouldForceExitWhenNoPP::Temp_bool_Variable4' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ShouldForceExitWhenNoPP, Temp_bool_Variable5) == 0x000007, "Member 'BP_AJBTrainingSequence_C_ShouldForceExitWhenNoPP::Temp_bool_Variable5' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ShouldForceExitWhenNoPP, Temp_bool_Variable6) == 0x000008, "Member 'BP_AJBTrainingSequence_C_ShouldForceExitWhenNoPP::Temp_bool_Variable6' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ShouldForceExitWhenNoPP, Temp_bool_Variable7) == 0x000009, "Member 'BP_AJBTrainingSequence_C_ShouldForceExitWhenNoPP::Temp_bool_Variable7' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ShouldForceExitWhenNoPP, Temp_bool_Variable8) == 0x00000A, "Member 'BP_AJBTrainingSequence_C_ShouldForceExitWhenNoPP::Temp_bool_Variable8' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ShouldForceExitWhenNoPP, Temp_bool_Variable9) == 0x00000B, "Member 'BP_AJBTrainingSequence_C_ShouldForceExitWhenNoPP::Temp_bool_Variable9' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ShouldForceExitWhenNoPP, Temp_bool_Variable10) == 0x00000C, "Member 'BP_AJBTrainingSequence_C_ShouldForceExitWhenNoPP::Temp_bool_Variable10' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ShouldForceExitWhenNoPP, CallFunc_GetPlayMode_PlayMode) == 0x00000D, "Member 'BP_AJBTrainingSequence_C_ShouldForceExitWhenNoPP::CallFunc_GetPlayMode_PlayMode' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_ShouldForceExitWhenNoPP, K2Node_Select_Default) == 0x00000E, "Member 'BP_AJBTrainingSequence_C_ShouldForceExitWhenNoPP::K2Node_Select_Default' has a wrong offset!");

// Function BP_AJBTrainingSequence.BP_AJBTrainingSequence_C.GetConfirmExitText
// 0x01B0 (0x01B0 - 0x0000)
struct BP_AJBTrainingSequence_C_GetConfirmExitText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	EPlayMode                                     Temp_byte_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0020(0x0018)()
	class FText                                   Temp_text_Variable1;                               // 0x0038(0x0018)()
	class FText                                   Temp_text_Variable2;                               // 0x0050(0x0018)()
	class FText                                   Temp_text_Variable3;                               // 0x0068(0x0018)()
	class FText                                   Temp_text_Variable4;                               // 0x0080(0x0018)()
	class FText                                   Temp_text_Variable5;                               // 0x0098(0x0018)()
	class FText                                   Temp_text_Variable6;                               // 0x00B0(0x0018)()
	class FText                                   Temp_text_Variable7;                               // 0x00C8(0x0018)()
	class FText                                   Temp_text_Variable8;                               // 0x00E0(0x0018)()
	class FText                                   Temp_text_Variable9;                               // 0x00F8(0x0018)()
	class FText                                   Temp_text_Variable10;                              // 0x0110(0x0018)()
	EPlayMode                                     CallFunc_GetPlayMode_PlayMode;                     // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x0130(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0148(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0188(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0198(0x0018)()
};
static_assert(alignof(BP_AJBTrainingSequence_C_GetConfirmExitText) == 0x000008, "Wrong alignment on BP_AJBTrainingSequence_C_GetConfirmExitText");
static_assert(sizeof(BP_AJBTrainingSequence_C_GetConfirmExitText) == 0x0001B0, "Wrong size on BP_AJBTrainingSequence_C_GetConfirmExitText");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetConfirmExitText, ReturnValue) == 0x000000, "Member 'BP_AJBTrainingSequence_C_GetConfirmExitText::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetConfirmExitText, Temp_byte_Variable) == 0x000018, "Member 'BP_AJBTrainingSequence_C_GetConfirmExitText::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetConfirmExitText, Temp_text_Variable) == 0x000020, "Member 'BP_AJBTrainingSequence_C_GetConfirmExitText::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetConfirmExitText, Temp_text_Variable1) == 0x000038, "Member 'BP_AJBTrainingSequence_C_GetConfirmExitText::Temp_text_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetConfirmExitText, Temp_text_Variable2) == 0x000050, "Member 'BP_AJBTrainingSequence_C_GetConfirmExitText::Temp_text_Variable2' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetConfirmExitText, Temp_text_Variable3) == 0x000068, "Member 'BP_AJBTrainingSequence_C_GetConfirmExitText::Temp_text_Variable3' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetConfirmExitText, Temp_text_Variable4) == 0x000080, "Member 'BP_AJBTrainingSequence_C_GetConfirmExitText::Temp_text_Variable4' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetConfirmExitText, Temp_text_Variable5) == 0x000098, "Member 'BP_AJBTrainingSequence_C_GetConfirmExitText::Temp_text_Variable5' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetConfirmExitText, Temp_text_Variable6) == 0x0000B0, "Member 'BP_AJBTrainingSequence_C_GetConfirmExitText::Temp_text_Variable6' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetConfirmExitText, Temp_text_Variable7) == 0x0000C8, "Member 'BP_AJBTrainingSequence_C_GetConfirmExitText::Temp_text_Variable7' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetConfirmExitText, Temp_text_Variable8) == 0x0000E0, "Member 'BP_AJBTrainingSequence_C_GetConfirmExitText::Temp_text_Variable8' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetConfirmExitText, Temp_text_Variable9) == 0x0000F8, "Member 'BP_AJBTrainingSequence_C_GetConfirmExitText::Temp_text_Variable9' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetConfirmExitText, Temp_text_Variable10) == 0x000110, "Member 'BP_AJBTrainingSequence_C_GetConfirmExitText::Temp_text_Variable10' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetConfirmExitText, CallFunc_GetPlayMode_PlayMode) == 0x000128, "Member 'BP_AJBTrainingSequence_C_GetConfirmExitText::CallFunc_GetPlayMode_PlayMode' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetConfirmExitText, K2Node_Select_Default) == 0x000130, "Member 'BP_AJBTrainingSequence_C_GetConfirmExitText::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetConfirmExitText, K2Node_MakeStruct_FormatArgumentData) == 0x000148, "Member 'BP_AJBTrainingSequence_C_GetConfirmExitText::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetConfirmExitText, K2Node_MakeArray_Array) == 0x000188, "Member 'BP_AJBTrainingSequence_C_GetConfirmExitText::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetConfirmExitText, CallFunc_Format_ReturnValue) == 0x000198, "Member 'BP_AJBTrainingSequence_C_GetConfirmExitText::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function BP_AJBTrainingSequence.BP_AJBTrainingSequence_C.GetNoPPForceExitText
// 0x01B0 (0x01B0 - 0x0000)
struct BP_AJBTrainingSequence_C_GetNoPPForceExitText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	EPlayMode                                     Temp_byte_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0020(0x0018)()
	class FText                                   Temp_text_Variable1;                               // 0x0038(0x0018)()
	class FText                                   Temp_text_Variable2;                               // 0x0050(0x0018)()
	class FText                                   Temp_text_Variable3;                               // 0x0068(0x0018)()
	class FText                                   Temp_text_Variable4;                               // 0x0080(0x0018)()
	class FText                                   Temp_text_Variable5;                               // 0x0098(0x0018)()
	class FText                                   Temp_text_Variable6;                               // 0x00B0(0x0018)()
	class FText                                   Temp_text_Variable7;                               // 0x00C8(0x0018)()
	class FText                                   Temp_text_Variable8;                               // 0x00E0(0x0018)()
	class FText                                   Temp_text_Variable9;                               // 0x00F8(0x0018)()
	class FText                                   Temp_text_Variable10;                              // 0x0110(0x0018)()
	EPlayMode                                     CallFunc_GetPlayMode_PlayMode;                     // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x0130(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0148(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0188(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0198(0x0018)()
};
static_assert(alignof(BP_AJBTrainingSequence_C_GetNoPPForceExitText) == 0x000008, "Wrong alignment on BP_AJBTrainingSequence_C_GetNoPPForceExitText");
static_assert(sizeof(BP_AJBTrainingSequence_C_GetNoPPForceExitText) == 0x0001B0, "Wrong size on BP_AJBTrainingSequence_C_GetNoPPForceExitText");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetNoPPForceExitText, ReturnValue) == 0x000000, "Member 'BP_AJBTrainingSequence_C_GetNoPPForceExitText::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetNoPPForceExitText, Temp_byte_Variable) == 0x000018, "Member 'BP_AJBTrainingSequence_C_GetNoPPForceExitText::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetNoPPForceExitText, Temp_text_Variable) == 0x000020, "Member 'BP_AJBTrainingSequence_C_GetNoPPForceExitText::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetNoPPForceExitText, Temp_text_Variable1) == 0x000038, "Member 'BP_AJBTrainingSequence_C_GetNoPPForceExitText::Temp_text_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetNoPPForceExitText, Temp_text_Variable2) == 0x000050, "Member 'BP_AJBTrainingSequence_C_GetNoPPForceExitText::Temp_text_Variable2' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetNoPPForceExitText, Temp_text_Variable3) == 0x000068, "Member 'BP_AJBTrainingSequence_C_GetNoPPForceExitText::Temp_text_Variable3' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetNoPPForceExitText, Temp_text_Variable4) == 0x000080, "Member 'BP_AJBTrainingSequence_C_GetNoPPForceExitText::Temp_text_Variable4' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetNoPPForceExitText, Temp_text_Variable5) == 0x000098, "Member 'BP_AJBTrainingSequence_C_GetNoPPForceExitText::Temp_text_Variable5' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetNoPPForceExitText, Temp_text_Variable6) == 0x0000B0, "Member 'BP_AJBTrainingSequence_C_GetNoPPForceExitText::Temp_text_Variable6' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetNoPPForceExitText, Temp_text_Variable7) == 0x0000C8, "Member 'BP_AJBTrainingSequence_C_GetNoPPForceExitText::Temp_text_Variable7' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetNoPPForceExitText, Temp_text_Variable8) == 0x0000E0, "Member 'BP_AJBTrainingSequence_C_GetNoPPForceExitText::Temp_text_Variable8' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetNoPPForceExitText, Temp_text_Variable9) == 0x0000F8, "Member 'BP_AJBTrainingSequence_C_GetNoPPForceExitText::Temp_text_Variable9' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetNoPPForceExitText, Temp_text_Variable10) == 0x000110, "Member 'BP_AJBTrainingSequence_C_GetNoPPForceExitText::Temp_text_Variable10' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetNoPPForceExitText, CallFunc_GetPlayMode_PlayMode) == 0x000128, "Member 'BP_AJBTrainingSequence_C_GetNoPPForceExitText::CallFunc_GetPlayMode_PlayMode' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetNoPPForceExitText, K2Node_Select_Default) == 0x000130, "Member 'BP_AJBTrainingSequence_C_GetNoPPForceExitText::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetNoPPForceExitText, K2Node_MakeStruct_FormatArgumentData) == 0x000148, "Member 'BP_AJBTrainingSequence_C_GetNoPPForceExitText::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetNoPPForceExitText, K2Node_MakeArray_Array) == 0x000188, "Member 'BP_AJBTrainingSequence_C_GetNoPPForceExitText::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetNoPPForceExitText, CallFunc_Format_ReturnValue) == 0x000198, "Member 'BP_AJBTrainingSequence_C_GetNoPPForceExitText::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function BP_AJBTrainingSequence.BP_AJBTrainingSequence_C.GetTerminateGameText
// 0x0208 (0x0208 - 0x0000)
struct BP_AJBTrainingSequence_C_GetTerminateGameText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	class FText                                   Temp_text_Variable;                                // 0x0018(0x0018)()
	class FText                                   Temp_text_Variable1;                               // 0x0030(0x0018)()
	class FText                                   Temp_text_Variable2;                               // 0x0048(0x0018)()
	class FText                                   Temp_text_Variable3;                               // 0x0060(0x0018)()
	class FText                                   Temp_text_Variable4;                               // 0x0078(0x0018)()
	class FText                                   Temp_text_Variable5;                               // 0x0090(0x0018)()
	class FText                                   Temp_text_Variable6;                               // 0x00A8(0x0018)()
	class FText                                   Temp_text_Variable7;                               // 0x00C0(0x0018)()
	class FText                                   Temp_text_Variable8;                               // 0x00D8(0x0018)()
	class FText                                   Temp_text_Variable9;                               // 0x00F0(0x0018)()
	class FText                                   Temp_text_Variable10;                              // 0x0108(0x0018)()
	bool                                          Temp_bool_Variable;                                // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable11;                              // 0x0128(0x0018)()
	class FText                                   Temp_text_Variable12;                              // 0x0140(0x0018)()
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayMode                                     CallFunc_GetPlayMode_PlayMode;                     // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayMode                                     Temp_byte_Variable;                                // 0x015A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15B[0x1];                                      // 0x015B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCacheInteger_OutValue;                 // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCacheInteger_ReturnValue;              // 0x0164(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_165[0x3];                                      // 0x0165(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x0168(0x0018)()
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0188(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x01C8(0x0010)(ZeroConstructor, ReferenceParm)
	class FText                                   K2Node_Select1_Default;                            // 0x01D8(0x0018)()
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x01F0(0x0018)()
};
static_assert(alignof(BP_AJBTrainingSequence_C_GetTerminateGameText) == 0x000008, "Wrong alignment on BP_AJBTrainingSequence_C_GetTerminateGameText");
static_assert(sizeof(BP_AJBTrainingSequence_C_GetTerminateGameText) == 0x000208, "Wrong size on BP_AJBTrainingSequence_C_GetTerminateGameText");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetTerminateGameText, ReturnValue) == 0x000000, "Member 'BP_AJBTrainingSequence_C_GetTerminateGameText::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetTerminateGameText, Temp_text_Variable) == 0x000018, "Member 'BP_AJBTrainingSequence_C_GetTerminateGameText::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetTerminateGameText, Temp_text_Variable1) == 0x000030, "Member 'BP_AJBTrainingSequence_C_GetTerminateGameText::Temp_text_Variable1' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetTerminateGameText, Temp_text_Variable2) == 0x000048, "Member 'BP_AJBTrainingSequence_C_GetTerminateGameText::Temp_text_Variable2' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetTerminateGameText, Temp_text_Variable3) == 0x000060, "Member 'BP_AJBTrainingSequence_C_GetTerminateGameText::Temp_text_Variable3' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetTerminateGameText, Temp_text_Variable4) == 0x000078, "Member 'BP_AJBTrainingSequence_C_GetTerminateGameText::Temp_text_Variable4' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetTerminateGameText, Temp_text_Variable5) == 0x000090, "Member 'BP_AJBTrainingSequence_C_GetTerminateGameText::Temp_text_Variable5' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetTerminateGameText, Temp_text_Variable6) == 0x0000A8, "Member 'BP_AJBTrainingSequence_C_GetTerminateGameText::Temp_text_Variable6' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetTerminateGameText, Temp_text_Variable7) == 0x0000C0, "Member 'BP_AJBTrainingSequence_C_GetTerminateGameText::Temp_text_Variable7' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetTerminateGameText, Temp_text_Variable8) == 0x0000D8, "Member 'BP_AJBTrainingSequence_C_GetTerminateGameText::Temp_text_Variable8' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetTerminateGameText, Temp_text_Variable9) == 0x0000F0, "Member 'BP_AJBTrainingSequence_C_GetTerminateGameText::Temp_text_Variable9' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetTerminateGameText, Temp_text_Variable10) == 0x000108, "Member 'BP_AJBTrainingSequence_C_GetTerminateGameText::Temp_text_Variable10' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetTerminateGameText, Temp_bool_Variable) == 0x000120, "Member 'BP_AJBTrainingSequence_C_GetTerminateGameText::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetTerminateGameText, Temp_text_Variable11) == 0x000128, "Member 'BP_AJBTrainingSequence_C_GetTerminateGameText::Temp_text_Variable11' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetTerminateGameText, Temp_text_Variable12) == 0x000140, "Member 'BP_AJBTrainingSequence_C_GetTerminateGameText::Temp_text_Variable12' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetTerminateGameText, CallFunc_MakeLiteralByte_ReturnValue) == 0x000158, "Member 'BP_AJBTrainingSequence_C_GetTerminateGameText::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetTerminateGameText, CallFunc_GetPlayMode_PlayMode) == 0x000159, "Member 'BP_AJBTrainingSequence_C_GetTerminateGameText::CallFunc_GetPlayMode_PlayMode' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetTerminateGameText, Temp_byte_Variable) == 0x00015A, "Member 'BP_AJBTrainingSequence_C_GetTerminateGameText::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetTerminateGameText, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00015C, "Member 'BP_AJBTrainingSequence_C_GetTerminateGameText::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetTerminateGameText, CallFunc_GetCacheInteger_OutValue) == 0x000160, "Member 'BP_AJBTrainingSequence_C_GetTerminateGameText::CallFunc_GetCacheInteger_OutValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetTerminateGameText, CallFunc_GetCacheInteger_ReturnValue) == 0x000164, "Member 'BP_AJBTrainingSequence_C_GetTerminateGameText::CallFunc_GetCacheInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetTerminateGameText, K2Node_Select_Default) == 0x000168, "Member 'BP_AJBTrainingSequence_C_GetTerminateGameText::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetTerminateGameText, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000180, "Member 'BP_AJBTrainingSequence_C_GetTerminateGameText::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetTerminateGameText, K2Node_MakeStruct_FormatArgumentData) == 0x000188, "Member 'BP_AJBTrainingSequence_C_GetTerminateGameText::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetTerminateGameText, K2Node_MakeArray_Array) == 0x0001C8, "Member 'BP_AJBTrainingSequence_C_GetTerminateGameText::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetTerminateGameText, K2Node_Select1_Default) == 0x0001D8, "Member 'BP_AJBTrainingSequence_C_GetTerminateGameText::K2Node_Select1_Default' has a wrong offset!");
static_assert(offsetof(BP_AJBTrainingSequence_C_GetTerminateGameText, CallFunc_Format_ReturnValue) == 0x0001F0, "Member 'BP_AJBTrainingSequence_C_GetTerminateGameText::CallFunc_Format_ReturnValue' has a wrong offset!");

}

